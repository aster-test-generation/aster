/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    private CommandLine commandLine;

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ApPN0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectReturnsValue_AZPP0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        CommandLine spyCommandLine = spy(commandLine);
        String opt = "option";
        Object expectedValue = new Object();
        doReturn(expectedValue).when(spyCommandLine).getParsedOptionValue(opt);
        Object result = spyCommandLine.getOptionObject(opt);
        verify(spyCommandLine).getParsedOptionValue(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectThrowsParseException_Vimu1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        CommandLine spyCommandLine = spy(commandLine);
        String opt = "option";
        ParseException parseException = new ParseException("Error parsing");
        doThrow(parseException).when(spyCommandLine).getParsedOptionValue(opt);
        Object result = spyCommandLine.getOptionObject(opt);
        verify(spyCommandLine).getParsedOptionValue(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNullOption_vTxA3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        CommandLine spyCommandLine = spy(commandLine);
        String opt = null;
        doReturn(null).when(spyCommandLine).getParsedOptionValue(opt);
        Object result = spyCommandLine.getOptionObject(opt);
        verify(spyCommandLine).getParsedOptionValue(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_Iolu0() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Integer defaultValue = 10;
        Integer expectedValue = 10; // Assumingnew CommandLine().getParsedOptionValue(String, T) returns the default value
        try {
            Integer result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expectedValue, result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_BbEi0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a'; // Example option character
        Object expectedValue = null; // Expected value should match the expected output of the method for the given input
        assertEquals(expectedValue, commandLine.getParsedOptionValue(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_KNIO0_XtuI0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String result = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result, "Expected default value when option is resolved and parsed correctly");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_sWjU00_oEFy0() throws org.apache.commons.cli.ParseException {
        CommandLine commandLine = new CommandLine();
        Option mockOption = new Option("option", "This is a test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithNoValues_YWYG3_CdRf0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("d", "delta", false, "description"); // Corrected constructor usage
        commandLine.addOption(option); // Assuming there's a method to add options
        Properties result = commandLine.getOptionProperties("d");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_EAAf0_cPbA0() throws ParseException {
        CommandLine commandLine = mock(CommandLine.class);
        String opt = "optionKey";
        when(commandLine.getParsedOptionValue(opt)).thenReturn("expectedValue");
        Object result = commandLine.getParsedOptionValue(opt);
        verify(commandLine).getParsedOptionValue(opt);
        assert "expectedValue".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_EmptyOptions_zTmY0_geHu0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        Properties result = commandLine.getOptionProperties(option);
        assertTrue(result.isEmpty(), "Properties should be empty");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_SingleOption_mLPe1_JKYs0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        commandLine.addOption(option); // Assuming there's a method to add options
        Properties result = commandLine.getOptionProperties(option);
        assertNotNull(result, "Properties should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_OptionMatch_oDpC2_KyZw0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        commandLine.addOption(option); // Assuming there's a method to add options
        Properties result = commandLine.getOptionProperties(option);
        assertNotNull(result, "Properties should not be null when option matches");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_OptionNotMatch_AScW4_QVOH0() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "Test option 1");
        Option option2 = new Option("test2", "Test option 2");
        commandLine.addOption(option1); // Assuming there's a method to add options
        Properties result = commandLine.getOptionProperties(option2);
        assertTrue(result.isEmpty(), "Properties should be empty when no matching option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_ReturnProperties_qiOi5_YUqQ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "Test option");
        commandLine.addOption(option); // Assuming there's a method to add options
        Properties result = commandLine.getOptionProperties(option);
        assertNotNull(result, "Properties should be returned");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_PRbV0_QYJZ0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Object result = commandLine.getOptionObject(opt);
        assertNull(result, "Expected null when option is not set");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultProvider_HVvf0_CTmL0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "Option for testing", false, "This is a test option");
        Object result = commandLine.getParsedOptionValue(option);
        assertNull(result, "Expected result to be null when default value provider returns null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_OptionMatches_oGax0_okCE0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "description");
        Option processedOption = new Option("opt", "longOpt", true, "description");
        commandLine.addOption(processedOption); // Corrected method to add options
        processedOption.setArgs(1);
        processedOption.addValue("value1");
        String[] result = commandLine.getOptionValues(option);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_OptionMatches_oGax0_okCE0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "description");
        Option processedOption = new Option("opt", "longOpt", true, "description");
        commandLine.addOption(processedOption); // Corrected method to add options
        processedOption.setArgs(1);
        processedOption.addValue("value1");
        String[] result = commandLine.getOptionValues(option);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_OptionMatches_oGax0_okCE0_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "description");
        Option processedOption = new Option("opt", "longOpt", true, "description");
        commandLine.addOption(processedOption); // Corrected method to add options
        processedOption.setArgs(1);
        processedOption.addValue("value1");
        String[] result = commandLine.getOptionValues(option);
        assertEquals("value1", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_OptionDoesNotMatch_swgd1_JfNL0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "description");
        Option processedOption = new Option("opt2", "longOpt2", true, "description2");
        commandLine.addOption(processedOption);
        String[] result = commandLine.getOptionValues(option);
        assertNull(result);
    }
}