/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    private HelpFormatter helpFormatter;
    private PrintWriter printWriter;
    private Options options;
    private Option option;
    private OptionGroup optionGroup;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedWithinWidth_IWAC0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10; // Width is more than the position of line feed
        int startPos = 0;
        int expected = text.indexOf('\n') + 1; // Expected to break at line feed
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_SpaceBreak_BHar1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5; // Width causes break at space
        int startPos = 0;
        int expected = 5; // Position of space
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NoBreakCharacter_IPPL2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 5; // No break character within width
        int startPos = 0;
        int expected = 5; // Should return startPos + width
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EndOfString_zKgM3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello";
        int width = 5; // Width exactly matches the string length
        int startPos = 0;
        int expected = -1; // Should return -1 as it reaches the end of the string
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNonNullComparator_nQbK0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        when(options.helpOptions()).thenReturn(new ArrayList<>());
        when(formatter.getOptionComparator()).thenReturn((o1, o2) -> 0);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        verify(formatter).getOptionComparator();
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_EFEO0_fAQL0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter printWriter = new PrintWriter(System.out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNullArgNameUsesDefault_gVKj8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName(null);
        options.addOption(option);
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        when(formatter.getArgName()).thenReturn("defaultArg");
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("<defaultArg>"));
    }
}