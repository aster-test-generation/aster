/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyValues_Kudv0() {
        Option option = new Option("opt", "Option with no values");
        assertNull("Expected null when no values are present", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptionAndArg_cTrZ0() {
        Option option = new Option("o", "longOption", true, "description");
        String expected = "[ Option o longOption [ARG] :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlyShortOptionAndArg_QvAz1() {
        Option option = new Option("o", true, "description");
        String expected = "[ Option o [ARG] :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlyShortOptionNoArg_BdYo2() {
        Option option = new Option("o", "description");
        String expected = "[ Option o :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptionNoArg_ghTW3() {
        Option option = new Option("o", "longOption", false, "description");
        String expected = "[ Option o longOption :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_WithArgAndAtLimit_gZqm1() {
        Option option = new Option("b", true, "Option with argument at limit");
        option.addValue("value1");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_WithOptionalArgAndAtLimit_MJjD3() {
        Option option = new Option("d", "longD", true, "Option with optional argument at limit");
        option.addValue("value1");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_WithMultipleArgsUnderLimit_BSWY5() {
        Option option = new Option("f", "longF", true, "Option with multiple arguments");
        option.addValue("value1");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithNullConverter_OJbA0() {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertNull(option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_DefaultSeparator_bEjF0() {
        Option option = new Option("a", "Option A");
        assertEquals(';', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithMultipleArguments_KhqT0_0() {
        Option option = new Option("o", "option", true, "Option with multiple arguments");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneCreatesDeepCopy_eSJX0_3() {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertNotSame(originalOption.getValues(), clonedOption.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_ZLSp0() {
        Option option = new Option("option", "A test option");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorTrue_qjut0() {
        Option option = new Option("o", "option", true, "Option with value separator");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenValuesArePresent_pRIj1() {
        Option option = new Option("option", "Has values", true, "Test with values");
        option.addValue("value1");
        option.addValue("value2");
        String[] expected = {"value1", "value2"};
        String[] result = option.getValues();
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeReturnsCorrectType_DLJM0() {
        Option option = new Option("o", "option", true, "Option with type");
        assertNull(option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_DefaultValue_aFKw0() {
        Option option = new Option("opt", "Option without argName");
        assertEquals("", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_iKyz0() {
        Option option = new Option("opt", "longOpt", true, "Test option with argument");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithArg_BxFr0() {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidIndex_JVTL1_qXSC0() {
        Option option = new Option("opt", "Option with multiple values");
        try {
            option.addValue("value1");
            option.addValue("value2");
        } catch (UnsupportedOperationException e) {
        }
        assertEquals("Expected to retrieve the correct value", "value1", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithSingleValueSeparator_irDb1_IytW0_1() {
        Option option = new Option("opt", "longOpt", true, "Test option with single value separator");
        option.setValueSeparator(',');
        option.processValue("value1,value2");
        assertEquals("value1", option.getValuesList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithSingleValueSeparator_irDb1_IytW0_2() {
        Option option = new Option("opt", "longOpt", true, "Test option with single value separator");
        option.setValueSeparator(',');
        option.processValue("value1,value2");
        assertEquals("value2", option.getValuesList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithMultipleValueSeparators_oTXw2_XtpD0_1() {
        Option option = new Option("opt", "longOpt", true, "Test option with multiple value separators");
        option.setValueSeparator(',');
        option.processValue("val1,val2,val3");
        assertEquals("val1", option.getValuesList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithMultipleValueSeparators_oTXw2_XtpD0_2() {
        Option option = new Option("opt", "longOpt", true, "Test option with multiple value separators");
        option.setValueSeparator(',');
        option.processValue("val1,val2,val3");
        assertEquals("val2", option.getValuesList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithMultipleValueSeparators_oTXw2_XtpD0_3() {
        Option option = new Option("opt", "longOpt", true, "Test option with multiple value separators");
        option.setValueSeparator(',');
        option.processValue("val1,val2,val3");
        assertEquals("val3", option.getValuesList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValueWhenValueIsEmpty_hGqT4_Rsha0() {
        Option option = new Option("e", "Option E");
        option.addValue("");
        assertEquals("", option.getValue("default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithSingleValueSeparator_irDb1_IytW0_1_fid1() {
        Option option = new Option("opt", "longOpt", true, "Test option with single value separator");
        option.setValueSeparator(',');
        option.processValue("value1,value2,value2");
        assertEquals("value1,value2", option.getValuesList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithMultipleValueSeparators_oTXw2_XtpD0_1_fid1() {
        Option option = new Option("opt", "longOpt", true, "Test option with multiple value separators");
        option.setValueSeparator(',');
        option.processValue("val1,val2,val3,val2,val3");
        assertEquals("val1,val2,val3", option.getValuesList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneCreatesDeepCopy_eSJX0() {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertNotSame(originalOption, clonedOption);
        assertEquals(originalOption.getDescription(), clonedOption.getDescription());
        assertNotSame(originalOption.getValues(), clonedOption.getValues());
        assertEquals(originalOption.getValues(), clonedOption.getValues());
    }
}