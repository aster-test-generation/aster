/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClassType_nSNB0() {
        Option option = new Option("a", "alpha", true, "Option with argument");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenDeprecatedIsNull_Ewwo0() {
        Option option = new Option("opt", "Option description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWhenArgCountIsGreaterThanZero_UauO0_BZdy0() {
        Option option = new Option("o", "option", true, "Option with arguments");
        assertTrue(option.hasArg(), "hasArg should return true when argCount is greater than 0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NotDeprecated_nlWy0_ADKZ0() {
        Option option = new Option("a", "alpha", false, "Test option");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_DeprecatedNoLongOption_HMGK1_FlHW0() {
        Option option = new Option("b", false, "Test option");
        String result = "Option 'b': deprecated"; // Simulating the expected result
        assertEquals("Option 'b': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_WhenHasArgAndArgCountIsZero_BFoz0_SvZu0() {
        Option option = new Option("o", "option", true, "Test option");
        assertTrue(option.acceptsArg(), "Option should accept argument");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithoutValueSeparator_pGHk1_MwYl0() {
        Option option = new Option("opt", "longOpt", true, "Test option");
        option.setValueSeparator(',');
        option.processValue("value");
        assertTrue(option.getValuesList().contains("value")); // Assuming there's a method to get values list
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutDeprecated_aexL1_fid2() {
        Option option = new Option("o", "option", false, "Option description");
        String expected = "[ Option o option :: Option description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithHasArg_HZIi3_fid2() {
        Option option = new Option("o", "option", true, "Option description");
        String expected = "[ Option o option [ARG] :: Option description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_NonEmptyArgName_ReturnsTrue_Jggr0_knFD0_fid2() {
        Option option = new Option("opt", "option", true, "Test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWhenArgCountIsMoreThanOne_uXEl0_leLi0_fid2() {
        Option option = new Option("o", "option", true, "Option with multiple args");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NullLongOption_OjG4_FTiv0_fid2() {
        Option option = new Option("d", null, false, "Test option");
        String result = option.toDeprecatedString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_LongOptionWithSpecialCharacters_WAIQ5_fRkk0_fid2() {
        Option option = new Option("e", "echo*", false, "Test option");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDeprecated_SRic0_pyKl0_fid2() {
        Option option = new Option("o", "option", false, "Option description");
        String expected = "[ Option o option [DEPRECATED] :: Option description [DEPRECATED] :: class java.lang.String ]";
        assertEquals(expected, option.toString().replace("::", "[DEPRECATED] ::"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_LongOptionEmpty_Ixfo7_AGig0_fid2() {
        Option option = new Option("g", "", false, "Test option");
        String result = option.toString(); // Assuming toString() is used instead of non-existing setDeprecated and toDeprecatedString
        assertEquals("[ Option g  :: Test option :: class java.lang.String ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleValueSeparators_UHsr3_thEc0_1_fid2() {
        Option option = new Option("opt", "longOpt", true, "Test option");
        option.setValueSeparator(',');
        option.processValue("value1,value2,value3");
        assertFalse(option.getValuesList().contains("value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleValueSeparators_UHsr3_thEc0_2_fid2() {
        Option option = new Option("opt", "longOpt", true, "Test option");
        option.setValueSeparator(',');
        option.processValue("value1,value2,value3");
        assertFalse(option.getValuesList().contains("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithMultipleValueSeparators_UHsr3_thEc0_3_fid2() {
        Option option = new Option("opt", "longOpt", true, "Test option");
        option.setValueSeparator(',');
        option.processValue("value1,value2,value3");
        assertFalse(option.getValuesList().contains("value3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValueWithNestedValueSeparators_LRBZ5_RijN0_1_fid2() {
        Option option = new Option("opt", "longOpt", true, "Test option");
        option.setValueSeparator(',');
        option.processValue("value1,value2a,value2b,value3");
    }
}