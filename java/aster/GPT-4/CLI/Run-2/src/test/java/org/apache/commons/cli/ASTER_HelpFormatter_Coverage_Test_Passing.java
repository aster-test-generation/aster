/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithLineFeedWithinWidth_Ovsc0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int expected = 6; // Position after '\n'
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithTabWithinWidth_bIGA1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int expected = 6; // Position after '\t'
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithBreakableCharacter_VVaq2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int expected = 5; // Position at space ' '
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosAtTextLength_BRRC3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int expected = -1; // No wrap position because pos == text.length()
        assertEquals(expected, formatter.findWrapPos(text, width, startPos));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withEmptyArgName_rDRF1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName("");
        List<Option> optionList = Collections.singletonList(option);
        when(options.helpOptions()).thenReturn(optionList);
        StringBuffer sb = formatter.renderOptions(new StringBuffer(), 80, options, 2, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withArgName_YErq4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName("arg");
        List<Option> optionList = Collections.singletonList(option);
        when(options.helpOptions()).thenReturn(optionList);
        StringBuffer sb = formatter.renderOptions(new StringBuffer(), 80, options, 2, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withoutOptionComparator_RYOB8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        when(options.helpOptions()).thenReturn(new ArrayList<>());
        when(formatter.getOptionComparator()).thenReturn(null);
        StringBuffer sb = formatter.renderOptions(new StringBuffer(), 80, options, 2, 5);
    }
}