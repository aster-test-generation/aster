/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_CoverSpecialCondition_DnUD0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 9;
        String text = "123456789 123456789 123456789";
        formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "123456789\n         123456789\n         123456789";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withLongOptSeparator_dKeC3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", true, "description");
        option.setLongOpt("alpha");
        List<Option> optionList = Collections.singletonList(option);
        when(options.helpOptions()).thenReturn(optionList);
        when(formatter.getLongOptSeparator()).thenReturn("=");
        StringBuffer sb = formatter.renderOptions(new StringBuffer(), 80, options, 2, 5);
    }
}