/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_uiTp0() {
        HelpFormatter formatter = new HelpFormatter();
        String expected = "-";
        assertEquals(expected, formatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_lORW0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(100);
        assertEquals(100, formatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_ohCN0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getLongOptSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_SingleLine_QJzQ0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a test.";
        StringBuffer result = formatter.renderWrappedText(sb, 30, 5, text);
        assertEquals("This is a test.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_MultiLineWrap_PPqC1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a longer line that should wrap several times given the width is small.";
        StringBuffer result = formatter.renderWrappedText(sb, 20, 5, text);
        assertTrue(result.toString().contains("\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_NoWrapNeeded_shhw2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "Short line";
        StringBuffer result = formatter.renderWrappedText(sb, 50, 5, text);
        assertEquals("Short line", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ExactWidth_dsnT3() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "1234567890";
        StringBuffer result = formatter.renderWrappedText(sb, 10, 2, text);
        assertEquals("1234567890", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_TabStopGreaterThanWidth_AaMU4() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This text has a tab stop greater than the width.";
        StringBuffer result = formatter.renderWrappedText(sb, 10, 15, text);
        assertTrue(result.toString().contains("\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyText_GfLU5() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        StringBuffer result = formatter.renderWrappedText(sb, 10, 2, text);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedBeforeWidth_dcoE0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_TabBeforeWidth_MJiw1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NoSpecialCharWithinWidth_RFjA2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EndOfString_SUrX3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 20;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedAtWidth_pBlK5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_CarriageReturnWithinWidth_TOxe5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\rWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_StartPosAtMiddle_ApyM9() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 6;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WidthZero_Hihy10() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 0;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_AllSpaces_OtxT11() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "     ";
        int width = 3;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_hppt0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("exampleArgName");
        assertEquals("exampleArgName", formatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_IxPg0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithAutoUsage_LJOJ0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        formatter.printHelp(cmdLineSyntax, options, true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithPositiveLength_AlCV0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_RJDU0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "use -help for options";
        String header = "Header";
        String footer = "Footer";
        int width = 80;
        formatter.printHelp(width, cmdLineSyntax, header, options, footer);
        assertTrue(true); // Placeholder assertion
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithEmptyOptions_ixmT0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOneOptionNoArg_bRpi1_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "Option without argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOneOptionNoArg_bRpi1_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "Option without argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Option without argument"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOneOptionWithArg_gAoU2_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("b", "optionB", true, "Option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOneOptionNoArg_bRpi1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "Option without argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a"));
        assertTrue(result.toString().contains("Option without argument"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithLongOptionOnly_ShSY4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "longOnly", false, "Long option only");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("--longOnly"));
        assertTrue(result.toString().contains("Long option only"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_IPeR0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setNewLine("\n");
        assertEquals("\n", formatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_iNSI0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: myapp";
        String header = "Header section";
        String footer = "Footer section";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_tZAU0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getNewLine();
        assertEquals(System.getProperty("line.separator"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_DGnr0() {
        HelpFormatter formatter = new HelpFormatter();
        String prefix = "--";
        formatter.setLongOptPrefix(prefix);
        assertEquals(prefix, formatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_srpk0() {
        HelpFormatter formatter = new HelpFormatter();
        Comparator<Option> comparator = formatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_JHyw0() {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "newPrefix";
        formatter.setOptPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_rKsF0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(5);
        assertEquals(5, formatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_UuFK0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getLongOptPrefix();
        assertEquals("--", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNullInput_iMJW0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithEmptyString_JVnW1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNoTrailingSpaces_FkSJ3() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("text");
        assertEquals("text", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_FdOS0() {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "Usage: ";
        formatter.setSyntaxPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_wwfh0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: app";
        String header = "Header of the help";
        String footer = "Footer of the help";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithOneOptionWithArg_gAoU2_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("b", "optionB", true, "Option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Option with argument"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMultipleOptions_vqYA3_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "First option");
        options.addOption("b", "optionB", true, "Second option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMultipleOptions_vqYA3_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "First option");
        options.addOption("b", "optionB", true, "Second option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("First option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMultipleOptions_vqYA3_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "First option");
        options.addOption("b", "optionB", true, "Second option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Second option with argument"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithLongOptionOnly_ShSY4_1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "longOnly", false, "Long option only");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("--longOnly"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithLongOptionOnly_ShSY4_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "longOnly", false, "Long option only");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Long option only"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithAllOptionsHavingLong_zQRS5_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "longA", false, "Option A");
        options.addOption("b", "longB", true, "Option B");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Option A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithAllOptionsHavingLong_zQRS5_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "longA", false, "Option A");
        options.addOption("b", "longB", true, "Option B");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Option B"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithSpecialCharactersInDescription_aoGf7_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("d", "longD", false, "Description with special characters: <&>");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Description with special characters: <&>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNullDescription_AblL8_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("e", "longE", false, null);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertFalse(result.toString().contains("null"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithEmptyDescription_rtMg9_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("f", "longF", false, "");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertFalse(result.toString().contains("<description>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithHighPadding_mwsL10_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("g", "longG", false, "Option with high padding");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 10, 10);
        assertTrue(result.toString().contains("Option with high padding"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithZeroPadding_OiPy11_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "longH", false, "Option with zero padding");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 0, 0);
        assertTrue(result.toString().contains("Option with zero padding"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithVeryWideWidth_QgPv14_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("k", "longK", true, "Option with very wide width");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 200, options, 2, 5);
        assertTrue(result.toString().contains("Option with very wide width"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNullOption_Kyav15_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, null, false, "Null option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Null option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMixedOptions_SJCM17_2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("l", "longL", true, "Option with arg");
        options.addOption("m", null, false, "Short only option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-m"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMixedOptions_SJCM17_3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("l", "longL", true, "Option with arg");
        options.addOption("m", null, false, "Short only option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Option with arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithMixedOptions_SJCM17_4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("l", "longL", true, "Option with arg");
        options.addOption("m", null, false, "Short only option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Short only option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_BJwR0_1() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getArgName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_zCNS0_NpGJ0() {
        HelpFormatter formatter = new HelpFormatter();
        Comparator<Option> comparator = Comparator.comparing(Option::getKey);
        formatter.setOptionComparator(comparator);
        assertSame(comparator, formatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_XRSV0_veXW0() {
        HelpFormatter formatter = new HelpFormatter();
        String separator = "--";
        formatter.setLongOptSeparator(separator);
        assertEquals(separator, formatter.getLongOptSeparator());
    }
}