/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_PWvL2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_NlDS0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_NlDS0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderReturnsNonNullBuilderInstance_REIh0() {
        assertNotNull(DefaultParser.builder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aNxM0() throws ParseException {
        Options options = new Options();
        options.addOption("test", "testLong", false, "Test description");
        String[] arguments = new String[]{"--testLong"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_XVuS1() throws ParseException {
        Options options = new Options();
        options.addOption("t", "test", true, "Test description");
        String[] arguments = new String[]{"-t", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_teMu2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRbE3_1() throws ParseException {
        Options options = new Options();
        options.addOption("t", "test", true, "Test description");
        String[] arguments = new String[]{"-t", "value", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRbE3_2() throws ParseException {
        Options options = new Options();
        options.addOption("t", "test", true, "Test description");
        String[] arguments = new String[]{"-t", "value", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fHQD1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArgumentsAndNoProperties_lVQP0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArgumentsAndNoProperties_lVQP0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndStopAtNonOption_fyGk2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndStopAtNonOption_fyGk2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndStopAtNonOption_fyGk2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals(1, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndStopAtNonOption_fyGk2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("randomArg", result.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_TQPq3_1() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_TQPq3_2() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_TQPq3_3() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_exdr0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha description");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_exdr0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha description");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_rbcU1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta description");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OsRf3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("e", "echo", true, "Echo description");
        String[] arguments = new String[]{"--echo=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("echo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OsRf3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("e", "echo", true, "Echo description");
        String[] arguments = new String[]{"--echo=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("value", result.getOptionValue("echo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OsRf3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("e", "echo", true, "Echo description");
        String[] arguments = new String[]{"--echo=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_EtIa0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_IyeM1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_wCHq2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "charlie", false, "Charlie option");
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cpKy3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = new String[]{"-d", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cpKy3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = new String[]{"-d", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("non-option-arg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_yqyq0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_yqyq0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_tGJH1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_WOEO2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--gamma"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_vPHv3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"--delta=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_vPHv3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"--delta=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("value", result.getOptionValue("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_vPHv3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"--delta=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_Bewg2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        String[] arguments = {"--unknown"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties(), false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_agNo3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unrecognized option"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_fdEL0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option without argument");
        String[] arguments = new String[]{"--alpha"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_FpvO1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Option with argument");
        String[] arguments = new String[]{"--beta=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BiXC2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "charlie", false, "Short option");
        String[] arguments = new String[]{"-c"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownTokenAndStopAtNonOption_Siyn3_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("d", "delta", false, "Option before unknown");
        String[] arguments = new String[]{"-d", "unknown"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownTokenAndStopAtNonOption_Siyn3_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("d", "delta", false, "Option before unknown");
        String[] arguments = new String[]{"-d", "unknown"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertFalse(result.hasOption("unknown"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_nGuj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine expected = new CommandLine();
        try {
            CommandLine result = parser.parse(options, new String[]{}, null, false);
            assertEquals(expected.getOptions().length, result.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_mhBB1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--beta"};
        try {
            parser.parse(options, arguments, null, false);
            fail("Expected ParseException for unknown option");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --beta", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_EFjU2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        try {
            CommandLine result = parser.parse(options, arguments, null, false);
            assertTrue(result.hasOption("alpha"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownLongOption_KQwM1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("unknown"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_eKLT0_1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AllOptionsProvided_hztu0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--alpha=123", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AllOptionsProvided_hztu0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--alpha=123", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AllOptionsProvided_hztu0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--alpha=123", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("123", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AllOptionsProvided_hztu0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--alpha=123", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNull(result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithUnknownOption_yeng1() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_StopAtNonOption_buVh2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123", "nonOptionArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_StopAtNonOption_buVh2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123", "nonOptionArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("123", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_StopAtNonOption_buVh2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123", "nonOptionArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.getArgList().contains("nonOptionArg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPropertiesOverride_trWs3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_PXsy2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--unknown"};
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_TEBQ0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_TEBQ0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_ZFzg1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--beta"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unrecognized option"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_huDI2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected MissingArgumentException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e instanceof MissingArgumentException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_rMIq3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_rMIq3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_rMIq3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneValidLongOption_VcHx1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneValidLongOptionWithArgument_Znvj2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=123"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneValidLongOptionWithArgument_Znvj2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=123"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("123", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousLongOption_mFRW3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", false, "Config option");
        options.addOption("d", "configuration", false, "Configuration option");
        String[] arguments = new String[]{"--conf"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected an AmbiguousOptionException to be thrown");
        } catch (AmbiguousOptionException e) {
            assertEquals("--conf", e.getOption());
            assertTrue(e.getMatchingOptions().contains("config"));
            assertTrue(e.getMatchingOptions().contains("configuration"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_EZZb1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownLongOption_PhjD1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException due to unknown option");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_ooUL1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for unrecognized option");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_vlra0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_vlra0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_FqpR1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", false, "A test option");
        String[] arguments = new String[]{"--testOption"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_ltoQ2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknownOption"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oDDa3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oDDa3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("value", result.getOptionValue("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oDDa3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"nonOptionArg"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_TQBN1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for unknown option");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_CKUC1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unrecognized option"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_hWgG2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_hWgG2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_wYSE3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = new String[]{"--output=example.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_wYSE3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = new String[]{"--output=example.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("output"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_wYSE3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = new String[]{"--output=example.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("example.txt", result.getOptionValue("output"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionEquals_hlhL0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionNoEquals_Oedh1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"--beta"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_upyh2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--gamma"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --gamma", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_mGGz3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"-d", "value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_vsZu0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testLong", false, "Test Description");
        String[] arguments = new String[]{"--testLong"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("testLong"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_FBwt1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testLong", true, "Test Description");
        String[] arguments = new String[]{"--testLong=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("testLong"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OxCM3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OxCM3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertEquals("nonOptionArg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_lxVJ0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_dexg1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("setup", "setup", false, "setup mode");
        String[] arguments = {"--setup"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("setup"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_IyaX2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", true, "config file");
        String[] arguments = {"--config=example.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("example.txt", result.getOptionValue("config"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_pLmQ3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose mode");
        options.addOption("d", "debug", false, "debug mode");
        String[] arguments = {"-v", "--debug"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_pLmQ3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose mode");
        options.addOption("d", "debug", false, "debug mode");
        String[] arguments = {"-v", "--debug"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("debug"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_qVCU0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", true, "A long option");
        String[] arguments = new String[]{"--longOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_qVCU0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", true, "A long option");
        String[] arguments = new String[]{"--longOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_drwH1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "shortOption", true, "A short option");
        String[] arguments = new String[]{"-svalue"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_drwH1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "shortOption", true, "A short option");
        String[] arguments = new String[]{"-svalue"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_TTNu3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = new String[]{"-a", "--optionB=valueB"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_TTNu3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = new String[]{"-a", "--optionB=valueB"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_TTNu3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = new String[]{"-a", "--optionB=valueB"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("valueB", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_sNBQ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("option", "longOption", false, "long option description");
        String[] arguments = {"--longOption"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_bNkQ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option with value");
        String[] arguments = {"--option=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_yAwN3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        options.addOption("b", "verbose", false, "verbose mode");
        String[] arguments = {"-a", "--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_yAwN3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        options.addOption("b", "verbose", false, "verbose mode");
        String[] arguments = {"-a", "--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OvAd1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "build", false, "build option");
        String[] arguments = {"--build"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_EloV2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure option");
        String[] arguments = {"--configure=fast"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_EloV2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure option");
        String[] arguments = {"--configure=fast"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("fast", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_ZOVa3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete option");
        options.addOption("e", "edit", true, "edit option");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_ZOVa3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete option");
        options.addOption("e", "edit", true, "edit option");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_ZOVa3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete option");
        options.addOption("e", "edit", true, "edit option");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("text", result.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedShortOption_EYgL0_1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-b"};
        Properties properties = new Properties();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_pQeQ0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"-a", "-b", "value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_pQeQ0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"-a", "-b", "value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_pQeQ0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"-a", "-b", "value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_utrV1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"--alpha", "--beta=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_utrV1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"--alpha", "--beta=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_utrV1_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"--alpha", "--beta=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WrwZ2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Option A");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propValue");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WrwZ2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Option A");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propValue");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("propValue", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ZIsM3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        String[] arguments = {"-a", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_UvQI0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aoyh1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "build", false, "build something");
        String[] arguments = new String[]{"--build"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEqualSignOption_Zvew2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure something");
        String[] arguments = new String[]{"--configure=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GeeD0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lMns1() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--beta=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_WDaZ2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--gamma"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unrecognized option"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uSpo3_1() throws ParseException {
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uSpo3_2() throws ParseException {
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("non-option", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithKnownOption_WKjl1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_bOYf2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_Yepa0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option without argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_avKY1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "longoption", false, "long option without argument");
        String[] arguments = new String[]{"--longoption"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_NKRT2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", true, "option with argument");
        String[] arguments = new String[]{"--config=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_nPXV3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("x", false, "option x");
        options.addOption("y", "yes", false, "option y");
        String[] arguments = new String[]{"-x", "--yes"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_nPXV3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("x", false, "option x");
        options.addOption("y", "yes", false, "option y");
        String[] arguments = new String[]{"-x", "--yes"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_HnTq1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_FOex0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertNotNull(result);
            assertEquals(0, result.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_lGne1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidShortOption_BGMF2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_CWgf3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertNotNull(result);
            assertTrue(result.hasOption("b"));
            assertEquals("value", result.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_cPRz1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--beta"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Should have thrown ParseException for unknown option");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_QKPx2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Should have thrown ParseException for missing required option");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_abjM0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = {"-a"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_NaRc1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("option", "longOption", false, "long option description");
        String[] arguments = {"--longOption"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEqualSign_iggV2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option with argument");
        String[] arguments = {"--option=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_eyYh1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("option", "longOption", false, "long option description");
        String[] arguments = new String[]{"--longOption"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_mIWK2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "buffer", true, "buffer size");
        String[] arguments = new String[]{"--buffer=1024"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("1024", result.getOptionValue("buffer"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_zrlz0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "Option without argument");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_KoCw1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "longoption", false, "Long option without argument");
        String[] arguments = new String[]{"--longoption"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_osVH2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", true, "Option with argument");
        String[] arguments = new String[]{"-c", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownShortOption_fhmu1_1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, stopAtNonOption);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_ahcH1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for unknown option");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("unknown"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithKnownShortOption_iKeG1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("a"));
        } catch (ParseException e) {
            fail("ParseException should not occur for known option");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_SSNR2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--beta=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("beta"));
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException should not occur for correctly formatted long option with argument");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_HnoE3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "charlie", false, "Charlie option");
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = {"-c", "--delta=123"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("c"));
            assertTrue(result.hasOption("delta"));
            assertEquals("123", result.getOptionValue("delta"));
        } catch (ParseException e) {
            fail("ParseException should not occur for multiple valid options");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_SpKP1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "build", false, "build something");
        String[] arguments = new String[]{"--build"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("build"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_MbII2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure something");
        String[] arguments = new String[]{"--configure=fast"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("fast", result.getOptionValue("configure"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_jzwY3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete something");
        options.addOption("e", "edit", true, "edit something");
        String[] arguments = new String[]{"--delete", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("delete"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_jzwY3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete something");
        options.addOption("e", "edit", true, "edit something");
        String[] arguments = new String[]{"--delete", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("text", result.getOptionValue("edit"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_OGuF1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--beta"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unrecognized option"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_mxSU0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_PkLl3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "activate", false, "activate something");
        options.addOption("b", "block", false, "block something");
        String[] arguments = {"-a", "--block"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_PkLl3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "activate", false, "activate something");
        options.addOption("b", "block", false, "block something");
        String[] arguments = {"-a", "--block"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("block"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_JQko1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_KZAb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException for unrecognized option");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithKnownOptionNoArguments_YGoM1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        String[] arguments = {"--verbose"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("verbose"));
        } catch (ParseException e) {
            fail("ParseException should not occur");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_huJy2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("alpha"));
            assertEquals("randomArg", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not occur");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_GGsz3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException should not occur");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredArguments_Jrdz0() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[]{"--required", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertTrue(result.hasOption("required"));
            assertEquals("value", result.getOptionValue("required"));
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredArguments_ZjqY1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[]{"--required"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        assertThrows(MissingArgumentException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Afrh2() {
        Options options = new Options();
        options.addOption("opt", false, "An optional flag");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("opt", "true");
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertTrue(result.hasOption("opt"));
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_rtOG3() {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        String[] arguments = new String[]{"-v", "file.txt"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("verbose"));
            assertArrayEquals(new String[]{"file.txt"}, result.getArgs());
        } catch (ParseException e) {
            fail("ParseException thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllRequiredOptionsProvided_HGhL1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[]{"--required", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertTrue(result.hasOption("required"));
            assertEquals("value", result.getOptionValue("required"));
        } catch (ParseException e) {
            fail("ParseException was not expected.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_CeRB1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("undefinedOption", "true");
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_Newx1_1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("b", "true");
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_IjQx1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("unknown", "value");
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for unrecognized option");
        } catch (ParseException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_jnjf1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("unrecognized", "true");
        assertThrows(UnrecognizedOptionException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_HhKn3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "An option with argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_HhKn3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "An option with argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_HhKn3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "An option with argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_kNwO1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("unrecognized", "value");
        assertThrows(UnrecognizedOptionException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("validOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("value", result.getOptionValue("validOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals(1, result.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("nonOptionArg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_RdZT1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("undefinedOption", "someValue");
        assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsNotProvided_JFhj2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_WhenEqualPresent_tEhS0() {
        String input = "key=value";
        int result = DefaultParser.indexOfEqual(input);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_rtyF0_efod0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        String[] arguments = new String[]{"-ab"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertTrue(cmd.getOptions().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_KkQY2_hZIr0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", null, true, null);
        options.addOption(opt);
        String[] arguments = {"-a123"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_NoStripQuotes_GKHC4_doWu0() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        Options options = new Options();
        options.addOption("a", true, "option a");
        String[] arguments = new String[]{"-a\"value\""};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("\"value\"", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_tavs0_Tlfs0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"), "Expected to have option 'a'");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_thXK1_uZKn0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "build", false, "build something");
        String[] arguments = {"--build"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_hzJs3_pqCY0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete something");
        options.addOption("e", "edit", true, "edit something");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("d"), "Expected to have option 'delete'");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_hzJs3_pqCY0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete something");
        options.addOption("e", "edit", true, "edit something");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("text", result.getOptionValue("e"), "Expected value 'text' for option 'edit'");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pJln3_zhYA0() {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Be verbose");
        String[] arguments = new String[]{"-v", "file.txt"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("v"));
            assertArrayEquals(new String[]{"file.txt"}, result.getArgs());
        } catch (ParseException e) {
            fail("ParseException was not expected.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_Cron0_Ycag0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_Lpjm0_KoGd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, new String[]{"-a"}, new Properties());
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_YGlP1_BbXk0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", false, "option a");
            options.addOption("b", false, "option b");
            options.addOption("c", false, "option c");
            CommandLine cmd = parser.parse(options, new String[]{"-abc"}, new Properties());
            assertTrue(cmd.hasOption("a"));
            assertTrue(cmd.hasOption("b"));
            assertTrue(cmd.hasOption("c"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_rCXi3_Dgzr0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", true, "option with argument");
            CommandLine cmd = parser.parse(options, new String[]{"-a123"}, new Properties());
            assertEquals("123", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithQuotedArgument_zjUd4_KNLV0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", true, "option with argument");
            CommandLine cmd = parser.parse(options, new String[]{"-a", "123"}, new Properties());
            assertEquals("123", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ComplexScenario_KcBQ6_TsjJ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        options.addOption("c", false, "option c");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, new String[]{"-ab123", "-c"}, new Properties());
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
        assertEquals("123", cmd.getOptionValue("b"));
        assertTrue(cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_CrHk0_aINo0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_xkMQ2_THDG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = {"--verbose"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.hasOption("verbose"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_AcNV3_DWEB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("f", "file", true, "Input file");
        String[] arguments = {"--file", "example.txt", "extraArg"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.hasOption("file"));
            assertEquals("example.txt", result.getOptionValue("file"));
            assertArrayEquals(new String[]{"extraArg"}, result.getArgs());
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_IRXD0_RLQh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = {"-a", "-b", "valueB"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
            assertTrue(result.hasOption("a"));
            assertTrue(result.hasOption("b"));
            assertEquals("valueB", result.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_UOdj1_HOeq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = {"--optionA", "--optionB=valueB"};
        try {
            CommandLine result = parser.parse(options, arguments, new Properties());
            assertTrue(result.hasOption("optionA"));
            assertTrue(result.hasOption("optionB"));
            assertEquals("valueB", result.getOptionValue("optionB"));
        } catch (ParseException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_NrIh0_ktQK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertEquals(0, result.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleLongOption_RwmN1_Nxsk0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_slzW2_XySH0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta", "123", "nonOptionArg"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertNotNull(result);
            assertTrue(result.hasOption("beta"));
            assertEquals("123", result.getOptionValue("beta"));
            assertArrayEquals(new String[]{"nonOptionArg"}, result.getArgs());
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumberAsArgument_yRUn3_EQnq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "gamma", true, "Gamma option");
        String[] arguments = new String[]{"--gamma", "-123"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("gamma"));
        assertEquals("-123", result.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_HENB0_uSqx0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionThatAcceptsArgument_UVEP1_FdjK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("file", "filename", true, "Input file name");
        String[] arguments = {"--filename=test.txt"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertEquals("test.txt", result.getOptionValue("filename"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_ihcj2_Uebf0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = {"-v", "extra"};
        Properties properties = new Properties();
        properties.setProperty("verbose", "true");
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("v"));
            assertEquals(1, result.getArgList().size());
            assertEquals("extra", result.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_vVnE2_xSAJ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_qGMX2_KOBh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--beta=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("beta"));
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndStopAtNonOption_BdzA3_XlGs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--alpha", "--beta=value", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties, true);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("alpha"));
        assertTrue(result.hasOption("beta"));
        assertEquals("value", result.getOptionValue("beta"));
        assertEquals(1, result.getArgList().size());
        assertEquals("non-option-arg", result.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_tefU3_zKWx0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("beta"));
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_dahW0_RRAh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.getOptions().length == 0);
            assertTrue(result.getArgList().isEmpty());
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqualSign_kTog2_Zrqu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_PvEp3_cHFc0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("c", "charlie", true, "Charlie option");
            String[] arguments = new String[]{"--charlie", "value1", "nonOptionArg"};
            Properties properties = new Properties();
            properties.setProperty("charlie", "value2");
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertEquals("value1", result.getOptionValue("charlie"));
            assertTrue(result.getArgList().contains("nonOptionArg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOptionWithEqualSign_qOVc2_tUHu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "option", true, "A valid option");
        String[] arguments = new String[]{"--option=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("option"));
            assertEquals("value", result.getOptionValue("option"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_vhdP3_LAZz0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties, true);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.getArgList().contains("nonOptionArg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndArgument_qmql2_paBg0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("v", "verbose", false, "Enable verbose mode");
            String[] arguments = {"--verbose"};
            Properties properties = new Properties();
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("verbose"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndEqualSignArgument_GOld3_vgSq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("t", "timeout", true, "Set timeout value");
        String[] arguments = {"--timeout=100"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("timeout"));
        assertEquals("100", result.getOptionValue("timeout"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidShortOption_ojOg1_vmFM0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zgAc2_QcAs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "foo"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("a"));
            assertEquals("foo", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_TjtB3_HeJU0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "alpha", true, "Alpha option");
            String[] arguments = {"--alpha=value"};
            Properties properties = new Properties();
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.hasOption("alpha"));
            assertEquals("value", result.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_Lnug0_PkZk0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_Eejt2_XTXJ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertTrue(result.hasOption("alpha"));
            assertEquals("value", result.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_xnvj3_opwG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"-a", "value", "--", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propertyValue");
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertTrue(result.hasOption("alpha"));
            assertEquals("value", result.getOptionValue("alpha"));
            assertArrayEquals(new String[]{"non-option"}, result.getArgs());
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_dOfv3_lrFm0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "alpha", true, "Alpha option");
            String[] arguments = new String[]{"--alpha=value"};
            Properties properties = new Properties();
            CommandLine result = parser.parse(options, arguments, properties);
            assertEquals("value", result.getOptionValue("alpha"));
            assertTrue(result.getArgList().isEmpty());
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_CWAN0_GHCe0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertTrue(result.getOptions().length == 0);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOptionWithEqualSign_YOPZ2_iIQb0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "alpha", true, "Alpha option");
            String[] arguments = new String[]{"--alpha=value"};
            Properties properties = new Properties();
            boolean stopAtNonOption = false;
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertEquals("value", result.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndStopAtNonOption_HzEh3_ukFI0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"-a", "--beta=value", "non-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("a"));
        assertEquals("value", result.getOptionValue("beta"));
        assertTrue(result.getArgList().contains("non-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_CNtb0_TDXz0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.getOptions().length == 0);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_SPva2_fwle0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_duBS3_iKxn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"-b", "value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_WrLm2_QcPY0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertEquals("value", result.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_aQVf3_aohv0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_LkSg0_gYmc0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleShortOptionAndValue_kfbl2_vQZv0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"-b", "value"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("beta"));
            assertEquals("value", result.getOptionValue("beta"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndStopAtNonOption_CWmT3_tWKd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "gamma", false, "Gamma option");
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"--gamma", "--delta", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(result);
        assertTrue(result.hasOption("gamma"));
        assertTrue(result.hasOption("delta"));
        assertEquals("value", result.getOptionValue("delta"));
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_wezK0_UJhQ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertEquals(0, result.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_NMUK3_zXUu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"--beta", "non-option"};
        Properties properties = new Properties();
        properties.setProperty("beta", "true");
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertTrue(result.hasOption("beta"));
            assertEquals(1, result.getArgs().length);
            assertEquals("non-option", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_qegK2_kRdt0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("opt"));
            assertEquals("value", result.getOptionValue("opt"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_nZXB2_BWGe0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "alpha", true, "Alpha option");
            String[] arguments = new String[0];
            Properties properties = new Properties();
            properties.setProperty("a", "value");
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
            assertEquals("value", result.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithBooleanOptionInProperties_RLrn3_SPmG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("a", "yes");
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_cuSi2_nOAH0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        try {
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertEquals("value", result.getOptionValue("opt"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithBooleanOptionInProperties_mfus3_cgLd0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("flag", false, "description");
            String[] arguments = new String[0];
            Properties properties = new Properties();
            properties.setProperty("flag", "true");
            CommandLine result = parser.parse(options, arguments, properties);
            assertNotNull(result);
            assertTrue(result.hasOption("flag"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_IiaS2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        String[] arguments = new String[]{"-ab"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithOptionValue_KzmC3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", true, "option a");
        options.addOption(option);
        String[] arguments = new String[]{"-a123"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_gfOr4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        String[] arguments = new String[]{"-ab123"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("123", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        CommandLine cmd = new CommandLine();
        parser.cmd = cmd; // Fixing the null pointer by initializing cmd
        parser.handleConcatenatedOptions("-ac");
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.cmd = new CommandLine(); // Initialize CommandLine to avoid NullPointerException
        parser.handleConcatenatedOptions("-ac");
        assertEquals(1, parser.cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.cmd = new CommandLine(); // Initialize CommandLine to avoid NullPointerException
        parser.handleConcatenatedOptions("-ac");
        assertEquals("c", parser.cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_rvwe0_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", false, "test option");
        options.addOption(option);
        String[] arguments = new String[]{"-a"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_yVWZ1_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option a");
        options.addOption("b", "beta", false, "test option b");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_yVWZ1_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option a");
        options.addOption("b", "beta", false, "test option b");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_ofpH3_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        CommandLine cmd = parser.parse(options, new String[]{"-a123"});
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_ofpH3_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        CommandLine cmd = parser.parse(options, new String[]{"-a123", "-b456"});
        assertTrue(cmd.hasOption("a"));
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        CommandLine cmd = parser.parse(options, new String[]{"-a123", "-b456"});
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_tfWV0_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "optionA", false, "desc");
        Option opt2 = new Option("b", "optionB", false, "desc");
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_Pvfg2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        String[] arguments = {"-a123"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MissingArgument_dlxt4_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        String[] arguments = new String[]{"-a"};
        assertThrows(MissingArgumentException.class, () -> parser.parse(options, arguments, new Properties()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_CpXZ0_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        parser.cmd = new CommandLine();
        String token = "ab";
        parser.handleConcatenatedOptions(token);
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_HKdE1_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        String[] arguments = {"-ac"};
        try {
            CommandLine cmd = parser.parse(options, arguments, new Properties());
            fail("Expected ParseException");
        } catch (ParseException e) {
            // Expected exception due to unknown option 'c'
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_TTNu3_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_NlDS0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_jRbE3() throws ParseException {
        Options options = new Options();
        options.addOption("t", "test", true, "Test description");
        String[] arguments = new String[]{"-t", "value", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("t"));
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArgumentsAndNoProperties_lVQP0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndStopAtNonOption_fyGk2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "randomArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
        assertTrue(result.hasOption("a"));
        assertEquals(1, result.getArgList().size());
        assertEquals("randomArg", result.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_TQPq3() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("beta", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertTrue(result.hasOption("b"));
        assertEquals("value", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_exdr0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha description");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OsRf3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("e", "echo", true, "Echo description");
        String[] arguments = new String[]{"--echo=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("echo"));
        assertEquals("value", result.getOptionValue("echo"));
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cpKy3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = new String[]{"-d", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
        assertEquals("non-option-arg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_yqyq0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_vPHv3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = new String[]{"--delta=value", "--", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
        assertEquals("value", result.getOptionValue("delta"));
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownTokenAndStopAtNonOption_Siyn3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("d", "delta", false, "Option before unknown");
        String[] arguments = new String[]{"-d", "unknown"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("d"));
        assertFalse(result.hasOption("unknown"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_eKLT0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
        assertTrue(exception.getMessage().contains("Unrecognized option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AllOptionsProvided_hztu0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--alpha=123", "--beta"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertTrue(result.hasOption("beta"));
        assertEquals("123", result.getOptionValue("alpha"));
        assertNull(result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_StopAtNonOption_buVh2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123", "nonOptionArg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("alpha"));
        assertEquals("123", result.getOptionValue("alpha"));
        assertTrue(result.getArgList().contains("nonOptionArg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidArguments_rMIq3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertTrue(result.hasOption("alpha"));
        assertEquals("value", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneValidLongOptionWithArgument_Znvj2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=123"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("beta"));
        assertEquals("123", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_vlra0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("testOption"));
        assertEquals("value", result.getOptionValue("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oDDa3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("test", "testOption", true, "A test option");
        String[] arguments = new String[]{"--testOption=value", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("testOption"));
        assertEquals("value", result.getOptionValue("testOption"));
        assertArrayEquals(new String[]{"nonOptionArg"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_hWgG2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_wYSE3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = new String[]{"--output=example.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertTrue(result.hasOption("output"));
        assertEquals("example.txt", result.getOptionValue("output"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OxCM3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("alpha"));
        assertEquals("nonOptionArg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_pLmQ3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose mode");
        options.addOption("d", "debug", false, "debug mode");
        String[] arguments = {"-v", "--debug"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
        assertTrue(result.hasOption("debug"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_qVCU0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", true, "A long option");
        String[] arguments = new String[]{"--longOption=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("longOption"));
        assertEquals("value", result.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_drwH1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "shortOption", true, "A short option");
        String[] arguments = new String[]{"-svalue"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("s"));
        assertEquals("value", result.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_TTNu3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = new String[]{"-a", "--optionB=valueB"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
        assertTrue(result.hasOption("b"));
        assertEquals("valueB", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_yAwN3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "activate something");
        options.addOption("b", "verbose", false, "verbose mode");
        String[] arguments = {"-a", "--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_EloV2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure option");
        String[] arguments = {"--configure=fast"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("c"));
        assertEquals("fast", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_ZOVa3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete option");
        options.addOption("e", "edit", true, "edit option");
        String[] arguments = {"-d", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("d"));
        assertTrue(result.hasOption("e"));
        assertEquals("text", result.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedShortOption_EYgL0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-b"};
        Properties properties = new Properties();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
        assertTrue(exception.getMessage().contains("Unrecognized option: -b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptions_pQeQ0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"-a", "-b", "value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("a"));
        assertTrue(result.hasOption("b"));
        assertEquals("value", result.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_utrV1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        options.addOption("b", "beta", true, "Option B");
        String[] arguments = {"--alpha", "--beta=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertTrue(result.hasOption("alpha"));
        assertTrue(result.hasOption("beta"));
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WrwZ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Option A");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propValue");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertEquals("propValue", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uSpo3() throws ParseException {
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("d"));
        assertEquals("non-option", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_nPXV3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("x", false, "option x");
        options.addOption("y", "yes", false, "option y");
        String[] arguments = new String[]{"-x", "--yes"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("x"));
        assertTrue(result.hasOption("y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownShortOption_fhmu1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, stopAtNonOption);
        });
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_jzwY3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delete", false, "delete something");
        options.addOption("e", "edit", true, "edit something");
        String[] arguments = new String[]{"--delete", "--edit=text"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("delete"));
        assertEquals("text", result.getOptionValue("edit"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_PkLl3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "activate", false, "activate something");
        options.addOption("b", "block", false, "block something");
        String[] arguments = {"-a", "--block"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
        assertTrue(result.hasOption("block"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_Newx1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("b", "true");
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
        assertTrue(exception.getMessage().contains("Default option wasn't defined"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_HhKn3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", true, "An option with argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("opt", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertTrue(result.hasOption("opt"));
        assertEquals("value", result.getOptionValue("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zlph3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--validOption", "value", "nonOptionArg"};
        Properties properties = new Properties();
        options.addOption("v", "validOption", true, "A valid option");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
        assertTrue(result.hasOption("validOption"));
        assertEquals("value", result.getOptionValue("validOption"));
        assertEquals(1, result.getArgs().length);
        assertEquals("nonOptionArg", result.getArgs()[0]);
    }
}