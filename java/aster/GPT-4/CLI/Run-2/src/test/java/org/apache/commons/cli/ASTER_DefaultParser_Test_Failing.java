/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_wFBa1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        assertThrows(UnrecognizedOptionException.class, () -> parser.handleConcatenatedOptions("-ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_IiaS2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithOptionValue_KzmC3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", true, "option a");
        options.addOption(option);
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_gfOr4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab123");
        assertEquals("123", options.getOption("b").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ac");
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ac");
        assertEquals(1, parser.cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ac");
        assertEquals("c", parser.cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOptionWithPartialMatchAllowed_ICeD6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        assertThrows(UnrecognizedOptionException.class, () -> parser.handleConcatenatedOptions("-ax"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_wznF2() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.handleConcatenatedOptions("-x");
        } catch (ParseException e) {
            assertEquals("Unknown option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedKnownAndUnknownOption_RZdA5() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.handleConcatenatedOptions("-abx");
        } catch (ParseException e) {
            assertTrue(parser.cmd.hasOption("a"));
            assertTrue(parser.cmd.hasOption("b"));
            assertEquals("Unknown option: x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_rvwe0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", false, "test option");
        options.addOption(option);
        parser.options = options;
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_yVWZ1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option a");
        options.addOption("b", "beta", false, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_yVWZ1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option a");
        options.addOption("b", "beta", false, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_ofpH3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_ofpH3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithMissingArgument_ztTU4() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        assertThrows(MissingArgumentException.class, () -> parser.handleConcatenatedOptions("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertEquals("456", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HcHj6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option");
        parser.options = options;
        parser.handleConcatenatedOptions("-a-b");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HcHj6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option");
        parser.options = options;
        parser.handleConcatenatedOptions("-a-b");
        assertFalse(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_tfWV0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "optionA", false, "desc");
        Option opt2 = new Option("b", "optionB", false, "desc");
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_tfWV0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "optionA", false, "desc");
        Option opt2 = new Option("b", "optionB", false, "desc");
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_TzqT1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", false, "desc");
        options.addOption(opt);
        parser.options = options;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("ax"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_Pvfg2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MissingArgument_dlxt4() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        parser.options = options;
        assertThrows(MissingArgumentException.class, () -> parser.handleConcatenatedOptions("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_AyVt5() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("a", "optionA", false, "desc");
        options.addOption(opt);
        parser.options = options;
        parser.stopAtNonOption = true;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("axy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithQuotes_bBtA6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("a\"123\"");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_CpXZ0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "ab";
        parser.handleConcatenatedOptions(token);
        assertNotNull(parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_CpXZ0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "ab";
        parser.handleConcatenatedOptions(token);
        assertEquals("b", parser.currentOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_HKdE1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        String token = "ac";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_ZtDU2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        String token = "aX";
        parser.handleConcatenatedOptions(token);
        assertEquals("X", parser.currentOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_EmptyToken_qUgT5() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        String token = "";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithNoValue_Juhl6_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "a";
        parser.handleConcatenatedOptions(token);
        assertNotNull(parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithNoValue_Juhl6_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "a";
        parser.handleConcatenatedOptions(token);
        assertEquals("a", parser.currentOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fWuJ1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fWuJ1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fWuJ1_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.getArgList().contains("--unknown"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonExistentOption_ZaYe2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "charlie", true, "Charlie description");
        String[] arguments = new String[]{"--delta"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertFalse(result.hasOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousLongOption_ttje3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--al"};
        try {
            parser.parse(options, arguments, null, false);
            fail("Expected AmbiguousOptionException for ambiguous option");
        } catch (ParseException e) {
            assertTrue(e instanceof AmbiguousOptionException);
            assertEquals("Ambiguous option: --al could be --alpha, --beta", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPropertiesOverride_trWs3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("456", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_vdQf0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine expected = new CommandLine();
        CommandLine actual = parser.parse(options, new String[]{}, new Properties(), false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneValidOption_wyct1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        CommandLine expected = new CommandLine();
        expected.addOption(new Option("a", "alpha", false, "Alpha option"));
        CommandLine actual = parser.parse(options, arguments, new Properties(), false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Yefi3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--beta", "value", "non-option-arg"};
        CommandLine expected = new CommandLine();
        expected.addOption(new Option("b", "beta", true, "Beta option"));
        expected.addArg("non-option-arg");
        CommandLine actual = parser.parse(options, arguments, new Properties(), true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownToken_EvtJ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        try {
            parser.parse(options, arguments, new Properties(), false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Unexpected token '--unknown'", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertyOption_zkpI2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "Define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertyOption_zkpI2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "Define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_TJQL2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "configure", true, "configure something");
        String[] arguments = {"--configure=fast"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("Expected value 'fast' for option 'configure'", "fast", result.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ZIsM3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        String[] arguments = {"-a", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertFalse(result.getArgList().contains("nonOptionArg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaPropertyOption_CTGg3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "define a property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_MyLs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"-x"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected an UnrecognizedOptionException to be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof UnrecognizedOptionException);
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousLongOption_RyzI3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", false, "Config option");
        options.addOption("conf", "configure", false, "Configure option");
        String[] arguments = {"--conf"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected an AmbiguousOptionException to be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof AmbiguousOptionException);
            assertTrue(e.getMessage().contains("Ambiguous option: --conf"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_IAvJ3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "define properties");
        String[] arguments = {"-Dkey=value"};
        CommandLine result = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_EfLX3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaPropertyOption_TOkk3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", "define", true, "Define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_nKCl0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"-unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException for unrecognized option");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_cuvU0() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected ParseException due to missing required option");
        } catch (ParseException e) {
            assertTrue(e instanceof MissingArgumentException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaPropertyOption_WIdI2() {
        Options options = new Options();
        options.addOption("D", "define", true, "Define a system property");
        String[] arguments = new String[]{"-Dproperty=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            assertTrue(result.hasOption("D"));
            assertEquals("value", result.getOptionProperties("D").getProperty("property"));
        } catch (ParseException e) {
            fail("ParseException was not expected.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_iLmY2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        assertThrows(MissingArgumentException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_bDZM0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1"};
        Properties properties = new Properties();
        properties.setProperty("option2", "value2");
        CommandLine result = parser.parse(options, arguments, properties);
        assertTrue(result.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithJavaProperty_UoBA3_EEli0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("D", "define", true, "desc");
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[]{"-Dkey=value"}, new Properties());
        assertEquals("value", cmd.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllOptionsKnown_kytm0_eVoP0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", null, false, null);
        Option opt2 = new Option("b", null, false, null); // Corrected constructor call
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllOptionsKnown_kytm0_eVoP0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", null, false, null);
        Option opt2 = new Option("b", null, false, null); // Corrected constructor call
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_KWlz1_QuMe0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", null, false, null);
        options.addOption(opt);
        parser.options = options;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionGroupSelection_nQoy3_MLWE0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt1 = new Option("a", null, false, null);
        Option opt2 = new Option("b", null, false, null);
        group.addOption(opt1).addOption(opt2);
        options.addOptionGroup(group);
        parser.options = options;
        parser.handleConcatenatedOptions("-a");
        assertEquals(opt1, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_VaAq5_nGfD0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("a", null, false, null);
        options.addOption(opt);
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithQuotes_DVWh3_APuI0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", true, "option a");
        String[] arguments = new String[]{"-a\"value\""};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_aRic3_YMxW0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "optionA", false, "Option A");
            String[] arguments = {"-a", "nonOptionArg"};
            CommandLine result = parser.parse(options, arguments, new Properties(), true);
            assertTrue(result.hasOption("a"));
            assertFalse(result.getArgList().contains("nonOptionArg"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousPartialMatching_soZU3_khHU0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"--al"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties);
            fail("Expected AmbiguousOptionException was not thrown.");
        } catch (AmbiguousOptionException e) {
            assertTrue(e.getMessage().contains("al"));
        } catch (ParseException e) {
            fail("Unexpected exception type thrown.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_YDMK3_uwsu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", false, "description");
        String[] arguments = new String[]{"--opt", "nonOptionArg"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertNotNull(result);
            assertTrue(result.hasOption("opt"));
            assertEquals(1, result.getArgs().length);
            assertEquals("nonOptionArg", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithEmptyExpectedOpts_lhHg0_cDEF0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
        } catch (ParseException e) {
        }
        assertTrue(parser.expectedOpts.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_wznF2_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"-x"};
        try {
            CommandLine cmd = parser.parse(options, arguments, new Properties());
            assertFalse(cmd.hasOption("-x"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedKnownAndUnknownOption_RZdA5_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        String[] arguments = {"-abx"};
        try {
            CommandLine cmd = parser.parse(options, arguments, new Properties());
            assertTrue(cmd.hasOption("a"));
            assertTrue(cmd.hasOption("b"));
            fail("Expected ParseException for unknown option 'x'");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a123-b456");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5_4_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a123-b456");
        assertEquals("456", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HcHj6_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a-b");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HcHj6_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a-b");
        assertTrue(!parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_tfWV0_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "optionA", false, "desc");
        Option opt2 = new Option("b", "optionB", false, "desc");
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithQuotes_bBtA6_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "optionA", true, "desc");
        options.addOption(opt);
        String[] arguments = new String[]{"-a\"123\""};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_CpXZ0_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        parser.cmd = new CommandLine();
        String token = "ab";
        parser.handleConcatenatedOptions(token);
        assertTrue(parser.cmd.hasOption("a") && parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_ZtDU2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        String[] arguments = {"-aX"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("X", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_EmptyToken_qUgT5_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        String token = "";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException");
        } catch (ParseException e) {
            // Correctly caught the expected ParseException
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStopAfterUnknown_FwWf5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ac");
        assertTrue(parser.skipParsing);
        assertEquals(1, parser.cmd.getArgs().length);
        assertEquals("c", parser.cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_yVWZ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option a");
        options.addOption("b", "beta", false, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_ofpH3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "test option");
        options.addOption(option);
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertTrue(parser.cmd.hasOption("a"));
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_NZSn5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "test option a");
        options.addOption("b", "beta", true, "test option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertTrue(parser.cmd.hasOption("a"));
        assertEquals("123", parser.cmd.getOptionValue("a"));
        assertTrue(parser.cmd.hasOption("b"));
        assertEquals("456", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HcHj6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "test option");
        parser.options = options;
        parser.handleConcatenatedOptions("-a-b");
        assertTrue(parser.cmd.hasOption("a"));
        assertFalse(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_tfWV0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "optionA", false, "desc");
        Option opt2 = new Option("b", "optionB", false, "desc");
        options.addOption(opt1);
        options.addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_CpXZ0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "ab";
        parser.handleConcatenatedOptions(token);
        assertNotNull(parser.currentOption);
        assertEquals("b", parser.currentOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithNoValue_Juhl6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        String token = "a";
        parser.handleConcatenatedOptions(token);
        assertNotNull(parser.currentOption);
        assertEquals("a", parser.currentOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fWuJ1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
        assertEquals(0, result.getOptions().length);
        assertTrue(result.getArgList().contains("--unknown"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPropertiesOverride_trWs3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha=123"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "456");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertEquals("456", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertyOption_zkpI2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "Define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("D"));
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ZIsM3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Option A");
        String[] arguments = {"-a", "nonOptionArg"};
        CommandLine result = parser.parse(options, arguments, new Properties(), true);
        assertTrue(result.hasOption("a"));
        assertFalse(result.getArgList().contains("nonOptionArg"));
    }
}