/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Fixed_Test_Temp_Runtime_Temp {


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithTypeUsingClassParameter_kkJm0() {
        OptionBuilder result = OptionBuilder.withType(String.class);
        assertNotNull(result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparatorSetsCorrectChar_HOEb0() {
        OptionBuilder result = OptionBuilder.withValueSeparator();
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithSingleCharOption_OWrE0_1() {
        char opt = 'a';
        Option result = OptionBuilder.create(opt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithSingleCharOption_OWrE0_2() {
        char opt = 'a';
        Option result = OptionBuilder.create(opt);
        assertEquals("a", result.getOpt());
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullLongOptionThrowsException_EHkq0() {
        try {
            OptionBuilder.create();
            fail("Expected IllegalArgumentException was not thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("must specify longopt", e.getMessage());
        }
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseAfterTrue_TRrs3_KReK0() {
        OptionBuilder.hasArg(true);
        OptionBuilder result = OptionBuilder.hasArg(false);
        assertSame(OptionBuilder.hasArg(false), result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseMultipleCalls_tWCT5_yNEC0() {
        OptionBuilder.hasArg(false);
        OptionBuilder result = OptionBuilder.hasArg(false);
        assertSame(OptionBuilder.hasArg(false), result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueConsistency_zHYv8_Kbpu0() {
        OptionBuilder result1 = OptionBuilder.hasArg(true);
        OptionBuilder result2 = OptionBuilder.hasArg(true);
        assertSame(result1, result2);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_UsingComma_JKOu0_kQeW0() {
        OptionBuilder result = OptionBuilder.withValueSeparator(',');
        assertNotNull(result);
    }


    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsSetsUnlimitedValues_WAtg0_FGWS0() {
        OptionBuilder result = OptionBuilder.hasArgs();
        assertSame(OptionBuilder.hasArgs(), result);
    }


}