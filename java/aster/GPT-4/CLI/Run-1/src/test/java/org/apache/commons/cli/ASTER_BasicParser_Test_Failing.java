/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_RgXh0() {
        BasicParser parser = new BasicParser();
        Options expected = new Options();
        Options actual = parser.getOptions();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithValidArguments_xWHM1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
        assertEquals("arg1", option.getValue(0));
        assertEquals("arg2", option.getValue(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionBreak_hkUh2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "-newOption", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
        assertEquals("arg1", option.getValue(0));
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithQuotesStripped_rPsx5() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("\"quotedArg\"").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
        assertEquals("quotedArg", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithUnrecognizedOption_cxDU0() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("dummy").listIterator();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.processOption("unrecognized_option", iter);
        });
        assertTrue(exception.getMessage().contains("Unrecognized option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithRequiredOption_UMxP1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        Option requiredOption = new Option("r", "required", true, "required option");
        requiredOption.setRequired(true);
        options.addOption(requiredOption);
        parser.setOptions(options);
        assertDoesNotThrow(() -> {
            parser.processOption("r", iter);
        });
        assertFalse(parser.getRequiredOptions().contains("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithOptionGroup_OnUt2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("g", "groupOption", false, "Group option");
        group.addOption(option1);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertDoesNotThrow(() -> {
            parser.processOption("g", iter);
        });
        assertEquals("g", group.getSelected());
        assertFalse(parser.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_qgqa0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertTrue(result.hasOption("option1"));
        assertEquals("value1", result.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_oPYP0() {
        BasicParser parser = new BasicParser();
        List result = parser.getRequiredOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_aDaE5() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", true, "alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndPropertiesOverride_spMd13() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("o", true, "option with override");
        String[] arguments = new String[]{"-o", "initial"};
        Properties properties = new Properties();
        properties.setProperty("o", "overridden");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("overridden", result.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_RgXh0_fid1() {
        BasicParser parser = new BasicParser();
        Options expected = new Options();
        Options actual = parser.getOptions();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithValidArguments_xWHM1_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithValidArguments_xWHM1_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertEquals("arg1", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithValidArguments_xWHM1_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertEquals("arg2", option.getValue(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionBreak_hkUh2_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "-newOption", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionBreak_hkUh2_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "-newOption", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertEquals("arg1", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionBreak_hkUh2_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("arg1", "-newOption", "arg2").listIterator();
        parser.processArgs(option, iterator);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithQuotesStripped_rPsx5_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("\"quotedArg\"").listIterator();
        parser.processArgs(option, iterator);
        assertNotNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithQuotesStripped_rPsx5_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.asList("\"quotedArg\"").listIterator();
        parser.processArgs(option, iterator);
        assertEquals("quotedArg", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithUnrecognizedOption_cxDU0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("dummy").listIterator();
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.processOption("unrecognized_option", iter);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithRequiredOption_UMxP1_1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        Option requiredOption = new Option("r", "required", true, "required option");
        requiredOption.setRequired(true);
        options.addOption(requiredOption);
        parser.setOptions(options);
        assertDoesNotThrow(() -> {
            parser.processOption("r", iter);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithRequiredOption_UMxP1_2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        Option requiredOption = new Option("r", "required", true, "required option");
        requiredOption.setRequired(true);
        options.addOption(requiredOption);
        parser.setOptions(options);
        assertFalse(parser.getRequiredOptions().contains("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithOptionGroup_OnUt2_1() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("g", "groupOption", false, "Group option");
        group.addOption(option1);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertDoesNotThrow(() -> {
            parser.processOption("g", iter);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithOptionGroup_OnUt2_2() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("g", "groupOption", false, "Group option");
        group.addOption(option1);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertEquals("g", group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithOptionGroup_OnUt2_3() throws ParseException {
        BasicParser parser = new BasicParser();
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("g", "groupOption", false, "Group option");
        group.addOption(option1);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        assertFalse(parser.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_qgqa0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertTrue(result.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_qgqa0_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertEquals("value1", result.getOptionValue("option1"));
    }

    @Test
    public void testProcessProperties_UnrecognizedOption_kLRx1_EVzc0() {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("unknownOption", "value");
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.processProperties(properties);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionInRequiredGroup_bJOm5_gjzV0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option4", "value");
        Option opt = new Option("option4", null, true, "description");
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        group.addOption(opt);
        Options options = new Options();
        options.addOptionGroup(group);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertFalse(group.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_OptionWithMultipleValues_bYEN9_oXFi0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option8", "value1,value2");
        Option opt = new Option("option8", null, true, null);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertArrayEquals(new String[]{"value1", "value2"}, cmd.getOptionValues("option8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_RequiredOptionProcessed_yPBl11_Fjvj0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option10", "value");
        Option opt = new Option("option10", "option10", true, "description");
        opt.setRequired(true);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertFalse(opt.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithNoArguments_KouP0_Zwls0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", false, "Test option");
        ListIterator<String> iterator = Arrays.<String>asList().listIterator();
        parser.processArgs(option, iterator);
        assertNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptionsWithOptionGroup_jkZg1_lGSK0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("opt", true, "Option description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        group.setRequired(true);
        options.addOptionGroup(group);
        CommandLine cmd = parser.parse(options, new String[]{"--opt=value"}, new Properties(), false);
        assertFalse(options.getRequiredOptions().contains("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptionsWithOptionGroup_jkZg1_lGSK0_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("opt", true, "Option description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        group.setRequired(true);
        options.addOptionGroup(group);
        CommandLine cmd = parser.parse(options, new String[]{"--opt=value"}, new Properties(), false);
        assertEquals(opt, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_etDK0_PwNM0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-option1", "value1"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }
}