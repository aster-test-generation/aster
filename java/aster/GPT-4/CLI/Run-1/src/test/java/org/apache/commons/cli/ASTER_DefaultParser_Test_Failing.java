/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_bBHU1_1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        Exception exception = assertThrows(UnrecognizedOptionException.class, () -> {
            parser.handleConcatenatedOptions("-ax");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithValue_Qcex3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "option a");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_JcLe4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab123");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_JcLe4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab123");
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStop_ZNau5_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a x");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStop_ZNau5_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a x");
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionNoArg_kmuu0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithArg_gmNu1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-b123");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithArg_gmNu1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-b123");
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_uCIE2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abc");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_uCIE2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abc");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_uCIE2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abc");
        assertTrue(parser.cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArg_chUj3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-ab123");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArg_chUj3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-ab123");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArg_chUj3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-ab123");
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithQuotedArg_sCoH4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-c\"hello world\"");
        assertTrue(parser.cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithQuotedArg_sCoH4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-c\"hello world\"");
        assertEquals("hello world", parser.cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_WslA5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        try {
            parser.handleConcatenatedOptions("-x");
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_AXvP6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a -b");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_AXvP6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a -b");
        assertFalse(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_KsXG4() {
        DefaultParser parser = new DefaultParser();
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RequiredArgMissing_EBeH5() {
        DefaultParser parser = new DefaultParser();
        assertThrows(MissingArgumentException.class, () -> parser.handleConcatenatedOptions("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_CWRs0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_ATAR1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", false, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_ATAR1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", false, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_AHsO2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_HUzi3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "alpha", true, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_furQ5_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", true, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab123");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_furQ5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", true, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab123");
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HFKV6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("axyz");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HFKV6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("axyz");
        assertFalse(parser.cmd.hasOption("xyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_jwAX1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        String token = "ac";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unexpected token: c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptions_Dgmy5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        String token = "abvalue";
        parser.handleConcatenatedOptions(token);
        assertEquals("Expected to process multiple options", "value", parser.currentOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_EmptyToken_Veyf6() {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        String token = "";
        try {
            parser.handleConcatenatedOptions(token);
            fail("Expected ParseException for empty token");
        } catch (ParseException e) {
            assertEquals("Token is empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_Dulm2() throws ParseException {
        Options options = new Options();
        options.addOption("c", "gamma", false, "Gamma option");
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertFalse(result.hasOption("unknown"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithProperties_msVO3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "fromProperties");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithProperties_msVO3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "fromProperties");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("fromProperties", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOptionStop_ZrHs3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option without argument");
        String[] arguments = new String[]{"--delta", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertFalse(result.getArgList().contains("non-option-arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousPartialMatchingLongOption_WhIh2() {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"--a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        assertThrows(AmbiguousOptionException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOptionAndProperty_HNZM3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "newValue");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("newValue", result.getOptionProperties("alpha").getProperty("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousPartialMatching_kkXA3() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = new String[]{"--al"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected AmbiguousOptionException was not thrown.");
        } catch (ParseException e) {
            assertTrue(e instanceof AmbiguousOptionException);
            assertTrue(e.getMessage().contains("Ambiguous option: --al could be: [alpha, beta]"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_bdlr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected an UnrecognizedOptionException to be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof UnrecognizedOptionException);
            assertEquals("Unrecognized option: --unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAmbiguousLongOption_uRXN2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", false, "Config option");
        options.addOption("conf", "configure", false, "Configure option");
        String[] arguments = {"--conf"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected an AmbiguousOptionException to be thrown");
        } catch (ParseException e) {
            assertTrue(e instanceof AmbiguousOptionException);
            assertEquals("Ambiguous option: --conf", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndProperties_vLGJ3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "data", true, "Data option");
        String[] arguments = {"--data"};
        Properties properties = new Properties();
        properties.setProperty("data", "somevalue");
        boolean stopAtNonOption = false;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("data"));
            assertEquals("somevalue", result.getOptionValue("data"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaPropertyOption_NEOI3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "Java property");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionProperties("D").getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_VDVS2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "define properties");
        String[] arguments = new String[]{"-Dkey=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kRvg1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsIncludingUnknown_JWzr2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "--gamma", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertTrue(result.hasOption("a"));
            assertTrue(result.hasOption("b"));
            assertFalse(result.hasOption("gamma"));
        } catch (ParseException e) {
            assertTrue(e instanceof UnrecognizedOptionException);
            assertEquals("Unrecognized option: --gamma", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_UzYy0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected a ParseException due to missing required option");
        } catch (ParseException e) {
            assertTrue(e instanceof MissingArgumentException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStoppingAtNonOption_XpdY3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", false, "A simple option");
        String[] arguments = new String[]{"--opt", "non-option-arg"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("opt"));
            assertEquals(1, result.getArgList().size());
            assertEquals("non-option-arg", result.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not have occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsMissing_qLQh2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for missing required option");
        } catch (ParseException e) {
            assertTrue(e instanceof MissingArgumentException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsMissing_rIKk2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "A required option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        assertThrows(MissingArgumentException.class, () -> {
            parser.parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_Kyax0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertTrue(result.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_Kyax0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertEquals("value1", result.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_pBVD2_ctoY0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        String[] arguments = new String[]{"-ax"};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertTrue(cmd.getArgList().contains("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithJavaProperty_ZWcE4_HJVv0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("D", null, true, "Define properties");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("Dkey=value");
        assertEquals("value", parser.cmd.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionNoArg_hlBs0_NZFj0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", null, false, null);
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithArg_ssjA1_PiRn0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("b", null, true, null);
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-b123");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithArg_ssjA1_PiRn0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("b", null, true, null);
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-b123");
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_mDxk2_gopv0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("c", null, false, null);
        Option opt2 = new Option("d", null, false, null);
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-cd");
        assertTrue(parser.cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_mDxk2_gopv0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("c", null, false, null);
        Option opt2 = new Option("d", null, false, null);
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-cd");
        assertTrue(parser.cmd.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArgs_VVwO3_qoIl0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("e", "example", true, "example option");
        Option opt2 = new Option("f", "flag", true, "flag option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-e123-f456");
        assertTrue(parser.cmd.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArgs_VVwO3_qoIl0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("e", "example", true, "example option");
        Option opt2 = new Option("f", "flag", true, "flag option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-e123-f456");
        assertEquals("123", parser.cmd.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArgs_VVwO3_qoIl0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("e", "example", true, "example option");
        Option opt2 = new Option("f", "flag", true, "flag option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-e123-f456");
        assertTrue(parser.cmd.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArgs_VVwO3_qoIl0_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("e", "example", true, "example option");
        Option opt2 = new Option("f", "flag", true, "flag option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("-e123-f456");
        assertEquals("456", parser.cmd.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionGroupSelection_LmgU4_hlHm0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt1 = new Option("g", null, false, null);
        Option opt2 = new Option("h", null, false, null); // Corrected constructor call
        group.addOption(opt1).addOption(opt2);
        options.addOptionGroup(group);
        parser.options = options;
        parser.handleConcatenatedOptions("-gh");
        assertTrue(parser.cmd.hasOption("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionGroupSelection_LmgU4_hlHm0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt1 = new Option("g", null, false, null);
        Option opt2 = new Option("h", null, false, null); // Corrected constructor call
        group.addOption(opt1).addOption(opt2);
        options.addOptionGroup(group);
        parser.options = options;
        parser.handleConcatenatedOptions("-gh");
        assertFalse(parser.cmd.hasOption("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionGroupSelection_LmgU4_hlHm0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt1 = new Option("g", null, false, null);
        Option opt2 = new Option("h", null, false, null); // Corrected constructor call
        group.addOption(opt1).addOption(opt2);
        options.addOptionGroup(group);
        parser.options = options;
        parser.handleConcatenatedOptions("-gh");
        assertEquals(opt1, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithQuotes_fFpW3_UCej0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", true, "option a");
        String[] arguments = new String[]{"-a\"value\""};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("Expected to strip quotes from option value", "value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithoutQuotes_GhrW4_BlsV0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", true, "option a");
        String[] arguments = new String[]{"-a\"value\""};
        CommandLine cmd = parser.parse(options, arguments, new Properties());
        assertEquals("Expected to keep quotes in option value", "\"value\"", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndProperty_OJQQ2_gkzr0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("D", "define", true, "Define properties");
            String[] arguments = new String[]{"-Dkey=value"};
            Properties properties = new Properties();
            properties.setProperty("key", "value");
            boolean stopAtNonOption = false;
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertEquals("value", result.getOptionValue("D"));
            assertEquals("value", properties.getProperty("key"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionAndProperties_bQYX2_ofuZ0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("a", "alpha", true, "Alpha option");
            String[] arguments = new String[]{"--alpha=value"};
            Properties properties = new Properties();
            properties.setProperty("alpha", "newvalue");
            boolean stopAtNonOption = false;
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
            assertEquals("newvalue", result.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_ItHs3_eSiI0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("c", "charlie", true, "Charlie option");
            String[] arguments = new String[]{"-c", "value", "non-option"};
            Properties properties = new Properties();
            properties.setProperty("charlie", "override");
            CommandLine result = parser.parse(options, arguments, properties, true);
            assertTrue(result.hasOption("charlie"));
            assertEquals("override", result.getOptionValue("charlie"));
            assertTrue(result.getArgList().contains("non-option"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_gVuk2_LUIX0() {
        try {
            DefaultParser parser = new DefaultParser();
            Options options = new Options();
            options.addOption("D", null, true, "Java property");
            String[] arguments = new String[]{"-Dkey=value"};
            Properties properties = new Properties();
            CommandLine result = parser.parse(options, arguments, properties);
            assertTrue(result.hasOption("D"));
            assertEquals("value", result.getOptionProperties("D").getProperty("key"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithEmptyExpectedOpts_smYP0_sVIh0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
        } catch (ParseException e) {
        }
        assertTrue(parser.expectedOpts.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_bBHU1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        Exception exception = assertThrows(UnrecognizedOptionException.class, () -> {
            parser.handleConcatenatedOptions("-ax");
        });
        assertEquals("Unrecognized option: -ax", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_JcLe4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab123");
        assertTrue(parser.cmd.hasOption("a"));
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_ImmediateStop_ZNau5() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a x");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOptionWithArg_gmNu1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-b123");
        assertTrue(parser.cmd.hasOption("b"));
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsNoArgs_uCIE2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-abc");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.cmd.hasOption("b"));
        assertTrue(parser.cmd.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArg_chUj3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-ab123");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.cmd.hasOption("b"));
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithQuotedArg_sCoH4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("-c\"hello world\"");
        assertTrue(parser.cmd.hasOption("c"));
        assertEquals("hello world", parser.cmd.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_AXvP6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("-a -b");
        assertTrue(parser.cmd.hasOption("a"));
        assertFalse(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_ATAR1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", false, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.cmd.hasOption("a"));
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MixedOptions_furQ5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", true, "Beta option");
        options.addOption(opt1).addOption(opt2);
        parser.options = options;
        parser.handleConcatenatedOptions("ab123");
        assertTrue(parser.cmd.hasOption("a"));
        assertEquals("123", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_HFKV6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("axyz");
        assertTrue(parser.cmd.hasOption("a"));
        assertFalse(parser.cmd.hasOption("xyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithProperties_msVO3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "fromProperties");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
        assertEquals("fromProperties", result.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNonOptionStop_ZrHs3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option without argument");
        String[] arguments = new String[]{"--delta", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
        assertFalse(result.getArgList().contains("non-option-arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOptionAndProperty_HNZM3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "newValue");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("alpha"));
        assertEquals("newValue", result.getOptionProperties("alpha").getProperty("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsMissing_ymnh3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "Required option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.parse(options, arguments, properties, stopAtNonOption);
        });
        assertTrue(exception.getMessage().contains("Missing required option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStopAtNonOption_Kyax0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertTrue(result.hasOption("option1"));
        assertEquals("value1", result.getOptionValue("option1"));
        assertFalse(result.hasOption("option2"));
    }
}