/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEmptyArguments_swYC0() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = false;
        String[] result = parser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_NullProperties_Toph0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = null;
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndEmptyArguments_LhCe0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgumentsAndEmptyOptions_DoMb0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArgumentsAndEmptyOptions_SqJI1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionTrue_KaYz2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals(2, result.getArgList().size());
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionFalse_tsSN3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(2, result.getArgList().size());
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionAndStopAtNonOptionTrue_ZYQS4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.getArgList().contains("-x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_oMWR6() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        options.addOption("b", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jxmm7() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option optionA = new Option("a", "alpha", false, "alpha option");
        Option optionB = new Option("b", "beta", false, "beta option");
        group.addOption(optionA);
        group.addOption(optionB);
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
        assertFalse(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEatTheRestTrue_lcEP8() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(Arrays.asList("arg1", "arg2"), result.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDashOption_qkdk9() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.getArgList().contains("-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsMissing_jNsT10() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "required option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        assertThrows(ParseException.class, () -> parser.parse(options, arguments, properties, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionsProvided_RFQt11() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "required option");
        String[] arguments = new String[]{"-r", "value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionHavingMultipleValues_KGqt12() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("m", true, "multi-value option");
        String[] arguments = new String[]{"-m", "value1", "-m", "value2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertArrayEquals(new String[]{"value1", "value2"}, result.getOptionValues("m"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndEmptyArguments_LhCe0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndEmptyArguments_LhCe0_2() throws ParseException {
        BasicParser parser = new BasicParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndEmptyArguments_LhCe0_2_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionTrue_KaYz2_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionTrue_KaYz2_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionFalse_tsSN3_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOptionFalse_tsSN3_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        String[] arguments = new String[]{"-a", "random", "test"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_oMWR6_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        options.addOption("b", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_oMWR6_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        options.addOption("b", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jxmm7_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option optionA = new Option("a", "alpha", false, "alpha option");
        Option optionB = new Option("b", "beta", false, "beta option");
        group.addOption(optionA);
        group.addOption(optionB);
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jxmm7_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option optionA = new Option("a", "alpha", false, "alpha option");
        Option optionB = new Option("b", "beta", false, "beta option");
        group.addOption(optionA);
        group.addOption(optionB);
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertFalse(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_RecognizedOptionNoArgNotSelected_ehml2_pCKb0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option1", "true");
        Option opt = new Option("option1", null, false, null);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_RecognizedOptionWithArgNotSelected_SQhm3_LXCE0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option2", "value");
        Option opt = new Option("option2", "option2", true, "description");
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertEquals("value", cmd.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_BooleanOptionTrue_UtZm6_IVJH0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option5", "true");
        Option opt = new Option("option5", null, false, null);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("option5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_BooleanOptionYes_mUtE7_bjvk0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option6", "yes");
        Option opt = new Option("option6", null, false, null);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("option6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_BooleanOption1_ZQxk8_lSqR0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option7", "true");
        Option opt = new Option("option7", null, false, null);
        Options options = new Options();
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("option7"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_MultipleOptions_imXG12_mnEC0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("option11", "value1");
        properties.setProperty("option12", "value2");
        Option opt1 = new Option("option11", null, true, null);
        Option opt2 = new Option("option12", null, true, null);
        Options options = new Options();
        options.addOption(opt1);
        options.addOption(opt2);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("option11") && cmd.hasOption("option12"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithOptionalArg_RzFq3_TdRv0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", "Test option");
        option.setOptionalArg(true);
        ListIterator<String> iterator = Arrays.<String>asList().listIterator();
        parser.processArgs(option, iterator);
        assertNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithMissingMandatoryArg_NgdH4_iMct0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("test", true, "Test option");
        ListIterator<String> iterator = Arrays.<String>asList().listIterator();
        try {
            parser.processArgs(option, iterator);
            fail("Expected ParseException for missing mandatory argument");
        } catch (ParseException e) {
            assertTrue(e instanceof MissingArgumentException);
            assertEquals("Missing argument for option: test", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptionsWithRequiredOption_abHw0_hdLB0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("opt", true, "Option description");
        opt.setRequired(true);
        options.addOption(opt);
        CommandLine cmd = parser.parse(options, new String[]{"--opt", "value"}, new Properties(), false);
        assertTrue(cmd.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptionsWithNonRequiredOption_IICa2_frSz0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("opt", false, "Option description");
        opt.setRequired(false);
        options.addOption(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptionsWithOptionNotInGroup_EQlp3_WGrC0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("opt", "Option description");
        options.addOption(opt);
        assertNull(options.getOptionGroup(opt));
    }
}