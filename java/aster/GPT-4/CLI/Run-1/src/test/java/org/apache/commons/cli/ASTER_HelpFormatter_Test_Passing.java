/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    private void printWrapped(PrintWriter pw, int width, int indent, String text) {
        pw.print(String.format("%" + indent + "s", "") + text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_Thds0() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = formatter.getDescPadding();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_McGz0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getOptPrefix();
        assertEquals("-", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_ZIEs0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(80);
        assertEquals(80, formatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_SingleLine_lHvC0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a short text.";
        int width = 30;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a short text.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ExactWidth_yEaI2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This line exactly fits.";
        int width = 23;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This line exactly fits.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyText_GCUJ3() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        int width = 10;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithNewLineBeforeWidth_oObj0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithTabBeforeWidth_BvAr1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithNoSpecialCharacters_Ybbf2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithEndOfString_XRXT3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 20;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithNewLineAtWidth_sboE5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithTabAtWidth_ODUi6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithCarriageReturnBeforeWidth_wbEL7() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\rWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithStartPos_mpLg10() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 6;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithFullLength_YbWe11() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 11;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_vsvt0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("exampleArgName");
        assertEquals("exampleArgName", formatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_Byci0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_QVjs0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: myapp";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, options, autoUsage);
        assertTrue(true); // This is a placeholder assertion.
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithPositiveLength_ebrE0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_EmptyOptions_kxWd0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_SingleShortOption_lRwt1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_SingleLongOption_MRxz2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "alpha", false, "alpha long option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("--alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionWithArg_LhSf3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("b", "beta", true, "beta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("<arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptions_gsgR4() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "alpha option");
        options.addOption("b", "beta", true, "beta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a") && result.toString().contains("--beta <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_WideWidth_PCqU5() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("c", "gamma", true, "gamma option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 120, options, 2, 5);
        assertTrue(result.toString().contains("--gamma <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_NarrowWidth_nCni6() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("d", "delta", true, "delta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 30, options, 2, 5);
        assertTrue(result.toString().contains("--delta <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_NoPadding_Qtvq7() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("e", "epsilon", true, "epsilon option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 0, 0);
        assertTrue(result.toString().contains("-e,--epsilon <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MaxPadding_WbBo8() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("f", "zeta", true, "zeta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 10, 10);
        assertTrue(result.toString().contains("-f,--zeta <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_DescriptionPadding_WvYY9() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("g", "eta", true, "eta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 10);
        assertTrue(result.toString().contains("-g,--eta <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_LeftPadding_uCIV10() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "theta", true, "theta option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 10, 5);
        assertTrue(result.toString().contains("-h,--theta <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptionsWithArgs_wnrf11() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("i", "iota", true, "iota option with argument");
        options.addOption("j", "kappa", true, "kappa option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-i,--iota <arg>") && result.toString().contains("-j,--kappa <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionGroup_fnhO12() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("k", "lambda", false, "lambda option"));
        options.addOptionGroup(group);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-k,--lambda"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_RequiredOption_glpw13() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("l", "mu", false, "mu required option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-l,--mu"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_LongOptionWithArgName_JApx14() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option longOptWithArgName = new Option("m", "nu", true, "nu option with custom arg name");
        longOptWithArgName.setArgName("value");
        options.addOption(longOptWithArgName);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("--nu <value>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionWithDescription_iSdQ15() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("n", "xi", false, "xi option with a description");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("xi option with a description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionWithEmptyDescription_SsXr16() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "omicron", false, "");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-o,--omicron"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_ComplexScenario_NVTu17() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("p", "pi", true, "pi option with argument");
        options.addOption("q", "rho", false, "rho option without argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 100, options, 3, 8);
        assertTrue(result.toString().contains("-p,--pi <arg>") && result.toString().contains("-q,--rho"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_Konn0() {
        HelpFormatter formatter = new HelpFormatter();
        String newLine = System.lineSeparator();
        formatter.setNewLine(newLine);
        assertEquals(newLine, formatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_SyDg0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        String header = "Header: MyApp options";
        String footer = "Footer: end of options";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_Pfjb0() {
        HelpFormatter formatter = new HelpFormatter();
        String expected = System.getProperty("line.separator");
        assertEquals(expected, formatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_mIMS0() {
        HelpFormatter formatter = new HelpFormatter();
        int expectedWidth = 74; // Assuming defaultWidth is74
        assertEquals(expectedWidth, formatter.getWidth());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_PcXj0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("--");
        assertEquals("--", formatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_rPth0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> result = helpFormatter.getOptionComparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_VZeL0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("newPrefix");
        assertEquals("newPrefix", formatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_wMDE0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        assertEquals(10, formatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_CkAx0() {
        HelpFormatter formatter = new HelpFormatter();
        int expected = 1; // Assuming defaultLeftPad is initialized to1
        assertEquals(expected, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_bime0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getLongOptPrefix();
        assertEquals("--", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithTrailingSpaces_qJbM0() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world   ");
        assertEquals("hello world", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithOnlySpaces_DZNw2() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("     ");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNull_AEWJ4() {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_vYkU0() {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "Usage: ";
        formatter.setSyntaxPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_jPIw0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        String header = "Header: MyApp options";
        String footer = "Footer: End of options";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void printWrapped(final PrintWriter pw, final int width, final String text) {
        printWrapped(pw, width, 0, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void printUsage(final PrintWriter pw, final int width, final String cmdLineSyntax) {
        pw.println("usage: " + cmdLineSyntax);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderReturnsNonNullBuilderObject_xzfZ0_uNxr0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_XkMT0_tmVJ0() {
        HelpFormatter formatter = new HelpFormatter();
        String separator = "--";
        formatter.setLongOptSeparator(separator);
        assertEquals(separator, formatter.getLongOptSeparator());
    }

}