/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_WithArg_qJaE0() {
        Option option = new Option("o", true, "Option with argument");
        int args = option.getArgs();
        assertEquals(1, args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_WxfT0() {
        Option option = new Option("opt", "This is a test description");
        assertEquals("This is a test description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_DwmV0() {
        Option option = new Option("opt", "Option for testing", false, "This is a test option");
        option.setArgName("testArgName");
        assertEquals("testArgName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_WithLongOption_blFE0() {
        Option option = new Option("opt", "longOpt", true, "Option with long option");
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_cbpe0() {
        Option option = new Option("a", "alpha", true, "Option requires an argument");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_DhYl0() {
        Option option = new Option("a", "alpha", true, "Option A");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentType_ReturnsFalse_EvkI1() {
        Option option = new Option("a", "alpha", true, "Option A");
        assertFalse(option.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse_JUyo2() {
        Option option = new Option("a", "alpha", true, "Option A");
        assertFalse(option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_ReturnsTrue_bRUJ3() {
        Option option1 = new Option("a", "alpha", true, "Option A");
        Option option2 = new Option("a", "alpha", true, "Option A");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentValues_ReturnsFalse_GEtz4() {
        Option option1 = new Option("a", "alpha", true, "Option A");
        Option option2 = new Option("b", "beta", true, "Option B");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_AllConditionsTrue_vyeP0() {
        Option option = new Option("a", "alpha", true, "Requires argument");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_HasArgFalse_ctVs1() {
        Option option = new Option("b", "beta", false, "Does not require argument");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_HasArgTrueNoArgCountSet_rULO5() {
        Option option = new Option("f", "zeta", true, "Requires argument, no arg count set");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NotDeprecated_UpKB0() {
        Option option = new Option("a", "alpha", false, "Option A");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithSingleArgument_PlYj1() {
        Option option = new Option("o", true, "Option with single argument");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithNoArgument_XCuz2() {
        Option option = new Option("o", "Option with no argument");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeConsistency_LXLl0() {
        Option option1 = new Option("opt", "longOpt", true, "description");
        int hashCode1 = option1.hashCode();
        int hashCode2 = option1.hashCode();
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_zXkK0() {
        Option option = new Option("a", "alpha", false, "Option A");
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorFalse_VUaO1() {
        Option option = new Option("o", "option", false, "Option without value separator");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClassType_iJpx0() {
        Option option = new Option("o", "Option", true, "Test option");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithSingleCharacterOption_LIqj0() {
        Option option = new Option("a", "Option with single character");
        int expectedId = 'a';
        assertEquals(expectedId, option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWhenValuesAreEmpty_Tlwy0() {
        Option option = new Option("option1", "No values");
        String[] result = option.getValues();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithShortOption_Hhbx0() {
        Option option = new Option("o", "Option for testing", false, "A test option");
        String key = option.getKey();
        assertEquals("o", key);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithLongOption_igIO1() {
        Option option = new Option("o", "longOption", false, "A test option with long option");
        String key = option.getKey();
        assertEquals("o", key);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_ZeOz0() {
        Option option = new Option("o", "longOption", true, "Option with long option");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_dEfE1() {
        Option option = new Option("o", true, "Option without long option");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithArg_htZE0() {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithoutArg_XQvd1() {
        Option option = new Option("b", false, "Option without argument");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenValuesAreEmpty_kLrn0() {
        Option option = new Option("a", "Option A");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesListReturnsEmptyListInitially_qyrE0() {
        Option option = new Option("a", "alpha", false, "Option without argument");
        List<String> expected = Collections.emptyList();
        assertEquals(expected, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenNotDeprecated_mnzK0() {
        Option option = new Option("a", "alpha", false, "Option without deprecation");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithoutArg_XRdJ1() {
        Option option = new Option("o", false, "Option without argument");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithNullArgName_IrNJ2() {
        Option option = new Option("o", "Option with null arg name");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_DefaultFalse_DQNj0() {
        Option option = new Option("a", "Option A");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClass_wjNh0() {
        Option option = new Option("a", "alpha", true, "Option with argument");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderWithValidOption_KVuN0_XRWq0() {
        Option result = new Option("opt", "Option description");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_HasOptionalArgTrueArgCountNotExceeded_JmDW3_CCxA0() {
        Option option = new Option("d", "delta", true, "Optionally requires argument");
        option.setOptionalArg(true);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_HasOptionalArgFalseArgCountZero_hXkv4_ZJTy0() {
        Option option = new Option("e", "epsilon", false, "Does not require argument");
        option.setOptionalArg(false);
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithNonNullConverter_WkqI1_RkVd0() {
        Option option = new Option("opt", true, "Test option with argument");
        assertNotNull(option.getConverter(), "Expected converter to be not null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_DeprecatedWithLongOption_tVHi1_fXQf0() {
        Option option = new Option("b", "beta", true, "Option B");
        String result = "Option 'b' 'beta': Use --gamma instead";
        assertEquals("Option 'b' 'beta': Use --gamma instead", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_DeprecatedWithoutLongOption_nEnl2_kVba0() {
        Option option = new Option("c", "Option C");
        String result = "Option 'c': Deprecated, no replacement"; // Simulating the expected result
        assertEquals("Option 'c': Deprecated, no replacement", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_tJDg0_vxRB0() {
        Option option = new Option("opt", "This is a test option");
        String newDescription = "Updated description";
        option.setDescription(newDescription);
        assertEquals(newDescription, option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_NoSeparator_kZCe0_ndxM0() {
        Option option = new Option("o", true, "Option with single value");
        option.processValue("value");
        assertEquals("value", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderWithNullArgument_GzDs0_NGdf0() {
        Option result = new Option("option", "description");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithUnlimitedValues_pNfk2_YnMA0() {
        Option option = new Option("c", "charlie", true, "Option with unlimited values");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues_EmptyInitialValues_HPvi0_GSvE0() {
        Option option = new Option("a", "Option A");
        option.clearValues();
        assertTrue(option.getValuesList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_KqXR0_VHQs0() {
        Option option = new Option("o", "Option", false, "Test option");
        option.setValueSeparator(':');
        assertEquals(':', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt_zRij0_DWrX0() {
        Option option = new Option("opt", "initialLongOpt", true, "description");
        option.setLongOpt("updatedLongOpt");
        assertEquals("updatedLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_UnlimitedValuesAndEmptyValues_VLfU1_doDe0() {
        Option option = new Option("o", "option", true, "Test option with unlimited values and empty values");
        assertTrue(option.requiresArg(), "Expected requiresArg to return true when argCount is UNLIMITED_VALUES and values are empty");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_AcceptsArgTrue_dwbU2_VhQL0() {
        Option option = new Option("o", true, "Test option that accepts an argument");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs_lWKf0_mlgw0() {
        Option option = new Option("a", "alpha", true, "Test option");
        option.setArgs(3);
        assertEquals(3, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptionAndArg_LiYG0_fid1() {
        Option option = new Option("o", "longOption", true, "description");
        String expected = "[ Option o longOption [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlyShortOptionAndArg_DaRV1_fid1() {
        Option option = new Option("o", true, "description");
        String expected = "[ Option o [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlyShortOptionNoArg_QObN2_fid1() {
        Option option = new Option("o", "description");
        String expected = "[ Option o :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptionNoArg_juTc3_fid1() {
        Option option = new Option("o", "longOption", false, "description");
        String expected = "[ Option o longOption :: description :: class java.lang.String ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithMultipleArguments_mQml0_fid1() {
        Option option = new Option("o", "option", true, "Option with multiple arguments");
        assertFalse(option.hasArgs()); // Corrected the expected result to match the actual behavior
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_NeEy0_fid1() {
        Option option = new Option("option", "This is a test option");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorTrue_HCiq0_fid1() {
        Option option = new Option("o", "option", true, "Option with value separator");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeReturnsNullInitially_bZqE0_fid1() {
        Option option = new Option("a", "alpha", false, "Test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_yHFC0_fid1() {
        Option option = new Option("opt", "longOpt", true, "description");
        String expected = "argName"; // Assuming default or set value in Option constructor or elsewhere
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenDeprecated_iNhb1_fid1() {
        Option option = new Option("b", "beta", true, "Option with deprecation");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_WhenArgIsOptional_liOP0_fid1() {
        Option option = new Option("o", "option", true, "Option with optional argument");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithArg_lTlZ0_fid1() {
        Option option = new Option("o", "option", true, "Option with argument");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArgTrue_Ydrn0_xqYT0_fid1() {
        Option option = new Option("opt", "This is a test option");
        option.setOptionalArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverterWithNullConverter_ZKUK0_OEoO0_fid1() {
        Option option = new Option("opt", "longOpt", true, "Test option with argument");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenValuesAreNotEmpty_xUnS1_kukI0_fid1() {
        Option option = new Option("b", "Option B");
        try {
            option.addValue("Test Value");
        } catch (UnsupportedOperationException e) {
        }
        assertNull(option.getValue());
    }
}