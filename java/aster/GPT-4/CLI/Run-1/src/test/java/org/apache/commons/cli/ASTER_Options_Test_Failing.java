/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithExistingOption_VhVq0_cUkt0() {
        Options options = new Options();
        options.addOption("verbose", "Enables verbose mode");
        boolean result = options.hasLongOption("verbose");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ExactMatch_ufvY0_cbCN0() {
        Options options = new Options();
        options.addOption("option", "Test option");
        List<String> result = options.getMatchingOptions("option");
        assertEquals(Collections.singletonList("option"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_PartialMatch_QUfZ1_wrae0_1() {
        Options options = new Options();
        options.addOption("optionOne", "Description for option one");
        options.addOption("optionTwo", "Description for option two");
        List<String> result = options.getMatchingOptions("option");
        assertTrue(result.contains("optionOne"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_PartialMatch_QUfZ1_wrae0_2() {
        Options options = new Options();
        options.addOption("optionOne", "Description for option one");
        options.addOption("optionTwo", "Description for option two");
        List<String> result = options.getMatchingOptions("option");
        assertTrue(result.contains("optionTwo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_PartialMatch_QUfZ1_wrae0_3() {
        Options options = new Options();
        options.addOption("optionOne", "Description for option one");
        options.addOption("optionTwo", "Description for option two");
        List<String> result = options.getMatchingOptions("option");
        assertEquals(2, result.size());
    }
}