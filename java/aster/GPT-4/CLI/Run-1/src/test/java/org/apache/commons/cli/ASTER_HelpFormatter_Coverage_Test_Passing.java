/**
 * Generated by Aster
 */
package org.apache.commons.cli;
import java.io.PrintWriter;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_HelpFormatter_Coverage_Test_Passing {
        private void printWrapped(PrintWriter pw, int width, int indent, String text) {
            pw.print(text);
            pw.flush();
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedWithinWidth_PBtH0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_TabWithinWidth_wyqj1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BackwardSearchForSpace_LQRL2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BackwardSearchForLineFeed_zipX3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_AtTextEnd_mtIN6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithEmptyArgName_oAaJ1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName("");
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithLongOptSeparator_Mhkc3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", true, "description");
        option.setLongOpt("alpha");
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNonNullDescription_UYLa6() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = mock(Options.class);
        Option option = new Option("a", "alpha", false, "description");
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void printWrapped(final PrintWriter pw, final int width, final String text) {
            printWrapped(pw, width, 0, text);
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BackwardSearchForCarriageReturn_cRlE4_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\rWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

}