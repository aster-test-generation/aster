/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLineParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEmptyArguments_WUbI0_BjbM0() {
        CommandLineParser parser = new DefaultParser(); // Correct instantiation using a concrete implementation
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_boWv3_hkFA0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "Required option");
        String[] arguments = {"-r"};
        try {
            CommandLine result = parser.parse(options, arguments);
            assertNotNull(result);
            assertTrue(result.hasOption("r"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseMissingRequiredOptions_wRqy4_Iamc0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "Required option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_FBvu5_UURk0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "alpha");
        options.addOption("b", true, "beta");
        String[] arguments = {"-a", "-b", "value"};
        try {
            CommandLine result = parser.parse(options, arguments);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
            assertTrue(result.hasOption("b"));
            assertEquals("value", result.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_NLsD6_Xujt0() {
        CommandLineParser parser = new DefaultParser(); // Correct instantiation using a concrete implementation
        Options options = new Options();
        options.addOption("a", false, "alpha");
        String[] arguments = {"-b"};
        try {
            parser.parse(options, arguments);
            fail("Expected ParseException not thrown");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_EfSk7_mjAN0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("x", "extra", false, "Extra option"));
        group.addOption(new Option("y", "yes", false, "Yes option"));
        options.addOptionGroup(group);
        String[] arguments = {"-x"};
        try {
            CommandLine result = parser.parse(options, arguments);
            assertNotNull(result);
            assertTrue(result.hasOption("x"));
            assertFalse(result.hasOption("y"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptions_IYbQ8_IUqQ0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        try {
            CommandLine result = parser.parse(options, arguments);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAfterNonOption_upwC9_NMqJ0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "alpha");
        String[] arguments = {"-a", "--", "file.txt"};
        try {
            CommandLine result = parser.parse(options, arguments, true);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
            assertEquals(1, result.getArgList().size());
            assertEquals("file.txt", result.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndNoArguments_OjSY0_IIEc0() throws ParseException {
        CommandLineParser parser = new DefaultParser(); // Correct instantiation using DefaultParser
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndNoArguments_YIOm1_ythp0() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "no argument");
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertFalse(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMatchingArgument_GYiP2_AeoX0_1() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "requires argument");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine result = parser.parse(options, arguments);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndMatchingArgument_GYiP2_AeoX0_2() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "requires argument");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine result = parser.parse(options, arguments);
        assertEquals("value", result.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndArguments_dMBB3_PBWT0_1() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "first option");
        options.addOption("b", false, "second option");
        String[] arguments = new String[]{"-a", "value1", "-b"};
        CommandLine result = parser.parse(options, arguments);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndArguments_dMBB3_PBWT0_2() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "first option");
        options.addOption("b", false, "second option");
        String[] arguments = new String[]{"-a", "value1", "-b"};
        CommandLine result = parser.parse(options, arguments);
        assertTrue(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndArguments_dMBB3_PBWT0_3() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "first option");
        options.addOption("b", false, "second option");
        String[] arguments = new String[]{"-a", "value1", "-b"};
        CommandLine result = parser.parse(options, arguments);
        assertEquals("value1", result.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_ZUTF4_qsaM0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "required option");
        String[] arguments = new String[0];
        assertThrows(ParseException.class, () -> parser.parse(options, arguments));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithGroupOptionsAndOneSelected_whMG5_CJQH0_1() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "option a"));
        group.addOption(new Option("b", "beta", false, "option b"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        CommandLine result = parser.parse(options, arguments);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithGroupOptionsAndOneSelected_whMG5_CJQH0_2() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "option a"));
        group.addOption(new Option("b", "beta", false, "option b"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        CommandLine result = parser.parse(options, arguments);
        assertFalse(result.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOption_KQIG7_KoXN0() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        assertThrows(ParseException.class, () -> parser.parse(options, arguments));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionHavingMultipleValues_QXUi8_SuJt0() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "multiple values");
        String[] arguments = new String[]{"-a", "value1", "-a", "value2"};
        CommandLine result = parser.parse(options, arguments);
        String[] values = result.getOptionValues("a");
        assertArrayEquals(new String[]{"value1", "value2"}, values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndArgument_LTba9_wPDX0_1() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "long option with argument");
        String[] arguments = new String[]{"--alpha", "value"};
        CommandLine result = parser.parse(options, arguments);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndArgument_LTba9_wPDX0_2() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "long option with argument");
        String[] arguments = new String[]{"--alpha", "value"};
        CommandLine result = parser.parse(options, arguments);
        assertEquals("value", result.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GpVr1_IcBQ0_fid1() {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "alpha");
        String[] arguments = {"-a", "random", "-b"};
        try {
            CommandLine result = parser.parse(options, arguments, true);
            assertNotNull(result);
            assertTrue(result.hasOption("a"));
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesOption_UCKc6_yybn0_fid1() throws ParseException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption(Option.builder("D").hasArgs().valueSeparator('=').desc("define properties").build());
        String[] arguments = new String[]{"-Dkey=value"};
        CommandLine result = parser.parse(options, arguments);
        Properties props = result.getOptionProperties("D");
        assertEquals("value", props.getProperty("key"));
    }
}