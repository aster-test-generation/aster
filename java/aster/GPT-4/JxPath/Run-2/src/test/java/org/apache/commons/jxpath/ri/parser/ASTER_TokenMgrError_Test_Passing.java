/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TokenMgrError_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithControlCharacters_AMSH0() {
        String input = "\b\t\n\f\r\"\'\\";
        String expected = "\\b\\t\\n\\f\\r\\\"\\'\\\\";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithAlphanumericCharacters_HbuE1() {
        String input = "abc123";
        String expected = "abc123";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithNonPrintableCharacters_Batu2() {
        String input = String.valueOf((char) 1) + (char) 127;
        String expected = "\\u0001\\u007f";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithEmptyString_aQbZ3() {
        String input = "";
        String expected = "";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLexicalErrorWithEOF_ToJe0() {
        String result = TokenMgrError.LexicalError(true, 0, 1, 5, "some text", 'a');
        assertEquals("Lexical error at line 1, column 5.  Encountered: <EOF> after : \"some text\"", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLexicalErrorWithoutEOF_IUWI1() {
        String result = TokenMgrError.LexicalError(false, 0, 1, 5, "some text", 'a');
        assertEquals("Lexical error at line 1, column 5.  Encountered: \"a\" (97), after : \"some text\"", result);
    }
}