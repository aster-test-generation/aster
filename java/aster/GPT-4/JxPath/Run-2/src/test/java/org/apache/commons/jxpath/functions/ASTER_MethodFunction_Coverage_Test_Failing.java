/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.functions;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodFunction_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithNullParameters_deaE1_ysgp0() throws Exception {
    Method method = String.class.getMethod("valueOf", int.class);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object result = function.invoke(context, null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithExpressionContextParameter_kTAF2_LpAt0() throws Exception {
    Method method = String.class.getMethod("valueOf", Object.class);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{context};
    Object result = function.invoke(context, parameters);
    assertEquals("null", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeThrowsInvocationTargetException_APry7_HEct0() throws Exception {
    Method method = String.class.getMethod("charAt", int.class);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{"test", 5}; // Index out of bounds to cause exception
    try {
        function.invoke(context, parameters);
        fail("Expected an IndexOutOfBoundsException to be thrown");
    } catch (IndexOutOfBoundsException ex) {
        // Expected exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithNullParameters_deaE1_ysgp0_fid3() throws Exception {
    Method method = String.class.getMethod("valueOf", int.class);
    when(method.getModifiers()).thenReturn(Modifier.STATIC);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    function.invoke(context, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithExpressionContextParameter_kTAF2_LpAt0_fid3() throws Exception {
    Method method = String.class.getMethod("valueOf", Object.class);
    when(method.getModifiers()).thenReturn(Modifier.STATIC);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{context};
    function.invoke(context, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeInstanceMethodWithNoParameters_tSnw4_PdtX0_fid3() throws Exception {
    Method method = String.class.getMethod("length");
    when(method.getModifiers()).thenReturn(0);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{"test"};
    function.invoke(context, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithNoParameters_wJhe0_mUIA0_fid3() throws Exception {
    Method method = String.class.getMethod("valueOf", int.class);
    when(method.getModifiers()).thenReturn(Modifier.STATIC);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{123};
    function.invoke(context, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeInstanceMethodWithExpressionContextParameter_RuAs5_mUlc0_fid3() throws Exception {
    Method method = String.class.getMethod("substring", int.class);
    when(method.getModifiers()).thenReturn(0);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{"test", 1};
    function.invoke(context, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeStaticMethodWithConversion_BovS3_kgnd0_fid3() throws Exception {
    Method method = String.class.getMethod("valueOf", int.class);
    when(method.getModifiers()).thenReturn(Modifier.STATIC);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{"123"};
    function.invoke(context, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeThrowsInvocationTargetException_APry7_HEct0_fid3() throws Exception {
    Method method = String.class.getMethod("charAt", int.class);
    when(method.getModifiers()).thenReturn(0);
    MethodFunction function = new MethodFunction(method);
    ExpressionContext context = mock(ExpressionContext.class); // Correct instantiation using mock
    Object[] parameters = new Object[]{"test", 5}; // Index out of bounds to cause exception
    try {
        function.invoke(context, parameters);
    } catch (JXPathInvalidAccessException ex) {
    }
}
}