/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_bufposGreaterThanOrEqualToTokenBegin_uPlz0_2() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 3;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(8, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_bufposLessThanTokenBegin_zLXE1_2() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 1;
        stream.tokenBegin = 4;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(3, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_WhileLoopCondition_Mtgq2_1() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_WhileLoopCondition_Mtgq2_2() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(8, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInLoop_RVus3_2() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 7);
        stream.bufpos = 3;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1, 1, 1, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3, 1, 2, 3, 4};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_NewLineIncrement_zyck4_2() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 7);
        stream.bufpos = 6;
        stream.tokenBegin = 3;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1, 1, 1, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3, 1, 2, 3, 4};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(4, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_fyqq0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true;
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_fyqq0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true;
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_fyqq0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true;
        stream.UpdateLineColumn('a');
        assertFalse(stream.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_hZQd3_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_hZQd3_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_hZQd3_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('a');
        assertFalse(stream.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCNewLineAfterCR_nxwP5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('\n');
        assertTrue(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnPrevCharIsLFTrue_jsOE6() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.UpdateLineColumn('\n');
        assertTrue(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithNullStream_bttO1_JAqs0() {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    stream.ReInit((java.io.Reader) null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharWithIncrementedBufPos_ctKE5_krFQ0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abc"));
    stream.buffer = new char[]{'a', 'b', 'c'};
    stream.bufpos = -1; // Set bufpos before the start
    char result = stream.readChar();
    assertEquals('a', result); // Expect first character in buffer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharWithBufPosResetToZero_lSSG4_TWnD0() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("abc");
    SimpleCharStream stream = new SimpleCharStream(reader);
    stream.inBuf = 1;
    stream.buffer = new char[]{'a', 'b', 'c'};
    stream.bufpos = 2; // Set bufpos to last index
    stream.bufsize = 3; // bufsize equals buffer length
    stream.readChar(); // This should reset bufpos to 0
    char result = stream.readChar();
    assertEquals('b', result); // Expect second character in buffer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_bufposLessThanTokenBegin_zLXE1_2_fid1() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 1;
        stream.tokenBegin = 4;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2,0, 4, 5, 6};
        stream.adjustBeginLineColumn(2,0);
        assertEquals(3, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_WhileLoopCondition_Mtgq2_1_fid1() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1,3, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);}
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInLoop_RVus3_2_fid1() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader,2,2, 7);
        stream.bufpos = 3;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1,2,2, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3,2, 2, 3, 4};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_NewLineIncrement_zyck4_2_fid1() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 7);
        stream.bufpos = 6;
        stream.tokenBegin = 3;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1, 1, 1, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3, 1, 2, 3,1};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(4, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharWithIncrementedBufPos_ctKE5_krFQ0_fid1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abc"));
    stream.buffer = new char[]{'a', 'b', 'c'};
    stream.bufpos = 0; // Set bufpos to the start of the buffer
    char result = stream.readChar();
    assertEquals('a', result); // Expect first character in buffer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharWithBufPosResetToZero_lSSG4_TWnD0_fid1() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("abc");
    SimpleCharStream stream = new SimpleCharStream(reader);
    stream.inBuf = 1;
    stream.buffer = new char[]{'a', 'b', 'c'};
    stream.bufpos = 2; // Set bufpos to last index
    stream.bufsize = 3; // bufsize equals buffer length
    stream.readChar(); // This should reset bufpos to 0
    stream.readChar(); // Move to next character after reset
    char result = stream.readChar(); // Read the next character
    assertEquals('c', result); // Expect third character in buffer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_bufposGreaterThanOrEqualToTokenBegin_uPlz0() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 3;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);
        assertEquals(8, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_bufposLessThanTokenBegin_zLXE1() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 1;
        stream.tokenBegin = 4;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);
        assertEquals(3, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_WhileLoopCondition_Mtgq2() {
        java.io.StringReader reader = new java.io.StringReader("abcdef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 6);
        stream.bufpos = 5;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 6;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5, 6};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(2, stream.line);
        assertEquals(8, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInLoop_RVus3() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 7);
        stream.bufpos = 3;
        stream.tokenBegin = 0;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1, 1, 1, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3, 1, 2, 3, 4};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(3, stream.line);
        assertEquals(1, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_NewLineIncrement_zyck4() {
        java.io.StringReader reader = new java.io.StringReader("abc\ndef");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 7);
        stream.bufpos = 6;
        stream.tokenBegin = 3;
        stream.inBuf = 0;
        stream.bufsize = 7;
        stream.bufline = new int[]{1, 1, 1, 2, 2, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 3, 1, 2, 3, 4};
        stream.adjustBeginLineColumn(2, 3);
        assertEquals(3, stream.line);
        assertEquals(4, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_fyqq0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true;
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);
        assertEquals(1, stream.column);
        assertFalse(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_hZQd3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true;
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);
        assertEquals(1, stream.column);
        assertFalse(stream.prevCharIsCR);
    }
}