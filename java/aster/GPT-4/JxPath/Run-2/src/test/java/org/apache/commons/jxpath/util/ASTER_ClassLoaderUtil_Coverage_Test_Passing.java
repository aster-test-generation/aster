/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassLoaderUtil_Coverage_Test_Passing {
    static {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithAbbreviation_NIFK0() throws ClassNotFoundException {
        String className = "int";
        ClassLoader classLoader = ClassLoader.getSystemClassLoader();
        Class result = ClassLoaderUtil.getClass(classLoader, className, true);
        assertEquals(int.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithCanonicalName_dMZo1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader classLoader = ClassLoader.getSystemClassLoader();
        Class result = ClassLoaderUtil.getClass(classLoader, className, true);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithContextClassLoader_Fpyf0_kxtf0_1() throws ClassNotFoundException {
    ClassLoader contextClassLoader = mock(ClassLoader.class);
    Thread.currentThread().setContextClassLoader(contextClassLoader);
    String expectedClassName = "java.lang.String";
    boolean initialize = true;
    when(contextClassLoader.loadClass(expectedClassName)).thenReturn((Class) String.class);
    Class<?> result = ClassLoaderUtil.getClass(expectedClassName, initialize);
    verify(contextClassLoader).loadClass(expectedClassName);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithContextClassLoader_Fpyf0_kxtf0_2() throws ClassNotFoundException {
    ClassLoader contextClassLoader = mock(ClassLoader.class);
    Thread.currentThread().setContextClassLoader(contextClassLoader);
    String expectedClassName = "java.lang.String";
    boolean initialize = true;
    when(contextClassLoader.loadClass(expectedClassName)).thenReturn((Class) String.class);
    Class<?> result = ClassLoaderUtil.getClass(expectedClassName, initialize);
    verify(contextClassLoader).loadClass(expectedClassName);
    assertEquals(String.class, result);}
}