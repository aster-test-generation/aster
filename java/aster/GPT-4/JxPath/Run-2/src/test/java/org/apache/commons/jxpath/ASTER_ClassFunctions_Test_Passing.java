/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Collections;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Collections;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullNamespaceAndNonMatchingInstanceNamespace_dIko0() {
        ClassFunctions cf = new ClassFunctions(Function.class, "someNamespace");
        assertNull(cf.getFunction(null, "methodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithMatchingNamespaceAndNonExistentMethod_zPHq1() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNull(cf.getFunction("testNamespace", "nonExistentMethod", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullParameters_zTmK2() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNull(cf.getFunction(null, "methodName", null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithDifferentNamespace_GrHK6() {
        ClassFunctions cf = new ClassFunctions(Function.class, "originalNamespace");
        assertNull(cf.getFunction("differentNamespace", "methodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUsedNamespaces_mtTR0() {
    ClassFunctions classFunctions = new ClassFunctions(ClassFunctions.class, "com.example");
    Set<String> expected = Collections.singleton("com.example");
    assertEquals(expected, classFunctions.getUsedNamespaces());
}
}