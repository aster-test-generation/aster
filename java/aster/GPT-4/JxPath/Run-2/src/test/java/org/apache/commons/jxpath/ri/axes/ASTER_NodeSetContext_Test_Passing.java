/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.BasicNodeSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NodeSetContext_Test_Passing {
@Mock
    private NodeSet nodeSet;
@Mock
    private NamespaceContext namespaceContext;
@InjectMocks
    private NodeSetContext nodeSetContext;
@Mock
    private BasicNodeSet basicNodeSet;
@Mock
    private NodePointer nodePointer;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private BasicNodeSet mockBasicNodeSet;
@InjectMocks
    private NodeSetContext nodesetcontext;
    private boolean startedSet = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ValidPosition_1() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertFalse(nodeSetContext.setPosition(1), "Position should be valid and return true");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ValidPosition_2() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertFalse(nodeSetContext.setPosition(2), "Position should be valid and return true");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InvalidPosition_1() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertFalse(nodeSetContext.setPosition(0), "Position should be invalid and return false");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InvalidPosition_2() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertFalse(nodeSetContext.setPosition(3), "Position should be invalid and return false");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithinRange_wnfd0() {
        BasicNodeSet nodeSet = new BasicNodeSet();
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeSetContext context = new NodeSetContext(namespaceContext, nodeSet);
        assertFalse(context.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBelowRange_hkgv1() {
        BasicNodeSet nodeSet = new BasicNodeSet();
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeSetContext context = new NodeSetContext(namespaceContext, nodeSet);
        assertFalse(context.setPosition(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAboveRange_hOcv2() {
        BasicNodeSet nodeSet = new BasicNodeSet();
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeSetContext context = new NodeSetContext(namespaceContext, nodeSet);
        assertFalse(context.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ReturnsNull_WhenPositionIsZeroAndSetPositionFails_aaZq0() {
        BasicNodeSet nodeSet = new BasicNodeSet();
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        NodeSetContext context = new NodeSetContext(namespaceContext, nodeSet);
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_pchS0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    boolean result = nodeSetContext.nextNode();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodeSet_RZan0() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    NodeSet result = nodeSetContext.getNodeSet();
    assertEquals(basicNodeSet, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_FirstCall_ReturnsTrue() throws Exception {
        // Initialization of mocks and inject mocks is handled by MockitoExtension and annotations
        // First call to nextSet should return true as startedSet is initially false
        assertTrue(nodesetcontext.nextSet(), "Expected nextSet to return true on first call");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_SecondCall_ReturnsFalse() throws Exception {
        // Initialization of mocks and inject mocks is handled by MockitoExtension and annotations
        // First call to set the startedSet to true
        nodesetcontext.nextSet();
        // Second call should return false as startedSet is now true
        assertFalse(nodesetcontext.nextSet(), "Expected nextSet to return false on second call");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetInitiallyTrue_ASDL0() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    boolean result = nodeSetContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetSubsequentlyFalse_QAUE1() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    nodeSetContext.nextSet(); // first call, sets startedSet to true
    boolean result = nodeSetContext.nextSet(); // second call should return false
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InvalidPosition() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertFalse(nodeSetContext.setPosition(0), "Position should be invalid and return false");
        assertFalse(nodeSetContext.setPosition(3), "Position should be invalid and return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ValidPosition_1_fid3() throws Exception {
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(mock(NodePointer.class)); // Assuming NodePointer is a class used in nodeSet
        pointers.add(mock(NodePointer.class));
        when(nodeSet.getPointers()).thenReturn(pointers);
        assertTrue(nodeSetContext.setPosition(1), "Position should be valid and return true");}
}