/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.w3c.dom.Node;

public class Aster_LangAttributePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_qFlz0() {
        Node node = mock(Node.class);
        Locale locale = new Locale("en", "US");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        LangAttributePointer langAttributePointer = new LangAttributePointer(domNodePointer);
        when(domNodePointer.getBaseValue()).thenReturn("TestValue");
        Object result = langAttributePointer.getImmediateNode();
        assertEquals("TestValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_Umrp0() {
        Node mockNode = null; // Assuming Node is an interface or abstract class, use a mock framework or concrete implementation
        Locale locale = new Locale("en", "US");
        DOMNodePointer domNodePointer = new DOMNodePointer(mockNode, locale);
        LangAttributePointer langAttributePointer = new LangAttributePointer(domNodePointer);
        String result = (String) langAttributePointer.getBaseValue();
        assertEquals("en-US", result);
    }
}