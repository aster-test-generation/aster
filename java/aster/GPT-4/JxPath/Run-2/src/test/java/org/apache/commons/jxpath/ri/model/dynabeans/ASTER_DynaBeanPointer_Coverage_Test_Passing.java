/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynaBeanPointer_Coverage_Test_Passing {
    private QName name;
    private DynaBean dynaBean;
    private Locale locale;
    private DOMNodePointer parent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_tHDF0() {
        QName name = null;
        Locale locale = Locale.getDefault();
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        int expectedHashCode = 0;
        int actualHashCode = dynaBeanPointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_Xrwi1() {
        DynaBeanPointer pointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_dlSO2() {
        DynaBeanPointer pointer = new DynaBeanPointer(parent, name, dynaBean);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_udry3() {
        DynaBeanPointer pointer = new DynaBeanPointer(parent, name, dynaBean);
        Object differentObject = new Object();
        assertFalse(pointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_nPPc5() {
        DynaBeanPointer pointer1 = new DynaBeanPointer(parent, name, dynaBean);
        QName differentName = new QName("differentNamespace", "differentLocalName");
        DynaBeanPointer pointer2 = new DynaBeanPointer(parent, differentName, dynaBean);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields_iTUd6() {
        DynaBeanPointer pointer1 = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer pointer2 = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_Ofky0() {
        QName name = new QName("testName");
        Locale locale = Locale.getDefault();
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        int length = dynaBeanPointer.getLength();
        assertEquals(1, length);
    }
}