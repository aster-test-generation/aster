/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Passing {
    private NodePointer clonedNodePointer;
    private VariablePointer variablePointer;
    private QName qName;
    private QName mockQName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithIndexNotWholeCollection_xgBv1() {
        QName name = new QName("variableName");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        variablePointer.index = 1; // Set index to a value other than WHOLE_COLLECTION
        variablePointer.setValue("newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollection_tELw2() {
        QName name = new QName("variableName");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        variablePointer.index = VariablePointer.WHOLE_COLLECTION;
        variablePointer.setValue("newValue");
        verify(variables).declareVariable(name.toString(), "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNull_fkXU0() {
        QName qName = new QName("testName");
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        VariablePointer spyVariablePointer = org.mockito.Mockito.spy(variablePointer);
        when(spyVariablePointer.getBaseValue()).thenReturn(null);
        int length = spyVariablePointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_GOUu0() {
        QName name1 = new QName("name1");
        QName name2 = new QName("name2");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(variables, name1);
        VariablePointer vp2 = new VariablePointer(variables, name2);
        assertFalse(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_SuperMethodCalled_pIEK0() {
        VariablePointer variablePointer = spy(new VariablePointer(new QName("testName")));
        int index = 5;
        variablePointer.setIndex(index);
        verify(variablePointer).setIndex(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsGetAbstractFactory_yEEE2() {
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        variablePointer.createPath(context);
        verify(variablePointer).getAbstractFactory(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndex_WithKeywordVariables_OOUT2_hMLt0() {
    KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    int index = 10;
    variablePointer.setIndex(index);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndex_ValuePointerSetToNull_agod1_XCPK0() {
    VariablePointer variablePointer = new VariablePointer(new QName("testName"));
    int index = 5;
    variablePointer.setIndex(index);
    assertEquals("$testName[6]", variablePointer.getValuePointer().toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWhenActualIsFalse_vWKN1_coPJ0() {
    QName name = new QName("testName");
    VariablePointer variablePointer = spy(new VariablePointer(name));
    JXPathContext context = mock(JXPathContext.class);
    Object value = new Object();
    NodePointer mockedNodePointer = mock(NodePointer.class);
    doReturn(false).when(variablePointer).isActual();
    doReturn(mockedNodePointer).when(variablePointer).createPath(context);
    doNothing().when(mockedNodePointer).setValue(value);
    NodePointer result = variablePointer.createPath(context, value);
    verify(variablePointer, times(1)).createPath(context);
    verify(mockedNodePointer, times(1)).setValue(value);
    assertSame(mockedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_CollectionCreationFails_ZMtl3_arWR0() {
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    VariablePointer spyVariablePointer = spy(variablePointer);
    try {
        doThrow(new RuntimeException("Collection creation failed")).when(spyVariablePointer).createChild(eq(context), eq(name), eq(1), any());
        spyVariablePointer.createChild(context, name, 1, "value");
        fail("Exception should have been thrown");
    } catch (RuntimeException e) {
        assertEquals("Collection creation failed", e.getMessage());
    }
}
}