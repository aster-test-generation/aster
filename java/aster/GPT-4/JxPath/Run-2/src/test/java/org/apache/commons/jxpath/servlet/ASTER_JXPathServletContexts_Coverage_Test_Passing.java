/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathServletContexts_Coverage_Test_Passing {
    private HttpSession mockHttpSession;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContext_oTYt0_1() {
        PageContext mockPageContext = mock(PageContext.class);
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        ServletContext mockServletContext = mock(ServletContext.class);
        JXPathContext mockParentContext = mock(JXPathContext.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        JXPathContextFactory factory = mock(JXPathContextFactory.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(mockPageContext.getRequest()).thenReturn(mockRequest);
        when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
        when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
        when(factory.newContext(mockParentContext, mockPageContext)).thenReturn(mockContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext).setAttribute(Constants.JXPATH_CONTEXT, mockContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContext_oTYt0_2() {
        PageContext mockPageContext = mock(PageContext.class);
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        ServletContext mockServletContext = mock(ServletContext.class);
        JXPathContext mockParentContext = mock(JXPathContext.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        JXPathContextFactory factory = mock(JXPathContextFactory.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(mockPageContext.getRequest()).thenReturn(mockRequest);
        when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
        when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
        when(factory.newContext(mockParentContext, mockPageContext)).thenReturn(mockContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext).setAttribute(Constants.JXPATH_CONTEXT, mockContext);
        assertEquals(mockContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_zenn1_1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).getRequest();
        verify(mockPageContext, never()).getServletContext();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_zenn1_2() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).getRequest();
        verify(mockPageContext, never()).getServletContext();
        assertEquals(mockContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_rYCQ0() {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        verify(session).getAttribute(Constants.JXPATH_CONTEXT);
        assertSame(existingContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_zenn1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).getRequest();
        verify(mockPageContext, never()).getServletContext();
        assertNotNull(result);
        assertEquals(mockContext, result);
    }
}