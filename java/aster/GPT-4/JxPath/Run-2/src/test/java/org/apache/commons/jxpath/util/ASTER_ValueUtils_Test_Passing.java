/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_MbVO0() throws Exception {
        assertNull(ValueUtils.getValue(null, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyArray_tPUl1() throws Exception {
        Object[] array = new Object[0];
        assertNull(ValueUtils.getValue(array, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArrayOutOfBoundsNegative_xEDs2() throws Exception {
        Object[] array = {1, 2, 3};
        assertNull(ValueUtils.getValue(array, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArrayOutOfBoundsPositive_BqQJ3() throws Exception {
        Object[] array = {1, 2, 3};
        assertNull(ValueUtils.getValue(array, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromArrayValidIndex_UYlP4() throws Exception {
        Object[] array = {1, 2, 3};
        assertEquals(2, ValueUtils.getValue(array, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyList_lQWE5() throws Exception {
        List<Object> list = new ArrayList<>();
        assertNull(ValueUtils.getValue(list, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithListOutOfBoundsNegative_Evnh6() throws Exception {
        List<Object> list = Arrays.asList(1, 2, 3);
        assertNull(ValueUtils.getValue(list, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithListOutOfBoundsPositive_TZsk7() throws Exception {
        List<Object> list = Arrays.asList(1, 2, 3);
        assertNull(ValueUtils.getValue(list, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromListValidIndex_CMxw8() throws Exception {
        List<Object> list = Arrays.asList(1, 2, 3);
        assertEquals(2, ValueUtils.getValue(list, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptySet_PjyI9() throws Exception {
        Set<Object> set = new HashSet<>();
        assertNull(ValueUtils.getValue(set, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSetOutOfBoundsNegative_CaXT10() throws Exception {
        Set<Object> set = new HashSet<>(Arrays.asList(1, 2, 3));
        assertNull(ValueUtils.getValue(set, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSetOutOfBoundsPositive_GXmR11() throws Exception {
        Set<Object> set = new HashSet<>(Arrays.asList(1, 2, 3));
        assertNull(ValueUtils.getValue(set, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueFromSetValidIndex_cfMC12() throws Exception {
        Set<Object> set = new LinkedHashSet<>(Arrays.asList(1, 2, 3));
        assertEquals(2, ValueUtils.getValue(set, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidIndex_zvPb0() throws Exception {
        String[] data = {"apple", "banana", "cherry"};
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("fruits", data.getClass(), null, null, "get", null);
        Object result = ValueUtils.getValue(data, ipd, 1);
        assertEquals("banana", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidIndex_qHIt1() throws Exception {
        String[] data = {"apple", "banana", "cherry"};
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("fruits", data.getClass(), null, null, "get", null);
        Object result = ValueUtils.getValue(data, ipd, 5);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullMethod_yMHg2() throws Exception {
        String[] data = {"apple", "banana", "cherry"};
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("fruits", data.getClass(), null, null, null, null);
        Object result = ValueUtils.getValue(data, ipd, 1);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonIndexedPropertyDescriptor_HzfB3() throws Exception {
        String[] data = {"apple", "banana", "cherry"};
        PropertyDescriptor pd = new PropertyDescriptor("fruits", data.getClass());
        Object result = ValueUtils.getValue(data, pd, 1);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_FhJL0() throws Exception {
        Integer[] array = new Integer[] {1, 2, 3};
        assertTrue(ValueUtils.isCollection(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_PmKC1() throws Exception {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        assertTrue(ValueUtils.isCollection(collection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNull_rNjm2() throws Exception {
        assertFalse(ValueUtils.isCollection(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLengthWithValidReadMethod_HKnG0() throws Exception {
        Object testObject = new Object();
        IndexedPropertyDescriptor pd = new IndexedPropertyDescriptor("propertyName", Object.class, "getPropertyName", null, null, "getIndexedPropertyName");
        assertEquals(0, ValueUtils.getIndexedPropertyLength(testObject, pd));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLengthWithNullReadMethodAndValidIndexedReadMethod_zYEI1() throws Exception {
        Object testObject = new Object();
        IndexedPropertyDescriptor pd = new IndexedPropertyDescriptor("propertyName", Object.class, null, null, null, "getIndexedPropertyName");
        assertEquals(0, ValueUtils.getIndexedPropertyLength(testObject, pd));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NullCollection_eKgT0() throws Exception {
        Object result = ValueUtils.remove(null, 0);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ValidIndex_Array_SfXW2() throws Exception {
        Integer[] array = new Integer[] {1, 2, 3};
        Object result = ValueUtils.remove(array, 1);
        assertArrayEquals(new Integer[] {1, 3}, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_FirstElement_Array_vSuD3() throws Exception {
        Integer[] array = new Integer[] {1, 2, 3};
        Object result = ValueUtils.remove(array, 0);
        assertArrayEquals(new Integer[] {2, 3}, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LastElement_Array_tbpd4() throws Exception {
        Integer[] array = new Integer[] {1, 2, 3};
        Object result = ValueUtils.remove(array, 2);
        assertArrayEquals(new Integer[] {1, 2}, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ValidIndex_List_eJxu6() throws Exception {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 1);
        assertEquals(Arrays.asList(1, 3), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_FirstElement_List_IoBt7() throws Exception {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 0);
        assertEquals(Arrays.asList(2, 3), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LastElement_List_yGcU8() throws Exception {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 2);
        assertEquals(Arrays.asList(1, 2), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ValidIndex_Collection_kwXJ10() throws Exception {
        Collection<Integer> collection = new HashSet<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(collection, 1);
        assertEquals(2, ((Collection) result).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNull_zAws0() throws Exception {
        Iterator result = ValueUtils.iterate(null);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_PKKj1() throws Exception {
        Integer[] emptyArray = new Integer[0];
        Iterator result = ValueUtils.iterate(emptyArray);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_dPHP2() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());
        assertEquals(Integer.valueOf(1), result.next());
        assertEquals(Integer.valueOf(2), result.next());
        assertEquals(Integer.valueOf(3), result.next());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_OgRb3() throws Exception {
        Collection<Integer> emptyCollection = Collections.emptyList();
        Iterator result = ValueUtils.iterate(emptyCollection);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_kYrN4() throws Exception {
        Collection<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.hasNext());
        assertEquals(Integer.valueOf(1), result.next());
        assertEquals(Integer.valueOf(2), result.next());
        assertEquals(Integer.valueOf(3), result.next());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_chpm5() throws Exception {
        String singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertTrue(result.hasNext());
        assertEquals("test", result.next());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithArray_jQcY0() throws Exception {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithCollection_ozMG1() throws Exception {
        assertEquals(1, ValueUtils.getCollectionHint(ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithPrimitive_TyBz2() throws Exception {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithInterface_srRE3() throws Exception {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithFinalClass_vvam4() throws Exception {
        assertEquals(-1, ValueUtils.getCollectionHint(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithRegularClass_ASIh5() throws Exception {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithIndexedPropertyDescriptor_mBeH0() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("property", Object.class, null, null, null, "setIndexedProperty");
        int index = 0;
        Object value = "testValue";
        ValueUtils.setValue(bean, ipd, index, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithInvalidIndex_aclB1() throws Exception {
        Object bean = new Object();
        PropertyDescriptor pd = new PropertyDescriptor("property", Object.class);
        int index = 1; // Invalid index for non-collection property
        Object value = "testValue";
        try {
            ValueUtils.setValue(bean, pd, index, value);
        } catch (IllegalArgumentException e) {
            assertEquals("Not a collection: property", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCollection_mhCm2() throws Exception {
        Object bean = new Object();
        PropertyDescriptor pd = new PropertyDescriptor("property", Object.class);
        int index = 0;
        Object value = "testValue";
        List<Object> collection = new ArrayList<>();
        collection.add("initialValue");
        ValueUtils.setValue(collection, index, value);
        assertEquals("testValue", collection.get(index));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullValue_tzvH3() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("property", Object.class, null, null, null, "setIndexedProperty");
        int index = 0;
        Object value = null;
        ValueUtils.setValue(bean, ipd, index, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithExceptionInMethodInvocation_rdkR4() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("property", Object.class, null, null, null, "setIndexedProperty");
        int index = 0;
        Object value = new Object();
        try {
            ValueUtils.setValue(bean, ipd, index, value);
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Cannot access property: property"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOnArray_tAyy0() throws Exception {
        Integer[] array = new Integer[3];
        array[0] = 1;
        array[1] = 2;
        array[2] = 3;
        ValueUtils.setValue(array, 1, 5);
        assertEquals(Integer.valueOf(5), array[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOnList_Icio1() throws Exception {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        ValueUtils.setValue(list, 2, "z");
        assertEquals("z", list.get(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOnNullCollection_sQTB3() throws Exception {
        Object collection = null;
        ValueUtils.setValue(collection, 0, 10);
        assertNull(collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullValue_uzDv4() throws Exception {
        Integer[] array = new Integer[2];
        array[0] = 10;
        array[1] = 20;
        ValueUtils.setValue(array, 1, null);
        assertNull(array[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_NullMethod_iefM0() throws Exception {
        assertNull(ValueUtils.getAccessibleMethod(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PrivateMethod_FozE1() throws NoSuchMethodException {
        Method privateMethod = ValueUtils.class.getDeclaredMethod("getAccessibleMethodFromInterfaceNest", Class.class, String.class, Class[].class);
        assertNull(ValueUtils.getAccessibleMethod(privateMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethodInPublicClass_NEsE2() throws NoSuchMethodException {
        Method publicMethod = String.class.getMethod("substring", int.class);
        assertEquals(publicMethod, ValueUtils.getAccessibleMethod(publicMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethodInPrivateClass_kTfY3() throws NoSuchMethodException, ClassNotFoundException {
        Class<?> privateClass = Class.forName("java.util.Arrays$ArrayList");
        Method publicMethod = privateClass.getMethod("size");
        assertNotNull(ValueUtils.getAccessibleMethod(publicMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_PublicMethodInNonPublicSuperclass_aBzr4() throws NoSuchMethodException {
        Method publicMethod = ArrayList.class.getMethod("trimToSize");
        assertNotNull(ValueUtils.getAccessibleMethod(publicMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_InterfaceMethod_uCQY5() throws NoSuchMethodException {
        Method interfaceMethod = List.class.getMethod("size");
        assertEquals(interfaceMethod, ValueUtils.getAccessibleMethod(interfaceMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_RecursiveInterfaceCheck_GLkZ6() throws NoSuchMethodException {
        Method recursiveInterfaceMethod = Map.Entry.class.getMethod("getKey");
        assertNotNull(ValueUtils.getAccessibleMethod(recursiveInterfaceMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_MethodFromSuperInterface_PCQE7() throws NoSuchMethodException {
        Method superInterfaceMethod = Set.class.getMethod("isEmpty");
        assertNotNull(ValueUtils.getAccessibleMethod(superInterfaceMethod));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNull_ATaA0() throws Exception {
        assertEquals(0, ValueUtils.getLength(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithArray_atEp1() throws Exception {
        Integer[] array = new Integer[]{1, 2, 3};
        assertEquals(3, ValueUtils.getLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithCollection_jDaU2() throws Exception {
        Collection<Integer> collection = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
        assertEquals(4, ValueUtils.getLength(collection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithSingleObject_JoVD3() throws Exception {
        Integer singleObject = 123;
        assertEquals(1, ValueUtils.getLength(singleObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerWithValidClass_yXBI0() throws Exception {
    DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
    assertNotNull(result);
    assertTrue(result instanceof DynamicPropertyHandler);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_dPHP2_1() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_dPHP2_2() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(Integer.valueOf(1), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_dPHP2_3() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(Integer.valueOf(2), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_dPHP2_4() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(Integer.valueOf(3), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_kYrN4_1() throws Exception {
        Collection<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_kYrN4_2() throws Exception {
        Collection<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(Integer.valueOf(1), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_kYrN4_3() throws Exception {
        Collection<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(Integer.valueOf(2), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_kYrN4_4() throws Exception {
        Collection<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(Integer.valueOf(3), result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_chpm5_1() throws Exception {
        String singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_chpm5_2() throws Exception {
        String singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertEquals("test", result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerWithValidClass_yXBI0_1() throws Exception {
    DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerWithValidClass_yXBI0_2() throws Exception {
    DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
    assertTrue(result instanceof DynamicPropertyHandler);}
@Test
public void testExpandUnsupportedType_ctzQ4_PpLW0() throws Exception {
    try {
        ValueUtils.expandCollection("string", 10);
        fail("Expected JXPathException to be thrown");
    } catch (JXPathException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollectionWithNullInput_vZIJ1_jJXm0() throws Exception {
    assertNull(ValueUtils.expandCollection(null, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithInvalidProperty_CWur2_vRnn0() throws Exception {
    Object bean = new Object(); // Changed from SimpleBean to Object
    try {
        PropertyDescriptor pd = new PropertyDescriptor("invalidProperty", bean.getClass());
        ValueUtils.setValue(bean, pd, "Test Value");
        fail("JXPathException expected");
    } catch (JXPathException ex) {
        assertTrue(ex.getMessage().contains("No write method"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInvalidProperty_ohOs2_ltUl0() throws Exception {
    Object bean = new Object(); // Assuming SimpleBean is not defined, using Object for demonstration
    try {
        PropertyDescriptor pd = new PropertyDescriptor("invalidProperty", bean.getClass());
        ValueUtils.getValue(bean, pd);
        fail("JXPathException expected");
    } catch (JXPathException ex) {
        assertTrue(ex.getMessage().contains("No read method"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArray_gepx2_ixFG0_1() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 5);
    assertNotNull(expanded, "Expanded array should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArray_gepx2_ixFG0_2() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 5);
    assertEquals(5, expanded.length, "Expanded array should have the new size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArray_gepx2_ixFG0_3() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 5);
    assertArrayEquals(Arrays.copyOf(expanded, 3), original, "First three elements should match the original");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArray_gepx2_ixFG0_4() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 5);
    assertNull(expanded[3], "New elements should be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArray_gepx2_ixFG0_5() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 5);
    assertNull(expanded[4], "New elements should be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArrayList_lczX3_nmiL0_1() throws Exception {
    ArrayList<Integer> original = new ArrayList<>(Arrays.asList(1, 2, 3));
    ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(original, 5);
    assertNotNull(expanded, "Expanded collection should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArrayList_lczX3_nmiL0_2() throws Exception {
    ArrayList<Integer> original = new ArrayList<>(Arrays.asList(1, 2, 3));
    ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(original, 5);
    assertEquals(5, expanded.size(), "Expanded collection should have the new size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArrayList_lczX3_nmiL0_3() throws Exception {
    ArrayList<Integer> original = new ArrayList<>(Arrays.asList(1, 2, 3));
    ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(original, 5);
    assertEquals(original, new ArrayList<>(expanded.subList(0, 3)), "First three elements should match the original");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArrayList_lczX3_nmiL0_4() throws Exception {
    ArrayList<Integer> original = new ArrayList<>(Arrays.asList(1, 2, 3));
    ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(original, 5);
    assertNull(expanded.get(3), "New elements should be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandArrayList_lczX3_nmiL0_5() throws Exception {
    ArrayList<Integer> original = new ArrayList<>(Arrays.asList(1, 2, 3));
    ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(original, 5);
    assertNull(expanded.get(4), "New elements should be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollectionWithZeroSize_EneM5_wSHg0_1() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 3);
    assertNotNull(expanded, "Expanded array should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollectionWithZeroSize_EneM5_wSHg0_2() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 3);
    assertEquals(3, expanded.length, "Expanded array should have the same size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollectionWithZeroSize_EneM5_wSHg0_3() throws Exception {
    Integer[] original = new Integer[]{1, 2, 3};
    Integer[] expanded = (Integer[]) ValueUtils.expandCollection(original, 3);
    assertArrayEquals(original, expanded, "Elements should match the original");}
}