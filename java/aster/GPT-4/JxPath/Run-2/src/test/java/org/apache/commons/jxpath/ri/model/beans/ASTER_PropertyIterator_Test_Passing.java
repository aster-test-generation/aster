/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
private int startPropertyIndex;
private boolean empty = false;
private PropertyIterator propertyIterator;
@Mock
    private BeanPointer beanPointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private PropertyPointer propertyNodePointer;
private final String propertyName = "testProperty";
private final boolean reverse = false;
private final String[] propertyNames = {"otherProperty", "testProperty"};
@Mock
    private NodePointer valuePointer;
@Mock
    private NullPropertyPointer nullPropertyPointer;
    private int position = 0;
    private boolean targetReady = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() {
        // Mocking dependencies needed for PropertyIterator
        BeanPointer mockBeanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), null);
        propertyIterator = new PropertyIterator(mockBeanPointer, "propertyName", false, null);
        // Since position is initialized to 0 and there are no methods to change it in the provided code,
        // we expect getPosition to return 0.
        int expectedPosition = 0;
        int actualPosition = propertyIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_UTKf0() {
        QName qName = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer pointer = new BeanPointer(qName, bean, beanInfo, Locale.getDefault());
        PropertyIterator propertyIterator = new PropertyIterator(pointer, "propertyName", false, null);
        int expectedPosition = 0; // Assuming default position is 0 for this test
        assertEquals(expectedPosition, propertyIterator.getPosition());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_IndividualProperty_PositionTooLow_NfyV0() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, Locale.getDefault());
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        boolean result = propertyIterator.setPosition(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_IndividualProperty_ValidPosition_eScF1() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, Locale.getDefault());
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        boolean result = propertyIterator.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        // Initialize PropertyIterator with mocks and default values
        propertyIterator = new PropertyIterator(beanPointer, "testName", false, domNodePointer);
        // Set fields to non-default values to test the reset functionality
        propertyIterator.reset(); // Reset the iterator to its initial state
}
}