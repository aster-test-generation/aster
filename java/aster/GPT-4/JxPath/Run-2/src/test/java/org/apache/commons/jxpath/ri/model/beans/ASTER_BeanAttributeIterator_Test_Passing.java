/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanAttributeIterator_Test_Passing {

@Mock
    private QName qName;
@InjectMocks
    private BeanAttributeIterator beanAttributeIterator;
@Mock
    private BeanPointer parent;
@Mock
    private QName name;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() {
        // Since BeanAttributeIterator does not have complex initializations or dependencies
        // that affect the `position` directly, we do not need to set up anything specific here.
        // The @InjectMocks will take care of initializing beanAttributeIterator with mocked dependencies.
        // Initially, the position should be 0 as per the default value in BeanAttributeIterator.
        int expectedPosition = 0;
        int actualPosition = beanAttributeIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The initial position should be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPosition_RoiZ0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    BeanPointer parent = new BeanPointer(qName, bean, beanInfo, Locale.getDefault());
    BeanAttributeIterator iterator = new BeanAttributeIterator(parent, qName);
    int expectedPosition = 0; // Assuming the position is initialized to 0 in the constructor
    assertEquals(expectedPosition, iterator.getPosition());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_IncludeXmlLangFalse_PositionZero() throws Exception {
        // Initialize BeanAttributeIterator with includeXmlLang set to false and position to 0 by default
        beanAttributeIterator = new BeanAttributeIterator(parent, new QName("test"));
        // Arrange
        when(parent.getName()).thenReturn(new QName("test"));
        // Act
        NodePointer result = beanAttributeIterator.getNodePointer();
        // Assert
        assertNull(result, "Expected null when includeXmlLang is false and position is zero");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithoutIncludeXmlLang_TPBV0() throws Exception {
    QName name = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer parent = new BeanPointer(name, bean, beanInfo, locale);
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, name);
    boolean includeXmlLang = false;
    BeanAttributeIterator spyIterator = spy(beanAttributeIterator);
    doReturn(true).when(spyIterator).setPosition(anyInt());
    assertTrue(spyIterator.setPosition(3), "setPosition should return true when includeXmlLang is false");
    verify(spyIterator).setPosition(3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_IncludeXmlLangFalse_PositionOne_DLXH0() throws Exception {
    BeanPointer parent = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, new QName("test"));
    boolean includeXmlLang = false;
    int position = 1;
    when(parent.getName()).thenReturn(new QName("test"));
    NodePointer result = beanAttributeIterator.getNodePointer();
    assertNull(result, "Expected null when includeXmlLang is false and position is one");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionTrueIncludeXmlLang_RdFf0() throws Exception {
    QName name = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    BeanPointer parent = new BeanPointer(name, bean, beanInfo, Locale.getDefault());
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, name);
    Field includeXmlLangField = BeanAttributeIterator.class.getDeclaredField("includeXmlLang");
    includeXmlLangField.setAccessible(true);
    includeXmlLangField.set(beanAttributeIterator, true);
    BeanAttributeIterator spyIterator = spy(beanAttributeIterator);
    doReturn(true).when(spyIterator).setPosition(anyInt());
    assertTrue(spyIterator.setPosition(1), "setPosition should return true when position is 1 and includeXmlLang is true");
    verify(spyIterator).setPosition(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionFalseIncludeXmlLang_gymO0() throws Exception {
    QName name = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer parent = new BeanPointer(name, bean, beanInfo, locale);
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, name);
    Field includeXmlLangField = BeanAttributeIterator.class.getDeclaredField("includeXmlLang");
    includeXmlLangField.setAccessible(true);
    includeXmlLangField.set(beanAttributeIterator, true);
    BeanAttributeIterator spyIterator = spy(beanAttributeIterator);
    doReturn(false).when(spyIterator).setPosition(anyInt());
    assertFalse(spyIterator.setPosition(2), "setPosition should return false when position is not 1 and includeXmlLang is true");
    verify(spyIterator).setPosition(1);
}
}