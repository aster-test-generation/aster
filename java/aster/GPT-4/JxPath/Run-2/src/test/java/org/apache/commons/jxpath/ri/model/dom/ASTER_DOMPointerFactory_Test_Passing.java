/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Passing {
private DOMPointerFactory domPointerFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithNodeBean_1() {
        domPointerFactory = new DOMPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Node mockNode = mock(Node.class);
        // Act
        NodePointer result = domPointerFactory.createNodePointer(mockParent, mockQName, mockNode);
        // Assert
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithNodeBean_2() {
        domPointerFactory = new DOMPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Node mockNode = mock(Node.class);
        // Act
        NodePointer result = domPointerFactory.createNodePointer(mockParent, mockQName, mockNode);
        // Assert
        assertTrue(result instanceof DOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithNonNodeBean() {
        domPointerFactory = new DOMPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Object nonNodeBean = new Object();
        // Act
        NodePointer result = domPointerFactory.createNodePointer(mockParent, mockQName, nonNodeBean);
        // Assert
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNode_qyDT0_juAE0() {
    DOMPointerFactory factory = new DOMPointerFactory();
    QName name = new QName("test");
    Node node = Mockito.mock(Node.class); // Using Mockito to create a mock Node
    Locale locale = Locale.getDefault();
    NodePointer parent = new DOMNodePointer(node, locale); // Creating a parent NodePointer
    NodePointer result = factory.createNodePointer(parent, name, node);
    Assertions.assertNotNull(result, "Expected non-null NodePointer when input is a Node");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_Iucl0_PHAE0() {
    DOMPointerFactory factory = new DOMPointerFactory();
    int expectedOrder =100; // Assuming the expected order is100
    int actualOrder = factory.getOrder(); // This method needs to be implemented in DOMPointerFactory.
    assertEquals(expectedOrder, actualOrder);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithNodeBean() {
        domPointerFactory = new DOMPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Node mockNode = mock(Node.class);
        // Act
        NodePointer result = domPointerFactory.createNodePointer(mockParent, mockQName, mockNode);
        // Assert
        assertNotNull(result);
        assertTrue(result instanceof DOMNodePointer);
    }
}