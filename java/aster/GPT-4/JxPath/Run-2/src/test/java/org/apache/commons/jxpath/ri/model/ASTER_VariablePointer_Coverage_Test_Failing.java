/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.util.ValueUtils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Failing {
    private NodePointer clonedNodePointer;
    private VariablePointer variablePointer;
    private QName qName;
    private QName mockQName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsDeclareVariable_gcEh1() {
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        variablePointer.createPath(context);
        verify(factory).declareVariable(context, name.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsFindVariables_eLin3() {
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        variablePointer.createPath(context);
        verify(variablePointer).findVariables(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndex_ValuePointerSetToNull_agod1_XCPK0_fid1() {
    VariablePointer variablePointer = new VariablePointer(new QName("testName"));
    int index = 5;
    variablePointer.setIndex(index);
    assertNull(variablePointer.getValuePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_NodePointerClonedAndIndexSet_Sbpw1_EGYn0() {
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    VariablePointer spyVariablePointer = spy(variablePointer);
    Object collection = new Object();
    when(spyVariablePointer.getValue()).thenReturn(collection);
    doNothing().when(ValueUtils.class);
    ValueUtils.setValue(collection, 1, "value");
    NodePointer clonedNodePointer = mock(NodePointer.class);
    when(spyVariablePointer.clone()).thenReturn(clonedNodePointer);
    doNothing().when(clonedNodePointer).setIndex(1);
    NodePointer result = spyVariablePointer.createChild(context, name, 1, "value");
    verify(spyVariablePointer).clone();
    verify(clonedNodePointer).setIndex(1);
    assertEquals(clonedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_ReturnsClonedNodePointer_HkkO2_KJMZ0() {
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    VariablePointer spyVariablePointer = spy(variablePointer);
    Object collection = new Object();
    doNothing().when(ValueUtils.class);
    ValueUtils.setValue(collection, 1, "value");
    NodePointer clonedNodePointer = mock(NodePointer.class);
    doReturn(clonedNodePointer).when(spyVariablePointer).clone();
    doNothing().when(clonedNodePointer).setIndex(1);
    NodePointer result = spyVariablePointer.createChild(context, name, 1, "value");
    assertEquals(clonedNodePointer, result);
}
}