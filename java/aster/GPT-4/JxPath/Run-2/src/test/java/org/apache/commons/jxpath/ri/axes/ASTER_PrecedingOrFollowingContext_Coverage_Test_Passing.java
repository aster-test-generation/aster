/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PrecedingOrFollowingContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_aRNX0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        int order = context.getDocumentOrder();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_CallsSuperReset_ICkW0() {
        NamespaceContext mockParentContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTest = mock(NodeTypeTest.class);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockParentContext, mockNodeTest, true);
        context.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_SetsStartedToFalse_MVSp1() {
        NamespaceContext mockParentContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTest = mock(NodeTypeTest.class);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockParentContext, mockNodeTest, false);
        context.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_CompletesWithoutError_miRS2() {
        NamespaceContext mockParentContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTest = mock(NodeTypeTest.class);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockParentContext, mockNodeTest, true);
        context.reset(); // No exception means the method completes successfully
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_initialCallWithEmptyStackAndNonRootParent_FIst0() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        NodePointer mockParentNodePointer = mock(NodePointer.class);
        NodeIterator mockNodeIterator = mock(NodeIterator.class);
        when(mockNamespaceContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getParent()).thenReturn(mockParentNodePointer);
        when(mockParentNodePointer.childIterator(null, false, mockNodePointer)).thenReturn(mockNodeIterator);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockNamespaceContext, mockNodeTypeTest, false);
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_initialCallWithEmptyStackAndRootParent_etxL1() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        NodePointer mockParentNodePointer = mock(NodePointer.class);
        when(mockNamespaceContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getParent()).thenReturn(mockParentNodePointer);
        when(mockParentNodePointer.isRoot()).thenReturn(true);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockNamespaceContext, mockNodeTypeTest, false);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_initialCallWithNullParent_vKMr2() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(mockNamespaceContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getParent()).thenReturn(null);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(mockNamespaceContext, mockNodeTypeTest, false);
        assertFalse(context.nextNode());
    }

}