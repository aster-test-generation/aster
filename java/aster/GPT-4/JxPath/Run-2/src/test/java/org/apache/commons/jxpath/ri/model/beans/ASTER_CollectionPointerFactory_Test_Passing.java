/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointerFactory_Test_Passing {
private CollectionPointerFactory collectionPointerFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithCollection_duKp0_1() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    QName name = new QName("test");
    List<Object> bean = new ArrayList<>();
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, bean, locale);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithCollection_duKp0_2() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    QName name = new QName("test");
    List<Object> bean = new ArrayList<>();
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, bean, locale);
    assertTrue(result instanceof CollectionPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonCollection_Xtve1() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    QName name = new QName("test");
    String bean = "Not a collection";
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, bean, locale);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection_1() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockName = new QName("test");
        Object bean = new ArrayList(); // Using ArrayList as a collection example
        // Act
        NodePointer result = collectionPointerFactory.createNodePointer(mockParent, mockName, bean);
        // Assert
        assertNotNull(result, "Result should not be null when bean is a collection");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection_2() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockName = new QName("test");
        Object bean = new ArrayList(); // Using ArrayList as a collection example
        // Act
        NodePointer result = collectionPointerFactory.createNodePointer(mockParent, mockName, bean);
        // Assert
        assertTrue(result instanceof CollectionPointer, "Result should be an instance of CollectionPointer when bean is a collection");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonCollection() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockName = new QName("test");
        Object bean = new Object(); // Non-collection object
        // Act
        NodePointer result = collectionPointerFactory.createNodePointer(mockParent, mockName, bean);
        // Assert
        assertNull(result, "Result should be null when bean is not a collection");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_hySd0_PMyf0() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    int expectedOrder = 10; // Assuming 10 as the expected order for demonstration
    assertEquals(expectedOrder, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithCollection_duKp0() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    QName name = new QName("test");
    List<Object> bean = new ArrayList<>();
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, bean, locale);
    assertNotNull(result);
    assertTrue(result instanceof CollectionPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        // Arrange
        NodePointer mockParent = mock(NodePointer.class);
        QName mockName = new QName("test");
        Object bean = new ArrayList(); // Using ArrayList as a collection example
        // Act
        NodePointer result = collectionPointerFactory.createNodePointer(mockParent, mockName, bean);
        // Assert
        assertNotNull(result, "Result should not be null when bean is a collection");
        assertTrue(result instanceof CollectionPointer, "Result should be an instance of CollectionPointer when bean is a collection");
    }
}