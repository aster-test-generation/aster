/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtensionFunction_Coverage_Test_Passing {
    private QName functionName;
    private Expression[] args;
    private NodeSet nodeSet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_lzRx0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0]; // Assuming an empty array for simplicity
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        boolean result = extensionFunction.computeContextDependent();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompute_LKrd0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0]; // Assuming an empty array for simplicity
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        EvalContext context = mock(EvalContext.class);
        when(extensionFunction.compute(context)).thenReturn("Expected Result");
        Object result = extensionFunction.compute(context);
        assertEquals("Expected Result", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyArguments_kktt0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction function = new ExtensionFunction(functionName, args);
        assertEquals("testFunction()", function.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_nhwm3() {
        QName functionName = new QName("testFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        assertEquals("testFunction()", function.toString());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_xBep0_WiJK0() {
    QName functionName = new QName("testFunction");
    Expression[] args = new Expression[]{mock(Expression.class)};
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
    EvalContext context = mock(EvalContext.class);
    when(context.getJXPathContext()).thenReturn(mock(JXPathContext.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_WithInvalidArgs_ThrowsException_zgtD8_KQVX0() {
    Expression[] args = new Expression[]{mock(Expression.class)};
    QName functionName = new QName("testFunction");
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
    EvalContext context = mock(EvalContext.class);
    when(args[0].compute(context)).thenThrow(new RuntimeException("Error"));
    assertThrows(RuntimeException.class, () -> {
        extensionFunction.compute(context);
    });
}
}