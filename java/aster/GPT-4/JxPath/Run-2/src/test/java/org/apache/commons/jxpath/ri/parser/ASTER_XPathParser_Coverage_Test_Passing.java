// /**
//  * Generated by Aster
//  */
// package org.apache.commons.jxpath.ri.parser;
// import java.util.ArrayList;
// import org.apache.commons.jxpath.ri.Compiler;
// import org.apache.commons.jxpath.ri.axes.NamespaceContext;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
// import org.apache.commons.jxpath.ri.compiler.Expression;
// import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
// import org.apache.commons.jxpath.servlet.HttpSessionAndServletContext;
// import org.apache.commons.jxpath.servlet.KeywordVariables;
// import org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator;
// import org.apache.commons.jxpath.JXPathBasicBeanInfo;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer;
// import org.apache.commons.jxpath.servlet.HttpSessionHandler;
// import org.apache.commons.jxpath.ri.axes.SelfContext;
// import org.apache.commons.jxpath.functions.MethodFunction;
// import org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator;
// import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
// import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
// import org.apache.commons.jxpath.ri.model.beans.CollectionChildNodeIterator;
// import org.apache.commons.jxpath.ri.compiler.Constant;
// import org.apache.commons.jxpath.ri.axes.UnionContext;
// import org.apache.commons.jxpath.ri.axes.ChildContext;
// import org.apache.commons.jxpath.servlet.PageScopeContext;
// import org.apache.commons.jxpath.ri.model.NodePointer;
// import org.apache.commons.jxpath.servlet.ServletRequestAndContext;
// import org.apache.commons.jxpath.ri.compiler.NodeTest;
// import org.apache.commons.jxpath.util.TypeUtils;
// import org.apache.commons.jxpath.functions.ConstructorFunction;
// import org.apache.commons.jxpath.CompiledExpression;
// import org.apache.commons.jxpath.xml.DocumentContainer;
// import org.apache.commons.jxpath.ri.model.VariablePointer;
// import org.apache.commons.jxpath.ri.model.beans.CollectionAttributeNodeIterator;
// import org.apache.commons.jxpath.ri.compiler.Operation;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
// import org.apache.commons.jxpath.ri.NamespaceResolver;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
// import org.apache.commons.jxpath.BasicVariables;
// import org.apache.commons.jxpath.BasicNodeSet;
// import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
// import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
// import org.apache.commons.jxpath.JXPathContextFactory;
// import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
// import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
// import org.apache.commons.jxpath.util.ReverseComparator;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer;
// import org.apache.commons.jxpath.JXPathAbstractFactoryException;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
// import org.apache.commons.jxpath.ri.parser.XPathParserConstants;
// import org.apache.commons.jxpath.xml.DOMParser;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicAttributeIterator;
// import org.apache.commons.jxpath.xml.JDOMParser;
// import org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl;
// import org.apache.commons.jxpath.servlet.ServletRequestHandler;
// import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
// import org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression;
// import org.apache.commons.jxpath.Function;
// import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
// import org.apache.commons.jxpath.servlet.JXPathServletContexts;
// import org.apache.commons.jxpath.ClassFunctions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
// import org.apache.commons.jxpath.ri.axes.RootContext;
// import org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory;
// import org.apache.commons.jxpath.JXPathInvalidAccessException;
// import org.apache.commons.jxpath.servlet.Constants;
// import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
// import org.apache.commons.jxpath.ri.model.container.ContainerPointer;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
// import org.apache.commons.jxpath.util.ClassLoaderUtil;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer;
// import org.apache.commons.jxpath.FunctionLibrary;
// import org.apache.commons.jxpath.util.KeyManagerUtils;
// import org.apache.commons.jxpath.KeyManager;
// import org.apache.commons.jxpath.ri.parser.Token;
// import org.apache.commons.jxpath.ExpressionContext;
// import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
// import org.apache.commons.jxpath.ri.parser.ParseException;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyIterator;
// import org.apache.commons.jxpath.ri.model.beans.CollectionPointer;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory;
// import org.apache.commons.jxpath.PackageFunctions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
// import org.apache.commons.jxpath.ri.model.beans.CollectionNodeIterator;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory;
// import org.apache.commons.jxpath.ri.axes.InitialContext;
// import org.apache.commons.jxpath.ri.axes.NodeSetContext;
// import org.apache.commons.jxpath.JXPathIntrospector;
// import org.apache.commons.jxpath.ri.model.dynabeans.StrictLazyDynaBeanPointerFactory;
// import org.apache.commons.jxpath.ri.axes.AncestorContext;
// import org.apache.commons.jxpath.ExtendedKeyManager;
// import org.apache.commons.jxpath.ri.compiler.CoreFunction;
// import org.apache.commons.jxpath.IdentityManager;
// import org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
// import org.apache.commons.jxpath.ExceptionHandler;
// import org.apache.commons.jxpath.Variables;
// import org.apache.commons.jxpath.ri.Parser;
// import org.apache.commons.jxpath.JXPathContext;
// import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
// import org.apache.commons.jxpath.servlet.PageContextHandler;
// import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
// import org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory;
// import org.apache.commons.jxpath.JXPathTypeConversionException;
// import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationCompare;
// import org.apache.commons.jxpath.ri.model.beans.LangAttributePointer;
// import org.apache.commons.jxpath.util.ValueUtils;
// import org.apache.commons.jxpath.Functions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
// import org.apache.commons.jxpath.ri.compiler.Path;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator;
// import org.apache.commons.jxpath.JXPathNotFoundException;
// import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
// import org.apache.commons.jxpath.ri.EvalContext;
// import org.apache.commons.jxpath.ri.compiler.Step;
// import org.apache.commons.jxpath.servlet.PageScopeContextHandler;
// import org.apache.commons.jxpath.ri.parser.TokenMgrError;
// import org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory;
// import org.apache.commons.jxpath.MapDynamicPropertyHandler;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
// import org.apache.commons.jxpath.ri.compiler.CoreOperation;
// import org.apache.commons.jxpath.AbstractFactory;
// import org.apache.commons.jxpath.DynamicPropertyHandler;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
// import org.apache.commons.jxpath.Pointer;
// import org.apache.commons.jxpath.ri.model.NodePointerFactory;
// import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
// import org.apache.commons.jxpath.util.MethodLookupUtils;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory;
// import org.apache.commons.jxpath.ri.model.NodeIterator;
// import org.apache.commons.jxpath.JXPathBeanInfo;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer;
// import org.apache.commons.jxpath.XMLDocumentContainer;
// import org.apache.commons.jxpath.ri.axes.AttributeContext;
// import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
// import org.apache.commons.jxpath.ri.parser.XPathParser;
// import org.apache.commons.jxpath.ri.Compiler;
// import org.apache.commons.jxpath.ri.axes.SimplePathInterpreter;
// import org.apache.commons.jxpath.xml.XMLParser2;
// import org.apache.commons.jxpath.ri.model.beans.NullPointer;
// import org.apache.commons.jxpath.ri.JXPathCompiledExpression;
// import org.apache.commons.jxpath.ri.QName;
// import org.apache.commons.jxpath.ri.InfoSetUtil;
// import org.apache.commons.jxpath.util.TypeConverter;
// import org.apache.commons.jxpath.ri.axes.PredicateContext;
// import org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
// import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
// import org.apache.commons.jxpath.ri.axes.ParentContext;
// import org.apache.commons.jxpath.util.BasicTypeConverter;
// import org.apache.commons.jxpath.ri.axes.DescendantContext;
// import org.apache.commons.jxpath.ri.compiler.VariableReference;
// import org.apache.commons.jxpath.ri.model.dom.NamespacePointer;
// import org.apache.commons.jxpath.ri.compiler.LocationPath;
// import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
// import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
// import org.apache.commons.jxpath.xml.XMLParser;
// import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
// import org.apache.commons.jxpath.JXPathContextFactoryConfigurationError;
// import org.apache.commons.jxpath.Container;
// import org.apache.commons.jxpath.NodeSet;
// import org.apache.commons.jxpath.JXPathInvalidSyntaxException;
// import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
// import org.apache.commons.jxpath.ri.model.beans.NullElementPointer;
// import org.apache.commons.jxpath.servlet.ServletContextHandler;
// import org.apache.commons.jxpath.JXPathException;
// import static org.junit.jupiter.api.Assertions.*;
// import java.util.*;
// import org.junit.jupiter.api.*;
// import java.util.concurrent.TimeUnit;
// import static org.mockito.Mockito.when;
// import static org.mockito.Mockito.*;
// import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
// import org.springframework.mock.web.*;
// import static org.junit.jupiter.api.Assertions.*;
// import java.util.*;
// import org.junit.jupiter.api.*;
// import java.util.concurrent.TimeUnit;
// import static org.mockito.Mockito.when;
// import static org.mockito.Mockito.*;
// import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
// import org.springframework.mock.web.*;
// @ExtendWith(MockitoExtension.class)
// public class Aster_XPathParser_Coverage_Test_Passing {


//     @Test(expected = Error.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionNameThrowsError_Thbl1() throws ParseException {
//         ByteArrayInputStream inputStream = new ByteArrayInputStream("".getBytes());
//         XPathParser parser = new XPathParser(inputStream);
//         XPathParser spyParser = spy(parser);
//         doReturn(null).when(spyParser).QName_Without_CoreFunctions();
//         doReturn(false).when(spyParser).someConditionMethod(); // Assuming someConditionMethod controls the if condition
//         spyParser.FunctionName();
//     }
// @ExtendWith(MockitoExtension.class)
//     XPathParser xpathParser;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_InvalidToken_upZH5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = INVALID;
//         when(parser.jj_consume_token(-1)).thenThrow(new ParseException());
//         parser.NCName_Without_CoreFunctions();
//     }
// @ExtendWith(MockitoExtension.class)
//     @Mock
//     private Compiler compiler;
//     @Mock
//     private Token token;
//     @Mock
//     private SimpleCharStream stream;
//     @Mock
//     private XPathParserTokenManager tokenManager;
//     private XPathParser xpathParser;
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprParseExceptionThrown_HNHd15() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.INVALID)); // To ensure default case in second switch
//         parser.EqualityExpr();
//     }
//     private XPathParser xPathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     private Compiler compiler;
//     private Token jj_nt;
//     private int[] jj_la1;
//     private int jj_gen;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationStepWithInvalidToken_aawt3() throws ParseException {
//         jj_nt.kind = INVALID_TOKEN;
//         doThrow(new ParseException()).when(xPathParser).jj_consume_token(-1);
//         ArrayList steps = new ArrayList();
//         xPathParser.LocationStep(steps);
//     }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream charStream;
//     private Compiler compiler;
//     @Mock
//     private Token jj_nt;
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream charStream;
//     private Compiler compiler;
//     private Token jj_nt;
//     private int[] jj_la1 = new int[39];
//     private int jj_gen;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testParseExpressionThrowsParseException_jbbI1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.Expression()).thenThrow(new ParseException());
//         parser.parseExpression();
//     }
//     @Test(expected = Error.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameThrowsErrorForMissingReturn_PCnf8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.NCName()).thenReturn("prefix");
//         when(parser.jj_nt.kind).thenReturn(100); // A value that does not match any case and no default handling
//         parser.QName();
// }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private Compiler compiler;
//     private Token jj_nt;
//     private SimpleCharStream stream;
//     private XPathParserTokenManager tokenManager;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_ConsumeTokenThrowsParseException_rjLG2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 87; // Matching case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         doThrow(new ParseException()).when(parser).jj_consume_token(87);
//         parser.AbbreviatedAxisSpecifier();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallThrowsParseExceptionOnFunctionName_iKem2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.FunctionName()).thenThrow(new ParseException());
//         parser.FunctionCall();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallThrowsParseExceptionOnArgumentList_BcBb3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.FunctionName()).thenReturn("functionName");
//         when(parser.ArgumentList()).thenThrow(new ParseException());
//         parser.FunctionCall();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeInvalid_faPn4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Invalid token kind
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testThrowParseException_diok11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Trigger default case
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This should throw ParseException
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ThrowParseException_UWOF11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(100); // Assuming 100 is an invalid token
//         parser.MultiplicativeExpr();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithParseException_YnxL2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Assuming -1 is an invalid kind
//         parser.jj_nt = token;
//         parser.LocationPath();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameInvalidToken_FYZq13() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = -1;
//         when(stream.readToken()).thenReturn(token);
//         parser.AxisName();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprParseExceptionThrown_pmdG22() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.INVALID;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     private Compiler compiler;
//     @Mock
//     private Token jj_nt;
//     @Mock
//     private ParseException parseException;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithInvalidToken_eftW20() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         when(parser.jj_consume_token(-1)).thenThrow(new ParseException());
//         parser.NCName();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEnableTracing_JRpY0() {
//         ByteArrayInputStream input = new ByteArrayInputStream("".getBytes());
//         XPathParser parser = new XPathParser(input);
//         parser.enable_tracing();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionNameReturnsQName_SmzW0() throws ParseException {
//         ByteArrayInputStream inputStream = new ByteArrayInputStream("".getBytes());
//         XPathParser parser = new XPathParser(inputStream);
//         XPathParser spyParser = spy(parser);
//         Object expectedQName = new Object();
//         doReturn(expectedQName).when(spyParser).QName_Without_CoreFunctions();
//         Object result = spyParser.FunctionName();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_PathEmpty_IqWc0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn('c'); // Mocking behavior for LocationStep
//         when(stream.readChar()).thenReturn((char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_WithPredicate_DUGJ1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn((char) 85, (char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_WithPath_KyLS2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn('c'); // Mocking behavior for LocationStep
//         when(stream.readChar()).thenReturn((char) XPathParserConstants.SLASH, (char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_WithPredicateAndPath_jOaK3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn('c'); // Mocking behavior for LocationStep
//         when(stream.readChar()).thenReturn((char) 85, (char) XPathParserConstants.SLASHSLASH, (char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_MultiplePredicates_aDcL4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn((char) 85, (char) 85, (char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFilterExpr_MultipleSteps_WbmT5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(stream.readChar()).thenReturn('a'); // Mocking behavior for PrimaryExpr
//         when(stream.readChar()).thenReturn('b'); // Mocking behavior for Predicate
//         when(stream.readChar()).thenReturn('c'); // Mocking behavior for LocationStep
//         when(stream.readChar()).thenReturn((char) XPathParserConstants.SLASH, (char) XPathParserConstants.SLASH, (char) -1);
//         Object result = parser.FilterExpr();
//         assertNotNull(result);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_SGfQ0() throws Exception {
//         xpathParser = new XPathParser((XPathParserTokenManager) null);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_EmptyExpEntries_VggW1_1() throws Exception {
//         ParseException result = xpathParser.generateParseException();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_EmptyExpEntries_VggW1_2() throws Exception {
//         ParseException result = xpathParser.generateParseException();
//         assertEquals(0, result.getExpectedTokens().length);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithKindSet_IxKp2_1() throws Exception {
//         xpathParser.jj_kind = 10; // Assuming 10 is within the valid token range
//         ParseException result = xpathParser.generateParseException();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithKindSet_IxKp2_2() throws Exception {
//         xpathParser.jj_kind = 10; // Assuming 10 is within the valid token range
//         ParseException result = xpathParser.generateParseException();
//         assertTrue(Arrays.stream(result.getExpectedTokens()).anyMatch(t -> t == 10));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithMultipleTokens_qvBX3_1() throws Exception {
//         xpathParser.jj_kind = 20;
//         xpathParser.jj_la1[0] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0 = new int[39];
//         xpathParser.jj_la1_0[0] = 1 << 5; // Token 5
//         xpathParser.jj_la1_1 = new int[39];
//         xpathParser.jj_la1_1[0] = 1 << 6; // Token 38
//         xpathParser.jj_la1_2 = new int[39];
//         xpathParser.jj_la1_2[0] = 1 << 7; // Token 71
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithMultipleTokens_qvBX3_2() throws Exception {
//         xpathParser.jj_kind = 20;
//         xpathParser.jj_la1[0] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0 = new int[39];
//         xpathParser.jj_la1_0[0] = 1 << 5; // Token 5
//         xpathParser.jj_la1_1 = new int[39];
//         xpathParser.jj_la1_1[0] = 1 << 6; // Token 38
//         xpathParser.jj_la1_2 = new int[39];
//         xpathParser.jj_la1_2[0] = 1 << 7; // Token 71
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertTrue(Arrays.stream(expectedTokens).flatMapToInt(Arrays::stream).anyMatch(t -> t == 5));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithMultipleTokens_qvBX3_3() throws Exception {
//         xpathParser.jj_kind = 20;
//         xpathParser.jj_la1[0] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0 = new int[39];
//         xpathParser.jj_la1_0[0] = 1 << 5; // Token 5
//         xpathParser.jj_la1_1 = new int[39];
//         xpathParser.jj_la1_1[0] = 1 << 6; // Token 38
//         xpathParser.jj_la1_2 = new int[39];
//         xpathParser.jj_la1_2[0] = 1 << 7; // Token 71
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertTrue(Arrays.stream(expectedTokens).flatMapToInt(Arrays::stream).anyMatch(t -> t == 38));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithMultipleTokens_qvBX3_4() throws Exception {
//         xpathParser.jj_kind = 20;
//         xpathParser.jj_la1[0] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0 = new int[39];
//         xpathParser.jj_la1_0[0] = 1 << 5; // Token 5
//         xpathParser.jj_la1_1 = new int[39];
//         xpathParser.jj_la1_1[0] = 1 << 6; // Token 38
//         xpathParser.jj_la1_2 = new int[39];
//         xpathParser.jj_la1_2[0] = 1 << 7; // Token 71
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertTrue(Arrays.stream(expectedTokens).flatMapToInt(Arrays::stream).anyMatch(t -> t == 71));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_WithMultipleTokens_qvBX3_5() throws Exception {
//         xpathParser.jj_kind = 20;
//         xpathParser.jj_la1[0] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0 = new int[39];
//         xpathParser.jj_la1_0[0] = 1 << 5; // Token 5
//         xpathParser.jj_la1_1 = new int[39];
//         xpathParser.jj_la1_1[0] = 1 << 6; // Token 38
//         xpathParser.jj_la1_2 = new int[39];
//         xpathParser.jj_la1_2[0] = 1 << 7; // Token 71
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertTrue(Arrays.stream(expectedTokens).flatMapToInt(Arrays::stream).anyMatch(t -> t == 20));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_AllTokens_TPyb4_1() throws Exception {
//         for (int i = 0; i < 39; i++) {
//             xpathParser.jj_la1[i] = xpathParser.jj_gen;
//             xpathParser.jj_la1_0[i] = ~0; // All bits set
//             xpathParser.jj_la1_1[i] = ~0; // All bits set
//             xpathParser.jj_la1_2[i] = ~0; // All bits set
//         }
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_AllTokens_TPyb4_2() throws Exception {
//         for (int i = 0; i < 39; i++) {
//             xpathParser.jj_la1[i] = xpathParser.jj_gen;
//             xpathParser.jj_la1_0[i] = ~0; // All bits set
//             xpathParser.jj_la1_1[i] = ~0; // All bits set
//             xpathParser.jj_la1_2[i] = ~0; // All bits set
//         }
//         ParseException result = xpathParser.generateParseException();
//         int[][] expectedTokens = result.getExpectedTokens();
//         assertEquals(90, Arrays.stream(expectedTokens).flatMapToInt(Arrays::stream).distinct().count());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_NoTokensMatch_hzmA5_1() throws Exception {
//         xpathParser.jj_gen++; // Increment to ensure no match
//         ParseException result = xpathParser.generateParseException();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_NoTokensMatch_hzmA5_2() throws Exception {
//         xpathParser.jj_gen++; // Increment to ensure no match
//         ParseException result = xpathParser.generateParseException();
//         assertEquals(0, result.getExpectedTokens().length);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_SpecificTokenMatch_iNCS6_1() throws Exception {
//         xpathParser.jj_la1[10] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0[10] = 1 << 15; // Token 15
//         ParseException result = xpathParser.generateParseException();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGenerateParseException_SpecificTokenMatch_iNCS6_2() throws Exception {
//         xpathParser.jj_la1[10] = xpathParser.jj_gen;
//         xpathParser.jj_la1_0[10] = 1 << 15; // Token 15
//         ParseException result = xpathParser.generateParseException();
//         assertTrue(Arrays.stream(result.getExpectedTokens()).flatMapToInt(Arrays::stream).anyMatch(t -> t == 15));}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_NCName_sdQW0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.image = "testNCName";
//         parser.token = token;
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = NCName;
//         when(parser.jj_consume_token(NCName)).thenReturn(null);
//         assertEquals("testNCName", parser.NCName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_OR_VAPC1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.image = "testOR";
//         parser.token = token;
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = OR;
//         when(parser.jj_consume_token(OR)).thenReturn(null);
//         assertEquals("testOR", parser.NCName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_AND_zfHo2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.image = "testAND";
//         parser.token = token;
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = AND;
//         when(parser.jj_consume_token(AND)).thenReturn(null);
//         assertEquals("testAND", parser.NCName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_MOD_Fxeq3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.image = "testMOD";
//         parser.token = token;
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = MOD;
//         when(parser.jj_consume_token(MOD)).thenReturn(null);
//         assertEquals("testMOD", parser.NCName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_DIV_Jnbo4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.image = "testDIV";
//         parser.token = token;
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = DIV;
//         when(parser.jj_consume_token(DIV)).thenReturn(null);
//         assertEquals("testDIV", parser.NCName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenLookingAheadTrue_kggz0() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.lookingAhead = true;
//         parser.jj_scanpos = mockScanPos;
//         parser.token = mockToken;
//         assertEquals(mockScanPos, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenLookingAheadFalse_KMfS1() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.lookingAhead = false;
//         parser.token = mockToken;
//         assertEquals(mockToken, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenWithNextNotNull_KfKu2() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         firstToken.next = secondToken;
//         parser.token = firstToken;
//         parser.lookingAhead = false;
//         assertEquals(secondToken, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenWithNextNull_EYWw3_1() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.token = firstToken;
//         parser.lookingAhead = false;
//         when(mockTokenManager.getNextToken()).thenReturn(secondToken);
//         assertEquals(secondToken, result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenWithNextNull_EYWw3_2() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.token = firstToken;
//         parser.lookingAhead = false;
//         when(mockTokenManager.getNextToken()).thenReturn(secondToken);
//         assertNotNull(firstToken.next);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenWithNextNull_EYWw3_3() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.token = firstToken;
//         parser.lookingAhead = false;
//         when(mockTokenManager.getNextToken()).thenReturn(secondToken);
//         assertEquals(secondToken, firstToken.next);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenMultipleIterations_oDYG4() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         firstToken.next = secondToken;
//         secondToken.next = thirdToken;
//         parser.token = firstToken;
//         parser.lookingAhead = false;
//         assertEquals(thirdToken, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetTokenIndexZero_bIUT5() {
//         XPathParserTokenManager mockTokenManager = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(mockTokenManager);
//         parser.token = mockToken;
//         parser.lookingAhead = false;
//         assertEquals(mockToken, result);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_xvBL00() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         MockitoAnnotations.openMocks(this);
//         xpathParser = new XPathParser(tokenManager);
//         xpathParser.compiler = this.compiler;
//         xpathParser.token = this.token;
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithVariable_xtUF1() throws ParseException {
//         when(token.kind).thenReturn(XPathConstants.VARIABLE);
//         when(xpathParser.VariableReference()).thenReturn("VariableRefResult");
//         Object result = xpathParser.PrimaryExpr();
//         assertEquals("VariableRefResult", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithNumber_oECp2() throws ParseException {
//         when(token.kind).thenReturn(XPathConstants.Number);
//         when(token.image).thenReturn("123");
//         when(compiler.number(anyString())).thenReturn(123);
//         Object result = xpathParser.PrimaryExpr();
//         verify(xpathParser).jj_consume_token(XPathConstants.Number);
//         assertEquals(123, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithLiteral_xDTP3() throws ParseException {
//         when(token.kind).thenReturn(XPathConstants.Literal);
//         when(token.image).thenReturn("\"example\"");
//         when(compiler.literal(anyString())).thenReturn("example");
//         Object result = xpathParser.PrimaryExpr();
//         verify(xpathParser).jj_consume_token(XPathConstants.Literal);
//         assertEquals("example", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithExpression_Wasu4() throws ParseException {
//         when(token.kind).thenReturn(81);
//         when(xpathParser.Expression()).thenReturn("ExpressionResult");
//         Object result = xpathParser.PrimaryExpr();
//         verify(xpathParser).jj_consume_token(81);
//         verify(xpathParser).jj_consume_token(82);
//         assertEquals("ExpressionResult", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithCoreFunctionCall_AqHI5() throws ParseException {
//         when(token.kind).thenReturn(XPathConstants.FUNCTION_NAME);
//         when(xpathParser.jj_2_5(2147483647)).thenReturn(true);
//         when(xpathParser.CoreFunctionCall()).thenReturn("CoreFunctionResult");
//         Object result = xpathParser.PrimaryExpr();
//         assertEquals("CoreFunctionResult", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithFunctionCall_FqNK6() throws ParseException {
//         when(token.kind).thenReturn(XPathConstants.FUNCTION_NAME);
//         when(xpathParser.jj_2_5(2147483647)).thenReturn(false);
//         when(xpathParser.FunctionCall()).thenReturn("FunctionCallResult");
//         Object result = xpathParser.PrimaryExpr();
//         assertEquals("FunctionCallResult", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithParseException_wBAW7() throws ParseException {
//         when(token.kind).thenReturn(-1);
//         assertThrows(ParseException.class, () -> xpathParser.PrimaryExpr());
//         verify(xpathParser).jj_consume_token(-1);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPrimaryExprWithUnmatchedCase_gRFh9() throws ParseException {
//         when(token.kind).thenReturn(999); // An arbitrary number that doesn't match any case
//         assertThrows(ParseException.class, () -> xpathParser.PrimaryExpr());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPredicateConsumeToken85_gLAT0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         doNothing().when(parser).jj_consume_token(85);
//         parser.Predicate();
//         verify(parser).jj_consume_token(85);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPredicateExpression_iALD1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.Expression()).thenReturn(new Object());
//         Object result = parser.Predicate();
//         verify(parser).Expression();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPredicateConsumeToken86_jpzn2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         doNothing().when(parser).jj_consume_token(86);
//         parser.Predicate();
//         verify(parser).jj_consume_token(86);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPredicateReturnExpression_ZqST3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object expectedObject = new Object();
//         when(parser.Expression()).thenReturn(expectedObject);
//         Object result = parser.Predicate();
//         assertEquals(expectedObject, result);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_EZWR01() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         stream = Mockito.mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(stream);
//         xpathParser = new XPathParser(tokenManager);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithFilterExpr_BUWu1() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(true);
//         Mockito.when(xpathParser.FilterExpr()).thenReturn("Filtered Expression");
//         Object result = xpathParser.PathExpr();
//         Mockito.verify(xpathParser).FilterExpr();
//         assertEquals("Filtered Expression", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithLocationPath_ktnS2() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.NODE);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Location Path");
//         Object result = xpathParser.PathExpr();
//         Mockito.verify(xpathParser).LocationPath();
//         assertEquals("Location Path", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprThrowsParseException_LfbK3() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(-1);
//         assertThrows(ParseException.class, () -> xpathParser.PathExpr());
//         Mockito.verify(xpathParser).jj_consume_token(-1);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithInvalidTokenKind_KwoN4() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(1000); // An invalid kind
//         assertThrows(ParseException.class, () -> xpathParser.PathExpr());
//         Mockito.verify(xpathParser).jj_consume_token(-1);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprUpdatesLa1Array_Vkyt5() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.NODE);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Location Path");
//         xpathParser.PathExpr();
//         assertEquals(xpathParser.jj_gen, xpathParser.jj_la1[21]);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithFunctionName_WQmx6() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.FUNCTION_NAME);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Function Name");
//         Object result = xpathParser.PathExpr();
//         assertEquals("Function Name", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithAxisChild_Dapu7() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.AXIS_CHILD);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Axis Child");
//         Object result = xpathParser.PathExpr();
//         assertEquals("Axis Child", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithFunctionRound_tOLS8() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.FUNCTION_ROUND);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Function Round");
//         Object result = xpathParser.PathExpr();
//         assertEquals("Function Round", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithFunctionSum_gExJ9() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.FUNCTION_SUM);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Function Sum");
//         Object result = xpathParser.PathExpr();
//         assertEquals("Function Sum", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testPathExprWithFunctionFalse_AjLt10() throws Exception {
//         Mockito.when(xpathParser.jj_2_6(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.jj_nt.kind).thenReturn(XPathConstants.FUNCTION_FALSE);
//         Mockito.when(xpathParser.LocationPath()).thenReturn("Function False");
//         Object result = xpathParser.PathExpr();
//         assertEquals("Function False", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAndExpr_singleEqualityExpr_yqvj0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 999; // Assuming 999 is not AND
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[26];
//         parser.jj_gen = 0;
//         parser.compiler = mock(Compiler.class);
//         when(parser.EqualityExpr()).thenReturn(new Object());
//         Object result = parser.AndExpr();
//         verify(parser, times(1)).EqualityExpr();
//         verify(parser.compiler, never()).and(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAndExpr_multipleEqualityExpr_sjTt1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = AND; // Assuming AND is a valid constant
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[26];
//         parser.jj_gen = 0;
//         parser.compiler = mock(Compiler.class);
//         when(parser.EqualityExpr()).thenReturn(new Object()).thenReturn(new Object());
//         when(parser.jj_consume_token(AND)).thenReturn(new Token());
//         Object result = parser.AndExpr();
//         verify(parser, times(2)).EqualityExpr();
//         verify(parser.jj_consume_token, times(1)).jj_consume_token(AND);
//         verify(parser.compiler, times(1)).and(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAndExpr_withMultipleAND_krce3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = AND; // Assuming AND is a valid constant
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[26];
//         parser.jj_gen = 0;
//         parser.compiler = mock(Compiler.class);
//         when(parser.EqualityExpr()).thenReturn(new Object()).thenReturn(new Object()).thenReturn(new Object());
//         when(parser.jj_consume_token(AND)).thenReturn(new Token());
//         Object result = parser.AndExpr();
//         verify(parser, times(3)).EqualityExpr();
//         verify(parser.jj_consume_token, times(2)).jj_consume_token(AND);
//         verify(parser.compiler, times(1)).and(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprRelationalExprCalled_txvS0() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EQ)); // To ensure loop entry
//         when(parser.RelationalExpr()).thenReturn(new Object()); // Mock RelationalExpr
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprFirstSwitch_vnIE1() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EQ)); // To ensure loop entry
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprBreak_ctQY2() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EOF)); // To ensure loop exit
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprConsumeEQ_FVzY6() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EQ)); // To ensure EQ is consumed
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprRelationalExprAfterEQ_lmtj7() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EQ)); // To ensure EQ is consumed
//         when(parser.RelationalExpr()).thenReturn(new Object()); // Mock RelationalExpr
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprCompilerEqualCalled_ykfx8() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.EQ)); // To ensure EQ is consumed
//         when(parser.RelationalExpr()).thenReturn(new Object()); // Mock RelationalExpr
//         when(parser.compiler.equal(any(), any())).thenReturn(new Object()); // Mock compiler.equal
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprConsumeNEQ_NbTR10() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.NEQ)); // To ensure NEQ is consumed
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprRelationalExprAfterNEQ_Zqbd11() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.NEQ)); // To ensure NEQ is consumed
//         when(parser.RelationalExpr()).thenReturn(new Object()); // Mock RelationalExpr
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprCompilerNotEqualCalled_ugkS12() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.NEQ)); // To ensure NEQ is consumed
//         when(parser.RelationalExpr()).thenReturn(new Object()); // Mock RelationalExpr
//         when(parser.compiler.notEqual(any(), any())).thenReturn(new Object()); // Mock compiler.notEqual
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprJJLa1_27Set_iGBH14() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.INVALID)); // To ensure default case in second switch
//         parser.EqualityExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithSlash_rzrH0() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = SLASH;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithMinus_ulXe1() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = MINUS;
//         parser.jj_nt = token;
//         when(parser.jj_consume_token(MINUS)).thenReturn(null);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         when(parser.compiler.minus(any())).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithInvalidToken_mSZl2() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = 999; // Invalid token
//         parser.jj_nt = token;
//         try {
//             parser.UnaryExpr();
//             fail("Expected ParseException to be thrown");
//         } catch (ParseException e) {
//             assertNotNull(e);
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionLast_XPII3() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_LAST;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionPosition_zlYj4() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_POSITION;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionCount_WZxg5() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_COUNT;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionId_fxSL6() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_ID;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionKey_BQKL7() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_KEY;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionLocalName_rhHD8() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_LOCAL_NAME;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionNamespaceUri_iQMK9() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_NAMESPACE_URI;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnaryExprWithFunctionName_cUwM10() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = FUNCTION_NAME;
//         parser.jj_nt = token;
//         when(parser.UnionExpr()).thenReturn(new Object());
//         Object result = parser.UnaryExpr();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentReturnsExpression_NDjD0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         Object expectedExpression = new Object();
//         when(parser.Expression()).thenReturn(expectedExpression);
//         Object result = parser.Argument();
//         assertEquals(expectedExpression, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentExpressionCalled_cwOP1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         XPathParser spyParser = spy(parser);
//         spyParser.Argument();
//         verify(spyParser).Expression();
//     }
// @Before
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setUp_zDvd0() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         stream = mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(stream);
//         xPathParser = new XPathParser(tokenManager);
//         compiler = mock(Compiler.class);
//         jj_nt = new Token();
//         jj_la1 = new int[10];
//         jj_gen = 0;
//         xPathParser.compiler = compiler;
//         xPathParser.jj_nt = jj_nt;
//         xPathParser.jj_la1 = jj_la1;
//         xPathParser.jj_gen = jj_gen;
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationStepWithSlash_AteL1() throws ParseException {
//         jj_nt.kind = SLASH;
//         doNothing().when(xPathParser).jj_consume_token(SLASH);
//         ArrayList steps = new ArrayList();
//         xPathParser.LocationStep(steps);
//         verify(xPathParser).jj_consume_token(SLASH);
//         verify(xPathParser).NodeTest(steps);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationStepWithSlashSlash_PeZE2() throws ParseException {
//         jj_nt.kind = SLASHSLASH;
//         doNothing().when(xPathParser).jj_consume_token(SLASHSLASH);
//         when(compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE)).thenReturn(new Object());
//         when(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, any(), any())).thenReturn(new Object());
//         ArrayList steps = new ArrayList();
//         xPathParser.LocationStep(steps);
//         verify(xPathParser).jj_consume_token(SLASHSLASH);
//         verify(compiler).nodeTypeTest(Compiler.NODE_TYPE_NODE);
//         verify(compiler).step(Compiler.AXIS_DESCENDANT_OR_SELF, any(), any());
//         verify(steps).add(any());
//         verify(xPathParser).NodeTest(steps);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationStepNodeTestCalled_IrAs4() throws ParseException {
//         jj_nt.kind = SLASH;
//         doNothing().when(xPathParser).jj_consume_token(SLASH);
//         ArrayList steps = new ArrayList();
//         xPathParser.LocationStep(steps);
//         verify(xPathParser).NodeTest(steps);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnionExpr_SinglePathExpr_QwkV0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         JJTNode jj_nt = mock(JJTNode.class);
//         when(jj_nt.kind).thenReturn(OTHER_KIND); // Assuming OTHER_KIND is a valid kind that is not UNION
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[21];
//         parser.jj_gen = 0;
//         Object expected = new Object();
//         when(parser.PathExpr()).thenReturn(expected);
//         Object result = parser.UnionExpr();
//         assertEquals(expected, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnionExpr_UnionOfTwoPathExprs_WvOF1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         JJTNode jj_nt = mock(JJTNode.class);
//         when(jj_nt.kind).thenReturn(UNION);
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[21];
//         parser.jj_gen = 0;
//         Object firstExpr = new Object();
//         Object secondExpr = new Object();
//         when(parser.PathExpr()).thenReturn(firstExpr).thenReturn(secondExpr);
//         when(parser.jj_consume_token(UNION)).thenReturn(null);
//         Object expected = new Object();
//         ArrayList<Object> list = new ArrayList<>();
//         list.add(firstExpr);
//         list.add(secondExpr);
//         when(parser.compiler.union(list.toArray())).thenReturn(expected);
//         Object result = parser.UnionExpr();
//         assertEquals(expected, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnionExpr_MultipleUnions_iKyZ2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         JJTNode jj_nt = mock(JJTNode.class);
//         when(jj_nt.kind).thenReturn(UNION, UNION, OTHER_KIND);
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[21];
//         parser.jj_gen = 0;
//         Object firstExpr = new Object();
//         Object secondExpr = new Object();
//         Object thirdExpr = new Object();
//         when(parser.PathExpr()).thenReturn(firstExpr).thenReturn(secondExpr).thenReturn(thirdExpr);
//         when(parser.jj_consume_token(UNION)).thenReturn(null);
//         Object expected = new Object();
//         ArrayList<Object> list = new ArrayList<>();
//         list.add(firstExpr);
//         list.add(secondExpr);
//         list.add(thirdExpr);
//         when(parser.compiler.union(list.toArray())).thenReturn(expected);
//         Object result = parser.UnionExpr();
//         assertEquals(expected, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnionExpr_NoUnion_Qdsg3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         JJTNode jj_nt = mock(JJTNode.class);
//         when(jj_nt.kind).thenReturn(OTHER_KIND);
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[21];
//         parser.jj_gen = 0;
//         Object expected = new Object();
//         when(parser.PathExpr()).thenReturn(expected);
//         Object result = parser.UnionExpr();
//         assertEquals(expected, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testUnionExpr_InitialListNullCheck_FgBc4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         JJTNode jj_nt = mock(JJTNode.class);
//         when(jj_nt.kind).thenReturn(UNION, OTHER_KIND);
//         parser.jj_nt = jj_nt;
//         parser.jj_la1 = new int[21];
//         parser.jj_gen = 0;
//         Object firstExpr = new Object();
//         Object secondExpr = new Object();
//         when(parser.PathExpr()).thenReturn(firstExpr).thenReturn(secondExpr);
//         when(parser.jj_consume_token(UNION)).thenReturn(null);
//         Object expected = new Object();
//         ArrayList<Object> list = new ArrayList<>();
//         list.add(firstExpr);
//         list.add(secondExpr);
//         when(parser.compiler.union(list.toArray())).thenReturn(expected);
//         Object result = parser.UnionExpr();
//         assertEquals(expected, result);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_RyfY02() throws Exception {
//         charStream = Mockito.mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(charStream);
//         xpathParser = new XPathParser(tokenManager);
//         compiler = Mockito.mock(Compiler.class);
//         xpathParser.compiler = compiler;
//         xpathParser.jj_nt = jj_nt;
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_InitialListNull_CshD1() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.OR, TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1", "expr2");
//         Mockito.when(compiler.or(Mockito.any())).thenReturn("result");
//         Object result = xpathParser.OrExpr();
//         Mockito.verify(compiler).or(new Object[]{"expr1", "expr2"});
//         assertEquals("result", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_ListNotNull_KkoD2() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.OR, TokenKind.OR, TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1", "expr2", "expr3");
//         Mockito.when(compiler.or(Mockito.any())).thenReturn("result");
//         Object result = xpathParser.OrExpr();
//         Mockito.verify(compiler).or(new Object[]{"expr1", "expr2", "expr3"});
//         assertEquals("result", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_NoOrCondition_PZsQ3() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1");
//         Object result = xpathParser.OrExpr();
//         assertEquals("expr1", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_SingleOrCondition_OcqP4() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.OR, TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1", "expr2");
//         Mockito.when(compiler.or(Mockito.any())).thenReturn("combined");
//         Object result = xpathParser.OrExpr();
//         Mockito.verify(compiler).or(new Object[]{"expr1", "expr2"});
//         assertEquals("combined", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_MultipleOrConditions_YVJS5() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.OR, TokenKind.OR, TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1", "expr2", "expr3");
//         Mockito.when(compiler.or(Mockito.any())).thenReturn("combined");
//         Object result = xpathParser.OrExpr();
//         Mockito.verify(compiler).or(new Object[]{"expr1", "expr2", "expr3"});
//         assertEquals("combined", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_ConsumeTokenOr_oBGc7() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.OR, TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1", "expr2");
//         Mockito.when(compiler.or(Mockito.any())).thenReturn("result");
//         Object result = xpathParser.OrExpr();
//         Mockito.verify(xpathParser).jj_consume_token(TokenKind.OR);
//         assertEquals("result", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_JjLa1Assignment_XLFn8_1() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1");
//         Object result = xpathParser.OrExpr();
//         assertEquals(39, xpathParser.jj_la1.length);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_JjLa1Assignment_XLFn8_2() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1");
//         Object result = xpathParser.OrExpr();
//         assertEquals(xpathParser.jj_gen, xpathParser.jj_la1[24]);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_ThrowError_MHeb9_1() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1");
//         Exception exception = assertThrows(Error.class, () -> xpathParser.OrExpr());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_ThrowError_MHeb9_2() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenReturn("expr1");
//         assertEquals("Missing return statement in function", exception.getMessage());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_HandleParseException_ItNo11_1() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenThrow(new ParseException("Error"));
//         Exception exception = assertThrows(ParseException.class, () -> xpathParser.OrExpr());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testOrExpr_HandleParseException_ItNo11_2() throws Exception {
//         Mockito.when(jj_nt.getKind()).thenReturn(TokenKind.EOF);
//         Mockito.when(xpathParser.AndExpr()).thenThrow(new ParseException("Error"));
//         assertEquals("Error", exception.getMessage());}
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_vnga03() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         charStream = mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(charStream);
//         xpathParser = new XPathParser(tokenManager);
//         compiler = mock(Compiler.class);
//         jj_nt = new Token();
//         xpathParser.compiler = compiler;
//         xpathParser.jj_nt = jj_nt;
//         xpathParser.jj_la1 = jj_la1;
//         xpathParser.jj_gen = jj_gen;
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithEmptySteps_DIaC1() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(false);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).jj_consume_token(Token.SLASH);
//         when(compiler.locationPath(true, new Object[0])).thenReturn(null);
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNull(result);
//         verify(compiler).locationPath(true, new Object[0]);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithOneStep_hfut2() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         doNothing().when(xpathParser).jj_consume_token(anyInt());
//         when(compiler.locationPath(true, any())).thenReturn(new Object());
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, times(1)).LocationStep(any());
//         verify(compiler).locationPath(true, any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithMultipleSteps_FCLi3() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASHSLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         doNothing().when(xpathParser).jj_consume_token(anyInt());
//         when(compiler.locationPath(true, any())).thenReturn(new Object());
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, atLeastOnce()).LocationStep(any());
//         verify(compiler).locationPath(true, any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithParseException_blUG4() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(false);
//         jj_nt.kind = Token.EOF;
//         doNothing().when(xpathParser).jj_consume_token(-1);
//         assertThrows(ParseException.class, () -> xpathParser.AbsoluteLocationPath());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithUnexpectedToken_UnXn5() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.EOF;
//         doNothing().when(xpathParser).LocationStep(any());
//         xpathParser.jj_la1[6] = jj_gen;
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNull(result);
//         verify(xpathParser, times(1)).LocationStep(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithBreakLabel_VrVP6() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         xpathParser.jj_la1[6] = jj_gen;
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, times(1)).LocationStep(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithMultipleLocationSteps_xOQa7() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASHSLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         doNothing().when(xpathParser).jj_consume_token(anyInt());
//         when(compiler.locationPath(true, any())).thenReturn(new Object());
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, atLeast(2)).LocationStep(any());
//         verify(compiler).locationPath(true, any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithNoInitialMatchAndSlash_KoYx8() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(false);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).jj_consume_token(Token.SLASH);
//         when(compiler.locationPath(true, new Object[0])).thenReturn(null);
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNull(result);
//         verify(xpathParser).jj_consume_token(Token.SLASH);
//         verify(compiler).locationPath(true, new Object[0]);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithInitialMatchAndBreak_fMiS11() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         xpathParser.jj_la1[6] = jj_gen;
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, times(1)).LocationPath(any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithInitialMatchAndNoSteps_vUmq12() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.EOF;
//         xpathParser.jj_la1[6] = jj_gen;
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithInitialMatchAndUnexpectedToken_FdvV13() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.EOF;
//         doNothing().when(xpathParser).LocationStep(any());
//         xpathParser.jj_la1[7] = jj_gen;
//         assertThrows(ParseException.class, () -> xpathParser.AbsoluteLocationPath());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbsoluteLocationPathWithInitialMatchAndReturn_uvum14() throws Exception {
//         when(xpathParser.jj_2_2(2147483647)).thenReturn(true);
//         jj_nt.kind = Token.SLASH;
//         doNothing().when(xpathParser).LocationStep(any());
//         when(compiler.locationPath(true, any())).thenReturn(new Object());
//         Object result = xpathParser.AbsoluteLocationPath();
//         assertNotNull(result);
//         verify(xpathParser, times(1)).LocationStep(any());
//         verify(compiler).locationPath(true, any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testDisableTracing_VPzq0() {
//         ByteArrayInputStream input = new ByteArrayInputStream("dummy input".getBytes());
//         XPathParser parser = new XPathParser(input);
//         parser.disable_tracing();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAdditiveExprSingleSubtractiveExpr_mkjS0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.EOF;
//         when(parser.jj_nt).thenReturn(token);
//         when(parser.SubtractiveExpr()).thenReturn(10);
//         Object result = parser.AdditiveExpr();
//         assertEquals(10, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAdditiveExprWithPlusOperation_Rgds1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = XPathParserConstants.PLUS;
//         secondToken.kind = Token.EOF;
//         when(parser.jj_nt).thenReturn(firstToken, secondToken);
//         when(parser.SubtractiveExpr()).thenReturn(10).thenReturn(5);
//         when(parser.jj_consume_token(XPathParserConstants.PLUS)).thenReturn(null);
//         Object result = parser.AdditiveExpr();
//         assertEquals(15, result); // Assuming compiler.sum correctly sums the list
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAdditiveExprMultiplePlusOperations_NaaY2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         plusToken.kind = XPathParserConstants.PLUS;
//         eofToken.kind = Token.EOF;
//         when(parser.jj_nt).thenReturn(plusToken, plusToken, eofToken);
//         when(parser.SubtractiveExpr()).thenReturn(10).thenReturn(5).thenReturn(3);
//         when(parser.jj_consume_token(XPathParserConstants.PLUS)).thenReturn(null);
//         Object result = parser.AdditiveExpr();
//         assertEquals(18, result); // Assuming compiler.sum correctly sums the list
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAdditiveExprWithNoPlusOperation_VZnv3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.EOF;
//         when(parser.jj_nt).thenReturn(token);
//         when(parser.SubtractiveExpr()).thenReturn(20);
//         Object result = parser.AdditiveExpr();
//         assertEquals(20, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAdditiveExprWithNullListInitialization_bnbH4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         plusToken.kind = XPathParserConstants.PLUS;
//         eofToken.kind = Token.EOF;
//         when(parser.jj_nt).thenReturn(plusToken, eofToken);
//         when(parser.SubtractiveExpr()).thenReturn(10).thenReturn(5);
//         when(parser.jj_consume_token(XPathParserConstants.PLUS)).thenReturn(null);
//         Object result = parser.AdditiveExpr();
//         assertEquals(15, result); // Assuming compiler.sum correctly sums the list
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testParseExpressionValidInput_KIQF0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.Expression()).thenReturn(new Object()); // Assuming Expression() returns an Object
//         doNothing().when(parser).jj_consume_token(0);
//         Object result = parser.parseExpression();
//         verify(parser).Expression();
//         verify(parser).jj_consume_token(0);
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testParseExpressionWithNullExpression_reLY2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.Expression()).thenReturn(null);
//         doNothing().when(parser).jj_consume_token(0);
//         Object result = parser.parseExpression();
//         verify(parser).Expression();
//         verify(parser).jj_consume_token(0);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithSingleArgument_DuZk0_1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = VARIABLE;
//         thirdToken.kind = 82;
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(VARIABLE);
//         when(parser.Argument()).thenReturn(new Object());
//         when(parser.jj_consume_token(82)).thenReturn(thirdToken);
//         ArrayList result = parser.ArgumentList();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithSingleArgument_DuZk0_2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = VARIABLE;
//         thirdToken.kind = 82;
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(VARIABLE);
//         when(parser.Argument()).thenReturn(new Object());
//         when(parser.jj_consume_token(82)).thenReturn(thirdToken);
//         ArrayList result = parser.ArgumentList();
//         assertEquals(1, result.size());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithMultipleArguments_iTup1_1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = VARIABLE;
//         commaToken.kind = 88;
//         thirdToken.kind = 82;
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(VARIABLE, VARIABLE, VARIABLE);
//         when(parser.Argument()).thenReturn(new Object(), new Object());
//         when(parser.jj_consume_token(88)).thenReturn(commaToken);
//         when(parser.jj_consume_token(82)).thenReturn(thirdToken);
//         ArrayList result = parser.ArgumentList();
//         assertNotNull(result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithMultipleArguments_iTup1_2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = VARIABLE;
//         commaToken.kind = 88;
//         thirdToken.kind = 82;
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(VARIABLE, VARIABLE, VARIABLE);
//         when(parser.Argument()).thenReturn(new Object(), new Object());
//         when(parser.jj_consume_token(88)).thenReturn(commaToken);
//         when(parser.jj_consume_token(82)).thenReturn(thirdToken);
//         ArrayList result = parser.ArgumentList();
//         assertEquals(2, result.size());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithNoArguments_LVsR2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = 82;
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(82);
//         when(parser.jj_consume_token(82)).thenReturn(secondToken);
//         ArrayList result = parser.ArgumentList();
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithUnexpectedToken_eIgB3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.kind = 81;
//         secondToken.kind = 999; // Unexpected token kind
//         when(parser.jj_consume_token(81)).thenReturn(firstToken);
//         when(parser.jj_nt.kind).thenReturn(999);
//         when(parser.jj_consume_token(82)).thenThrow(new ParseException());
//         try {
//             parser.ArgumentList();
//             fail("ParseException expected due to unexpected token kind");
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testArgumentListWithParseErrorOnFirstToken_UCgH4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         when(parser.jj_consume_token(81)).thenThrow(new ParseException());
//         try {
//             parser.ArgumentList();
//             fail("ParseException expected due to error on first token consumption");
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testWildcardNameCase89_TKbu0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = 89;
//         token.image = "testTokenImage";
//         when(parser.token).thenReturn(token);
//         when(parser.jj_nt).thenReturn(token);
//         parser.WildcardName();
//         verify(parser).jj_consume_token(89);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testWildcardNameCaseOR_uEcv1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = XPathConstants.OR;
//         token.image = "testTokenImage";
//         when(parser.token).thenReturn(token);
//         when(parser.jj_nt).thenReturn(token);
//         parser.WildcardName();
//         verify(parser).NCName();
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testWildcardNameDefaultCase_JkpP2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = 999; // Invalid kind to trigger default case
//         when(parser.jj_nt).thenReturn(token);
//         try {
//             parser.WildcardName();
//         } catch (ParseException e) {
//         }
//         verify(parser).jj_consume_token(-1);
//         verify(parser, times(1)).throwParseException();
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testWildcardNameCase80_PjTO3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         firstToken.kind = XPathConstants.NCName;
//         firstToken.image = "nc1";
//         secondToken.kind = 80;
//         thirdToken.kind = 89;
//         thirdToken.image = "nc2";
//         when(parser.token).thenReturn(firstToken, thirdToken);
//         when(parser.jj_nt).thenReturn(firstToken, secondToken, thirdToken);
//         parser.WildcardName();
//         verify(parser, times(1)).jj_consume_token(80);
//         verify(parser, times(1)).jj_consume_token(89);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testWildcardNameNC2Null_xyNc5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = XPathConstants.NCName;
//         token.image = "nc1";
//         when(parser.token).thenReturn(token);
//         when(parser.jj_nt).thenReturn(token);
//         Object result = parser.WildcardName();
//         verify(parser.compiler).qname(null, "nc1");
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallWithNullArguments_meZQ0() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.CoreFunctionName()).thenReturn(1);
//         when(parser.ArgumentList()).thenReturn(null);
//         when(compiler.function(1, null)).thenReturn(null);
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(1, null);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallWithNonNullArguments_tzHl1() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         ArrayList<Object> args = new ArrayList<>();
//         args.add("arg1");
//         args.add("arg2");
//         when(parser.CoreFunctionName()).thenReturn(2);
//         when(parser.ArgumentList()).thenReturn(args);
//         when(compiler.function(2, args.toArray())).thenReturn(args.toArray());
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(2, args.toArray());
//         assertArrayEquals(args.toArray(), (Object[]) result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallInitialCodeValue_oLkV2() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.CoreFunctionName()).thenReturn(0); // Testing initial value
//         when(parser.ArgumentList()).thenReturn(null);
//         when(compiler.function(0, null)).thenReturn(null);
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(0, null);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallCodeAssignment_XnXo3() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.CoreFunctionName()).thenReturn(99);
//         when(parser.ArgumentList()).thenReturn(null);
//         when(compiler.function(99, null)).thenReturn(null);
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(99, null);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallWithNullArgsBranch_PAvH4() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.CoreFunctionName()).thenReturn(3);
//         when(parser.ArgumentList()).thenReturn(null);
//         when(compiler.function(3, null)).thenReturn(null);
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(3, null);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionCallWithNonNullArgsBranch_jsMT5() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         ArrayList<Object> args = new ArrayList<>();
//         args.add("arg3");
//         when(parser.CoreFunctionName()).thenReturn(4);
//         when(parser.ArgumentList()).thenReturn(args);
//         when(compiler.function(4, args.toArray())).thenReturn(args.toArray());
//         Object result = parser.CoreFunctionCall();
//         verify(parser).CoreFunctionName();
//         verify(parser).ArgumentList();
//         verify(compiler).function(4, args.toArray());
//         assertArrayEquals(args.toArray(), (Object[]) result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenWhenNextTokenExists_dzCx0() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         mockToken.next = new Token(); // Ensuring that next is not null
//         parser.jj_nt = mockToken;
//         parser.token_source = tokenManager;
//         assertSame("Should return the next token", mockToken.next, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenWhenNextTokenIsNull_CJrY1_1() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         mockToken.next = null; // Ensuring that next is null
//         parser.jj_nt = mockToken;
//         parser.token_source = tokenManager;
//         when(tokenManager.getNextToken()).thenReturn(new Token());
//         assertNotNull("Should create a new token", result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenWhenNextTokenIsNull_CJrY1_2() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         mockToken.next = null; // Ensuring that next is null
//         parser.jj_nt = mockToken;
//         parser.token_source = tokenManager;
//         when(tokenManager.getNextToken()).thenReturn(new Token());
//         assertSame("jj_nt should be updated to new token", result, parser.jj_nt);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenIncrementsJjGen_ATFL2() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         mockToken.next = null;
//         parser.jj_nt = mockToken;
//         parser.token_source = tokenManager;
//         parser.jj_gen = 0;
//         when(tokenManager.getNextToken()).thenReturn(new Token());
//         parser.getNextToken();
//         assertEquals("jj_gen should be incremented", 1, parser.jj_gen);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenReturnsCorrectToken_JZDG3() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         parser.jj_nt = new Token();
//         parser.jj_nt.next = expectedToken;
//         parser.token_source = tokenManager;
//         assertSame("Should return the expected token", expectedToken, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenHandlesTokenSourceCorrectly_lvLj4_1() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.next = null;
//         parser.jj_nt = firstToken;
//         parser.token_source = tokenManager;
//         when(tokenManager.getNextToken()).thenReturn(secondToken);
//         assertSame("Should get token from token source", secondToken, result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testGetNextTokenHandlesTokenSourceCorrectly_lvLj4_2() {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         firstToken.next = null;
//         parser.jj_nt = firstToken;
//         parser.token_source = tokenManager;
//         when(tokenManager.getNextToken()).thenReturn(secondToken);
//         assertSame("jj_nt should be updated to new token", secondToken, parser.jj_nt);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameWithSingleNCName_ZhGh0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.NCName()).thenReturn("localPart");
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameWithPrefixAndLocalPart_YlRp2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.NCName()).thenReturn("prefix").thenReturn("localPart");
//         QName expected = newnew XPathParser().QName("prefix", "localPart");
//         when(compiler.qname("prefix", "localPart")).thenReturn(expected);
//         Object result = parser.QName();
//         assertEquals(expected, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameConsumesToken_WouJ3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.NCName()).thenReturn("prefix").thenReturn("localPart");
//         parser.QName();
//         verify(parser).jj_consume_token(80);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameDefaultSwitchCase_WnvH4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.NCName()).thenReturn("localPart");
//         when(parser.jj_nt.kind).thenReturn(100); // A value other than 80
//         parser.QName();
//         verify(parser).jj_la1[3] = parser.jj_gen;
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameInitializesVariables_bDaz9_1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         parser.QName();
//         assertNotNull("nc1 should be initialized by NCName()", parser.NCName());}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameInitializesVariables_bDaz9_2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         parser.QName();
//         assertNull("nc2 should initially be null", parser.nc2);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameBreaksAfterSettingNC2_VnMr10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.NCName()).thenReturn("prefix").thenReturn("localPart");
//         parser.QName();
//         assertEquals("localPart", parser.nc2);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitAssignsTokenSource_aUTh0() {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         XPathParser parser = new XPathParser((java.io.InputStream) null);
//         parser.ReInit(tm);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitAssignsNextToken_ujGX2() {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         when(tm.getNextToken()).thenReturn(new Token());
//         XPathParser parser = new XPathParser((java.io.InputStream) null);
//         parser.ReInit(tm);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_DGEx04() throws org.apache.commons.jxpath.ri.parser.ParseException {
//         stream = Mockito.mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(stream);
//         xpathParser = new XPathParser(tokenManager);
//         compiler = Mockito.mock(Compiler.class);
//         jj_nt = Mockito.mock(Token.class);
//         xpathParser.compiler = compiler;
//         xpathParser.jj_nt = jj_nt;
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithNodeType_XgIp1() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(XPathParser.NODE);
//         Mockito.when(compiler.nodeTypeTest(Mockito.anyInt())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).nodeTypeTest(Mockito.anyInt());
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithProcessingInstruction_WFjH2() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(XPathParser.PI);
//         Mockito.when(compiler.processingInstructionTest(Mockito.anyString())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).processingInstructionTest(Mockito.anyString());
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithWildcardName_YSSO3() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(XPathParser.NCName);
//         Mockito.when(compiler.nodeNameTest(Mockito.any())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).nodeNameTest(Mockito.any());
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithSelfAxis_kEby4() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(83);
//         Mockito.when(compiler.nodeTypeTest(Mockito.anyInt())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).nodeTypeTest(Mockito.anyInt());
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithParentAxis_yKLa5() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(84);
//         Mockito.when(compiler.nodeTypeTest(Mockito.anyInt())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).nodeTypeTest(Mockito.anyInt());
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithParseException_lPZi6() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(999); // Invalid kind leading to ParseException
//         Assertions.assertThrows(ParseException.class, () -> xpathParser.NodeTest(steps));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTestWithPredicate_aDMG7() throws Exception {
//         ArrayList<Object> steps = new ArrayList<>();
//         Mockito.when(jj_nt.kind).thenReturn(XPathParser.FUNCTION_NAME);
//         Object predicate = new Object();
//         Mockito.when(compiler.predicate()).thenReturn(predicate);
//         Mockito.when(compiler.nodeTypeTest(Mockito.anyInt())).thenReturn(new Object());
//         Mockito.when(compiler.step(Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(new Object());
//         xpathParser.NodeTest(steps);
//         Mockito.verify(compiler).predicate();
//         Mockito.verify(compiler).step(Mockito.anyInt(), Mockito.any(), Mockito.any());
//         Assertions.assertFalse(steps.isEmpty());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testExpressionReturnsOrExprResult_uXDk0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object expectedObject = new Object();
//         when(parser.OrExpr()).thenReturn(expectedObject);
//         Object result = parser.Expression();
//         assertEquals("Expression should return the result of OrExpr", expectedObject, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testExpressionWithDifferentOrExprResult_WLrg1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object anotherExpectedObject = new Object();
//         when(parser.OrExpr()).thenReturn(anotherExpectedObject);
//         Object result = parser.Expression();
//         assertEquals("Expression should return the result of OrExpr", anotherExpectedObject, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testVariableReferenceWithValidVariable_dBvc0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.jj_consume_token(XPathParser.VARIABLE)).thenReturn(new Token());
//         when(parser.QName()).thenReturn("validVariable");
//         when(compiler.variableReference("validVariable")).thenReturn("VariableReferenceResult");
//         Object result = parser.VariableReference();
//         assertEquals("VariableReferenceResult", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testVariableReferenceWithExceptionOnTokenConsumption_TZjf1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.jj_consume_token(XPathParser.VARIABLE)).thenThrow(new ParseException());
//         try {
//             parser.VariableReference();
//             fail("ParseException expected");
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testVariableReferenceWithExceptionOnQName_DEoQ2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.jj_consume_token(XPathParser.VARIABLE)).thenReturn(new Token());
//         when(parser.QName()).thenThrow(new ParseException());
//         try {
//             parser.VariableReference();
//             fail("ParseException expected");
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelativeLocationPathInitializesSteps_qQxf0() throws ParseException {
//         XPathParser parser = new XPathParser(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new StringReader("")));
//         parser.RelativeLocationPath();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelativeLocationPathSwitchStatement_bVLr2() throws ParseException {
//         XPathParser parser = new XPathParser(new StringReader("/"));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new StringReader("/")));
//         parser.RelativeLocationPath();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelativeLocationPathCallsLocationStep_qjxl5() throws ParseException {
//         XPathParser parser = new XPathParser(new StringReader("/step"));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new StringReader("/step")));
//         parser.RelativeLocationPath();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithEmptyReader_srfA0() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader(""));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithSimpleInput_FpUy1() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("simple input"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithMultipleLines_szuD2() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("line1\nline2\nline3"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithSpecialCharacters_OpQi4() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("!@#$%^&*()_+"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithLongInput_BDvj5() {
//         StringBuilder longInput = new StringBuilder();
//         for (int i = 0; i < 10000; i++) {
//             longInput.append("a");
//         }
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader(longInput.toString()));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithNullInput_HvkC6() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(null);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithNumericInput_GLts7() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("1234567890"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithMixedContent_ienc8() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("Hello, 1234, here's some text!"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithNewLinesAndTabs_KQXz9() {
//         XPathParser parser = new XPathParser((java.io.Reader) null);
//         parser.ReInit(new StringReader("First Line\n\tSecond Line\nThird Line"));
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithEmptyStream_wDzw0() {
//         ByteArrayInputStream stream = new ByteArrayInputStream(new byte[0]);
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithNonEmptyStream_QnzC1() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("some data".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithNullStream_uyEt2() {
//         ByteArrayInputStream stream = null;
//         XPathParser parser = new XPathParser(new ByteArrayInputStream(new byte[0]));
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitResetsToken_zrhg3() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("reset token".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitResetsGen_Qioz4() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("reset gen".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitResetsLa1_EnGv5() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("reset la1".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitResetsJJCalls_hGxC6() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("reset jjcalls".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithDifferentInputStream_zakh7() {
//         ByteArrayInputStream stream1 = new ByteArrayInputStream("data1".getBytes());
//         ByteArrayInputStream stream2 = new ByteArrayInputStream("data2".getBytes());
//         XPathParser parser = new XPathParser(stream1);
//         parser.ReInit(stream2);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithSameStreamTwice_Nisw8() {
//         ByteArrayInputStream stream = new ByteArrayInputStream("data".getBytes());
//         XPathParser parser = new XPathParser(stream);
//         parser.ReInit(stream);
//         parser.ReInit(stream);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReInitWithChangingData_EWiv9() {
//         ByteArrayInputStream stream1 = new ByteArrayInputStream("data1".getBytes());
//         ByteArrayInputStream stream2 = new ByteArrayInputStream("data2".getBytes());
//         XPathParser parser = new XPathParser(stream1);
//         parser.ReInit(stream2);
//         parser.ReInit(stream1);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testSubtractiveExprSingleMultiplicativeExpr_hGHG0() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         jj_nt.kind = Token.EOF; // Assuming EOF is a valid token kind that does not match MINUS
//         parser.jj_nt = jj_nt;
//         parser.compiler = mock(Compiler.class);
//         when(parser.MultiplicativeExpr()).thenReturn(new Object());
//         Object result = parser.SubtractiveExpr();
//         verify(parser).MultiplicativeExpr();
//         verify(parser.compiler, never()).minus(any(), any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testSubtractiveExprWithOneSubtraction_IOdx1() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         jj_nt.kind = Token.MINUS; // Assuming MINUS is a valid token kind
//         parser.jj_nt = jj_nt;
//         parser.compiler = mock(Compiler.class);
//         when(parser.MultiplicativeExpr()).thenReturn(new Object()).thenReturn(new Object());
//         when(parser.jj_consume_token(Token.MINUS)).thenReturn(new Token());
//         Object result = parser.SubtractiveExpr();
//         verify(parser, times(2)).MultiplicativeExpr();
//         verify(parser).jj_consume_token(Token.MINUS);
//         verify(parser.compiler).minus(any(), any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testSubtractiveExprMultipleSubtractions_SmMQ2() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(mock(java.io.Reader.class));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         jj_nt.kind = Token.MINUS; // Assuming MINUS is a valid token kind
//         parser.jj_nt = jj_nt;
//         parser.compiler = mock(Compiler.class);
//         when(parser.MultiplicativeExpr()).thenReturn(new Object()).thenReturn(new Object()).thenReturn(new Object());
//         when(parser.jj_consume_token(Token.MINUS)).thenReturn(new Token());
//         Object result = parser.SubtractiveExpr();
//         verify(parser, times(3)).MultiplicativeExpr();
//         verify(parser, times(2)).jj_consume_token(Token.MINUS);
//         verify(parser.compiler, times(2)).minus(any(), any());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierWithAxisName_bdsE0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.AXIS_CHILD; // Assuming AXIS_CHILD is a valid constant
//         parser.jj_nt = token;
//         when(parser.AxisName()).thenReturn(1);
//         int result = parser.AxisSpecifier();
//         assertEquals(1, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierWithAbbreviatedAxisSpecifier_ciIc1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.INVALID; // Assuming INVALID is a valid constant for default case
//         parser.jj_nt = token;
//         when(parser.AbbreviatedAxisSpecifier()).thenReturn(2);
//         int result = parser.AxisSpecifier();
//         assertEquals(2, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierSwitchStatement_xeyD2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.AXIS_CHILD; // Assuming AXIS_CHILD is a valid constant
//         parser.jj_nt = token;
//         parser.AxisSpecifier(); // We are testing the switch statement execution
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierBreakStatement_aYhH3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.AXIS_CHILD; // Assuming AXIS_CHILD is a valid constant
//         parser.jj_nt = token;
//         when(parser.AxisName()).thenReturn(1);
//         int result = parser.AxisSpecifier(); // We are testing the break statement execution
//         assertEquals(1, result); // Ensuring that the method returns after the break
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierDefaultCase_EcQI4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.INVALID; // Assuming INVALID is a valid constant for default case
//         parser.jj_nt = token;
//         parser.AxisSpecifier(); // We are testing the default case execution
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisSpecifierReturnStatement_JepV5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = TokenConstants.AXIS_CHILD; // Assuming AXIS_CHILD is a valid constant
//         parser.jj_nt = token;
//         when(parser.AxisName()).thenReturn(3);
//         int result = parser.AxisSpecifier();
//         assertEquals(3, result); // Testing the return statement
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_DefaultChildAxis_gZAZ0_1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 100; // A kind that does not match case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(Compiler.AXIS_CHILD, result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_DefaultChildAxis_gZAZ0_2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 100; // A kind that does not match case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(0, parser.jj_la1[15]);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_AttributeAxis_mysH1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 87; // Matching case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         doNothing().when(parser).jj_consume_token(87);
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(Compiler.AXIS_ATTRIBUTE, result);
//         verify(parser).jj_consume_token(87);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_WithDifferentTokenKind_Uggs3_1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 88; // A kind that does not match case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(Compiler.AXIS_CHILD, result);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_WithDifferentTokenKind_Uggs3_2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 88; // A kind that does not match case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(0, parser.jj_la1[15]);}
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_EnsureReturnAttributeAxis_ZkHQ5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 87; // Matching case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         doNothing().when(parser).jj_consume_token(87);
//         int result = parser.AbbreviatedAxisSpecifier();
//         assertEquals(Compiler.AXIS_ATTRIBUTE, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallWithNullArguments_arfj0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         when(parser.FunctionName()).thenReturn("functionName");
//         when(parser.ArgumentList()).thenReturn(null);
//         when(compiler.function("functionName", null)).thenReturn(null);
//         Object result = parser.FunctionCall();
//         verify(compiler).function("functionName", null);
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallWithNonNullArguments_YWNc1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         ArrayList<Object> args = new ArrayList<>();
//         args.add("arg1");
//         args.add("arg2");
//         when(parser.FunctionName()).thenReturn("functionName");
//         when(parser.ArgumentList()).thenReturn(args);
//         when(compiler.function("functionName", args.toArray())).thenReturn(args.toArray());
//         Object result = parser.FunctionCall();
//         verify(compiler).function("functionName", args.toArray());
//         assertArrayEquals(args.toArray(), (Object[]) result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallWithEmptyArguments_KIGw4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Compiler compiler = mock(Compiler.class);
//         parser.compiler = compiler;
//         ArrayList<Object> args = new ArrayList<>();
//         when(parser.FunctionName()).thenReturn("functionName");
//         when(parser.ArgumentList()).thenReturn(args);
//         when(compiler.function("functionName", args.toArray())).thenReturn(args.toArray());
//         Object result = parser.FunctionCall();
//         verify(compiler).function("functionName", args.toArray());
//         assertArrayEquals(args.toArray(), (Object[]) result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeText_gNiR0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.TEXT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         assertEquals(Compiler.NODE_TYPE_TEXT, parser.NodeType());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeNode_rXMh1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.NODE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         assertEquals(Compiler.NODE_TYPE_NODE, parser.NodeType());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeComment_wBpd2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.COMMENT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         assertEquals(Compiler.NODE_TYPE_COMMENT, parser.NodeType());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypePI_PTiJ3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.PI;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         assertEquals(Compiler.NODE_TYPE_PI, parser.NodeType());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeSwitch_VbsQ5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.TEXT; // Covering the switch statement
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testConsumeTokenText_euNb6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.TEXT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This will consume TEXT token
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testConsumeTokenNode_xfvC7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.NODE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This will consume NODE token
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testConsumeTokenComment_dmIP8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.COMMENT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This will consume COMMENT token
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testConsumeTokenPI_WRVf9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.PI;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This will consume PI token
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testSetLa1_EZgW10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Trigger default case
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         try {
//             parser.NodeType();
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReturnTypeText_CqJH12() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.TEXT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         int result = parser.NodeType();
//         assertEquals(Compiler.NODE_TYPE_TEXT, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReturnTypeNode_jeIJ13() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.NODE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         int result = parser.NodeType();
//         assertEquals(Compiler.NODE_TYPE_NODE, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReturnTypeComment_wkFl14() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.COMMENT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         int result = parser.NodeType();
//         assertEquals(Compiler.NODE_TYPE_COMMENT, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testReturnTypePI_ADlD15() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.PI;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         int result = parser.NodeType();
//         assertEquals(Compiler.NODE_TYPE_PI, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_UnaryExprCalled_ccil0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//         verify(parser).UnaryExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_SwitchOnKind_VHbm1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(89);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_BreakOutOfLoop_Gyzv2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(100); // Assuming 100 is not MOD, DIV, or 89
//         parser.MultiplicativeExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ConsumeToken89_Wnly4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(89);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//         verify(parser).jj_consume_token(89);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_MultiplyCalled_ihUy5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.jj_nt.kind).thenReturn(89);
//         when(parser.UnaryExpr()).thenReturn(r);
//         when(parser.compiler.multiply(ex, r)).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ConsumeTokenDIV_MDLG6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(DIV);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//         verify(parser).jj_consume_token(DIV);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_DivideCalled_VavB7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.jj_nt.kind).thenReturn(DIV);
//         when(parser.UnaryExpr()).thenReturn(r);
//         when(parser.compiler.divide(ex, r)).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ConsumeTokenMOD_GTGl8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(MOD);
//         when(parser.UnaryExpr()).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//         verify(parser).jj_consume_token(MOD);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ModCalled_hvDd9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.jj_nt.kind).thenReturn(MOD);
//         when(parser.UnaryExpr()).thenReturn(r);
//         when(parser.compiler.mod(ex, r)).thenReturn(new Object());
//         parser.MultiplicativeExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_JjLa1Index33Set_dfqw10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(100); // Assuming 100 is an invalid token
//         try {
//             parser.MultiplicativeExpr();
//         } catch (ParseException e) {
//         }
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ReturnExpression_qGGA12() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         Object expected = new Object();
//         when(parser.UnaryExpr()).thenReturn(expected);
//         when(parser.jj_nt.kind).thenReturn(100); // Assuming 100 is not MOD, DIV, or 89
//         Object result = parser.MultiplicativeExpr();
//         assertSame(expected, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithRelativeLocationPath_Xyqb0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.NODE; // Assuming NODE is a valid kind that leads to RelativeLocationPath
//         parser.jj_nt = token;
//         when(parser.RelativeLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithAbsoluteLocationPath_vtMA1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.SLASH; // Assuming SLASH is a valid kind that leads to AbsoluteLocationPath
//         parser.jj_nt = token;
//         when(parser.AbsoluteLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithNodeKind_IKqX3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.NODE;
//         parser.jj_nt = token;
//         when(parser.RelativeLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithFunctionNameKind_vrTz4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.FUNCTION_NAME; // Assuming FUNCTION_NAME is a valid kind
//         parser.jj_nt = token;
//         when(parser.RelativeLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithSlashKind_HpXI5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.SLASH;
//         parser.jj_nt = token;
//         when(parser.AbsoluteLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithSlashSlashKind_zKAY6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.SLASHSLASH;
//         parser.jj_nt = token;
//         when(parser.AbsoluteLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithInvalidTokenKind_kAyh7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = 999; // Assuming 999 is an invalid kind
//         parser.jj_nt = token;
//         expectedException.expect(ParseException.class);
//         parser.LocationPath();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithValidTokenKind_dFvx8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.FUNCTION_ROUND; // Assuming FUNCTION_ROUND is a valid kind
//         parser.jj_nt = token;
//         when(parser.RelativeLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithNCNameKind_uxxl9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = TokenKind.NCName; // Assuming NCName is a valid kind
//         parser.jj_nt = token;
//         when(parser.RelativeLocationPath()).thenReturn(new Object());
//         Object result = parser.LocationPath();
//         assertNotNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameSelf_PTRe0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_SELF;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_SELF, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameChild_zVYc1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_CHILD;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_CHILD, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameParent_fmCR2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_PARENT;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_PARENT, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameAncestor_xkqm3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_ANCESTOR;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_ANCESTOR, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameAttribute_GHnC4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_ATTRIBUTE;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_ATTRIBUTE, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameNamespace_woyI5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_NAMESPACE;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_NAMESPACE, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNamePreceding_hWsQ6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_PRECEDING;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_PRECEDING, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameFollowing_WCxv7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_FOLLOWING;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_FOLLOWING, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameDescendant_ecZb8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_DESCENDANT;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_DESCENDANT, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameAncestorOrSelf_vJiE9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_ANCESTOR_OR_SELF;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_ANCESTOR_OR_SELF, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameFollowingSibling_HNMu10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_FOLLOWING_SIBLING;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_FOLLOWING_SIBLING, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNamePrecedingSibling_wVAX11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_PRECEDING_SIBLING;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_PRECEDING_SIBLING, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameDescendantOrSelf_AYEd12() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Compiler.AXIS_DESCENDANT_OR_SELF;
//         when(stream.readToken()).thenReturn(token);
//         assertEquals(Compiler.AXIS_DESCENDANT_OR_SELF, parser.AxisName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprAdditiveExprCalled_rajK0() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.EOF;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser).AdditiveExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprSwitchFirst_bhWQ1() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser).jj_consume_token(Token.LT);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprBreakAfterDefault_hBXg2() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.EOF;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprAdditiveExprAfterLT_tMZf6() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser, times(2)).AdditiveExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprLessThanCalled_wmMB7() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LT;
//         parser.jj_nt = token;
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.AdditiveExpr()).thenReturn(ex, r);
//         parser.compiler = mock(XPathCompiler.class);
//         parser.RelationalExpr();
//         verify(parser.compiler).lessThan(ex, r);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprBreakAfterLT_Mwrx8() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprConsumeTokenGT_SqGA9() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser).jj_consume_token(Token.GT);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprAdditiveExprAfterGT_MOiz10() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser, times(2)).AdditiveExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprGreaterThanCalled_PtQv11() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GT;
//         parser.jj_nt = token;
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.AdditiveExpr()).thenReturn(ex, r);
//         parser.compiler = mock(XPathCompiler.class);
//         parser.RelationalExpr();
//         verify(parser.compiler).greaterThan(ex, r);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprBreakAfterGT_MdOG12() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GT;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprConsumeTokenLTE_mkbN13() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser).jj_consume_token(Token.LTE);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprAdditiveExprAfterLTE_lySz14() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser, times(2)).AdditiveExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprLessThanOrEqualCalled_xXCk15() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LTE;
//         parser.jj_nt = token;
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.AdditiveExpr()).thenReturn(ex, r);
//         parser.compiler = mock(XPathCompiler.class);
//         parser.RelationalExpr();
//         verify(parser.compiler).lessThanOrEqual(ex, r);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprBreakAfterLTE_OGcd16() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.LTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprConsumeTokenGTE_JRsW17() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser).jj_consume_token(Token.GTE);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprAdditiveExprAfterGTE_bUSG18() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//         verify(parser, times(2)).AdditiveExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprGreaterThanOrEqualCalled_HaUm19() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GTE;
//         parser.jj_nt = token;
//         Object ex = new Object();
//         Object r = new Object();
//         when(parser.AdditiveExpr()).thenReturn(ex, r);
//         parser.compiler = mock(XPathCompiler.class);
//         parser.RelationalExpr();
//         verify(parser.compiler).greaterThanOrEqual(ex, r);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprBreakAfterGTE_flrn20() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.GTE;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprReturnEx_sctG23() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.EOF;
//         parser.jj_nt = token;
//         Object expectedEx = new Object();
//         when(parser.AdditiveExpr()).thenReturn(expectedEx);
//         parser.compiler = mock(XPathCompiler.class);
//         Object result = parser.RelationalExpr();
//         assertSame(expectedEx, result);
//     }
// @BeforeEach
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void setup_pXMU05() throws Exception {
//         stream = Mockito.mock(SimpleCharStream.class);
//         tokenManager = new XPathParserTokenManager(stream);
//         xpathParser = new XPathParser(tokenManager);
//         compiler = Mockito.mock(Compiler.class);
//         xpathParser.compiler = compiler;
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(xpathParser.NCName()).thenReturn("localName");
//         Mockito.when(xpathParser.NCName_Without_CoreFunctions()).thenReturn("localNameWithoutCore");
//         Mockito.when(jj_nt.kind).thenReturn(Token.NCName);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_SingleNCName_Reip1() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.NCName);
//         Mockito.when(compiler.qname(null, "localNameWithoutCore")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(compiler).qname(null, "localNameWithoutCore");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_WithTwoNCNames_Jyfr2() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(true);
//         Mockito.when(compiler.qname("localName", "localName")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(xpathParser, Mockito.times(2)).NCName();
//         Mockito.verify(xpathParser).jj_consume_token(80);
//         Mockito.verify(compiler).qname("localName", "localName");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_ThrowsParseException_kBqN3() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.EOF);
//         Mockito.doThrow(parseException).when(xpathParser).jj_consume_token(-1);
//         assertThrows(ParseException.class, () -> xpathParser.QName_Without_CoreFunctions());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_OR_LxLV4() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.OR);
//         Mockito.when(compiler.qname(null, "localNameWithoutCore")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(compiler).qname(null, "localNameWithoutCore");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_AND_QyFV5() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.AND);
//         Mockito.when(compiler.qname(null, "localNameWithoutCore")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(compiler).qname(null, "localNameWithoutCore");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_MOD_Wpay6() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.MOD);
//         Mockito.when(compiler.qname(null, "localNameWithoutCore")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(compiler).qname(null, "localNameWithoutCore");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_DIV_yFdQ7() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(false);
//         Mockito.when(jj_nt.kind).thenReturn(Token.DIV);
//         Mockito.when(compiler.qname(null, "localNameWithoutCore")).thenReturn("ResolvedQName");
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         Mockito.verify(compiler).qname(null, "localNameWithoutCore");
//         assertEquals("ResolvedQName", result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQName_Without_CoreFunctions_MissingReturn_BJDw13() throws Exception {
//         Mockito.when(xpathParser.jj_2_1(2147483647)).thenReturn(true);
//         Mockito.when(compiler.qname("localName", "localName")).thenReturn(null);
//         Object result = xpathParser.QName_Without_CoreFunctions();
//         assertNull(result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_LAST_qXdv0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_LAST;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_LAST, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_POSITION_HwSq1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_POSITION;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_POSITION, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_COUNT_UQDO2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_COUNT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_COUNT, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_ID_uIcf3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_ID;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_ID, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_LOCAL_NAME_JzCb4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_LOCAL_NAME;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_LOCAL_NAME, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NAMESPACE_URI_rsre5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NAMESPACE_URI;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NAMESPACE_URI, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NAME_JBIs6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NAME;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NAME, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_STRING_aETK7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_STRING;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_STRING, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_CONCAT_ulxz8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_CONCAT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_CONCAT, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_STARTS_WITH_yQhU9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_STARTS_WITH;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_STARTS_WITH, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_ENDS_WITH_xAHB10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_ENDS_WITH;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_ENDS_WITH, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_CONTAINS_DZZI11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_CONTAINS;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_CONTAINS, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_SUBSTRING_BEFORE_WWlW12() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_SUBSTRING_BEFORE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_SUBSTRING_BEFORE, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_SUBSTRING_AFTER_XQTn13() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_SUBSTRING_AFTER;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_SUBSTRING_AFTER, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_SUBSTRING_pzTK14() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_SUBSTRING;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_SUBSTRING, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_STRING_LENGTH_cUKt15() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_STRING_LENGTH;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_STRING_LENGTH, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NORMALIZE_SPACE_xeJy16() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NORMALIZE_SPACE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NORMALIZE_SPACE, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_TRANSLATE_Ltvk17() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_TRANSLATE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_TRANSLATE, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_BOOLEAN_zPGw18() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_BOOLEAN;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_BOOLEAN, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NOT_ZdkQ19() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NOT;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NOT, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_TRUE_PWNC20() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_TRUE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_TRUE, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_FALSE_DYlW21() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_FALSE;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_FALSE, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NULL_QBwF22() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NULL;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NULL, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_LANG_SitM23() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_LANG;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_LANG, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_NUMBER_alER24() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_NUMBER;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_NUMBER, result);
// }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testCoreFunctionName_FUNCTION_SUM_CDHD25() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = Compiler.FUNCTION_SUM;
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(new Token(Token.EOF));
//         int result = parser.CoreFunctionName();
//         assertEquals(Compiler.FUNCTION_SUM, result);
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionContains_xSFh0() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_CONTAINS;
//         token.image = "contains";
//         when(parser.jj_consume_token(FUNCTION_CONTAINS)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("contains", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionSubstringBefore_tKex1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_SUBSTRING_BEFORE;
//         token.image = "substring-before";
//         when(parser.jj_consume_token(FUNCTION_SUBSTRING_BEFORE)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("substring-before", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionSubstringAfter_nFCg2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_SUBSTRING_AFTER;
//         token.image = "substring-after";
//         when(parser.jj_consume_token(FUNCTION_SUBSTRING_AFTER)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("substring-after", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionSubstring_LyqH3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_SUBSTRING;
//         token.image = "substring";
//         when(parser.jj_consume_token(FUNCTION_SUBSTRING)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("substring", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionStringLength_yYPc4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_STRING_LENGTH;
//         token.image = "string-length";
//         when(parser.jj_consume_token(FUNCTION_STRING_LENGTH)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("string-length", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionNormalizeSpace_wWxO5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_NORMALIZE_SPACE;
//         token.image = "normalize-space";
//         when(parser.jj_consume_token(FUNCTION_NORMALIZE_SPACE)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("normalize-space", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionTranslate_MwNX6() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_TRANSLATE;
//         token.image = "translate";
//         when(parser.jj_consume_token(FUNCTION_TRANSLATE)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("translate", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionBoolean_rJmI7() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_BOOLEAN;
//         token.image = "boolean";
//         when(parser.jj_consume_token(FUNCTION_BOOLEAN)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("boolean", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionNot_ueGd8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_NOT;
//         token.image = "not";
//         when(parser.jj_consume_token(FUNCTION_NOT)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("not", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionTrue_dzEk9() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_TRUE;
//         token.image = "true";
//         when(parser.jj_consume_token(FUNCTION_TRUE)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("true", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionFalse_EgBT10() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_FALSE;
//         token.image = "false";
//         when(parser.jj_consume_token(FUNCTION_FALSE)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("false", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionNull_OMCt11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_NULL;
//         token.image = "null";
//         when(parser.jj_consume_token(FUNCTION_NULL)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("null", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionLang_GoEg12() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_LANG;
//         token.image = "lang";
//         when(parser.jj_consume_token(FUNCTION_LANG)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("lang", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionNumber_VHVV13() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_NUMBER;
//         token.image = "number";
//         when(parser.jj_consume_token(FUNCTION_NUMBER)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("number", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionSum_XSXT14() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_SUM;
//         token.image = "sum";
//         when(parser.jj_consume_token(FUNCTION_SUM)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("sum", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionFloor_HvOh15() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_FLOOR;
//         token.image = "floor";
//         when(parser.jj_consume_token(FUNCTION_FLOOR)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("floor", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionCeiling_RMwC16() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_CEILING;
//         token.image = "ceiling";
//         when(parser.jj_consume_token(FUNCTION_CEILING)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("ceiling", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionRound_VGmY17() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_ROUND;
//         token.image = "round";
//         when(parser.jj_consume_token(FUNCTION_ROUND)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("round", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionKey_eTDe18() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_KEY;
//         token.image = "key";
//         when(parser.jj_consume_token(FUNCTION_KEY)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("key", parser.NCName());
//     }
// @Test
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithFunctionFormatNumber_WdmK19() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = FUNCTION_FORMAT_NUMBER;
//         token.image = "format-number";
//         when(parser.jj_consume_token(FUNCTION_FORMAT_NUMBER)).thenReturn(token);
//         when(parser.token).thenReturn(token);
//         assertEquals("format-number", parser.NCName());
//     }
// }