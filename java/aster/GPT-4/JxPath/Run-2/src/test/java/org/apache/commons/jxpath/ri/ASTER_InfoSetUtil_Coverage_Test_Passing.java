/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNull_RVnO0() {
        assertEquals("", InfoSetUtil.stringValue(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithString_kjTi6() {
        assertEquals("Hello", InfoSetUtil.stringValue("Hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumber_Vscd7_1() {
        assertEquals("100", InfoSetUtil.stringValue(100));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumber_Vscd7_2() {
        assertEquals("99.99", InfoSetUtil.stringValue(99.99));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithPositiveNumber_dGwv0() {
        assertTrue(InfoSetUtil.booleanValue(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeNumber_NJwd1() {
        assertTrue(InfoSetUtil.booleanValue(-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithZero_LYKq2() {
        assertFalse(InfoSetUtil.booleanValue(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeZero_hXTL3() {
        double negativeZero = -0.0;
        assertFalse(InfoSetUtil.booleanValue(negativeZero));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_YJfC4() {
        assertFalse(InfoSetUtil.booleanValue(Double.NaN));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithEmptyString_GYpe0() {
        String testString = "";
        double result = InfoSetUtil.doubleValue(testString);
        assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringContainingNumber_LTqK1() {
        String testString = "123.45";
        double result = InfoSetUtil.doubleValue(testString);
        assertEquals(123.45, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringNotContainingNumber_DgFu2() {
        String testString = "not a number";
        double result = InfoSetUtil.doubleValue(testString);
        assertEquals(Double.NaN, result, 0.0);
    }
}