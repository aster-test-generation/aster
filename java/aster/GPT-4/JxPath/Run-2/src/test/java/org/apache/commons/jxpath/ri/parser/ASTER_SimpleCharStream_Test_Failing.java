/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Failing {
@Test
@Timeout(value =2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_LCUO0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""),2,2);
        stream.adjustBeginLineColumn(1,2);
        assertEquals(1, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleTokenChangeLine_YNLf1_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(3, 1);
        assertEquals(3, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_MultipleTokensChangeLine_vsqg2_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        stream.adjustBeginLineColumn(4, 5);
        assertEquals(4, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokensWrapAroundBuffer_bdbK3_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        stream.adjustBeginLineColumn(5, 10);
        assertEquals(5, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferSizeEdgeCase_VVan4_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.adjustBeginLineColumn(6, 16);
        assertEquals(6, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_InputStreamConstructor_sMQx5_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        stream.adjustBeginLineColumn(7, 20);
        assertEquals(7, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ReaderConstructor_yLnZ6_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.adjustBeginLineColumn(8, 25);
        assertEquals(8, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndColumn_PZus0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedColumn = 1; // Assuming initial position is at the start column provided in constructor
    stream.UpdateLineColumn('t'); // Manually update to simulate reading 't'
    assertEquals(expectedColumn, stream.bufcolumn[stream.bufpos]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndLine_nXux0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.UpdateLineColumn('t');
    stream.UpdateLineColumn('e');
    stream.UpdateLineColumn('s');
    stream.UpdateLineColumn('t');
    assertEquals(1, stream.getEndLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_TxAu0() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    scs.UpdateLineColumn('t'); // Update line and column to initialize internal state
    assertEquals(1, scs.getLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCarriageReturn_EoOW0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCarriageReturn_EoOW0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCarriageReturn_EoOW0_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertTrue(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCarriageReturn_EoOW0_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLineFeed_AVeF1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLineFeed_AVeF1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLineFeed_AVeF1_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertTrue(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLineFeed_AVeF1_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_Motb2_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_Motb2_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(9, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_Motb2_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_Motb2_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularCharacter_gjFi3_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularCharacter_gjFi3_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(2, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularCharacter_gjFi3_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularCharacter_gjFi3_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithSameReaderAndLargerBuffer_cbCZ1_Vjyn1_3() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 21);
    assertEquals(scs.column, 1, "Column should be initialized to 1");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithDifferentStartPosition_bDHl2_FdrK0_3() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 2,2, 5);
    assertEquals(3, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithWrapAroundBuffer_YpCx1() {
    java.io.StringReader reader = new java.io.StringReader("abcdefgh");
    SimpleCharStream scs = new SimpleCharStream(reader, 1, 1);
    scs.buffer = "abcdefgh".toCharArray();
    scs.bufpos = 2;
    scs.bufsize = 8;
    char[] expected = "bcdef".toCharArray();
    char[] result = scs.GetSuffix(5);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_LCUO0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(1, 1);
        assertEquals(1, stream.line);
        assertEquals(1, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleTokenChangeLine_YNLf1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(2, 1);
        assertEquals(2, stream.line);
        assertEquals(1, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_MultipleTokensChangeLine_vsqg2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        stream.adjustBeginLineColumn(3, 5);
        assertEquals(3, stream.line);
        assertEquals(5, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokensWrapAroundBuffer_bdbK3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        stream.adjustBeginLineColumn(4, 10);
        assertEquals(4, stream.line);
        assertEquals(10, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferSizeEdgeCase_VVan4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.adjustBeginLineColumn(5, 15);
        assertEquals(5, stream.line);
        assertEquals(15, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_InputStreamConstructor_sMQx5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        stream.adjustBeginLineColumn(6, 20);
        assertEquals(6, stream.line);
        assertEquals(20, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ReaderConstructor_yLnZ6() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.adjustBeginLineColumn(7, 25);
        assertEquals(7, stream.line);
        assertEquals(25, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndColumn_PZus0_fid2() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedColumn = 1; // Assuming initial position is at the start column provided in constructor
    assertEquals(expectedColumn, stream.getEndColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginLine_AREv0_fid2() {
    java.io.StringReader reader = new java.io.StringReader("Test data for reader");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedLine = 1;
    int actualLine = stream.getBeginLine();
    assertEquals(expectedLine, actualLine);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(3072, stream.buffer.length);
        assertEquals(3072, stream.bufline.length);
        assertEquals(3072, stream.bufcolumn.length);
        assertEquals(3072, stream.available);
        assertEquals(1400, stream.maxNextCharInd);
        assertEquals(0, stream.tokenBegin);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginColumn_ggPs0_fid2() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 5);
    int expectedColumn = 5;
    int actualColumn = stream.getBeginColumn();
    assertEquals(expectedColumn, actualColumn);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndLine_nXux0_fid2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    assertEquals(1, stream.getEndLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_TxAu0_fid2() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    assertEquals(1, scs.getLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetColumn_qWmQ0_fid2() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int column = stream.getColumn();
    assertEquals(1, column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCarriageReturn_EoOW0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLineFeed_AVeF1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsLF);
        assertFalse(scs.prevCharIsCR);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_Motb2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);
        assertEquals(9, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularCharacter_gjFi3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);
        assertEquals(2, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_LCUO0_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(1, 1);
        assertEquals(1, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleTokenChangeLine_YNLf1_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(2, 1);
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_MultipleTokensChangeLine_vsqg2_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        stream.adjustBeginLineColumn(3, 5);
        assertEquals(3, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokensWrapAroundBuffer_bdbK3_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        stream.adjustBeginLineColumn(4, 10);
        assertEquals(4, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferSizeEdgeCase_VVan4_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.adjustBeginLineColumn(5, 15);
        assertEquals(5, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_InputStreamConstructor_sMQx5_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        stream.adjustBeginLineColumn(6, 20);
        assertEquals(6, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ReaderConstructor_yLnZ6_1_fid3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.adjustBeginLineColumn(7, 25);
        assertEquals(7, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_5_fid3() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(1400, stream.maxNextCharInd);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithSameReaderAndLargerBuffer_cbCZ1_Vjyn0_3() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
    assertEquals(scs.column, 1, "Column should be initialized to 1");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithDifferentStartPosition_bDHl2_FdrK0_3_fid3() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 2, 3, 5);
    assertEquals(3, scs.column);}
}