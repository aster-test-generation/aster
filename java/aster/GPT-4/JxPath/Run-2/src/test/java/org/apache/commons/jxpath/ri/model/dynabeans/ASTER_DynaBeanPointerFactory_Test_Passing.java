/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointerFactory_Test_Passing {
private DynaBeanPointerFactory dynaBeanPointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private DynaBean mockDynaBean;
@Mock
    private DynaBeanPointer mockDynaBeanPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonDynaBean_dNKP1() {
        DynaBeanPointerFactory factory = new DynaBeanPointerFactory();
        QName name = new QName("testName");
        Object nonDynaBean = new Object(); // Non-DynaBean instance
        Locale locale = Locale.getDefault();
        NodePointer result = factory.createNodePointer(name, nonDynaBean, locale);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonDynaBean() {
        dynaBeanPointerFactory = new DynaBeanPointerFactory();
        // Setup
        Object nonDynaBean = new Object();
        // Execution
        NodePointer result = dynaBeanPointerFactory.createNodePointer(mockParentNodePointer, mockQName, nonDynaBean);
        // Assertions
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithDynaBean_XEbk0_gAkr0_1() {
    DynaBeanPointerFactory factory = new DynaBeanPointerFactory();
    QName name = new QName("testName");
    DynaBean dynaBean = mock(DynaBean.class); // Using mock to simulate a DynaBean implementation
    NodePointer parent = null; // Assuming no parent is needed for this test
    NodePointer result = factory.createNodePointer(parent, name, dynaBean);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithDynaBean_XEbk0_gAkr0_2() {
    DynaBeanPointerFactory factory = new DynaBeanPointerFactory();
    QName name = new QName("testName");
    DynaBean dynaBean = mock(DynaBean.class); // Using mock to simulate a DynaBean implementation
    NodePointer parent = null; // Assuming no parent is needed for this test
    NodePointer result = factory.createNodePointer(parent, name, dynaBean);
    assertTrue(result instanceof DynaBeanPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_cJtw0_eVeK0() {
    DynaBeanPointerFactory factory = new DynaBeanPointerFactory();
    int expected = 0; // Assuming default order as 0 since DYNA_BEAN_POINTER_FACTORY_ORDER is not defined
    assertEquals(expected, factory.getOrder());
}
}