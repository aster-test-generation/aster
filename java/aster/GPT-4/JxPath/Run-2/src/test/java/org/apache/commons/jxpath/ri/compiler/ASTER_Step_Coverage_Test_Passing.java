/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Step_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_NullPredicates_ReturnsFalse_FKre0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Step step = new Step(0, nodeTest, null);
        boolean result = step.isContextDependent();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_EmptyPredicates_ReturnsFalse_uKXU1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Expression[] predicates = new Expression[0];
        Step step = new Step(0, nodeTest, predicates);
        boolean result = step.isContextDependent();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_NonContextDependentPredicates_ReturnsFalse_EVqH2() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Expression predicate1 = mock(Expression.class);
        Expression predicate2 = mock(Expression.class);
        when(predicate1.isContextDependent()).thenReturn(false);
        when(predicate2.isContextDependent()).thenReturn(false);
        Expression[] predicates = {predicate1, predicate2};
        Step step = new Step(0, nodeTest, predicates);
        boolean result = step.isContextDependent();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_WithContextDependentPredicate_ReturnsTrue_vorq3() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        Expression predicate1 = mock(Expression.class);
        Expression predicate2 = mock(Expression.class);
        when(predicate1.isContextDependent()).thenReturn(false);
        when(predicate2.isContextDependent()).thenReturn(true);
        Expression[] predicates = {predicate1, predicate2};
        Step step = new Step(0, nodeTest, predicates);
        boolean result = step.isContextDependent();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DescendantOrSelf_NoPredicates_wlMA0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, null);
        assertEquals("", step.toString());
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Self_NodeTypeNode_luQX3() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, null);
        assertEquals(".", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Parent_NodeTypeNode_cxaq4() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
        assertEquals("..", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Self_NotNodeTypeNode_ugov5() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, null);
        assertEquals("self::NodeTypeTest", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Parent_NotNodeTypeNode_McYD6() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
        assertEquals("parent::NodeTypeTest", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSwitch_LbzJ0() {
        String result = Step.axisToString(Compiler.AXIS_CHILD);
        assertEquals("child", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_hoCo2() {
        String result = Step.axisToString(Compiler.AXIS_ANCESTOR);
        assertEquals("ancestor", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_TkHN3() {
        String result = Step.axisToString(Compiler.AXIS_ATTRIBUTE);
        assertEquals("attribute", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_TcrI4() {
        String result = Step.axisToString(Compiler.AXIS_NAMESPACE);
        assertEquals("namespace", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_lskl5() {
        String result = Step.axisToString(Compiler.AXIS_PRECEDING);
        assertEquals("preceding", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendant_ZuXp6() {
        String result = Step.axisToString(Compiler.AXIS_DESCENDANT);
        assertEquals("descendant", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestorOrSelf_OztS7() {
        String result = Step.axisToString(Compiler.AXIS_ANCESTOR_OR_SELF);
        assertEquals("ancestor-or-self", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowingSibling_DedF8() {
        String result = Step.axisToString(Compiler.AXIS_FOLLOWING_SIBLING);
        assertEquals("following-sibling", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPrecedingSibling_CknA9() {
        String result = Step.axisToString(Compiler.AXIS_PRECEDING_SIBLING);
        assertEquals("preceding-sibling", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendantOrSelf_bxEy10() {
        String result = Step.axisToString(Compiler.AXIS_DESCENDANT_OR_SELF);
        assertEquals("descendant-or-self", result);
    }
}