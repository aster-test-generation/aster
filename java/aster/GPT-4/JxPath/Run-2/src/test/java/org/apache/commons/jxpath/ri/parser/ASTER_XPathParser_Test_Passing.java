/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import java.util.ArrayList;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
private int jj_endpos;
final private int[] jj_la1 = new int[39];
private Token jj_scanpos, jj_lastpos;
@Mock
    private Compiler compiler;
@Mock
    private XPathParserTokenManager tokenManager;
@Mock
    private SimpleCharStream stream;
@InjectMocks
    private XPathParser xpathParser;
@Mock
    private Token jj_nt;
private SimpleCharStream charStream;
@Mock
    private SimpleCharStream mockStream;
@Mock
    private Token token;
@Mock
    private Token nextToken;
private final int MINUS = 1;
private final Object leftExpr = new Object();
private final Object rightExpr = new Object();
private final Object resultExpr = new Object();
private XPathParserTokenManager tokenManagerMock;
private SimpleCharStream charStreamMock;
private final int TOKEN_KIND_80 = 80;
@Mock
    private ParseException parseException;
@Mock
    private Token mockToken;
@Mock
    private XPathParserTokenManager mockTokenManager;
@Mock
    private Token mockNextToken;
@Mock
    private SimpleCharStream mockSimpleCharStream;
@Mock
    private SimpleCharStream jj_input_stream;
@Mock
    private XPathParserTokenManager token_source;
  private int jj_gen;
  static private int[] jj_la1_0;
  private int[] jj_expentry;
  private final java.util.Vector jj_expentries = new java.util.Vector();
  private int jj_kind = -1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameReturnsCorrectObject() throws Exception {
        charStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(charStream);
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expectedQName = new Object();
        when(xpathParser.QName_Without_CoreFunctions()).thenReturn(expectedQName);
        // Act
        Object result = xpathParser.FunctionName();
        // Assert
        assertSame(expectedQName, result, "FunctionName should return the object from QName_Without_CoreFunctions");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameThrowsErrorOnMissingReturn() throws Exception{
        charStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(charStream);
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        when(xpathParser.QName_Without_CoreFunctions()).thenThrow(new Error("Missing return statement in function"));
        // Act & Assert
        Error thrown = assertThrows(Error.class, () -> xpathParser.FunctionName(), "Expected Error to be thrown");
        assertEquals("Missing return statement in function", thrown.getMessage(), "Error message should match expected");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_IDvQ0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_QNlb1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_ijOu2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_UHvt3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_fYMM4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_mifH5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_yNdY0() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_ADOy1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_RmOO2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_SyuE3() {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_hFMM4() {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_WvlX5() {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_jlyd0() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_jJxM1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_qMlt2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_xMGP3() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_DxUR4() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_GCTu5() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_gIsw0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_gFcR1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_qQtN2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_iifK3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_NoPT4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_flMk5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_qDVE6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_qlHo7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_WcpH8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_YDGF9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_IfnJ10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_PqdZ11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_LpWu5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_VkLl11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_gsgh3() {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_pOKs4() {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_rgfP5() {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_neIN4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_fouZ6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_lLWs0() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[]{}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_lycb1() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_SQhx2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_tZUj4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Djdt6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_aOyv8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_FCUV9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Gavn10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bICI11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_TDgG0() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_qrjK1() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_UqjH2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_hCcM3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_DMAp4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_EqBT5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_zOmC6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_uHNh7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_fPbg8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_JvPD9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FEDX10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NELW11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token error", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_DEhC0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_yblp4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_KKPV5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_MYtX6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function() { return true; }"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_CHJG7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function() { return false; }"), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_SBAO8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("var x = 10;"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_motU9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("var y = 20;"), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_ezsH10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("if (x > 5) { return x; }"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_fpGV11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("if (y < 5) { return y; }"), 1, 1, 4096);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_IDjM5() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_ehSg0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_bxTr1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_CZvN2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_goKO3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_nwjd4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_KLkI5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_SKbl6() {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_vpuG7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_yGHx8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_IJvh9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_TWUu10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_pVuO11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_VDik0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_DBeD1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_ZIAt2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("axis::self"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_IBuI3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("axis::self".getBytes()), 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_VShR4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("::"), 1, 1, 512);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_tVlA5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("::".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_bKoT6() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("random text"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_GyCQ7() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("random text".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_BMUm8() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_EaSX9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_itRH10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_jFhC11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 4096);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
        assertEquals("TokenMgrError", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_GPFF8() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_MjTW9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_lOHo5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_YdEe11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_jYWJ3() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_pnvr8() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_NmbJ3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_pNoX4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_EPBb5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_PeFw8() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_BNDg9() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_kaeO10() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_CUMd11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_wvMG5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_ATGd10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_YLMP11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_NCdb3() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_KzZp5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_MwzY11() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_QAmW0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_swLM2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_LtcQ4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_RIVz6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_wFOT8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Ctic10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_rznI4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_YxpU5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_vrvR10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_LjTK0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_RFcE2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_cujy3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_wSKQ6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_yCpQ7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_qKmZ8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{10, 20, 30}), 2, 3);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_zHcf9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{10, 20, 30}), 2, 3, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_vqHR10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bDAf11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("final test"), 3, 4, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_ocOl8() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_ySxX11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_JspU9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_rgFy0() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_kBUy1() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_GtmR2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_OWfa3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_fWuM4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_WUPs5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_FmpL6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_hIYk7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_reCV8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XAzE9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_EfjC10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_IjRu11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_LyQR5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_CLnd8() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_rbnW1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_vaFP2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_uoId3() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_flWF4() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_CoNN5() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_rTqy2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_vKXj3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_xqdv4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_IVgV5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Iejo6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_sOAT7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_NPIa10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Yvns11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
    assertEquals("Token recognition error at: ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_hHHT8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_PBUE9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_arOC6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_nzIV8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_uXoX10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 128);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bGEj11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 64);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_TCWZ6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_gXbN8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_iMoh9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_UKGY11() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_rHEt11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_KghX5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_TRXQ7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_gDBl11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_Tdsn5() {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_Fgfh9() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_LjLR10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_efxo11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_jDod0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_cjIr1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_ewRx2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_Kaqz3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_wjHo4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_zhYE5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_FAlP7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_fPSX10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException result = parser.generateParseException();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_njIX6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_ckwX7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_jddR8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_SzJS10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 4096);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_sEVu11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 8192);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_iLjs5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_ceXp7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_ouji7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_JHKP3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_myrp4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_aWOs5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_TCOb6() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_XrWK7() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_uCUr8() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()), 1, 1, 512);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_GMHM3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_OMTA4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_nglu5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_ytHL6() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_dCjj7() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_zvEO8() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_OTqn9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_oixV10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_ehDU11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_yZCA0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_ixWB4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_gLJl5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Egee6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_XRPm7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_goaa9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_WhAU7() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_EWMb8() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 2);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_NNee9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 3);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_owhb10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 4);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_bGkF11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 5);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_tEOK3() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_FOXW4() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_DdlF5() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_VbJZ7() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_ULsV8() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 2);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_NyeJ9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 3);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_hAbr10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 4);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_JTGb11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 5);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_TZuP8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_yqjV9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_rtBG11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_Gwrq9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_CPZu2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_EsdD5() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_RiZx9() {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_MMbZ5() {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_VfyJ9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function(endsWith)"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_JTWp10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function(endsWith)"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_aEfX11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function(endsWith)"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Utag8() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_ATeH10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_GGHU6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function() { return true; }"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_HuvC7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_MlmX8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_kTRb9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_qodh9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_BzVs11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 2);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_BWIH5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_MHlL9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_GnUh10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_fzVV11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_JZlF9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_SwbN10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_JoGK11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_XNtL7() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_IZHc8() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_jFud9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_CWNV11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_DIgh5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_ftzq10() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_YyIS8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0x0F, 0x4A}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_DnZt9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_kquR10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {10, 20, 30, 40, 50}), 5, 5);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_PGtt11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("final test"), 3, 3, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_gwDr8() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_rSEe3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_tGhq7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 2, 3);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_RrhG8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 2, 3, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_icbe9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 3, 4);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_vEXO10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 3, 4, 4096);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_HiLA11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("longer test input to ensure more complex parsing scenarios"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_KlfD8() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test input".getBytes()), 1, 1, 4096);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_tMxD9() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("different input".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_AObB10() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("different input".getBytes()), 2, 3);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_DfhH11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("different input".getBytes()), 2, 3, 512);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_EJCR10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NYtJ11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 4096);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_AqcP6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("<<test>>"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_VXNL7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("<<test>>".getBytes()), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_BIEz10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Qkok11() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("<<test>>"), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_toaM5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_DbNn11() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_eYem11() {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 4096);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_MjkC10() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_mDgW7() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_ExHv8() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_IeQr9() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnableTracing() throws Exception {
        // Initialization is handled by Mockito annotations
        // Call the method we are testing
        xpathParser.enable_tracing();
        // Since enable_tracing() has no output or state change, we simply verify it doesn't throw exceptions
        // This is a minimal test and generally not very useful
        // In a real-world scenario, you would want to test the effects of this method if it had any.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEnableTracing_fzhI0() {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        XPathParser parser = new XPathParser(inputStream);
        parser.enable_tracing();
        assertTrue(true); // This is a placeholder assertion to satisfy the test structure.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithLiteral_LWIY0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("\"hello &apos;world&apos;\""));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertEquals("hello 'world'", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithNumber_Hnjv1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("12345"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertEquals("12345", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithVariableReference_UuiS0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("variable"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertTrue(result instanceof String);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithFunctionCall_yTsH1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("function()"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualityExpr_IbnK0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("your test input here");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.EqualityExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExprWithFilterExpr_qHuA0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object expected = new Object(); // Expected result from FilterExpr
        assertEquals(expected, parser.PathExpr());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPathExprWithLocationPath_zdVt1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object expected = new Object(); // Expected result from LocationPath
        assertEquals(expected, parser.PathExpr());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExprWithSlash_GpMk0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("/");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.UnaryExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExpr_zGBZ0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("some input data that represents a stream");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicate_wfjI0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.Predicate();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExpr_SinglePathExpr() throws Exception {
        // Initialize XPathParser with a mock TokenManager
        XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
        xpathParser = new XPathParser(tm);
        // Setup
        Object expectedExpr = new Object();
        when(xpathParser.PathExpr()).thenReturn(expectedExpr);
        when(jj_nt.kind).thenReturn(-1); // Assuming -1 is not UNION
        // Execute
        Object result = xpathParser.UnionExpr();
        // Verify
        verify(xpathParser, times(1)).PathExpr();
        assertEquals(expectedExpr, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExpr_MultiplePathExpr() throws Exception {
        // Initialize XPathParser with a mock TokenManager
        XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
        xpathParser = new XPathParser(tm);
        // Setup
        Object firstExpr = new Object();
        Object secondExpr = new Object();
        ArrayList<Object> list = new ArrayList<>();
        list.add(firstExpr);
        list.add(secondExpr);
        Object expectedUnionResult = new Object();
        when(xpathParser.PathExpr()).thenReturn(firstExpr, secondExpr);
        when(jj_nt.kind).thenReturn(XPathParserTokenManager.UNION, -1); // Assuming UNION is a valid constant
        when(compiler.union(any())).thenReturn(expectedUnionResult);
        // Execute
        Object result = xpathParser.UnionExpr();
        // Verify
        verify(xpathParser, times(2)).PathExpr();
        verify(compiler).union(list.toArray());
        assertEquals(expectedUnionResult, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExprMultiplePathExpr_sgYk1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("pathExpr1 | pathExpr2 | pathExpr3");
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
        Object result = parser.UnionExpr();
        assertNotNull(result);
        assertTrue(result instanceof List);
        assertEquals(3, ((List) result).size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameSingleNCName_LkFY0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);
        assertEquals("Expected QName with single NCName", "NCName", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameWithPrefix_PCfm1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("prefix:NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);
        assertEquals("Expected QName with prefix and NCName", "prefix:NCName", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdditiveExprSinglePlus_SrBn0() {
        java.io.StringReader reader = new java.io.StringReader("1 + 2");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        try {
            Object result = parser.AdditiveExpr();
            assertEquals(3, result); // Assuming the sum method and parsing correctly returns the sum of 1 and 2
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdditiveExprMultiplePlus_IkXO1() {
        java.io.StringReader reader = new java.io.StringReader("1 + 2 + 3");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        try {
            Object result = parser.AdditiveExpr();
            assertEquals(6, result); // Assuming the sum method and parsing correctly returns the sum of 1, 2, and 3
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdditiveExprNoPlus_tUsR2() {
        java.io.StringReader reader = new java.io.StringReader("42");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        try {
            Object result = parser.AdditiveExpr();
            assertEquals(42, result); // Assuming the parsing correctly returns the single number
        } catch (ParseException e) {
            fail("ParseException thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompiler() throws Exception {
        // Initialization is handled by Mockito's @InjectMocks
        // Act: Set the compiler using the method to be tested
        xpathParser.setCompiler(compiler);
        // Assert: Check if the compiler was set correctly
        assertNotNull(xpathParser, "XPathParser instance should not be null");
        assertNotNull(compiler, "Compiler instance should not be null");
        // Verify that the setCompiler method sets the compiler field in XPathParser
        // This is a bit of reflection to access the private field, assuming it's named 'compiler'
        java.lang.reflect.Field field = xpathParser.getClass().getDeclaredField("compiler");
        field.setAccessible(true);
        Compiler setCompiler = (Compiler) field.get(xpathParser);
        assertNotNull(setCompiler, "Compiler should be set in XPathParser");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionCallWithNullArguments() throws Exception {
        // Initialization of XPathParser with mocks is handled by Mockito's @InjectMocks
        int mockCode = 1;
        ArrayList<Object> mockArgs = null;
        // Setup
        when(xpathParser.CoreFunctionName()).thenReturn(mockCode);
        when(xpathParser.ArgumentList()).thenReturn(mockArgs);
        // Define behavior for compiler function call
        Object expectedReturnValue = new Object();
        when(compiler.function(mockCode, null)).thenReturn(expectedReturnValue);
        // Execution
        Object result = xpathParser.CoreFunctionCall();
        // Verification
        verify(xpathParser).CoreFunctionName();
        verify(xpathParser).ArgumentList();
        verify(compiler).function(mockCode, null);
        assertEquals(expectedReturnValue, result, "The return value should match the expected object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionCallWithArguments() throws Exception {
        // Initialization of XPathParser with mocks is handled by Mockito's @InjectMocks
        int mockCode = 1;
        ArrayList<Object> mockArgs = new ArrayList<>();
        mockArgs.add("arg1");
        mockArgs.add("arg2");
        // Setup
        when(xpathParser.CoreFunctionName()).thenReturn(mockCode);
        when(xpathParser.ArgumentList()).thenReturn(mockArgs);
        // Define behavior for compiler function call
        Object expectedReturnValue = new Object();
        when(compiler.function(mockCode, mockArgs.toArray())).thenReturn(expectedReturnValue);
        // Execution
        Object result = xpathParser.CoreFunctionCall();
        // Verification
        verify(xpathParser).CoreFunctionName();
        verify(xpathParser).ArgumentList();
        verify(compiler).function(mockCode, mockArgs.toArray());
        assertEquals(expectedReturnValue, result, "The return value should match the expected object with arguments.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubtractiveExpr_tiRz0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("your test input here");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.SubtractiveExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseExpression_SHiv0() throws ParseException {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("some input data".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.parseExpression();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgument() throws Exception {
        // Initialize XPathParser with a mocked token manager
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expectedExpression = new Object();
        when(xpathParser.Expression()).thenReturn(expectedExpression);
        // Act
        Object result = xpathParser.Argument();
        // Assert
        assertEquals(expectedExpression, result, "The result should be the same object returned by Expression()");
        verify(xpathParser).Expression(); // Verify that Expression() was indeed called during the test
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentReturnsCorrectExpression_bWud0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("some input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object expected = parser.Expression(); // Assuming Expression() method is correctly implemented and accessible
        Object result = parser.Argument();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithAxisSpecifierAndNodeType_HSpm0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("data"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithProcessingInstruction_XNRG1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("<?xml version=\"1.0\"?>"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithWildcardName_xrXk2() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("*"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithSelfAxis_jbot3() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("."), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithParentAxis_snEo4() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(".."), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionNameForFunctionLast_LXuv0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int expected = Compiler.FUNCTION_LAST;
        int result = parser.CoreFunctionName();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCName_UgPg0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("NCName"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        String result = parser.NCName();
        assertEquals("NCName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing() throws Exception {
        xpathParser = new XPathParser(tokenManager);
        // Call the method disable_tracing
        xpathParser.disable_tracing();
        // Since disable_tracing() is an empty method, there's nothing specific to assert.
        // This test ensures that calling disable_tracing does not throw any exceptions.
        // To make this test meaningful, you would need to have some internal state or behavior to verify.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing_CePa0() {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        parser.disable_tracing();
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeText_bwoT0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("<text>"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        int expectedType = Compiler.NODE_TYPE_TEXT;
        assertEquals(expectedType, parser.NodeType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_oTpM0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object expected = null; // Assuming expected result is set correctly based on the context
        Object result = parser.VariableReference();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifier_DefaultChildAxis_gRTX0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int result = parser.AbbreviatedAxisSpecifier();
        assertEquals(Compiler.AXIS_CHILD, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression() throws Exception {
        // Initialization of XPathParser with a mocked XPathParserTokenManager
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expected = new Object();
        when(xpathParser.OrExpr()).thenReturn(expected);
        // Act
        Object result = xpathParser.Expression();
        // Assert
        assertNotNull(result, "The result should not be null");
        assertSame(expected, result, "The result should be the same object returned by OrExpr");
        verify(xpathParser, times(1)).OrExpr(); // Verify OrExpr was called exactly once
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisSpecifier_zjom0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int expected = 1;
        int result = parser.AxisSpecifier();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameInvalid() {
        // Initialize XPathParser with a mocked token manager
        xpathParser = new XPathParser(tokenManager);
        when(jj_nt.kind).thenReturn(-1);
        assertThrows(ParseException.class, () -> xpathParser.AxisName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPathThrowsParseException() {
        // Initialize the XPathParser with a mocked token manager
        xpathParser = new XPathParser(tokenManager);
        // Set up the kind to an invalid value that leads to ParseException
        Token jj_nt = new Token();
        jj_nt.kind = -1; // Assuming -1 is an invalid kind
        xpathParser.jj_nt = jj_nt;
        // Execute the LocationPath method and expect a ParseException
        assertThrows(ParseException.class, () -> xpathParser.LocationPath(), "Expected ParseException for invalid token kind.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPathReturnsCorrectObject_bebp0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("your test input here");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.LocationPath();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCallWithNullArguments() throws Exception {
        // Initialization of XPathParser with mocks is handled by Mockito's @InjectMocks
        String functionName = "sum";
        Object expectedReturnValue = 10;
        // Setup
        when(xpathParser.FunctionName()).thenReturn(functionName);
        when(xpathParser.ArgumentList()).thenReturn(null);
        when(compiler.function(functionName, null)).thenReturn(expectedReturnValue);
        // Execution
        Object result = xpathParser.FunctionCall();
        // Verification
        verify(compiler).function(functionName, null);
        assertEquals(expectedReturnValue, result, "The return value should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCallWithArguments() throws Exception {
        // Initialization of XPathParser with mocks is handled by Mockito's @InjectMocks
        String functionName = "sum";
        ArrayList<Object> arguments = new ArrayList<>();
        arguments.add(5);
        arguments.add(15);
        Object[] argsArray = arguments.toArray();
        Object expectedReturnValue = 20;
        // Setup
        when(xpathParser.FunctionName()).thenReturn(functionName);
        when(xpathParser.ArgumentList()).thenReturn(arguments);
        when(compiler.function(functionName, argsArray)).thenReturn(expectedReturnValue);
        // Execution
        Object result = xpathParser.FunctionCall();
        // Verification
        verify(compiler).function(functionName, argsArray);
        assertEquals(expectedReturnValue, result, "The return value should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_SingleNCName_whkT0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("validNCName"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.QName_Without_CoreFunctions();
        assertEquals("Expected QName with single NCName", "QName(null, validNCName)", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_PrefixAndLocalPart_hzzl1() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("prefix:localPart"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.QName_Without_CoreFunctions();
        assertEquals("Expected QName with prefix and local part", "QName(prefix, localPart)", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameThrowsErrorOnMissingReturn_1() throws Exception {
        charStream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(charStream);
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        when(xpathParser.QName_Without_CoreFunctions()).thenThrow(new Error("Missing return statement in function"));
        // Act & Assert
        Error thrown = assertThrows(Error.class, () -> xpathParser.FunctionName(), "Expected Error to be thrown");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_TDgG0_1() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_TDgG0_2() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_qrjK1_1() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_qrjK1_2() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_UqjH2_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_UqjH2_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_hCcM3_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_hCcM3_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_DMAp4_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_DMAp4_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_EqBT5_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_EqBT5_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_zOmC6_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_zOmC6_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_uHNh7_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_uHNh7_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_fPbg8_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_fPbg8_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_JvPD9_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_JvPD9_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FEDX10_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FEDX10_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NELW11_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NELW11_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_VDik0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_VDik0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_DBeD1_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_DBeD1_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_ZIAt2_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("axis::self"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_ZIAt2_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("axis::self"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_IBuI3_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("axis::self".getBytes()), 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_IBuI3_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("axis::self".getBytes()), 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_VShR4_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("::"), 1, 1, 512);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_VShR4_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("::"), 1, 1, 512);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_tVlA5_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("::".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_tVlA5_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("::".getBytes()));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_bKoT6_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("random text"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_bKoT6_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("random text"));
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_GyCQ7_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("random text".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_GyCQ7_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("random text".getBytes()), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_BMUm8_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_EaSX9_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_EaSX9_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("".getBytes()), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_itRH10_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_itRH10_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_jFhC11_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 4096);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_jFhC11_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 4096);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_rgFy0_2() {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_kBUy1_2() {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_GtmR2_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_OWfa3_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_fWuM4_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_WUPs5_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_FmpL6_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_hIYk7_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_reCV8_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XAzE9_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_EfjC10_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_IjRu11_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_rTqy2_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_vKXj3_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_xqdv4_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_IVgV5_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Iejo6_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_sOAT7_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_NPIa10_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Yvns11_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExprMultiplePathExpr_sgYk1_1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("pathExpr1 | pathExpr2 | pathExpr3");
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
        Object result = parser.UnionExpr();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExprMultiplePathExpr_sgYk1_2() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("pathExpr1 | pathExpr2 | pathExpr3");
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
        Object result = parser.UnionExpr();
        assertTrue(result instanceof List);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnionExprMultiplePathExpr_sgYk1_3() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("pathExpr1 | pathExpr2 | pathExpr3");
        XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
        Object result = parser.UnionExpr();
        assertEquals(3, ((List) result).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameSingleNCName_LkFY0_1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameSingleNCName_LkFY0_2() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertEquals("Expected QName with single NCName", "NCName", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameWithPrefix_PCfm1_1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("prefix:NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameWithPrefix_PCfm1_2() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("prefix:NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertEquals("Expected QName with prefix and NCName", "prefix:NCName", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompiler_1() throws Exception {
        // Initialization is handled by Mockito's @InjectMocks
        // Act: Set the compiler using the method to be tested
        xpathParser.setCompiler(compiler);
        // Assert: Check if the compiler was set correctly
        // Verify that the setCompiler method sets the compiler field in XPathParser
        // This is a bit of reflection to access the private field, assuming it's named 'compiler'
        java.lang.reflect.Field field = xpathParser.getClass().getDeclaredField("compiler");
        field.setAccessible(true);
        Compiler setCompiler = (Compiler) field.get(xpathParser);
        assertNotNull(xpathParser, "XPathParser instance should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompiler_2() throws Exception {
        // Initialization is handled by Mockito's @InjectMocks
        // Act: Set the compiler using the method to be tested
        xpathParser.setCompiler(compiler);
        // Assert: Check if the compiler was set correctly
        // Verify that the setCompiler method sets the compiler field in XPathParser
        // This is a bit of reflection to access the private field, assuming it's named 'compiler'
        java.lang.reflect.Field field = xpathParser.getClass().getDeclaredField("compiler");
        field.setAccessible(true);
        Compiler setCompiler = (Compiler) field.get(xpathParser);
        assertNotNull(compiler, "Compiler instance should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompiler_3() throws Exception {
        // Initialization is handled by Mockito's @InjectMocks
        // Act: Set the compiler using the method to be tested
        xpathParser.setCompiler(compiler);
        // Assert: Check if the compiler was set correctly
        // Verify that the setCompiler method sets the compiler field in XPathParser
        // This is a bit of reflection to access the private field, assuming it's named 'compiler'
        java.lang.reflect.Field field = xpathParser.getClass().getDeclaredField("compiler");
        field.setAccessible(true);
        Compiler setCompiler = (Compiler) field.get(xpathParser);
        assertNotNull(setCompiler, "Compiler should be set in XPathParser");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression_1() throws Exception {
        // Initialization of XPathParser with a mocked XPathParserTokenManager
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expected = new Object();
        when(xpathParser.OrExpr()).thenReturn(expected);
        // Act
        Object result = xpathParser.Expression();
        // Assert
        verify(xpathParser, times(1)).OrExpr(); // Verify OrExpr was called exactly once
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression_2() throws Exception {
        // Initialization of XPathParser with a mocked XPathParserTokenManager
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expected = new Object();
        when(xpathParser.OrExpr()).thenReturn(expected);
        // Act
        Object result = xpathParser.Expression();
        // Assert
        verify(xpathParser, times(1)).OrExpr(); // Verify OrExpr was called exactly once
        assertSame(expected, result, "The result should be the same object returned by OrExpr");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrExprMultipleAndExprWithOr_bbFg1_Qtql0_1() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("OR AND".getBytes()));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.OrExpr();
    int expectedSize = 2; // Assuming the expected size should be 2 based on the input "OR AND"
    assertTrue(result instanceof List, "Expected a list result from multiple AndExpr with OR");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrExprMultipleAndExprWithOr_bbFg1_Qtql0_2() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("OR AND".getBytes()));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.OrExpr();
    int expectedSize = 2; // Assuming the expected size should be 2 based on the input "OR AND"
    assertEquals(expectedSize, ((List) result).size(), "Expected list size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFilterExpr_hfwJ0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser xpathParser = new XPathParser(tokenManager);
    Object expectedExpr = new Object();
    Object primaryExpr = new Object();
    Object predicate = new Object();
    Object[] predicates = {predicate};
    Object[] steps = new Object[0];
    when(xpathParser.PrimaryExpr()).thenReturn(primaryExpr);
    when(xpathParser.Predicate()).thenReturn(predicate);
    when(compiler.expressionPath(primaryExpr, predicates, steps)).thenReturn(expectedExpr);
    token.kind = 85; // Assuming 85 is not SLASH or SLASHSLASH
    xpathParser.jj_nt = token;
    Object result = xpathParser.FilterExpr();
    assertEquals(expectedExpr, result);
    verify(xpathParser, times(1)).PrimaryExpr();
    verify(xpathParser, times(1)).Predicate();
    verify(compiler, times(1)).expressionPath(primaryExpr, predicates, steps);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFilterExprWithEmptyInput_BTgr0_rnzO0() {
    java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(in);
    try {
        Object result = parser.FilterExpr();
        assertNull(result, "Expected null for empty input");
    } catch (ParseException e) {
        fail("ParseException should not be thrown for empty input");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionName_NimS0_tklg0() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.FunctionName();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_HACV10_VQAP0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_JENj7_TqAv0() {
    java.io.Reader reader = new java.io.StringReader("input data");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_gBaz9_rNlR0() {
    java.io.Reader reader = new java.io.StringReader("input data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_dfsE11_qwIY0() {
    java.io.Reader reader = new java.io.StringReader("input data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_PIMD7_EkZx0() {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_jtWi9_WgaO0() {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_DjJo11_OWJA0() {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_PTmj7_gLAz0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_cQDK11_cIXA0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_XTFD11_Iqrw0() {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_fBnP11_mLkZ0() {
    java.io.Reader reader = new java.io.StringReader("input data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_FVqW1_LruF0() {
    XPathParser parser = new XPathParser((java.io.Reader) null);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_TloQ6_RolK0() {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrimaryExprThrowsParseException_dJlR0() {
    when(xpathParser.jj_nt.kind).thenReturn(-1); // Corrected access to kind
    assertThrows(ParseException.class, () -> xpathParser.PrimaryExpr());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithSlash_FgVL0_ciZL0() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("/".getBytes()));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assert result != null : "Result should not be null when input is a single slash";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithSlashSlash_WcsI1_pHbq0() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("//".getBytes()));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assertNotNull(result, "Result should not be null when input starts with double slash");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTokenWithNoNextToken_OOmm2_OIff0() {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    try {
        assertNull(token);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPathExpr_LocationPathBranch_fNcq0() throws Exception {
    SimpleCharStream stream = mock(SimpleCharStream.class);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser xpathParser = new XPathParser(tokenManager);
    Field jj_ntField = XPathParser.class.getDeclaredField("jj_nt");
    jj_ntField.setAccessible(true);
    mockToken.kind = 83; // Assuming 83 triggers LocationPath
    jj_ntField.set(xpathParser, mockToken);
    Object expected = new Object();
    when(xpathParser.LocationPath()).thenReturn(expected);
    Object result = xpathParser.PathExpr();
    verify(xpathParser).LocationPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPathExpr_ThrowsParseException_Tuko0() throws Exception {
    SimpleCharStream stream = mock(SimpleCharStream.class);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser xpathParser = new XPathParser(tokenManager);
    when(xpathParser.jj_nt.kind).thenReturn(-1); // An invalid kind leading to ParseException
    assertThrows(ParseException.class, () -> xpathParser.PathExpr(), "Expected ParseException to be thrown.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRelationalExprLessThan_xzty0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    xpathParser = new XPathParser(tm);
    when(xpathParser.AdditiveExpr()).thenReturn(leftExpr);
    when(jj_nt.kind).thenReturn(XPathParserConstants.LT);
    when(compiler.lessThan(leftExpr, rightExpr)).thenReturn(resultExpr);
    when(xpathParser.AdditiveExpr()).thenReturn(rightExpr);
    Object result = xpathParser.RelationalExpr();
    verify(compiler).lessThan(leftExpr, rightExpr);
    assertEquals(resultExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRelationalExprGreaterThan_rBrH0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    xpathParser = new XPathParser(tm);
    when(xpathParser.AdditiveExpr()).thenReturn(leftExpr);
    when(jj_nt.kind).thenReturn(XPathParserConstants.GT);
    when(compiler.greaterThan(leftExpr, rightExpr)).thenReturn(resultExpr);
    when(xpathParser.AdditiveExpr()).thenReturn(rightExpr);
    Object result = xpathParser.RelationalExpr();
    verify(compiler).greaterThan(leftExpr, rightExpr);
    assertEquals(resultExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRelationalExprLessThanOrEqual_YTqz0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    xpathParser = new XPathParser(tm);
    when(xpathParser.AdditiveExpr()).thenReturn(leftExpr);
    when(jj_nt.kind).thenReturn(XPathParserConstants.LTE);
    when(compiler.lessThanOrEqual(leftExpr, rightExpr)).thenReturn(resultExpr);
    when(xpathParser.AdditiveExpr()).thenReturn(rightExpr);
    Object result = xpathParser.RelationalExpr();
    verify(compiler).lessThanOrEqual(leftExpr, rightExpr);
    assertEquals(resultExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRelationalExprGreaterThanOrEqual_OXyf0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    xpathParser = new XPathParser(tm);
    when(xpathParser.AdditiveExpr()).thenReturn(leftExpr);
    when(jj_nt.kind).thenReturn(XPathParserConstants.GTE);
    when(compiler.greaterThanOrEqual(leftExpr, rightExpr)).thenReturn(resultExpr);
    when(xpathParser.AdditiveExpr()).thenReturn(rightExpr);
    Object result = xpathParser.RelationalExpr();
    verify(compiler).greaterThanOrEqual(leftExpr, rightExpr);
    assertEquals(resultExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRelationalExprNoMatch_KRLl0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    xpathParser = new XPathParser(tm);
    when(xpathParser.AdditiveExpr()).thenReturn(leftExpr);
    when(jj_nt.kind).thenReturn(XPathParserConstants.EOF);
    assertThrows(ParseException.class, () -> xpathParser.RelationalExpr());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprSingleEquality_qwuO0_YqQL0() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("a = b"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertEquals(result, "a = b", "Expected single equality expression result");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprMultipleEquality_ptfb1_sQOI0_1() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("a = b and c = d"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertTrue(result instanceof List, "Expected result to be an instance of List");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprMultipleEquality_ptfb1_sQOI0_2() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("a = b and c = d"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertEquals(2, ((List) result).size(), "Expected list size of 2");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprNoAndOperator_LtUT2_fxtN0() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("a = b"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertEquals("a = b", result.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnionExprSinglePathExpr_kCsl0_PIYv0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("singlePathExpr");
    XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
    Object result = parser.UnionExpr();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnionExprNoUnion_KPgz2_rFaF0_1() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("pathExprWithoutUnion");
    XPathParser parser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(reader)));
    Object result = parser.UnionExpr();
    assertNotNull(result);}
}