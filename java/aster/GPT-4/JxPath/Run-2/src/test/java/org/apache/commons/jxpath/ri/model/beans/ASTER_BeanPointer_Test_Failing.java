/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Failing {
private QName name;
private Object bean;
private JXPathBasicBeanInfo beanInfo;
private Locale locale;
private DOMNodePointer parent;
private BeanPointer beanPointer;
@Mock
    private JXPathBasicBeanInfo beanInfoMock;
@Mock
    private QName qNameMock;
@Mock
    private Object beanMock;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParent() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        when(parent.asPath()).thenReturn("/parentPath");
        beanPointer = new BeanPointer(parent, name, "testBean", beanInfo);
        assertEquals("/parentPath", beanPointer.asPath(), "Expected path from parent");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsNull() throws Exception {
        name = new QName("testName");
        bean = new Object();
        beanInfo = mock(JXPathBasicBeanInfo.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup to return null for getNode()
        when(beanPointer.getNode()).thenReturn(null);
        // Execute
        boolean result = beanPointer.isLeaf();
        // Verify
        assertTrue(result, "Expected isLeaf to return true when node is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsNotNullAndAtomic() throws Exception {
        name = new QName("testName");
        bean = new Object();
        beanInfo = mock(JXPathBasicBeanInfo.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup to return a non-null object for getNode()
        Object node = new Object();
        when(beanPointer.getNode()).thenReturn(node);
        // Mocking JXPathIntrospector to return beanInfo that says the object is atomic
        when(JXPathIntrospector.getBeanInfo(node.getClass())).thenReturn(beanInfo);
        when(beanInfo.isAtomic()).thenReturn(true);
        // Execute
        boolean result = beanPointer.isLeaf();
        // Verify
        assertTrue(result, "Expected isLeaf to return true when node is atomic");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsNotNullAndNotAtomic() throws Exception {
        name = new QName("testName");
        bean = new Object();
        beanInfo = mock(JXPathBasicBeanInfo.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup to return a non-null object for getNode()
        Object node = new Object();
        when(beanPointer.getNode()).thenReturn(node);
        // Mocking JXPathIntrospector to return beanInfo that says the object is not atomic
        when(JXPathIntrospector.getBeanInfo(node.getClass())).thenReturn(beanInfo);
        when(beanInfo.isAtomic()).thenReturn(false);
        // Execute
        boolean result = beanPointer.isLeaf();
        // Verify
        assertFalse(result, "Expected isLeaf to return false when node is not atomic");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithNonNullName() throws Exception {
        // Initialize BeanPointer with a mock QName
        beanPointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), null);
        // Arrange
        when(name.hashCode()).thenReturn(123);
        // Act
        int result = beanPointer.hashCode();
        // Assert
        assertEquals(123, result, "The hash code should match the mocked hash code of the name.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBean_1() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123", beanPointer.asPath(), "Expected path for Number bean without decimal");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBean_1() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath(), "Expected path for true Boolean bean");}
}