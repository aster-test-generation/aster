/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationNegate_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_CQkI0() {
        Constant constant = new Constant(5); // Assuming 5 as a sample Number input
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        String result = coreOperationNegate.getSymbol();
        assertEquals("-", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithPositiveNumber_RctT0() {
        EvalContext context = mock(EvalContext.class);
        Constant constant = mock(Constant.class);
        CoreOperationNegate operation = new CoreOperationNegate(constant);
        when(constant.computeValue(context)).thenReturn(10.0);
        Object result = operation.computeValue(context);
        assertEquals(-10.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNegativeNumber_yPxa1() {
        EvalContext context = mock(EvalContext.class);
        Constant constant = mock(Constant.class);
        CoreOperationNegate operation = new CoreOperationNegate(constant);
        when(constant.computeValue(context)).thenReturn(-20.0);
        Object result = operation.computeValue(context);
        assertEquals(20.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsFalse_oDxA0_dbLM0() {
    Constant constant = new Constant(5); // Assuming 5 as a sample Number input
    CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
    assertFalse(coreOperationNegate.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_ayBl0_KUlf0() {
    final int expectedPrecedence = CoreOperationNegate.NEGATE_PRECEDENCE;
    Constant constant = new Constant(5); // Assuming '5' is a valid Number argument
    CoreOperationNegate negate = new CoreOperationNegate(constant);
    int actualPrecedence = negate.getPrecedence();
    assertEquals(expectedPrecedence, actualPrecedence, "Precedence should match NEGATE_PRECEDENCE");
}
}