/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceResolver_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNull_uiux1() {
        NamespaceResolver resolver = new NamespaceResolver();
        Pointer result = resolver.getNamespaceContextPointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NoMatchInAny_AaTT6() {
        NodePointer mockPointer = mock(NodePointer.class);
        NodePointer mockParentPointer = mock(NodePointer.class);
        NodeIterator mockIterator = mock(NodeIterator.class);
        NodeIterator mockParentIterator = mock(NodeIterator.class);
        when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
        when(mockIterator.setPosition(anyInt())).thenReturn(false);
        when(mockPointer.getParent()).thenReturn(mockParentPointer);
        when(mockParentPointer.namespaceIterator()).thenReturn(mockParentIterator);
        when(mockParentIterator.setPosition(anyInt())).thenReturn(false);
        assertNull("Expected null when no match found in any pointer", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneThrowsCloneNotSupportedException_Fbmz0_RkLH0() {
    NamespaceResolver mockResolver = mock(NamespaceResolver.class);
    when(mockResolver.clone()).thenThrow(RuntimeException.class);
    NamespaceResolver resolver = new NamespaceResolver();
    NamespaceResolver clonedResolver = (NamespaceResolver) resolver.clone();
    assertNotNull(clonedResolver);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneHandlingCloneNotSupportedException_BlIK1_CTFF0() {
    NamespaceResolver resolver = new NamespaceResolver();
    NamespaceResolver spyResolver = spy(resolver);
    doReturn(null).when(spyResolver).clone();
    NamespaceResolver clonedResolver = (NamespaceResolver) spyResolver.clone();
    assertNull(clonedResolver);
}
}