/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Document;
import org.jdom.Element;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMPointerFactory_Test_Passing {
private JDOMPointerFactory jdomPointerFactory;
private NodePointer mockParentNodePointer;
private QName mockQName;
private Document mockDocument;
private Element mockElement;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithDocument_1() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockDocument);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithDocument_2() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockDocument);
        assertTrue(result instanceof JDOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithDocument_3() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockDocument);
        assertSame(mockDocument, ((JDOMNodePointer) result).getNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithElement_1() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockElement);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithElement_2() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockElement);
        assertTrue(result instanceof JDOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithElement_3() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockElement);
        assertSame(mockElement, ((JDOMNodePointer) result).getNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithUnsupportedBean() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        Object unsupportedBean = new Object();
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, unsupportedBean);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithDocument_WEBL0_uICU0() {
    JDOMPointerFactory factory = new JDOMPointerFactory();
    QName name = new QName("test");
    Document document = new Document();
    Locale locale = Locale.getDefault();
    NodePointer parent = new DOMNodePointer(null, locale); // Assuming null for the node parameter
    NodePointer result = factory.createNodePointer(parent, name, document);
    assertNotNull(result, "NodePointer should not be null for Document");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithElement_zyEC1_MAfU0() {
    JDOMPointerFactory factory = new JDOMPointerFactory();
    QName name = new QName("test");
    Element element = new Element("element");
    NodePointer parent = null; // Assuming parent can be null for this test
    NodePointer result = factory.createNodePointer(parent, name, element);
    assertNotNull(result, "NodePointer should not be null for Element");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonJDOMObject_AaZQ2_hpXq0() {
    JDOMPointerFactory factory = new JDOMPointerFactory();
    QName name = new QName("test");
    Object nonJDOMObject = new Object();
    NodePointer parent = null; // Assuming parent can be null for this test
    NodePointer result = factory.createNodePointer(parent, name, nonJDOMObject);
    assertNull(result, "NodePointer should be null for non-JDOM object");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_uCaT0_lWMA0() {
    JDOMPointerFactory factory = new JDOMPointerFactory();
    int expected =110; // Assuming110 as the expected order for JDOMPointerFactory
    assertEquals(expected, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithDocument() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockDocument);
        assertNotNull(result);
        assertTrue(result instanceof JDOMNodePointer);
        assertSame(mockDocument, ((JDOMNodePointer) result).getNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithElement() {
        jdomPointerFactory = new JDOMPointerFactory();
        mockParentNodePointer = mock(NodePointer.class);
        mockQName = mock(QName.class);
        mockDocument = mock(Document.class);
        mockElement = mock(Element.class);
        NodePointer result = jdomPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockElement);
        assertNotNull(result);
        assertTrue(result instanceof JDOMNodePointer);
        assertSame(mockElement, ((JDOMNodePointer) result).getNode());
    }
}