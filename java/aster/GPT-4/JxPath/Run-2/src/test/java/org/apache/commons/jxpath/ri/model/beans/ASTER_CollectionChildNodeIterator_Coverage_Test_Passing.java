/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CollectionChildNodeIterator_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator_SBvi0() {
        NodePointer mockElementPointer = mock(NodePointer.class);
        NodeTypeTest mockTest = mock(NodeTypeTest.class);
        NodeIterator expectedIterator = mock(NodeIterator.class);
        when(mockElementPointer.childIterator(mockTest, false, null)).thenReturn(expectedIterator);
        CollectionChildNodeIterator iterator = new CollectionChildNodeIterator(null, mockTest, false, null);
        NodeIterator result = iterator.getElementNodeIterator(mockElementPointer);
    }
}