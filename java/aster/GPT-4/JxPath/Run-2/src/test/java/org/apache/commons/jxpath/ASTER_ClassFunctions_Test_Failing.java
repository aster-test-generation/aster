/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionConstructorSuccess_DIbj3() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNotNull(cf.getFunction(null, "new", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionStaticMethodSuccess_cZDo4() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNotNull(cf.getFunction("testNamespace", "staticMethodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInstanceMethodSuccess_OjLJ5() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNotNull(cf.getFunction("testNamespace", "instanceMethodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullNamespaceAndNullInstanceNamespace_ukst7() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNotNull(cf.getFunction(null, "methodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithEmptyParametersArray_vbTF8() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNotNull(cf.getFunction("testNamespace", "methodName", new Object[] {}));
    }
}