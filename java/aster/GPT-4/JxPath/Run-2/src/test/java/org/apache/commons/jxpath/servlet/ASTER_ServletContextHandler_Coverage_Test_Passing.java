/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletContextHandler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_ELxN0() {
        ServletContext mockContext = mock(ServletContext.class);
        when(mockContext.getAttribute("testProperty")).thenReturn("testValue");
        ServletContextHandler handler = new ServletContextHandler();
        Object result = handler.getProperty(mockContext, "testProperty");
        assertEquals("testValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithNonEmptyContext_CVbv0() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Assuming context is an object where properties can be collected
        String[] expectedProperties = {"property1", "property2", "property3"};
        HashSet<String> list = new HashSet<>();
        list.add("property1");
        list.add("property2");
        list.add("property3");
        String[] result = handler.getPropertyNames(context);
        assertArrayEquals(expectedProperties, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesWithEmptyContext_RuCO1() {
        ServletContextHandler handler = new ServletContextHandler();
        Object context = new Object(); // Assuming context is an object but has no properties
        HashSet<String> list = new HashSet<>();
        String[] result = handler.getPropertyNames(context);
        assertTrue(result.length == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithValidInputs_gWKr0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockContext = mock(ServletContext.class);
        String property = "testProperty";
        Object value = "testValue";
        handler.setProperty(mockContext, property, value);
        verify(mockContext).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_giug1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockContext = mock(ServletContext.class);
        String property = "testProperty";
        Object value = null;
        handler.setProperty(mockContext, property, value);
        verify(mockContext).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithHttpSessionAndServletContext_uCtE0() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        HttpSessionAndServletContext mockBean = mock(HttpSessionAndServletContext.class);
        ServletContext mockServletContext = mock(ServletContext.class);
        when(mockBean.getServletContext()).thenReturn(mockServletContext);
        handler.collectPropertyNames(set, mockBean);
        verify(mockBean).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithServletContext_mrbC1() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext mockServletContext = mock(ServletContext.class);
        handler.collectPropertyNames(set, mockServletContext);
        verify(mockServletContext).getAttributeNames();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EnumerationHasElements_AFpe2() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext mockServletContext = mock(ServletContext.class);
        Vector<String> attributeNames = new Vector<>();
        attributeNames.add("attr1");
        attributeNames.add("attr2");
        Enumeration<String> enumeration = attributeNames.elements();
        when(mockServletContext.getAttributeNames()).thenReturn(enumeration);
        handler.collectPropertyNames(set, mockServletContext);
        assert set.contains("attr1");
        assert set.contains("attr2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EnumerationEmpty_tuzB3() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext mockServletContext = mock(ServletContext.class);
        Vector<String> attributeNames = new Vector<>();
        Enumeration<String> enumeration = attributeNames.elements();
        when(mockServletContext.getAttributeNames()).thenReturn(enumeration);
        handler.collectPropertyNames(set, mockServletContext);
        assert set.isEmpty();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_NullServletContext_UfnM4() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        HttpSessionAndServletContext mockBean = mock(HttpSessionAndServletContext.class);
        when(mockBean.getServletContext()).thenReturn(null);
        try {
            handler.collectPropertyNames(set, mockBean);
            assert false : "Expected NullPointerException";
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_NullBean_DBuO5() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        try {
            handler.collectPropertyNames(set, null);
            assert false : "Expected ClassCastException";
        } catch (ClassCastException e) {
        }
    }
}