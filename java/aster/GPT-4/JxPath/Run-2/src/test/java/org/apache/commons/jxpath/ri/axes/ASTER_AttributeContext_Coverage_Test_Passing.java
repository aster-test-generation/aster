/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AttributeContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionResetCalled_bqor0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(10);
        doNothing().when(spyAttributeContext).reset();
        spyAttributeContext.setPosition(5);
        verify(spyAttributeContext).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNoResetCalled_zlBm1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(3);
        doNothing().when(spyAttributeContext).reset();
        spyAttributeContext.setPosition(5);
        verify(spyAttributeContext, never()).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNextNodeFalse_jSss2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(3);
        when(spyAttributeContext.nextNode()).thenReturn(false);
        assertFalse(spyAttributeContext.setPosition(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNextNodeTrue_GFvq3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(3);
        when(spyAttributeContext.nextNode()).thenReturn(true).thenReturn(true);
        assertTrue(spyAttributeContext.setPosition(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionExactCurrentPosition_SSSG4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(5);
        assertTrue(spyAttributeContext.setPosition(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNextNodeTrueThenFalse_Wllm5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyAttributeContext = spy(attributeContext);
        when(spyAttributeContext.getCurrentPosition()).thenReturn(3);
        when(spyAttributeContext.nextNode()).thenReturn(true).thenReturn(false);
        assertFalse(spyAttributeContext.setPosition(6));
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_dMDX1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorIsNull_TtJQ4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTestIsNotHandled_mEbv5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(-1); // An unexpected node type
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }


}