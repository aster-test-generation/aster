/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocationPath_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyStepsAndNotAbsolute_gFTk0() {
        Step[] steps = new Step[0];
        LocationPath path = new LocationPath(false, steps);
        assertEquals("", path.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullStepsAndNotAbsolute_DsCm1() {
        LocationPath path = new LocationPath(false, null);
        assertEquals("", path.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyStepsAndAbsolute_JrcA4() {
        Step[] steps = new Step[0];
        LocationPath path = new LocationPath(true, steps);
        assertEquals("", path.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_AbsolutePath_cdgI0() {
        boolean absolute = true;
        Step[] steps = new Step[] {};
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        locationPath.compute(context);
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_NonAbsolutePath_alNR1() {
        boolean absolute = false;
        Step[] steps = new Step[] {};
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext expectedRootContext = new InitialContext(context);
        locationPath.compute(context);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_InvokesEvalSteps_pkjc3() {
        boolean absolute = false;
        Step[] steps = new Step[] {};
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        locationPath.compute(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithAbsoluteTrue_AvHi0() {
        boolean absolute = true;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        locationPath.computeValue(context);
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithAbsoluteFalse_aZed1() {
        boolean absolute = false;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        locationPath.computeValue(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueReturnsSingleNodePointerForSteps_WRXR2() {
        boolean absolute = true;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        when(locationPath.getSingleNodePointerForSteps(absoluteRootContext)).thenReturn(expectedNodePointer);
        Object result = locationPath.computeValue(context);
        verify(locationPath).getSingleNodePointerForSteps(absoluteRootContext);
        assertEquals(expectedNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithInitialContext_lRHl3() {
        boolean absolute = false;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(locationPath.getSingleNodePointerForSteps(initialContext)).thenReturn(expectedNodePointer);
        Object result = locationPath.computeValue(context);
        verify(locationPath).getSingleNodePointerForSteps(initialContext);
        assertEquals(expectedNodePointer, result);
    }
}