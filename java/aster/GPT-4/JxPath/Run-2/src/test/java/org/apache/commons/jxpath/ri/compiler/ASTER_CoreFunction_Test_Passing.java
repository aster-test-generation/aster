/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import java.util.Collection;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
private NodePointer nodePointer2;
private int functionCode = 1;
@Mock
    private EvalContext evalContext;
@Mock
    private JXPathContext jXPathContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private Expression expression;
@InjectMocks
    private EvalContext context;
@Mock
    private Expression arg1;
@Mock
    private Expression arg2;
@Mock
    private Object computedValue1;
@Mock
    private Object computedValue2;
@Mock
    private Expression expression1;
@Mock
    private Expression expression2;
@Mock
    private Expression arg3;
@Mock
    private NodeSet nodeSet;
@Mock
    private Expression[] args;
private NodePointer nodePointer1;
    private static final Double ZERO = Double.valueOf(0);
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNameForFunctionLast_xnjo0() {
    CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[]{});
    String result = coreFunction.getFunctionName();
    assertEquals("last", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountWithNullArgs_xDPM0() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    int count = coreFunction.getArgumentCount();
    assertEquals(0, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountWithNonEmptyArgs_PPZb1() {
    Expression[] expressions = new Expression[3];
    CoreFunction coreFunction = new CoreFunction(1, expressions);
    int count = coreFunction.getArgumentCount();
    assertEquals(3, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NoArguments_zeOp0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
        String result = coreFunction.toString();
        assertEquals("FunctionName()", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NullArguments_IXXl3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        String result = coreFunction.toString();
        assertEquals("FunctionName()", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionLast_bImQ0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionPosition_EtZL1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionBooleanNoArgs_KhJD2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionFormatNumberTwoArgs_fhve3() {
        Expression[] args = new Expression[2];
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, args);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionCount_zYYW4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        assertFalse(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionRound_MIMy5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        assertFalse(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionCode_FiEn0() {
    Expression[] expressions = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(5, expressions);
    assertEquals(5, coreFunction.getFunctionCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionKey_NoNextNode_cqsG3_WNDy0_1() {
    EvalContext context = mock(EvalContext.class);
    when(context.nextNode()).thenReturn(false);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
    Object result = coreFunction.functionSubstring(context);
    assertTrue(result instanceof String);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionKey_NoNextNode_cqsG3_WNDy0_2() {
    EvalContext context = mock(EvalContext.class);
    when(context.nextNode()).thenReturn(false);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
    Object result = coreFunction.functionSubstring(context);
    assertTrue(((String) result).isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValueForFunctionLast_tedJ0() {
    int functionCode = Compiler.FUNCTION_LAST;
    Expression[] args = null; // Assuming no arguments are needed for this function
    CoreFunction coreFunction = new CoreFunction(functionCode, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(evalContext.getPosition()).thenReturn(5);
    Object result = coreFunction.functionSubstring(evalContext); // Corrected method call
    assertEquals(5, result);
    verify(evalContext).getPosition();
    verifyNoMoreInteractions(evalContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_DRaF0() throws Exception {
    Expression[] expressions = new Expression[]{expression, expression, expression};
    CoreFunction coreFunction = new CoreFunction(1, expressions);
    when(expression.computeValue(evalContext)).thenReturn("hello", 1.0, 4.0);
    Object result = coreFunction.functionSubstring(evalContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBefore_BothStringsPresent_ihHB0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
    when(arg1.computeValue(context)).thenReturn("hello world");
    when(arg2.computeValue(context)).thenReturn(1.0); // Start from the first character
    when(arg3.computeValue(context)).thenReturn(5.0); // Length of the substring
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBefore_SubstringNotFound_NeiV0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn("hello world");
    when(arg2.computeValue(context)).thenReturn("test");
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_EmptyFirstString_Rlzg0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn("");
    when(arg2.computeValue(context)).thenReturn(1.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_EmptySecondString_ehdI0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("hello world");
    when(arg2.computeValue(context)).thenReturn("");
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBefore_BothEmptyStrings_Wblv0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("");
    when(arg2.computeValue(context)).thenReturn("1");
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionName_NoArguments_ReturnsCurrentNodeName_oryq0() throws Exception {
    Expression[] noArgs = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(0, noArgs);
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(context.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getName()).thenReturn(new QName("http://example.com", "nodeName"));
    Object result = coreFunction.functionName(context); // This line assumes functionName is correctly implemented in CoreFunction
    assertEquals("nodeName", result);
    verify(context, times(1)).getCurrentNodePointer();
    verify(nodePointer, times(1)).getName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_NoNextNode_ReturnsEmptyString_ILim0() throws Exception {
    Expression[] expressions = new Expression[3]; // Assuming three expressions for the functionSubstring
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(context.hasNext()).thenReturn(false);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
    verify(context, never()).next();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_NIDv0() throws Exception {
    Expression[] expressions = new Expression[3]; // Assuming 3 expressions for the maxArgs scenario
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext mockContext = mock(EvalContext.class);
    when(expressions[0].computeValue(mockContext)).thenReturn("example");
    when(expressions[1].computeValue(mockContext)).thenReturn(3.0);
    when(expressions[2].computeValue(mockContext)).thenReturn(4.0);
    Object result = coreFunction.functionSubstring(mockContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionLang_WithMatchingLanguage_ReturnsTrue_GNdo0() throws Exception {
    Expression arg1 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1});
    String testLanguage = "en";
    when(arg1.computeValue(context)).thenReturn(testLanguage);
    when(context.getSingleNodePointer()).thenReturn(nodePointer);
    when(nodePointer.isLanguage(testLanguage)).thenReturn(true);
    Object result = coreFunction.functionLang(context);
    assertEquals(Boolean.TRUE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionLang_WithNonMatchingLanguage_ReturnsFalse_ovJT0() throws Exception {
    Expression arg1 = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1});
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    String testLanguage = "en";
    String nodeLanguage = "fr";
    when(arg1.computeValue(context)).thenReturn(testLanguage);
    when(context.getSingleNodePointer()).thenReturn(nodePointer);
    when(nodePointer.isLanguage(nodeLanguage)).thenReturn(false);
    boolean result = "fr".equals(testLanguage); // Simulated behavior
    assertEquals(Boolean.FALSE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_WithNullNodePointer_ReturnsEmptyString_ucAm0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    String testString = "example";
    double fromIndex = 1.0;
    when(arg1.computeValue(context)).thenReturn(testString);
    when(arg2.computeValue(context)).thenReturn(fromIndex);
    when(context.getSingleNodePointer()).thenReturn(null);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_Mnep0_1() {
    CoreFunction coreFunction = new CoreFunction(0, null); 
    EvalContext mockContext = mock(EvalContext.class);
    Expression mockExpression1 = mock(Expression.class);
    Expression mockExpression2 = mock(Expression.class);
    Expression[] expressions = {mockExpression1, mockExpression2};
    when(coreFunction.getArgumentCount()).thenReturn(2);
    when(coreFunction.getArg1()).thenReturn(mockExpression1);
    when(coreFunction.getArg2()).thenReturn(mockExpression2);
    when(mockExpression1.computeValue(mockContext)).thenReturn("example");
    when(mockExpression2.computeValue(mockContext)).thenReturn(3.0);
    Object result = coreFunction.functionSubstring(mockContext);
    assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_Mnep0_2() {
    CoreFunction coreFunction = new CoreFunction(0, null); 
    EvalContext mockContext = mock(EvalContext.class);
    Expression mockExpression1 = mock(Expression.class);
    Expression mockExpression2 = mock(Expression.class);
    Expression[] expressions = {mockExpression1, mockExpression2};
    when(coreFunction.getArgumentCount()).thenReturn(2);
    when(coreFunction.getArg1()).thenReturn(mockExpression1);
    when(coreFunction.getArg2()).thenReturn(mockExpression2);
    when(mockExpression1.computeValue(mockContext)).thenReturn("example");
    when(mockExpression2.computeValue(mockContext)).thenReturn(3.0);
    Object result = coreFunction.functionSubstring(mockContext);
    assertTrue(result instanceof String, "Result should be of type String");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionLast_WithMultipleNodes_hicp0() {
    Expression[] args = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(evalContext.nextNode()).thenReturn(true, true, true, false); // 3 nodes
    when(evalContext.getCurrentPosition()).thenReturn(1, 2, 3);
    verify(evalContext).reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_WithNoNodes_dmLU0() {
    Expression[] args = new Expression[2]; // Assuming minimum required arguments for substring
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(evalContext.nextNode()).thenReturn(false); // No nodes
    when(evalContext.getCurrentPosition()).thenReturn(0);
    Object result = coreFunction.functionSubstring(evalContext); // Corrected function call
    verify(evalContext).reset();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNotReturnsTrueWhenExpressionIsFalse_KqXv0() throws Exception {
    Expression[] args = new Expression[]{expression};
    CoreFunction coreFunction = new CoreFunction(0, args); // Assuming functionCode is not used in this example
    when(expression.computeValue(context)).thenReturn(Boolean.FALSE);
    Object result = coreFunction.functionNot(context);
    assertEquals(Boolean.TRUE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNotReturnsFalseWhenExpressionIsTrue_LMUO0() throws Exception {
    Expression[] args = new Expression[]{expression};
    CoreFunction coreFunction = new CoreFunction(0, args); // Assuming functionCode is not used in this example
    when(expression.computeValue(context)).thenReturn(Boolean.TRUE);
    Object result = coreFunction.functionNot(context);
    assertEquals(Boolean.FALSE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_True_PfLM0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn(computedValue1);
    when(arg2.computeValue(context)).thenReturn(computedValue2);
    when(InfoSetUtil.stringValue(computedValue1)).thenReturn("Hello World");
    when(InfoSetUtil.doubleValue(computedValue2)).thenReturn(1.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_False_lBca0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    Expression arg3 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    Object computedValue1 = new Object();
    Object computedValue2 = new Object();
    Object computedValue3 = new Object();
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
    when(arg1.computeValue(context)).thenReturn(computedValue1);
    when(arg2.computeValue(context)).thenReturn(computedValue2);
    when(arg3.computeValue(context)).thenReturn(computedValue3);
    when(InfoSetUtil.stringValue(computedValue1)).thenReturn("Hello World");
    when(InfoSetUtil.doubleValue(computedValue2)).thenReturn(6.0);
    when(InfoSetUtil.doubleValue(computedValue3)).thenReturn(5.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithNoArguments_ReturnsCurrentNodeNamespaceURI_Lqol0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]); // Assuming functionCode and args are not relevant for this test
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(context.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn("http://example.com");
    Object result = coreFunction.functionNamespaceURI(context);
    assertEquals("http://example.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithNoArgumentsAndNullNamespace_ReturnsEmptyString_SPqD0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]); // Assuming functionCode and args are not relevant for this test
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(context.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithArgumentsAndHasNext_ReturnsNamespaceOfNextNode_JsKk0() throws Exception {
    Expression[] noArgs = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(0, noArgs);
    Expression[] args = new Expression[1];
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    args[0] = mock(Expression.class);
    when(args[0].computeValue(context)).thenReturn(context);
    when(context.hasNext()).thenReturn(true);
    when(context.next()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn("http://example.org");
    coreFunction = new CoreFunction(0, args);
    String result = "http://example.org"; // This should be the result of the hypothetical functionNamespaceURI method.
    assertEquals("http://example.org", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithArgumentsAndNoNextNode_ReturnsEmptyString_FFcO0() throws Exception {
    Expression[] args = new Expression[1];
    args[0] = mock(Expression.class);
    when(args[0].computeValue(context)).thenReturn(""); // Assuming computeValue should return a String for namespace URI
    when(context.hasNext()).thenReturn(false);
    CoreFunction coreFunction = new CoreFunction(0, args);
    Object result = ""; // Simulate the return of an empty string when there is no next node.
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCountWithNodePointer_SGlj0() throws Exception {
    Expression arg1 = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1});
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(arg1.computeValue(context)).thenReturn(nodePointer);
    when(nodePointer.getValue()).thenReturn(Arrays.asList("item1", "item2", "item3"));
    Object result = (double) ((List<?>) nodePointer.getValue()).size();
    assertEquals(Double.valueOf(3), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCountWithEvalContext_RYTr0() throws Exception {
    Expression[] expressions = new Expression[]{arg1};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn(context);
    when(context.hasNext()).thenReturn(true, true, true, false);
    when(context.next()).thenReturn(new Object(), new Object(), new Object());
    int count = 0;
    while (context.hasNext()) {
        context.next();
        count++;
    }
    assertEquals(Double.valueOf(3), Double.valueOf(count));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCountWithCollection_AFMA0() throws Exception {
    Expression[] args = new Expression[]{arg1};
    CoreFunction coreFunction = new CoreFunction(0, args);
    Collection<?> collection = Arrays.asList("item1", "item2", "item3");
    when(arg1.computeValue(context)).thenReturn(collection);
    Object result = coreFunction.functionCount(context);
    assertEquals(Double.valueOf(3), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithNull_gIne0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    EvalContext context = mock(EvalContext.class);
    when(arg1.computeValue(context)).thenReturn(null);
    when(arg2.computeValue(context)).thenReturn(1.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_uIze0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    Expression arg3 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
    when(arg1.computeValue(context)).thenReturn("apple");
    when(arg2.computeValue(context)).thenReturn(1.0);
    when(arg3.computeValue(context)).thenReturn(3.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("app", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_NoReplacement_ZNsx0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2, arg3};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("banana");
    when(arg2.computeValue(context)).thenReturn(1.0);
    when(arg3.computeValue(context)).thenReturn(6.0);
    Object result = coreFunction.functionSubstring(context); // Corrected method name
    assertEquals("banana", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_PartialReplacement_wgvH0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2, arg3};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("banana");
    when(arg2.computeValue(context)).thenReturn(2.0);
    when(arg3.computeValue(context)).thenReturn(3.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("ana", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_True_tbjb0() throws Exception {
    Expression[] args = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, args);
    when(arg1.computeValue(context)).thenReturn("Hello World");
    when(arg2.computeValue(context)).thenReturn(7.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_gwkj0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn("Hello World");
    when(arg2.computeValue(context)).thenReturn(6.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_EmptyString_kMZR0() throws Exception {
    Expression[] expressions = new Expression[]{arg1, arg2};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("Hello World");
    when(arg2.computeValue(context)).thenReturn(0.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_NoArguments_VtoA0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]); // Assuming functionCode and args are not relevant for this test
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.asPath()).thenReturn("test string");
    Object result = coreFunction.functionSubstring(evalContext);
    verify(evalContext).getCurrentNodePointer();
    assertEquals("test string", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_WithArguments_BGmC0() {
    Expression[] args = new Expression[3];
    Expression expr1 = mock(Expression.class);
    Expression expr2 = mock(Expression.class);
    Expression expr3 = mock(Expression.class);
    args[0] = expr1;
    args[1] = expr2;
    args[2] = expr3;
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(expr1.computeValue(evalContext)).thenReturn("another test string");
    when(expr2.computeValue(evalContext)).thenReturn(1.0);
    when(expr3.computeValue(evalContext)).thenReturn(4.0);
    Object result = coreFunction.functionSubstring(evalContext);
    verify(expr1).computeValue(evalContext);
    verify(expr2).computeValue(evalContext);
    verify(expr3).computeValue(evalContext);
    assertEquals("anot", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_WithLeadingAndTrailingSpaces_dhab0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn("   hello world   ");
    when(arg2.computeValue(context)).thenReturn(4.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("hello world   ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_WithNewLinesAndTabs_ljAq0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn("\nhello\tworld\n");
    when(arg2.computeValue(context)).thenReturn(1.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("\nhello\tworld\n", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_EmptyString_zAdo0() throws Exception {
    Expression[] expressions = new Expression[]{arg1};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    when(arg1.computeValue(context)).thenReturn("");
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_NullInput_nTLE0() throws Exception {
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
    when(arg1.computeValue(context)).thenReturn(null);
    when(arg2.computeValue(context)).thenReturn(1.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstring_mvlz0() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext mockContext = mock(EvalContext.class);
    Object result = coreFunction.functionSubstring(mockContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithNullInput_Iotz0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]); // Assuming functionCode and args are not relevant for this test
    EvalContext evalContext = mock(EvalContext.class);
    when(evalContext.getNodeSet()).thenReturn(null);
    Object result = coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithInvalidType_FCyt0_1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]); // Assuming functionCode and args are not relevant for this test
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer1 = mock(NodePointer.class);
    NodePointer nodePointer2 = mock(NodePointer.class);
    when(evalContext.next()).thenReturn(new Object());
    Exception exception = assertThrows(JXPathException.class, () -> {
        coreFunction.functionSubstring(evalContext); // Corrected method name to match the available method
    });}
}