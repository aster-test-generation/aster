/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithSpecialCharacters_uUut0() {
        ParseException parserException = new ParseException();
        String input = "Hello\nWorld\tJava\b";
        String expected = "Hello\\nWorld\\tJava\\b";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithUnicodeCharacters_vmUB2() {
        ParseException parserException = new ParseException();
        String input = "Use \u0010 and \u001F";
        String expected = "Use \\u0010 and \\u001f";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithBackslash_KaXy3() {
        ParseException parserException = new ParseException();
        String input = "Path\\to\\file";
        String expected = "Path\\\\to\\\\file";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithMultipleTokens_mFDw1_Rmrv0() {
    int[][] expectedSequences = {{1, 2}, {3}};
    String[] tokenImages = {"", "token1", "token2", "token3"};
    ParseException exception = new ParseException("Encountered \"\" at line 0, column 0.Was expecting one of:\n    token1 token2 ... \n    token3 ");
    String result = exception.getMessage();
    assertEquals("Encountered \"\" at line 0, column 0.Was expecting one of:\n    token1 token2 ... \n    token3 ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithNullTokenImage_hQLI3_BdMf0() {
    int[][] expectedSequences = {{1}};
    String[] tokenImages = {null};
    ParseException exception = new ParseException("Encountered \"null\" at line 0, column 0.Was expecting:\n    null ");
    String result = exception.getMessage();
    assertEquals("Encountered \"null\" at line 0, column 0.Was expecting:\n    null ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithLongSequence_pRVu6_EuWc0() {
    int[][] expectedSequences = {{1, 2, 3, 4, 5}};
    String[] tokenImages = {"", "one", "two", "three", "four", "five"};
    ParseException exception = new ParseException("Encountered \"\" at line 0, column 0.Was expecting:\n    one two three four five ");
    String result = exception.getMessage();
    assertEquals("Encountered \"\" at line 0, column 0.Was expecting:\n    one two three four five ", result);
}
}