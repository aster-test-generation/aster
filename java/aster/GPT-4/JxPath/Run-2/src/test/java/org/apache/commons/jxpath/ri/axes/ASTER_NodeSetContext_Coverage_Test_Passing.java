/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.BasicNodeSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeSetContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertFalse(context.setPosition(1)); 
    }// Simulate setPosition returning false}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_21() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_11() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertTrue(context.setPosition(1)); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_21() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(expectedNodePointer, result);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_1_fid1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertFalse(context.setPosition(1)); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_211() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_12() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertTrue(context.setPosition(1)); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_22() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(expectedNodePointer, result);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_1_fid2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertFalse(context.setPosition(1)); }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZjPE0_2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(null); // This line is not really needed for this test case
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertTrue(context.setPosition(1));
     } 
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidPosition_oLpn1_2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(nodeSet.getPointers()).thenReturn(Arrays.asList(expectedNodePointer));
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(expectedNodePointer, result);}

}