/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionChildNodeIterator_Test_Passing {
@Mock
    private NodePointer mockElementPointer;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private NodeTest test;
@InjectMocks
    private CollectionChildNodeIterator collectionChildNodeIterator;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator() throws Exception {
        collectionChildNodeIterator = new CollectionChildNodeIterator(null, test, false, null);
        // Setup the behavior of the mock
        when(mockElementPointer.childIterator(test, false, null)).thenReturn(mockNodeIterator);
        // Execute the method under test
        NodeIterator result = collectionChildNodeIterator.getElementNodeIterator(mockElementPointer);
        // Verify the interaction with the mock
        verify(mockElementPointer).childIterator(test, false, null);
        // Assert that the result is as expected
        assertNotNull(result, "The result should not be null.");
        assertEquals(mockNodeIterator, result, "The returned NodeIterator should be the one provided by the mock.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator_1() throws Exception {
        collectionChildNodeIterator = new CollectionChildNodeIterator(null, test, false, null);
        // Setup the behavior of the mock
        when(mockElementPointer.childIterator(test, false, null)).thenReturn(mockNodeIterator);
        // Execute the method under test
        NodeIterator result = collectionChildNodeIterator.getElementNodeIterator(mockElementPointer);
        // Verify the interaction with the mock
        verify(mockElementPointer).childIterator(test, false, null);
        // Assert that the result is as expected
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator_2() throws Exception {
        collectionChildNodeIterator = new CollectionChildNodeIterator(null, test, false, null);
        // Setup the behavior of the mock
        when(mockElementPointer.childIterator(test, false, null)).thenReturn(mockNodeIterator);
        // Execute the method under test
        NodeIterator result = collectionChildNodeIterator.getElementNodeIterator(mockElementPointer);
        // Verify the interaction with the mock
        verify(mockElementPointer).childIterator(test, false, null);
        // Assert that the result is as expected
        assertEquals(mockNodeIterator, result, "The returned NodeIterator should be the one provided by the mock.");}
}