/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionAndServletContext_Test_Passing {
private HttpSession session;
private ServletContext context;
private HttpSessionAndServletContext httpsessionandservletcontext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSession() throws Exception {
        session = mock(HttpSession.class);
        context = mock(ServletContext.class);
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpsessionandservletcontext.getSession();
        assertEquals(session, result, "The getSession method should return the session that was set in constructor.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSession_ozYF0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext mockContext = mock(ServletContext.class);
    HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(mockSession, mockContext);
    HttpSession result = httpSessionAndServletContext.getSession();
    assertEquals(mockSession, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletContext() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(null, context);
        // Act
        ServletContext retrievedContext = httpsessionandservletcontext.getServletContext();
        // Assert
        assertSame(context, retrievedContext, "The retrieved ServletContext should be the same as the mocked context.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletContext_lVCC0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext expectedContext = mock(ServletContext.class);
    HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(mockSession, expectedContext);
    ServletContext actualContext = httpSessionAndServletContext.getServletContext();
    assertSame(expectedContext, actualContext);
}
}