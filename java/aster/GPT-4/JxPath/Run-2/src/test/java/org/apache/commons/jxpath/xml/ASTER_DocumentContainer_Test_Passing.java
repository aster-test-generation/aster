/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.xml;
import java.net.URL;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DocumentContainer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidURL_yGGs1() {
        try {
            URL url = new URL("http://invalidurl.com");
            DocumentContainer container = new DocumentContainer(url);
            container.getValue();
            fail("Expected a JXPathException to be thrown");
        } catch (JXPathException ex) {
            assertNotNull("Exception message should not be null", ex.getMessage());
        } catch (Exception e) {
            fail("Expected a JXPathException, but got " + e.getClass().getSimpleName());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithModelAndInvalidURL_IFTg4() {
        try {
            URL url = new URL("http://invalidurl.com");
            String model = "someModel";
            DocumentContainer container = new DocumentContainer(url, model);
            container.getValue();
            fail("Expected a JXPathException to be thrown");
        } catch (JXPathException ex) {
            assertNotNull("Exception message should not be null", ex.getMessage());
        } catch (Exception e) {
            fail("Expected a JXPathException, but got " + e.getClass().getSimpleName());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithValidURL_UVpe2_hMlx0() throws Exception {
    URL url = new URL("http://example.com/valid.xml");
    DocumentContainer container = new DocumentContainer(url);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithModelAndValidURL_VeVp3_rLWc0() throws Exception {
    URL url = new URL("http://example.com/valid.xml");
    String model = "someModel";
    DocumentContainer container = new DocumentContainer(url, model);
}
}