/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointerFactory_Test_Passing {
@InjectMocks
    private VariablePointerFactory variablePointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private JXPathContext mockJXPathContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonVariableContextWrapper_IFCw2() {
        VariablePointerFactory factory = new VariablePointerFactory();
        QName qName = new QName("anyVariable");
        Object nonVariableContextObject = new Object();
        NodePointer result = factory.createNodePointer(qName, nonVariableContextObject, Locale.getDefault());
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNullObject_vwik3() {
        VariablePointerFactory factory = new VariablePointerFactory();
        QName qName = new QName("anyVariable");
        NodePointer result = factory.createNodePointer(qName, null, Locale.getDefault());
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        // Setup
        Object testObject = new Object();
        NodePointer expectedNodePointer = new VariablePointer(mockQName);
        // Configure mocks
        when(variablePointerFactory.createNodePointer(any(QName.class), any(), any())).thenReturn(expectedNodePointer);
        // Execute
        NodePointer result = variablePointerFactory.createNodePointer(mockParentNodePointer, mockQName, testObject);
        // Verify
        verify(variablePointerFactory).createNodePointer(mockQName, testObject, null);
        // Assert
        assertNotNull(result, "The result should not be null.");
        assertEquals(expectedNodePointer, result, "The returned NodePointer is not as expected.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_1() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        // Setup
        Object testObject = new Object();
        NodePointer expectedNodePointer = new VariablePointer(mockQName);
        // Configure mocks
        when(variablePointerFactory.createNodePointer(any(QName.class), any(), any())).thenReturn(expectedNodePointer);
        // Execute
        NodePointer result = variablePointerFactory.createNodePointer(mockParentNodePointer, mockQName, testObject);
        // Verify
        verify(variablePointerFactory).createNodePointer(mockQName, testObject, null);
        // Assert
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_2() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        // Setup
        Object testObject = new Object();
        NodePointer expectedNodePointer = new VariablePointer(mockQName);
        // Configure mocks
        when(variablePointerFactory.createNodePointer(any(QName.class), any(), any())).thenReturn(expectedNodePointer);
        // Execute
        NodePointer result = variablePointerFactory.createNodePointer(mockParentNodePointer, mockQName, testObject);
        // Verify
        verify(variablePointerFactory).createNodePointer(mockQName, testObject, null);
        // Assert
        assertEquals(expectedNodePointer, result, "The returned NodePointer is not as expected.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_qXAg0_DSjl0() {
    VariablePointerFactory factory = new VariablePointerFactory();
    int expected = 100; // Assuming 100 is the correct order value for the test
    assertEquals(expected, factory.getOrder());
}
}