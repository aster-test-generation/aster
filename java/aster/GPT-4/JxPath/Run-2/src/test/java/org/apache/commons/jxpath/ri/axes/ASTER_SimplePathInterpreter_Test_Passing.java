/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.JXPathContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Passing {
private SimplePathInterpreter simplePathInterpreter;
private EvalContext mockEvalContext;
private NodePointer mockRoot;
private Step[] steps;
private Expression[] predicates;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_ReturnsParentAtEndOfSteps() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        // Arrange
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        Step[] steps = new Step[1]; // Assuming Step is a class you have defined or will define
        int currentStep = 1; // Equal to steps.length to trigger the return of parent
        // Act
        NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        // Assert
        assertEquals(parent, result, "Expected the parent NodePointer to be returned when currentStep equals steps length.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointer_AtEndOfSteps_ofSl0() {
    EvalContext context = mock(EvalContext.class);
    NodePointer parent = mock(NodePointer.class);
    Step[] steps = new Step[0]; // Empty steps array
    NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, 0);
    assertEquals(parent, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleLocationPath_1() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        steps = new Step[1]; // Assuming Step is a class you have defined or will define
        steps[0] = mock(Step.class); // Mocking a single step for simplicity
        // Setup
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Action
        NodePointer result = SimplePathInterpreter.interpretSimpleLocationPath(mockEvalContext, mockRoot, steps);
        // Assertion
        // Verify interactions
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
        assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleLocationPath_2() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        steps = new Step[1]; // Assuming Step is a class you have defined or will define
        steps[0] = mock(Step.class); // Mocking a single step for simplicity
        // Setup
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Action
        NodePointer result = SimplePathInterpreter.interpretSimpleLocationPath(mockEvalContext, mockRoot, steps);
        // Assertion
        // Verify interactions
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
        assertEquals(expectedPointer, result, "The result should be the expected node pointer returned by createChild");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleExpressionPath_1() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        predicates = new Expression[0]; // Assuming Expression is an interface or class you have in your environment
        steps = new Step[0]; // Assuming Step is an interface or class you have in your environment
        // Setup the scenario
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Call the method under test
        NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(mockEvalContext, mockRoot, predicates, steps);
        // Verify the interactions and state
        // Verify that the correct methods were called with the expected parameters
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
        assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleExpressionPath_2() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        predicates = new Expression[0]; // Assuming Expression is an interface or class you have in your environment
        steps = new Step[0]; // Assuming Step is an interface or class you have in your environment
        // Setup the scenario
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Call the method under test
        NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(mockEvalContext, mockRoot, predicates, steps);
        // Verify the interactions and state
        // Verify that the correct methods were called with the expected parameters
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
        assertEquals(expectedPointer, result, "The returned NodePointer should match the expected one");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointer_WithPredicateName_JZqe4_zIJQ0_1() {
    EvalContext context = mock(EvalContext.class);
    NodePointer parent = mock(NodePointer.class);
    QName qName = new QName("element");
    NodeTest nodeTest = new NodeNameTest(qName);
    NameAttributeTest predicate = mock(NameAttributeTest.class);
    when(predicate.computeValue(context)).thenReturn("name");
    Step step = new Step(Compiler.AXIS_CHILD, nodeTest, new Expression[]{predicate}) {
    };
    Step[] steps = new Step[]{step};
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, parent, new Expression[]{predicate}, steps);
    assertTrue(result instanceof NullPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointer_WithPredicateName_JZqe4_zIJQ0_2() {
    EvalContext context = mock(EvalContext.class);
    NodePointer parent = mock(NodePointer.class);
    QName qName = new QName("element");
    NodeTest nodeTest = new NodeNameTest(qName);
    NameAttributeTest predicate = mock(NameAttributeTest.class);
    when(predicate.computeValue(context)).thenReturn("name");
    Step step = new Step(Compiler.AXIS_CHILD, nodeTest, new Expression[]{predicate}) {
    };
    Step[] steps = new Step[]{step};
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, parent, new Expression[]{predicate}, steps);
    assertEquals("name", ((NullPropertyPointer) result).getPropertyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleLocationPath() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        steps = new Step[1]; // Assuming Step is a class you have defined or will define
        steps[0] = mock(Step.class); // Mocking a single step for simplicity
        // Setup
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Action
        NodePointer result = SimplePathInterpreter.interpretSimpleLocationPath(mockEvalContext, mockRoot, steps);
        // Assertion
        assertNotNull(result, "Result should not be null");
        assertEquals(expectedPointer, result, "The result should be the expected node pointer returned by createChild");
        // Verify interactions
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleExpressionPath() throws Exception {
        simplePathInterpreter = new SimplePathInterpreter();
        mockEvalContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        predicates = new Expression[0]; // Assuming Expression is an interface or class you have in your environment
        steps = new Step[0]; // Assuming Step is an interface or class you have in your environment
        // Setup the scenario
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
        // Call the method under test
        NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(mockEvalContext, mockRoot, predicates, steps);
        // Verify the interactions and state
        assertNotNull(result, "Result should not be null");
        assertEquals(expectedPointer, result, "The returned NodePointer should match the expected one");
        // Verify that the correct methods were called with the expected parameters
        verify(mockRoot).createChild(any(JXPathContext.class), any(QName.class), anyInt());
    }
}