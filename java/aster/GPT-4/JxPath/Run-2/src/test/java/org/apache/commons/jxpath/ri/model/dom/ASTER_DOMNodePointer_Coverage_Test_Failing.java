/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private NamespaceResolver nsResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_gZQX0() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNamespaceURI()).thenReturn("http://example.com/namespace");
        DOMNodePointer domNodePointer = new DOMNodePointer(mockNode, Locale.getDefault());
        String namespaceURI = domNodePointer.getNamespaceURI();
        assertEquals("http://example.com/namespace", namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNodeInstance_pBbe1() {
        Node node = mock(Node.class);
        Node valueNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_Lcju3() {
        Node node = mock(Node.class);
        Element valueNode = mock(Element.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithChildNodes_ftjN4() {
        Node node = mock(Node.class);
        Element valueNode = mock(Element.class);
        NodeList nodeList = mock(NodeList.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(valueNode.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(1);
        when(nodeList.item(anyInt())).thenReturn(mock(Node.class));
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithChildNodesLoop_taAn5() {
        Node node = mock(Node.class);
        Element valueNode = mock(Element.class);
        NodeList nodeList = mock(NodeList.class);
        Node childNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(valueNode.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(1);
        when(nodeList.item(0)).thenReturn(childNode);
        when(childNode.cloneNode(true)).thenReturn(childNode);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueAppendChildClone_mdpO6() {
        Node node = mock(Node.class);
        Node valueNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(valueNode.cloneNode(true)).thenReturn(valueNode);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyString_Owut9() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        domNodePointer.setValue("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullString_ADKG10() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        domNodePointer.setValue(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNodeNotTextOrCData_ozUP11() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue("Hello");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_WHOLE_COLLECTION_OyAN0() {
        JXPathContext context = mock(JXPathContext.class);
        Node node = mock(Node.class);
        QName name = new QName("test");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NodePointer result = domNodePointer.createChild(context, name, DOMNodePointer.WHOLE_COLLECTION);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndDataIsNull_bMrk1() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment commentNode = mock(Comment.class);
        when(commentNode.getData()).thenReturn(null);
        when(node).thenReturn(commentNode);
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Expected empty string when comment data is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndDataIsNotEmpty_yKvB2() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment commentNode = mock(Comment.class);
        when(commentNode.getData()).thenReturn(" Some data ");
        when(node).thenReturn(commentNode);
        Object result = domNodePointer.getValue();
        assertEquals("Some data", result, "Expected trimmed data from comment node");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsNotCommentNode_KqGW3() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeValue()).thenReturn("Element value");
        Object result = domNodePointer.getValue();
        assertEquals("Element value", result, "Expected node value when node is not a comment node");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndDataIsEmpty_tHYq4() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment commentNode = mock(Comment.class);
        when(commentNode.getData()).thenReturn("");
        when(node).thenReturn(commentNode);
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Expected empty string when comment data is empty");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NodeNotElement_wrEw0() {
        Node node = mock(Node.class);
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NodePointer result = domNodePointer.createAttribute(context, name);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_ValidNamespace_nOGm2() {
        Element element = mock(Element.class);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("knownPrefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NamespaceResolver nsResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
        when(nsResolver.getNamespaceURI("knownPrefix")).thenReturn("http://example.com");
        when(element.getPrefix()).thenReturn("knownPrefix");
        domNodePointer.createAttribute(context, name);
        verify(element).setAttributeNS("http://example.com", "knownPrefix:localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NoNamespace_OFzh3() {
        Element element = mock(Element.class);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(element.hasAttribute("localName")).thenReturn(false);
        domNodePointer.createAttribute(context, name);
        verify(element).setAttribute("localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_AttributeAlreadyExists_nFVg4() {
        Element element = mock(Element.class);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(element.hasAttribute("localName")).thenReturn(true);
        domNodePointer.createAttribute(context, name);
        verify(element, never()).setAttribute("localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_ReturnsNodePointer_gPvx5() {
        Element element = mock(Element.class);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NodeIterator nodeIterator = mock(NodeIterator.class);
        when(domNodePointer.attributeIterator(name)).thenReturn(nodeIterator);
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        NodePointer result = domNodePointer.createAttribute(context, name);
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeNoNamespace_tNIT2() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeNoNamespaceWithPrefix_khNy3() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns:prefix")).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeNoNamespaceWithPrefixFound_bMeM4() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns:prefix")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeNoNamespaceWithPrefixInParent_GSbp5() {
        Element element = mock(Element.class);
        Element parentElement = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getParentNode()).thenReturn(parentElement);
        when(parentElement.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parentElement.getAttributeNode("xmlns:prefix")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeNoNamespaceWithPrefixNotFoundInParent_HCkJ6() {
        Element element = mock(Element.class);
        Element parentElement = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getParentNode()).thenReturn(parentElement);
        when(parentElement.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parentElement.getAttributeNode("xmlns:prefix")).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValue_qaTF0() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        DOMNodePointer childPointer = new DOMNodePointer(node, locale);
        when(domNodePointer.createChild(context, name, index)).thenReturn(childPointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(childPointer).setValue(value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullValue_babH1() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        DOMNodePointer childPointer = new DOMNodePointer(node, locale);
        when(domNodePointer.createChild(context, name, index)).thenReturn(childPointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(childPointer).setValue(value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WildcardAndMatchingLocalName_ReturnsTrue_EmHj4() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(DOMNodePointer.getLocalName(node)).thenReturn("test");
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("test"));
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WildcardAndNonMatchingLocalName_ReturnsFalse_FJIo5() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(DOMNodePointer.getLocalName(node)).thenReturn("test");
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("notTest"));
        assertFalse(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_yrAp11() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("target");
        when(node.getAttributes()).thenReturn(null); // Assuming this method is used to get the target
        assertTrue(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTest_NonMatchingTarget_ReturnsFalse_EJMb12() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("notTarget");
        when(node.getAttributes()).thenReturn(null); // Assuming this method is used to get the target
        assertFalse(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndEmptyBuffer_XVMX10_oxNz0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("");
    Element mockElement = mock(Element.class);
    when(mockElement.getNodeName()).thenReturn("elementName");
    when(mockElement.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, mockElement);
    String path = domNodePointer.asPath();
    assertEquals("elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNoNamespace_dxZz1_fid1() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNamespaceURI()).thenReturn(null);
        String path = domNodePointer.asPath();
        assertEquals("/parent/path/elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeWithNamespace_Xfhh2_fid1() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
        String path = domNodePointer.asPath();
        assertEquals("/parent/path/ns:elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithTextNode_jnKh3_Daed0_fid1() {
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/text()[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithCDATASectionNode_fQUO4_ubcg0_fid1() {
    when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/text()[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullId_cJrs7_skqA0_fid1() {
    QName parentQName = new QName("parent");
    VariablePointer parentPointer = new VariablePointer(parentQName);
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parentPointer, node);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn(null);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndSlashAtEndOfBuffer_aktb11_pxef0_fid1() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path/");
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, mock(Node.class));
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndEmptyBuffer_XVMX10_oxNz0_fid1() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("");
    Node mockNode = mock(Node.class);
    when(mockNode.getNodeName()).thenReturn("elementName");
    when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, mockNode);
    String path = domNodePointer.asPath();
    assertEquals("elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNoSlashAtEndOfBuffer_hFMv12_WTfY0_fid1() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path");
    Node node = mock(Node.class);
    when(node.getNodeName()).thenReturn("elementName");
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefix_SMMR14_iQim0_fid1() {
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    domNodePointer.setNamespaceResolver(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/ns:elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefixAndSlashAtEndOfBuffer_GiYX15_TpbX0_fid1() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path/");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(node.getLocalName()).thenReturn("elementName");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/ns:elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefixAndNoSlashAtEndOfBuffer_nJcW16_qQHd0_fid1() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(node.getLocalName()).thenReturn("elementName");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/ns:elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNullPrefixAndNoSlashAtEndOfBuffer_RcdA17_qRTH0_fid1() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn(null);
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/node()[1]", path);
}
}