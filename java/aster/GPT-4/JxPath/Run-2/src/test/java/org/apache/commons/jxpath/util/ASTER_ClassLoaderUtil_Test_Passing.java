/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassLoaderUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithArrayNotation_RhDr0() throws ClassNotFoundException {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    String className = "int[]";
    boolean initialize = true;
    Class result = ClassLoaderUtil.getClass(classLoader, className, initialize);
    assertEquals(int[].class, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithRegularClass_DoPG1() throws ClassNotFoundException {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    String className = "java.lang.String";
    boolean initialize = false;
    Class result = ClassLoaderUtil.getClass(classLoader, className, initialize);
    assertEquals(String.class, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithExistingClass_zxax0() {
        try {
            Class<?> clazz = ClassLoaderUtil.getClass("java.lang.String", true);
            assertNotNull(clazz);
            assertEquals(String.class, clazz);
        } catch (ClassNotFoundException e) {
            fail("Class should be found");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonExistingClass_waQy1() {
        try {
            ClassLoaderUtil.getClass("com.nonexistent.FakeClass", true);
            fail("ClassNotFoundException expected");
        } catch (ClassNotFoundException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithValidClassName_KVmW0_1() throws ClassNotFoundException {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    String className = "java.lang.String";
    Class<?> result = ClassLoaderUtil.getClass(classLoader, className);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithValidClassName_KVmW0_2() throws ClassNotFoundException {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    String className = "java.lang.String";
    Class<?> result = ClassLoaderUtil.getClass(classLoader, className);
    assertEquals(String.class, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithValidClassName_etVI0_1() throws ClassNotFoundException {
    Class<?> result = ClassLoaderUtil.getClass("java.lang.String");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithValidClassName_etVI0_2() throws ClassNotFoundException {
    Class<?> result = ClassLoaderUtil.getClass("java.lang.String");
    assertEquals(String.class, result);}
}