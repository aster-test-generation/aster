/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointerFactory_Test_Passing {
private ContainerPointerFactory containerPointerFactory;
@Mock
    private NodePointer parentMock;
@Mock
    private QName nameMock;
@Mock
    private Container containerMock;
@Mock
    private ContainerPointer containerPointerMock;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_kxVs0() {
    ContainerPointerFactory factory = new ContainerPointerFactory();
    int expectedOrder = ContainerPointerFactory.CONTAINER_POINTER_FACTORY_ORDER;
    assertEquals(expectedOrder, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithContainerBean_ReturnsContainerPointer_1() {
        containerPointerFactory = new ContainerPointerFactory();
        // Arrange
        when(parentMock.getLocale()).thenReturn(Locale.ENGLISH);
        when(containerPointerMock.getParent()).thenReturn(parentMock);
        // Act
        NodePointer result = containerPointerFactory.createNodePointer(parentMock, nameMock, containerMock);
        // Assert
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithContainerBean_ReturnsContainerPointer_2() {
        containerPointerFactory = new ContainerPointerFactory();
        // Arrange
        when(parentMock.getLocale()).thenReturn(Locale.ENGLISH);
        when(containerPointerMock.getParent()).thenReturn(parentMock);
        // Act
        NodePointer result = containerPointerFactory.createNodePointer(parentMock, nameMock, containerMock);
        // Assert
        assertTrue(result instanceof ContainerPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithContainerBean_ReturnsContainerPointer_3() {
        containerPointerFactory = new ContainerPointerFactory();
        // Arrange
        when(parentMock.getLocale()).thenReturn(Locale.ENGLISH);
        when(containerPointerMock.getParent()).thenReturn(parentMock);
        // Act
        NodePointer result = containerPointerFactory.createNodePointer(parentMock, nameMock, containerMock);
        // Assert
        assertEquals(parentMock, result.getParent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithNonContainerBean_ReturnsNull() {
        containerPointerFactory = new ContainerPointerFactory();
        // Arrange
        Object nonContainerBean = new Object();
        // Act
        NodePointer result = containerPointerFactory.createNodePointer(parentMock, nameMock, nonContainerBean);
        // Assert
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonContainer_zytG1_lSuR0() {
    ContainerPointerFactory factory = new ContainerPointerFactory();
    QName name = new QName("test");
    Object nonContainer = new Object();
    Locale locale = Locale.getDefault();
    NodePointer parent = null; // Assuming parent can be null for this test
    NodePointer result = factory.createNodePointer(parent, name, nonContainer);
    assertNull(result, "Expected null NodePointer for non-Container input");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_WithContainerBean_ReturnsContainerPointer() {
        containerPointerFactory = new ContainerPointerFactory();
        // Arrange
        when(parentMock.getLocale()).thenReturn(Locale.ENGLISH);
        when(containerPointerMock.getParent()).thenReturn(parentMock);
        // Act
        NodePointer result = containerPointerFactory.createNodePointer(parentMock, nameMock, containerMock);
        // Assert
        assertNotNull(result);
        assertTrue(result instanceof ContainerPointer);
        assertEquals(parentMock, result.getParent());
    }
}