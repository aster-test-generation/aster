/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Passing {
@Mock
    private DOMNodePointer mockParent;
@Mock
    private NodeTypeTest mockNodeTest;
@InjectMocks
    private JDOMNodeIterator jdomNodeIterator;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private Object child;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        // Initialize JDOMNodeIterator with mocks and default values
        jdomNodeIterator = new JDOMNodeIterator(mockParent, mockNodeTest, false, null);
        // Since position is initialized to 0 and there are no methods to change it in the provided code,
        // we expect getPosition to return 0.
        int expectedPosition = 0;
        int actualPosition = jdomNodeIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_IncreasePosition_Success_ObdS0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    int newPosition = 5;
    boolean result = jdomNodeIterator.setPosition(newPosition);
    assertTrue(result, "setPosition should return true when able to reach the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_IncreasePosition_Fail_hQSN0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    for (int i = 0; i < 4; i++) {
        jdomNodeIterator.getNodePointer(); // Simulating traversal
    }
    boolean result = jdomNodeIterator.setPosition(5);
    assertFalse(result, "setPosition should return false when unable to reach the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_DecreasePosition_Success_nLgg0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    jdomNodeIterator.setPosition(5); // Set an initial position
    int newPosition = 2;
    boolean result = jdomNodeIterator.setPosition(newPosition);
    assertTrue(result, "setPosition should return true when able to reach the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_DecreasePosition_Fail_eomK0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    jdomNodeIterator.setPosition(5); // Set an initial position
    int newPosition = 2;
    boolean result = jdomNodeIterator.setPosition(newPosition);
    assertFalse(result, "setPosition should return false when unable to reach the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_InitialCall_ReturnsNull_iHdc0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    NodeTypeTest nodeTest = mock(NodeTypeTest.class);
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    when(jdomNodeIterator.setPosition(1)).thenReturn(false);
    NodePointer result = jdomNodeIterator.getNodePointer();
    assertNull(result, "Expected getNodePointer to return null when setPosition returns false");
}
}