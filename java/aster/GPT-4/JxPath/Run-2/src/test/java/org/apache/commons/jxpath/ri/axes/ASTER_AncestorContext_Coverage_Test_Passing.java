/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AncestorContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ResetCalled_fcBc0() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(5);
        doCallRealMethod().when(context).setPosition(anyInt());
        doNothing().when(context).reset();
        context.setPosition(3);
        verify(context).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_NoResetCalled_CnFW1() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(2);
        doCallRealMethod().when(context).setPosition(anyInt());
        doNothing().when(context).reset();
        context.setPosition(5);
        verify(context, never()).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_WhileLoopExecutes_pqoF2() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(1, 2, 3);
        when(context.nextNode()).thenReturn(true);
        doCallRealMethod().when(context).setPosition(anyInt());
        context.setPosition(3);
        verify(context, times(2)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_WhileLoopExitsFalse_ikxY3() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(1);
        when(context.nextNode()).thenReturn(false);
        doCallRealMethod().when(context).setPosition(anyInt());
        boolean result = context.setPosition(3);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_WhileLoopExitsTrue_iOQn4() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(1, 2, 3);
        when(context.nextNode()).thenReturn(true);
        doCallRealMethod().when(context).setPosition(anyInt());
        boolean result = context.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ExactPosition_qGFF5() {
        AncestorContext context = mock(AncestorContext.class);
        when(context.getCurrentPosition()).thenReturn(3);
        doCallRealMethod().when(context).setPosition(anyInt());
        boolean result = context.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetCallsSuperReset_aArI0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        ancestorContext.reset();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_IncludeSelf_True_NodeTestPasses_DXhR0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
        verify(currentNodePointer, times(1)).testNode(nodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_IncludeSelf_False_rrzH1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
        verify(currentNodePointer, never()).testNode(nodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ParentPointerNull_FCAA2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(null);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode(); // to set started and move past includeSelf
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTestFailsThenPasses_saZR3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        NodePointer parentPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // to set started
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
        verify(parentPointer, times(1)).testNode(nodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTestFailsContinuously_KdHY4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        NodePointer parentPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // to set started
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_MultipleLevels_NodeTestPassesEventually_Hwcj5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        NodePointer parentPointer = mock(NodePointer.class);
        NodePointer grandParentPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(parentPointer.getImmediateParentPointer()).thenReturn(grandParentPointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.testNode(nodeTest)).thenReturn(false);
        when(grandParentPointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // to set started
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
        verify(grandParentPointer, times(1)).testNode(nodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_AllNodesFail_NodeTest_edWL6() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        NodePointer parentPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode(); // to set started and include self
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_True_NodeTestFails_aRCQ7() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(false);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
        verify(currentNodePointer, times(1)).testNode(nodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncludeSelf_True_NodeTestPassesThenFails_dKas8() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer currentNodePointer = mock(NodePointer.class);
        NodePointer parentPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        when(currentNodePointer.getImmediateParentPointer()).thenReturn(parentPointer);
        when(parentPointer.testNode(nodeTest)).thenReturn(false);
        when(parentPointer.getImmediateParentPointer()).thenReturn(null);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        ancestorContext.nextNode(); // to set started and include self
        boolean result = ancestorContext.nextNode();
        assertFalse(result);
    }
}