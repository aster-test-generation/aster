/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Failing {
private NodePointer valuePointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DocumentContainer documentContainerMock;
@InjectMocks
    private ContainerPointer containerPointer;
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private Container container;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_vNfn0() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_GTPG1() {
        DocumentContainer container1 = new DocumentContainer(null);
        ContainerPointer pointer1 = new ContainerPointer(container1, Locale.getDefault());
        ContainerPointer pointer2 = new ContainerPointer(container1, Locale.getDefault());
        assertTrue(pointer1.equals(pointer2) && pointer2.equals(pointer1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_IYpG2() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ycqT3() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
        Object other = new Object();
        assertFalse(pointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentContainer_UzTQ4() {
        DocumentContainer container1 = new DocumentContainer(null);
        DocumentContainer container2 = new DocumentContainer(null);
        ContainerPointer pointer1 = new ContainerPointer(container1, Locale.getDefault());
        ContainerPointer pointer2 = new ContainerPointer(container2, Locale.getDefault());
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithEmptyCollection_qLbv0() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer cp = new ContainerPointer(container, Locale.getDefault());
        assertFalse(cp.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNonEmptyCollection_ykVb1() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer cp = new ContainerPointer(container, Locale.getDefault());
        assertTrue(cp.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WithValidIndex() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        // Setup
        Object expectedValue = new Object();
        when(containerPointer.getBaseValue()).thenReturn(new Object[]{expectedValue});
        when(containerPointer.getLength()).thenReturn(1);
        when(containerPointer.getIndex()).thenReturn(0);
        // Execution
        Object result = containerPointer.getImmediateNode();
        // Verification
        assertEquals(expectedValue, result);
        verify(containerPointer, times(1)).getBaseValue();
        verify(containerPointer, times(1)).getLength();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WithInvalidIndex() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        // Setup
        when(containerPointer.getBaseValue()).thenReturn(new Object[]{});
        when(containerPointer.getLength()).thenReturn(0);
        when(containerPointer.getIndex()).thenReturn(-1);
        // Execution
        Object result = containerPointer.getImmediateNode();
        // Verification
        assertNull(result);
        verify(containerPointer, times(1)).getBaseValue();
        verify(containerPointer, times(1)).getLength();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WithWholeCollection() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        // Setup
        Object expectedValue = new Object();
        when(containerPointer.getBaseValue()).thenReturn(expectedValue);
        when(containerPointer.getIndex()).thenReturn(ContainerPointer.WHOLE_COLLECTION);
        // Execution
        Object result = containerPointer.getImmediateNode();
        // Verification
        assertEquals(expectedValue, result);
        verify(containerPointer, times(1)).getBaseValue();
        verify(containerPointer, never()).getLength();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() throws Exception {
        // Mocking or creating instances of dependencies if needed
        // Since isContainer() does not interact with any fields or methods of other objects,
        // we can instantiate ContainerPointer without any mocks.
        DocumentContainer mockDocumentContainer = new DocumentContainer(null); // URL is not used, so null is okay for this test
        containerPointer = new ContainerPointer(mockDocumentContainer, null); // Locale is not used, so null is okay for this test
        // Act
        boolean result = containerPointer.isContainer();
        // Assert
        assertTrue(result, "isContainer should always return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContainer_DjEg0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    assertTrue(containerPointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_cltN0() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
        NodePointer result = containerPointer.namespacePointer("http://example.com/ns");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_OxGM0() {
    ContainerPointer containerPointer = new ContainerPointer(new DocumentContainer(null), Locale.getDefault());
    String result = containerPointer.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNull_kMsn0() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
        int length = containerPointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNotNull_nssO1() {
        DocumentContainer container = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
        int expectedLength = 5; // Mocked expected length
        int length = containerPointer.getLength();
        assertEquals(expectedLength, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WhenBaseValueIsNotNull_mkhy0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    Object baseValue = new Object();
    when(mockDomNodePointer.getBaseValue()).thenReturn(baseValue);
    int expectedLength = 5;
    assertEquals(expectedLength, containerPointer.getLength(), "Length should match the length of the base value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_WhenValuePointerIsNull_DsLZ0_ACZM0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    NodePointer result = containerPointer.getImmediateValuePointer();
    assertNotNull(result, "ValuePointer should not be null after method call");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_WhenValuePointerIsNotNull_kiyQ1_AUWy0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    NodePointer firstCall = containerPointer.getImmediateValuePointer();
    NodePointer secondCall = containerPointer.getImmediateValuePointer();
    assertSame(firstCall, secondCall, "Subsequent calls should return the same NodePointer instance");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_GlKI0_fid3() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    NodeIterator mockNodeIterator = mock(NodeIterator.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    when(mockDomNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
    NodeIterator result = containerPointer.namespaceIterator();
    verify(mockDomNodePointer).namespaceIterator();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WhenBaseValueIsNull_dRoy0_fid3() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    when(mockDomNodePointer.getBaseValue()).thenReturn(null);
    assertEquals(1, containerPointer.getLength(), "Length should be 1 when base value is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WhenBaseValueIsNotNull_mkhy0_fid3() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    Object baseValue = new Object();
    when(mockDomNodePointer.getBaseValue()).thenReturn(baseValue);
    when(ValueUtils.getLength(baseValue)).thenReturn(5);
    assertEquals(5, containerPointer.getLength(), "Length should match the length of the base value");
}
}