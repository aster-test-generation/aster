/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
private JDOMNodePointer jdomNodePointer3;
@Mock
    private Element parentElement;
@Mock
    private Namespace mockNamespace;
@Mock
    private NodePointer childNodePointer;
@Mock
    private Text text;
@Mock
    private Comment comment;
@Mock
    private NodePointer pointer;
@Mock
    private QName name;
private JDOMNodePointer jdomNodePointer2;
@Mock
    private JDOMNodePointer jdomnodepointer;
@Mock
    private JDOMNodePointer parent;
@Mock
    private Element element;
@Mock
    private Attribute attribute1;
@Mock
    private Attribute attribute2;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
@InjectMocks
    private JDOMNodePointer jdomNodePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private Object node;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private NodeIterator nodeIterator;
@Mock
    private NodePointer nodePointer;
private QName qName;
private final int index = 0;
private Locale locale;
@Mock
    private ProcessingInstruction processingInstruction;
private JDOMNodePointer jdomNodePointerElement;
private JDOMNodePointer jdomNodePointerProcessingInstruction;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private NodePointer mockStartWith;
@Mock
    private Locale mockLocale;
private Element mockElement;
private Document mockDocument;
@Mock
    private NamespaceResolver namespaceResolver;
@Mock
    private Object node1;
@Mock
    private Object node2;
private JDOMNodePointer jdomNodePointer1;
    private String id;
    private NamespaceResolver localNamespaceResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SameNode() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(pointer1.getBaseValue()).thenReturn(attribute1);
        when(pointer2.getBaseValue()).thenReturn(attribute2);
        when(pointer1.getBaseValue()).thenReturn(attribute1);
        when(pointer2.getBaseValue()).thenReturn(attribute1);
        int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes_1() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(pointer1.getBaseValue()).thenReturn(attribute1);
        when(pointer2.getBaseValue()).thenReturn(attribute2);
        List<Attribute> attributes = Arrays.asList(attribute1, attribute2);
        when(element.getAttributes()).thenReturn(attributes);
        int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
        result = jdomNodePointer.compareChildNodePointers(pointer2, pointer1);
        assertTrue(result < 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes_2() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(pointer1.getBaseValue()).thenReturn(attribute1);
        when(pointer2.getBaseValue()).thenReturn(attribute2);
        List<Attribute> attributes = Arrays.asList(attribute1, attribute2);
        when(element.getAttributes()).thenReturn(attributes);
        int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
        result = jdomNodePointer.compareChildNodePointers(pointer2, pointer1);
        assertTrue(result > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithText_Lwjt0() {
        Object node = new Text("Initial");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Updated Text");
        assertEquals("Updated Text", ((Text) node).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyText_lfEd1() {
        Object node = new Text("Initial");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("");
        assertTrue(((Text) node).getText().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_pQjs2() {
        Object node = new Element("root");
        Element valueElement = new Element("child");
        valueElement.setText("Child Text");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertEquals("Child Text", ((Element) node).getChild("child").getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument_GaXg3() {
        Object node = new Element("root");
        Document valueDocument = new Document(new Element("docRoot"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertNotNull(((Element) node).getChild("docRoot"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_aNDp4() {
        Object node = new Element("root");
        CDATA cdata = new CDATA("CDATA content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertEquals("CDATA content", ((Element) node).getContent(0).getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction_girr5() {
        Object node = new Element("root");
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(pi);
        assertEquals("data", ((ProcessingInstruction) ((Element) node).getContent(0)).getData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment_kRNE6() {
        Object node = new Element("root");
        Comment comment = new Comment("Comment content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(comment);
        assertEquals("Comment content", ((Comment) ((Element) node).getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullString_hpGn7() {
        Object node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(null);
        assertTrue(((Element) node).getContent().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_sRDR8() {
        Object node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Non-empty string");
        assertEquals("Non-empty string", ((Text) ((Element) node).getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyElementContent_zEKx9() {
        Object node = new Element("root");
        Element valueElement = new Element("emptyChild");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertTrue(((Element) node).getContent().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentContent_qmKf10() {
        Object node = new Element("root");
        Document valueDocument = new Document();
        valueDocument.addContent(new Element("docChild"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertNotNull(((Element) node).getChild("docChild"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithTextObject_pivY11() {
        Object node = new Element("root");
        Text text = new Text("Text content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(text);
        assertEquals("Text content", ((Text) ((Element) node).getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_qNZx0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = 0;
    NodePointer result = nodePointer.createChild(context, name, index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithInvalidIndex_rzkr1_1() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = -1;
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNullContext_FCJL2() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = null;
    QName name = new QName("testNamespace", "testNode");
    int index = 0;
    Exception exception = assertThrows(NullPointerException.class, () -> {
        nodePointer.createChild(context, name, index);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithWholeCollectionIndex_wALf3() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = Integer.MIN_VALUE; // Assuming WHOLE_COLLECTION is Integer.MIN_VALUE
    NodePointer result = nodePointer.createChild(context, name, index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNonExistentNamespace_BbDF4_1() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("nonExistentPrefix", "testNode");
    int index = 0;
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithHighIndex_hZxv5_1() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = 1000; // High index to test boundary conditions
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Mocking the node object since JDOMNodePointer expects an Object as node
        Object node = new Object();
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with mocked node and default locale
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Since isCollection() always returns false, we assert that it returns false
        assertFalse(jdomNodePointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_UGpS0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    assertFalse(jDOMNodePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        node = new Object(); // Assuming node is just an Object for simplicity
        jdomNodePointer = new JDOMNodePointer(node, null);
        Object result = jdomNodePointer.getImmediateNode();
        assertEquals(node, result, "The returned node should be the same as the one set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_iUvN0() {
    Object expectedNode = new Object();
    Locale locale = new Locale("en");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(expectedNode, locale);
    Object resultNode = jDOMNodePointer.getImmediateNode();
    assertEquals(expectedNode, resultNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        // Setup the behavior of the mock
        when(node.hashCode()).thenReturn(12345);
        // Execute the method on the class under test
        int hashCode = jdomNodePointer.hashCode();
        // Assert the expected result
        assertEquals(12345, hashCode, "The hashCode method should return the hash code of the node object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_CuoE0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    int expectedHashCode = node.hashCode();
    int actualHashCode = jDOMNodePointer.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        Object node = new Object(); // Assuming Object is a placeholder for a specific node type
        locale = Locale.getDefault();
        jdomNodePointer = new JDOMNodePointer(node, locale);
        QName qName = mock(QName.class); // Mocking QName since its implementation is not relevant for this test
        NodeIterator result = jdomNodePointer.attributeIterator(qName);
        assertTrue(result instanceof JDOMAttributeIterator, "The returned object should be an instance of JDOMAttributeIterator");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_QZRZ0() {
    Locale locale = new Locale("en", "US");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    QName qName = new QName("testPrefix", "testLocalName");
    NodeIterator result = jDOMNodePointer.attributeIterator(qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_1() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerElement.getName();
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_2() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerElement.getName();
        assertEquals("elementName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_1() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerProcessingInstruction.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_2() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerProcessingInstruction.getName();
        assertEquals("targetName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_ElementWithNonNullNamespace_ryNS0() {
    Element element = mock(Element.class);
    when(element.getNamespaceURI()).thenReturn("http://example.com/ns");
    JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
    String result = pointer.getNamespaceURI();
    assertEquals("http://example.com/ns", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithPrefix_QKEa0() {
        Element element = new Element("testElement", "ns", "http://example.com");
        String result = JDOMNodePointer.getPrefix(element);
        assertEquals("ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithoutPrefix_LVZF1() {
        Element element = new Element("testElement");
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_AttributeWithoutPrefix_ClDf3() {
        Attribute attribute = new Attribute("testAttribute", "value");
        String result = JDOMNodePointer.getPrefix(attribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullElement_Umhz4() {
        Element element = null;
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullAttribute_JVKE5() {
        Attribute attribute = null;
        String result = JDOMNodePointer.getPrefix(attribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NonElementNonAttributeObject_yuWm6() {
        Object nonElementNonAttribute = new Object();
        String result = JDOMNodePointer.getPrefix(nonElementNonAttribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking or creating a simple instance of Object and Locale as they are required for JDOMNodePointer constructor
        Object node = new Object();
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with a simple node and locale
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Since getLength method returns a constant value of 1, we assert that this is indeed the case
        assertEquals(1, jdomNodePointer.getLength(), "The length should always be 1.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_OeIi0() {
    Object node = new Object();
    Locale locale = new Locale("en");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    int length = jDOMNodePointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_1() throws Exception {
        jdomNodePointer = new JDOMNodePointer(new Object(), mockLocale);
        NodeIterator result = jdomNodePointer.namespaceIterator();
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_2() throws Exception {
        jdomNodePointer = new JDOMNodePointer(new Object(), mockLocale);
        NodeIterator result = jdomNodePointer.namespaceIterator();
        assertTrue(result instanceof JDOMNamespaceIterator, "The result should be an instance of JDOMNamespaceIterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_fQLr0() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodeIterator result = jDOMNodePointer.namespaceIterator();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithElementHavingNoContent() {
        mockElement = mock(Element.class);
        mockDocument = mock(Document.class);
        // Setup for an Element node test
        jdomNodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
        when(mockElement.getContent()).thenReturn(java.util.Collections.emptyList());
        assertTrue(jdomNodePointer.isLeaf(), "Element with no content should be a leaf");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocumentHavingNoContent() {
        mockElement = mock(Element.class);
        mockDocument = mock(Document.class);
        // Setup for an Element node test
        jdomNodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        when(mockDocument.getContent()).thenReturn(java.util.Collections.emptyList());
        assertTrue(jdomNodePointer.isLeaf(), "Document with no content should be a leaf");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonElementOrDocumentNode() {
        mockElement = mock(Element.class);
        mockDocument = mock(Document.class);
        // Setup for an Element node test
        jdomNodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
        Object nonDocumentOrElementNode = new Object();
        jdomNodePointer = new JDOMNodePointer(nonDocumentOrElementNode, Locale.getDefault());
        assertTrue(jdomNodePointer.isLeaf(), "Non-Element/Document node should always be a leaf");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocument_uNzP2() {
        Document document = new Document();
        JDOMNodePointer nodePointer = new JDOMNodePointer(document, Locale.getDefault());
        assertTrue(nodePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithUnknownNamespace_1() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        QName name = new QName("unknown", "test");
        when(namespaceResolver.getNamespaceURI("unknown")).thenReturn(null);
        Exception exception = assertThrows(JXPathException.class, () -> {
            jdomNodePointer.createAttribute(context, name);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithoutNamespace() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        QName name = new QName("test");
        when(element.getAttribute("test")).thenReturn(null);
        when(jdomNodePointer.attributeIterator(name)).thenReturn(nodeIterator);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        NodePointer result = jdomNodePointer.createAttribute(context, name);
        verify(element).setAttribute("test", "");
        verify(nodeIterator).setPosition(1);
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNonExistingAttributeNoPrefix_Sgfj3() {
        Element mockElement = mock(Element.class);
        JDOMNodePointer nodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
        JXPathContext context = JXPathContext.newContext(null, mockElement);
        QName qName = new QName("localName");
        when(mockElement.getAttribute("localName")).thenReturn(null);
        NodePointer result = nodePointer.createAttribute(context, qName);
        assertNotNull(result);
        verify(mockElement).setAttribute("localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_UVGt0() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentType_JSpU1() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_Snyc2() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNodeSameClass_uuTN3() {
        Object node1 = new Object();
        Object node2 = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer1 = new JDOMNodePointer(node1, locale);
        JDOMNodePointer pointer2 = new JDOMNodePointer(node2, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithElement_LMuU0() {
        Element element = mock(Element.class);
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("", nodePointer.getValue()); // Assuming no children or text
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithComment_PCdS2() {
        Comment comment = mock(Comment.class);
        when(comment.getText()).thenReturn(" This is a comment ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertEquals("This is a comment", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithText_KcvS3() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(" Text content ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("Text content", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithProcessingInstruction_bhWU4() {
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(pi.getData()).thenReturn(" data ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(pi, Locale.getDefault());
        assertEquals("data", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTextNoTrim_RtaU5() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(" No trim ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("No trim", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTextTrim_iNPk6() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(" Trim ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("Trim", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyElement_AyBD7() {
        Element element = mock(Element.class);
        JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCommentTrim_HGEm9() {
        Comment comment = mock(Comment.class);
        when(comment.getText()).thenReturn(" Comment with spaces ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertEquals("Comment with spaces", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyText_RtmH10() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn("");
        JDOMNodePointer nodePointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullText_tVVZ11() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(null);
        JDOMNodePointer nodePointer = new JDOMNodePointer(text, Locale.getDefault());
        assertNull(nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageWithMatchingLanguage_PSlC0() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    boolean result = jDOMNodePointer.isLanguage("EN");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageWithNonMatchingLanguage_QxSD1() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    boolean result = jDOMNodePointer.isLanguage("FR");
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_1() throws Exception {
        node = mock(Object.class); // Mocking the node object since its implementation is not provided
        locale = Locale.getDefault(); // Using default locale for simplicity
        jdomNodePointer = new JDOMNodePointer(node, locale);
        String prefix = "testPrefix";
        JDOMNamespacePointer expectedPointer = new JDOMNamespacePointer(jdomNodePointer, prefix);
        NodePointer resultPointer = jdomNodePointer.namespacePointer(prefix);
        assertNotNull(resultPointer, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_2() throws Exception {
        node = mock(Object.class); // Mocking the node object since its implementation is not provided
        locale = Locale.getDefault(); // Using default locale for simplicity
        jdomNodePointer = new JDOMNodePointer(node, locale);
        String prefix = "testPrefix";
        JDOMNamespacePointer expectedPointer = new JDOMNamespacePointer(jdomNodePointer, prefix);
        NodePointer resultPointer = jdomNodePointer.namespacePointer(prefix);
        assertTrue(resultPointer instanceof JDOMNamespacePointer, "The result should be an instance of JDOMNamespacePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_3() throws Exception {
        node = mock(Object.class); // Mocking the node object since its implementation is not provided
        locale = Locale.getDefault(); // Using default locale for simplicity
        jdomNodePointer = new JDOMNodePointer(node, locale);
        String prefix = "testPrefix";
        JDOMNamespacePointer expectedPointer = new JDOMNamespacePointer(jdomNodePointer, prefix);
        NodePointer resultPointer = jdomNodePointer.namespacePointer(prefix);
        assertEquals(expectedPointer.getNamespaceURI(), resultPointer.getNamespaceURI(), "The namespace URI should match the expected value");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_ATJF0_1() {
    Object node = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = jDOMNodePointer.namespacePointer(prefix);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_ATJF0_2() {
    Object node = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = jDOMNodePointer.namespacePointer(prefix);
    assertEquals(JDOMNamespacePointer.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_ATJF0_3() {
    Object node = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = jDOMNodePointer.namespacePointer(prefix);
    assertEquals(prefix, result.getName().getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithElement_yPMN0() {
        Element element = new Element("testElement");
        String result = JDOMNodePointer.getLocalName(element);
        assertEquals("testElement", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithNonRelevantObject_HPWT2() {
        Object nonRelevantObject = new Object();
        String result = JDOMNodePointer.getLocalName(nonRelevantObject);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLanguage_IiHQ0() {
    Object node = new Object(); // Assuming node is an Object, as per JDOMNodePointer constructor
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String expectedLanguage = "en"; // Assuming 'lang' attribute is 'en'
    String actualLanguage = jDOMNodePointer.getLanguage();
    assertEquals(expectedLanguage, actualLanguage);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_STyu0() {
        Locale locale = Locale.getDefault();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        JXPathContext context = JXPathContext.newContext(new Object()); // Assuming newContext can be called like this
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        NodePointer result = jDOMNodePointer.createChild(context, name, index, value);
        assertEquals("testValue", result.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix() throws Exception {
        jdomNodePointer = new JDOMNodePointer(mockDocument, null);
        String uri = jdomNodePointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullElement() throws Exception {
        jdomNodePointer = new JDOMNodePointer(mockDocument, null);
        jdomNodePointer = new JDOMNodePointer(new Object(), null); // Not a Document or Element
        assertNull(jdomNodePointer.getNamespaceURI("testPrefix"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNamespace() throws Exception {
        jdomNodePointer = new JDOMNodePointer(mockDocument, null);
        when(mockDocument.getRootElement()).thenReturn(mockElement);
        when(mockElement.getNamespace("testPrefix")).thenReturn(null);
        String uri = jdomNodePointer.getNamespaceURI("testPrefix");
        assertNull(uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_xmlPrefix_mXtt0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        String result = pointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withDocumentRoot_joAp1() {
        Document doc = new Document(new Element("root", Namespace.getNamespace("prefix", "http://example.com")));
        JDOMNodePointer pointer = new JDOMNodePointer(doc, Locale.getDefault());
        String result = pointer.getNamespaceURI("prefix");
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNode_zZeU2() {
        Element element = new Element("element", Namespace.getNamespace("prefix", "http://example.com"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        String result = pointer.getNamespaceURI("prefix");
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_noNamespaceFound_oxWw3() {
        Element element = new Element("element");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        String result = pointer.getNamespaceURI("undefined");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_nullPrefix_cEFh4() {
        Element element = new Element("element", Namespace.getNamespace("prefix", "http://example.com"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        String result = pointer.getNamespaceURI(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_emptyPrefix_BrXc5() {
        Element element = new Element("element", Namespace.getNamespace("", "http://example.com"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        String result = pointer.getNamespaceURI("");
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withDocumentAndNoRootElement_CZtZ7() {
        Document doc = new Document();
        JDOMNodePointer pointer = new JDOMNodePointer(doc, Locale.getDefault());
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNoNamespace_lDgG9() {
        Element element = new Element("element");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        String result = pointer.getNamespaceURI("prefix");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, null);
        Object result = jdomNodePointer.getBaseValue();
        assertEquals(node, result, "The getBaseValue method should return the node object set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_ieLo0() {
    Object expectedNode = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(expectedNode, locale);
    Object actualNode = jDOMNodePointer.getBaseValue();
    assertEquals(expectedNode, actualNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_BothNodesAreAttributes_RDDa3_CUNO0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class);
    org.w3c.dom.Attr attribute1 = mock(org.w3c.dom.Attr.class);
    org.w3c.dom.Attr attribute2 = mock(org.w3c.dom.Attr.class);
    Locale locale = Locale.getDefault();
    JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
    DOMNodePointer nodePointer1 = new DOMNodePointer(attribute1, locale);
    DOMNodePointer nodePointer2 = new DOMNodePointer(attribute2, locale);
    int result = pointer.compareChildNodePointers(nodePointer1, nodePointer2);
    assertTrue(result != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_Node1Null_Fkzn12_fuYO0() {
    Object node = new Object();
    Object childNode = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
    NodePointer nodePointer1 = null;
    JDOMNodePointer nodePointer2 = new JDOMNodePointer(childNode, locale);
    try {
        pointer.compareChildNodePointers(nodePointer1, nodePointer2);
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithText_dWqE0_1() {
    Element element = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
    String newTextValue = "New Text";
    Text textNode = new Text(newTextValue);
    jdomNodePointer.setValue(textNode);
    verify(element).getContent();
    verify(element).removeContent();
    verify(element).addContent(any(Text.class));
    ArgumentCaptor<Text> contentCaptor = ArgumentCaptor.forClass(Text.class);
    verify(element).addContent(contentCaptor.capture());
    Text capturedContent = contentCaptor.getValue();
    assertTrue(capturedContent instanceof Text);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithText_dWqE0_2() {
    Element element = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
    String newTextValue = "New Text";
    Text textNode = new Text(newTextValue);
    jdomNodePointer.setValue(textNode);
    verify(element).getContent();
    verify(element).removeContent();
    verify(element).addContent(any(Text.class));
    ArgumentCaptor<Text> contentCaptor = ArgumentCaptor.forClass(Text.class);
    verify(element).addContent(contentCaptor.capture());
    Text capturedContent = contentCaptor.getValue();
    assertEquals(newTextValue, capturedContent.getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextAndNonEmptyString_GSUp0_ylIb0() {
    Text node = new Text("");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("New Text");
    assertEquals("New Text", node.getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElement_uawU2_ExgT0() {
    Element node = new Element("root");
    Element valueElement = new Element("value");
    valueElement.addContent(new Text("Content"));
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(valueElement);
    assertEquals("Content", ((Text)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithDocument_SWBF3_lfcb0() {
    Element node = new Element("testElement");
    Document valueDocument = new Document(new Element("root"));
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(valueDocument);
    assertEquals("root", ((Element)node.getContent().get(0)).getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextValue_OpCv4_CnuR0() {
    Element node = new Element("dummyElement"); // Corrected to include required parameter
    Text valueText = new Text("Text Value");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(valueText);
    assertEquals("Text Value", ((Text)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithCDATA_rzPK5_Kwee0() {
    Element node = new Element("elementName"); // Corrected by adding a required argument for the Element constructor
    CDATA valueCDATA = new CDATA("CDATA Content");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(valueCDATA);
    assertEquals("CDATA Content", ((Text)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithProcessingInstruction_VJVr6_itGv0() {
    Element node = new Element("dummyElement"); // Corrected by providing a valid name for the Element
    ProcessingInstruction pi = new ProcessingInstruction("target", "data");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(pi);
    assertEquals("target", ((ProcessingInstruction)node.getContent().get(0)).getTarget());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithComment_biUb7_LCxZ0() {
    Element node = new Element("elementName"); // Corrected to include required argument for the constructor
    Comment comment = new Comment("Comment Content");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(comment);
    assertEquals("Comment Content", ((Comment)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithNull_lVBy8_CrPr0() {
    Element node = new Element("dummyElement"); // Corrected to include required argument
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(null);
    assertTrue(node.getContent().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithString_DNkc9_oEOi0() {
    Element node = new Element("dummyElement"); // Corrected to include required String argument
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("String Content");
    assertEquals("String Content", ((Text)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithNonStringObject_GmlQ10_BaOh0() {
    Element node = new Element("name"); // Corrected by adding a valid tag name as an argument
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(123);
    assertEquals("123", ((Text)node.getContent().get(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_AHgy0() throws Exception {
    Object node = mock(Object.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    when(namespaceResolver.getNamespaceURI(anyString())).thenReturn("http://example.com/namespace");
    when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String result = jdomNodePointer.getNamespaceResolver().getNamespaceURI("prefix");
    verify(namespaceResolver).getNamespaceURI("prefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithElementHavingPrefix_rsPu0() {
    Element element = mock(Element.class);
    when(element.getNamespacePrefix()).thenReturn("ns");
    String result = JDOMNodePointer.getPrefix(element);
    assertEquals("ns", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithElementHavingNoPrefix_akfW0() {
    Element element = mock(Element.class);
    when(element.getNamespacePrefix()).thenReturn("");
    String result = JDOMNodePointer.getPrefix(element);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithElementHavingNullPrefix_rmCR0() {
    Element element = mock(Element.class);
    when(element.getNamespacePrefix()).thenReturn(null);
    String result = JDOMNodePointer.getPrefix(element);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithNonElementOrAttribute_kgcC0() {
    Element element = mock(Element.class);
    Object nonElementOrAttribute = new Object();
    String result = JDOMNodePointer.getPrefix(nonElementOrAttribute);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafWithNonEmptyElement_pjks1_BzsE0() {
    Element element = new Element("elementName"); // Corrected to use the constructor that takes a name as a String
    element.addContent(new Text("Some content"));
    JDOMNodePointer nodePointer = new JDOMNodePointer(element, Locale.getDefault());
    assertFalse(nodePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_ElementMatches_ReturnsTrue_fmQp1_jrLa0() {
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    NodeTest test = new NodeNameTest(new QName("http://example.com", "test"), "someType");
    Element node = new Element("test", "http://example.com");
    assertTrue(JDOMNodePointer.testNode(domNodePointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_Wildcard_ReturnsTrue_HOAR3_MjRf0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NodeTest test = new NodeNameTest(new QName("*"), "true");
    Element node = new Element("any", "http://example.com");
    assertTrue(JDOMNodePointer.testNode(domNodePointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeComment_ReturnsTrue_bCcs7_RqWr0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NodeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    Comment node = new Comment(""); // Corrected by providing the required empty string argument
    assertTrue(JDOMNodePointer.testNode(domNodePointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_bmPR9_hiAc0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NodeTest test = new ProcessingInstructionTest("target");
    ProcessingInstruction node = new ProcessingInstruction("target", "data");
    assertTrue(JDOMNodePointer.testNode(domNodePointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_NonMatchingTarget_ReturnsFalse_LQCU10_tRPo0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NodeTest test = new ProcessingInstructionTest("target");
    ProcessingInstruction node = new ProcessingInstruction("other", "data");
    assertFalse(JDOMNodePointer.testNode(domNodePointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ThrowsExceptionWhenNodeIsRoot_MfWU0_1() {
    when(node.toString()).thenReturn("MockNode");
    Locale locale = Locale.getDefault(); // Assuming default locale for simplicity
    jdomNodePointer = new JDOMNodePointer(node, locale);
    when(jdomNodePointer.getParent()).thenReturn(null);
    JXPathException thrown = assertThrows(JXPathException.class, () -> jdomNodePointer.remove());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguage_WithNullCurrentLanguage_xqOz0() throws Exception {
    JDOMNodePointer jdomNodePointerParent = mock(JDOMNodePointer.class);
    Object node = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jdomNodePointer = spy(new JDOMNodePointer(node, locale));
    when(jdomNodePointer.getLanguage()).thenReturn(null);
    when(jdomNodePointerParent.getLanguage()).thenReturn("EN");
    assertEquals("EN", jdomNodePointerParent.getLanguage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguage_WithMatchingCurrentLanguage_PmKC0() throws Exception {
    Locale locale = new Locale("en", "US");
    Object node = new Object();
    JDOMNodePointer jdomNodePointerParent = mock(JDOMNodePointer.class);
    JDOMNodePointer jdomNodePointer = spy(new JDOMNodePointer(node, locale));
    when(jdomNodePointer.getLanguage()).thenReturn("en-US");
    assertTrue(jdomNodePointer.isLanguage("en"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguage_WithNonMatchingCurrentLanguage_VIHb0() throws Exception {
    JDOMNodePointer jdomNodePointerParent = mock(JDOMNodePointer.class);
    JDOMNodePointer jdomNodePointer = spy(new JDOMNodePointer(new Object(), Locale.getDefault()));
    when(jdomNodePointer.getLanguage()).thenReturn("fr-FR");
    assertFalse(jdomNodePointer.isLanguage("en"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithNull_rNMo0() throws Exception {
    Locale locale = null; // Explicitly define locale as null
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer((Object) null, locale);
    Object nullNode = null;
    String result = JDOMNodePointer.getLocalName(nullNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithUnsupportedType_iicd0() throws Exception {
    Locale locale = Locale.getDefault(); // Assuming default locale for simplicity
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), locale);
    Object unsupportedNode = new Object();
    String result = JDOMNodePointer.getLocalName(unsupportedNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_withNonElementNode_DFlF8_qLBy0() {
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    String result = pointer.getNamespaceURI("prefix");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_AttributePresent_VjvW0_DycT0() {
    Element element = new Element("testElement");
    Namespace namespace = Namespace.getNamespace("ns", "http://example.com");
    element.setAttribute("targetAttr", "value", namespace);
    Object node = new JDOMNodePointer(element, Locale.getDefault());
    String result = JDOMNodePointer.findEnclosingAttribute(node, "targetAttr", namespace);
    assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_AttributeAbsent_fLTb1_eqrV0() {
    Element element = new Element("testElement");
    Namespace namespace = Namespace.getNamespace("ns", "http://example.com");
    Object node = new JDOMNodePointer(element, Locale.getDefault());
    String result = JDOMNodePointer.findEnclosingAttribute(node, "nonexistentAttr", namespace);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_NullNode_hJsF2_oCGT0() {
    String result = JDOMNodePointer.findEnclosingAttribute(null, "anyAttr", Namespace.getNamespace("ns", "http://example.com"));
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_ParentHasAttribute_tRDV3_bJwy0() {
    Element child = new Element("child");
    Element parent = new Element("parent");
    Namespace namespace = Namespace.getNamespace("ns", "http://example.com");
    parent.setAttribute("parentAttr", "parentValue", namespace);
    parent.addContent(child); // Correctly adding child to parent
    Object node = new JDOMNodePointer(child, Locale.getDefault());
    String result = JDOMNodePointer.findEnclosingAttribute(node, "parentAttr", namespace);
    assertEquals("parentValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_sIfe0_1() throws Exception {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver result = jdomNodePointer.getNamespaceResolver();
    NamespaceResolver secondCallResult = jdomNodePointer.getNamespaceResolver();
    assertNull(jdomNodePointer.getNamespaceResolver(), "Initial NamespaceResolver should be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_sIfe0_2() throws Exception {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver result = jdomNodePointer.getNamespaceResolver();
    NamespaceResolver secondCallResult = jdomNodePointer.getNamespaceResolver();
    assertNotNull(result, "NamespaceResolver should not be null after initialization");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_sIfe0_3() throws Exception {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver result = jdomNodePointer.getNamespaceResolver();
    NamespaceResolver secondCallResult = jdomNodePointer.getNamespaceResolver();
    assertSame(jdomNodePointer, result.getNamespaceContextPointer(), "Namespace context pointer should be set to JDOMNodePointer instance");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_sIfe0_4() throws Exception {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver result = jdomNodePointer.getNamespaceResolver();
    NamespaceResolver secondCallResult = jdomNodePointer.getNamespaceResolver();
    assertSame(result, secondCallResult, "Multiple calls to getNamespaceResolver should return the same instance");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolverNotNull_Fazo0_tiJE0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver result = nodePointer.getNamespaceResolver();
    assertNotNull(result, "NamespaceResolver should not be null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolverConsistency_kZtY1_WYHG0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver firstCall = nodePointer.getNamespaceResolver();
    NamespaceResolver secondCall = nodePointer.getNamespaceResolver();
    assertSame(firstCall, secondCall, "NamespaceResolver should be the same on multiple calls");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(pointer1.getBaseValue()).thenReturn(attribute1);
        when(pointer2.getBaseValue()).thenReturn(attribute2);
        List<Attribute> attributes = Arrays.asList(attribute1, attribute2);
        when(element.getAttributes()).thenReturn(attributes);
        int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertTrue(result < 0);
        result = jdomNodePointer.compareChildNodePointers(pointer2, pointer1);
        assertTrue(result > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithInvalidIndex_rzkr1() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = -1;
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });
    assertTrue(exception.getMessage().contains("Factory could not create a child node"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNonExistentNamespace_BbDF4() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("nonExistentPrefix", "testNode");
    int index = 0;
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });
    assertTrue(exception.getMessage().contains("Factory could not create a child node"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithHighIndex_hZxv5() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNamespace", "testNode");
    int index = 1000; // High index to test boundary conditions
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        nodePointer.createChild(context, name, index);
    });
    assertTrue(exception.getMessage().contains("Factory could not create a child node"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerElement.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("elementName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointerProcessingInstruction.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("targetName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() throws Exception {
        jdomNodePointer = new JDOMNodePointer(new Object(), mockLocale);
        NodeIterator result = jdomNodePointer.namespaceIterator();
        assertNotNull(result, "The result should not be null");
        assertTrue(result instanceof JDOMNamespaceIterator, "The result should be an instance of JDOMNamespaceIterator");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithUnknownNamespace() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        QName name = new QName("unknown", "test");
        when(namespaceResolver.getNamespaceURI("unknown")).thenReturn(null);
        Exception exception = assertThrows(JXPathException.class, () -> {
            jdomNodePointer.createAttribute(context, name);
        });
        assertEquals("Unknown namespace prefix: unknown", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertTrue(jdomNodePointer1.equals(jdomNodePointer1), "Reflexive test failed.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertTrue(jdomNodePointer1.equals(jdomNodePointer2), "Symmetric test failed - should be equal.");
        assertTrue(jdomNodePointer2.equals(jdomNodePointer1), "Symmetric test failed - should be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertFalse(jdomNodePointer1.equals(null), "Comparison with null should return false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertFalse(jdomNodePointer1.equals(new Object()), "Comparison with different class object should return false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNodes() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertFalse(jdomNodePointer1.equals(jdomNodePointer3), "Objects with different nodes should not be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode() throws Exception {
        jdomNodePointer1 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer2 = new JDOMNodePointer(node1, Locale.getDefault());
        jdomNodePointer3 = new JDOMNodePointer(node2, Locale.getDefault());
        assertTrue(jdomNodePointer1.equals(jdomNodePointer2), "Objects with same node should be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NullNodeTest_ReturnsTrue() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, null);
        assertTrue(JDOMNodePointer.testNode(pointer, node, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_TextNode_ReturnsTrue() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, null);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
        Text textNode = mock(Text.class);
        assertTrue(JDOMNodePointer.testNode(pointer, textNode, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, null);
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        when(piTest.getTarget()).thenReturn("testTarget");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("testTarget");
        assertTrue(JDOMNodePointer.testNode(pointer, piNode, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer() throws Exception {
        node = mock(Object.class); // Mocking the node object since its implementation is not provided
        locale = Locale.getDefault(); // Using default locale for simplicity
        jdomNodePointer = new JDOMNodePointer(node, locale);
        String prefix = "testPrefix";
        JDOMNamespacePointer expectedPointer = new JDOMNamespacePointer(jdomNodePointer, prefix);
        NodePointer resultPointer = jdomNodePointer.namespacePointer(prefix);
        assertNotNull(resultPointer, "The result should not be null");
        assertTrue(resultPointer instanceof JDOMNamespacePointer, "The result should be an instance of JDOMNamespacePointer");
        assertEquals(expectedPointer.getNamespaceURI(), resultPointer.getNamespaceURI(), "The namespace URI should match the expected value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_ATJF0() {
    Object node = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = jDOMNodePointer.namespacePointer(prefix);
    assertNotNull(result);
    assertEquals(JDOMNamespacePointer.class, result.getClass());
    assertEquals(prefix, result.getName().getPrefix());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.ENGLISH);
        // Setup
        when(jdomnodepointer.findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE)).thenReturn("en");
        // Execution
        String language = jdomnodepointer.getLanguage();
        // Verification
        assertEquals("en", language);
        verify(jdomnodepointer).findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Setup
        int index = 0;
        Object value = "testValue";
        // Mocking the creation of a child node without setting value
        when(jdomNodePointer.createChild(context, name, index)).thenReturn(childNodePointer);
        // Action
        NodePointer result = jdomNodePointer.createChild(context, name, index, value);
        // Assertions
        assertNotNull(result, "The result should not be null");
        verify(childNodePointer).setValue(value);
        assertEquals(childNodePointer, result, "The returned node pointer should be the same as the mocked childNodePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_DocumentElement() throws Exception {
        jdomNodePointer = new JDOMNodePointer(mockDocument, null);
        when(mockDocument.getRootElement()).thenReturn(mockElement);
        when(mockElement.getNamespace("testPrefix")).thenReturn(mockNamespace);
        when(mockNamespace.getURI()).thenReturn("http://example.com/test");
        String uri = jdomNodePointer.getNamespaceURI("testPrefix");
        assertEquals("http://example.com/test", uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_ElementNode() throws Exception {
        jdomNodePointer = new JDOMNodePointer(mockDocument, null);
        jdomNodePointer = new JDOMNodePointer(mockElement, null);
        when(mockElement.getNamespace("testPrefix")).thenReturn(mockNamespace);
        when(mockNamespace.getURI()).thenReturn("http://example.com/test");
        String uri = jdomNodePointer.getNamespaceURI("testPrefix");
        assertEquals("http://example.com/test", uri);
    }
}