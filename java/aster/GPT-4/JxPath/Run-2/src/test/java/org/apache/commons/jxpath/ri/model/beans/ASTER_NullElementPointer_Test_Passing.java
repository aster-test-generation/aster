/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
@Mock
    private DOMNodePointer mockParentPointer;
private NullElementPointer nullElementPointer;
private NullElementPointer sameNullElementPointer;
private NullElementPointer differentNullElementPointer;
private NullElementPointer differentIndexNullElementPointer;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private DOMNodePointer parentPointer;
@Mock
    private QName qName;
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        // Initialize NullElementPointer with a mocked DOMNodePointer and an index
        nullElementPointer = new NullElementPointer(parent, 1);
        // Arrange
        JXPathContext mockContext = mock(JXPathContext.class);
        Object value = new Object();
        NodePointer expectedNodePointer = mock(NodePointer.class);
        // When parent.createChild is called, return the mocked NodePointer
        when(parent.createChild(any(JXPathContext.class), isNull(), anyInt(), any())).thenReturn(expectedNodePointer);
        // Act
        NodePointer result = nullElementPointer.createPath(mockContext, value);
        // Assert
        assertEquals(expectedNodePointer, result, "The returned NodePointer should match the expected one.");
        verify(parent).createChild(mockContext, null, 1, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertTrue(nullElementPointer.equals(nullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertTrue(nullElementPointer.equals(sameNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertFalse(nullElementPointer.equals(differentIndexNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_ReturnsFalse() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertFalse(nullElementPointer.equals(differentNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertFalse(nullElementPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentType_ReturnsFalse() {
        int index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        differentIndexNullElementPointer = new NullElementPointer(null, index);
        assertFalse(nullElementPointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        // Initialize NullElementPointer with a mock DOMNodePointer and an index
        nullElementPointer = new NullElementPointer(mockParent, 0);
        // Define the exception we expect to be thrown
        UnsupportedOperationException expectedException = new UnsupportedOperationException("Collection element does not exist: " + nullElementPointer);
        // Test setValue method
        UnsupportedOperationException actualException = assertThrows(UnsupportedOperationException.class, () -> nullElementPointer.setValue(new Object()));
        // Verify the message of the thrown exception
        assertEquals(expectedException.getMessage(), actualException.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer() throws Exception {
        when(parentPointer.getName()).thenReturn(qName);
        nullElementPointer = new NullElementPointer(parentPointer, 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result, "The result should not be null");
        assertTrue(result instanceof NullPointer, "The result should be an instance of NullPointer");
        assertEquals(qName, result.getName(), "The name of the result should match the mocked QName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_NJUp0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertTrue(result instanceof NullPointer);
    assertEquals(nullElementPointer.getName(), result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_VLLI0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    JXPathContext context = JXPathContext.newContext(new Object());
    Object value = new Object();
    NodePointer result = nullElementPointer.createPath(context, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        // Assuming the index doesn't affect the outcome as isCollection always returns false
        nullElementPointer = new NullElementPointer(domNodePointerMock, 0);
        // Act
        boolean result = nullElementPointer.isCollection();
        // Assert
        assertFalse(result, "isCollection should always return false for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        // Mocking DOMNodePointer as it is a dependency in NullElementPointer constructor
        DOMNodePointer mockDomNodePointer = org.mockito.Mockito.mock(DOMNodePointer.class);
        // Initialize NullElementPointer with the mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(mockDomNodePointer, 0);
        // Act
        Object result = nullElementPointer.getImmediateNode();
        // Assert
        assertNull(result, "The getImmediateNode method should return null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        nullElementPointer = new NullElementPointer(mockDomNodePointer, 0);
        assertTrue(nullElementPointer.isContainer(), "isContainer should always return true for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        // Setup the index for NullElementPointer
        int index = 5;
        // Initialize NullElementPointer with a mocked DOMNodePointer and an index
        nullElementPointer = new NullElementPointer(parentPointer, index);
        // Arrange
        int parentHashCode = 123;
        int expectedHashCode = parentHashCode + 5; // As per the hashCode implementation in NullElementPointer
        // Mock the behavior of parentPointer.hashCode()
        when(parentPointer.hashCode()).thenReturn(parentHashCode);
        // Act
        int actualHashCode = nullElementPointer.hashCode();
        // Assert
        assertEquals(expectedHashCode, actualHashCode, "The hashCode method should return the sum of the parent's hashCode and the index.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Mocking DOMNodePointer as it is a dependency in the constructor of NullElementPointer
        DOMNodePointer parentNode = new DOMNodePointer(null, null, null);
        nullElementPointer = new NullElementPointer(parentNode, 0);
        // Act
        QName result = nullElementPointer.getName();
        // Assert
        assertNull(result, "The getName method should return null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        // Initialize NullElementPointer with a mocked DOMNodePointer and an index
        nullElementPointer = new NullElementPointer(domNodePointerMock, 0);
        // Act
        PropertyPointer result = nullElementPointer.getPropertyPointer();
        // Assert
        assertTrue(result instanceof NullPropertyPointer, "The returned object should be an instance of NullPropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithValidParentAndIndex() throws Exception {
        // Assuming WHOLE_COLLECTION is a static final int that should be defined somewhere
        final int WHOLE_COLLECTION = -1; // Example value, replace with actual value from your code
        final int index = 1; // Example index, adjust as needed for your tests
        // Set up the NullElementPointer with a mocked parent and an index
        nullElementPointer = new NullElementPointer(parentPointer, index);
        // Set up parent pointer behavior
        when(parentPointer.asPath()).thenReturn("/parentPath");
        when(parentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        // Expected path calculation based on the mocked parent's path and the index
        String expectedPath = "/parentPath/[2]"; // Index + 1 in brackets
        // Execute the method under test
        String actualPath = nullElementPointer.asPath();
        // Assert the expected path is returned
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_fYXF0() {
    DOMNodePointer parentPointer = null;
    NullElementPointer elementPointer = new NullElementPointer(parentPointer, 0);
    String result = elementPointer.asPath();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Since NullElementPointer does not interact with its parent in getLength method,
        // we can safely pass null for the parent parameter.
        nullElementPointer = new NullElementPointer(null, 0);
        // Act
        int length = nullElementPointer.getLength();
        // Assert
        assertEquals(0, length, "The length should always be 0 for NullElementPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Assuming index is irrelevant for the behavior of getBaseValue as it returns null
        int index = 0;
        nullElementPointer = new NullElementPointer(mockParent, index);
        // Act
        Object result = nullElementPointer.getBaseValue();
        // Assert
        assertNull(result, "The base value should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        // Assuming index is irrelevant for the behavior of isActual method
        int index = 0;
        nullElementPointer = new NullElementPointer(mockParent, index);
        // Act
        boolean result = nullElementPointer.isActual();
        // Assert
        assertFalse(result, "isActual should always return false for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        nullElementPointer = new NullElementPointer(mockDomNodePointer, 0);
        assertTrue(nullElementPointer.isLeaf(), "isLeaf should return true for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_1() throws Exception {
        // Initialize NullElementPointer with a mock DOMNodePointer and an index
        nullElementPointer = new NullElementPointer(mockParent, 0);
        // Define the exception we expect to be thrown
        UnsupportedOperationException expectedException = new UnsupportedOperationException("Collection element does not exist: " + nullElementPointer);
        // Test setValue method
        // Verify the message of the thrown exception
        UnsupportedOperationException actualException = assertThrows(UnsupportedOperationException.class, () -> nullElementPointer.setValue(new Object()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_1() throws Exception {
        when(parentPointer.getName()).thenReturn(qName);
        nullElementPointer = new NullElementPointer(parentPointer, 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_2() throws Exception {
        when(parentPointer.getName()).thenReturn(qName);
        nullElementPointer = new NullElementPointer(parentPointer, 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assertTrue(result instanceof NullPointer, "The result should be an instance of NullPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_3() throws Exception {
        when(parentPointer.getName()).thenReturn(qName);
        nullElementPointer = new NullElementPointer(parentPointer, 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assertEquals(qName, result.getName(), "The name of the result should match the mocked QName");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_NJUp0_1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertTrue(result instanceof NullPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_NJUp0_2() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertEquals(nullElementPointer.getName(), result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_g_EWRb0() throws Exception {
    NullElementPointer nullElementPointer = new NullElementPointer(mockParent, 0);
    JXPathContext mockContext = mock(JXPathContext.class);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    when(mockParent.createChild(any(JXPathContext.class), isNull(), anyInt())).thenReturn(expectedNodePointer);
    NodePointer result = nullElementPointer.createPath(mockContext);
    verify(mockParent).createChild(mockContext, null, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_hcAz0_jBjb0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), null);
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    assertFalse(nullElementPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameReturnsNull_NSUy0_CtbJ0() {
    DOMNodePointer parent = new DOMNodePointer(null, Locale.getDefault(), null);
    NullElementPointer nullElementPointer = new NullElementPointer(parent, 0);
    QName result = nullElementPointer.getName();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueReturnsNull_ZGSc0_jmHU0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    assertNull(nullElementPointer.getBaseValue());
}
}