// /**
//  * Generated by Aster
//  */
// package org.apache.commons.jxpath.ri.parser;
// import java.util.ArrayList;
// import org.apache.commons.jxpath.ri.Compiler;
// import org.apache.commons.jxpath.ri.axes.NamespaceContext;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
// import org.apache.commons.jxpath.ri.compiler.Expression;
// import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
// import org.apache.commons.jxpath.servlet.HttpSessionAndServletContext;
// import org.apache.commons.jxpath.servlet.KeywordVariables;
// import org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator;
// import org.apache.commons.jxpath.JXPathBasicBeanInfo;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer;
// import org.apache.commons.jxpath.servlet.HttpSessionHandler;
// import org.apache.commons.jxpath.ri.axes.SelfContext;
// import org.apache.commons.jxpath.functions.MethodFunction;
// import org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator;
// import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
// import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
// import org.apache.commons.jxpath.ri.model.beans.CollectionChildNodeIterator;
// import org.apache.commons.jxpath.ri.compiler.Constant;
// import org.apache.commons.jxpath.ri.axes.UnionContext;
// import org.apache.commons.jxpath.ri.axes.ChildContext;
// import org.apache.commons.jxpath.servlet.PageScopeContext;
// import org.apache.commons.jxpath.ri.model.NodePointer;
// import org.apache.commons.jxpath.servlet.ServletRequestAndContext;
// import org.apache.commons.jxpath.ri.compiler.NodeTest;
// import org.apache.commons.jxpath.util.TypeUtils;
// import org.apache.commons.jxpath.functions.ConstructorFunction;
// import org.apache.commons.jxpath.CompiledExpression;
// import org.apache.commons.jxpath.xml.DocumentContainer;
// import org.apache.commons.jxpath.ri.model.VariablePointer;
// import org.apache.commons.jxpath.ri.model.beans.CollectionAttributeNodeIterator;
// import org.apache.commons.jxpath.ri.compiler.Operation;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
// import org.apache.commons.jxpath.ri.NamespaceResolver;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
// import org.apache.commons.jxpath.BasicVariables;
// import org.apache.commons.jxpath.BasicNodeSet;
// import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
// import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
// import org.apache.commons.jxpath.JXPathContextFactory;
// import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
// import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
// import org.apache.commons.jxpath.util.ReverseComparator;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer;
// import org.apache.commons.jxpath.JXPathAbstractFactoryException;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
// import org.apache.commons.jxpath.ri.parser.XPathParserConstants;
// import org.apache.commons.jxpath.xml.DOMParser;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicAttributeIterator;
// import org.apache.commons.jxpath.xml.JDOMParser;
// import org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl;
// import org.apache.commons.jxpath.servlet.ServletRequestHandler;
// import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
// import org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression;
// import org.apache.commons.jxpath.Function;
// import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
// import org.apache.commons.jxpath.servlet.JXPathServletContexts;
// import org.apache.commons.jxpath.ClassFunctions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
// import org.apache.commons.jxpath.ri.axes.RootContext;
// import org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory;
// import org.apache.commons.jxpath.JXPathInvalidAccessException;
// import org.apache.commons.jxpath.servlet.Constants;
// import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
// import org.apache.commons.jxpath.ri.model.container.ContainerPointer;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
// import org.apache.commons.jxpath.util.ClassLoaderUtil;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer;
// import org.apache.commons.jxpath.FunctionLibrary;
// import org.apache.commons.jxpath.util.KeyManagerUtils;
// import org.apache.commons.jxpath.KeyManager;
// import org.apache.commons.jxpath.ri.parser.Token;
// import org.apache.commons.jxpath.ExpressionContext;
// import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
// import org.apache.commons.jxpath.ri.parser.ParseException;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyIterator;
// import org.apache.commons.jxpath.ri.model.beans.CollectionPointer;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory;
// import org.apache.commons.jxpath.PackageFunctions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
// import org.apache.commons.jxpath.ri.model.beans.CollectionNodeIterator;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory;
// import org.apache.commons.jxpath.ri.axes.InitialContext;
// import org.apache.commons.jxpath.ri.axes.NodeSetContext;
// import org.apache.commons.jxpath.JXPathIntrospector;
// import org.apache.commons.jxpath.ri.model.dynabeans.StrictLazyDynaBeanPointerFactory;
// import org.apache.commons.jxpath.ri.axes.AncestorContext;
// import org.apache.commons.jxpath.ExtendedKeyManager;
// import org.apache.commons.jxpath.ri.compiler.CoreFunction;
// import org.apache.commons.jxpath.IdentityManager;
// import org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
// import org.apache.commons.jxpath.ExceptionHandler;
// import org.apache.commons.jxpath.Variables;
// import org.apache.commons.jxpath.ri.Parser;
// import org.apache.commons.jxpath.JXPathContext;
// import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
// import org.apache.commons.jxpath.servlet.PageContextHandler;
// import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
// import org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory;
// import org.apache.commons.jxpath.JXPathTypeConversionException;
// import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationCompare;
// import org.apache.commons.jxpath.ri.model.beans.LangAttributePointer;
// import org.apache.commons.jxpath.util.ValueUtils;
// import org.apache.commons.jxpath.Functions;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
// import org.apache.commons.jxpath.ri.compiler.Path;
// import org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator;
// import org.apache.commons.jxpath.JXPathNotFoundException;
// import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
// import org.apache.commons.jxpath.ri.EvalContext;
// import org.apache.commons.jxpath.ri.compiler.Step;
// import org.apache.commons.jxpath.servlet.PageScopeContextHandler;
// import org.apache.commons.jxpath.ri.parser.TokenMgrError;
// import org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory;
// import org.apache.commons.jxpath.MapDynamicPropertyHandler;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
// import org.apache.commons.jxpath.ri.compiler.CoreOperation;
// import org.apache.commons.jxpath.AbstractFactory;
// import org.apache.commons.jxpath.DynamicPropertyHandler;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
// import org.apache.commons.jxpath.Pointer;
// import org.apache.commons.jxpath.ri.model.NodePointerFactory;
// import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
// import org.apache.commons.jxpath.util.MethodLookupUtils;
// import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory;
// import org.apache.commons.jxpath.ri.model.NodeIterator;
// import org.apache.commons.jxpath.JXPathBeanInfo;
// import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer;
// import org.apache.commons.jxpath.XMLDocumentContainer;
// import org.apache.commons.jxpath.ri.axes.AttributeContext;
// import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
// import org.apache.commons.jxpath.ri.parser.XPathParser;
// import org.apache.commons.jxpath.ri.Compiler;
// import org.apache.commons.jxpath.ri.axes.SimplePathInterpreter;
// import org.apache.commons.jxpath.xml.XMLParser2;
// import org.apache.commons.jxpath.ri.model.beans.NullPointer;
// import org.apache.commons.jxpath.ri.JXPathCompiledExpression;
// import org.apache.commons.jxpath.ri.QName;
// import org.apache.commons.jxpath.ri.InfoSetUtil;
// import org.apache.commons.jxpath.util.TypeConverter;
// import org.apache.commons.jxpath.ri.axes.PredicateContext;
// import org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
// import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
// import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
// import org.apache.commons.jxpath.ri.axes.ParentContext;
// import org.apache.commons.jxpath.util.BasicTypeConverter;
// import org.apache.commons.jxpath.ri.axes.DescendantContext;
// import org.apache.commons.jxpath.ri.compiler.VariableReference;
// import org.apache.commons.jxpath.ri.model.dom.NamespacePointer;
// import org.apache.commons.jxpath.ri.compiler.LocationPath;
// import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
// import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
// import org.apache.commons.jxpath.xml.XMLParser;
// import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
// import org.apache.commons.jxpath.JXPathContextFactoryConfigurationError;
// import org.apache.commons.jxpath.Container;
// import org.apache.commons.jxpath.NodeSet;
// import org.apache.commons.jxpath.JXPathInvalidSyntaxException;
// import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
// import org.apache.commons.jxpath.ri.model.beans.NullElementPointer;
// import org.apache.commons.jxpath.servlet.ServletContextHandler;
// import org.apache.commons.jxpath.JXPathException;
// import static org.junit.jupiter.api.Assertions.*;
// import java.util.*;
// import org.junit.jupiter.api.*;
// import java.util.concurrent.TimeUnit;
// import static org.mockito.Mockito.when;
// import static org.mockito.Mockito.*;
// import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
// import org.springframework.mock.web.*;
// import static org.junit.jupiter.api.Assertions.*;
// import java.util.*;
// import org.junit.jupiter.api.*;
// import java.util.concurrent.TimeUnit;
// import static org.mockito.Mockito.when;
// import static org.mockito.Mockito.*;
// import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
// import org.springframework.mock.web.*;
// public class Aster_XPathParser_Coverage_Test_Failing {
// @ExtendWith(MockitoExtension.class)
//     @Mock
//     private Compiler compiler;
//     @Test(expected = Error.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionNameThrowsError_Thbl1() throws ParseException {
//         ByteArrayInputStream inputStream = new ByteArrayInputStream("".getBytes());
//         XPathParser parser = new XPathParser(inputStream);
//         XPathParser spyParser = spy(parser);
//         doReturn(null).when(spyParser).QName_Without_CoreFunctions();
//         doReturn(false).when(spyParser).someConditionMethod(); // Assuming someConditionMethod controls the if condition
//         spyParser.FunctionName();
//     }
// @ExtendWith(MockitoExtension.class)
//     XPathParser xpathParser;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCName_Without_CoreFunctions_InvalidToken_upZH5() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         parser.jj_nt = new Token();
//         parser.jj_nt.kind = INVALID;
//         when(parser.jj_consume_token(-1)).thenThrow(new ParseException());
//         parser.NCName_Without_CoreFunctions();
//     }
// @ExtendWith(MockitoExtension.class)
//     @Mock
//     private Compiler compiler;
//     @Mock
//     private Token token;
//     @Mock
//     private SimpleCharStream stream;
//     @Mock
//     private XPathParserTokenManager tokenManager;
//     private XPathParser xpathParser;
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testEqualityExprParseExceptionThrown_HNHd15() throws ParseException {
//         XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParser parser = new XPathParser(tm);
//         when(tm.getNextToken()).thenReturn(new Token(TokenKind.INVALID)); // To ensure default case in second switch
//         parser.EqualityExpr();
//     }
//     private XPathParser xPathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     private Compiler compiler;
//     private Token jj_nt;
//     private int[] jj_la1;
//     private int jj_gen;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationStepWithInvalidToken_aawt3() throws ParseException {
//         jj_nt.kind = INVALID_TOKEN;
//         doThrow(new ParseException()).when(xPathParser).jj_consume_token(-1);
//         ArrayList steps = new ArrayList();
//         xPathParser.LocationStep(steps);
//     }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream charStream;
//     private Compiler compiler;
//     @Mock
//     private Token jj_nt;
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream charStream;
//     private Compiler compiler;
//     private Token jj_nt;
//     private int[] jj_la1 = new int[39];
//     private int jj_gen;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testParseExpressionThrowsParseException_jbbI1() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.Expression()).thenThrow(new ParseException());
//         parser.parseExpression();
//     }
//     @Test(expected = Error.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testQNameThrowsErrorForMissingReturn_PCnf8() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.NCName()).thenReturn("prefix");
//         when(parser.jj_nt.kind).thenReturn(100); // A value that does not match any case and no default handling
//         parser.QName();
// }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private Compiler compiler;
//     private Token jj_nt;
//     private SimpleCharStream stream;
//     private XPathParserTokenManager tokenManager;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAbbreviatedAxisSpecifier_ConsumeTokenThrowsParseException_rjLG2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         jj_nt.kind = 87; // Matching case 87
//         parser.jj_nt = jj_nt;
//         parser.jj_gen = 0;
//         parser.jj_la1 = new int[16];
//         doThrow(new ParseException()).when(parser).jj_consume_token(87);
//         parser.AbbreviatedAxisSpecifier();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallThrowsParseExceptionOnFunctionName_iKem2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.FunctionName()).thenThrow(new ParseException());
//         parser.FunctionCall();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testFunctionCallThrowsParseExceptionOnArgumentList_BcBb3() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.FunctionName()).thenReturn("functionName");
//         when(parser.ArgumentList()).thenThrow(new ParseException());
//         parser.FunctionCall();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNodeTypeInvalid_faPn4() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Invalid token kind
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testThrowParseException_diok11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Trigger default case
//         when(stream.readToken()).thenReturn(token);
//         when(stream.getNextToken()).thenReturn(token);
//         parser.NodeType(); // This should throw ParseException
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testMultiplicativeExpr_ThrowParseException_UWOF11() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         when(parser.jj_nt.kind).thenReturn(100); // Assuming 100 is an invalid token
//         parser.MultiplicativeExpr();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testLocationPathWithParseException_YnxL2() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tm = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tm);
//         token.kind = -1; // Assuming -1 is an invalid kind
//         parser.jj_nt = token;
//         parser.LocationPath();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testAxisNameInvalidToken_FYZq13() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = -1;
//         when(stream.readToken()).thenReturn(token);
//         parser.AxisName();
//     }
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testRelationalExprParseExceptionThrown_pmdG22() throws ParseException {
//         SimpleCharStream stream = new SimpleCharStream(new StringReader(""));
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         token.kind = Token.INVALID;
//         parser.jj_nt = token;
//         parser.compiler = mock(XPathCompiler.class);
//         when(parser.AdditiveExpr()).thenReturn(new Object());
//         parser.RelationalExpr();
//     }
// @ExtendWith(MockitoExtension.class)
//     private XPathParser xpathParser;
//     private XPathParserTokenManager tokenManager;
//     private SimpleCharStream stream;
//     private Compiler compiler;
//     @Mock
//     private Token jj_nt;
//     @Mock
//     private ParseException parseException;
//     @Test(expected = ParseException.class)
// @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//     public void testNCNameWithInvalidToken_eftW20() throws ParseException {
//         SimpleCharStream stream = mock(SimpleCharStream.class);
//         XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
//         XPathParser parser = new XPathParser(tokenManager);
//         when(parser.jj_consume_token(-1)).thenThrow(new ParseException());
//         parser.NCName();
//     }
// }