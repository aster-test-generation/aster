/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Passing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private NamespaceResolver nsResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementNodeWithAttribute_Ayvk0() {
        Node node = mock(Element.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null);
        when(((Element) node).getAttribute("testAttr")).thenReturn("value");
        String result = DOMNodePointer.findEnclosingAttribute(node, "testAttr");
        assertEquals("value", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementNodeWithoutAttribute_KAux1() {
        Node node = mock(Element.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null);
        when(((Element) node).getAttribute("testAttr")).thenReturn("");
        String result = DOMNodePointer.findEnclosingAttribute(node, "testAttr");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NonElementNode_AWWA2() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getParentNode()).thenReturn(null);
        String result = DOMNodePointer.findEnclosingAttribute(node, "testAttr");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ParentElementHasAttribute_GKMB3() {
        Node childNode = mock(Node.class);
        Node parentNode = mock(Element.class);
        when(childNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(childNode.getParentNode()).thenReturn(parentNode);
        when(parentNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) parentNode).getAttribute("testAttr")).thenReturn("parentValue");
        String result = DOMNodePointer.findEnclosingAttribute(childNode, "testAttr");
        assertEquals("parentValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NoParentWithAttribute_otBx4() {
        Node childNode = mock(Node.class);
        Node parentNode = mock(Node.class);
        when(childNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(childNode.getParentNode()).thenReturn(parentNode);
        when(parentNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(parentNode.getParentNode()).thenReturn(null);
        String result = DOMNodePointer.findEnclosingAttribute(childNode, "testAttr");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_BfTK0_1() {
        Node mockNode = mock(Element.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("ns");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_BfTK0_2() {
        Node mockNode = mock(Element.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("ns");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_hGkQ1_1() {
        ProcessingInstruction mockNode = mock(ProcessingInstruction.class);
        when(mockNode.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockNode.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_hGkQ1_2() {
        ProcessingInstruction mockNode = mock(ProcessingInstruction.class);
        when(mockNode.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockNode.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("target", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForUnsupportedNodeType_wugi2_1() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForUnsupportedNodeType_wugi2_2() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithStringNotEmpty_GtiI0() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        domNodePointer.setValue("Hello");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNodeAndRemoveChild_EmnJ12() {
        Node node = mock(Node.class);
        NodeList nodeList = mock(NodeList.class);
        Node childNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(1);
        when(nodeList.item(0)).thenReturn(childNode);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setValue(null);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_fRxG0() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withDocumentNode_NyhG0() {
        Document doc = org.mockito.Mockito.mock(Document.class);
        Element element = org.mockito.Mockito.mock(Element.class);
        org.mockito.Mockito.when(doc.getDocumentElement()).thenReturn(element);
        org.mockito.Mockito.when(doc.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(doc, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withElementNodeHavingNamespace_uesk1() {
        Element element = org.mockito.Mockito.mock(Element.class);
        Attr attr = org.mockito.Mockito.mock(Attr.class);
        org.mockito.Mockito.when(element.getAttributeNode("xmlns")).thenReturn(attr);
        org.mockito.Mockito.when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        org.mockito.Mockito.when(attr.getValue()).thenReturn("http://example.com/ns");
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertEquals("http://example.com/ns", pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withElementNodeNoNamespace_UvhY2() {
        Element element = org.mockito.Mockito.mock(Element.class);
        org.mockito.Mockito.when(element.getAttributeNode("xmlns")).thenReturn(null);
        org.mockito.Mockito.when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withNestedElementNodes_rwgQ3() {
        Element childElement = org.mockito.Mockito.mock(Element.class);
        Element parentElement = org.mockito.Mockito.mock(Element.class);
        Attr attr = org.mockito.Mockito.mock(Attr.class);
        org.mockito.Mockito.when(childElement.getParentNode()).thenReturn(parentElement);
        org.mockito.Mockito.when(parentElement.getAttributeNode("xmlns")).thenReturn(attr);
        org.mockito.Mockito.when(parentElement.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        org.mockito.Mockito.when(attr.getValue()).thenReturn("http://example.com/ns");
        DOMNodePointer pointer = new DOMNodePointer(childElement, Locale.getDefault());
        assertEquals("http://example.com/ns", pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withNoNamespaceAnywhere_ZqDh4() {
        Element element = org.mockito.Mockito.mock(Element.class);
        org.mockito.Mockito.when(element.getAttributeNode("xmlns")).thenReturn(null);
        org.mockito.Mockito.when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        org.mockito.Mockito.when(element.getParentNode()).thenReturn(null);
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_emptyNamespace_QCku5() {
        Element element = org.mockito.Mockito.mock(Element.class);
        Attr attr = org.mockito.Mockito.mock(Attr.class);
        org.mockito.Mockito.when(element.getAttributeNode("xmlns")).thenReturn(attr);
        org.mockito.Mockito.when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        org.mockito.Mockito.when(attr.getValue()).thenReturn("");
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withDocumentNode_NEAZ0() {
        Document doc = mock(Document.class);
        Element element = mock(Element.class);
        when(doc.getDocumentElement()).thenReturn(element);
        when(element.getNamespaceURI()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(doc);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeHavingNamespace_mVqb1() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_withElementNodeEmptyNamespace_dmfi7() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn("");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullTest_ReturnsTrue_WEVL1() {
        assertTrue(DOMNodePointer.testNode(node, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeNotElement_ReturnsFalse_KZAK2() {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("test"));
        assertFalse(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WildcardAndNullPrefix_ReturnsTrue_EBVy3() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeNode_ReturnsTrue_RyiG6() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeText_ReturnsTrueForText_KTTY7() {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeText_ReturnsTrueForCDATA_MAYA8() {
        when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeComment_ReturnsTrue_hmBV9() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypePI_ReturnsTrue_xKvD10() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_PI);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_OtherNodeTypes_ReturnsFalse_EPrh13() {
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT); // Using COMMENT as an example
        assertFalse(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNoNamespace_dxZz1() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNamespaceURI()).thenReturn(null);
        String path = domNodePointer.asPath();
        assertEquals("", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeWithNamespace_Xfhh2() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
        String path = domNodePointer.asPath();
        assertEquals("", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithDocumentNode_sszm6() {
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        String path = domNodePointer.asPath();
        assertEquals("", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullId_VBGb8() {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "uniqueId");
        String path = domNodePointer.asPath();
        assertEquals("id('uniqueId')", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPrefixIsEmpty_rkSD1() {
        Node node = mock(Node.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.getNamespaceURI("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPrefixIsXmlns_ijog2() {
        Node node = mock(Node.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.getNamespaceURI("xmlns");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIsNullInitially_PVra3() {
        Node node = mock(Node.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeIsDocument_zpIq7() {
        Document doc = mock(Document.class);
        when(doc.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(doc.getDocumentElement()).thenReturn(mock(Element.class));
        DOMNodePointer domNodePointer = new DOMNodePointer(doc, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTraversal_utVn8() {
        Element element = mock(Element.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getParentNode()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(element, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeNodeFound_UpPL9() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns:test")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        DOMNodePointer domNodePointer = new DOMNodePointer(element, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeNodeNotFound_GgAb10() {
        Element element = mock(Element.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns:test")).thenReturn(null);
        when(element.getParentNode()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(element, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIsEmptyAfterTraversal_MriQ12() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns:test")).thenReturn(attr);
        when(attr.getValue()).thenReturn("");
        when(element.getParentNode()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(element, Locale.getDefault());
        domNodePointer.getNamespaceURI("test");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_Node1NotAttributeNode_Node2Is_SGow3_cDwy0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    DOMNodePointer pointer = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_Node1AttributeNode_Node2Not_BUuO2_aLpw0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(-1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_BothAttributeNodes_Node2First_Wfuq1_MIvd0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    Node parentNode = mock(Node.class);
    NamedNodeMap map = mock(NamedNodeMap.class);
    when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    when(parentNode.getAttributes()).thenReturn(map);
    when(map.getLength()).thenReturn(2);
    when(map.item(0)).thenReturn(node2);
    when(map.item(1)).thenReturn(node1);
    DOMNodePointer pointer = new DOMNodePointer(parentNode, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_BothNotAttributeNodes_Node2First_EMHK5_MrNc0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    Node parentNode = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(parentNode.getFirstChild()).thenReturn(node2);
    when(node2.getNextSibling()).thenReturn(node1);
    DOMNodePointer pointer = new DOMNodePointer(parentNode, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_Node1EqualsNode2_jcAA6_nsed0() {
    Node node1 = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node1, Locale.getDefault());
    assertEquals(0, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_BothNotAttributeNodes_Node1First_xRlo4_Ukra0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    Node parentNode = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(parentNode.getFirstChild()).thenReturn(node1);
    when(node1.getNextSibling()).thenReturn(node2);
    DOMNodePointer pointer = new DOMNodePointer(parentNode, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(-1, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_NoMatchingNodes_DHwF7_ROIi0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    Node parentNode = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(parentNode.getFirstChild()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(parentNode, Locale.getDefault());
    DOMNodePointer pointer1 = new DOMNodePointer(node1, Locale.getDefault());
    DOMNodePointer pointer2 = new DOMNodePointer(node2, Locale.getDefault());
    assertEquals(0, pointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_NodeIsDocument_fQCf0_UedZ0() {
    Node node = mock(Document.class);
    when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    Document document = (Document) node;
    String id = "testId";
    Element element = mock(Element.class);
    when(document.getElementById(id)).thenReturn(element);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = mock(JXPathContext.class);
    Pointer result = domNodePointer.getPointerByID(context, id);
    assertTrue(result instanceof DOMNodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_NodeIsNotDocument_scvX1_PQLq0() {
    Node node = mock(Node.class);
    Document document = mock(Document.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    String id = "testId";
    Element element = mock(Element.class);
    when(document.getElementById(id)).thenReturn(element);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = domNodePointer.getPointerByID(context, id);
    assertTrue(result instanceof DOMNodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_ElementNotFound_UJiP2_ULUv0() {
    Node node = mock(Node.class);
    Document document = mock(Document.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    String id = "testId";
    when(document.getElementById(id)).thenReturn(null);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = domNodePointer.getPointerByID(context, id);
    assertTrue(result instanceof NullPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithTextNode_jnKh3_Daed0() {
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    String path = domNodePointer.asPath();
    assertEquals("/text()[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_NullNode_NZhN4_dClb0() {
    Node node = null;
    String id = "testId";
    try {
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        JXPathContext context = JXPathContext.newContext(null);
        Pointer result = domNodePointer.getPointerByID(context, id);
        fail("Expected NullPointerException to be thrown");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithCDATASectionNode_fQUO4_ubcg0() {
    when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    String path = domNodePointer.asPath();
    assertEquals("/text()[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullId_cJrs7_skqA0() {
    QName parentQName = new QName("parent");
    VariablePointer parentPointer = new VariablePointer(parentQName);
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parentPointer, node);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn(null);
    String path = domNodePointer.asPath();
    assertEquals("$parent", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndSlashAtEndOfBuffer_aktb11_pxef0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path/");
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, mock(Node.class));
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNoSlashAtEndOfBuffer_hFMv12_WTfY0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path");
    Node node = mock(Node.class);
    when(node.getNodeName()).thenReturn("elementName");
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefix_SMMR14_iQim0() {
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    domNodePointer.setNamespaceResolver(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_fTat0_jguO0() {
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = spy(new DOMNodePointer(node, Locale.getDefault()));
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn(null);
    when(node.getLocalName()).thenReturn("elementName");
    doReturn(namespaceResolver).when(domNodePointer).getNamespaceResolver();
    when(namespaceResolver.getPrefix(anyString())).thenReturn("ns");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_ymtG00_HGqj0() {
    Node node = mock(Node.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIPrefixIsNull_evPJ0_ekAC0() {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
    String result = namespaceResolver.getNamespaceURI(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefixAndSlashAtEndOfBuffer_GiYX15_TpbX0() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path/");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(node.getLocalName()).thenReturn("elementName");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path/", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNonNullPrefixAndNoSlashAtEndOfBuffer_nJcW16_qQHd0() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(node.getLocalName()).thenReturn("elementName");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn("ns");
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeAndNamespaceAndNullPrefixAndNoSlashAtEndOfBuffer_RcdA17_qRTH0() {
    VariablePointer parent = mock(VariablePointer.class);
    Node node = mock(Node.class);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
    when(parent.asPath()).thenReturn("/parent/path");
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    when(namespaceResolver.getPrefix("http://example.com/ns")).thenReturn(null);
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    String path = domNodePointer.asPath();
    assertEquals("/parent/path", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_BfTK0() {
        Node mockNode = mock(Element.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("ns");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("localName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_hGkQ1() {
        ProcessingInstruction mockNode = mock(ProcessingInstruction.class);
        when(mockNode.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockNode.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("target", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForUnsupportedNodeType_wugi2() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals(null, result.getName());
    }
}