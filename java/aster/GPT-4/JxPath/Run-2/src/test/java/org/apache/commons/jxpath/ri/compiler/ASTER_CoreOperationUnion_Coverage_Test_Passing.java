/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationUnion_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_IUjy0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[]{});
        String result = coreOperationUnion.getSymbol();
        assertEquals("|", result);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_EmptyArgs_lWgo0() {
        Expression[] args = new Expression[0];
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_SingleArgReturningEvalContext_znSV1() {
        Expression[] args = new Expression[1];
        EvalContext context = mock(EvalContext.class);
        EvalContext argEvalContext = mock(EvalContext.class);
        args[0] = mock(Expression.class);
        when(args[0].compute(context)).thenReturn(argEvalContext);
        CoreOperationUnion union = new CoreOperationUnion(args);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
        verify(args[0], times(1)).compute(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_SingleArgReturningNonEvalContext_ZGxJ2() {
        Expression[] args = new Expression[1];
        EvalContext context = mock(EvalContext.class);
        Object nonEvalContextValue = new Object();
        args[0] = mock(Expression.class);
        when(args[0].compute(context)).thenReturn(nonEvalContextValue);
        CoreOperationUnion union = new CoreOperationUnion(args);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(nonEvalContextValue)).thenReturn(mock(EvalContext.class));
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
        verify(args[0], times(1)).compute(context);
        verify(rootContext, times(1)).getConstantContext(nonEvalContextValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_MultipleArgsAllReturningEvalContext_pLRi3() {
        Expression[] args = new Expression[2];
        EvalContext context = mock(EvalContext.class);
        EvalContext argEvalContext1 = mock(EvalContext.class);
        EvalContext argEvalContext2 = mock(EvalContext.class);
        args[0] = mock(Expression.class);
        args[1] = mock(Expression.class);
        when(args[0].compute(context)).thenReturn(argEvalContext1);
        when(args[1].compute(context)).thenReturn(argEvalContext2);
        CoreOperationUnion union = new CoreOperationUnion(args);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
        verify(args[0], times(1)).compute(context);
        verify(args[1], times(1)).compute(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_MultipleArgsMixedReturnTypes_QaxR4() {
        Expression[] args = new Expression[2];
        EvalContext context = mock(EvalContext.class);
        EvalContext argEvalContext = mock(EvalContext.class);
        Object nonEvalContextValue = new Object();
        args[0] = mock(Expression.class);
        args[1] = mock(Expression.class);
        when(args[0].compute(context)).thenReturn(argEvalContext);
        when(args[1].compute(context)).thenReturn(nonEvalContextValue);
        CoreOperationUnion union = new CoreOperationUnion(args);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(nonEvalContextValue)).thenReturn(mock(EvalContext.class));
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
        verify(args[0], times(1)).compute(context);
        verify(args[1], times(1)).compute(context);
        verify(rootContext, times(1)).getConstantContext(nonEvalContextValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ArgsLengthInitialization_OUvr5_1() {
        Expression[] args = new Expression[3];
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ReturnsUnionContext_kKjY6() {
        Expression[] args = new Expression[1];
        EvalContext context = mock(EvalContext.class);
        EvalContext argEvalContext = mock(EvalContext.class);
        args[0] = mock(Expression.class);
        when(args[0].compute(context)).thenReturn(argEvalContext);
        CoreOperationUnion union = new CoreOperationUnion(args);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
    }
}