/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletRequestHandler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyValidRequest_jSgu0() {
        ServletRequestAndContext mockRequestAndContext = mock(ServletRequestAndContext.class);
        ServletRequest mockServletRequest = mock(ServletRequest.class);
        when(mockRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
        ServletRequestHandler handler = new ServletRequestHandler();
        handler.setProperty(mockRequestAndContext, "testProperty", "testValue");
        verify(mockServletRequest).setAttribute("testProperty", "testValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithEmptyParameterValues_EGKC1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest request = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(request);
        when(request.getParameterValues("testProperty")).thenReturn(new String[]{});
        Object result = handler.getProperty(bean, "testProperty");
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithSingleParameterValue_IScA2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest request = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(request);
        when(request.getParameterValues("testProperty")).thenReturn(new String[]{"value"});
        Object result = handler.getProperty(bean, "testProperty");
        assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithMultipleParameterValues_QazN3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest request = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(request);
        when(request.getParameterValues("testProperty")).thenReturn(new String[]{"value1", "value2"});
        Object result = handler.getProperty(bean, "testProperty");
        assertArrayEquals(new String[]{"value1", "value2"}, (String[]) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithAttribute_DgeA4() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest request = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(request);
        when(request.getParameterValues("testProperty")).thenReturn(null);
        when(request.getAttribute("testProperty")).thenReturn("attributeValue");
        Object result = handler.getProperty(bean, "testProperty");
        assertEquals("attributeValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithValidInput_DtDB9_1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Vector<String> attributes = new Vector<>();
        attributes.add("attribute1");
        attributes.add("attribute2");
        Vector<String> parameters = new Vector<>();
        parameters.add("param1");
        parameters.add("param2");
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes.elements());
        when(servletRequest.getParameterNames()).thenReturn(parameters.elements());
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("attribute1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithAttributesOnly_GPSZ1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Vector<String> attributes = new Vector<>();
        attributes.add("attribute1");
        attributes.add("attribute2");
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes.elements());
        when(servletRequest.getParameterNames()).thenReturn(new Vector<String>().elements());
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("attribute1"));
        assertTrue(set.contains("attribute2"));
        assertEquals(2, set.size());
    }
}