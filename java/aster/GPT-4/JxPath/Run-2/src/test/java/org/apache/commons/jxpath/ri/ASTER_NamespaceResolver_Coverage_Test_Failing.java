/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceResolver_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNamespaceURI_UFVN7() {
        NodePointer mockPointer = mock(NodePointer.class);
        assertNull("Expected null when namespace URI is null", NamespaceResolver.getPrefix(mockPointer, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullPointer_CPwP0() {
        assertNull("Expected null when pointer is null", NamespaceResolver.getPrefix(null, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NoNamespaceIterator_uhsh1() {
        NodePointer mockPointer = mock(NodePointer.class);
        when(mockPointer.namespaceIterator()).thenReturn(null);
        assertNull("Expected null when no namespace iterator is available", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_EmptyNamespaceIterator_DTBl2() {
        NodePointer mockPointer = mock(NodePointer.class);
        NodeIterator mockIterator = mock(NodeIterator.class);
        when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
        when(mockIterator.setPosition(anyInt())).thenReturn(false);
        assertNull("Expected null when namespace iterator is empty", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NamespaceMatchButEmptyPrefix_iMDH3() {
        NodePointer mockPointer = mock(NodePointer.class);
        NodeIterator mockIterator = mock(NodeIterator.class);
        NodePointer mockNsPointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
        when(mockIterator.setPosition(anyInt())).thenReturn(true).thenReturn(false);
        when(mockIterator.getNodePointer()).thenReturn(mockNsPointer);
        when(mockNsPointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNsPointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("");
        assertNull("Expected null when namespace URI matches but prefix is empty", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NamespaceMatchAndNonEmptyPrefix_JSKH4() {
        NodePointer mockPointer = mock(NodePointer.class);
        NodeIterator mockIterator = mock(NodeIterator.class);
        NodePointer mockNsPointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
        when(mockIterator.setPosition(anyInt())).thenReturn(true).thenReturn(false);
        when(mockIterator.getNodePointer()).thenReturn(mockNsPointer);
        when(mockNsPointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNsPointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("ex");
        assertEquals("Expected 'ex' when namespace URI matches and prefix is non-empty", "ex", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NoMatchInCurrentButMatchInParent_myXR5() {
        NodePointer mockPointer = mock(NodePointer.class);
        NodePointer mockParentPointer = mock(NodePointer.class);
        NodeIterator mockIterator = mock(NodeIterator.class);
        NodeIterator mockParentIterator = mock(NodeIterator.class);
        NodePointer mockNsPointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
        when(mockIterator.setPosition(anyInt())).thenReturn(false);
        when(mockPointer.getParent()).thenReturn(mockParentPointer);
        when(mockParentPointer.namespaceIterator()).thenReturn(mockParentIterator);
        when(mockParentIterator.setPosition(anyInt())).thenReturn(true).thenReturn(false);
        when(mockParentIterator.getNodePointer()).thenReturn(mockNsPointer);
        when(mockNsPointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNsPointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("ex");
        assertEquals("Expected 'ex' when no match in current but match in parent", "ex", NamespaceResolver.getPrefix(mockPointer, "http://example.com"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_EmptyNamespaceURI_VHPE8() {
        NodePointer mockPointer = mock(NodePointer.class);
        assertNull("Expected null when namespace URI is empty", NamespaceResolver.getPrefix(mockPointer, ""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneThrowsCloneNotSupportedException_Fbmz0_RkLH0_fid1() {
    NamespaceResolver mockResolver = mock(NamespaceResolver.class);
    when(mockResolver.clone()).thenThrow(RuntimeException.class);
    NamespaceResolver resolver = new NamespaceResolver();
    NamespaceResolver clonedResolver = (NamespaceResolver) resolver.clone();
    assertNull(clonedResolver);
}
}