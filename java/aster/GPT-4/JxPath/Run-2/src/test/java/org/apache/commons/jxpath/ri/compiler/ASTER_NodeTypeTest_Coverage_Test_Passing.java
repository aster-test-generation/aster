/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeTypeTest_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringNode_YfNg0() {
        assertEquals("node", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_NODE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringText_HNNi1() {
        assertEquals("text", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_TEXT));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringProcessingInstruction_Ghtu2() {
        assertEquals("processing-instruction", NodeTypeTest.nodeTypeToString(Compiler.NODE_TYPE_PI));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringUnknown_mZlb3() {
        assertEquals("UNKNOWN", NodeTypeTest.nodeTypeToString(999)); // Assuming 999 is not a defined node type
    }
}