/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceContext_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionGreaterThanCurrentAndNextNodeTrue_pAbr1() {
        SelfContext parentContext = mock(SelfContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NamespaceContext context = new NamespaceContext(parentContext, nodeTest);
        when(context.getCurrentPosition()).thenReturn(1, 2, 3);
        when(context.nextNode()).thenReturn(true);
        boolean result = context.setPosition(3);
        assertTrue(result);
        verify(context, times(2)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionGreaterThanCurrentAndNextNodeFalse_oNFW2() {
        SelfContext parentContext = mock(SelfContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NamespaceContext context = new NamespaceContext(parentContext, nodeTest);
        when(context.getCurrentPosition()).thenReturn(1);
        when(context.nextNode()).thenReturn(false);
        boolean result = context.setPosition(3);
        assertFalse(result);
        verify(context, times(1)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionEqualToCurrent_CVSk3() {
        SelfContext parentContext = mock(SelfContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NamespaceContext context = new NamespaceContext(parentContext, nodeTest);
        when(context.getCurrentPosition()).thenReturn(3);
        boolean result = context.setPosition(3);
        assertTrue(result);
        verify(context, never()).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionZero_huRU4() {
        SelfContext parentContext = mock(SelfContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NamespaceContext context = new NamespaceContext(parentContext, nodeTest);
        when(context.getCurrentPosition()).thenReturn(0);
        boolean result = context.setPosition(0);
        assertTrue(result);
        verify(context, never()).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_CurrentNodePointerIsNull_EqJY1() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(false);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }
}