/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionAttributeNodeIterator_Test_Passing {
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeIterator mockNodeIterator;
private QName name;
@InjectMocks
    private CollectionAttributeNodeIterator collectionAttributeNodeIterator;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator() throws Exception {
        name = new QName("testName");
        collectionAttributeNodeIterator = new CollectionAttributeNodeIterator(new CollectionPointer(new Object(), Locale.getDefault()), name);
        // Setup the behavior of the mock
        when(mockNodePointer.attributeIterator(name)).thenReturn(mockNodeIterator);
        // Execute the method under test
        NodeIterator result = collectionAttributeNodeIterator.getElementNodeIterator(mockNodePointer);
        // Verify the interaction with the mock
        verify(mockNodePointer).attributeIterator(name);
        // Assert that the result is as expected
        assertEquals(mockNodeIterator, result, "The returned NodeIterator should be the one generated by attributeIterator.");
    }
}