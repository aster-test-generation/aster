/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionLessThanCurrent_RvVv0() {
        SelfContext parentContext = mock(SelfContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NamespaceContext context = new NamespaceContext(parentContext, nodeTest);
        when(context.getCurrentPosition()).thenReturn(5);
        context.setPosition(3);
        verify(context, times(1)).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnFalseDueToNodeTestNotBeingNodeNameTest_wOFP0() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        SelfContext parentContext = mock(SelfContext.class);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WildcardNodeNameTest_Ezmu2() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        NodePointer nodePointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(nodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NonWildcardNodeNameTest_hTVg3() {
        QName testName = new QName(null, "test");
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(false);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodePointer.namespacePointer(testName.getName())).thenReturn(nodePointer);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorIsNull_hdlh4() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodePointer.namespaceIterator()).thenReturn(null);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorSetPositionFails_TACh5() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        NodePointer nodePointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(iterator.setPosition(anyInt())).thenReturn(false);
        when(nodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SuccessfulIteration_bojH6() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        NodePointer nodePointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        when(nodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WildcardNodeNameTest_Ezmu2_fid1() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNodeName()).thenReturn(new QName(null, "test"));
        NodePointer nodePointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(nodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeNameTest);
        boolean result = namespaceContext.nextNode();
        assertTrue(result);
    }
}