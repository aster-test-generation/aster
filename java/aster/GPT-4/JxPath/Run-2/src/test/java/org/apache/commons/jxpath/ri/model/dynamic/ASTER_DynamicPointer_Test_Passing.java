/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.JXPathBeanInfo;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
DynamicPointer dynamicPointer;
private Object bean;
private QName name;
private PageContextHandler handler;
private Locale locale;
@Mock
    private QName mockQName;
@Mock
    private PageContextHandler mockPageContextHandler;
@Mock
    private Locale mockLocale;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private NodePointer mockStartWith;
@Mock
    private PropertyIterator mockPropertyIterator;
@Mock
    private DynamicPropertyPointer expectedPropertyPointer;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private Object mockBean;
@Mock
    private PageContextHandler mockHandler;
@Mock
    private JXPathBeanInfo mockBeanInfo;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported(), "Dynamic property declaration should be supported.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicPropertyDeclarationSupported_xDZV0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.equals(dynamicPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertFalse(dynamicPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object differentObject = new Object();
        assertFalse(dynamicPointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_ReturnsFalse() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object newBean = new Object();
        DynamicPointer other = new DynamicPointer(name, newBean, handler, locale);
        assertFalse(dynamicPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName newName = mock(QName.class);
        DynamicPointer other = new DynamicPointer(newName, bean, handler, locale);
        when(name.equals(newName)).thenReturn(false);
        assertFalse(dynamicPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameAndBean_ReturnsTrue() {
        bean = new Object();
        name = mock(QName.class);
        handler = mock(PageContextHandler.class);
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer other = new DynamicPointer(name, bean, handler, locale);
        when(name.equals(any())).thenReturn(true);
        assertTrue(dynamicPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_gKOt0() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_WDUh1() {
        QName qName1 = new QName("test");
        Object bean1 = new Object();
        PageContextHandler handler1 = new PageContextHandler();
        Locale locale1 = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName1, bean1, handler1, locale1);
        QName qName2 = new QName("test");
        Object bean2 = bean1;
        PageContextHandler handler2 = new PageContextHandler();
        Locale locale2 = new Locale("en", "US");
        DynamicPointer pointer2 = new DynamicPointer(qName2, bean2, handler2, locale2);
        assertTrue(pointer1.equals(pointer2) && pointer2.equals(pointer1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_qBwC2() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_gwTs3() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        Object other = new Object();
        assertFalse(pointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_vFRB4() {
        QName qName = new QName("test");
        Object bean1 = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean1, handler, locale);
        Object bean2 = new Object();
        DynamicPointer pointer2 = new DynamicPointer(qName, bean2, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentQName_ExLN5() {
        QName qName1 = new QName("test1");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName1, bean, handler, locale);
        QName qName2 = new QName("test2");
        DynamicPointer pointer2 = new DynamicPointer(qName2, bean, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_IdenticalProperties_VIGD6() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        QName qName = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(dynamicPointer.isCollection(), "DynamicPointer should not be a collection");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_AxZg0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertFalse(dynamicPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        dynamicPointer = new DynamicPointer(name, bean, null, null);
        // Mock the behavior of the hashCode method of the mocked QName object
        when(name.hashCode()).thenReturn(123);
        // Calculate expected hash code
        int expectedHashCode = System.identityHashCode(bean) + 123;
        // Assert that the actual hash code matches the expected hash code
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName() {
        dynamicPointer = new DynamicPointer(name, bean, null, null);
        // Create a DynamicPointer with a null QName
        DynamicPointer dynamicPointerWithNullName = new DynamicPointer(null, bean, null, null);
        // Expected hash code when name is null
        int expectedHashCode = System.identityHashCode(bean);
        // Assert that the actual hash code matches the expected hash code
        assertEquals(expectedHashCode, dynamicPointerWithNullName.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_JPys0() {
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + name.hashCode();
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_kVQY1() {
        QName name = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean);
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_1() throws Exception {
        name = new QName("testName");
        handler = mock(PageContextHandler.class);
        bean = new Object();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName attributeName = new QName("attributeName");
        NodeIterator result = dynamicPointer.attributeIterator(attributeName);
        assertNotNull(result, "The result of attributeIterator should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_2() throws Exception {
        name = new QName("testName");
        handler = mock(PageContextHandler.class);
        bean = new Object();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName attributeName = new QName("attributeName");
        NodeIterator result = dynamicPointer.attributeIterator(attributeName);
        assertTrue(result instanceof DynamicAttributeIterator, "The result should be an instance of DynamicAttributeIterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_EAal0_1() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(qName);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_EAal0_2() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(qName);
    assertTrue(result instanceof DynamicAttributeIterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Mock the behavior of the QName object
        when(name.getName()).thenReturn("ExpectedName");
        // Initialize DynamicPointer with the mocked QName
        dynamicPointer = new DynamicPointer(name, new Object(), new PageContextHandler(), null);
        // Execute
        QName result = dynamicPointer.getName();
        // Verify the result
        assertEquals(name, result, "The getName method should return the mocked QName object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_kadc0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    QName result = dynamicPointer.getName();
    assertEquals("testName", result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_DmtG0_1() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_DmtG0_2() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertTrue(result instanceof DynamicPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithNonNullParent() throws Exception {
        // This setup assumes the DynamicPointer class has a way to set its parent, which is not shown in the provided code.
        // If such a method does not exist, the DynamicPointer class will need to be adjusted to allow injecting a parent.
        // Setup the dynamicPointer with a mock parent
        when(mockParent.asPath()).thenReturn("/parentPath");
        dynamicPointer = new DynamicPointer(mockParent, new QName("test"), new Object(), new PageContextHandler());
        // Execute
        String result = dynamicPointer.asPath();
        // Verify
        assertEquals("/parentPath", result, "Path should be the same as the parent's path when parent is not null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_pStA0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    String expectedPath = "/";
    String actualPath = dynamicPointer.asPath();
    assertEquals(expectedPath, actualPath);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int length = dynamicPointer.getLength();
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_SRlT0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    int length = dynamicPointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        bean = new Object();
        QName qName = new QName("testQName");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        assertEquals(bean, dynamicPointer.getBaseValue(), "The getBaseValue method should return the bean object set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_XYyS0() {
    QName qName = new QName("testName");
    Object expectedBean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, expectedBean, handler, locale);
    Object resultBean = dynamicPointer.getBaseValue();
    assertEquals(expectedBean, resultBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsNull() throws Exception {
        dynamicPointer = new DynamicPointer(mockQName, mockBean, mockHandler, mockLocale);
        when(dynamicPointer.getNode()).thenReturn(null);
        assertTrue(dynamicPointer.isLeaf(), "Expected isLeaf to return true when node is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsAtomic() throws Exception {
        dynamicPointer = new DynamicPointer(mockQName, mockBean, mockHandler, mockLocale);
        Object node = new Object();
        when(dynamicPointer.getNode()).thenReturn(node);
        when(JXPathIntrospector.getBeanInfo(node.getClass())).thenReturn(mockBeanInfo);
        when(mockBeanInfo.isAtomic()).thenReturn(true);
        assertTrue(dynamicPointer.isLeaf(), "Expected isLeaf to return true when node is atomic");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeIsNotAtomic() throws Exception {
        dynamicPointer = new DynamicPointer(mockQName, mockBean, mockHandler, mockLocale);
        Object node = new Object();
        when(dynamicPointer.getNode()).thenReturn(node);
        when(JXPathIntrospector.getBeanInfo(node.getClass())).thenReturn(mockBeanInfo);
        when(mockBeanInfo.isAtomic()).thenReturn(false);
        assertFalse(dynamicPointer.isLeaf(), "Expected isLeaf to return false when node is not atomic");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_IqOO0() {
        QName qName = new QName("test");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, null, new PageContextHandler(), Locale.getDefault());
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_JZYF1() {
        QName qName = new QName("test");
        String atomicValue = "Atomic String";
        DynamicPointer dynamicPointer = new DynamicPointer(qName, atomicValue, new PageContextHandler(), Locale.getDefault());
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_gBXB2() {
        QName qName = new QName("test");
        List<String> nonAtomicValue = new ArrayList<>();
        nonAtomicValue.add("Item1");
        nonAtomicValue.add("Item2");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, nonAtomicValue, new PageContextHandler(), Locale.getDefault());
        assertFalse(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithNullParent_yAIL0() throws Exception {
    DynamicPointer dynamicPointer = new DynamicPointer(new QName("test"), new Object(), new PageContextHandler(), Locale.getDefault());
    String result = dynamicPointer.asPath();
    assertEquals("/", result, "Path should be root '/' when parent is null.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        name = new QName("testName");
        handler = mock(PageContextHandler.class);
        bean = new Object();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName attributeName = new QName("attributeName");
        NodeIterator result = dynamicPointer.attributeIterator(attributeName);
        assertNotNull(result, "The result of attributeIterator should not be null");
        assertTrue(result instanceof DynamicAttributeIterator, "The result should be an instance of DynamicAttributeIterator");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_EAal0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(qName);
    assertNotNull(result);
    assertTrue(result instanceof DynamicAttributeIterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_DmtG0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);
    assertTrue(result instanceof DynamicPropertyPointer);
}
}