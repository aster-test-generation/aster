/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.ArrayList;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CollectionPointer_Coverage_Test_Passing {
    private static final int WHOLE_COLLECTION = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCollections_tnlp0() {
        Object collection1 = new Object();
        Object collection2 = new Object();
        CollectionPointer cp1 = new CollectionPointer(collection1, java.util.Locale.getDefault());
        CollectionPointer cp2 = new CollectionPointer(collection2, java.util.Locale.getDefault());
        assertFalse(cp1.equals(cp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_WhenIndexIsNotWholeCollection_Usjx0() {
        Object collection = new Object();
        Locale locale = Locale.getDefault();
        CollectionPointer cp = new CollectionPointer(collection, locale);
        boolean result = cp.isContainer();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndIndexNotWholeCollection_OtQd0_tMtE0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(1);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(2);
    String result = pointer.asPath();
    assertEquals("/parentPath/.[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_NotWholeCollection_YNds1_teji0() {
    QName name = new QName("testName");
    Object collection = new ArrayList();
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    VariablePointer mockVariablePointer = mock(VariablePointer.class);
    NodeIterator expectedIterator = mock(NodeIterator.class);
    when(mockVariablePointer.attributeIterator(name)).thenReturn(expectedIterator);
    NodeIterator result = mockVariablePointer.attributeIterator(name);
    assertEquals(expectedIterator, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndIndexWholeCollection_emCh1_WAFD0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(NodePointer.WHOLE_COLLECTION);
    String result = pointer.asPath();
    assertEquals("/parentPath", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndParentIndexWholeCollection_SlEW2_pHDM0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(WHOLE_COLLECTION);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(2);
    String result = pointer.asPath();
    assertEquals("/parentPath/.[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParentAndIndexNotWholeCollection_LAop3_UiFP0() {
    CollectionPointer pointer = new CollectionPointer(null, new Object());
    pointer.setIndex(2);
    String result = pointer.asPath();
    assertEquals("/.[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParentAndIndexWholeCollection_eJCd4_HkgX0() {
    CollectionPointer pointer = new CollectionPointer(null, new Object());
    String result = pointer.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndDifferentIndexScenarios_gawW6_gUGs0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(1);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(0);
    String result = pointer.asPath();
    assertEquals("/parentPath/.[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndIndexZero_PoVk7_kANj0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(WHOLE_COLLECTION);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(0);
    String result = pointer.asPath();
    assertEquals("/parentPath/.[1]", result);
}
}