/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnionContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithEmptyContexts_zrxu0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext[] contexts = new EvalContext[0];
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithSingleEmptyContext_pEOl1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        when(context.nextSet()).thenReturn(false);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithOneContextOneSetNoNodes_HQeP2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        when(context.nextSet()).thenReturn(true, false);
        when(context.nextNode()).thenReturn(false);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithOneContextOneSetOneNode_MFna3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.nextSet()).thenReturn(true, false);
        when(context.nextNode()).thenReturn(true, false);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithMultipleContexts_IlsR4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context1 = mock(EvalContext.class);
        EvalContext context2 = mock(EvalContext.class);
        NodePointer nodePointer1 = mock(NodePointer.class);
        NodePointer nodePointer2 = mock(NodePointer.class);
        when(context1.nextSet()).thenReturn(true, false);
        when(context1.nextNode()).thenReturn(true, false);
        when(context1.getCurrentNodePointer()).thenReturn(nodePointer1);
        when(context2.nextSet()).thenReturn(true, false);
        when(context2.nextNode()).thenReturn(true, false);
        when(context2.getCurrentNodePointer()).thenReturn(nodePointer2);
        EvalContext[] contexts = new EvalContext[] { context1, context2 };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithDuplicateNodes_GUls5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.nextSet()).thenReturn(true, false);
        when(context.nextNode()).thenReturn(true, true, false);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithMultipleSetsAndNodes_SHvq6() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer1 = mock(NodePointer.class);
        NodePointer nodePointer2 = mock(NodePointer.class);
        when(context.nextSet()).thenReturn(true, true, false);
        when(context.nextNode()).thenReturn(true, false, true, false);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer1, nodePointer2);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithSortingAndAdding_fFND7() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer1 = mock(NodePointer.class);
        NodePointer nodePointer2 = mock(NodePointer.class);
        when(context.nextSet()).thenReturn(true, false);
        when(context.nextNode()).thenReturn(true, true, false);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer1, nodePointer2);
        EvalContext[] contexts = new EvalContext[] { context };
        UnionContext unionContext = new UnionContext(parentContext, contexts);
        unionContext.setPosition(1);
    }
}