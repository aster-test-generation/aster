/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
@InjectMocks
    private VariablePointer variablePointer;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory factory;
@Mock
    private QName qName;
@Mock
    private Variables variables;
@Mock
    private JXPathContext parentContext;
@Mock
    private QName name;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodePointer clonedNodePointer;
    private NodePointer valuePointer;
    private boolean actual;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_BothIndexesEqual() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(5);
        when(pointer2.getIndex()).thenReturn(5);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(0, result, "Expected pointers to be considered equal");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_FirstIndexGreater() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(10);
        when(pointer2.getIndex()).thenReturn(5);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(5, result, "Expected first pointer to be considered greater");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SecondIndexGreater() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(3);
        when(pointer2.getIndex()).thenReturn(8);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(-5, result, "Expected second pointer to be considered greater");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithFactoryFailure_zfNo3() {
        QName name = new QName("testName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, name);
        JXPathContext context = JXPathContext.newContext(new Object());
        int index = 0; // Valid index but factory fails
        try {
            variablePointer.createChild(context, name, index);
            fail("Should have thrown JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
            assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_hNkU0() {
        QName qName = new QName("testName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodeIterator result = variablePointer.attributeIterator(qName);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_dCQI0() {
        QName qName = new QName("testPrefix", "testLocalName");
        VariablePointer variablePointer = new VariablePointer(qName);
        QName result = variablePointer.getName();
        assertEquals("testPrefix:testLocalName", result.getPrefix() + ":" + result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNonNullValue_DCwh1() {
        KeywordVariables kv = new KeywordVariables("keyword", new Object());
        QName qName = new QName("testPrefix", "testLocalName");
        VariablePointer vp = new VariablePointer(kv, qName);
        assertEquals(ValueUtils.getLength(new Object()), vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithBaseValueZeroLength_iPrS2() {
        KeywordVariables kv = new KeywordVariables("keyword", "");
        QName qName = new QName("testPrefix", "testLocalName");
        VariablePointer vp = new VariablePointer(kv, qName);
        assertEquals(1, vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_Kkiw1() {
        QName qName = new QName("testName");
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new String("AtomicValue"));
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertTrue(variablePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_baCz0() {
        QName qName = new QName("namespace", "localName");
        VariablePointer pointer = new VariablePointer(qName);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_JilO1() {
        QName qName = new QName("namespace", "localName");
        VariablePointer pointer = new VariablePointer(qName);
        Object other = new Object();
        assertFalse(pointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_XFSN2() {
        QName qName = new QName("namespace", "localName");
        VariablePointer pointer = new VariablePointer(qName);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentVariablesSameName_xfkj3() {
        QName qName = new QName("namespace", "localName");
        KeywordVariables variables1 = new KeywordVariables("keyword1", new Object());
        KeywordVariables variables2 = new KeywordVariables("keyword2", new Object());
        VariablePointer pointer1 = new VariablePointer(variables1, qName);
        VariablePointer pointer2 = new VariablePointer(variables2, qName);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameVariablesDifferentName_nBYW4() {
        QName qName1 = new QName("namespace", "localName1");
        QName qName2 = new QName("namespace", "localName2");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer1 = new VariablePointer(variables, qName1);
        VariablePointer pointer2 = new VariablePointer(variables, qName2);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameVariablesSameName_vCbt5() {
        QName qName = new QName("namespace", "localName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer1 = new VariablePointer(variables, qName);
        VariablePointer pointer2 = new VariablePointer(variables, qName);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_ActualFalse_ThrowsJXPathException_xlnE2() {
        QName qName = new QName("undefinedVariable");
        VariablePointer variablePointer = new VariablePointer(qName);
        try {
            NodePointer result = variablePointer.getImmediateValuePointer();
            result.getImmediateNode();
            fail("Expected JXPathException to be thrown for undefined variable");
        } catch (JXPathException ex) {
            assertEquals("Undefined variable: undefinedVariable", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_VyqD0() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isContainer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathSimple_AHjN0() {
        QName qName = new QName("simpleName");
        VariablePointer variablePointer = new VariablePointer(qName);
        String result = variablePointer.asPath();
        assertEquals("$simpleName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_SaQz1() {
        QName qName = new QName("indexedName");
        VariablePointer variablePointer = new VariablePointer(qName);
        variablePointer.index = 2; // Assuming index is publicly accessible
        String result = variablePointer.asPath();
        assertEquals("$indexedName[3]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeyword_ogDe2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("keywordName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        String result = variablePointer.asPath();
        assertEquals("$keywordName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithPrefixAndLocalName_tSUS3() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        String result = variablePointer.asPath();
        assertEquals("$prefix:localName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordAndIndex_puXM4() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("keywordIndexedName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        variablePointer.index = 5; // Assuming index is publicly accessible
        String result = variablePointer.asPath();
        assertEquals("$keywordIndexedName[6]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithComplexNameAndIndex_cRrB5() {
        QName qName = new QName("complex", "name");
        VariablePointer variablePointer = new VariablePointer(qName);
        variablePointer.index = 0; // Assuming index is publicly accessible
        String result = variablePointer.asPath();
        assertEquals("$complex:name[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueWithUndefinedVariable_HxLl0() {
    QName qName = new QName("undefinedVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    try {
        variablePointer.getBaseValue();
        fail("Expected JXPathException to be thrown for undefined variable");
    } catch (JXPathException e) {
        assertEquals("Undefined variable: undefinedVariable", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariableDeclaredInCurrentContext_LopV0() throws Exception {
    when(name.toString()).thenReturn("testVariable");
    when(context.getVariables()).thenReturn(variables);
    when(context.getParentContext()).thenReturn(parentContext);
    when(parentContext.getVariables()).thenReturn(null); // No variables in parent context
    when(parentContext.getParentContext()).thenReturn(null); // No further parent context
    when(variables.isDeclaredVariable("testVariable")).thenReturn(true);
    variablePointer.findVariables(context);
    assertTrue(variablePointer.isActual(), "Variable should be marked as actual when declared in the current context.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesWhenVariableIsDeclared_EmbI0_oWeH0() {
    JXPathContext parentContext = null;
    Object contextBean = new Object();
    JXPathContext context = JXPathContext.newContext(parentContext, contextBean);
    Variables variables = context.getVariables();
    QName qName = new QName("variableName");
    VariablePointer variablePointer = new VariablePointer(qName);
    variables.declareVariable(qName.toString(), new Object());
    variablePointer.findVariables(context);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesWhenVariableIsNotDeclared_PwCs1_Hkwo0() {
    JXPathContext parentContext = null;
    Object contextBean = new Object();
    JXPathContext context = JXPathContext.newContext(parentContext, contextBean);
    QName qName = new QName("variableName");
    VariablePointer variablePointer = new VariablePointer(qName);
    variablePointer.findVariables(context);
    assertFalse(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesInParentContext_nPqK2_dKky0() {
    JXPathContext grandParentContext = null;
    Object grandParentBean = new Object();
    JXPathContext grandParent = JXPathContext.newContext(grandParentContext, grandParentBean);
    Object parentBean = new Object();
    JXPathContext parent = JXPathContext.newContext(grandParent, parentBean);
    Object childBean = new Object();
    JXPathContext child = JXPathContext.newContext(parent, childBean);
    Variables variables = grandParent.getVariables();
    QName qName = new QName("variableName");
    VariablePointer variablePointer = new VariablePointer(qName);
    variables.declareVariable(qName.toString(), new Object());
    variablePointer.findVariables(child);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_ActualTrue_ReturnsNonNull_cTAt0_lNzp0() {
    QName qName = new QName("variableName");
    VariablePointer variablePointer = new VariablePointer(qName);
    NodePointer result = variablePointer.getImmediateValuePointer();
    assertNotNull(result, "Expected non-null NodePointer when actual is true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_ActualFalse_ReturnsNullPointer_cwhe1_qKuK0() {
    QName qName = new QName("undefinedVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    NodePointer result = variablePointer.getImmediateValuePointer();
    assertTrue(result instanceof NullPointer, "Expected NullPointer when actual is false");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithFactoryFailure_zfNo3_fid1() {
        QName name = new QName("testName");
}
}