/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
@Mock
    private DOMNodePointer domNodePointerMock;
@InjectMocks
    private LangAttributePointer langAttributePointer;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private DOMNodePointer mockDOMNodePointer;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private DOMNodePointer parentNode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        // Initialization of LangAttributePointer with a mocked DOMNodePointer
        langAttributePointer = new LangAttributePointer(domNodePointerMock);
        // Arrange
        NodePointer mockNodePointer1 = mock(NodePointer.class);
        NodePointer mockNodePointer2 = mock(NodePointer.class);
        // Act
        int result = langAttributePointer.compareChildNodePointers(mockNodePointer1, mockNodePointer2);
        // Assert
        assertEquals(0, result, "The compareChildNodePointers method should always return 0 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameInstance_ShouldReturnTrue() throws Exception {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        assertTrue(langAttributePointer.equals(langAttributePointer), "The equals method should return true when comparing the same instance.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ShouldReturnFalse() throws Exception {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        assertFalse(langAttributePointer.equals(null), "The equals method should return false when comparing to null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ShouldReturnFalse() throws Exception {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        Object differentClassObject = new Object();
        assertFalse(langAttributePointer.equals(differentClassObject), "The equals method should return false when comparing to an instance of a different class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameClassDifferentInstance_ShouldReturnTrue() throws Exception {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        LangAttributePointer anotherLangAttributePointer = new LangAttributePointer(mockDomNodePointer);
        assertTrue(langAttributePointer.equals(anotherLangAttributePointer), "The equals method should return true when comparing two instances of the same class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ThrowsUnsupportedOperationException() {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        assertThrows(UnsupportedOperationException.class, () -> langAttributePointer.setValue("new value"),
                "Expected setValue to throw UnsupportedOperationException, but it did not");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode() throws Exception {
        // DOMNodePointer is mocked and injected into LangAttributePointer
        langAttributePointer = new LangAttributePointer(domNodePointerMock);
        // Arrange
        NodeTest nodeTestMock = mock(NodeTest.class);
        // Act
        boolean result = langAttributePointer.testNode(nodeTestMock);
        // Assert
        assertFalse(result, "The testNode method should return false as per implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        langAttributePointer = new LangAttributePointer(mockDOMNodePointer);
        // Act
        boolean result = langAttributePointer.isCollection();
        // Assert
        assertFalse(result, "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        // DOMNodePointer is mocked and injected into LangAttributePointer
        langAttributePointer = new LangAttributePointer(domNodePointerMock);
        // Setup
        Object expectedNode = new Object();
        when(domNodePointerMock.getBaseValue()).thenReturn(expectedNode);
        // Execution
        Object result = langAttributePointer.getImmediateNode();
        // Assertion
        assertEquals(expectedNode, result, "The returned node should match the expected node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        // Since hashCode is hardcoded to return 0, we expect 0
        assertEquals(0, langAttributePointer.hashCode(), "The hashCode should always return 0");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_1() throws Exception {
        // Assuming DOMNodePointer can be mocked or instantiated with null values
        DOMNodePointer mockNodePointer = new DOMNodePointer(null, null, null);
        langAttributePointer = new LangAttributePointer(mockNodePointer);
        QName result = langAttributePointer.getName();
        assertEquals("xml", result.getPrefix(), "Prefix should be 'xml'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_2() throws Exception {
        // Assuming DOMNodePointer can be mocked or instantiated with null values
        DOMNodePointer mockNodePointer = new DOMNodePointer(null, null, null);
        langAttributePointer = new LangAttributePointer(mockNodePointer);
        QName result = langAttributePointer.getName();
        assertEquals("lang", result.getName(), "Local name should be 'lang'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        // Initialization of LangAttributePointer with a mocked DOMNodePointer
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        // Since getNamespaceURI() method returns null as per the current implementation, we test exactly that.
        String namespaceURI = langAttributePointer.getNamespaceURI();
        assertNull(namespaceURI, "The namespace URI should be null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithNonNullParent_ReturnsCorrectPath() throws Exception {
        when(mockParent.asPath()).thenReturn("/some/path");
        langAttributePointer = new LangAttributePointer(mockParent);
        String expectedPath = "/some/path/@xml:lang";
        String actualPath = langAttributePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithTrailingSlashInParentPath_ReturnsCorrectPath() throws Exception {
        when(mockParent.asPath()).thenReturn("/some/path/");
        when(mockParent.asPath()).thenReturn("/some/path");
        langAttributePointer = new LangAttributePointer(mockParent);
        String expectedPath = "/some/path/@xml:lang";
        String actualPath = langAttributePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithEmptyParentPath_ReturnsOnlyLangAttribute() throws Exception {
        when(mockParent.asPath()).thenReturn("/some/path");
        langAttributePointer = new LangAttributePointer(mockParent);
        when(mockParent.asPath()).thenReturn("");
        String expectedPath = "/@xml:lang";
        String actualPath = langAttributePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithNullParent_ReturnsOnlyLangAttribute() throws Exception {
        when(mockParent.asPath()).thenReturn("/some/path");
        langAttributePointer = new LangAttributePointer(mockParent);
        when(mockParent.asPath()).thenReturn(null);
        String expectedPath = "/@xml:lang";
        String actualPath = langAttributePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_zXRg2() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(null);
        String result = langAttributePointer.asPath();
        assertEquals("@xml:lang", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Initialization of LangAttributePointer with a mocked DOMNodePointer
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        // Act
        int length = langAttributePointer.getLength();
        // Assert
        assertEquals(1, length, "The length should always be 1.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
        langAttributePointer = new LangAttributePointer(mockDomNodePointer);
        assertTrue(langAttributePointer.isLeaf(), "isLeaf should return true for LangAttributePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_SFeP0() {
    Locale locale = new Locale("en", "US");
    when(parentNode.getLocale()).thenReturn(locale);
    Object baseValueObject = langAttributePointer.getBaseValue();
    String baseValue = baseValueObject != null ? baseValueObject.toString() : null;
    assertEquals("en-US", baseValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Assuming DOMNodePointer can be mocked or instantiated with null values
        DOMNodePointer mockNodePointer = new DOMNodePointer(null, null, null);
        langAttributePointer = new LangAttributePointer(mockNodePointer);
        QName result = langAttributePointer.getName();
        assertEquals("xml", result.getPrefix(), "Prefix should be 'xml'");
        assertEquals("lang", result.getName(), "Local name should be 'lang'");
    }
}