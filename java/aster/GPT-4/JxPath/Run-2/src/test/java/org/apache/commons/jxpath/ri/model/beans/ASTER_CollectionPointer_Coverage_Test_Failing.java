/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CollectionPointer_Coverage_Test_Failing {
    private static final int WHOLE_COLLECTION = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChildIterator_ValuePointerChildIteratorCalled_UfDN2_skJe0() {
    Object collection = new Object();
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = mock(CollectionPointer.class);
    NodeTest test = new NodeNameTest(new QName("testNode"));
    boolean reverse = true;
    NodePointer startWith = mock(NodePointer.class);
    NodePointer valuePointer = mock(NodePointer.class);
    when(collectionPointer.getValuePointer()).thenReturn(valuePointer);
    NodeIterator expectedIterator = mock(NodeIterator.class);
    when(valuePointer.childIterator(test, reverse, startWith)).thenReturn(expectedIterator);
    NodeIterator result = collectionPointer.childIterator(test, reverse, startWith);
    assertSame(expectedIterator, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndParentIndexNotWholeCollection_PlYc5_NfpF0() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(1);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(NodePointer.WHOLE_COLLECTION);
    String result = pointer.asPath();
    assertEquals("/parentPath/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_WhenIndexIsNotWholeCollection_Usjx0_fid1() {
        Object collection = new Object();
        Locale locale = Locale.getDefault();
        CollectionPointer cp = new CollectionPointer(collection, locale);
        boolean result = cp.isContainer();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParentAndIndexWholeCollection_emCh1_WAFD0_fid1() {
    NodePointer mockParent = mock(NodePointer.class);
    when(mockParent.asPath()).thenReturn("/parentPath");
    when(mockParent.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
    CollectionPointer pointer = new CollectionPointer(mockParent, new Object());
    pointer.setIndex(NodePointer.WHOLE_COLLECTION);
    String result = pointer.asPath();
    assertEquals("/parentPath/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChildIterator_ValuePointerChildIteratorCalled_UfDN2_skJe0_fid1() {
    Object collection = new Object();
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    NodeTest test = new NodeNameTest(new QName("testNode"));
    boolean reverse = true;
    NodePointer startWith = mock(NodePointer.class);
    NodePointer valuePointer = mock(NodePointer.class);
    when(collectionPointer.getValuePointer()).thenReturn(valuePointer);
    NodeIterator expectedIterator = mock(NodeIterator.class);
    when(valuePointer.childIterator(test, reverse, startWith)).thenReturn(expectedIterator);
    NodeIterator result = collectionPointer.childIterator(test, reverse, startWith);
    assertSame(expectedIterator, result);
}
}