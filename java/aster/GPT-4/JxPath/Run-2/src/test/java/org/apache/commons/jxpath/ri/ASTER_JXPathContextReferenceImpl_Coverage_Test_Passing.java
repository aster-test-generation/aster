/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.Iterator;
import org.apache.commons.jxpath.CompiledExpression;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
import org.apache.commons.jxpath.JXPathNotFoundException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Iterator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathContextReferenceImpl_Coverage_Test_Passing {
    private Expression expression;
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_OKJe0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReferenceImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        String xpath = "/some/xpath/expression";
        Iterator result = contextReferenceImpl.iteratePointers(xpath);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_PointerNotNull_eGJi0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        String xpath = "/some/path";
        Expression expr = mock(Expression.class);
        NodePointer mockPointer = mock(NodePointer.class);
        when(context.getPointer(xpath, expr)).thenReturn(mockPointer);
        context.removePath(xpath, expr);
        verify(mockPointer).remove(); // This checks if pointer.remove() was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_PointerNull_RpFv1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        String xpath = "/some/path";
        Expression expr = mock(Expression.class);
        when(context.getPointer(xpath, expr)).thenReturn(null);
        context.removePath(xpath, expr);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_VerifyExceptionMessage_rHox3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        String xpath = "/some/path";
        Expression expr = mock(Expression.class);
        when(context.getPointer(xpath, expr)).thenThrow(new RuntimeException("Test Exception"));
        try {
            context.removePath(xpath, expr);
        } catch (JXPathException ex) {
            assertEquals("Exception trying to remove xpath /some/path", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullXpath_Okrh1() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        String xpath = null;
        Object value = "New Value";
        try {
            contextImpl.setValue(xpath, value);
            fail("Expected an IllegalArgumentException for null xpath");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsEvalContext_Qmtn0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        EvalContext evalContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(expr.computeValue(any())).thenReturn(evalContext);
        when(evalContext.getSingleNodePointer()).thenReturn(nodePointer);
        Pointer result = context.getPointer("dummyXPath", expr);
        assert result instanceof Pointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsPointer_pJuL1() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        Pointer pointer = mock(Pointer.class);
        when(expr.computeValue(any())).thenReturn(pointer);
        Pointer result = context.getPointer("dummyXPath", expr);
        assert result == pointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsPointer_NotLenient_NotActual_KFss2() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(expr.computeValue(any())).thenReturn(nodePointer);
        when(context.isLenient()).thenReturn(false);
        when(nodePointer.isActual()).thenReturn(false);
        try {
            context.getPointer("dummyXPath", expr);
        } catch (JXPathNotFoundException e) {
            assert e.getMessage().contains("No pointer for xpath: dummyXPath");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsNotPointer_snkw3() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        Object nonPointerResult = new Object();
        when(expr.computeValue(any())).thenReturn(nonPointerResult);
        Pointer result = context.getPointer("dummyXPath", expr);
        assert result instanceof NodePointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsPointer_Lenient_NotActual_ymTE4() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(expr.computeValue(any())).thenReturn(nodePointer);
        when(context.isLenient()).thenReturn(true);
        when(nodePointer.isActual()).thenReturn(false);
        Pointer result = context.getPointer("dummyXPath", expr);
        assert result == nodePointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_ResultIsPointer_NotLenient_Actual_yepF5() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Expression expr = mock(Expression.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(expr.computeValue(any())).thenReturn(nodePointer);
        when(context.isLenient()).thenReturn(false);
        when(nodePointer.isActual()).thenReturn(true);
        Pointer result = context.getPointer("dummyXPath", expr);
        assert result == nodePointer;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRelativeContextWithNonNullNode_Wtim1() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
        Object node = new Object();
        Pointer mockPointer = mock(Pointer.class);
        when(mockPointer.getNode()).thenReturn(node);
        JXPathContext result = contextReference.getRelativeContext(mockPointer);
        assertNotNull(result);
        assertTrue(result instanceof JXPathContextReferenceImpl);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValueAndTypeCompatible_wrFE0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any())).thenReturn("Test String");
        Object result = context.getValue("dummy/xpath", expr, String.class);
        assertEquals("Test String", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullValue_PaCL2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any())).thenReturn(null);
        Object result = context.getValue("dummy/xpath", expr, String.class);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValueAndNullRequiredType_sSBf3() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any())).thenReturn("Test String");
        Object result = context.getValue("dummy/xpath", expr, null);
        assertEquals("Test String", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValueAndTypeConversion_dVwJ4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        when(expr.computeValue(any())).thenReturn("123");
        Object result = context.getValue("dummy/xpath", expr, Integer.class);
        assertEquals(123, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_WhenNotSealed_RCYm0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(false);
        contextReference.namespaceResolver = namespaceResolver;
        Pointer pointer = mock(NodePointer.class);
        contextReference.setNamespaceContextPointer(pointer);
        verify(namespaceResolver, never()).clone();
        verify(namespaceResolver).setNamespaceContextPointer((NodePointer) pointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_WhenSealed_kWsa1() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        NamespaceResolver clonedResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(true);
        when(namespaceResolver.clone()).thenReturn(clonedResolver);
        contextReference.namespaceResolver = namespaceResolver;
        Pointer pointer = mock(NodePointer.class);
        contextReference.setNamespaceContextPointer(pointer);
        verify(namespaceResolver).clone();
        verify(clonedResolver).setNamespaceContextPointer((NodePointer) pointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_WithNullPointer_MCzV2() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(false);
        contextReference.namespaceResolver = namespaceResolver;
        Pointer pointer = null;
        contextReference.setNamespaceContextPointer(pointer);
        verify(namespaceResolver, never()).clone();
        verify(namespaceResolver).setNamespaceContextPointer(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_WhenSealedAndCloneFails_zZlD3() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(true);
        when(namespaceResolver.clone()).thenThrow(new RuntimeException("Clone not supported"));
        contextReference.namespaceResolver = namespaceResolver;
        Pointer pointer = mock(NodePointer.class);
        try {
            contextReference.setNamespaceContextPointer(pointer);
            fail("Expected an exception to be thrown");
        } catch (RuntimeException e) {
            assertEquals("Clone not supported", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_GMtJ0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        contextReference.namespaceResolver = namespaceResolver; // Assuming there's a way to set this, e.g., via a setter or directly if it's public
        when(namespaceResolver.getNamespaceURI("testPrefix")).thenReturn("http://example.com/test");
        String result = contextReference.getNamespaceURI("testPrefix");
        assertEquals("http://example.com/test", result);
        verify(namespaceResolver).getNamespaceURI("testPrefix");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWhenNotSealed_qnEH0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(false);
        JXPathContextReferenceImpl contextImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        contextImpl.namespaceResolver = namespaceResolver;
        contextImpl.registerNamespace("prefix", "namespaceURI");
        verify(namespaceResolver, times(1)).registerNamespace("prefix", "namespaceURI");
        verify(namespaceResolver, never()).clone();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithNullPrefix_Jxaf2() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(false);
        JXPathContextReferenceImpl contextImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        contextImpl.namespaceResolver = namespaceResolver;
        contextImpl.registerNamespace(null, "namespaceURI");
        verify(namespaceResolver, times(1)).registerNamespace(null, "namespaceURI");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithNullNamespaceURI_Ahsr3() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        NodePointer contextPointer = mock(NodePointer.class);
        NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
        when(namespaceResolver.isSealed()).thenReturn(false);
        JXPathContextReferenceImpl contextImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        contextImpl.namespaceResolver = namespaceResolver;
        contextImpl.registerNamespace("prefix", null);
        verify(namespaceResolver, times(1)).registerNamespace("prefix", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_EmptyIterator_wtVn0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        Iterator<NodePointer> emptyIterator = mock(Iterator.class);
        when(emptyIterator.hasNext()).thenReturn(false);
        when(expr.iteratePointers(any())).thenReturn(emptyIterator);
        context.removeAll("some/xpath", expr);
        verify(emptyIterator, times(1)).hasNext();
        verifyNoMoreInteractions(emptyIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_SingleElementIterator_kgQd1() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        NodePointer nodePointer = mock(NodePointer.class);
        Iterator<NodePointer> singleElementIterator = mock(Iterator.class);
        when(singleElementIterator.hasNext()).thenReturn(true, false);
        when(singleElementIterator.next()).thenReturn(nodePointer);
        when(expr.iteratePointers(any())).thenReturn(singleElementIterator);
        context.removeAll("some/xpath", expr);
        verify(singleElementIterator, times(2)).hasNext();
        verify(nodePointer, times(1)).remove();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_MultipleElementIterator_XAvI2() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        NodePointer firstNodePointer = mock(NodePointer.class);
        NodePointer secondNodePointer = mock(NodePointer.class);
        Iterator<NodePointer> multiElementIterator = mock(Iterator.class);
        when(multiElementIterator.hasNext()).thenReturn(true, true, false);
        when(multiElementIterator.next()).thenReturn(firstNodePointer, secondNodePointer);
        when(expr.iteratePointers(any())).thenReturn(multiElementIterator);
        when(firstNodePointer.asPath()).thenReturn("first/path");
        when(secondNodePointer.asPath()).thenReturn("second/path");
        context.removeAll("some/xpath", expr);
        verify(multiElementIterator, times(3)).hasNext();
        verify(firstNodePointer, times(1)).remove();
        verify(context, times(1)).removePath("second/path");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_NoRemovalWhenExceptionInRemove_AkZp4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        NodePointer nodePointer = mock(NodePointer.class);
        Iterator<NodePointer> iterator = mock(Iterator.class);
        when(iterator.hasNext()).thenReturn(true, true, false);
        when(iterator.next()).thenReturn(nodePointer);
        when(expr.iteratePointers(any())).thenReturn(iterator);
        doThrow(new RuntimeException("Simulated remove exception")).when(nodePointer).remove();
        try {
            context.removeAll("some/xpath", expr);
        } catch (JXPathException e) {
        }
        verify(iterator, times(2)).hasNext();
        verify(nodePointer, times(1)).remove();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_ProcessMultipleRemovals_dHLi5() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        Expression expr = mock(Expression.class);
        NodePointer firstNodePointer = mock(NodePointer.class);
        NodePointer secondNodePointer = mock(NodePointer.class);
        Iterator<NodePointer> iterator = mock(Iterator.class);
        when(iterator.hasNext()).thenReturn(true, true, false);
        when(iterator.next()).thenReturn(firstNodePointer, secondNodePointer);
        when(expr.iteratePointers(any())).thenReturn(iterator);
        when(firstNodePointer.asPath()).thenReturn("first/path");
        when(secondNodePointer.asPath()).thenReturn("second/path");
        context.removeAll("some/xpath", expr);
        verify(iterator, times(3)).hasNext();
        verify(firstNodePointer, times(1)).remove();
        verify(context, times(1)).removePath("second/path");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_NullFunctions_WXlW2() {
        QName functionName = new QName("ns", "functionName");
        Object[] parameters = new Object[]{};
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, new Object());
        JXPathContextReferenceImpl spyContext = spy(context);
        when(spyContext.getFunctions()).thenReturn(null);
        try {
            spyContext.getFunction(functionName, parameters);
        } catch (JXPathFunctionNotFoundException e) {
            assertEquals("Undefined function: ns:functionName", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_MultipleLevelsNoFunction_xEDJ6() {
        QName functionName = new QName("ns", "functionName");
        Object[] parameters = new Object[]{};
        JXPathContextReferenceImpl grandParentContext = new JXPathContextReferenceImpl(null, new Object());
        JXPathContextReferenceImpl parentContext = new JXPathContextReferenceImpl(grandParentContext, new Object());
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, new Object());
        JXPathContextReferenceImpl spyContext = spy(context);
        when(spyContext.getFunctions()).thenReturn(null);
        when(parentContext.getFunctions()).thenReturn(null);
        when(grandParentContext.getFunctions()).thenReturn(null);
        try {
            spyContext.getFunction(functionName, parameters);
        } catch (JXPathFunctionNotFoundException e) {
            assertEquals("Undefined function: ns:functionName", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRelativeContextWithNonNullNode_Wtim1_1() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
        Object node = new Object();
        Pointer mockPointer = mock(Pointer.class);
        when(mockPointer.getNode()).thenReturn(node);
        JXPathContext result = contextReference.getRelativeContext(mockPointer);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRelativeContextWithNonNullNode_Wtim1_2() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
        Object node = new Object();
        Pointer mockPointer = mock(Pointer.class);
        when(mockPointer.getNode()).thenReturn(node);
        JXPathContext result = contextReference.getRelativeContext(mockPointer);
        assertTrue(result instanceof JXPathContextReferenceImpl);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathAndSetValue_TykA0_eKqZ0() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    NodePointer contextPointer = mock(NodePointer.class);
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
    String xpath = "/some/path";
    Object value = "new value";
    JXPathContextReferenceImpl spyContextReference = spy(contextReference);
    spyContextReference.createPathAndSetValue(xpath, value);
    verify(spyContextReference).createPathAndSetValue(xpath, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIterate_FAMj0_PCou0() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    JXPathContextReferenceImpl spyContext = spy(context);
    Iterator expectedIterator = mock(Iterator.class);
    doReturn(expectedIterator).when(spyContext).iterate(anyString());
    Iterator result = spyContext.iterate("some/xpath");
    verify(spyContext).iterate("some/xpath");
    assertSame(expectedIterator, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_qbgI0_UpRh0() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    NodePointer contextPointer = mock(NodePointer.class);
    JXPathContextReferenceImpl contextReferenceImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
    JXPathContextReferenceImpl spyContextReferenceImpl = spy(contextReferenceImpl);
    Pointer result = spyContextReferenceImpl.createPath("some/xpath");
    verify(spyContextReferenceImpl).createPath("some/xpath");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePathWithInvalidXPath_vuGX1_WLgU0() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    NodePointer contextPointer = mock(NodePointer.class);
    JXPathContextReferenceImpl contextImpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
    JXPathContextReferenceImpl spyContextImpl = spy(contextImpl);
    doThrow(new RuntimeException("Invalid XPath")).when(spyContextImpl).removePath(anyString());
    try {
        spyContextImpl.removePath("/invalid/xpath");
    } catch (RuntimeException e) {
    }
    verify(spyContextImpl, never()).removePath(eq("/invalid/xpath"), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompilePath_Gamg0_oqDE0_1() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/some/path";
    CompiledExpression result = contextReference.compilePath(xpath);
    assertNotNull(result, "CompiledExpression should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompilePath_Gamg0_oqDE0_2() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/some/path";
    CompiledExpression result = contextReference.compilePath(xpath);
    assertTrue(result instanceof JXPathCompiledExpression, "Result should be instance of JXPathCompiledExpression");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompilePath_Gamg0_oqDE0_3() {
    JXPathContext parentContext = mock(JXPathContext.class);
    Object contextBean = new Object();
    JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/some/path";
    CompiledExpression result = contextReference.compilePath(xpath);
    assertEquals(xpath, ((JXPathCompiledExpression) result).getXPath(), "XPath in compiled expression should match input");}
}