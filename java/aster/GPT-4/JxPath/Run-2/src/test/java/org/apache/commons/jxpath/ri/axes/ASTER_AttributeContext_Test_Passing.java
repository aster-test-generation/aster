/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Passing {
@InjectMocks
    private AttributeContext attributeContext;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NodeIterator iterator;
@Mock
    private NodePointer currentNodePointer;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTest nodeTest;
    private boolean setStarted = false;
    private static final QName WILDCARD = new QName(null, "*");
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_SuccessfullyMovesToPosition() throws Exception {
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Arrange
        when(attributeContext.getCurrentPosition()).thenReturn(1, 2, 3);
        when(attributeContext.nextNode()).thenReturn(true);
        // Act
        boolean result = attributeContext.setPosition(3);
        // Assert
        assertTrue(result);
        verify(attributeContext, times(2)).nextNode(); // Called two times to move from 1 to 3
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FailsToMoveToPosition() throws Exception {
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Arrange
        when(attributeContext.getCurrentPosition()).thenReturn(1);
        when(attributeContext.nextNode()).thenReturn(false);
        // Act
        boolean result = attributeContext.setPosition(2);
        // Assert
        assertFalse(result);
        verify(attributeContext, times(1)).nextNode(); // Called once and failed
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_NoNeedToMove() throws Exception {
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Arrange
        when(attributeContext.getCurrentPosition()).thenReturn(3);
        // Act
        boolean result = attributeContext.setPosition(3);
        // Assert
        assertTrue(result);
        verify(attributeContext, never()).nextNode(); // No need to move, so nextNode is never called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ResetThenMove() throws Exception {
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Arrange
        when(attributeContext.getCurrentPosition()).thenReturn(4, 1, 2, 3);
        doNothing().when(attributeContext).reset();
        when(attributeContext.nextNode()).thenReturn(true);
        // Act
        boolean result = attributeContext.setPosition(3);
        // Assert
        assertTrue(result);
        verify(attributeContext).reset(); // Reset is called because the current position was higher
        verify(attributeContext, times(2)).nextNode(); // Called two times after reset
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception {
        attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        when(attributeContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer result = attributeContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result, "The returned NodePointer should be the one that was mocked");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_YFMd0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
    NodePointer expected = attributeContext.getCurrentNodePointer();
    assertEquals(expected, attributeContext.getCurrentNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithNodeNameTest() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(((NodeNameTest) nodeTest).getNodeName()).thenReturn(new QName(null, "testName"));
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(new QName(null, "testName"))).thenReturn(iterator);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        assertTrue(attributeContext.nextNode());
        verify(iterator, times(1)).setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithNodeTypeTest() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        when(nodeTest instanceof NodeNameTest).thenReturn(false);
        when(nodeTest instanceof NodeTypeTest).thenReturn(true);
        when(((NodeTypeTest) nodeTest).getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(WILDCARD)).thenReturn(iterator);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        assertTrue(attributeContext.nextNode());
        verify(iterator, times(1)).setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsFalseWhenIteratorIsNull() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        when(nodeTest instanceof NodeNameTest).thenReturn(false);
        when(nodeTest instanceof NodeTypeTest).thenReturn(false);
        assertFalse(attributeContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsFalseWhenSetPositionFails() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        attributeContext = new AttributeContext(parentContext, nodeTypeTest);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(((NodeNameTest) nodeTest).getNodeName()).thenReturn(new QName(null, "testName"));
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.attributeIterator(new QName(null, "testName"))).thenReturn(iterator);
        when(iterator.setPosition(1)).thenReturn(false);
        assertFalse(attributeContext.nextNode());
        verify(iterator, times(1)).setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithNodeNameTest_UujI0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTest);
        assertTrue(attributeContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithInvalidNodeType_jDnK2() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTest);
        assertFalse(attributeContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeIteratorCannotAdvance_jdwl4() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTest);
        assertFalse(attributeContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeWithNodeNameTestAndNoParent_sbUB5() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTest);
        assertTrue(attributeContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_VpJI0_1() throws Exception {
    attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
    Field iteratorField = AttributeContext.class.getDeclaredField("iterator");
    iteratorField.setAccessible(true);
    iteratorField.set(attributeContext, iterator);
    Field setStartedField = AttributeContext.class.getDeclaredField("setStarted");
    setStartedField.setAccessible(true);
    setStartedField.set(attributeContext, true);
    attributeContext.reset();
    assertFalse((Boolean) setStartedField.get(attributeContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_VpJI0_2() throws Exception {
    attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
    Field iteratorField = AttributeContext.class.getDeclaredField("iterator");
    iteratorField.setAccessible(true);
    iteratorField.set(attributeContext, iterator);
    Field setStartedField = AttributeContext.class.getDeclaredField("setStarted");
    setStartedField.setAccessible(true);
    setStartedField.set(attributeContext, true);
    attributeContext.reset();
    assertNull(iteratorField.get(attributeContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNodeWithNodeTypeTestAndNoIteratorSet_nkzv6_EKor0() {
    final int NODE_TYPE_ATTRIBUTE = 2; // Assuming 2 represents attribute nodes
    NodeTypeTest nodeTest = new NodeTypeTest(NODE_TYPE_ATTRIBUTE);
    SelfContext selfContext = new SelfContext(null, nodeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
    AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTest);
    assertFalse(attributeContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNodeWithNodeTypeTest_dAmk0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
    NamespaceContext parentContext = mock(NamespaceContext.class);
    AttributeContext attributeContext = new AttributeContext(parentContext, nodeTypeTest);
    NodePointer currentNodePointer = mock(NodePointer.class);
    NodeIterator iterator = mock(NodeIterator.class);
    QName WILDCARD = new QName("*");
    when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
    when(currentNodePointer.attributeIterator(any(QName.class))).thenReturn(iterator);
    when(iterator.setPosition(1)).thenReturn(true);
    when(iterator.getNodePointer()).thenReturn(currentNodePointer);
    assertTrue(attributeContext.nextNode());
    verify(iterator, times(1)).setPosition(1);
}
}