/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
private QName name;
private Object bean;
private JXPathBasicBeanInfo beanInfo;
private Locale locale;
private DOMNodePointer parent;
private BeanPointer beanPointer;
@Mock
    private JXPathBasicBeanInfo beanInfoMock;
@Mock
    private QName qNameMock;
@Mock
    private Object beanMock;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertTrue(beanPointer.equals(beanPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertFalse(beanPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertFalse(beanPointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        BeanPointer other = new BeanPointer(differentParent, name, bean, beanInfo);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentDifferentName_ReturnsFalse() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        QName differentName = new QName("differentName");
        BeanPointer other = new BeanPointer(parent, differentName, bean, beanInfo);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentSameNameSameBean_ReturnsTrue() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        BeanPointer other = new BeanPointer(parent, name, bean, beanInfo);
        assertTrue(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentSameNameDifferentBean_ReturnsFalse() {
        name = new QName("testName");
        bean = new Object();
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        Object differentBean = new Object();
        BeanPointer other = new BeanPointer(parent, name, differentBean, beanInfo);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_nFjb0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    assertTrue(beanPointer.equals(beanPointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_jiZT1() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    assertFalse(beanPointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_XJGm2() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    Object differentClassObject = new Object();
    assertFalse(beanPointer.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameBeanDifferentTypes_jHKC9() {
    QName qName = new QName("test");
    String bean1 = "testString";
    Integer bean2 = 123;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean1, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean2, beanInfo, locale);
    assertFalse(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameBeanSameTypes_XhYP10() {
    QName qName = new QName("test");
    String bean = "testString";
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean, beanInfo, locale);
    assertTrue(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentBooleanBeanValues_AeuX11() {
    QName qName = new QName("test");
    Boolean bean1 = true;
    Boolean bean2 = false;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean1, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean2, beanInfo, locale);
    assertFalse(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameBooleanBeanValues_xeKO12() {
    QName qName = new QName("test");
    Boolean bean = true;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean, beanInfo, locale);
    assertTrue(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentNumberBeanValues_zixP13() {
    QName qName = new QName("test");
    Number bean1 = 123;
    Number bean2 = 456;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean1, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean2, beanInfo, locale);
    assertFalse(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameNumberBeanValues_Itps14() {
    QName qName = new QName("test");
    Number bean = 123;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean, beanInfo, locale);
    assertTrue(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentStringBeanValues_sphw15() {
    QName qName = new QName("test");
    String bean1 = "Hello";
    String bean2 = "World";
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean1, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean2, beanInfo, locale);
    assertFalse(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameStringBeanValues_GkgK16() {
    QName qName = new QName("test");
    String bean = "Hello";
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean, beanInfo, locale);
    assertTrue(beanPointer1.equals(beanPointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Mock the QName class
        name = mock(QName.class);
        // Create an instance of BeanPointer with the mocked QName
        beanPointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), java.util.Locale.getDefault());
        // When getName is called, it should return the mocked QName object
        QName result = beanPointer.getName();
        // Verify the result is the same as the mocked QName object
        assertSame(name, result, "The getName method should return the QName object used during BeanPointer initialization.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_hLvY0() {
        QName qName = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        QName result = beanPointer.getName();
        assertEquals("testName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        beanPointer = new BeanPointer(qNameMock, beanMock, beanInfoMock, null);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer, "PropertyPointer should not be null");
        assertTrue(propertyPointer instanceof BeanPropertyPointer, "Should return an instance of BeanPropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_CIZt0() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertNotNull(result);
    assertTrue(result instanceof BeanPropertyPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNullBean() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, null, beanInfo, locale);
        assertEquals("null()", beanPointer.asPath(), "Expected path for null bean");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBean() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        assertEquals("123", beanPointer.asPath(), "Expected path for Number bean without decimal");
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123.45", beanPointer.asPath(), "Expected path for Number bean with decimal");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBean() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath(), "Expected path for true Boolean bean");
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath(), "Expected path for false Boolean bean");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndStringBean() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, "testString", beanInfo, locale);
        assertEquals("'testString'", beanPointer.asPath(), "Expected path for String bean");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNullBean_qqDb0() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, null, beanInfo, Locale.getDefault());
        assertEquals("null()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBean_dKoz1() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, 123.0, beanInfo, Locale.getDefault());
        assertEquals("123", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBeanTrue_bdtZ2() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, true, beanInfo, Locale.getDefault());
        assertEquals("true()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBeanFalse_lzeJ3() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, false, beanInfo, Locale.getDefault());
        assertEquals("false()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndStringBean_DZYp4() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, "Hello", beanInfo, Locale.getDefault());
        assertEquals("'Hello'", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        DOMNodePointer parent = mock(DOMNodePointer.class);
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        int length = beanPointer.getLength();
        assertEquals(1, length, "The length should always be 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_keJo0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    int expectedLength = 1;
    int actualLength = beanPointer.getLength();
    assertEquals(expectedLength, actualLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        bean = new Object(); // Assuming we need a real object here, not a mock, since we're testing retrieval.
        QName name = new QName("testName");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        Object result = beanPointer.getBaseValue();
        assertEquals(bean, result, "The getBaseValue method should return the bean object set in the constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_cftM0() {
    QName qName = new QName("testName");
    Object testBean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, testBean, beanInfo, locale);
    assertEquals(testBean, beanPointer.getBaseValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Initialize BeanPointer with mocked dependencies
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        // Since isCollection method returns false, assert false
        assertFalse(beanPointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_oXDo0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    assertFalse(beanPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_wpjf0() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        BeanPointer beanPointer = new BeanPointer(name, null, beanInfo, Locale.getDefault());
        assertTrue(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_JaiZ1() {
        QName name = new QName("test");
        String bean = "Test String";
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.getDefault());
        assertTrue(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_RKTI2() {
        QName name = new QName("test");
        List<String> bean = new ArrayList<>();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(ArrayList.class);
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, Locale.getDefault());
        assertFalse(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithNullName() throws Exception {
        // Initialize BeanPointer with a mock QName
        beanPointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), null);
        // Arrange
        BeanPointer beanPointerWithNullName = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), null);
        // Act
        int result = beanPointerWithNullName.hashCode();
        // Assert
        assertEquals(0, result, "The hash code should be 0 when name is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_afuE0() {
        QName qName = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        int expectedHashCode = qName.hashCode();
        assertEquals(expectedHashCode, beanPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_uvcE1() {
        QName qName = null;
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        int expectedHashCode = 0;
        assertEquals(expectedHashCode, beanPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        beanPointer = new BeanPointer(qNameMock, beanMock, beanInfoMock, null);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer, "PropertyPointer should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        beanPointer = new BeanPointer(qNameMock, beanMock, beanInfoMock, null);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertTrue(propertyPointer instanceof BeanPropertyPointer, "Should return an instance of BeanPropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_CIZt0_1() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_CIZt0_2() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertTrue(result instanceof BeanPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBean_2() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123.45", beanPointer.asPath(), "Expected path for Number bean with decimal");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBean_2() {
        parent = mock(DOMNodePointer.class);
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath(), "Expected path for false Boolean bean");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentIndex_sOuO7_cOYD0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer1 = new BeanPointer(qName, bean, beanInfo, locale);
    BeanPointer beanPointer2 = new BeanPointer(qName, bean, beanInfo, locale);
    beanPointer1.setIndex(1);
    beanPointer2.setIndex(2);
    assertFalse(beanPointer1.equals(beanPointer2));
}
}