/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.apache.commons.jxpath.ri.QName;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynamicPropertyPointer_Coverage_Test_Passing {
private DynamicPropertyPointer dynamicPropertyPointer;
private DynamicPropertyHandler handler;
private DOMNodePointer domNodePointer;
private PageContextHandler mockPageContextHandler;
private PageContextHandler pageContextHandler;
    public void setField(Object object, String fieldName, Object value) {
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWholeCollection_AOOk0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        int WHOLE_COLLECTION = -1;
        setField(pointer, "index", WHOLE_COLLECTION);
        setField(pointer, "handler", handler);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        pointer.createPath(context, value);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathReturnsSelf_RmLu2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        NodePointer result = pointer.createPath(context, value);
        assertSame(pointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WholeCollection_SlDf0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        Object value = new Object();
        when(pointer.getIndex()).thenReturn(DynamicPropertyPointer.WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        pointer.setValue(value);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_NKKB0() {
        DOMNodePointer mockedDomNodePointer = mock(DOMNodePointer.class);
        PageContextHandler mockedPageContextHandler = mock(PageContextHandler.class);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(mockedDomNodePointer, mockedPageContextHandler);
        Object expectedBean = new Object();
        String expectedPropertyName = "propertyName";
        Object expectedPropertyValue = "propertyValue";
        when(dynamicPropertyPointer.getBean()).thenReturn(expectedBean);
        when(dynamicPropertyPointer.getPropertyName()).thenReturn(expectedPropertyName);
        when(mockedPageContextHandler.getProperty(expectedBean, expectedPropertyName)).thenReturn(expectedPropertyValue);
        Object actualPropertyValue = dynamicPropertyPointer.getBaseValue();
        assertEquals(expectedPropertyValue, actualPropertyValue);
        verify(mockedPageContextHandler).getProperty(expectedBean, expectedPropertyName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithValidIndexLessThanLength_HSHk3() {
        JXPathContext context = mock(JXPathContext.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(mock(DOMNodePointer.class), handler);
        Object collection = new Object();
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getIndex()).thenReturn(0);
        when(pointer.getLength()).thenReturn(1);
        pointer.createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithIndexEqualToLength_ZULO4() {
        JXPathContext context = mock(JXPathContext.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(mock(DOMNodePointer.class), handler);
        Object collection = new Object();
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getIndex()).thenReturn(1);
        when(pointer.getLength()).thenReturn(1);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("property");
        pointer.createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithIndexGreaterThanLength_mrqB5() {
        JXPathContext context = mock(JXPathContext.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(mock(DOMNodePointer.class), handler);
        Object collection = new Object();
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getIndex()).thenReturn(2);
        when(pointer.getLength()).thenReturn(1);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("property");
        pointer.createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithWholeCollection_vvMF6() {
        JXPathContext context = mock(JXPathContext.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(mock(DOMNodePointer.class), mock(PageContextHandler.class));
        when(pointer.getBaseValue()).thenReturn(new Object());
        when(pointer.getIndex()).thenReturn(DynamicPropertyPointer.WHOLE_COLLECTION);
        pointer.createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithExistingCollection_JRtR7() {
        JXPathContext context = mock(JXPathContext.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(mock(DOMNodePointer.class), mock(PageContextHandler.class));
        when(pointer.getBaseValue()).thenReturn(new Object());
        pointer.createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_SingleIndex_SfEO1() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        Object expectedValue = new Object();
        int index = 1; // Assuming index is set somewhere in the class
        when(handler.getProperty(any(), any())).thenReturn(expectedValue);
        when(ValueUtils.getValue(expectedValue, index)).thenReturn(expectedValue);
        Object result = pointer.getImmediateNode();
        assertEquals(expectedValue, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NullValueWholeCollection_oQvn2() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        when(handler.getProperty(any(), any())).thenReturn(null);
        when(ValueUtils.getValue(null)).thenReturn(null);
        Object result = pointer.getImmediateNode();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NullValueSingleIndex_NihY3() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        int index = 1; // Assuming index is set somewhere in the class
        when(handler.getProperty(any(), any())).thenReturn(null);
        when(ValueUtils.getValue(null, index)).thenReturn(null);
        Object result = pointer.getImmediateNode();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_InvalidIndex_IEuf4() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        int index = -1; // Assuming index is set somewhere in the class
        when(handler.getProperty(any(), any())).thenReturn(new Object());
        when(ValueUtils.getValue(any(), eq(index))).thenThrow(new IllegalArgumentException("Invalid index"));
        try {
            pointer.getImmediateNode();
            fail("Expected IllegalArgumentException for invalid index");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_IndexOutOfBounds_OiXD5() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        int index = 100; // Assuming index is set somewhere in the class
        when(handler.getProperty(any(), any())).thenReturn(new Object());
        when(ValueUtils.getValue(any(), eq(index))).thenThrow(new IndexOutOfBoundsException("Index out of bounds"));
        try {
            pointer.getImmediateNode();
            fail("Expected IndexOutOfBoundsException for out of bounds index");
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_EmptyProperty_FlsD6() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        when(handler.getProperty(any(), any())).thenReturn("");
        when(ValueUtils.getValue("")).thenReturn("");
        Object result = pointer.getImmediateNode();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NonEmptyProperty_zAMW7() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        String nonEmptyProperty = "NonEmpty";
        when(handler.getProperty(any(), any())).thenReturn(nonEmptyProperty);
        when(ValueUtils.getValue(nonEmptyProperty)).thenReturn(nonEmptyProperty);
        Object result = pointer.getImmediateNode();
        assertEquals(nonEmptyProperty, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndexWhenUnspecified_tzLz0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
        when(pointer.getPropertyIndex()).thenReturn(DynamicPropertyPointer.UNSPECIFIED_PROPERTY);
        when(pointer.getPropertyNames()).thenReturn(new String[]{"prop1", "prop2"});
        doNothing().when(pointer).setPropertyIndex(anyInt());
        int index = pointer.getPropertyIndex();
        verify(pointer).setPropertyIndex(anyInt());
        assertNotEquals(DynamicPropertyPointer.UNSPECIFIED_PROPERTY, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndexWhenSpecified_XzWE1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
        when(pointer.getPropertyIndex()).thenReturn(1);
        int index = pointer.getPropertyIndex();
        assertEquals(1, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndexWithEmptyProperties_QDWQ4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
        when(pointer.getPropertyIndex()).thenReturn(DynamicPropertyPointer.UNSPECIFIED_PROPERTY);
        when(pointer.getPropertyNames()).thenReturn(new String[]{});
        doNothing().when(pointer).setPropertyIndex(anyInt());
        int index = pointer.getPropertyIndex();
        verify(pointer, never()).setPropertyIndex(anyInt());
        assertEquals(DynamicPropertyPointer.UNSPECIFIED_PROPERTY, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithEmptyParentPath_dysy0() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        String result = pointer.asPath();
        assertEquals("/.[@name='']", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonEmptyParentPathNoTrailingSlash_VKUo1() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("parentPath");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        String result = pointer.asPath();
        assertEquals("parentPath.[@name='']", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParentPathTrailingSlash_cHIP2() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("parentPath/");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        String result = pointer.asPath();
        assertEquals("parentPath/.[@name='']", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_InitialCall_WfhC0() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);
        assertEquals(2, result.length);
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_SortedProperties_dxDy1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop2", "prop1"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);
        assertEquals(2, result.length);
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_CacheCheck_VgiZ5() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        pointer.getPropertyNames(); // First call to populate cache
        String[] result = pointer.getPropertyNames(); // Second call should use cache
        assertNotNull(result);
        assertEquals(2, result.length);
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);
        verify(handler, times(1)).getPropertyNames(any()); // Ensure only one call was made to handler
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_EmptyProperties_Asds6() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);
        assertEquals(0, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_NullProperties_RlzS7() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(null);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_InitialCall_WfhC0_1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_InitialCall_WfhC0_2() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_InitialCall_WfhC0_3() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_SortedProperties_dxDy1_1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop2", "prop1"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_SortedProperties_dxDy1_2() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop2", "prop1"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_SortedProperties_dxDy1_3() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop2", "prop1"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_CacheCheck_VgiZ5_1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        pointer.getPropertyNames(); // First call to populate cache
        String[] result = pointer.getPropertyNames(); // Second call should use cache
        verify(handler, times(1)).getPropertyNames(any()); // Ensure only one call was made to handler
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_CacheCheck_VgiZ5_2() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        pointer.getPropertyNames(); // First call to populate cache
        String[] result = pointer.getPropertyNames(); // Second call should use cache
        verify(handler, times(1)).getPropertyNames(any()); // Ensure only one call was made to handler
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_CacheCheck_VgiZ5_3() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2"});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        pointer.getPropertyNames(); // First call to populate cache
        String[] result = pointer.getPropertyNames(); // Second call should use cache
        verify(handler, times(1)).getPropertyNames(any()); // Ensure only one call was made to handler
        assertArrayEquals(new String[]{"prop1", "prop2"}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_EmptyProperties_Asds6_1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_EmptyProperties_Asds6_2() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        when(handler.getPropertyNames(any())).thenReturn(new String[]{});
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
        String[] result = pointer.getPropertyNames();
        assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_soQM0_ugSI0() {
    PageContextHandler pageContextHandler = new PageContextHandler();
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndexWithMatchingName_tnXN2_Suav0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
    when(pointer.getPropertyIndex()).thenReturn(DynamicPropertyPointer.UNSPECIFIED_PROPERTY);
    when(pointer.getPropertyNames()).thenReturn(new String[]{"prop1", "prop2"});
    when(pointer.getName()).thenReturn(new QName("prop2"));
    doNothing().when(pointer).setPropertyIndex(anyInt());
    int index = pointer.getPropertyIndex();
    verify(pointer).setPropertyIndex(1);
    assertEquals(1, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndexBreaksLoopOnFirstMatch_gOgZ5_izeq0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
    when(pointer.getPropertyIndex()).thenReturn(DynamicPropertyPointer.UNSPECIFIED_PROPERTY);
    when(pointer.getPropertyNames()).thenReturn(new String[]{"prop1", "prop2", "prop2"});
    doNothing().when(pointer).setPropertyIndex(anyInt());
    int index = pointer.getPropertyIndex();
    verify(pointer).setPropertyIndex(1);
    assertEquals(1, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndexWithNoMatchingName_DeiX3_OSOV0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
    when(pointer.getPropertyIndex()).thenReturn(DynamicPropertyPointer.UNSPECIFIED_PROPERTY);
    when(pointer.getPropertyNames()).thenReturn(new String[]{"prop1", "prop2"});
    doNothing().when(pointer).setPropertyIndex(anyInt());
    int index = pointer.getPropertyIndex();
    verify(pointer, never()).setPropertyIndex(anyInt());
    assertEquals(DynamicPropertyPointer.UNSPECIFIED_PROPERTY, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithIndexNotWholeCollectionAndIsCollection_HMvQ4_EZza0() {
    DOMNodePointer parentPointer = mock(DOMNodePointer.class);
    when(parentPointer.asPath()).thenReturn("parentPath");
    when(parentPointer.isCollection()).thenReturn(true);
    PageContextHandler handler = new PageContextHandler();
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
    String result = pointer.asPath();
    assertEquals("parentPath.[@name=''][2]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithIndexNotWholeCollectionAndIsNotCollection_mxOR6_hoKv0() {
    DOMNodePointer parentPointer = mock(DOMNodePointer.class);
    when(parentPointer.asPath()).thenReturn("parentPath");
    PageContextHandler handler = new PageContextHandler();
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
    when(parentPointer.isCollection()).thenReturn(false);
    String result = pointer.asPath();
    assertEquals("parentPath.[@name='']", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithIndexWholeCollectionAndIsCollection_pfCN5_tgSm0() {
    DOMNodePointer parentPointer = mock(DOMNodePointer.class);
    when(parentPointer.asPath()).thenReturn("parentPath");
    when(parentPointer.isCollection()).thenReturn(true);
    PageContextHandler handler = new PageContextHandler();
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
    String result = pointer.asPath();
    assertEquals("parentPath.[@name='']", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_RequiredPropertyOnly_ubdP8_xoVb0_1() {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1"});
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
    String[] result = pointer.getPropertyNames();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_RequiredPropertyOnly_ubdP8_xoVb0_2() {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1"});
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
    String[] result = pointer.getPropertyNames();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_RequiredPropertyOnly_ubdP8_xoVb0_3() {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1"});
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
    String[] result = pointer.getPropertyNames();
    assertArrayEquals(new String[]{"prop1"}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_RequiredPropertyAlreadyFirst_PKXA10_JyfO0() {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    when(handler.getPropertyNames(any())).thenReturn(new String[]{"prop1", "prop2", "prop3"});
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(domNodePointer, handler);
}
}