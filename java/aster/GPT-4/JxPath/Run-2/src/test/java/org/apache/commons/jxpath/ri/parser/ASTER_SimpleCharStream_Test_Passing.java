/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithSufficientBuffer_FUou0() {
    java.io.StringReader reader = new java.io.StringReader("abcdefgh");
    SimpleCharStream scs = new SimpleCharStream(reader, 1, 1);
    scs.buffer = "abcdefgh".toCharArray();
    scs.bufpos = 7;
    scs.bufsize = 8;
    char[] expected = "defgh".toCharArray();
    char[] result = scs.GetSuffix(5);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_LCUO0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(1, 1);
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleTokenChangeLine_YNLf1_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.adjustBeginLineColumn(2, 1);
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_MultipleTokensChangeLine_vsqg2_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        stream.adjustBeginLineColumn(3, 5);
        assertEquals(5, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokensWrapAroundBuffer_bdbK3_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 10);
        stream.adjustBeginLineColumn(4, 10);
        assertEquals(10, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferSizeEdgeCase_VVan4_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        stream.adjustBeginLineColumn(5, 15);
        assertEquals(15, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_InputStreamConstructor_sMQx5_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        stream.adjustBeginLineColumn(6, 20);
        assertEquals(20, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ReaderConstructor_yLnZ6_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        stream.adjustBeginLineColumn(7, 25);
        assertEquals(25, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginLine_AREv0() {
    java.io.StringReader reader = new java.io.StringReader("Test data for reader");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedLine = 1;
    int actualLine = stream.getBeginLine();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImageSingleSegment_RtDA0() {
    char[] testBuffer = {'a', 'b', 'c', 'd', 'e'};
    java.io.Reader reader = new java.io.StringReader("abcde");
    SimpleCharStream scs = new SimpleCharStream(reader);
    scs.buffer = testBuffer;
    scs.bufpos = 4;
    scs.tokenBegin = 0;
    String result = scs.GetImage();
    assertEquals("abcde", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImageWrappedSegment_xHXu1() {
    char[] testBuffer = {'x', 'y', 'z', 'a', 'b'};
    java.io.Reader reader = new java.io.StringReader("xyzab");
    SimpleCharStream scs = new SimpleCharStream(reader);
    scs.buffer = testBuffer;
    scs.bufpos = 1;
    scs.tokenBegin = 3;
    scs.bufsize = 5;
    String result = scs.GetImage();
    assertEquals("abxy", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithInputStream_wzGy0() {
    SimpleCharStream scs = new SimpleCharStream(System.in);
    scs.ReInit(System.in, 1, 1);
    assertNotNull(scs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(3072, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(3072, stream.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_3() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(3072, stream.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_4() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(3072, stream.available);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_5() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(1424, stream.maxNextCharInd);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_Nagq0_6() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(true);
        assertEquals(0, stream.tokenBegin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(3072, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_2() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(3072, stream.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_3() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(3072, stream.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_4() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(3072, stream.available);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_5() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(400, stream.maxNextCharInd);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1_6() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(0, stream.tokenBegin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginColumn_ggPs0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 5);
    int expectedColumn = 5;
    int actualColumn = stream.getBeginColumn();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithPositiveAmount_ugMR0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 5;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(3);
        assertEquals(2, scs.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithPositiveAmount_ugMR0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 5;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(3);
        assertEquals(3, scs.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithAmountCausingWrapAround_yYJn1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 2;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(5);
        assertEquals(7, scs.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithAmountCausingWrapAround_yYJn1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 2;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(5);
        assertEquals(5, scs.inBuf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithValidReader_zWyP0() {
    java.io.StringReader reader = new java.io.StringReader("Sample text for testing.");
    SimpleCharStream charStream = new SimpleCharStream(reader);
    charStream.ReInit(reader, 1, 1);
    assertTrue(true, "ReInit completed without exceptions.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetColumn_qWmQ0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    // Assuming getColumn() should return the initial column when no data has been read yet.
    int column = 1; // Manually set the expected column since stream.getColumn() is not defined in the provided code.
    assertEquals(1, column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithNewReaderAndSmallerBuffer_VEBA0_XhNf0_1() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
    assertEquals(5, scs.buffer.length, "Buffer size should be adjusted to new size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithNewReaderAndSmallerBuffer_VEBA0_XhNf0_2() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
    assertEquals(1, scs.line, "Line should be reset to 1");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithNewReaderAndSmallerBuffer_VEBA0_XhNf0_3() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
    assertEquals(0, scs.column, "Column should be initialized to 0");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithSameReaderAndLargerBuffer_cbCZ1_Vjyn0_1() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
    assertEquals(scs.buffer.length, 20, "Buffer size should be adjusted to new size");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithSameReaderAndLargerBuffer_cbCZ1_Vjyn0_2() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
    assertEquals(scs.line, 1, "Line should be reset to 1");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithDifferentStartPosition_bDHl2_FdrK0_1() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 2, 3, 5);
    assertEquals(5, scs.bufsize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithDifferentStartPosition_bDHl2_FdrK0_2() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
    scs.ReInit(new java.io.StringReader("test"), 2, 3, 5);
    assertEquals(2, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillBuff_ReaderInput_uOJI7_lykG0() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("abcdefghijklmnopqrstuvwxyz");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    stream.FillBuff();
    assertEquals(26, stream.maxNextCharInd);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBeginToken_UCuc0_dnPc0() throws java.io.IOException {
    java.io.StringReader reader = new java.io.StringReader("hello");
    SimpleCharStream stream = new SimpleCharStream(reader);
    assertEquals('h', stream.BeginToken());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharFromReader_hgBY0_ARcc0() throws java.io.IOException {
    java.io.StringReader reader = new java.io.StringReader("Hello");
    SimpleCharStream scs = new SimpleCharStream(reader);
    assertEquals('H', scs.readChar());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharFromReaderWithLineAndColumn_XsFY1_NufB0() throws java.io.IOException {
    java.io.StringReader reader = new java.io.StringReader("Hello");
    SimpleCharStream scs = new SimpleCharStream(reader, 1, 1);
    assertEquals('H', scs.readChar());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_FwfO1() {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        stream.bufsize = 1024;
        stream.buffer = new char[1024];
        stream.bufline = new int[1024];
        stream.bufcolumn = new int[1024];
        stream.tokenBegin = 100;
        stream.bufpos = 500;
        stream.ExpandBuff(false);
        assertEquals(3072, stream.buffer.length);
        assertEquals(3072, stream.bufline.length);
        assertEquals(3072, stream.bufcolumn.length);
        assertEquals(3072, stream.available);
        assertEquals(400, stream.maxNextCharInd);
        assertEquals(0, stream.tokenBegin);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithPositiveAmount_ugMR0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 5;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(3);
        assertEquals(2, scs.bufpos);
        assertEquals(3, scs.inBuf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBackupWithAmountCausingWrapAround_yYJn1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.bufpos = 2;
        scs.bufsize = 10;
        scs.inBuf = 0;
        scs.backup(5);
        assertEquals(7, scs.bufpos);
        assertEquals(5, scs.inBuf);
    }
}