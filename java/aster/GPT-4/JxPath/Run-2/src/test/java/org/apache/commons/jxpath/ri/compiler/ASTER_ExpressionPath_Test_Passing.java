/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
private ExpressionPath expressionPath;
private EvalContext mockEvalContext;
private Constant mockConstant;
private Expression[] mockPredicates;
private Step[] mockSteps;
private EvalContext mockContext;
@Mock
    private Expression expression;
@Mock
    private EvalContext evalContext;
@Mock
    private RootContext rootContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeSetContext nodeSetContext;
private Expression[] predicates = new Expression[0];
private Step[] steps = new Step[0];
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyPredicatesAndSteps_FKfS0() {
        Constant constant = new Constant("Test");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        assertEquals("Test", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSinglePredicate_SKZN1() {
        Constant constant = new Constant("Test");
        Expression[] predicates = {new Constant(1)};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        assertEquals("Test[1]", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultiplePredicates_ULbx2() {
        Constant constant = new Constant("Test");
        Expression[] predicates = {new Constant(1), new Constant(2)};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        assertEquals("Test[1][2]", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() throws Exception {
        // Mock dependencies
        mockEvalContext = mock(EvalContext.class);
        mockConstant = mock(Constant.class);
        mockPredicates = new Expression[]{}; // Assuming Expression is an interface or class you can mock
        mockSteps = new Step[]{}; // Assuming Step is an interface or class you can mock
        // Create instance of ExpressionPath with mocked dependencies
        expressionPath = new ExpressionPath(mockConstant, mockPredicates, mockSteps);
        // Arrange
        Object expectedValue = new Object();
        when(mockEvalContext.getJXPathContext()).thenReturn(null); // Assuming getJXPathContext is relevant
        when(expressionPath.computeValue(mockEvalContext)).thenReturn(expectedValue);
        // Act
        Object result = expressionPath.computeValue(mockEvalContext);
        // Assert
        assertEquals(expectedValue, result, "The computed value should match the expected value.");
        verify(mockEvalContext).getJXPathContext(); // Verify getJXPathContext was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_FirstMatchSimplePath_1() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(nodeSetContext);
        when(nodeSetContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        Object result = expressionPath.expressionPath(evalContext, true);
        verify(expression).compute(evalContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_FirstMatchSimplePath_2() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(nodeSetContext);
        when(nodeSetContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        Object result = expressionPath.expressionPath(evalContext, true);
        verify(expression).compute(evalContext);
        assertTrue(result instanceof NodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_FirstMatchSimplePath_3() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(nodeSetContext);
        when(nodeSetContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        Object result = expressionPath.expressionPath(evalContext, true);
        verify(expression).compute(evalContext);
        assertEquals(nodePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_FirstMatchComplexPath() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(evalContext);
        when(evalContext.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(evalContext);
        when(evalContext.getSingleNodePointer()).thenReturn(null);
        Object result = expressionPath.expressionPath(evalContext, true);
        verify(expression).compute(evalContext);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_NoFirstMatch() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(evalContext);
        when(evalContext.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(evalContext);
        Object result = expressionPath.expressionPath(evalContext, false);
        verify(expression).compute(evalContext);
        assertNotNull(result);
        // Assuming evalSteps returns some kind of collection or array
        // This part of the test would need to be adjusted based on actual implementation details
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExpression_YqcB0_eRVg0() {
    Constant constant = new Constant("test");
    Expression mockExpression = mock(Expression.class); // Using a mock since Expression is abstract
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_FirstMatchSimplePath() throws Exception {
        expressionPath = new ExpressionPath(new Constant("expression"), predicates, steps);
        when(expression.compute(evalContext)).thenReturn(rootContext);
        when(rootContext.getConstantContext(any())).thenReturn(nodeSetContext);
        when(nodeSetContext.getSingleNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getIndex()).thenReturn(NodePointer.WHOLE_COLLECTION);
        Object result = expressionPath.expressionPath(evalContext, true);
        verify(expression).compute(evalContext);
        assertNotNull(result);
        assertTrue(result instanceof NodePointer);
        assertEquals(nodePointer, result);
    }
}