/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.HashMap;
import org.apache.commons.jxpath.Pointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_WhenParentIsNull() throws Exception {
        // The parent mock is automatically injected into namespaceResolver by Mockito
        // Arrange
        NamespaceResolver childNamespaceResolver = new NamespaceResolver(null);
        // Act
        childNamespaceResolver.seal();
        // Assert
        // No need to verify as there's no interaction with parent (it's null)
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSeal_SingleInstance_FHGK0() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.seal();
    assertTrue(resolver.isSealed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSeal_WithParent_Bykh1() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    child.seal();
    assertTrue(child.isSealed());
    assertTrue(parent.isSealed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithNullPointer_uxrO0() {
    String result = NamespaceResolver.getPrefix(null, "http://example.com");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefix_WithNullNamespaceURI_ReturnsNull_naEE0() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getExternallyRegisteredPrefix(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefix_WithUnmappedNamespaceURI_ReturnsNull_Xcod1() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getExternallyRegisteredPrefix("http://unmapped.namespace");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefix_WithInheritedNamespaceURI_ReturnsCorrectPrefix_UGnR2() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    String expectedPrefix = "ns1";
    parent.reverseMap.put("http://example.com", expectedPrefix);
    String result = child.getExternallyRegisteredPrefix("http://example.com");
    assertEquals(expectedPrefix, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_fuBK0() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://namespace1.com");
    assertEquals("http://namespace1.com", resolver.namespaceMap.get("prefix1"));
    assertEquals("prefix1", resolver.reverseMap.get("http://namespace1.com"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_SealedResolver_aLiT1() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.seal();
    assertThrows(IllegalStateException.class, () -> {
        resolver.registerNamespace("prefix2", "http://namespace2.com");
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithNullPrefix_ReturnsNull_xNbl0() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getExternallyRegisteredNamespaceURI(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithUnknownPrefix_ReturnsNull_OfnO1() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getExternallyRegisteredNamespaceURI("unknownPrefix");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithKnownPrefix_ReturnsURI_cLos2() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.namespaceMap.put("knownPrefix", "http://example.com");
    String result = resolver.getExternallyRegisteredNamespaceURI("knownPrefix");
    assertEquals("http://example.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNamespaceURI_ReturnsNull_PKCW0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getPrefix(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_UnregisteredNamespace_ReturnsNull_VGUJ2() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getPrefix("http://unknown.com");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_ReturnsNullWhenPrefixNotFoundAndNoParent_zjoY0() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getNamespaceURI("unknownPrefix");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNull() throws Exception {
        // This setup automatically injects the mocked parentNamespaceResolver into namespaceResolver
        // Arrange
        NamespaceResolver isolatedNamespaceResolver = new NamespaceResolver();
        // Act
        Pointer result = isolatedNamespaceResolver.getNamespaceContextPointer();
        // Assert
        assertNull(result, "The pointer should be null when there is no parent and pointer is not initialized");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNull_cgFn0() {
        NamespaceResolver resolver = new NamespaceResolver();
        assertNull(resolver.getNamespaceContextPointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSealed_sgev0() {
    NamespaceResolver resolver = new NamespaceResolver();
    assertFalse(resolver.isSealed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneMethod_lmDa0() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotNull(cloned);
    assertNotSame(original, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSeal_WithParent_Bykh1_1() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    child.seal();
    assertTrue(child.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSeal_WithParent_Bykh1_2() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    child.seal();
    assertTrue(parent.isSealed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_fuBK0_1() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://namespace1.com");
    assertEquals("http://namespace1.com", resolver.namespaceMap.get("prefix1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_fuBK0_2() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://namespace1.com");
    assertEquals("prefix1", resolver.reverseMap.get("http://namespace1.com"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_RegisteredPrefix_ReturnsPrefix_nSHS1_fid1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("http://example.com", "ex");
        String result = resolver.getPrefix("http://example.com");
    assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneMethod_lmDa0_1() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneMethod_lmDa0_2() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotSame(original, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WhenUriExistsInCurrent_kvBd0() throws Exception {
    HashMap<String, String> namespaceMap = new HashMap<>();
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    Field field = NamespaceResolver.class.getDeclaredField("namespaceMap");
    field.setAccessible(true);
    field.set(namespaceResolver, namespaceMap);
    namespaceMap.put("prefix1", "http://example.com");
    String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix1");
    assertEquals("http://example.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WhenUriDoesNotExistInCurrentButExistsInParent_YzMj0() throws Exception {
    HashMap<String, String> namespaceMap = new HashMap<>();
    NamespaceResolver parent = mock(NamespaceResolver.class);
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    Field field = NamespaceResolver.class.getDeclaredField("namespaceMap");
    field.setAccessible(true);
    field.set(namespaceResolver, namespaceMap);
    when(parent.getExternallyRegisteredNamespaceURI("prefix2")).thenReturn("http://parent.com");
    String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix2");
    assertEquals("http://parent.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WhenUriDoesNotExistAnywhere_IiWX0() throws Exception {
    HashMap<String, String> namespaceMap = new HashMap<>();
    NamespaceResolver parent = mock(NamespaceResolver.class);
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    Field field = NamespaceResolver.class.getDeclaredField("namespaceMap");
    field.setAccessible(true);
    field.set(namespaceResolver, namespaceMap);
    when(parent.getExternallyRegisteredNamespaceURI("prefix3")).thenReturn(null);
    String result = namespaceResolver.getExternallyRegisteredNamespaceURI("prefix3");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefix_WhenPrefixDoesNotExistAndParentIsNull_hMSA0() {
    NamespaceResolver namespaceResolver = new NamespaceResolver(); // No parent
    String namespaceURI = "http://example.com/ns";
    String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
    assertEquals(null, result, "Should return null when prefix does not exist and no parent is available.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredPrefix_WhenPrefixDoesNotExistButParentExists_nMvn0() {
    NamespaceResolver parentNamespaceResolver = mock(NamespaceResolver.class);
    NamespaceResolver namespaceResolver = new NamespaceResolver(parentNamespaceResolver);
    String namespaceURI = "http://example.com/ns";
    String expectedPrefixFromParent = "ex";
    when(parentNamespaceResolver.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(expectedPrefixFromParent);
    String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
    assertEquals(expectedPrefixFromParent, result, "Should return the prefix from the parent when local prefix does not exist.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSeal_WhenParentIsNotNull_DbkM0() throws Exception {
    NamespaceResolver parent = mock(NamespaceResolver.class);
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    namespaceResolver.seal();
    verify(parent, times(1)).seal();
}
}