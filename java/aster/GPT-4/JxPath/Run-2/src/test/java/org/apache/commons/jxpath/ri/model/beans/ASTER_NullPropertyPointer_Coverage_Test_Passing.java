/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

public class Aster_NullPropertyPointer_Coverage_Test_Passing {
@ExtendWith(MockitoExtension.class)
    @Mock
    NodePointer parent1;
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullParent_LtSw0() {
        NullPropertyPointer pointer = new NullPropertyPointer(null);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithContainerParent_dhap1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        when(mockParent.isContainer()).thenReturn(true);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonPropertyOwnerPointerParent_Wlnw2() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerNoDynamicSupport_SnnL4() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(false);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerNullPropertyPointer_UUvj5() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(null);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndExceptionOnSetPropertyName_VYHr6() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        doThrow(new RuntimeException()).when(mockPropertyPointer).setPropertyName(anyString());
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndExceptionOnSetValue_EcFo7() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        doThrow(new RuntimeException()).when(mockPropertyPointer).setValue(any());
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndNullValue_BMmG8() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(null);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndInvalidPath_GzUp9() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        when(mockParent.asPath()).thenReturn("invalid/path");
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
    }
@ExtendWith(MockitoExtension.class)
    @Mock
    NodePointer parent;
    @Mock
    JXPathContext context;
    @Mock
    AbstractFactory factory;
    @Mock
    PropertyOwnerPointer propertyOwnerPointer;
    @InjectMocks
    NullPropertyPointer nullPropertyPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_BEPZ0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        NodePointer result = nullPropertyPointer.getValuePointer();
        assertTrue(result instanceof NullPointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_mgKr0() {
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        DOMNodePointer parent = mock(DOMNodePointer.class);
        NodePointer mockedNodePointer = mock(NodePointer.class);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        when(mockedNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(mock(NodePointer.class));
        when(nullPropertyPointer.createPath(any(JXPathContext.class))).thenReturn(mockedNodePointer);
        NodePointer result = nullPropertyPointer.createChild(context, name, 1);
        assertNotNull(result);
        verify(mockedNodePointer).createChild(context, name, 1);
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyNameWithNonNullValue_vnRT0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
        nullPropertyPointer.setPropertyName("testProperty");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyNameWithNullValue_BCWV1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
        nullPropertyPointer.setPropertyName(null);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_NewParentCreated_bkVS0() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        NodePointer expectedNewParent = mock(NodePointer.class);
        when(parent.createPath(context)).thenReturn(expectedNewParent);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        nullPropertyPointer.createPath(context, new Object());
        verify(parent).createPath(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_NewParentIsPropertyOwnerPointer_CXTl4() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PropertyOwnerPointer newParent = mock(PropertyOwnerPointer.class);
        PropertyPointer propertyPointer = mock(PropertyPointer.class);
        when(parent.createPath(context)).thenReturn(newParent);
        when(newParent.getPropertyPointer()).thenReturn(propertyPointer);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        nullPropertyPointer.createPath(context, new Object());
        verify(newParent).getPropertyPointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_CreateChild_mZpC5() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PropertyOwnerPointer newParent = mock(PropertyOwnerPointer.class);
        PropertyPointer propertyPointer = mock(PropertyPointer.class);
        QName name = mock(QName.class);
        Object value = new Object();
        int index = 0;
        when(parent.createPath(context)).thenReturn(newParent);
        when(newParent.getPropertyPointer()).thenReturn(propertyPointer);
        when(newParent.getName()).thenReturn(name);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        nullPropertyPointer.createPath(context, value);
        verify(propertyPointer).createChild(context, name, index, value);
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndDynamicSupport_TRKn3() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent instanceof PropertyOwnerPointer).thenReturn(true);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue(new Object());
        verify(mockPropertyPointer).setPropertyName(anyString());
        verify(mockPropertyPointer).setValue(any());
    }
}