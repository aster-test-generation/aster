/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ContainerPointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionReturnsTrue_nAiH0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(containerPointer.getBaseValue()).thenReturn(java.util.Collections.singletonList("test"));
        when(ValueUtils.isCollection(java.util.Collections.singletonList("test"))).thenReturn(true);
        boolean result = containerPointer.isCollection();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNull_BRSb0() {
        DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
        DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
        when(mockDomNodePointer.getBaseValue()).thenReturn(null);
        assertEquals(1, containerPointer.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_lour0_zbLI0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    assertEquals(pointer, pointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_KKrU1_kQDU0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    assertFalse(pointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_BFwB2_FElc0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    Object differentObject = new Object();
    assertFalse(pointer.equals(differentObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentContainer_LiBp3_dSIv0() {
    DocumentContainer container1 = new DocumentContainer(null);
    DocumentContainer container2 = new DocumentContainer(null);
    ContainerPointer pointer1 = new ContainerPointer(container1, Locale.getDefault());
    ContainerPointer pointer2 = new ContainerPointer(container2, Locale.getDefault());
    assertNotEquals(pointer1, pointer2, "Should return false when containers are different");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeTestNode_CtTF0_WXfu0() {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    NodeIterator mockNodeIterator = mock(NodeIterator.class);
    when(mockDomNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    NodeIterator result = containerPointer.namespaceIterator();
    verify(mockDomNodePointer).namespaceIterator();
    assertEquals(mockNodeIterator, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeWithValidIndex_YbPP0_pMew0() {
    DocumentContainer container = mock(DocumentContainer.class);
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
    when(containerPointer.getBaseValue()).thenReturn(new Object());
    when(containerPointer.getLength()).thenReturn(5); // Assuming length is 5
    when(containerPointer.getImmediateNode()).thenCallRealMethod(); // Use real method to handle index internally
    Object result = containerPointer.getImmediateNode();
    assertNotNull(result);
    verify(containerPointer).getBaseValue();
    verify(containerPointer).getLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_wIlL0_EZGK0() {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    NodePointer mockNodePointer = mock(NodePointer.class);
    when(mockDomNodePointer.getValuePointer()).thenReturn(mockNodePointer);
    when(mockNodePointer.namespacePointer("http://example.com/ns")).thenReturn(mockNodePointer);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    NodePointer result = containerPointer.namespacePointer("http://example.com/ns");
    verify(mockNodePointer).namespacePointer("http://example.com/ns");
    assertSame(mockNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeTestNode_CtTF0_WXfu0_fid2() {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    NodeIterator mockNodeIterator = mock(NodeIterator.class);
    when(mockDomNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    NodeIterator result = containerPointer.namespaceIterator();
    verify(mockDomNodePointer, times(1)).namespaceIterator();
    assertSame(mockNodeIterator, result);
}
}