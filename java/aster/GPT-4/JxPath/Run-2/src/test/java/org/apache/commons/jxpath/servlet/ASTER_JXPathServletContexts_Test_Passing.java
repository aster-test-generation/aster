/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
@Mock
    private static JXPathContextFactory factory;
@Mock
    private ServletContext servletContext;
@Mock
    private JXPathContext jXPathContext;
@InjectMocks
    private JXPathServletContexts jxpathservletcontexts;
@Mock
    private HttpSession session;
@Mock
    private JXPathContext mockContext;
@Mock
    private JXPathContext applicationContext;
@Mock
    private HttpSessionAndServletContext handle;
@Mock
    private KeywordVariables keywordVariables;
@Mock
    private PageContext pageContext;
@Mock
    private HttpServletRequest request;
@Mock
    private JXPathContext parentContext;
@Mock
    private JXPathContext context;
@Mock
    private ServletRequest mockServletRequest;
@Mock
    private ServletContext mockServletContext;
@Mock
    private HttpServletRequest mockHttpServletRequest;
@Mock
    private HttpSession mockHttpSession;
@Mock
    private JXPathContext mockJXPathContext;
@Mock
    private JXPathContextFactory mockFactory;
@Mock
    private ServletRequestAndContext mockServletRequestAndContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_1() throws Exception {
        when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        doNothing().when(servletContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        verify(servletContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        verify(factory, never()).newContext(null, servletContext);
        assertNotNull(result, "Context should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_2() throws Exception {
        when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        doNothing().when(servletContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        verify(servletContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        verify(factory, never()).newContext(null, servletContext);
        assertSame(jXPathContext, result, "Should return the existing context");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_NewContext_IjMA0() {
        ServletContext servletContext = Mockito.mock(ServletContext.class);
        Mockito.when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        Mockito.verify(servletContext).setAttribute(Mockito.eq(Constants.JXPATH_CONTEXT), Mockito.any(JXPathContext.class));
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_pEJn1() {
        JXPathContext existingContext = Mockito.mock(JXPathContext.class);
        ServletContext servletContext = Mockito.mock(ServletContext.class);
        Mockito.when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        Mockito.verify(servletContext, Mockito.never()).setAttribute(Mockito.eq(Constants.JXPATH_CONTEXT), Mockito.any(JXPathContext.class));
        assertSame(existingContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContext_lJMZ1() {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    JXPathContext existingContext = mock(JXPathContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(anyString(), any());
    assertEquals(existingContext, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_uMVZ1_1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_uMVZ1_2() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertEquals(expectedContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_HttpServletRequestNoSession_Ovrx4() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    ServletContext servletContext = mock(ServletContext.class);
    when(request.getSession(false)).thenReturn(null);
    JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_NewContext_Kcbm0_1() throws Exception {
    when(mockHttpServletRequest.getSession(false)).thenReturn(mockHttpSession);
    when(mockFactory.newContext(any(), any())).thenReturn(mockJXPathContext);
    when(mockServletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(mockServletRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
    when(mockJXPathContext.getContextBean()).thenReturn(mockServletRequestAndContext);
    JXPathContext result = JXPathServletContexts.getRequestContext(mockServletRequest, mockServletContext);
    verify(mockServletRequest).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_ExistingValidContext_HAjL0_1() throws Exception {
    when(mockHttpServletRequest.getSession(false)).thenReturn(mockHttpSession);
    when(mockFactory.newContext(any(), any())).thenReturn(mockJXPathContext);
    when(mockServletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockJXPathContext);
    when(mockJXPathContext.getContextBean()).thenReturn(mockServletRequestAndContext);
    when(mockServletRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
    JXPathContext result = JXPathServletContexts.getRequestContext(mockServletRequest, mockServletContext);
    verify(mockServletRequest, never()).setAttribute(anyString(), any());
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_ExistingValidContext_HAjL0_2() throws Exception {
    when(mockHttpServletRequest.getSession(false)).thenReturn(mockHttpSession);
    when(mockFactory.newContext(any(), any())).thenReturn(mockJXPathContext);
    when(mockServletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockJXPathContext);
    when(mockJXPathContext.getContextBean()).thenReturn(mockServletRequestAndContext);
    when(mockServletRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
    JXPathContext result = JXPathServletContexts.getRequestContext(mockServletRequest, mockServletContext);
    verify(mockServletRequest, never()).setAttribute(anyString(), any());
    assertEquals(mockJXPathContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_ExistingInvalidContext_iMyd0_1() throws Exception {
    when(mockHttpServletRequest.getSession(false)).thenReturn(mockHttpSession);
    when(mockFactory.newContext(any(), any())).thenReturn(mockJXPathContext);
    when(mockServletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockJXPathContext);
    when(mockJXPathContext.getContextBean()).thenReturn(mockServletRequestAndContext);
    when(mockServletRequestAndContext.getServletRequest()).thenReturn(mockHttpServletRequest); // Different request
    JXPathContext result = JXPathServletContexts.getRequestContext(mockServletRequest, mockServletContext);
    verify(mockServletRequest).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_ExistingInvalidContext_iMyd0_2() throws Exception {
    when(mockHttpServletRequest.getSession(false)).thenReturn(mockHttpSession);
    when(mockFactory.newContext(any(), any())).thenReturn(mockJXPathContext);
    when(mockServletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockJXPathContext);
    when(mockJXPathContext.getContextBean()).thenReturn(mockServletRequestAndContext);
    when(mockServletRequestAndContext.getServletRequest()).thenReturn(mockHttpServletRequest); // Different request
    JXPathContext result = JXPathServletContexts.getRequestContext(mockServletRequest, mockServletContext);
    verify(mockServletRequest).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertNotEquals(mockJXPathContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContextReturned_NIYx0_1() throws Exception {
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mockContext);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    verify(factory, never()).newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class));
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContextReturned_NIYx0_2() throws Exception {
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mockContext);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    verify(factory, never()).newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class));
    assertSame(mockContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_uMVZ1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);
        assertEquals(expectedContext, result);
    }
}