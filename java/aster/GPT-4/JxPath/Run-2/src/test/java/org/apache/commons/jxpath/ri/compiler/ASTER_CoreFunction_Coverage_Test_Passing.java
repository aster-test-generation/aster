///**
// * Generated by Aster
// */
//package org.apache.commons.jxpath.ri.compiler;
//import java.text.DecimalFormat;
//import java.text.DecimalFormatSymbols;
//import java.text.NumberFormat;
//import java.util.Collection;
//import java.util.Locale;
//import org.apache.commons.jxpath.BasicNodeSet;
//import org.apache.commons.jxpath.JXPathContext;
//import org.apache.commons.jxpath.JXPathException;
//import org.apache.commons.jxpath.JXPathInvalidSyntaxException;
//import org.apache.commons.jxpath.NodeSet;
//import org.apache.commons.jxpath.ri.Compiler;
//import org.apache.commons.jxpath.ri.EvalContext;
//import org.apache.commons.jxpath.ri.InfoSetUtil;
//import org.apache.commons.jxpath.ri.axes.NodeSetContext;
//import org.apache.commons.jxpath.ri.model.NodePointer;
//import org.apache.commons.jxpath.ri.axes.NamespaceContext;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
//import org.apache.commons.jxpath.ri.compiler.Expression;
//import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
//import org.apache.commons.jxpath.servlet.HttpSessionAndServletContext;
//import org.apache.commons.jxpath.servlet.KeywordVariables;
//import org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator;
//import org.apache.commons.jxpath.JXPathBasicBeanInfo;
//import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer;
//import org.apache.commons.jxpath.servlet.HttpSessionHandler;
//import org.apache.commons.jxpath.ri.axes.SelfContext;
//import org.apache.commons.jxpath.functions.MethodFunction;
//import org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator;
//import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
//import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
//import org.apache.commons.jxpath.ri.model.beans.CollectionChildNodeIterator;
//import org.apache.commons.jxpath.ri.compiler.Constant;
//import org.apache.commons.jxpath.ri.axes.UnionContext;
//import org.apache.commons.jxpath.ri.axes.ChildContext;
//import org.apache.commons.jxpath.servlet.PageScopeContext;
//import org.apache.commons.jxpath.ri.model.NodePointer;
//import org.apache.commons.jxpath.servlet.ServletRequestAndContext;
//import org.apache.commons.jxpath.ri.compiler.NodeTest;
//import org.apache.commons.jxpath.util.TypeUtils;
//import org.apache.commons.jxpath.functions.ConstructorFunction;
//import org.apache.commons.jxpath.CompiledExpression;
//import org.apache.commons.jxpath.xml.DocumentContainer;
//import org.apache.commons.jxpath.ri.model.VariablePointer;
//import org.apache.commons.jxpath.ri.model.beans.CollectionAttributeNodeIterator;
//import org.apache.commons.jxpath.ri.compiler.Operation;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
//import org.apache.commons.jxpath.ri.NamespaceResolver;
//import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer;
//import org.apache.commons.jxpath.BasicVariables;
//import org.apache.commons.jxpath.BasicNodeSet;
//import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
//import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
//import org.apache.commons.jxpath.JXPathContextFactory;
//import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
//import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
//import org.apache.commons.jxpath.util.ReverseComparator;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer;
//import org.apache.commons.jxpath.JXPathAbstractFactoryException;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
//import org.apache.commons.jxpath.ri.parser.XPathParserConstants;
//import org.apache.commons.jxpath.xml.DOMParser;
//import org.apache.commons.jxpath.ri.model.dynamic.DynamicAttributeIterator;
//import org.apache.commons.jxpath.xml.JDOMParser;
//import org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl;
//import org.apache.commons.jxpath.servlet.ServletRequestHandler;
//import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
//import org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression;
//import org.apache.commons.jxpath.Function;
//import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
//import org.apache.commons.jxpath.servlet.JXPathServletContexts;
//import org.apache.commons.jxpath.ClassFunctions;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
//import org.apache.commons.jxpath.ri.axes.RootContext;
//import org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory;
//import org.apache.commons.jxpath.JXPathInvalidAccessException;
//import org.apache.commons.jxpath.servlet.Constants;
//import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
//import org.apache.commons.jxpath.ri.model.container.ContainerPointer;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
//import org.apache.commons.jxpath.util.ClassLoaderUtil;
//import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer;
//import org.apache.commons.jxpath.FunctionLibrary;
//import org.apache.commons.jxpath.util.KeyManagerUtils;
//import org.apache.commons.jxpath.KeyManager;
//import org.apache.commons.jxpath.ri.parser.Token;
//import org.apache.commons.jxpath.ExpressionContext;
//import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
//import org.apache.commons.jxpath.ri.parser.ParseException;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator;
//import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyIterator;
//import org.apache.commons.jxpath.ri.model.beans.CollectionPointer;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory;
//import org.apache.commons.jxpath.PackageFunctions;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
//import org.apache.commons.jxpath.ri.model.beans.CollectionNodeIterator;
//import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory;
//import org.apache.commons.jxpath.ri.axes.InitialContext;
//import org.apache.commons.jxpath.ri.axes.NodeSetContext;
//import org.apache.commons.jxpath.JXPathIntrospector;
//import org.apache.commons.jxpath.ri.model.dynabeans.StrictLazyDynaBeanPointerFactory;
//import org.apache.commons.jxpath.ri.axes.AncestorContext;
//import org.apache.commons.jxpath.ExtendedKeyManager;
//import org.apache.commons.jxpath.ri.compiler.CoreFunction;
//import org.apache.commons.jxpath.IdentityManager;
//import org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer;
//import org.apache.commons.jxpath.ExceptionHandler;
//import org.apache.commons.jxpath.Variables;
//import org.apache.commons.jxpath.ri.Parser;
//import org.apache.commons.jxpath.JXPathContext;
//import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
//import org.apache.commons.jxpath.servlet.PageContextHandler;
//import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
//import org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory;
//import org.apache.commons.jxpath.JXPathTypeConversionException;
//import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationCompare;
//import org.apache.commons.jxpath.ri.model.beans.LangAttributePointer;
//import org.apache.commons.jxpath.util.ValueUtils;
//import org.apache.commons.jxpath.Functions;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
//import org.apache.commons.jxpath.ri.compiler.Path;
//import org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator;
//import org.apache.commons.jxpath.JXPathNotFoundException;
//import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
//import org.apache.commons.jxpath.ri.EvalContext;
//import org.apache.commons.jxpath.ri.compiler.Step;
//import org.apache.commons.jxpath.servlet.PageScopeContextHandler;
//import org.apache.commons.jxpath.ri.parser.TokenMgrError;
//import org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory;
//import org.apache.commons.jxpath.MapDynamicPropertyHandler;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
//import org.apache.commons.jxpath.ri.compiler.CoreOperation;
//import org.apache.commons.jxpath.AbstractFactory;
//import org.apache.commons.jxpath.DynamicPropertyHandler;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
//import org.apache.commons.jxpath.Pointer;
//import org.apache.commons.jxpath.ri.model.NodePointerFactory;
//import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
//import org.apache.commons.jxpath.util.MethodLookupUtils;
//import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory;
//import org.apache.commons.jxpath.ri.model.NodeIterator;
//import org.apache.commons.jxpath.JXPathBeanInfo;
//import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer;
//import org.apache.commons.jxpath.XMLDocumentContainer;
//import org.apache.commons.jxpath.ri.axes.AttributeContext;
//import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
//import org.apache.commons.jxpath.ri.parser.XPathParser;
//import org.apache.commons.jxpath.ri.Compiler;
//import org.apache.commons.jxpath.ri.axes.SimplePathInterpreter;
//import org.apache.commons.jxpath.xml.XMLParser2;
//import org.apache.commons.jxpath.ri.model.beans.NullPointer;
//import org.apache.commons.jxpath.ri.JXPathCompiledExpression;
//import org.apache.commons.jxpath.ri.QName;
//import org.apache.commons.jxpath.ri.InfoSetUtil;
//import org.apache.commons.jxpath.util.TypeConverter;
//import org.apache.commons.jxpath.ri.axes.PredicateContext;
//import org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
//import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
//import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
//import org.apache.commons.jxpath.ri.axes.ParentContext;
//import org.apache.commons.jxpath.util.BasicTypeConverter;
//import org.apache.commons.jxpath.ri.axes.DescendantContext;
//import org.apache.commons.jxpath.ri.compiler.VariableReference;
//import org.apache.commons.jxpath.ri.model.dom.NamespacePointer;
//import org.apache.commons.jxpath.ri.compiler.LocationPath;
//import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
//import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
//import org.apache.commons.jxpath.xml.XMLParser;
//import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
//import org.apache.commons.jxpath.JXPathContextFactoryConfigurationError;
//import org.apache.commons.jxpath.Container;
//import org.apache.commons.jxpath.NodeSet;
//import org.apache.commons.jxpath.JXPathInvalidSyntaxException;
//import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
//import org.apache.commons.jxpath.ri.model.beans.NullElementPointer;
//import org.apache.commons.jxpath.servlet.ServletContextHandler;
//import org.apache.commons.jxpath.JXPathException;
//import static org.junit.jupiter.api.Assertions.*;
//import java.util.*;
//import org.junit.jupiter.api.*;
//import java.util.concurrent.TimeUnit;
//import static org.mockito.Mockito.when;
//import static org.mockito.Mockito.*;
//import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
//import org.springframework.mock.web.*;
//import static org.junit.jupiter.api.Assertions.*;
//import java.util.*;
//import org.junit.jupiter.api.*;
//import java.util.concurrent.TimeUnit;
//import static org.mockito.Mockito.when;
//import static org.mockito.Mockito.*;
//import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
//import org.springframework.mock.web.*;
//public class Aster_CoreFunction_Coverage_Test_Passing {
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionBooleanWithIncorrectArgCount_nVvq0() {
//        Expression[] args = new Expression[2]; // More than one argument
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionBoolean(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_ArgCountFail_YXnL0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]); // only one argument
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionSubstringBefore(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithIncorrectArgumentCount_iyJY4() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(2, args);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        coreFunction.functionName(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStartsWith_InvalidArgumentCount_LKuv2() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = {}; // No arguments provided
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        coreFunction.functionStartsWith(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_AssertArgCount_ILLX0() {
//        Expression[] args = {}; // No arguments passed
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionLang(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNot_AssertArgCount_UPQU0() {
//        Expression[] args = new Expression[2]; // Providing more than one argument
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = new EvalContext(null);
//        coreFunction.functionNot(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionEndsWith_ArgumentCountFailure_pRwe0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]); // only one argument provided
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionEndsWith(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithLessThanTwoArguments_NDJQ0() {
//        Expression[] args = new Expression[1]; // Less than 2 arguments
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionConcat(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCeilingWithIncorrectArgCount_xntq3() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = new Expression[0]; // No arguments passed
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        coreFunction.functionCeiling(context);
//    }
//@ExtendWith(MockitoExtension.class)
//    private CoreFunction coreFunction;
//    private EvalContext context;
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLocalName_AssertArgCount_uXhA1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionLocalName(context);
//    }
//    @Test(expected = AssertionError.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_AssertArgCountFail_gptw0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]); // More than one argument
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionSum(context);
//    }
//    @Test(expected = JXPathException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_InvalidType_gFQB2() {
//        Expression[] expressions = new Expression[1];
//        expressions[0] = mock(Expression.class);
//        when(expressions[0].compute(any(EvalContext.class))).thenReturn(new Object());
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionSum(context);
//    }
//    @Test(expected = AssertionError.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStringWithIncorrectArgumentCount_LCIu2() {
//        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2); // Incorrect argument count
//        when(coreFunction.functionString(context)).thenCallRealMethod();
//        coreFunction.functionString(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_AssertArgCount_IWsp0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]); // Only one argument provided
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionSubstringAfter(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionFloorWithIncorrectArgCount_YBKO0() {
//        Expression[] args = new Expression[2]; // More than one argument
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = new EvalContext(null);
//        coreFunction.functionFloor(context);
//    }
//    @Test(expected = IllegalArgumentException.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionRoundWithIncorrectArgCount_JavX0() {
//        Expression[] args = new Expression[2]; // More than one argument
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = Mockito.mock(EvalContext.class);
//        coreFunction.functionRound(context);
//    }
//    @Test(expected = AssertionError.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNumberWithInvalidArgumentCount_zLMe2() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(2, args);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        coreFunction.functionNumber(context);
//    }
//    @Test(expected = AssertionError.class)
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNumberWithZeroArgumentsExpectedOne_miSv3() {
//        Expression[] args = {};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        coreFunction.functionNumber(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionBooleanReturnsTrue_RzUt1() {
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(expr.computeValue(context)).thenReturn(true);
//        Object result = coreFunction.functionBoolean(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionBooleanReturnsFalse_nWwF2() {
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(expr.computeValue(context)).thenReturn(false);
//        Object result = coreFunction.functionBoolean(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionBooleanWithNullContext_HYQJ3() {
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = null;
//        try {
//            coreFunction.functionBoolean(context);
//            fail("Expected NullPointerException to be thrown");
//        } catch (NullPointerException e) {
//        }
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetArgumentCountWithNullArgs_pFlM0() {
//        CoreFunction coreFunction = new CoreFunction(1, null);
//        int result = coreFunction.getArgumentCount();
//        assertEquals(0, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetArgumentCountWithEmptyArgs_liwz1() {
//        Expression[] args = new Expression[0];
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        int result = coreFunction.getArgumentCount();
//        assertEquals(0, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetArgumentCountWithNonEmptyArgs_nRsn2() {
//        Expression[] args = new Expression[3];
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        int result = coreFunction.getArgumentCount();
//        assertEquals(3, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_NormalCase_IhBC1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn(" world");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("hello", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_NotFound_nEMG2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn("test");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_EmptyString1_Biiz3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("");
//        when(expr2.computeValue(context)).thenReturn("test");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_EmptyString2_wghq4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn("");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_SameStrings_rrOr5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello");
//        when(expr2.computeValue(context)).thenReturn("hello");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringBefore_SubstringAtStart_alKs6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn("hello");
//        String result = coreFunction.functionSubstringBefore(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithZeroArguments_HpyE0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        QName name = new QName("testName");
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.getName()).thenReturn(name);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        Object result = coreFunction.functionName(context);
//        assertEquals("testName", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithOneArgumentButNoEvalContext_BzDx1() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        Object nonEvalContextObject = new Object();
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(args[0]);
//        when(args[0].compute(context)).thenReturn(nonEvalContextObject);
//        Object result = coreFunction.functionName(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithOneArgumentAndEvalContextButNoNext_uSCH2() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(args[0]);
//        when(args[0].compute(context)).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(false);
//        Object result = coreFunction.functionName(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithOneArgumentEvalContextAndHasNext_ErxT3() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        QName name = new QName("nextName");
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(args[0]);
//        when(args[0].compute(context)).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(true);
//        when(evalContext.next()).thenReturn(nodePointer);
//        when(nodePointer.getName()).thenReturn(name);
//        Object result = coreFunction.functionName(context);
//        assertEquals("nextName", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithZeroArgumentsAndNullPointer_pAlO5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentNodePointer()).thenReturn(null);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        Object result = coreFunction.functionName(context);
//        assertNull(result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithOneArgumentAndNullComputeResult_UIbf6() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(args[0]);
//        when(args[0].compute(context)).thenReturn(null);
//        Object result = coreFunction.functionName(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNameWithOneArgumentEvalContextAndNullNextResult_OUil7() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(args[0]);
//        when(args[0].compute(context)).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(true);
//        when(evalContext.next()).thenReturn(null);
//        Object result = coreFunction.functionName(context);
//        assertNull(result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStartsWith_BothStringsMatch_mSwl0() {
//        EvalContext context = mock(EvalContext.class);
//        Expression arg1 = mock(Expression.class);
//        Expression arg2 = mock(Expression.class);
//        Expression[] args = {arg1, arg2};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        when(arg1.computeValue(context)).thenReturn("Hello");
//        when(arg2.computeValue(context)).thenReturn("He");
//        when(InfoSetUtil.stringValue("Hello")).thenReturn("Hello");
//        when(InfoSetUtil.stringValue("He")).thenReturn("He");
//        Object result = coreFunction.functionStartsWith(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStartsWith_StringsDoNotMatch_YHap1() {
//        EvalContext context = mock(EvalContext.class);
//        Expression arg1 = mock(Expression.class);
//        Expression arg2 = mock(Expression.class);
//        Expression[] args = {arg1, arg2};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        when(arg1.computeValue(context)).thenReturn("Hello");
//        when(arg2.computeValue(context)).thenReturn("world");
//        when(InfoSetUtil.stringValue("Hello")).thenReturn("Hello");
//        when(InfoSetUtil.stringValue("world")).thenReturn("world");
//        Object result = coreFunction.functionStartsWith(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStartsWith_NullStrings_rmIU3() {
//        EvalContext context = mock(EvalContext.class);
//        Expression arg1 = mock(Expression.class);
//        Expression arg2 = mock(Expression.class);
//        Expression[] args = {arg1, arg2};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        when(arg1.computeValue(context)).thenReturn(null);
//        when(arg2.computeValue(context)).thenReturn(null);
//        when(InfoSetUtil.stringValue(null)).thenReturn(null);
//        Object result = coreFunction.functionStartsWith(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_ValidLangCheck_XhfP1() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(args[0].computeValue(context)).thenReturn("en");
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getSingleNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.isLanguage("en")).thenReturn(true);
//        Object result = coreFunction.functionLang(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_InvalidLangCheck_Mapz2() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(args[0].computeValue(context)).thenReturn("fr");
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getSingleNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.isLanguage("fr")).thenReturn(false);
//        Object result = coreFunction.functionLang(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_NullPointerCheck_jBQY3() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(context.getSingleNodePointer()).thenReturn(null);
//        Object result = coreFunction.functionLang(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_StringValueConversion_GOYN4() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(args[0].computeValue(context)).thenReturn("en-US");
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getSingleNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.isLanguage("en-US")).thenReturn(true);
//        Object result = coreFunction.functionLang(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLang_PointerIsLanguageCheck_Vkqr5() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        when(args[0].computeValue(context)).thenReturn("de");
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getSingleNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.isLanguage("de")).thenReturn(true);
//        Object result = coreFunction.functionLang(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountZero_NullNamespace_ASfj0() {
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.getNamespaceURI()).thenReturn(null);
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountZero_NonNullNamespace_kLlj1() {
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.getNamespaceURI()).thenReturn("http://example.com");
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("http://example.com", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountOne_SetNotEvalContext_HnZv2() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        when(args[0].compute(context)).thenReturn(new Object());
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountOne_SetIsEvalContext_NoNext_OoiQ3() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext setContext = mock(EvalContext.class);
//        when(args[0].compute(context)).thenReturn(setContext);
//        when(setContext.hasNext()).thenReturn(false);
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountOne_SetIsEvalContext_HasNext_NullNamespace_YPLN4() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext setContext = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(args[0].compute(context)).thenReturn(setContext);
//        when(setContext.hasNext()).thenReturn(true);
//        when(setContext.next()).thenReturn(nodePointer);
//        when(nodePointer.getNamespaceURI()).thenReturn(null);
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNamespaceURI_ArgCountOne_SetIsEvalContext_HasNext_NonNullNamespace_eSIh5() {
//        Expression[] args = {mock(Expression.class)};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext setContext = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(args[0].compute(context)).thenReturn(setContext);
//        when(setContext.hasNext()).thenReturn(true);
//        when(setContext.next()).thenReturn(nodePointer);
//        when(nodePointer.getNamespaceURI()).thenReturn("http://example.org");
//        Object result = coreFunction.functionNamespaceURI(context);
//        assertEquals("http://example.org", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionEndsWith_TrueCase_egCr1() {
//        Expression[] expressions = new Expression[2];
//        expressions[0] = mock(Expression.class);
//        expressions[1] = mock(Expression.class);
//        when(expressions[0].computeValue(any(EvalContext.class))).thenReturn("Hello World");
//        when(expressions[1].computeValue(any(EvalContext.class))).thenReturn("World");
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionEndsWith(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionEndsWith_FalseCase_FdVU2() {
//        Expression[] expressions = new Expression[2];
//        expressions[0] = mock(Expression.class);
//        expressions[1] = mock(Expression.class);
//        when(expressions[0].computeValue(any(EvalContext.class))).thenReturn("Hello World");
//        when(expressions[1].computeValue(any(EvalContext.class))).thenReturn("Test");
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionEndsWith(context);
//        assertEquals(Boolean.FALSE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionEndsWith_EmptyStringCase_uBoL3() {
//        Expression[] expressions = new Expression[2];
//        expressions[0] = mock(Expression.class);
//        expressions[1] = mock(Expression.class);
//        when(expressions[0].computeValue(any(EvalContext.class))).thenReturn("");
//        when(expressions[1].computeValue(any(EvalContext.class))).thenReturn("");
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionEndsWith(context);
//        assertEquals(Boolean.TRUE, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithTwoArguments_OnLv1() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn("Hello");
//        when(args[1].compute(any())).thenReturn("World");
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("HelloWorld", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithMultipleArguments_ICgU2() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn("Java");
//        when(args[1].compute(any())).thenReturn(" is");
//        when(args[2].compute(any())).thenReturn(" awesome");
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("Java is awesome", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithEmptyStrings_ELvY3() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn("");
//        when(args[1].compute(any())).thenReturn("");
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithNullValues_ZOgM4() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn(null);
//        when(args[1].compute(any())).thenReturn(null);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("nullnull", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithNumbers_CaSF5() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn(123);
//        when(args[1].compute(any())).thenReturn(456);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("123456", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionConcatWithSpecialCharacters_bYaN6() {
//        Expression[] args = {mock(Expression.class), mock(Expression.class)};
//        when(args[0].compute(any())).thenReturn("Hello@");
//        when(args[1].compute(any())).thenReturn("#World!");
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        String result = (String) coreFunction.functionConcat(context);
//        assertEquals("Hello@#World!", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithEmptyContext_gDNC0() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(0);
//        when(context.nextNode()).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        assertEquals(Double.valueOf(0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithSingleElement_RRaH1() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(0);
//        when(context.nextNode()).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context, times(2)).nextNode();
//        assertEquals(Double.valueOf(1), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithMultipleElements_PIUQ2() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(0);
//        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context, times(3)).nextNode();
//        assertEquals(Double.valueOf(2), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithPositionRestoration_aeNB3() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(5);
//        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context).setPosition(5);
//        assertEquals(Double.valueOf(2), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithNoPositionRestoration_zQBu4() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(0);
//        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context, never()).setPosition(anyInt());
//        assertEquals(Double.valueOf(2), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithInitialPositionNonZero_Eodo5() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(3);
//        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context).setPosition(3);
//        assertEquals(Double.valueOf(3), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithInitialPositionZero_pCmE6() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(0);
//        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context, never()).setPosition(anyInt());
//        assertEquals(Double.valueOf(3), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLastWithInitialPositionAndNoNodes_GuPU8() {
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentPosition()).thenReturn(2);
//        when(context.nextNode()).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, null);
//        Object result = coreFunction.functionLast(context);
//        verify(context).getCurrentPosition();
//        verify(context).reset();
//        verify(context).setPosition(2);
//        assertEquals(Double.valueOf(0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCeilingWithValidNumber_YlMc0() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        when(expr.computeValue(context)).thenReturn(3.3);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        Object result = coreFunction.functionCeiling(context);
//        assertEquals("Expected ceiling value", 4.0, (Double) result, 0.0);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCeilingWithNaN_FTME1() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        when(expr.computeValue(context)).thenReturn(Double.NaN);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        Object result = coreFunction.functionCeiling(context);
//        assertTrue("Result should be NaN", Double.isNaN((Double) result));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCeilingWithInfinite_zRqZ2() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        Object result = coreFunction.functionCeiling(context);
//        assertTrue("Result should be positive infinity", Double.isInfinite((Double) result) && (Double) result > 0);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCeilingWithNegativeNumber_XxhA4() {
//        EvalContext context = mock(EvalContext.class);
//        Expression[] args = new Expression[1];
//        Expression expr = mock(Expression.class);
//        args[0] = expr;
//        when(expr.computeValue(context)).thenReturn(-2.7);
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        Object result = coreFunction.functionCeiling(context);
//        assertEquals("Expected ceiling value for negative number", -2.0, (Double) result, 0.0);
//    }
//@BeforeEach
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void setup_VkCd0() {
//        context = mock(EvalContext.class);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionLast_bnaK1() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
//        when(context.functionLast()).thenReturn("lastResult");
//        assertEquals("lastResult", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionPosition_sSZn2() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
//        when(context.functionPosition()).thenReturn(1);
//        assertEquals(1, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionCount_ICJZ3() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
//        when(context.functionCount()).thenReturn(10);
//        assertEquals(10, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionLang_oDYy4() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
//        when(context.functionLang("en")).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionID_WdIQ5() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
//        when(context.functionID("123")).thenReturn(new Object());
//        assertNotNull(coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionLocalName_qAkv6() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
//        when(context.functionLocalName()).thenReturn("localName");
//        assertEquals("localName", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionNamespaceURI_hmVo7() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
//        when(context.functionNamespaceURI()).thenReturn("namespaceURI");
//        assertEquals("namespaceURI", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionName_ETxL8() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
//        when(context.functionName()).thenReturn("name");
//        assertEquals("name", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionString_FkRU9() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
//        when(context.functionString()).thenReturn("stringResult");
//        assertEquals("stringResult", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionConcat_Zqba10() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
//        when(context.functionConcat("hello", "world")).thenReturn("helloworld");
//        assertEquals("helloworld", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionStartsWith_pSZt11() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
//        when(context.functionStartsWith("hello", "he")).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionEndsWith_RZNm12() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_ENDS_WITH, null);
//        when(context.functionEndsWith("hello", "lo")).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionContains_elbr13() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_CONTAINS, null);
//        when(context.functionContains("hello", "ell")).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionSubstringBefore_JIyO14() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_BEFORE, null);
//        when(context.functionSubstringBefore("hello", "lo")).thenReturn("hel");
//        assertEquals("hel", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionSubstringAfter_vHjG15() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_AFTER, null);
//        when(context.functionSubstringAfter("hello", "he")).thenReturn("llo");
//        assertEquals("llo", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionSubstring_DDnF16() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING, null);
//        when(context.functionSubstring("hello", 1, 3)).thenReturn("ell");
//        assertEquals("ell", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionStringLength_iXvX17() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, null);
//        when(context.functionStringLength("hello")).thenReturn(5);
//        assertEquals(5, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionNormalizeSpace_RTlz18() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
//        when(context.functionNormalizeSpace(" hello ")).thenReturn("hello");
//        assertEquals("hello", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionTranslate_ADqb19() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
//        when(context.functionTranslate("hello", "h", "j")).thenReturn("jello");
//        assertEquals("jello", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionBoolean_mwQX20() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
//        when(context.functionBoolean(true)).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionNot_DVBb21() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
//        when(context.functionNot(false)).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionTrue_VmgV22() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
//        when(context.functionTrue()).thenReturn(true);
//        assertEquals(true, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionFalse_schS23() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
//        when(context.functionFalse()).thenReturn(false);
//        assertEquals(false, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionNull_JSSk24() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NULL, null);
//        when(context.functionNull()).thenReturn(null);
//        assertNull(coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionNumber_icHS25() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
//        when(context.functionNumber("123")).thenReturn(123);
//        assertEquals(123, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionSum_IcWc26() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
//        when(context.functionSum(Arrays.asList(1, 2, 3))).thenReturn(6);
//        assertEquals(6, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionFloor_jzXW27() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
//        when(context.functionFloor(3.7)).thenReturn(3.0);
//        assertEquals(3.0, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionCeiling_gLxX28() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
//        when(context.functionCeiling(3.2)).thenReturn(4.0);
//        assertEquals(4.0, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionRound_YIfn29() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
//        when(context.functionRound(3.5)).thenReturn(4);
//        assertEquals(4, coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionKey_hLQp30() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, null);
//        when(context.functionKey("keyName", "value")).thenReturn(new Object());
//        assertNotNull(coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeValue_FunctionFormatNumber_pwjy31() {
//        coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
//        when(context.functionFormatNumber(123.456, "###.##")).thenReturn("123.46");
//        assertEquals("123.46", coreFunction.computeValue(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForLast_UIHV0() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
//        assertEquals("last", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForPosition_ODNK1() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
//        assertEquals("position", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForCount_WIMK2() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
//        assertEquals("count", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForId_HYoC3() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
//        assertEquals("id", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForLocalName_VCgY4() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
//        assertEquals("local-name", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForNamespaceUri_zRGN5() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
//        assertEquals("namespace-uri", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForName_CtLQ6() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
//        assertEquals("name", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForString_Zpwj7() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
//        assertEquals("string", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForConcat_fotN8() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
//        assertEquals("concat", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForStartsWith_Dema9() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
//        assertEquals("starts-with", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForEndsWith_cizC10() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ENDS_WITH, null);
//        assertEquals("ends-with", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForContains_PxXz11() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONTAINS, null);
//        assertEquals("contains", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForSubstringBefore_xVKg12() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_BEFORE, null);
//        assertEquals("substring-before", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForSubstringAfter_xSln13() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_AFTER, null);
//        assertEquals("substring-after", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForSubstring_PXht14() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING, null);
//        assertEquals("substring", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForStringLength_jGcx15() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, null);
//        assertEquals("string-length", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForNormalizeSpace_ZeLd16() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
//        assertEquals("normalize-space", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForTranslate_JrUg17() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
//        assertEquals("translate", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForBoolean_oeWV18() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
//        assertEquals("boolean", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForNot_IFpZ19() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
//        assertEquals("not", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForTrue_HXaW20() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
//        assertEquals("true", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForFalse_vFyZ21() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
//        assertEquals("false", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForLang_JjNC22() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
//        assertEquals("lang", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForNumber_Odmw23() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
//        assertEquals("number", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForSum_RZTT24() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
//        assertEquals("sum", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForFloor_VJGR25() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
//        assertEquals("floor", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForCeiling_UYyv26() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
//        assertEquals("ceiling", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForRound_uHlO27() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
//        assertEquals("round", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForKey_yhUv28() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, null);
//        assertEquals("key", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForFormatNumber_hpFe29() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
//        assertEquals("format-number", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testGetFunctionNameForUnknownFunction_cmAt30() {
//        CoreFunction coreFunction = new CoreFunction(999, null); // Assuming 999 is not a defined function code
//        assertEquals("unknownFunction999()", coreFunction.getFunctionName());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLocalName_NoArguments_MDAO0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        QName qName = mock(QName.class);
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(nodePointer.getName()).thenReturn(qName);
//        when(qName.getName()).thenReturn("testNode");
//        Object result = coreFunction.functionLocalName(context);
//        assertEquals("testNode", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLocalName_WithArguments_EvalContextWithNext_efFZ2() {
//        Expression[] expressions = new Expression[1];
//        Expression expression = mock(Expression.class);
//        expressions[0] = expression;
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext argContext = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        QName qName = mock(QName.class);
//        when(expression.compute(context)).thenReturn(argContext);
//        when(argContext.hasNext()).thenReturn(true);
//        when(argContext.next()).thenReturn(nodePointer);
//        when(nodePointer.getName()).thenReturn(qName);
//        when(qName.getName()).thenReturn("argNode");
//        Object result = coreFunction.functionLocalName(context);
//        assertEquals("argNode", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLocalName_WithArguments_EvalContextWithoutNext_qMfZ3() {
//        Expression[] expressions = new Expression[1];
//        Expression expression = mock(Expression.class);
//        expressions[0] = expression;
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        EvalContext argContext = mock(EvalContext.class);
//        when(expression.compute(context)).thenReturn(argContext);
//        when(argContext.hasNext()).thenReturn(false);
//        Object result = coreFunction.functionLocalName(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionLocalName_WithArguments_NonEvalContext_zTFV4() {
//        Expression[] expressions = new Expression[1];
//        Expression expression = mock(Expression.class);
//        expressions[0] = expression;
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        when(expression.compute(context)).thenReturn(new Object());
//        Object result = coreFunction.functionLocalName(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testCompute_uzBF0() {
//        EvalContext context = mock(EvalContext.class);
//        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
//        when(context.computeValue()).thenReturn("Expected Result");
//        Object result = coreFunction.compute(context);
//        assertEquals("Expected Result", result);
//        verify(context).computeValue();
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithNodePointer_dABo0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new NodeExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        NodePointer nodePointer = new NodePointer(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithEvalContextHavingNodes_vznV1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new EvalContextExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        EvalContext evalContext = new EvalContext(new NamespaceContext(null));
//        evalContext.addNode(new Object());
//        evalContext.addNode(new Object());
//        assertEquals(Double.valueOf(2), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithCollection_vTGo2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new CollectionExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        Collection<Object> collection = Arrays.asList(new Object(), new Object());
//        assertEquals(Double.valueOf(2), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithNull_dafS3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new NullExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleObject_Ztrr4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleObjectExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithEmptyEvalContext_iKTG5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new EmptyEvalContextExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithEmptyCollection_yfue6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new EmptyCollectionExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        Collection<Object> collection = new ArrayList<>();
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleNodePointer_RsmC7() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleNodePointerExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        NodePointer nodePointer = new NodePointer(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleNodeInEvalContext_IEIJ8() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleNodeEvalContextExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        EvalContext evalContext = new EvalContext(new NamespaceContext(null));
//        evalContext.addNode(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithMultipleNodesInEvalContext_wPNw9() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new MultipleNodesEvalContextExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        EvalContext evalContext = new EvalContext(new NamespaceContext(null));
//        evalContext.addNode(new Object());
//        evalContext.addNode(new Object());
//        evalContext.addNode(new Object());
//        assertEquals(Double.valueOf(3), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleNodeInCollection_jKaX10() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleNodeCollectionExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        Collection<Object> collection = Arrays.asList(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithMultipleNodesInCollection_hcFj11() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new MultipleNodesCollectionExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        Collection<Object> collection = Arrays.asList(new Object(), new Object(), new Object());
//        assertEquals(Double.valueOf(3), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithNullValue_bYaf12() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new NullValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleObjectValue_joAY13() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleObjectValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithEmptyEvalContextValue_UwyP14() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new EmptyEvalContextValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithEmptyCollectionValue_ZIeY15() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new EmptyCollectionValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        Collection<Object> collection = new ArrayList<>();
//        assertEquals(Double.valueOf(0), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleNodePointerValue_wkGE16() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleNodePointerValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        NodePointer nodePointer = new NodePointer(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithSingleNodeInEvalContextValue_fJJm17() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new SingleNodeInEvalContextValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        EvalContext evalContext = new EvalContext(new NamespaceContext(null));
//        evalContext.addNode(new Object());
//        assertEquals(Double.valueOf(1), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionCountWithMultipleNodesInEvalContextValue_oNJg18() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{new MultipleNodesInEvalContextValueExpression()});
//        EvalContext context = new EvalContext(new NamespaceContext(null));
//        EvalContext evalContext = new EvalContext(new NamespaceContext(null));
//        evalContext.addNode(new Object());
//        evalContext.addNode(new Object());
//        evalContext.addNode(new Object());
//        assertEquals(Double.valueOf(3), coreFunction.functionCount(context));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_NullValue_YMZB1() {
//        Expression[] expressions = new Expression[1];
//        expressions[0] = mock(Expression.class);
//        when(expressions[0].compute(any(EvalContext.class))).thenReturn(null);
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionSum(context);
//        assertEquals(CoreFunction.ZERO, result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_EmptyEvalContext_HlkG3() {
//        Expression[] expressions = new Expression[1];
//        expressions[0] = mock(Expression.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        when(expressions[0].compute(any(EvalContext.class))).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(false);
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionSum(context);
//        assertEquals(Double.valueOf(0.0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_SingleElementEvalContext_GheV4() {
//        Expression[] expressions = new Expression[1];
//        expressions[0] = mock(Expression.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(expressions[0].compute(any(EvalContext.class))).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(true).thenReturn(false);
//        when(evalContext.next()).thenReturn(nodePointer);
//        when(InfoSetUtil.doubleValue(nodePointer)).thenReturn(5.0);
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionSum(context);
//        assertEquals(Double.valueOf(5.0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSum_MultipleElementsEvalContext_uJee5() {
//        Expression[] expressions = new Expression[1];
//        expressions[0] = mock(Expression.class);
//        EvalContext evalContext = mock(EvalContext.class);
//        NodePointer nodePointer1 = mock(NodePointer.class);
//        NodePointer nodePointer2 = mock(NodePointer.class);
//        when(expressions[0].compute(any(EvalContext.class))).thenReturn(evalContext);
//        when(evalContext.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
//        when(evalContext.next()).thenReturn(nodePointer1).thenReturn(nodePointer2);
//        when(InfoSetUtil.doubleValue(nodePointer1)).thenReturn(5.0);
//        when(InfoSetUtil.doubleValue(nodePointer2)).thenReturn(10.0);
//        CoreFunction coreFunction = new CoreFunction(0, expressions);
//        EvalContext context = mock(EvalContext.class);
//        Object result = coreFunction.functionSum(context);
//        assertEquals(Double.valueOf(15.0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_FunctionLast_iuJX1() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
//        assertTrue(coreFunction.computeContextDependent());
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_ArgsNull_JUqb2() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
//        assertTrue(coreFunction.computeContextDependent());
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_ArgsEmpty_MdOe3() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, new Expression[0]);
//        assertTrue(coreFunction.computeContextDependent());
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_ArgsLengthTwo_fPnT4() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, new Expression[2]);
//        assertTrue(coreFunction.computeContextDependent());
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_FunctionNot_aFlb5() {
//        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, new Expression[1]);
//        assertFalse(coreFunction.computeContextDependent());
//}
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testComputeContextDependent_DefaultCase_Sfnk6() {
//        CoreFunction coreFunction = new CoreFunction(999, new Expression[1]); // Assuming 999 is not a defined function code
//        assertFalse(coreFunction.computeContextDependent());
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStringWithZeroArguments_Opds0() {
//        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        when(coreFunction.functionString(context)).thenCallRealMethod();
//        String expectedValue = "node value";
//        when(InfoSetUtil.stringValue(nodePointer)).thenReturn(expectedValue);
//        Object result = coreFunction.functionString(context);
//        verify(coreFunction).getArgumentCount();
//        verify(context).getCurrentNodePointer();
//        assert expectedValue.equals(result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStringWithOneArgument_JSEK1() {
//        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
//        EvalContext context = mock(EvalContext.class);
//        Expression arg1 = mock(Expression.class);
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        when(coreFunction.getArg1()).thenReturn(arg1);
//        Object computedValue = "computed value";
//        when(arg1.computeValue(context)).thenReturn(computedValue);
//        when(coreFunction.functionString(context)).thenCallRealMethod();
//        String expectedValue = "computed value as string";
//        when(InfoSetUtil.stringValue(computedValue)).thenReturn(expectedValue);
//        Object result = coreFunction.functionString(context);
//        verify(coreFunction).getArgumentCount();
//        verify(coreFunction).assertArgCount(1);
//        verify(coreFunction).getArg1();
//        verify(arg1).computeValue(context);
//        assert expectedValue.equals(result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionStringWithNullNodePointer_bknE3() {
//        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
//        EvalContext context = mock(EvalContext.class);
//        when(context.getCurrentNodePointer()).thenReturn(null);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        when(coreFunction.functionString(context)).thenCallRealMethod();
//        String expectedValue = "";
//        when(InfoSetUtil.stringValue((NodePointer) null)).thenReturn(expectedValue);
//        Object result = coreFunction.functionString(context);
//        verify(coreFunction).getArgumentCount();
//        verify(context).getCurrentNodePointer();
//        assert expectedValue.equals(result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_FirstArg_mXPw1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(expr1.computeValue(context)).thenReturn("hello");
//        coreFunction.functionSubstringAfter(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_SecondArg_esAQ2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr2.computeValue(context)).thenReturn("world");
//        coreFunction.functionSubstringAfter(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_IndexNotFound_LXZy3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello");
//        when(expr2.computeValue(context)).thenReturn("world");
//        String result = (String) coreFunction.functionSubstringAfter(context);
//        assert(result.equals(""));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_SubstringFound_AWrX4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn("hello");
//        String result = (String) coreFunction.functionSubstringAfter(context);
//        assert(result.equals(" world"));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_EmptyString_LXxi5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("");
//        when(expr2.computeValue(context)).thenReturn("world");
//        String result = (String) coreFunction.functionSubstringAfter(context);
//        assert(result.equals(""));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionSubstringAfter_EmptySecondString_entR6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        Expression expr1 = mock(Expression.class);
//        Expression expr2 = mock(Expression.class);
//        when(coreFunction.getArg1()).thenReturn(expr1);
//        when(coreFunction.getArg2()).thenReturn(expr2);
//        when(expr1.computeValue(context)).thenReturn("hello world");
//        when(expr2.computeValue(context)).thenReturn("");
//        String result = (String) coreFunction.functionSubstringAfter(context);
//        assert(result.equals("hello world"));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionRoundWithNaN_LuIu1() {
//        Expression[] args = new Expression[1];
//        Expression expr = Mockito.mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = Mockito.mock(EvalContext.class);
//        Mockito.when(expr.computeValue(context)).thenReturn(Double.NaN);
//        Object result = coreFunction.functionRound(context);
//        assertTrue("Result should be NaN", result instanceof Double && Double.isNaN((Double) result));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionRoundWithInfinite_ZSbo2() {
//        Expression[] args = new Expression[1];
//        Expression expr = Mockito.mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = Mockito.mock(EvalContext.class);
//        Mockito.when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
//        Object result = coreFunction.functionRound(context);
//        assertTrue("Result should be positive infinity", result.equals(Double.POSITIVE_INFINITY));
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionRoundWithFiniteValue_bRtf3() {
//        Expression[] args = new Expression[1];
//        Expression expr = Mockito.mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = Mockito.mock(EvalContext.class);
//        Mockito.when(expr.computeValue(context)).thenReturn(3.7);
//        Object result = coreFunction.functionRound(context);
//        assertEquals("Result should be rounded value", Double.valueOf(4.0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionRoundWithZero_dzgH4() {
//        Expression[] args = new Expression[1];
//        Expression expr = Mockito.mock(Expression.class);
//        args[0] = expr;
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = Mockito.mock(EvalContext.class);
//        Mockito.when(expr.computeValue(context)).thenReturn(0.0);
//        Object result = coreFunction.functionRound(context);
//        assertEquals("Result should be zero", Double.valueOf(0.0), result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_EmptyString_cPiE0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_SingleWord_vNOQ3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("word");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("word", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_LeadingSpaces_XXNH4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("   leading");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("leading", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_TrailingSpaces_Ueyo5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("trailing   ");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("trailing", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_LeadingAndTrailingSpaces_pYuT6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("   both   ");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("both", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_MultipleWords_sFya7() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("multiple words");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("multiple words", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_MultipleWordsWithTabsAndNewlines_MmvQ9() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("multiple\t\nwords");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("multiple words", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_ComplexWhitespace_gJIf10() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("\t  complex \n  whitespace \r ");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("complex whitespace", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_SingleCharacter_iNuc11() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn("a");
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("a", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNormalizeSpace_NullInput_gdLc14() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{});
//        EvalContext context = mock(EvalContext.class);
//        when(context.computeValue()).thenReturn(null);
//        String result = (String) coreFunction.functionNormalizeSpace(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_AllCharactersReplaced_wtEK0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("xyz", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_NoCharactersReplaced_vBjR1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("def"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("abc", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_PartialCharactersReplaced_Kmxh2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abcdef"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("xyzdef", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_EmptyInputString_pRmJ3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression(""),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_EmptyTargetString_jWPB4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression(""),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("abc", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_EmptyReplacementString_SrFt5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_ReplacementShorterThanTarget_IBvo6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xy")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("xy", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_TargetLongerThanInput_jwxx7() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("a"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("x", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_ComplexReplacement_PNUx8() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("hello world"),
//            new LiteralExpression("hld"),
//            new LiteralExpression("123")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("1ello wor3", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_NoReplacementDueToNoMatch_Funa9() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("hello world"),
//            new LiteralExpression("xyz"),
//            new LiteralExpression("123")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("hello world", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_SameTargetAndReplacement_Sace10() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("abc", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_EmptyStrings_RoHc11() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression(""),
//            new LiteralExpression(""),
//            new LiteralExpression("")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_NullInput_WnKa12() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression(null),
//            new LiteralExpression("abc"),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_NullTarget_zNva13() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression(null),
//            new LiteralExpression("xyz")
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("abc", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionTranslate_NullReplacement_kgmA14() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{
//            new LiteralExpression("abc"),
//            new LiteralExpression("abc"),
//            new LiteralExpression(null)
//        });
//        EvalContext context = new MockEvalContext();
//        Object result = coreFunction.functionTranslate(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNumberWithNoArguments_vmet0() {
//        Expression[] args = {};
//        CoreFunction coreFunction = new CoreFunction(0, args);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
//        when(coreFunction.getArgumentCount()).thenReturn(0);
//        Object result = coreFunction.functionNumber(context);
//        verify(context).getCurrentNodePointer();
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionNumberWithOneArgument_LcdA1() {
//        Expression expr = mock(Expression.class);
//        Expression[] args = {expr};
//        CoreFunction coreFunction = new CoreFunction(1, args);
//        EvalContext context = mock(EvalContext.class);
//        Object computedValue = new Object();
//        when(expr.computeValue(context)).thenReturn(computedValue);
//        when(coreFunction.getArgumentCount()).thenReturn(1);
//        Object result = coreFunction.functionNumber(context);
//        verify(expr).computeValue(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithTwoArgsAndValidFrom_XpRC0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(6.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("World", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithTwoArgsAndFromLessThanOne_vVDn1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(0.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("Hello World", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithTwoArgsAndFromGreaterThanLength_kbmA2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(10.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithThreeArgsValidRange_mWSE3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(3);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(1.0);
//        when(coreFunction.getArg3().computeValue(context)).thenReturn(5.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("Hello", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithThreeArgsAndNegativeLength_Jcic4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(3);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(1.0);
//        when(coreFunction.getArg3().computeValue(context)).thenReturn(-1.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithThreeArgsAndToLessThanOne_odvE5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(3);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(-5.0);
//        when(coreFunction.getArg3().computeValue(context)).thenReturn(3.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithThreeArgsAndToGreaterThanLength_QFIy6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(3);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(1.0);
//        when(coreFunction.getArg3().computeValue(context)).thenReturn(10.0);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("Hello", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testSubstringWithNaNFrom_MssH7() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArgumentCount()).thenReturn(2);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("Hello World");
//        when(coreFunction.getArg2().computeValue(context)).thenReturn(Double.NaN);
//        String result = coreFunction.functionSubstring(context);
//        assertEquals("", result);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_AssertArgCount_zjxD0() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
//        EvalContext context = mock(EvalContext.class);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_StringValue_pbIN1() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg1().computeValue(context)).thenReturn("testKey");
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_ComputeValue_QIvr2() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn("testValue");
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_EvalContextAsValue_qzYc3() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_HasNextTrue_EWZY4() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_NextValue_vzMU5() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true);
//        when(value.next()).thenReturn(nodePointer);
//        when(nodePointer.getValue()).thenReturn("nodeValue");
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_ReturnNewNodeSetContext_QMcC6() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(false);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_GetJXPathContext_CFeb7() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        JXPathContext jXPathContext = mock(JXPathContext.class);
//        when(context.getJXPathContext()).thenReturn(jXPathContext);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_GetNodeSetByKey_CljM8() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext context = mock(EvalContext.class);
//        JXPathContext jXPathContext = mock(JXPathContext.class);
//        when(context.getJXPathContext()).thenReturn(jXPathContext);
//        when(jXPathContext.getNodeSetByKey(anyString(), any())).thenReturn(mock(NodeSet.class));
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_EcNotNullHasNext_nOHZ9() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true).thenReturn(false);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_AccumulateNodeSets_PPYu10() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        JXPathContext jXPathContext = mock(JXPathContext.class);
//        NodeSet nodeSet = mock(NodeSet.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true).thenReturn(false);
//        when(context.getJXPathContext()).thenReturn(jXPathContext);
//        when(jXPathContext.getNodeSetByKey(anyString(), any())).thenReturn(nodeSet);
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_WhileHasNext_cEsr11() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true).thenReturn(false);
//        when(value.next()).thenReturn(nodePointer);
//        when(nodePointer.getValue()).thenReturn("nodeValue");
//        coreFunction.functionKey(context);
//    }
//@Test
//@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
//    public void testFunctionKey_AddToAccumulatedNodeSets_gKrm12() {
//        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
//        EvalContext value = mock(EvalContext.class);
//        EvalContext context = mock(EvalContext.class);
//        JXPathContext jXPathContext = mock(JXPathContext.class);
//        NodeSet nodeSet = mock(NodeSet.class);
//        NodePointer nodePointer = mock(NodePointer.class);
//        when(coreFunction.getArg2().compute(context)).thenReturn(value);
//        when(value.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
//        when(value.next()).thenReturn(nodePointer);
//        when(nodePointer.getValue()).thenReturn("nodeValue");
//        when(context.getJXPathContext()).thenReturn(jXPathContext);
//        when(jXPathContext.getNodeSetByKey(anyString(), any())).thenReturn(nodeSet);
//        coreFunction.functionKey(context);
//    }
//}