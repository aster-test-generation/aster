/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
@Mock
    private DOMNodePointer domNodePointer;
@InjectMocks
    private NamespacePointer namespacePointer;
private NamespacePointer namespacePointer1;
private NamespacePointer namespacePointer2;
private NamespacePointer namespacePointer3;
@Mock
    private DOMNodePointer domNodePointerMock;
private String prefix = "testPrefix";
@Mock
private static final String PREFIX = "testPrefix";
private static final String NAMESPACE_URI = "http://example.com/test";
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer mockDomNodePointer;
    private String namespaceURI;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        // Initialize NamespacePointer with a mocked DOMNodePointer
        namespacePointer = new NamespacePointer(domNodePointer, "prefix", "namespaceURI");
        // Arrange
        NodePointer mockPointer1 = Mockito.mock(NodePointer.class);
        NodePointer mockPointer2 = Mockito.mock(NodePointer.class);
        // Act
        int result = namespacePointer.compareChildNodePointers(mockPointer1, mockPointer2);
        // Assert
        assertEquals(0, result, "compareChildNodePointers should always return 0 as per current implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertTrue(namespacePointer1.equals(namespacePointer1), "Reflexive test failed.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertTrue(namespacePointer1.equals(namespacePointer2) && namespacePointer2.equals(namespacePointer1),
                   "Symmetric test failed.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Transitive() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertTrue(namespacePointer1.equals(namespacePointer2) && namespacePointer2.equals(namespacePointer3) && namespacePointer1.equals(namespacePointer3),
                   "Transitive test failed.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertFalse(namespacePointer1.equals(null), "Comparison with null should return false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertFalse(namespacePointer1.equals(new Object()), "Comparison with different class should return false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentPrefix() {
        // Initialize NamespacePointers with different prefixes
        namespacePointer1 = new NamespacePointer(null, "prefix1");
        namespacePointer2 = new NamespacePointer(null, "prefix1");
        namespacePointer3 = new NamespacePointer(null, "prefix2");
        assertFalse(namespacePointer1.equals(namespacePointer3), "Objects with different prefixes should not be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ThrowsUnsupportedOperationException() {
        // Initialize NamespacePointer with a mock DOMNodePointer and a prefix
        namespacePointer = new NamespacePointer(domNodePointer, "prefix");
        // Assert that calling setValue on NamespacePointer throws UnsupportedOperationException
        assertThrows(UnsupportedOperationException.class, () -> namespacePointer.setValue("newValue"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNodeTest_ReturnsTrue() throws Exception {
        namespacePointer = new NamespacePointer(domNodePointerMock, "prefix", "namespaceURI");
        assertTrue(namespacePointer.testNode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ValidNodeTypeTest_ReturnsTrue() throws Exception {
        namespacePointer = new NamespacePointer(domNodePointerMock, "prefix", "namespaceURI");
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(namespacePointer.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_InvalidNodeTypeTest_ReturnsFalse() throws Exception {
        namespacePointer = new NamespacePointer(domNodePointerMock, "prefix", "namespaceURI");
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
        assertFalse(namespacePointer.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NonNodeTypeTest_ReturnsFalse() throws Exception {
        namespacePointer = new NamespacePointer(domNodePointerMock, "prefix", "namespaceURI");
        NodeTest nodeTest = mock(NodeTest.class);
        assertFalse(namespacePointer.testNode(nodeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // DOMNodePointer and NamespacePointer are already set up by Mockito annotations
        // Since isCollection method returns a constant false, we test that behavior
        assertFalse(namespacePointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        // Initialize NamespacePointer with a mock DOMNodePointer and some dummy data
        namespacePointer = new NamespacePointer(domNodePointer, "prefix", "http://example.com/namespaceURI");
        // Setup the expected behavior of the getNamespaceURI method
        when(domNodePointer.getNamespaceURI()).thenReturn("http://example.com/namespaceURI");
        // Call the method under test
        Object result = namespacePointer.getImmediateNode();
        // Verify the results and interactions
        assertEquals("http://example.com/namespaceURI", result, "The returned URI should match the expected URI.");
        verify(domNodePointer).getNamespaceURI(); // Verify that getNamespaceURI was called on the DOMNodePointer
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_InitiallyNull_ReturnsCorrectURI() {
        // Initialize NamespacePointer with a mock DOMNodePointer and a prefix
        namespacePointer = new NamespacePointer(parent, PREFIX, NAMESPACE_URI);
        // Setup the behavior of the parent mock to return a specific namespace URI
        when(parent.getNamespaceURI(PREFIX)).thenReturn(NAMESPACE_URI);
        // Call the method under test
        String result = namespacePointer.getNamespaceURI();
        // Verify the result
        assertEquals(NAMESPACE_URI, result, "The namespace URI should match the expected value.");
        // Verify interaction with the mock
        verify(parent).getNamespaceURI(PREFIX);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_AlreadySet_ReturnsSameURI() {
        // Initialize NamespacePointer with a mock DOMNodePointer and a prefix
        namespacePointer = new NamespacePointer(parent, PREFIX, NAMESPACE_URI);
        // Set up the initial call to establish the namespace URI
        when(parent.getNamespaceURI(PREFIX)).thenReturn(NAMESPACE_URI);
        namespacePointer.getNamespaceURI(); // First call to set the URI
        // Call the method under test again
        String result = namespacePointer.getNamespaceURI();
        // Verify the result
        assertEquals(NAMESPACE_URI, result, "Subsequent calls should return the same namespace URI without querying the parent again.");
        // Verify that the parent was only queried once
        verify(parent, times(1)).getNamespaceURI(PREFIX);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithParent() throws Exception {
        namespacePointer = new NamespacePointer(parent, prefix);
        when(parent.asPath()).thenReturn("/parent/path");
        String expected = "/parent/path/namespace::testPrefix";
        String actual = namespacePointer.asPath();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithoutTrailingSlashInParentPath() throws Exception {
        when(parent.asPath()).thenReturn("/parent/path");
        namespacePointer = new NamespacePointer(parent, prefix);
        when(parent.asPath()).thenReturn("/parent/path");
        String expected = "/parent/path/namespace::testPrefix";
        String actual = namespacePointer.asPath();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithTrailingSlashInParentPath() throws Exception {
        when(parent.asPath()).thenReturn("/parent/path/");
        namespacePointer = new NamespacePointer(parent, prefix);
        when(parent.asPath()).thenReturn("/parent/path");
        String expected = "/parent/path/namespace::testPrefix";
        String actual = namespacePointer.asPath();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNoParent_JepP0() {
        NamespacePointer np = new NamespacePointer(null, "testPrefix");
        assertEquals("namespace::testPrefix", np.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        // Initialize NamespacePointer with a mocked DOMNodePointer and some dummy prefix
        namespacePointer = new NamespacePointer(domNodePointerMock, "dummyPrefix");
        // Since getLength is a simple method returning a constant, we just test that constant
        assertEquals(1, namespacePointer.getLength(), "The length should always be 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Assuming the prefix and namespaceURI are not relevant for the getBaseValue method
        namespacePointer = new NamespacePointer(mockDomNodePointer, "somePrefix", "someNamespaceURI");
        // Since getBaseValue is implemented to return null, we verify this behavior
        assertNull(namespacePointer.getBaseValue(), "The base value should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        // Initialize namespacePointer with a mock DOMNodePointer and arbitrary string values
        namespacePointer = new NamespacePointer(domNodePointerMock, "somePrefix", "someNamespaceURI");
        // Act
        boolean result = namespacePointer.isLeaf();
        // Assert
        assertTrue(result, "isLeaf should return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_dsaW0_DGaR0() {
    Locale locale = Locale.getDefault();
    DOMNodePointer parent = new DOMNodePointer(null, locale, null);
    String prefix = "testPrefix";
    NamespacePointer namespacePointer = new NamespacePointer(parent, prefix);
    QName result = namespacePointer.getName();
    assertEquals("testPrefix", result.getPrefix());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_rZkV0() {
    DOMNodePointer mockParent = mock(DOMNodePointer.class);
    String prefix = "testPrefix";
    String namespaceURI = ""; // Assuming empty namespace URI as it is not provided in the test case
    NamespacePointer namespacePointer = new NamespacePointer(mockParent, prefix, namespaceURI);
    int expectedHashCode = prefix.hashCode();
    assertEquals(expectedHashCode, namespacePointer.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_nXCH0() throws Exception {
    String prefix = "testPrefix";
    String namespaceURI = "http://example.com";
    DOMNodePointer mockParent = Mockito.mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(mockParent, prefix, namespaceURI);
    QName result = namespacePointer.getName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_cdhx0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(mockDomNodePointer, "somePrefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_InitiallyNull_ReturnsCorrectURI_JVfE0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    final String PREFIX = "prefix";
    final String NAMESPACE_URI = "http://example.com/namespace";
    NamespacePointer namespacePointer = new NamespacePointer(parent, PREFIX, NAMESPACE_URI);
    when(parent.getNamespaceURI()).thenReturn(NAMESPACE_URI);
    String result = namespacePointer.getNamespaceURI();
    verify(parent).getNamespaceURI();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_AlreadySet_ReturnsSameURI_Pnrl0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    final String PREFIX = "prefix";
    final String NAMESPACE_URI = "http://example.com/namespace";
    NamespacePointer namespacePointer = new NamespacePointer(parent, PREFIX, NAMESPACE_URI);
    when(parent.getNamespaceURI(PREFIX)).thenReturn(NAMESPACE_URI);
    namespacePointer.getNamespaceURI(); // First call to set the URI
    String result = namespacePointer.getNamespaceURI();
    assertEquals(NAMESPACE_URI, result, "Subsequent calls should return the same namespace URI without querying the parent again.");
    verify(parent, times(1)).getNamespaceURI(PREFIX);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithParent_OiIz0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    String prefix = "testPrefix";
    NamespacePointer namespacePointer = new NamespacePointer(parent, prefix);
    when(parent.asPath()).thenReturn("/parent/path");
    String expected = "/parent/path/namespace::testPrefix";
    String actual = namespacePointer.asPath();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithoutTrailingSlashInParentPath_MBOr0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path");
    NamespacePointer namespacePointer = new NamespacePointer(parent, "testPrefix", null);
    String expected = "/parent/path/namespace::testPrefix";
    String actual = namespacePointer.asPath();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithTrailingSlashInParentPath_SeQb0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    when(parent.asPath()).thenReturn("/parent/path/");
    NamespacePointer namespacePointer = new NamespacePointer(parent, "testPrefix", null);
    String expected = "/parent/path/namespace::testPrefix";
    String actual = namespacePointer.asPath();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NullNodeTest_ReturnsTrue_IFDP0() throws Exception {
    DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(domNodePointerMock, "prefix");
    assertTrue(namespacePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_InvalidNodeTypeTest_ReturnsFalse_jKZQ0() throws Exception {
    DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(domNodePointerMock, "prefix");
    NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
    when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
    assertFalse(namespacePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NonNodeTypeTest_ReturnsFalse_UutH0() throws Exception {
    DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(domNodePointerMock, "prefix");
    assertFalse(namespacePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_kdxQ0() {
    NamespacePointer namespacePointer = new NamespacePointer(domNodePointerMock, "dummyPrefix", "dummyNamespaceURI");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_IBOg0() throws Exception {
    DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
    NamespacePointer namespacePointer = new NamespacePointer(domNodePointerMock, "somePrefix");
    boolean result = namespacePointer.isLeaf();
    assertTrue(result, "isLeaf should return true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Reflexive_QUTa0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer2 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer3 = new NamespacePointer(null, "prefix2");
    assertTrue(namespacePointer1.equals(namespacePointer1), "Reflexive test failed.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Symmetric_mjpk0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer2 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer3 = new NamespacePointer(null, "prefix2");
    assertTrue(namespacePointer1.equals(namespacePointer2) && namespacePointer2.equals(namespacePointer1),
               "Symmetric test failed.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Transitive_yTeU0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer2 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer3 = new NamespacePointer(null, "prefix1");
    assertTrue(namespacePointer1.equals(namespacePointer2) && namespacePointer2.equals(namespacePointer3) && namespacePointer1.equals(namespacePointer3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Null_cuIj0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer2 = new NamespacePointer(null, "prefix1");
    NamespacePointer namespacePointer3 = new NamespacePointer(null, "prefix2");
    assertFalse(namespacePointer1.equals(null), "Comparison with null should return false.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_GUHH0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentPrefix_WFQv0() {
    NamespacePointer namespacePointer1 = new NamespacePointer(null, "prefix1", null);
    NamespacePointer namespacePointer2 = new NamespacePointer(null, "prefix1", null);
    NamespacePointer namespacePointer3 = new NamespacePointer(null, "prefix2", null);
    assertFalse(namespacePointer1.equals(namespacePointer3));
}
}