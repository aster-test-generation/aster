/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
@InjectMocks
    private CollectionPointer collectionPointer;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
private static final int WHOLE_COLLECTION = -1;
@Mock
    private DOMNodePointer parent;
@Mock
    private Object collection;
private DOMNodePointer mockParent;
private Locale locale;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private JXPathContext mockContext;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private CollectionPointer mockCollectionPointer;
@Mock
    private QName mockQName;
public int index = WHOLE_COLLECTION;
@Mock
    private NodeTest mockNodeTest;
@Mock
private CollectionPointer differentCollectionPointer;
private CollectionPointer nullCollectionPointer;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private JXPathContext context;
@Mock
    private NodePointer valuePointer;
@Mock
    private QName name;
@Mock
    private DOMNodePointer mockParentPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParentAndWholeCollection_jWWo0() {
    CollectionPointer cp = new CollectionPointer(new ArrayList<>(), Locale.getDefault());
    String result = cp.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        collection = mock(Object.class); // Mocking the collection object
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class); // Mocking DOMNodePointer as it's required by CollectionPointer constructor
        collectionPointer = new CollectionPointer(domNodePointer, collection);
        // Act
        Object result = collectionPointer.getBaseValue();
        // Assert
        assertSame(collection, result, "The getBaseValue method should return the collection object that was set in the constructor.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_HOHJ0() {
    Locale locale = new Locale("en", "US");
    List<Object> testCollection = Arrays.asList(1, 2, 3);
    CollectionPointer cp = new CollectionPointer(testCollection, locale);
    Object result = cp.getBaseValue();
    assertEquals(testCollection, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_BothPointersEqual() throws Exception {
        collectionPointer = new CollectionPointer(new Object(), null);
        when(pointer1.getIndex()).thenReturn(5);
        when(pointer2.getIndex()).thenReturn(5);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result, "Expected pointers to be equal");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_Pointer1GreaterThanPointer2() throws Exception {
        collectionPointer = new CollectionPointer(new Object(), null);
        when(pointer1.getIndex()).thenReturn(10);
        when(pointer2.getIndex()).thenReturn(5);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(5, result, "Expected pointer1 to be greater than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_Pointer1LessThanPointer2() throws Exception {
        collectionPointer = new CollectionPointer(new Object(), null);
        when(pointer1.getIndex()).thenReturn(3);
        when(pointer2.getIndex()).thenReturn(8);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-5, result, "Expected pointer1 to be less than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WholeCollection() throws Exception {
        collectionPointer = new CollectionPointer(parent, collection);
        // Arrange
        Object newValue = new Object();
        doNothing().when(parent).setValue(newValue);
        // Act
        collectionPointer.setValue(newValue);
        // Assert
        verify(parent).setValue(newValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithNullTest_ShouldReturnTrue() {
        locale = Locale.getDefault();
        collection = new Object(); // Assuming collection is just an Object for simplicity.
        mockParent = mock(DOMNodePointer.class);
        collectionPointer = new CollectionPointer(mockParent, collection);
        assertTrue(collectionPointer.testNode(null), "Should return true when test is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithNodeNameTest_ShouldReturnFalse() {
        locale = Locale.getDefault();
        collection = new Object(); // Assuming collection is just an Object for simplicity.
        mockParent = mock(DOMNodePointer.class);
        collectionPointer = new CollectionPointer(mockParent, collection);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        assertFalse(collectionPointer.testNode(nodeNameTest), "Should return false for NodeNameTest instances");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithNodeTypeTestMatchingNodeTypeNode_ShouldReturnTrue() {
        locale = Locale.getDefault();
        collection = new Object(); // Assuming collection is just an Object for simplicity.
        mockParent = mock(DOMNodePointer.class);
        collectionPointer = new CollectionPointer(mockParent, collection);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(collectionPointer.testNode(nodeTypeTest), "Should return true for NodeTypeTest with NODE_TYPE_NODE");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithNodeTypeTestNotMatchingNodeTypeNode_ShouldReturnFalse() {
        locale = Locale.getDefault();
        collection = new Object(); // Assuming collection is just an Object for simplicity.
        mockParent = mock(DOMNodePointer.class);
        collectionPointer = new CollectionPointer(mockParent, collection);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(999); // Assuming 999 is not NODE_TYPE_NODE
        assertFalse(collectionPointer.testNode(nodeTypeTest), "Should return false for NodeTypeTest not matching NODE_TYPE_NODE");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNodeTest_ReturnsTrue_ACSn0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        assertTrue(cp.testNode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_ReturnsFalse_nGQm1() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTest nodeNameTest = new NodeNameTest(new QName("test"));
        assertFalse(cp.testNode(nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTestWithNodeTypeNode_ReturnsTrue_phOv2() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(cp.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTestWithDifferentNodeType_ReturnsFalse_APTO3() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertFalse(cp.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ManC0_1() {
        Locale locale = new Locale("en", "US");
        List<Object> collection = new ArrayList<>();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("testName");
        int index = 0;
        NodePointer result = collectionPointer.createChild(context, name, index);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_ManC0_2() {
        Locale locale = new Locale("en", "US");
        List<Object> collection = new ArrayList<>();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("testName");
        int index = 0;
        NodePointer result = collectionPointer.createChild(context, name, index);
        assertEquals(index, result.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Assuming that the constructor does not have any side effects that need to be tested,
        // we can directly instantiate CollectionPointer with any object since it does not matter for the test.
        collectionPointer = new CollectionPointer(new Object(), null);
        // Since isCollection method of CollectionPointer class always returns true,
        // the test should always expect true.
        assertTrue(collectionPointer.isCollection(), "isCollection should always return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsTrue_Xajd0() {
    Object collection = new ArrayList();
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    assertTrue(collectionPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWithWholeCollection_BXoU0() {
        QName name = new QName("testName");
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeIterator result = cp.attributeIterator(name);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Assuming the constructor used doesn't matter since getName() returns null
        // and no other behavior is defined in the provided code.
        collectionPointer = new CollectionPointer(new Object(), null);
        QName result = collectionPointer.getName();
        assertNull(result, "The getName method should return null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_egoq0() {
    Locale locale = new Locale("en", "US");
    List<Object> collection = Arrays.asList(1, 2, 3);
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    int length = collectionPointer.getLength();
    assertEquals(3, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_Crfw1() {
        String atomicValue = "Test String";
        CollectionPointer cp = new CollectionPointer(atomicValue, Locale.getDefault());
        assertTrue(cp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_gIud2() {
        List<String> nonAtomicValue = new ArrayList<>();
        nonAtomicValue.add("Test");
        CollectionPointer cp = new CollectionPointer(nonAtomicValue, Locale.getDefault());
        assertFalse(cp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorReturnsNullForWholeCollection_uNCn0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeIterator result = cp.namespaceIterator();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_yZEN0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        assertTrue(cp.equals(cp));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_TLJv1() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        Object other = new Object();
        assertFalse(cp.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_lurs2() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        assertFalse(cp.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCollectionsSameLocale_Kdjp3() {
        Object collection1 = new Object();
        Object collection2 = new Object();
        CollectionPointer cp1 = new CollectionPointer(collection1, Locale.getDefault());
        CollectionPointer cp2 = new CollectionPointer(collection2, Locale.getDefault());
        assertFalse(cp1.equals(cp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_WhenIndexIsWholeCollection() {
        // Initialize CollectionPointer with a mocked parent and a collection object
        collectionPointer = new CollectionPointer(mockParentNodePointer, new Object());
        // Configure the test scenario where index is WHOLE_COLLECTION
        when(mockParentNodePointer.getIndex()).thenReturn(CollectionPointer.WHOLE_COLLECTION);
        // Call the method under test
        NodePointer result = collectionPointer.getValuePointer();
        // Verify the result is as expected
        assertSame(collectionPointer, result, "Expected the value pointer to be the collection pointer itself when index is WHOLE_COLLECTION");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_WholeCollection_Qfah0() {
        CollectionPointer cp = new CollectionPointer(new ArrayList<>(), Locale.getDefault());
        NodePointer result = cp.getValuePointer();
        assertEquals(cp, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenIndexIsWithinBounds_Kive0() {
        Object collection = new ArrayList<>(Arrays.asList("item1", "item2"));
        Locale locale = Locale.getDefault();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        JXPathContext context = JXPathContext.newContext(new Object());
        NodePointer result = collectionPointer.createPath(context);
        assertEquals(collectionPointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenIndexExceedsBounds_jWnn1_2() {
        Object collection = new ArrayList<>(Arrays.asList("item1"));
        Locale locale = Locale.getDefault();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        JXPathContext context = JXPathContext.newContext(new Object());
        NodePointer result = collectionPointer.createPath(context);
        assertEquals(collectionPointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerFalse() throws Exception {
        // Assuming that the index and WHOLE_COLLECTION are accessible or mockable
        // Since they are not defined in the provided code, I will assume WHOLE_COLLECTION is a static final int
        // and index is a field in CollectionPointer. We will need to use reflection or change the visibility
        // of index for a real test if it's private.
        final int WHOLE_COLLECTION = -1; // Example value, adjust based on actual implementation
        Object collection = new Object(); // Mock or create the object as needed
        Locale locale = Locale.getDefault(); // Example locale
        // Create an instance of CollectionPointer with a non-WHOLE_COLLECTION index
        collectionPointer = new CollectionPointer(collection, locale);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenIndexExceedsBounds_jWnn1_1_fid2() {
        Object collection = new ArrayList<>(Arrays.asList("item1"));
        Locale locale = Locale.getDefault();
        CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        JXPathContext context = JXPathContext.newContext(new Object());
        NodePointer result = collectionPointer.createPath(context);
        assertFalse(((Collection) collectionPointer.getBaseValue()).size() > 1);}
}