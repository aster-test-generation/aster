/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParentContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_RoEV0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTest);
        int currentPosition = parentContext.getCurrentPosition();
        assertEquals(1, currentPosition);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetCompletesWithoutException_GLzg4() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        ParentContext parentContext = new ParentContext(mockNamespaceContext, mockNodeTypeTest);
        parentContext.reset();
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_CurrentNodePointerNotNull_ILTo2() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.isContainer()).thenReturn(false);
        boolean result = parentContext.nextNode();
        assertNotNull(parentContext.getCurrentNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ImmediateParentPointerNotNull_oxuC3() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.isContainer()).thenReturn(false);
        boolean result = parentContext.nextNode();
        assertNotNull(parentContext.getCurrentNodePointer().getImmediateParentPointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhileLoopContainer_WIMV4() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.isContainer()).thenReturn(true).thenReturn(false);
        boolean result = parentContext.nextNode();
        verify(mockNodePointer, times(2)).getImmediateParentPointer();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_TestNodeTrue_Wyrl5() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(mockNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = parentContext.nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_TestNodeFalse_PBkE6() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(mockNodePointer.testNode(nodeTest)).thenReturn(false);
        boolean result = parentContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnFalse_sqyD7() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(null);
        boolean result = parentContext.nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_PositionIncrement_UYZZ8() {
        ParentContext parentContext = mock(ParentContext.class);
        NodePointer mockNodePointer = mock(NodePointer.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockNodePointer);
        when(mockNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(mockNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = parentContext.nextNode();
        assertEquals(1, parentContext.getPosition()); // Assuming there is a method to get position
    }
}