/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtensionFunction_Coverage_Test_Failing {
    private QName functionName;
    private Expression[] args;
    private NodeSet nodeSet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_WithNullArgs_ReturnsResult_NRbP4_gxBE0() {
    QName functionName = new QName("functionName");
    Expression[] args = new Expression[0]; // Changed from null to an empty array
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
    EvalContext context = mock(EvalContext.class);
    RootContext rootContext = mock(RootContext.class);
    Function function = mock(Function.class);
    when(context.getRootContext()).thenReturn(rootContext);
    when(rootContext.getFunction(eq(functionName), any(Expression[].class))).thenReturn(function);
    when(function.invoke(eq(context), any(Expression[].class))).thenReturn("result");
    Object result = extensionFunction.compute(context);
    assertEquals("result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_WithMultipleArgs_ReturnsResult_qSUx6_omYm0() {
    QName functionName = mock(QName.class);
    EvalContext context = mock(EvalContext.class);
    RootContext rootContext = mock(RootContext.class);
    Function function = mock(Function.class);
    Expression[] multipleArgs = {mock(Expression.class), mock(Expression.class)};
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, multipleArgs);
    when(multipleArgs[0].computeValue(context)).thenReturn("arg1");
    when(multipleArgs[1].computeValue(context)).thenReturn("arg2");
    when(context.getRootContext()).thenReturn(rootContext);
    when(rootContext.getFunction(functionName, multipleArgs)).thenReturn(function);
    when(function.invoke(eq(context), any(Object[].class))).thenReturn("result");
    Object result = extensionFunction.compute(context);
    assertEquals("result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_WithNullArgs_ReturnsResult_NRbP4_gxBE0_fid3() {
    QName functionName = new QName("functionName");
    Expression[] args = null;
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
    EvalContext context = mock(EvalContext.class);
    RootContext rootContext = mock(RootContext.class);
    Function function = mock(Function.class);
    when(context.getRootContext()).thenReturn(rootContext);
    when(rootContext.getFunction(eq(functionName), any(Expression[].class))).thenReturn(function);
    when(function.invoke(eq(context), any(Expression[].class))).thenReturn("result");
    Object result = extensionFunction.compute(context);
    assertEquals("result", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_WithEmptyArgs_ReturnsResult_baYD5_AhEV0() {
    QName functionName = new QName("functionName");
    Expression[] args = new Expression[0];
    ExtensionFunction function = new ExtensionFunction(functionName, args);
    EvalContext context = mock(EvalContext.class);
    Object expected = new Object();
    when(context.getValue()).thenReturn(expected);
    Object result = function.compute(context);
    assertEquals(expected, result);
}
}