/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Passing {
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodePointer nodePointer;
@InjectMocks
    private SelfContext selfContext;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private NodeTypeTest mockNodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
NamespaceContext mockedNamespaceContext;
NodeTypeTest mockedNodeTypeTest;
    private boolean startedSet = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenPositionIsNotOne() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertFalse(selfContext.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrue_WhenNodeTestPasses() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        assertTrue(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenNodeTestFails() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(false);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionReturnsFalseWhenPositionIsNotOne_cNEv0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        assertFalse(selfContext.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionReturnsFalseWhenNodePointerIsNull_ekKF2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_CBMg0() throws Exception {
    selfContext.reset(); // Assuming this sets startedSet to true, but since we can't directly set it, we simulate it
    selfContext.reset(); // Call reset again to see if it resets to false
    Field startedSetField = SelfContext.class.getDeclaredField("startedSet");
    startedSetField.setAccessible(true);
    boolean isStartedSet = (boolean) startedSetField.get(selfContext);
    assertFalse(isStartedSet, "startedSet should be false after reset");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_JPGv0() throws Exception {
    selfContext = new SelfContext(mockNamespaceContext, mockNodeTypeTest);
    Pointer expectedPointer = Mockito.mock(Pointer.class);
    when(mockNamespaceContext.getSingleNodePointer()).thenReturn(expectedPointer);
    Pointer result = selfContext.getSingleNodePointer();
    verify(mockNamespaceContext).getSingleNodePointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenNodePointerIsNull_fid1() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrue_WhenNodeTestIsNull_fid1() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(null)).thenReturn(true);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrue_WhenNodeTestPasses_fid1() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionReturnsTrueWhenPositionIsOneAndNodePointerIsNotNullAndNodeTestIsNull_OvhB1_fid1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, null);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_Riot0_fid1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
    boolean result = selfContext.nextNode();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_ucoD0_YHxi0_fid1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
    Pointer result = null;
    try {
        result = selfContext.getSingleNodePointer();
    } catch (NullPointerException e) {
        // Expected to catch NullPointerException here
    }
    assertNull(result, "Pointer should be null due to NullPointerException");
}
}