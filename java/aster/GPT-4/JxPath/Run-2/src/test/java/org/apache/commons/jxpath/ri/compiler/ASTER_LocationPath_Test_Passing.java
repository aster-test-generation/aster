/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LocationPath_Test_Passing {
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private RootContext absoluteRootContext;
@Mock
    private NodePointer nodePointer;
@InjectMocks
    private LocationPath locationPath;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyStepsAndAbsoluteTrue_fzeK0() {
    Step[] steps = new Step[0];
    LocationPath locationPath = new LocationPath(true, steps);
    String result = locationPath.toString();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyStepsAndAbsoluteFalse_QCPH1() {
    Step[] steps = new Step[0];
    LocationPath locationPath = new LocationPath(false, steps);
    String result = locationPath.toString();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_AbsolutePath() throws Exception {
        locationPath = new LocationPath(true, null); // Assuming 'true' for absolute and 'null' for steps as they are not used directly in computeValue
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        when(locationPath.getSingleNodePointerForSteps(any(EvalContext.class))).thenReturn(nodePointer);
        // Setup
        when(locationPath.isAbsolute()).thenReturn(true);
        // Execution
        Object result = locationPath.computeValue(context);
        // Verification
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
        verify(locationPath).getSingleNodePointerForSteps(absoluteRootContext);
        assertEquals(nodePointer, result, "The result should be the node pointer returned from getSingleNodePointerForSteps");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_RelativePath() throws Exception {
        locationPath = new LocationPath(true, null); // Assuming 'true' for absolute and 'null' for steps as they are not used directly in computeValue
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        when(locationPath.getSingleNodePointerForSteps(any(EvalContext.class))).thenReturn(nodePointer);
        // Setup
        locationPath = new LocationPath(false, null); // false for relative path
        when(locationPath.isAbsolute()).thenReturn(false);
        InitialContext initialContext = new InitialContext(context);
        when(locationPath.getSingleNodePointerForSteps(any(InitialContext.class))).thenReturn(nodePointer);
        // Execution
        Object result = locationPath.computeValue(context);
        // Verification
        verify(locationPath).getSingleNodePointerForSteps(any(InitialContext.class));
        assertEquals(nodePointer, result, "The result should be the node pointer returned from getSingleNodePointerForSteps for a relative path");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_AbsolutePath_nfzZ0() throws Exception {
    LocationPath locationPath = new LocationPath(true, new Step[0]); // Assuming constructor parameters as needed
    when(context.getRootContext()).thenReturn(rootContext);
    when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
    when(locationPath.isAbsolute()).thenReturn(true);
    Object expected = new Object();
    Object result = locationPath.compute(context);
    verify(context).getRootContext();
    verify(rootContext).getAbsoluteRootContext();
    verify(locationPath).evalSteps(absoluteRootContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeWithAbsoluteTrue_HuUp0_lkjp0() {
    Step[] steps = new Step[0];
    LocationPath locationPath = new LocationPath(true, steps);
    assertTrue(locationPath.isAbsolute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeWithAbsoluteFalse_GTZp1_yfOM0() {
    Step[] steps = new Step[0]; // Assuming Step is a valid class
    LocationPath locationPath = new LocationPath(false, steps);
    assertFalse(locationPath.isAbsolute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAbsoluteTrue_stVF0_qXDU0() {
    Step[] steps = new Step[0]; // Assuming Step is defined elsewhere
    LocationPath locationPath = new LocationPath(true, steps);
    assertTrue(locationPath.isAbsolute());
}
}