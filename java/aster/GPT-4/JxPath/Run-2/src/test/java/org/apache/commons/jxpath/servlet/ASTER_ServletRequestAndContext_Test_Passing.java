/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletRequestAndContext_Test_Passing {
@Mock
    private HttpServletRequest request;
@Mock
    private ServletContext context;
@Mock
    private HttpSession session;
@InjectMocks
    private ServletRequestAndContext servletRequestAndContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSession_WhenRequestIsHttpServletRequest_1() throws Exception {
        when(request.getSession(false)).thenReturn(session);
        HttpSession result = servletRequestAndContext.getSession();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSession_WhenRequestIsHttpServletRequest_2() throws Exception {
        when(request.getSession(false)).thenReturn(session);
        HttpSession result = servletRequestAndContext.getSession();
        assertEquals(session, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsNull_WhenRequestIsNotHttpServletRequest() throws Exception {
        when(request.getSession(false)).thenReturn(session);
        ServletRequest nonHttpRequest = mock(ServletRequest.class);
        ServletRequestAndContext nonHttpServletReqAndContext = new ServletRequestAndContext(nonHttpRequest, context);
        HttpSession result = nonHttpServletReqAndContext.getSession();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsNullWhenNotHttpServletRequest_ZkAu0() {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext context = mock(ServletContext.class);
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        HttpSession result = servletRequestAndContext.getSession();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletRequest() throws Exception {
        servletRequestAndContext = new ServletRequestAndContext(request, context);
        ServletRequest result = servletRequestAndContext.getServletRequest();
        assertEquals(request, result, "The returned ServletRequest should be the same as the mocked request");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletRequest_qOSD0() {
    ServletRequest mockRequest = mock(ServletRequest.class);
    ServletContext mockContext = mock(ServletContext.class);
    ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(mockRequest, mockContext);
    ServletRequest result = servletRequestAndContext.getServletRequest();
    assertSame(mockRequest, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSession_ReturnsValidSessionWhenHttpServletRequest_Lopq1_Arzy0_1() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    ServletContext context = mock(ServletContext.class);
    HttpSession expectedSession = mock(HttpSession.class);
    when(request.getSession(false)).thenReturn(expectedSession);
    ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
    HttpSession result = servletRequestAndContext.getSession();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSession_ReturnsValidSessionWhenHttpServletRequest_Lopq1_Arzy0_2() {
    HttpServletRequest request = mock(HttpServletRequest.class);
    ServletContext context = mock(ServletContext.class);
    HttpSession expectedSession = mock(HttpSession.class);
    when(request.getSession(false)).thenReturn(expectedSession);
    ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
    HttpSession result = servletRequestAndContext.getSession();
    assertEquals(expectedSession, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSession_WhenRequestIsHttpServletRequest() throws Exception {
        when(request.getSession(false)).thenReturn(session);
        HttpSession result = servletRequestAndContext.getSession();
        assertNotNull(result);
        assertEquals(session, result);
    }
}