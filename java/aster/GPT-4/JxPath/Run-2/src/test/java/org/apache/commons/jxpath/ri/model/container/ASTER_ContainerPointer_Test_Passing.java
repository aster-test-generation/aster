/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Passing {
private NodePointer valuePointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DocumentContainer documentContainerMock;
@InjectMocks
    private ContainerPointer containerPointer;
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
private Container container;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenFirstIndexIsGreaterThanSecond() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(nodePointer1.getIndex()).thenReturn(5);
        when(nodePointer2.getIndex()).thenReturn(3);
        int result = containerPointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenFirstIndexIsLessThanSecond() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(nodePointer1.getIndex()).thenReturn(2);
        when(nodePointer2.getIndex()).thenReturn(4);
        int result = containerPointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenIndicesAreEqual() throws Exception {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(nodePointer1.getIndex()).thenReturn(7);
        when(nodePointer2.getIndex()).thenReturn(7);
        int result = containerPointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNull_vfco2() {
        ContainerPointer cp = new ContainerPointer(null, Locale.getDefault());
        assertFalse(cp.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_OxGM0_fid1() {
    try {
        ContainerPointer containerPointer = new ContainerPointer(new DocumentContainer(null), Locale.getDefault());
        String result = containerPointer.asPath();
        assertEquals("/", result);
    } catch (Exception e) {
        assertEquals("XML URL is null", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithNonNullParent_ReturnsParentPath_Qkoc0() throws Exception {
    DOMNodePointer mockParentNodePointer = mock(DOMNodePointer.class);
    when(mockParentNodePointer.asPath()).thenReturn("/mocked/path");
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockParentNodePointer, mockDocumentContainer);
    String result = containerPointer.asPath();
    assertEquals("/mocked/path", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithNullParent_ReturnsRootPath_WSvM0() throws Exception {
    DOMNodePointer mockParentNodePointer = Mockito.mock(DOMNodePointer.class);
    Mockito.when(mockParentNodePointer.asPath()).thenReturn("/mocked/path");
    DocumentContainer mockDocumentContainer = Mockito.mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockParentNodePointer, mockDocumentContainer);
    containerPointer = new ContainerPointer(null, mockDocumentContainer);
    String result = containerPointer.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_GlKI0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    NodeIterator mockNodeIterator = mock(NodeIterator.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    when(mockDomNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
    NodeIterator result = containerPointer.namespaceIterator();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_WhenBaseValueIsNull_ShouldReturnFalse_FjVq0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    when(mockDomNodePointer.getNode()).thenReturn(null);
    boolean result = containerPointer.isCollection();
    assertFalse(result, "isCollection should return false when base value is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WhenBaseValueIsNull_dRoy0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    when(mockDomNodePointer.getBaseValue()).thenReturn(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_Gfba0() {
    DocumentContainer container = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer sameContainerPointer = new ContainerPointer(container, Locale.getDefault());
    DocumentContainer differentDocumentContainer = mock(DocumentContainer.class);
    ContainerPointer differentContainerPointer = new ContainerPointer(differentDocumentContainer, Locale.getDefault());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameContainer_fHhR0() {
    DocumentContainer container = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer sameContainerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer differentContainerPointer = new ContainerPointer(mock(DocumentContainer.class), Locale.getDefault());
    assertEquals(containerPointer, sameContainerPointer, "Objects with the same container should be equal.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentContainer_mULY0() {
    DocumentContainer container = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer sameContainerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer differentContainerPointer = new ContainerPointer(mock(DocumentContainer.class), Locale.getDefault());
    assertNotEquals(containerPointer, differentContainerPointer, "Objects with different containers should not be equal.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_UBMR0() {
    DocumentContainer container = mock(DocumentContainer.class);
    ContainerPointer containerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer sameContainerPointer = new ContainerPointer(container, Locale.getDefault());
    ContainerPointer differentContainerPointer = new ContainerPointer(mock(DocumentContainer.class), Locale.getDefault());
}
}