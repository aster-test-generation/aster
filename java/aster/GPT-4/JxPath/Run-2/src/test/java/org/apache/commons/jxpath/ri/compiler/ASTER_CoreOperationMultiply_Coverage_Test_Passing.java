/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationMultiply_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_iKiB0() {
        Constant arg1 = new Constant(5);
        Constant arg2 = new Constant(10);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        assertEquals("*", coreOperationMultiply.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_PWnW0() {
        Constant arg1 = new Constant(5); // Assuming 5 can be a valid Number
        Constant arg2 = new Constant(10); // Assuming 10 can be a valid Number
        CoreOperationMultiply multiplyOperation = new CoreOperationMultiply(arg1, arg2);
        final int expectedPrecedence = 2; // Assuming MULTIPLY_PRECEDENCE is 2
        int actualPrecedence = multiplyOperation.getPrecedence();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsTrue_RXIX0_VAyo0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationMultiply operation = new CoreOperationMultiply(arg1, arg2);
    assertTrue(operation.isSymmetric(), "isSymmetric should return true");
}
}