/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
@Mock
    private NodePointer nodePointer;
@InjectMocks
    private InitialContext initialContext;
@Mock
    private NamespaceContext namespaceContext;
    private boolean collection;
    private boolean started = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer() throws Exception {
        // Setup the InitialContext with a mocked NamespaceContext
        initialContext = new InitialContext(namespaceContext);
        // Arrange
        when(initialContext.getSingleNodePointer()).thenReturn(nodePointer);
        // Act
        Pointer result = initialContext.getSingleNodePointer();
        // Assert
        assertEquals(nodePointer, result, "The returned pointer should be the same as the mocked NodePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_bkxf0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    Pointer result = initialContext.getSingleNodePointer();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception {
        // Mock setup if needed, currently not required as we are only returning the mock
        // Setup the behavior of the mock if necessary
        when(initialContext.getCurrentNodePointer()).thenReturn(nodePointer);
        // Execute the method to be tested
        NodePointer result = initialContext.getCurrentNodePointer();
        // Verify the results
        assertEquals(nodePointer, result, "The returned NodePointer should match the mock");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_Gkko0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    NodePointer expectedNodePointer = initialContext.getCurrentNodePointer();
    assertEquals(expectedNodePointer, initialContext.getCurrentNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        // Assuming there's a constructor in InitialContext that accepts NamespaceContext
        initialContext = new InitialContext(namespaceContext);
        // Arrange
        when(initialContext.setPosition(anyInt())).thenReturn(true);
        // Act
        boolean result = initialContext.nextNode();
        // Assert
        assertTrue(result, "The nextNode method should return true when setPosition is successful");
        verify(initialContext, times(1)).setPosition(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        // Initialize InitialContext with mocked NamespaceContext
        initialContext = new InitialContext(namespaceContext);
        // Arrange
        Object expectedValue = "Expected Value";
        when(nodePointer.getValue()).thenReturn(expectedValue);
        // Act
        Object actualValue = initialContext.getValue();
        // Assert
        assertEquals(expectedValue, actualValue, "The value returned by getValue should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_MFQK0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    Object result = initialContext.getValue();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_FirstCall_ReturnsTrue() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        initialContext = new InitialContext(namespaceContext);
        // Test the first call to nextSet, expecting true as it should indicate the start
        boolean result = initialContext.nextSet();
        assertTrue(result, "Expected true on the first call of nextSet as it starts the context.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_SecondCall_ReturnsFalse() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        initialContext = new InitialContext(namespaceContext);
        // First call to set the context to started
        initialContext.nextSet();
        // Test the second call to nextSet, expecting false as it should not restart
        boolean result = initialContext.nextSet();
        assertFalse(result, "Expected false on subsequent calls of nextSet as it should not restart.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetFirstCall_jijX0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    boolean result = initialContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetSecondCall_rmTq1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    initialContext.nextSet(); // First call to set started to true
    boolean result = initialContext.nextSet(); // Second call should return false
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_CollectionFalse_PositionIsOne_lhET0() {
    InitialContext initialContext = new InitialContext(null); // Assuming the constructor does not depend on the actual parameter for this test
    boolean result = initialContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_CollectionFalse_PositionNotOne_TNAb0() {
    InitialContext initialContext = new InitialContext(null); // Assuming the constructor does not depend on the actual parameter for this test
    boolean result = initialContext.setPosition(2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_CollectionTrue_PositionWithinRange_rkjS0() {
    initialContext = new InitialContext(null); // Assuming the constructor does not depend on the actual parameter for this test
    when(nodePointer.getLength()).thenReturn(5);
}
}