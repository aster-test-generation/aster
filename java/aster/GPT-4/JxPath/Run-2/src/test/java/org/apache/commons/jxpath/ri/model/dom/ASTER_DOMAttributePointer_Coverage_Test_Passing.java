/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.mockito.Mockito;
import org.w3c.dom.Attr;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.w3c.dom.Node;

public class Aster_DOMAttributePointer_Coverage_Test_Passing {
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NullOwnerElement_kSrP1() {
        Attr mockAttr = Mockito.mock(Attr.class);
        Mockito.when(mockAttr.getOwnerElement()).thenReturn(null);
        DOMNodePointer mockParent = Mockito.mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mockAttr);
        pointer.remove();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeWithNullNodeTest_CAvr0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, null);
        boolean result = domAttributePointer.testNode(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithString_KDSv0() {
        Node node = org.mockito.Mockito.mock(Node.class);
        Attr attr = org.mockito.Mockito.mock(Attr.class);
        Locale locale = new Locale("en", "US");
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parentNode, attr);
        String testValue = "Test String";
        domAttributePointer.setValue(testValue);
        org.mockito.Mockito.verify(attr).setValue(testValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonString_ekAM1() {
        Node node = org.mockito.Mockito.mock(Node.class);
        Attr attr = org.mockito.Mockito.mock(Attr.class);
        Locale locale = new Locale("en", "US");
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parentNode, attr);
        Integer testValue = 123;
        domAttributePointer.setValue(testValue);
        org.mockito.Mockito.verify(attr).setValue("123");
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_Murl0() {
        Node mockNode = org.mockito.Mockito.mock(Node.class);
        Attr mockAttr = org.mockito.Mockito.mock(Attr.class);
        DOMNodePointer domNodePointer = new DOMNodePointer(mockNode, Locale.getDefault());
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, mockAttr);
        assertEquals(mockAttr, domAttributePointer.getBaseValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_CWKC0_1() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_CWKC0_2() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_CWKC0_3() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_BAAH1_1() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn(null);
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_BAAH1_2() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn(null);
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertNull(result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_BAAH1_3() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn(null);
        when(attr.getLocalName()).thenReturn("localName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_eEJT2_1() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_eEJT2_2() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_eEJT2_3() {
        Node node = mock(Node.class);
        Attr attr = mock(Attr.class);
        Locale locale = mock(Locale.class);
        DOMNodePointer parentNode = new DOMNodePointer(node, locale);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        QName result = pointer.getName();
        assertEquals("", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_APuk0() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, mock(Attr.class));
        assertEquals("@null", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentNoTrailingSlash_nVGa1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        when(mockParent.asPath()).thenReturn("parentPath");
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mock(Attr.class));
        assertEquals("parentPath/@null", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentWithTrailingSlash_FbFY2() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        when(mockParent.asPath()).thenReturn("parentPath/");
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mock(Attr.class));
        assertEquals("parentPath/@null", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBufferInitialization_NrAZ3() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, mock(Attr.class));
        assertNotNull(pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathParentNotNullCheck_zKgI4() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, mock(Attr.class));
        assertFalse(pointer.asPath().contains("null/"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathParentAsPathCalled_SixH5() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        when(mockParent.asPath()).thenReturn("");
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mock(Attr.class));
        pointer.asPath();
        verify(mockParent, times(1)).asPath();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathAppendAtAndName_zJDy7() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, mock(Attr.class));
        assertTrue(pointer.asPath().startsWith("@"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathReturnString_iIGI8() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, mock(Attr.class));
        assertTrue(pointer.asPath() instanceof String);
    }
}