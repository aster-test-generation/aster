/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
@Mock
    private NodeIterator iterator;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@InjectMocks
    private ChildContext childContext;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NodePointer nodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_WhenIteratorIsNull() throws Exception {
        // Initialize ChildContext with mocks
        childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        // Arrange
        when(iterator.setPosition(anyInt())).thenReturn(true);
        // Act
        boolean result = childContext.setPosition(1);
        // Assert
        assertFalse(result, "Position should not be set when iterator is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InitialPosition_AMRm0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FromParentLocation_eAtC1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, true);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReverseOrder_kAXu2() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, false, true);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_NoParent_nzec3() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, false, false);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionFails_ReturnsNull() throws Exception {
        // Initialize ChildContext with mocks and specific configuration
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        // Arrange
        when(iterator.setPosition(1)).thenReturn(false);
        // Act
        NodePointer result = childContext.getCurrentNodePointer();
        // Assert
        assertNull(result, "Expected null when position is 0 and setPosition returns false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds_ReturnsNodePointer_1() throws Exception {
        // Initialize ChildContext with mocks and specific configuration
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        // Arrange
        when(iterator.setPosition(1)).thenReturn(true);
        // Act
        NodePointer result = childContext.getCurrentNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer when position is 0 and setPosition returns true");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds_ReturnsNodePointer_2() throws Exception {
        // Initialize ChildContext with mocks and specific configuration
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        // Arrange
        when(iterator.setPosition(1)).thenReturn(true);
        // Act
        NodePointer result = childContext.getCurrentNodePointer();
        // Assert
        assertEquals(nodePointer, result, "Expected NodePointer returned from iterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenIteratorIsNull_ReturnsNull() throws Exception {
        // Initialize ChildContext with mocks and specific configuration
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        // Arrange
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.setPosition(1)).thenReturn(true);
        // Act
        NodePointer result = childContext.getCurrentNodePointer();
        // Assert
        assertNull(result, "Expected null when iterator is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_NullIterator_MrYd0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        assertNull(childContext.getCurrentNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ValidIterator_PositionNonZero_HXyX2() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTest, true, false);
        assertNotNull(childContext.getCurrentNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_ReturnsNullWhenIteratorIsNull() throws Exception {
        childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        when(iterator.getNodePointer()).thenReturn(null);
        assertNull(childContext.getSingleNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_ReturnsNodePointerWhenNotNull() throws Exception {
        childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        assertEquals(nodePointer, childContext.getSingleNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_IteratesUntilNodePointerIsNotNull() throws Exception {
        childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        when(iterator.getNodePointer()).thenReturn(null, null, nodePointer);
        assertEquals(nodePointer, childContext.getSingleNodePointer());
        verify(iterator, times(3)).getNodePointer();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_ReturnsNullWhenPositionIsZeroAndNoNextSet_XQxQ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        Pointer result = childContext.getSingleNodePointer();
        assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        // Assuming ChildContext has a method to set the initial position, which is not shown in the provided code.
        // If such a method does not exist, you might need to adjust the class design to allow setting or resetting position.
        when(childContext.getCurrentPosition()).thenReturn(0);
        // Setup
        when(childContext.setPosition(1)).thenReturn(true);
        // Execution
        boolean result = childContext.nextNode();
        // Verification
        verify(childContext, times(1)).setPosition(1);
        assertTrue(result, "Expected nextNode to return true when position is set to 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeFailsToSetPosition() throws Exception {
        // Assuming ChildContext has a method to set the initial position, which is not shown in the provided code.
        // If such a method does not exist, you might need to adjust the class design to allow setting or resetting position.
        when(childContext.getCurrentPosition()).thenReturn(0);
        // Setup
        when(childContext.setPosition(1)).thenReturn(false);
        // Execution
        boolean result = childContext.nextNode();
        // Verification
        verify(childContext, times(1)).setPosition(1);
        assertFalse(result, "Expected nextNode to return false when setPosition fails");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_itBt0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
    boolean result = childContext.nextNode();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds_ReturnsNodePointer() throws Exception {
        // Initialize ChildContext with mocks and specific configuration
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.getNodePointer()).thenReturn(nodePointer);
        // Arrange
        when(iterator.setPosition(1)).thenReturn(true);
        // Act
        NodePointer result = childContext.getCurrentNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer when position is 0 and setPosition returns true");
        assertEquals(nodePointer, result, "Expected NodePointer returned from iterator");
    }
}