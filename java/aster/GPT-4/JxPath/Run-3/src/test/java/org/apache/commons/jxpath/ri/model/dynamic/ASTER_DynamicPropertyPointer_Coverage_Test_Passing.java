/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynamicPropertyPointer_Coverage_Test_Passing {
    private PageContextHandler pageContextHandler;
    private DynamicPropertyPointer dynamicPropertyPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WholeCollection_KLyQ0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        final int WHOLE_COLLECTION = -1;
        final Object value = "New Value";
        when(pointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        pointer.setValue(value);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullValue_WholeCollection_WEft2() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        final int WHOLE_COLLECTION = -1;
        final Object value = null;
        when(pointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        pointer.setValue(value);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_WholeCollection_pPFh0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        when(pointer.getIndex()).thenReturn(DynamicPropertyPointer.WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        NodePointer result = pointer.createPath(context, value);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
        assertSame(pointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_CreatePathCalled_dfTR2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        int index = 1;
        when(pointer.getIndex()).thenReturn(index);
        pointer.createPath(context, value);
        verify(pointer).createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ReturnThis_PjFm4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        NodePointer result = pointer.createPath(context, value);
        assertSame(pointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ValidIndexWithinBounds_QvDp4() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
        Object collection = new Object();
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getIndex()).thenReturn(1);
        when(pointer.getLength()).thenReturn(2); // Index within bounds
        pointer.createPath(context);
        verify(handler, never()).setProperty(any(), any(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_IndexExceedsLength_rWaj5() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = spy(new DynamicPropertyPointer(parent, handler));
        Object collection = new Object();
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getIndex()).thenReturn(3);
        when(pointer.getLength()).thenReturn(2); // Index exceeds length
        pointer.createPath(context);
        verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ReturnsThis_tXJX6() {
        JXPathContext context = mock(JXPathContext.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
        when(pointer.getBaseValue()).thenReturn(new Object());
        NodePointer result = pointer.createPath(context);
        assertSame(pointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWholeCollection_KiiA0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        when(handler.getProperty(any(), any())).thenReturn("WholeCollectionValue");
        when(pointer.getIndex()).thenReturn(DynamicPropertyPointer.WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        Object result = pointer.getImmediateNode();
        verify(handler).getProperty(any(), eq("propertyName"));
        assertEquals("WholeCollectionValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonEmptyParentPathNoTrailingSlash_FLNT1() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("/parent");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        assertEquals("/parent.[@name='']", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParentPathTrailingSlash_BifE2() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("/parent/");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        assertEquals("/parent/.[@name='']", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithPropertyName_oDSh3() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("/parent");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        assertEquals("/parent.[@name='propertyName']", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndexNotWholeCollectionAndIsCollection_EZdg4() {
        DOMNodePointer parentPointer = mock(DOMNodePointer.class);
        when(parentPointer.asPath()).thenReturn("/parent");
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentPointer, handler);
        assertEquals("/parent.[@name='propertyName'][2]", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_NullValue_SpecificIndex_NvFq3_DIew0() {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
    final int specificIndex = 1;
    final Object value = null;
    when(pointer.getIndex()).thenReturn(specificIndex);
    when(pointer.getBean()).thenReturn(new Object());
    when(pointer.getPropertyName()).thenReturn("propertyName");
    Object property = new Object();
    when(handler.getProperty(pointer.getBean(), pointer.getPropertyName())).thenReturn(property);
    pointer.setValue(value);
    verify(handler).getProperty(pointer.getBean(), pointer.getPropertyName());
    verify(handler).setProperty(pointer.getBean(), pointer.getPropertyName(), value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_InvalidIndex_SbNs4_FOPZ0() {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
    final int invalidIndex = -2;
    final Object value = "New Value";
    when(pointer.getIndex()).thenReturn(invalidIndex);
    when(pointer.getBean()).thenReturn(new Object());
    when(pointer.getPropertyName()).thenReturn("propertyName");
    pointer.setValue(value);
    verify(handler, never()).setProperty(any(), any(), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_SpecificIndex_ynCd1_cdhE0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
    JXPathContext context = mock(JXPathContext.class);
    Object value = new Object();
    int index = 1;
    when(pointer.getIndex()).thenReturn(index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_BaseValueNotNull_TRJS0_Gemy0() {
    JXPathContext context = mock(JXPathContext.class);
    DOMNodePointer parent = mock(DOMNodePointer.class);
    PageContextHandler handler = mock(PageContextHandler.class);
    DynamicPropertyPointer pointer = new DynamicPropertyPointer(parent, handler);
    when(pointer.getBaseValue()).thenReturn(new Object()); // Base value is not null
    pointer.createPath(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeReturnCheck_ajoB2() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        PageContextHandler handler = mock(PageContextHandler.class);
        DynamicPropertyPointer pointer = new DynamicPropertyPointer(parentNode, handler);
        when(handler.getProperty(any(), any())).thenReturn("ReturnValue");
        when(pointer.getIndex()).thenReturn(DynamicPropertyPointer.WHOLE_COLLECTION);
        when(pointer.getBean()).thenReturn(new Object());
        when(pointer.getPropertyName()).thenReturn("propertyName");
        Object result = pointer.getImmediateNode();
        assertEquals("ReturnValue", result);
    }
}