/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWhenPropertyDescriptorsIsNull_XNqA0_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertNotNull(descriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWhenPropertyDescriptorsIsNull_XNqA0_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertEquals(0, descriptors.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsReturnsCopiedArray_NfDU3_1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] firstCallDescriptors = beanInfo.getPropertyDescriptors();
        PropertyDescriptor[] secondCallDescriptors = beanInfo.getPropertyDescriptors();
        assertNotSame(firstCallDescriptors, secondCallDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsReturnsCopiedArray_NfDU3_2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] firstCallDescriptors = beanInfo.getPropertyDescriptors();
        PropertyDescriptor[] secondCallDescriptors = beanInfo.getPropertyDescriptors();
        assertArrayEquals(firstCallDescriptors, secondCallDescriptors);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_basic_GchX0() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withDynamic_zjoY1() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withAtomic_bQCe2() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, false);
        String result = beanInfo.toString();
        assertFalse(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withProperties_TTBM3() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertTrue(result.contains(", properties = "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withDynamicPropertyHandler_AWfb4() {
        Class<?> clazz = String.class;
        Class<?> handlerClass = Object.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, handlerClass);
        String result = beanInfo.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_propertyDescriptors_jvxg5() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertTrue(result.contains("properties = "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_propertyTypeAndName_gKNl6() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertTrue(result.matches("(?s).*\\n    .*: .*"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_completeOutput_RHEl7() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertTrue(result.endsWith("]"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_returnValue_FPOM8() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        assertNotNull(beanInfo.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_checkClassInOutput_azqX9() {
        Class<?> clazz = Integer.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_checkDynamicFlag_yjdm10() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_checkAtomicFlag_Ktnx11() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, false);
        String result = beanInfo.toString();
        assertFalse(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withEmptyProperties_YLqw12() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertTrue(result.contains("properties = "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNoDynamicNoAtomic_Rlik14_1() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNoDynamicNoAtomic_Rlik14_2() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertFalse(result.contains(", atomic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withBothDynamicAndAtomic_uswq15_2() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", atomic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWhenPropertyDescriptorsIsNull_XNqA0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertNotNull(descriptors);
        assertEquals(0, descriptors.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsReturnsCopiedArray_NfDU3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] firstCallDescriptors = beanInfo.getPropertyDescriptors();
        PropertyDescriptor[] secondCallDescriptors = beanInfo.getPropertyDescriptors();
        assertNotSame(firstCallDescriptors, secondCallDescriptors);
        assertArrayEquals(firstCallDescriptors, secondCallDescriptors);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNoDynamicNoAtomic_Rlik14() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic"));
        assertFalse(result.contains(", atomic"));
    }
}