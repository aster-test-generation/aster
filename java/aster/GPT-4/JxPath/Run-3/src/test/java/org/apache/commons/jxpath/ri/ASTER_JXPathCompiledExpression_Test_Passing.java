/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.Iterator;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
@Mock
    private JXPathContextReferenceImpl mockContext;
@Mock
    private Expression mockExpression;
private String xpath = "/some/path";
@InjectMocks
    private JXPathCompiledExpression jxpathCompiledExpression;
@Mock
    private Expression expression;
@InjectMocks
    private JXPathCompiledExpression jxpathcompiledexpression;
@Mock
    private JXPathContext context;
@Mock
    private Pointer expectedPointer;
private Object value = new Object();
    private JXPathContextReferenceImpl contextReferenceImpl;
@Mock
    private Iterator mockIterator;
private Constant expressionConstant;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXPathReturnsCorrectXPath_MGKH0() {
    Constant constant = new Constant("expression");
    JXPathCompiledExpression expression = new JXPathCompiledExpression("test/xpath", constant);
    String result = expression.getXPath();
    assertEquals("test/xpath", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemovePath_dXEA0() {
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual context if available
    Object contextBean = new Object();
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/some/path";
    Constant expression = new Constant("expression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    compiledExpression.removePath(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_DJsa0() {
        JXPathContext parentContext = mock(JXPathContext.class);
        Object contextBean = new Object();
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
        Constant expression = new Constant("expression");
        Object value = new Object();
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("xpath", expression);
        doNothing().when(context).setValue(anyString(), any(), any());
        compiledExpression.setValue(context, value);
        verify(context).setValue("xpath", expression, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringReturnsCorrectXPath_Uhom0() {
    Constant constant = new Constant("expression");
    JXPathCompiledExpression expression = new JXPathCompiledExpression("sample/xpath", constant);
    assertEquals("sample/xpath", expression.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_IUQk0() {
    String xpath = "/test/path";
    Constant expression = new Constant("testExpression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object contextBean = new Object();
    JXPathContext parentContext = null; // Assuming null for simplicity, could be an actual parent context
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Pointer result = compiledExpression.createPath(context);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue() throws Exception {
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("expression"));
        when(context.createPathAndSetValue(xpath, value)).thenReturn(expectedPointer);
        Pointer result = jxpathcompiledexpression.createPathAndSetValue(context, value);
        verify(context).createPathAndSetValue(xpath, value);
        assertEquals(expectedPointer, result, "The pointer returned was not as expected.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathAndSetValue_JoQY0() {
    JXPathContext parentContext = null; // Assuming null as no concrete implementation provided
    Object contextBean = new Object();
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/test/path";
    Constant expression = new Constant(xpath);
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object value = "New Value";
    Pointer result = compiledExpression.createPathAndSetValue(context, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_wnLJ0() {
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual context if available
    Object contextBean = new Object();
    JXPathContext context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Class<String> requiredType = String.class;
    String xpath = "/test/path";
    Constant expression = new Constant(xpath);
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object result = compiledExpression.getValue(context, requiredType);
    assertNotNull(result);
    assertTrue(result instanceof String);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExpression_yIEs0() {
    Constant constant = new Constant("test");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("testXPath", constant);
    Expression result = compiledExpression.getExpression();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_lDli0() {
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual context if available
    Object contextBean = new Object();
    JXPathContext context = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/test/path";
    Constant expression = new Constant(xpath);
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object result = compiledExpression.getValue(context);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer() throws Exception {
        jxpathCompiledExpression = new JXPathCompiledExpression(xpath, expression);
        when(context.getPointer(xpath)).thenReturn(expectedPointer);
        when(context instanceof JXPathContextReferenceImpl).thenReturn(true);
        when(((JXPathContextReferenceImpl) context).getPointer(xpath, expression)).thenReturn(expectedPointer);
        Pointer result = jxpathCompiledExpression.getPointer(context, xpath);
        assertNotNull(result, "Pointer should not be null");
        assertSame(expectedPointer, result, "Expected pointer returned from getPointer should match the mocked pointer");
        verify(context, times(1)).getPointer(xpath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointer_jUvC0() {
    JXPathContext parentContext = null; // Assuming null as no concrete implementation details provided
    Object contextBean = new Object();
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    String xpath = "/some/path";
    Constant expression = new Constant("expression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Pointer result = compiledExpression.getPointer(context, xpath);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIteratePointers_YvdE0() {
    String xpath = "/some/path";
    Constant expression = new Constant("expression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object contextBean = new Object();
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual parent context if available
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Iterator result = compiledExpression.iteratePointers(context);
    assertNotNull(result);
    assertTrue(result.hasNext()); // Assuming there is at least one element to iterate over
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate() throws Exception {
        expressionConstant = new Constant(xpath);
        jxpathCompiledExpression = new JXPathCompiledExpression(xpath, expressionConstant);
        // Setup the context to return a specific iterator when iterate is called
        when(mockContext.iterate(xpath, expressionConstant)).thenReturn(mockIterator);
        // Execute the method under test
        Iterator resultIterator = jxpathCompiledExpression.iterate(mockContext);
        // Verify the results and interactions
        assertSame(mockIterator, resultIterator, "The iterator returned was not the one expected.");
        verify(mockContext).iterate(xpath, expressionConstant);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIterate_YbJx0() {
    String xpath = "/some/path";
    Constant expression = new Constant("expression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object contextBean = new Object();
    JXPathContext parentContext = null; // Assuming null for simplicity in test setup
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Iterator result = compiledExpression.iterate(context);
    assertNotNull(result);
    assertTrue(result.hasNext()); // Assuming there is at least one element to iterate over
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_wnLJ0_1() {
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual context if available
    Object contextBean = new Object();
    JXPathContext context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Class<String> requiredType = String.class;
    String xpath = "/test/path";
    Constant expression = new Constant(xpath);
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object result = compiledExpression.getValue(context, requiredType);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_wnLJ0_2() {
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual context if available
    Object contextBean = new Object();
    JXPathContext context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Class<String> requiredType = String.class;
    String xpath = "/test/path";
    Constant expression = new Constant(xpath);
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object result = compiledExpression.getValue(context, requiredType);
    assertTrue(result instanceof String);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_1() throws Exception {
        jxpathCompiledExpression = new JXPathCompiledExpression(xpath, expression);
        when(context.getPointer(xpath)).thenReturn(expectedPointer);
        when(context instanceof JXPathContextReferenceImpl).thenReturn(true);
        when(((JXPathContextReferenceImpl) context).getPointer(xpath, expression)).thenReturn(expectedPointer);
        Pointer result = jxpathCompiledExpression.getPointer(context, xpath);
        verify(context, times(1)).getPointer(xpath);
        assertNotNull(result, "Pointer should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_2() throws Exception {
        jxpathCompiledExpression = new JXPathCompiledExpression(xpath, expression);
        when(context.getPointer(xpath)).thenReturn(expectedPointer);
        when(context instanceof JXPathContextReferenceImpl).thenReturn(true);
        when(((JXPathContextReferenceImpl) context).getPointer(xpath, expression)).thenReturn(expectedPointer);
        Pointer result = jxpathCompiledExpression.getPointer(context, xpath);
        verify(context, times(1)).getPointer(xpath);
        assertSame(expectedPointer, result, "Expected pointer returned from getPointer should match the mocked pointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIteratePointers_YvdE0_1() {
    String xpath = "/some/path";
    Constant expression = new Constant("expression");
    JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression(xpath, expression);
    Object contextBean = new Object();
    JXPathContext parentContext = null; // Assuming null for simplicity, replace with actual parent context if available
    JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(parentContext, contextBean);
    Iterator result = compiledExpression.iteratePointers(context);
    assertNotNull(result);}
}