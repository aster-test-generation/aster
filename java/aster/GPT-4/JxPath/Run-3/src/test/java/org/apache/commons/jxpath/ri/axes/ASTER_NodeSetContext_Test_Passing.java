/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.Pointer;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NodeSetContext_Test_Passing {
@Mock
    private NodeSet nodeSet;
@InjectMocks
    private NodeSetContext nodeSetContext;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private BasicNodeSet basicNodeSet;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private BasicNodeSet mockBasicNodeSet;
    private boolean startedSet = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithinRange_LaTV0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        boolean result = nodeSetContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBelowRange_nQDm1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        boolean result = nodeSetContext.setPosition(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAboveRange_uvgD2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        boolean result = nodeSetContext.setPosition(2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        // Initialize NodeSetContext with mocked NamespaceContext and BasicNodeSet
        nodeSetContext = new NodeSetContext(mockNamespaceContext, mockBasicNodeSet);
        // Arrange
        when(nodeSetContext.setPosition(anyInt())).thenReturn(true);
        // Act
        boolean result = nodeSetContext.nextNode();
        // Assert
        assertTrue(result, "Expected nextNode to return true");
        verify(nodeSetContext, times(1)).setPosition(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_qQCv0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    boolean result = nodeSetContext.nextNode();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodeSet_cINy0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    NodeSet result = nodeSetContext.getNodeSet();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_InitiallyReturnsTrue_ThenReturnsFalse() throws Exception {
        // The setup is handled by Mockito annotations
        // First call to nextSet should return true
        assertTrue(nodeSetContext.nextSet(), "Expected nextSet to return true on first call");
        // Subsequent calls to nextSet should return false
        assertFalse(nodeSetContext.nextSet(), "Expected nextSet to return false on second call");
        assertFalse(nodeSetContext.nextSet(), "Expected nextSet to return false on third call");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetFirstCall_utLy0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    boolean result = nodeSetContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSetSecondCall_ryJV1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
    nodeSetContext.nextSet(); // first call
    boolean result = nodeSetContext.nextSet(); // second call
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_InitiallyReturnsTrue_ThenReturnsFalse_1() throws Exception {
        // The setup is handled by Mockito annotations
        // First call to nextSet should return true
        // Subsequent calls to nextSet should return false
        assertTrue(nodeSetContext.nextSet(), "Expected nextSet to return true on first call");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_InitiallyReturnsTrue_ThenReturnsFalse_2() throws Exception {
        // The setup is handled by Mockito annotations
        // First call to nextSet should return true
        // Subsequent calls to nextSet should return false
        assertFalse(nodeSetContext.nextSet(), "Expected nextSet to return false on second call");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_InitiallyReturnsTrue_ThenReturnsFalse_3() throws Exception {
        // The setup is handled by Mockito annotations
        // First call to nextSet should return true
        // Subsequent calls to nextSet should return false
        assertFalse(nodeSetContext.nextSet(), "Expected nextSet to return false on third call");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ValidPosition_tHnK0_1() throws Exception {
    List<Pointer> pointers = new ArrayList<>();
    pointers.add(mock(Pointer.class));
    when(nodeSet.getPointers()).thenReturn(pointers);
    assertTrue(nodeSetContext.setPosition(1), "setPosition should return true for valid position within range");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ValidPosition_tHnK0_2() throws Exception {
    List<Pointer> pointers = new ArrayList<>();
    pointers.add(mock(Pointer.class));
    when(nodeSet.getPointers()).thenReturn(pointers);
    assertTrue(nodeSetContext.setPosition(2), "setPosition should return true for valid position within range");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_InvalidPosition_DiUv0_1() throws Exception {
    List<Pointer> pointers = new ArrayList<>();
    pointers.add(mock(Pointer.class));
    when(nodeSet.getPointers()).thenReturn(pointers);
    assertFalse(nodeSetContext.setPosition(0), "setPosition should return false for position below range");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_InvalidPosition_DiUv0_2() throws Exception {
    List<Pointer> pointers = new ArrayList<>();
    pointers.add(mock(Pointer.class));
    when(nodeSet.getPointers()).thenReturn(pointers);
    assertFalse(nodeSetContext.setPosition(3), "setPosition should return false for position above range");}
}