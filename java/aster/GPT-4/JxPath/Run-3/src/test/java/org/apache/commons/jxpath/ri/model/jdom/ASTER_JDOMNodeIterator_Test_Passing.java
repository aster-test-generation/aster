/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Passing {
private JDOMNodeIterator jdomNodeIterator;
@Mock
    private DOMNodePointer parent;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private Object child;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() {
        // Mocking dependencies required for JDOMNodeIterator
        DOMNodePointer mockParent = Mockito.mock(DOMNodePointer.class);
        NodeTypeTest mockNodeTest = Mockito.mock(NodeTypeTest.class);
        // Initialize JDOMNodeIterator with mocks and default values
        jdomNodeIterator = new JDOMNodeIterator(mockParent, mockNodeTest, false, null);
        // Test getPosition method
        int expectedPosition = 0; // As initialized in JDOMNodeIterator
        int actualPosition = jdomNodeIterator.getPosition();
        // Assert that the position is as expected
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_FailToMoveForward_Djhz0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    when(jdomNodeIterator.setPosition(1)).thenReturn(true);
    when(jdomNodeIterator.setPosition(3)).thenReturn(false);
    boolean result = jdomNodeIterator.setPosition(3);
    assertFalse(result, "setPosition should return false when unable to move to the desired position");
    verify(jdomNodeIterator, times(1)).setPosition(1);
    verify(jdomNodeIterator, times(1)).setPosition(3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_SuccessfullyMoveBackward_qIqV0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, true, null);
    jdomNodeIterator.setPosition(3); // Assuming this sets position to 3
    boolean result = jdomNodeIterator.setPosition(1);
    assertTrue(result, "setPosition should return true when able to move back to the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_FailToMoveBackward_hyNB0() throws Exception {
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, false, null);
    jdomNodeIterator.setPosition(3); // Assuming this sets position to 3
    boolean result = jdomNodeIterator.setPosition(0);
    assertFalse(result, "setPosition should return false when unable to move back to the desired position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_WhenChildIsNullAndPositionNotSet_ShouldReturnNull_okQE0() throws Exception {
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    boolean reverse = false;
    DOMNodePointer startWith = null;
    DOMNodePointer parent = mock(DOMNodePointer.class);
    JDOMNodeIterator jdomNodeIterator = new JDOMNodeIterator(parent, nodeTest, reverse, startWith);
    when(jdomNodeIterator.setPosition(1)).thenReturn(false);
    NodePointer result = jdomNodeIterator.getNodePointer();
    assertNull(result, "Expected getNodePointer to return null when child is null and position is not set");
}
}