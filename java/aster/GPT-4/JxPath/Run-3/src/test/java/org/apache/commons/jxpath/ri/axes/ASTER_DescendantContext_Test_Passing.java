/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTypeTest nodeTest;
@InjectMocks
    private DescendantContext descendantContext;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodePointer currentNodePointer;
@Mock
private boolean includeSelf = true;
    private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_SuccessfullyAdvancesPosition() throws Exception {
        // Mock setup for parentContext and nodeTest is handled by annotations
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        when(descendantContext.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
        // Act
        boolean result = descendantContext.setPosition(2);
        // Assert
        assertTrue(result, "setPosition should return true when it can advance to the requested position");
        verify(descendantContext, times(2)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FailsToAdvancePosition() throws Exception {
        // Mock setup for parentContext and nodeTest is handled by annotations
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        when(descendantContext.nextNode()).thenReturn(false);
        // Act
        boolean result = descendantContext.setPosition(1);
        // Assert
        assertFalse(result, "setPosition should return false when it cannot advance to the requested position");
        verify(descendantContext).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ResetCalledWhenPositionIsLessThanCurrent() throws Exception {
        // Mock setup for parentContext and nodeTest is handled by annotations
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        descendantContext.setPosition(3); // Set initial position to 3
        when(descendantContext.nextNode()).thenReturn(true);
        doNothing().when(descendantContext).reset();
        // Act
        boolean result = descendantContext.setPosition(1);
        // Assert
        verify(descendantContext).reset();
        assertTrue(result, "setPosition should return true after resetting and advancing to the new position");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionDecreasePosition_KIJd0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        descendantContext.setPosition(5);
        boolean result = descendantContext.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionIncreasePosition_dKGT1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        descendantContext.setPosition(2);
        boolean result = descendantContext.setPosition(4);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionToSamePosition_hkva2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        descendantContext.setPosition(3);
        boolean result = descendantContext.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBeyondAvailableNodes_rlxL3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        boolean result = descendantContext.setPosition(10);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        // Initialize the DescendantContext with mocked NamespaceContext and NodeTypeTest
        descendantContext = new DescendantContext(namespaceContext, false, nodeTypeTest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChildOrderingRequired_HUaQ0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    assertTrue(descendantContext.isChildOrderingRequired());
}
}