/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
private String defaultNamespace;
private NamespaceResolver localNamespaceResolver;
@Mock
    private Node node;
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
@Mock
    private NamedNodeMap namedNodeMap;
@InjectMocks
    private DOMNodePointer domNodePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodeList nodeList;
@Mock
    private Document document;
@Mock
    private Node parentNode;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private NodeIterator nodeIterator;
Element element;
@Mock
    private Locale locale;
@Mock
    private NodePointer startWith;
@Mock
    private NodePointer nodePointer;
@Mock
    private NamespaceResolver namespaceResolver;
@Mock
    private Node anotherNode;
@Mock
    private Attr attr;
@Mock
    private Comment commentNode;
private final String id = "testId";
    private DOMNodePointer parent;
@Mock
    private NamespaceResolver parentNamespaceResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SameNode() throws Exception {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(0, result, "Should return 0 when both pointers point to the same node");
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes_2() throws Exception {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getFirstChild()).thenReturn(node1);
        when(node1.getNextSibling()).thenReturn(node2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        result = domNodePointer.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(1, result, "Should return0 when node2 comes after node1");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeNodes_2() throws Exception {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node attributeNode1 = mock(Node.class);
        Node attributeNode2 = mock(Node.class);
        when(nodePointer1.getBaseValue()).thenReturn(attributeNode1);
        when(nodePointer2.getBaseValue()).thenReturn(attributeNode2);
        when(attributeNode1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(attributeNode2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.item(0)).thenReturn(attributeNode1);
        when(namedNodeMap.getLength()).thenReturn(2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        when(namedNodeMap.item(0)).thenReturn(attributeNode2);
        result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(1, result, "Should return 1 when attributeNode1 is after attributeNode2 in the attributes map");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithTextNodeAndEmptyString() throws Exception {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(node.getOwnerDocument()).thenReturn(document);
        when(node.getParentNode()).thenReturn(parentNode);
        String testValue = "";
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        domNodePointer.setValue(testValue);
        verify(parentNode, times(1)).removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElementNodeAndNodeValue_VcUg4() throws Exception {
        Node node = mock(Element.class);
        Node valueNode = mock(Node.class);
        NodeList nodeList = mock(NodeList.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(0);
        when(valueNode.cloneNode(true)).thenReturn(valueNode);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueNode);
        verify(node).appendChild(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElementNodeRemovingChildren_bvQg6() throws Exception {
        Node node = mock(Element.class);
        NodeList nodeList = mock(NodeList.class);
        Node childNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(1);
        when(nodeList.item(0)).thenReturn(childNode);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        pointer.setValue(null);
        verify(node).removeChild(childNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentNodeAndNodeValue_XvVZ7() throws Exception {
        Node node = mock(Document.class);
        Node valueNode = mock(Node.class);
        NodeList nodeList = mock(NodeList.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(0);
        when(valueNode.cloneNode(true)).thenReturn(valueNode);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueNode);
        verify(node).appendChild(valueNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentNodeRemovingChildren_ugaK9() throws Exception {
        Node node = mock(Document.class);
        NodeList nodeList = mock(NodeList.class);
        Node childNode = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(1);
        when(nodeList.item(0)).thenReturn(childNode);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        pointer.setValue(null);
        verify(node).removeChild(childNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullValueAndElementNode_pNNq10() throws Exception {
        Node node = mock(Element.class);
        NodeList nodeList = mock(NodeList.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodeList);
        when(nodeList.getLength()).thenReturn(3);
        Node childNode1 = mock(Node.class);
        Node childNode2 = mock(Node.class);
        Node childNode3 = mock(Node.class);
        when(nodeList.item(0)).thenReturn(childNode1);
        when(nodeList.item(1)).thenReturn(childNode2);
        when(nodeList.item(2)).thenReturn(childNode3);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        pointer.setValue(null);
        verify(node).removeChild(childNode1);
        verify(node).removeChild(childNode2);
        verify(node).removeChild(childNode3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_gmic0() throws Exception {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    assertFalse(domNodePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        assertEquals(node, domNodePointer.getImmediateNode(), "The returned node should be the same as the mocked node");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NoElementNode() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        // Setup the node hierarchy and responses
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE); // Not an ELEMENT_NODE
        when(node.getParentNode()).thenReturn(null); // End of the chain
        // Execute the method under test
        String result = DOMNodePointer.findEnclosingAttribute(node, "targetAttr");
        // Verify the result
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_1() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        QName qName = new QName("testPrefix", "testLocalName");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        // Verify that the constructor of DOMAttributeIterator was called with the correct parameters
        DOMAttributeIterator expectedIterator = new DOMAttributeIterator(domNodePointer, qName);
        // Additional checks can be added here if DOMAttributeIterator's behavior is more complex and needs to be verified
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_2() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        QName qName = new QName("testPrefix", "testLocalName");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        // Verify that the constructor of DOMAttributeIterator was called with the correct parameters
        DOMAttributeIterator expectedIterator = new DOMAttributeIterator(domNodePointer, qName);
        // Additional checks can be added here if DOMAttributeIterator's behavior is more complex and needs to be verified
        assertTrue(result instanceof DOMAttributeIterator, "The result should be an instance of DOMAttributeIterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_3() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        QName qName = new QName("testPrefix", "testLocalName");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        // Verify that the constructor of DOMAttributeIterator was called with the correct parameters
        DOMAttributeIterator expectedIterator = new DOMAttributeIterator(domNodePointer, qName);
        // Additional checks can be added here if DOMAttributeIterator's behavior is more complex and needs to be verified
        assertEquals(expectedIterator.getClass(), result.getClass(), "Expected DOMAttributeIterator class type");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_ujqo0() throws Exception {
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        QName qName = new QName("attributeName");
        NodeIterator result = domNodePointer.attributeIterator(qName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode_1() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        // Setup for ELEMENT_NODE
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode_2() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        // Setup for ELEMENT_NODE
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ln", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking the Node and Locale as they are not the focus of the test
        Node node = mock(Node.class);
        Locale locale = mock(Locale.class);
        // Initialize DOMNodePointer with mocked Node and Locale
        domNodePointer = new DOMNodePointer(node, locale);
        // Call the method under test
        int length = domNodePointer.getLength();
        // Assert that the expected value is returned
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsOne_RjSv0() throws Exception {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    assertEquals(1, domNodePointer.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_dNJp0_1() throws Exception {
    Node node = mock(Node.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    NodeIterator result = domNodePointer.namespaceIterator();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_dNJp0_2() throws Exception {
    Node node = mock(Node.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    NodeIterator result = domNodePointer.namespaceIterator();
    assertTrue(result instanceof DOMNamespaceIterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeHasNoChildNodes_ShouldReturnTrue() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        // Arrange
        when(node.hasChildNodes()).thenReturn(false);
        // Act
        boolean result = domNodePointer.isLeaf();
        // Assert
        assertTrue(result, "DOMNodePointer should be a leaf when its node has no child nodes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeHasChildNodes_ShouldReturnFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        // Arrange
        when(node.hasChildNodes()).thenReturn(true);
        // Act
        boolean result = domNodePointer.isLeaf();
        // Assert
        assertFalse(result, "DOMNodePointer should not be a leaf when its node has child nodes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ShouldReturnTrue() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        assertTrue(domNodePointer.equals(domNodePointer), "Should return true when comparing the same object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ShouldReturnFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        assertFalse(domNodePointer.equals(null), "Should return false when comparing to null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ShouldReturnFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        Object differentObject = new Object();
        assertFalse(domNodePointer.equals(differentObject), "Should return false when comparing to an object of a different class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ShouldReturnTrue() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        DOMNodePointer anotherDOMNodePointer = new DOMNodePointer(node, Locale.getDefault());
        assertTrue(domNodePointer.equals(anotherDOMNodePointer), "Should return true when comparing two DOMNodePointers with the same node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ShouldReturnFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        DOMNodePointer anotherDOMNodePointer = new DOMNodePointer(anotherNode, Locale.getDefault());
        assertFalse(domNodePointer.equals(anotherDOMNodePointer), "Should return false when comparing two DOMNodePointers with different nodes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_WithLocalName() throws Exception {
        // Node mock is set up in the @Mock annotation
        // Scenario: Node has a local name
        when(node.getLocalName()).thenReturn("localName");
        String result = DOMNodePointer.getLocalName(node);
        assertEquals("localName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_WithQualifiedName() throws Exception {
        // Node mock is set up in the @Mock annotation
        // Scenario: Node does not have a local name, but has a qualified name
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("prefix:localName");
        String result = DOMNodePointer.getLocalName(node);
        assertEquals("localName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalName_WithSimpleName() throws Exception {
        // Node mock is set up in the @Mock annotation
        // Scenario: Node does not have a local name and the node name does not contain a colon
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        String result = DOMNodePointer.getLocalName(node);
        assertEquals("nodeName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCommentNodeEmpty() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WithParentNode() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        Node parentNode = mock(Node.class);
        when(node.getParentNode()).thenReturn(parentNode);
        domNodePointer.remove();
        verify(parentNode).removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ThrowsExceptionWhenNodeIsRoot() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        when(node.getParentNode()).thenReturn(null);
        assertThrows(JXPathException.class, () -> domNodePointer.remove());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_WhenCurrentLanguageIsNull_ShouldDelegateToSuper() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.ENGLISH);
        // Arrange
        DOMNodePointer spyDomNodePointer = spy(domNodePointer);
        doReturn(null).when(spyDomNodePointer).getLanguage();
        doReturn(true).when((DOMNodePointer)spyDomNodePointer).isLanguage("EN");
        // Act
        boolean result = spyDomNodePointer.isLanguage("EN");
        // Assert
        assertTrue(result);
        verify(spyDomNodePointer).isLanguage("EN");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_WhenCurrentLanguageIsNotNullAndMatches_ShouldReturnTrue() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.ENGLISH);
        // Arrange
        DOMNodePointer spyDomNodePointer = spy(domNodePointer);
        doReturn("ENGLISH").when(spyDomNodePointer).getLanguage();
        // Act
        boolean result = spyDomNodePointer.isLanguage("en");
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_WhenCurrentLanguageIsNotNullAndDoesNotMatch_ShouldReturnFalse() throws Exception {
        domNodePointer = new DOMNodePointer(node, Locale.ENGLISH);
        // Arrange
        DOMNodePointer spyDomNodePointer = spy(domNodePointer);
        doReturn("FRENCH").when(spyDomNodePointer).getLanguage();
        // Act
        boolean result = spyDomNodePointer.isLanguage("en");
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithPrefix() throws Exception {
        // Node mock is set up in the field declaration using @Mock
        // Setup
        when(node.getPrefix()).thenReturn("ns");
        when(node.getNodeName()).thenReturn("ns:nodeName");
        // Execute
        String result = DOMNodePointer.getPrefix(node);
        // Verify
        assertEquals("ns", result, "The prefix should be 'ns'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithoutPrefixButWithColonInName() throws Exception {
        // Node mock is set up in the field declaration using @Mock
        // Setup
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("ns:nodeName");
        // Execute
        String result = DOMNodePointer.getPrefix(node);
        // Verify
        assertEquals("ns", result, "The prefix should be extracted as 'ns' from the node name");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithoutPrefixAndNoColonInName() throws Exception {
        // Node mock is set up in the field declaration using @Mock
        // Setup
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        // Execute
        String result = DOMNodePointer.getPrefix(node);
        // Verify
        assertNull(result, "There should be no prefix as there is no colon in the node name");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_1() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        String prefix = "testPrefix";
        // Act
        NodePointer result = domNodePointer.namespacePointer(prefix);
        // Assert
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_2() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        String prefix = "testPrefix";
        // Act
        NodePointer result = domNodePointer.namespacePointer(prefix);
        // Assert
        assertTrue(result instanceof NamespacePointer, "The result should be an instance of NamespacePointer.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_eeUR0_1() throws Exception {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = domNodePointer.namespacePointer(prefix);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_eeUR0_2() throws Exception {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = domNodePointer.namespacePointer(prefix);
    assertTrue(result instanceof NamespacePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLanguage_dWKm0() throws Exception {
    Node node = mock(Node.class);
    when(node.getAttributes()).thenReturn(null);
    Locale locale = new Locale("en");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    String result = domNodePointer.getLanguage();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithNullNodeTest_ReturnsTrue() throws Exception {
        node = mock(Node.class);
        nodeTest = mock(NodeTest.class);
        assertTrue(DOMNodePointer.testNode(node, null), "testNode should return true when NodeTest is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NullTest_ReturnsTrue_prOk0() throws Exception {
    Node node = mock(Node.class);
    assertTrue(DOMNodePointer.testNode(node, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_NonElementNode_ReturnsFalse_WQTR2() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    NodeNameTest test = mock(NodeNameTest.class);
    assertFalse(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeNode_ReturnsTrue_OYFw5() throws Exception {
    Node node = mock(Node.class);
    NodeTypeTest test = mock(NodeTypeTest.class);
    when(test.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_TextNode_ReturnsTrue_jMEg6() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    NodeTypeTest test = mock(NodeTypeTest.class);
    when(test.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_CDATASectionNode_ReturnsTrue_vvze7() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    NodeTypeTest test = mock(NodeTypeTest.class);
    when(test.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_CommentNode_ReturnsTrue_keyj8() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
    NodeTypeTest test = mock(NodeTypeTest.class);
    when(test.getNodeType()).thenReturn(Compiler.NODE_TYPE_COMMENT);
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_ProcessingInstructionNode_ReturnsTrue_Gbnk9() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    NodeTypeTest test = mock(NodeTypeTest.class);
    when(test.getNodeType()).thenReturn(Compiler.NODE_TYPE_PI);
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_vdKv10() throws Exception {
    Node node = mock(ProcessingInstruction.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
    ProcessingInstructionTest test = new ProcessingInstructionTest("target");
    assertTrue(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_NonMatchingTarget_ReturnsFalse_gztG11() throws Exception {
    Node node = mock(ProcessingInstruction.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(((ProcessingInstruction) node).getTarget()).thenReturn("differentTarget");
    ProcessingInstructionTest test = new ProcessingInstructionTest("target");
    assertFalse(DOMNodePointer.testNode(node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithTextNode_gFqp2() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    when(node.getPreviousSibling()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithCDATASectionNode_jJlp3() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    when(node.getPreviousSibling()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithProcessingInstructionNode_yRFW4() throws Exception {
    ProcessingInstruction node = mock(ProcessingInstruction.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(node.getTarget()).thenReturn("target");
    when(node.getPreviousSibling()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/processing-instruction('target')[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithDocumentNode_jWFK5() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithTextNode_jhwy2() throws Exception {
    Node textNode = mock(Node.class);
    when(textNode.getNodeType()).thenReturn(Node.TEXT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(textNode, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithCDATANode_mojq3() throws Exception {
    Node cdataNode = mock(Node.class);
    when(cdataNode.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    DOMNodePointer pointer = new DOMNodePointer(cdataNode, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithProcessingInstructionNode_UkzL4() throws Exception {
    ProcessingInstruction piNode = mock(ProcessingInstruction.class);
    when(piNode.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(piNode.getTarget()).thenReturn("target");
    DOMNodePointer pointer = new DOMNodePointer(piNode, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("/processing-instruction('target')[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithDocumentNode_fadM5() throws Exception {
    Node docNode = mock(Node.class);
    when(docNode.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(docNode, Locale.getDefault());
    String result = pointer.asPath();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithId_AWce6() throws Exception {
    Node elementNode = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(elementNode, Locale.getDefault(), "uniqueId");
    String result = pointer.asPath();
    assertEquals("id('uniqueId')", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithEmptyPrefix_Wjnh1() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.getNamespaceURI("");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithXMLPrefix_ANTZ2() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.getNamespaceURI("xml");
    assertEquals("http://www.w3.org/XML/1998/namespace", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithXMLNSPrefix_gqDq3() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.getNamespaceURI("xmlns");
    assertEquals("http://www.w3.org/2000/xmlns/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Initialize DOMNodePointer with a mocked Node and a Locale
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        // Setup the behavior of the mocked node if necessary
        // For example: when(node.someMethod()).thenReturn(someValue);
        // Call the method under test
        Object result = domNodePointer.getBaseValue();
        // Assert the result
        assertEquals(node, result, "The base value should be the same as the mocked Node object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        // Assuming Node and Locale are part of some external libraries like w3c.dom.Node
        Node node = mock(Node.class); // Mocking Node as it's an external dependency
        Locale locale = Locale.ENGLISH; // Using a real Locale object as it's simple and has no side effects
        // Initialize DOMNodePointer with mocked Node and real Locale
        domNodePointer = new DOMNodePointer(node, locale);
        // Act
        boolean result = domNodePointer.isActual();
        // Assert
        assertTrue(result, "DOMNodePointer should always return true for isActual.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActualReturnsTrue_hoiK0() throws Exception {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    assertTrue(domNodePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_TPpj0() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver result = domNodePointer.getNamespaceResolver();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextNodeAndNonEmptyString_kagZ0_DUxc0() throws Exception {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String value = "Test String";
    pointer.setValue(value);
    verify(node).setNodeValue(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextNodeAndEmptyString_ZYdL1_DIKF0() throws Exception {
    Node node = mock(Node.class);
    Node parentNode = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    when(node.getParentNode()).thenReturn(parentNode);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    String value = "";
    pointer.setValue(value);
    verify(parentNode).removeChild(node);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_CCGk0() throws Exception {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    boolean result = domNodePointer.isCollection();
    assertFalse(result, "DOMNodePointer should not be a collection");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_GQLh0() throws Exception {
    node = mock(Node.class);
    locale = Locale.getDefault();
    domNodePointer = new DOMNodePointer(node, locale);
    NodeIterator result = domNodePointer.namespaceIterator();
    DOMNamespaceIterator namespaceIterator = (DOMNamespaceIterator) result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithNullPrefix_jrwY0_pFHg0() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
    String result = namespaceResolver.getNamespaceURI(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueReturnsCorrectNode_PNdv0_BBFk0() throws Exception {
    Locale testLocale = Locale.getDefault();
    String testId = "testId"; // Assuming testId is required based on constructor parameters
    Node testNode = mock(Node.class); // Mocking Node as it's not defined in the provided code
    DOMNodePointer domNodePointer = new DOMNodePointer(testNode, testLocale, testId);
    Node result = (Node) domNodePointer.getBaseValue();
    Assertions.assertEquals(testNode, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_InitialCreation_SXnY0_1() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver result = domNodePointer.getNamespaceResolver();
    assertNotNull(result, "NamespaceResolver should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_InitialCreation_SXnY0_2() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver result = domNodePointer.getNamespaceResolver();
    assertEquals(domNodePointer, result.getNamespaceContextPointer(), "Namespace context pointer should be set to DOMNodePointer instance");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_CachedInstance_QSfw0() throws Exception {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver firstCallResolver = domNodePointer.getNamespaceResolver();
    NamespaceResolver secondCallResolver = domNodePointer.getNamespaceResolver();
    assertSame(firstCallResolver, secondCallResolver, "Should return the same NamespaceResolver instance on subsequent calls");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        // Assuming Node and Locale are interfaces or can be mocked
        domNodePointer = new DOMNodePointer(node, locale);
        QName qName = new QName("testPrefix", "testLocalName");
        NodeIterator result = domNodePointer.attributeIterator(qName);
        assertNotNull(result, "The result should not be null");
        assertTrue(result instanceof DOMAttributeIterator, "The result should be an instance of DOMAttributeIterator");
        // Verify that the constructor of DOMAttributeIterator was called with the correct parameters
        DOMAttributeIterator expectedIterator = new DOMAttributeIterator(domNodePointer, qName);
        assertEquals(expectedIterator.getClass(), result.getClass(), "Expected DOMAttributeIterator class type");
        // Additional checks can be added here if DOMAttributeIterator's behavior is more complex and needs to be verified
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode() throws Exception {
        domNodePointer = new DOMNodePointer(node, null);
        // Setup for ELEMENT_NODE
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ns", result.getPrefix());
        assertEquals("ln", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_dNJp0() throws Exception {
    Node node = mock(Node.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    NodeIterator result = domNodePointer.namespaceIterator();
    assertNotNull(result);
    assertTrue(result instanceof DOMNamespaceIterator);
}
}