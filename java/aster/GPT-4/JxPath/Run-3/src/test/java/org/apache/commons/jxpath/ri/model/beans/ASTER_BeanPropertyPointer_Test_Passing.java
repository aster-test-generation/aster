/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
private static final Object UNINITIALIZED = new Object();
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
@Mock
    private PropertyDescriptor propertyDescriptor;
@InjectMocks
    private BeanPropertyPointer beanPropertyPointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfoMock;
@Mock
    private PropertyDescriptor propertyDescriptorMock;
@Mock
    private DOMNodePointer parentNode;
@Mock
    private JXPathBasicBeanInfo beanInfo;
@Mock
    private IndexedPropertyDescriptor indexedPropertyDescriptor;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathContext context;
@Mock
    private NodePointer immediateNodePointer;
private static final String PROPERTY_NAME = "testProperty";
@Mock
    private DOMNodePointer mockParent;
@Mock
    private JXPathBasicBeanInfo mockBeanInfo;
@Mock
    private String propertyName;
    private Object baseValue = UNINITIALIZED;
    private transient PropertyDescriptor[] propertyDescriptors;
    private transient String[] names;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ImmediateNodeIsNull_1() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        // Arrange
        when(beanPropertyPointer.getImmediateNode()).thenReturn(null);
        // Act
        NodePointer result = beanPropertyPointer.createPath(context);
        // Assert
        assertSame(beanPropertyPointer, result, "The result should be the same instance as 'beanPropertyPointer'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ImmediateNodeIsNull_2() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        // Arrange
        when(beanPropertyPointer.getImmediateNode()).thenReturn(null);
        // Act
        NodePointer result = beanPropertyPointer.createPath(context);
        // Assert
        assertNull(beanPropertyPointer.getImmediateNode(), "Immediate node should still be null after path creation");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ImmediateNodeIsNotNull_1() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        // Arrange
        when(beanPropertyPointer.getImmediateNode()).thenReturn(immediateNodePointer);
        // Act
        NodePointer result = beanPropertyPointer.createPath(context);
        // Assert
        assertSame(beanPropertyPointer, result, "The result should be the same instance as 'beanPropertyPointer'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ImmediateNodeIsNotNull_2() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        // Arrange
        when(beanPropertyPointer.getImmediateNode()).thenReturn(immediateNodePointer);
        // Act
        NodePointer result = beanPropertyPointer.createPath(context);
        // Assert
        assertNotNull(beanPropertyPointer.getImmediateNode(), "Immediate node should not be null after path creation");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        // Act
        beanPropertyPointer.setPropertyName(PROPERTY_NAME);
        // Assert
        assertEquals(PROPERTY_NAME, beanPropertyPointer.getPropertyName(), "The property name should match the set value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        // Act
        boolean result = beanPropertyPointer.isContainer();
        // Assert
        assertTrue(result, "isContainer should always return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WithDifferentIndex_UpdatesIndex() throws Exception {
        // Initialize the BeanPropertyPointer with mocked DOMNodePointer and JXPathBasicBeanInfo
        beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
        // Arrange
        int initialIndex = 0;
        int newIndex = 5;
        // Act
        beanPropertyPointer.setIndex(initialIndex); // Set to initial index
        beanPropertyPointer.setIndex(newIndex); // Change to new index
        // Assert
        assertEquals(newIndex, beanPropertyPointer.getIndex(), "Index should be updated to new value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WithSameIndex_DoesNotUpdateValue() throws Exception {
        // Initialize the BeanPropertyPointer with mocked DOMNodePointer and JXPathBasicBeanInfo
        beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
        // Arrange
        int initialIndex = 0;
        // Act
        beanPropertyPointer.setIndex(initialIndex); // Set to initial index
        beanPropertyPointer.setIndex(initialIndex); // Set to same index again
        // Assert
        assertSame(UNINITIALIZED, beanPropertyPointer.getValue(), "Value should remain uninitialized when index is unchanged");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_InitiallyNull_ReturnsFromBeanInfo() throws Exception {
        // Setup the mocks and the class under test
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{});
        // Arrange
        PropertyDescriptor[] expectedDescriptors = new PropertyDescriptor[]{
            new PropertyDescriptor("property1", BeanPropertyPointer.class),
            new PropertyDescriptor("property2", BeanPropertyPointer.class)
        };
        when(beanInfo.getPropertyDescriptors()).thenReturn(expectedDescriptors);
        // Act
        PropertyDescriptor[] result = beanPropertyPointer.getPropertyDescriptors();
        // Assert
        assertArrayEquals(expectedDescriptors, result, "The returned property descriptors should match the expected ones.");
        verify(beanInfo, times(1)).getPropertyDescriptors();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_Cached_ReturnsCachedValue() throws Exception {
        // Setup the mocks and the class under test
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{});
        // Arrange
        PropertyDescriptor[] expectedDescriptors = new PropertyDescriptor[]{
            new PropertyDescriptor("property1", BeanPropertyPointer.class)
        };
        when(beanInfo.getPropertyDescriptors()).thenReturn(expectedDescriptors);
        // Call once to set the cache
        beanPropertyPointer.getPropertyDescriptors();
        // Act
        PropertyDescriptor[] result = beanPropertyPointer.getPropertyDescriptors();
        // Assert
        assertArrayEquals(expectedDescriptors, result, "The returned property descriptors should be retrieved from cache.");
        verify(beanInfo, times(1)).getPropertyDescriptors(); // Should still be called only once because of caching
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() throws Exception {
        // Mocking the PropertyDescriptor array that will be returned by the beanInfo object
        PropertyDescriptor pd1 = new PropertyDescriptor("propertyOne", BeanPropertyPointer.class);
        PropertyDescriptor pd2 = new PropertyDescriptor("propertyTwo", BeanPropertyPointer.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[]{pd1, pd2};
        when(jXPathBasicBeanInfo.getPropertyDescriptors()).thenReturn(pds);
        // Call the method under test
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        // Assertions to check the output
        // Verify that getPropertyDescriptors is called exactly once
        verify(jXPathBasicBeanInfo, times(1)).getPropertyDescriptors();
        assertNotNull(propertyNames, "The returned array should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() throws Exception {
        // Mocking the PropertyDescriptor array that will be returned by the beanInfo object
        PropertyDescriptor pd1 = new PropertyDescriptor("propertyOne", BeanPropertyPointer.class);
        PropertyDescriptor pd2 = new PropertyDescriptor("propertyTwo", BeanPropertyPointer.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[]{pd1, pd2};
        when(jXPathBasicBeanInfo.getPropertyDescriptors()).thenReturn(pds);
        // Call the method under test
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        // Assertions to check the output
        // Verify that getPropertyDescriptors is called exactly once
        verify(jXPathBasicBeanInfo, times(1)).getPropertyDescriptors();
        assertEquals(2, propertyNames.length, "The length of the properties array should be 2");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_3() throws Exception {
        // Mocking the PropertyDescriptor array that will be returned by the beanInfo object
        PropertyDescriptor pd1 = new PropertyDescriptor("propertyOne", BeanPropertyPointer.class);
        PropertyDescriptor pd2 = new PropertyDescriptor("propertyTwo", BeanPropertyPointer.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[]{pd1, pd2};
        when(jXPathBasicBeanInfo.getPropertyDescriptors()).thenReturn(pds);
        // Call the method under test
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        // Assertions to check the output
        // Verify that getPropertyDescriptors is called exactly once
        verify(jXPathBasicBeanInfo, times(1)).getPropertyDescriptors();
        assertEquals("propertyOne", propertyNames[0], "The first property name should be 'propertyOne'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_4() throws Exception {
        // Mocking the PropertyDescriptor array that will be returned by the beanInfo object
        PropertyDescriptor pd1 = new PropertyDescriptor("propertyOne", BeanPropertyPointer.class);
        PropertyDescriptor pd2 = new PropertyDescriptor("propertyTwo", BeanPropertyPointer.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[]{pd1, pd2};
        when(jXPathBasicBeanInfo.getPropertyDescriptors()).thenReturn(pds);
        // Call the method under test
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        // Assertions to check the output
        // Verify that getPropertyDescriptors is called exactly once
        verify(jXPathBasicBeanInfo, times(1)).getPropertyDescriptors();
        assertEquals("propertyTwo", propertyNames[1], "The second property name should be 'propertyTwo'");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_WithNullPropertyDescriptor_ThrowsException_UusU0_1() {
    when(beanPropertyPointer.getParent()).thenReturn(domNodePointer);
    when(beanPropertyPointer.asPath()).thenReturn("testPath");
    Object newValue = new Object();
    Exception exception = assertThrows(JXPathInvalidAccessException.class, () -> {
        beanPropertyPointer.setValue(newValue);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyName_WhenPropertyDescriptorIsNull_ReturnsAsterisk_mrRe0() throws Exception {
    when(domNodePointerMock.getNode()).thenReturn(null); // Assuming getNode() is a method that can be mocked to simulate the scenario
    beanPropertyPointer = new BeanPropertyPointer(domNodePointerMock, jXPathBasicBeanInfoMock);
    String result = beanPropertyPointer.getPropertyName();
    assertEquals("*", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_WithIndexedPropertyDescriptor_ShouldReturnTrue_QFdy0() throws Exception {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
    IndexedPropertyDescriptor indexedPropertyDescriptor = mock(IndexedPropertyDescriptor.class);
    PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[]{indexedPropertyDescriptor};
    when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
    boolean result = beanPropertyPointer.isCollection();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_WithNonIndexedPropertyDescriptorAndHintMinusOne_ShouldReturnFalse_dqLp0() throws Exception {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
    PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[]{mock(PropertyDescriptor.class)};
    when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
    when(ValueUtils.getCollectionHint(propertyDescriptors[0].getPropertyType())).thenReturn(-1);
    boolean result = beanPropertyPointer.isCollection();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_WithNonIndexedPropertyDescriptorAndHintOne_ShouldReturnTrue_sctC0() throws Exception {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
    PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[1];
    PropertyDescriptor propertyDescriptor = mock(PropertyDescriptor.class);
    propertyDescriptors[0] = propertyDescriptor;
    when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptors);
    when(ValueUtils.getCollectionHint(propertyDescriptor.getPropertyType())).thenReturn(1);
    boolean result = beanPropertyPointer.isCollection();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWhenImmediateNodeIsNotNull_vkiq1_rrfP0_1() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Corrected to use a mock of org.w3c.dom.Node
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
    JXPathContext context = JXPathContext.newContext(new Object()); // Assuming this creates a valid context
    NodePointer result = beanPropertyPointer.createPath(context); // Assuming createPath is a valid method that returns a NodePointer
    assertNotNull(result, "NodePointer should not be null after createPath");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWhenImmediateNodeIsNotNull_vkiq1_rrfP0_2() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Corrected to use a mock of org.w3c.dom.Node
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
    JXPathContext context = JXPathContext.newContext(new Object()); // Assuming this creates a valid context
    NodePointer result = beanPropertyPointer.createPath(context); // Assuming createPath is a valid method that returns a NodePointer
    assertSame(beanPropertyPointer, result, "Returned NodePointer should be the same as the one called");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_SingleElement_JTyP0() throws Exception {
    beanPropertyPointer = new BeanPropertyPointer(parentNode, beanInfo);
    beanPropertyPointer.remove();
    verify(parentNode, never()).setValue(any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexNoChange_KRte0_jWHE0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Corrected to use a mock Node from the org.w3c.dom package
    Locale locale = new Locale("en", "US");
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
    pointer.setIndex(0); // Set initial index
    pointer.setIndex(0); // Set same index
    assertEquals(0, pointer.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexToWholeCollection_iTlD2_MKKA0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Using a mock object for Node
    Locale locale = new Locale("en", "US");
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
    pointer.setIndex(BeanPropertyPointer.WHOLE_COLLECTION);
    assertEquals(BeanPropertyPointer.WHOLE_COLLECTION, pointer.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexFromWholeCollectionToNonZero_tpJo4_nmSZ0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Using a mock object for Node
    Locale locale = new Locale("en", "US");
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
    pointer.setIndex(BeanPropertyPointer.WHOLE_COLLECTION);
    pointer.setIndex(1);
    assertEquals(1, pointer.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WithNullPropertyDescriptor_ttpX0() throws Exception {
    when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(null);
    int length = beanPropertyPointer.getPropertyCount();
    assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WithIndexedPropertyDescriptor_tvbc0() throws Exception {
    when(parentNode.getNode()).thenReturn(new Object());
    when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{indexedPropertyDescriptor});
    when(ValueUtils.getIndexedPropertyLength(any(), eq(indexedPropertyDescriptor))).thenReturn(5);
    int length = beanPropertyPointer.getLength();
    assertEquals(5, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WithRegularPropertyDescriptor_pior0() throws Exception {
    when(parentNode.getNode()).thenReturn(new Object());
    when(beanPropertyPointer.getPropertyCount()).thenReturn(1);
    int length = beanPropertyPointer.getPropertyCount();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyCount_WhenUninitializedAndPropertyDescriptorIsNull_JWBN0() throws Exception {
    beanPropertyPointer = new BeanPropertyPointer(domNodePointerMock, jXPathBasicBeanInfoMock);
    when(jXPathBasicBeanInfoMock.isAtomic()).thenReturn(false);
    when(jXPathBasicBeanInfoMock.getPropertyDescriptors()).thenReturn(null);
    int result = beanPropertyPointer.getPropertyCount();
    assertEquals(0, result, "Expected property count to be 0 when PropertyDescriptors are null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_WhenUninitializedAndPropertyDescriptorIsNotNull_FPBF0() throws Exception {
    beanPropertyPointer = new BeanPropertyPointer(domNodePointerMock, jXPathBasicBeanInfoMock);
    PropertyDescriptor propertyDescriptorMock = mock(PropertyDescriptor.class);
    when(jXPathBasicBeanInfoMock.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{propertyDescriptorMock});
    Object expectedValue = new Object();
    when(ValueUtils.getValue(any(), eq(propertyDescriptorMock))).thenReturn(expectedValue);
    Object result = beanPropertyPointer.getBaseValue();
    assertSame(expectedValue, result, "Expected base value to be the value returned from ValueUtils");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_WhenAlreadyInitialized_oUrV0() throws Exception {
    beanPropertyPointer = new BeanPropertyPointer(domNodePointerMock, jXPathBasicBeanInfoMock);
    PropertyDescriptor[] propertyDescriptors = new PropertyDescriptor[]{propertyDescriptorMock};
    when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(propertyDescriptors);
    Object initializedValue = new Object();
    Field baseValueField = BeanPropertyPointer.class.getDeclaredField("baseValue");
    baseValueField.setAccessible(true);
    baseValueField.set(beanPropertyPointer, initializedValue);
    Object result = beanPropertyPointer.getBaseValue();
    assertSame(initializedValue, result, "Expected base value to be the already initialized value");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyIndex_SameIndexNoChange_VjKB1_YQdc0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Using Mockito to mock the Node
    Locale locale = new Locale("en", "US");
    QName qName = new QName("namespace", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPropertyPointer.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
    beanPropertyPointer.setPropertyIndex(2); // Set initial index
    beanPropertyPointer.setPropertyIndex(2); // Set same index
    assertEquals(2, beanPropertyPointer.getPropertyIndex(), "Index should remain unchanged at 2");
}
}