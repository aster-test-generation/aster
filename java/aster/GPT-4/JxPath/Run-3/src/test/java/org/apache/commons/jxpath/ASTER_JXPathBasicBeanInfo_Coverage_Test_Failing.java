/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withDynamic_zjoY1_fid1() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withAtomic_bQCe2_fid1() {
        Class<?> clazz = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, false);
        String result = beanInfo.toString();
        assertTrue(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_checkDynamicFlag_yjdm10_fid1() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_checkAtomicFlag_Ktnx11_fid1() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, false);
        String result = beanInfo.toString();
        assertTrue(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withBothDynamicAndAtomic_uswq15() {
        Class<?> clazz = Double.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(clazz, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic"));
        assertTrue(result.contains(", atomic"));
    }
}