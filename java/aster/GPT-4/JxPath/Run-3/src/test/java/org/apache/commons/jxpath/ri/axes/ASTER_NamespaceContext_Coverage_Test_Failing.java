/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceContext_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTestWildcard_WigJ2() {
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest.getNodeName()).thenReturn(testName);
        when(nodeTest.isWildcard()).thenReturn(true);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.namespaceIterator()).thenReturn(mock(NodeIterator.class));
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        assertTrue(namespaceContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTestNonWildcard_hfnx3() {
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest.getNodeName()).thenReturn(testName);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(nodeTest.isWildcard()).thenReturn(false);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.namespacePointer(testName.getName())).thenReturn(mock(NodePointer.class));
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        assertTrue(namespaceContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorNull_LSRM4() {
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest.getNodeName()).thenReturn(testName);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(nodeTest.isWildcard()).thenReturn(true);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.namespaceIterator()).thenReturn(null);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        assertFalse(namespaceContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorCannotSetPosition_VQQc5() {
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest.getNodeName()).thenReturn(testName);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(nodeTest.isWildcard()).thenReturn(true);
        NodeIterator iterator = mock(NodeIterator.class);
        when(iterator.setPosition(anyInt())).thenReturn(false);
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        assertFalse(namespaceContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SuccessfulIteration_DKtc6() {
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest.getNodeName()).thenReturn(testName);
        when(nodeTest instanceof NodeNameTest).thenReturn(true);
        when(nodeTest.isWildcard()).thenReturn(true);
        NodeIterator iterator = mock(NodeIterator.class);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(mock(NodePointer.class));
        NodePointer currentNodePointer = mock(NodePointer.class);
        when(currentNodePointer.namespaceIterator()).thenReturn(iterator);
        SelfContext parentContext = mock(SelfContext.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, nodeTest);
        assertTrue(namespaceContext.nextNode());
    }
}