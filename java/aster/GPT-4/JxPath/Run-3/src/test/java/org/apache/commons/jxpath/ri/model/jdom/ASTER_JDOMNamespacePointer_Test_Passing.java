/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
@Mock
    private DOMNodePointer mockParent;
@InjectMocks
    private JDOMNamespacePointer jdomNamespacePointer;
private String prefix = "testPrefix";
@Mock
    private DOMNodePointer parentNode;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private DOMNodePointer domNodePointerMock;
private final String namespaceURI = "http://example.com/test";
private static final String PREFIX = "testPrefix";
private static final String PARENT_PATH = "/parent/path";
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer domNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        // Initialize JDOMNamespacePointer with a mocked DOMNodePointer
        jdomNamespacePointer = new JDOMNamespacePointer(mockParent, "prefix", "namespaceURI");
        // Arrange
        NodePointer mockPointer1 = Mockito.mock(NodePointer.class);
        NodePointer mockPointer2 = Mockito.mock(NodePointer.class);
        // Act
        int result = jdomNamespacePointer.compareChildNodePointers(mockPointer1, mockPointer2);
        // Assert
        assertEquals(0, result, "The compareChildNodePointers method should return 0 for any input.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        assertTrue(jdomNamespacePointer.equals(jdomNamespacePointer), "Object should be equal to itself.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentType() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        Object differentObject = new Object();
        assertFalse(jdomNamespacePointer.equals(differentObject), "Should return false when comparing with a different type.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        assertFalse(jdomNamespacePointer.equals(null), "Should return false when comparing with null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SamePrefix() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        JDOMNamespacePointer anotherPointer = new JDOMNamespacePointer(parentNode, prefix);
        assertTrue(jdomNamespacePointer.equals(anotherPointer), "Should return true when prefixes are the same.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentPrefix() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        JDOMNamespacePointer anotherPointer = new JDOMNamespacePointer(parentNode, "differentPrefix");
        assertFalse(jdomNamespacePointer.equals(anotherPointer), "Should return false when prefixes are different.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ThrowsUnsupportedOperationException() {
        jdomNamespacePointer = new JDOMNamespacePointer(mockDomNodePointer, "prefix");
        assertThrows(UnsupportedOperationException.class, () -> jdomNamespacePointer.setValue("newValue"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        jdomNamespacePointer = new JDOMNamespacePointer(mockParent, "prefix");
        // Act
        boolean result = jdomNamespacePointer.isCollection();
        // Assert
        assertFalse(result, "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(domNodePointerMock, prefix, namespaceURI);
        // Setup
        when(jdomNamespacePointer.getNamespaceURI()).thenReturn(namespaceURI);
        // Execution
        Object result = jdomNamespacePointer.getImmediateNode();
        // Verification
        assertEquals(namespaceURI, result, "The returned namespace URI should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(mockParent, prefix);
        // Setup the expected value
        int expectedHashCode = prefix.hashCode();
        // Call the method under test
        int actualHashCode = jdomNamespacePointer.hashCode();
        // Assert the result
        assertEquals(expectedHashCode, actualHashCode, "The hash code should match the hash code of the prefix string.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        QName result = jdomNamespacePointer.getName();
        assertEquals(prefix, result.getName(), "The QName name should match the prefix provided");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNamespaceURINotNull() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix, namespaceURI);
        // Setup
        when(parentNode.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        // Execution
        String result = jdomNamespacePointer.getNamespaceURI();
        // Verification
        assertEquals(namespaceURI, result, "The namespace URI should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNamespaceURINull() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix, namespaceURI);
        // Setup
        jdomNamespacePointer = new JDOMNamespacePointer(parentNode, prefix);
        when(parentNode.getNamespaceURI(prefix)).thenReturn(namespaceURI);
        // Execution
        String result = jdomNamespacePointer.getNamespaceURI();
        // Verification
        assertEquals(namespaceURI, result, "The namespace URI should be fetched from the parent when initially null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithParent() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parent, PREFIX);
        when(parent.asPath()).thenReturn(PARENT_PATH);
        String expectedPath = PARENT_PATH + "/namespace::" + PREFIX;
        String actualPath = jdomNamespacePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithoutTrailingSlashInParentPath() throws Exception {
        jdomNamespacePointer = new JDOMNamespacePointer(parent, PREFIX);
        when(parent.asPath()).thenReturn(PARENT_PATH);
        when(parent.asPath()).thenReturn(PARENT_PATH.substring(0, PARENT_PATH.length() - 1)); // Remove trailing slash
        String expectedPath = PARENT_PATH + "namespace::" + PREFIX;
        String actualPath = jdomNamespacePointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_TMDb2() {
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        String result = jdomNamespacePointer.asPath();
        assertEquals("namespace::prefix", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking the DOMNodePointer as it is required by JDOMNamespacePointer
        DOMNodePointer mockedParent = org.mockito.Mockito.mock(DOMNodePointer.class);
        // Initialize JDOMNamespacePointer with mocked DOMNodePointer
        jdomNamespacePointer = new JDOMNamespacePointer(mockedParent, "prefix");
        // Since getLength method returns a constant value of 1, we expect 1
        assertEquals(1, jdomNamespacePointer.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Initialize JDOMNamespacePointer with a mock DOMNodePointer
        jdomNamespacePointer = new JDOMNamespacePointer(mockParent, "prefix");
        // Since getBaseValue() is expected to return null (as per current implementation),
        // we assert that the returned value is indeed null.
        assertNull(jdomNamespacePointer.getBaseValue(), "The base value should be null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        // Initialize JDOMNamespacePointer with a mock DOMNodePointer
        jdomNamespacePointer = new JDOMNamespacePointer(domNodePointer, "prefix");
        // Act
        boolean result = jdomNamespacePointer.isLeaf();
        // Assert
        assertTrue(result, "isLeaf should return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueReturnsNull_PCrJ0_oWZo0() {
    Locale locale = new Locale("en", "US");
    String id = "testId"; // Added to match the constructor that requires an ID.
    JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(domNodePointer, "prefix");
    Object result = jdomNamespacePointer.getBaseValue();
    assertNull(result);
}
}