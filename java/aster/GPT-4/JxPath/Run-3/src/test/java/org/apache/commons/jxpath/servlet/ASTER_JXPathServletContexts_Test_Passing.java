/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
@Mock
    private static JXPathContextFactory factory;
@Mock
    private ServletContext servletContext;
@Mock
    private JXPathContext jXPathContext;
@InjectMocks
    private JXPathServletContexts jxpathservletcontexts;
private HttpSession httpsession;
private ServletContext servletcontext;
private PageContext pageContext;
private HttpSession httpSession;
@Mock
    private ServletRequest request;
@Mock
    private JXPathContext jxPathContext;
@Mock
    private ServletRequestAndContext servletRequestAndContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext() throws Exception {
        when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
        // Arrange
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        // Act
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        // Assert
        verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
        verify(factory, never()).newContext(null, servletContext);
        verify(jXPathContext, never()).setVariables(any());
        verify(servletContext, never()).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
        assertNotNull(result);
        assertEquals(jXPathContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_NewContext_PDTS0() {
        ServletContext servletContext = Mockito.mock(ServletContext.class);
        Mockito.when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        Mockito.verify(servletContext).setAttribute(Mockito.eq(Constants.JXPATH_CONTEXT), Mockito.any(JXPathContext.class));
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_fyit1() {
        ServletContext servletContext = Mockito.mock(ServletContext.class);
        JXPathContext existingContext = Mockito.mock(JXPathContext.class);
        Mockito.when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        Mockito.verify(servletContext, Mockito.never()).setAttribute(Mockito.eq(Constants.JXPATH_CONTEXT), Mockito.any(JXPathContext.class));
        assertSame(existingContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_NewContext() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext mockParentContext = mock(JXPathContext.class);
        JXPathContext mockNewContext = mock(JXPathContext.class);
        when(JXPathServletContexts.getApplicationContext(servletcontext)).thenReturn(mockParentContext);
        when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mockNewContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result, "Context should not be null");
        assertEquals(mockNewContext, result, "Expected new context to be returned");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result, "Context should not be null");
        assertEquals(existingContext, result, "Expected existing context to be returned");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_WaPx1() {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        verify(session, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);
        assertEquals(existingContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContextCreated() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(pageContext.getServletContext()).thenReturn(servletContext);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext parentContext = mock(JXPathContext.class);
        JXPathContext newContext = mock(JXPathContext.class);
        when(factory.newContext(any(), any())).thenReturn(newContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);
        assertEquals(newContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContextReturned() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);
        assertEquals(existingContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_vezr1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);
        assertEquals(expectedContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NewContext_hiox0() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpSession session = mock(HttpSession.class);
        when(httpRequest.getSession(false)).thenReturn(session);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingValidContext_midG1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(request, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertSame(result, existingContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_OMbS2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
        assertNotSame(result, existingContext);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NoSession_QdQX3() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        when(httpRequest.getSession(false)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_1() throws Exception {
        when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
        // Arrange
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        // Act
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        // Assert
        verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
        verify(factory, never()).newContext(null, servletContext);
        verify(jXPathContext, never()).setVariables(any());
        verify(servletContext, never()).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext_2() throws Exception {
        when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
        // Arrange
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        // Act
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        // Assert
        verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
        verify(factory, never()).newContext(null, servletContext);
        verify(jXPathContext, never()).setVariables(any());
        verify(servletContext, never()).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
        assertEquals(jXPathContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_NewContext_1() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext mockParentContext = mock(JXPathContext.class);
        JXPathContext mockNewContext = mock(JXPathContext.class);
        when(JXPathServletContexts.getApplicationContext(servletcontext)).thenReturn(mockParentContext);
        when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mockNewContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result, "Context should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_NewContext_2() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext mockParentContext = mock(JXPathContext.class);
        JXPathContext mockNewContext = mock(JXPathContext.class);
        when(JXPathServletContexts.getApplicationContext(servletcontext)).thenReturn(mockParentContext);
        when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mockNewContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertEquals(mockNewContext, result, "Expected new context to be returned");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_1() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result, "Context should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_2() throws Exception {
        httpsession = mock(HttpSession.class);
        servletcontext = mock(ServletContext.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(httpsession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getSessionContext(httpsession, servletcontext);
        // Verify
        verify(httpsession, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertEquals(existingContext, result, "Expected existing context to be returned");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_WaPx1_1() {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        verify(session, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionContext_ExistingContext_WaPx1_2() {
        HttpSession session = mock(HttpSession.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
        verify(session, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertEquals(existingContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContextCreated_1() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(pageContext.getServletContext()).thenReturn(servletContext);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext parentContext = mock(JXPathContext.class);
        JXPathContext newContext = mock(JXPathContext.class);
        when(factory.newContext(any(), any())).thenReturn(newContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_NewContextCreated_2() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        when(pageContext.getServletContext()).thenReturn(servletContext);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext parentContext = mock(JXPathContext.class);
        JXPathContext newContext = mock(JXPathContext.class);
        when(factory.newContext(any(), any())).thenReturn(newContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertEquals(newContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContextReturned_1() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContextReturned_2() throws Exception {
        pageContext = mock(PageContext.class);
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        // Setup
        JXPathContext existingContext = mock(JXPathContext.class);
        when(pageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getPageContext(pageContext);
        // Verify
        verify(pageContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertEquals(existingContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_vezr1_1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_vezr1_2() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertEquals(expectedContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NewContext_hiox0_1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpSession session = mock(HttpSession.class);
        when(httpRequest.getSession(false)).thenReturn(session);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NewContext_hiox0_2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpSession session = mock(HttpSession.class);
        when(httpRequest.getSession(false)).thenReturn(session);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_OMbS2_1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_OMbS2_2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotSame(result, existingContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_OMbS2_3() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NoSession_QdQX3_1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        when(httpRequest.getSession(false)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NoSession_QdQX3_2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        when(httpRequest.getSession(false)).thenReturn(null);
        JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
        assertEquals(result.getContextBean(), new ServletRequestAndContext(request, servletContext));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetApplicationContext_NewContext_Wmjj0_1() throws Exception {
    when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
    when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    doNothing().when(jXPathContext).setVariables(any());
    JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
    verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
    verify(factory).newContext(null, servletContext);
    verify(jXPathContext).setVariables(any());
    verify(servletContext).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetApplicationContext_NewContext_Wmjj0_2() throws Exception {
    when(factory.newContext(null, servletContext)).thenReturn(jXPathContext);
    when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    doNothing().when(jXPathContext).setVariables(any());
    JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
    verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
    verify(factory).newContext(null, servletContext);
    verify(jXPathContext).setVariables(any());
    verify(servletContext).setAttribute(Constants.JXPATH_CONTEXT, jXPathContext);
    assertEquals(jXPathContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_NewContext_iMgr0_ewoP0_1() throws NoSuchFieldException, IllegalAccessException {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    JXPathContext expectedContext = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Field factoryField = JXPathServletContexts.class.getDeclaredField("factory");
    factoryField.setAccessible(true);
    JXPathContextFactory factoryMock = mock(JXPathContextFactory.class);
    factoryField.set(null, factoryMock);
    when(JXPathServletContexts.getApplicationContext(servletContext)).thenReturn(parentContext);
    when(factoryMock.newContext(any(JXPathContext.class), any(ServletRequestAndContext.class)))
        .thenReturn(expectedContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_NewContext_iMgr0_ewoP0_2() throws NoSuchFieldException, IllegalAccessException {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    JXPathContext expectedContext = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Field factoryField = JXPathServletContexts.class.getDeclaredField("factory");
    factoryField.setAccessible(true);
    JXPathContextFactory factoryMock = mock(JXPathContextFactory.class);
    factoryField.set(null, factoryMock);
    when(JXPathServletContexts.getApplicationContext(servletContext)).thenReturn(parentContext);
    when(factoryMock.newContext(any(JXPathContext.class), any(ServletRequestAndContext.class)))
        .thenReturn(expectedContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertEquals(expectedContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPageContext_NewContext_jDOa0_CZlb0_1() {
    PageContext mockPageContext = mock(PageContext.class);
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    ServletContext mockServletContext = mock(ServletContext.class);
    JXPathContext mockParentContext = mock(JXPathContext.class);
    JXPathContext mockContext = mock(JXPathContext.class);
    when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(mockPageContext.getRequest()).thenReturn(mockRequest);
    when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
    when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
    JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
    verify(mockPageContext).setAttribute(Constants.JXPATH_CONTEXT, mockContext);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPageContext_NewContext_jDOa0_CZlb0_2() {
    PageContext mockPageContext = mock(PageContext.class);
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    ServletContext mockServletContext = mock(ServletContext.class);
    JXPathContext mockParentContext = mock(JXPathContext.class);
    JXPathContext mockContext = mock(JXPathContext.class);
    when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(mockPageContext.getRequest()).thenReturn(mockRequest);
    when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
    when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
    JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
    verify(mockPageContext).setAttribute(Constants.JXPATH_CONTEXT, mockContext);
    assertEquals(mockContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRequestContext_ExistingValidContext_pTBI0() {
    MockitoAnnotations.openMocks(this);
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpSession httpSession = mock(HttpSession.class);
    when(httpServletRequest.getSession(false)).thenReturn(httpSession);
    when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jxPathContext);
    when(jxPathContext.getContextBean()).thenReturn(servletRequestAndContext);
    when(servletRequestAndContext.getServletRequest()).thenReturn(request);
    JXPathContext result = JXPathServletContexts.getRequestContext(request, servletContext);
    verify(request, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertSame(jxPathContext, result, "Should return the existing context");
}
}