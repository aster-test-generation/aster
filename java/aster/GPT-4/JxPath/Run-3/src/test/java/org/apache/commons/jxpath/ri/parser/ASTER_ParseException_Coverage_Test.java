/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Coverage_Test {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageWithSpecialConstructorFalse_iDQl0() {
        ParseException exception = new ParseException("Test message");
        assertEquals("Test message", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithFormFeed_njuo0() {
        ParseException parserException = new ParseException();
        String input = "\f";
        String expected = "\\f";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithCarriageReturn_yUZR1() {
        ParseException parserException = new ParseException();
        String input = "\r";
        String expected = "\\r";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithSingleQuote_OmOc2() {
        ParseException parserException = new ParseException();
        String input = "\'";
        String expected = "\\\'";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithNonPrintableChar_RhbB3() {
        ParseException parserException = new ParseException();
        String input = "\u0001"; // ASCII value 1, a non-printable character
        String expected = "\\u0001";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithExtendedChar_CfNN4() {
        ParseException parserException = new ParseException();
        String input = "\u00A0"; // Non-breaking space, outside the printable ASCII range
        String expected = "\\u00a0";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithMultipleSpecialChars_BeJU5() {
        ParseException parserException = new ParseException();
        String input = "Hello\fWorld\r!";
        String expected = "Hello\\fWorld\\r!";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithEmptyString_AbNw6() {
        ParseException parserException = new ParseException();
        String input = "";
        String expected = "";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithNullCharacter_hEuh7() {
        ParseException parserException = new ParseException();
        String input = "\0";
        String expected = "";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithAllEscapableCharacters_cwvn8() {
        ParseException parserException = new ParseException();
        String input = "\b\t\n\f\r\"\'\\";
        String expected = "\\b\\t\\n\\f\\r\\\"\\\'\\\\";
        assertEquals(expected, parserException.add_escapes(input));
    }
}