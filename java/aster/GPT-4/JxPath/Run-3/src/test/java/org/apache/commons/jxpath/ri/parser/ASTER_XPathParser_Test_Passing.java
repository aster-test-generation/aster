/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import java.util.ArrayList;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
private final java.util.Vector jj_expentries = new java.util.Vector();
@Mock
    private Token mockToken;
@Mock
    private Compiler compiler;
@InjectMocks
    private XPathParser xpathParser;
@Mock
    private ParseException parseException;
@Mock
  final private int[] jj_la1 = new int[39];
@Mock
    private XPathParserTokenManager tokenManager;
@Mock
    private XPathParserTokenManager tokenManagerMock;
private int[] jj_expentry;
@Mock
    private Token jj_nt;
private final static int AND = 1;
@Mock
    private Token nextToken;
@Mock
    private SimpleCharStream stream;
@Mock
private static int[] jj_la1_1 = new int[39];
@Mock
    private SimpleCharStream jj_input_stream;
private int jj_kind = -1;
@Mock
    private XPathParserTokenManager token_source;
private int jj_endpos;
private static int[] jj_la1_2 = new int[39];
private XPathParserTokenManager mockTokenManager;
@Mock
    private Token token;
        // This test is more about demonstrating the structure as we can't directly check private fields without a getter.
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_PKoq11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_vhqj5() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_eFAN10() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_GLvs11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_AqoH11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.InputStreamReader(System.in));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_VlJu6() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_ioEV7() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_WvIh8() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_OtKy9() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("input".getBytes());
        XPathParser parser = new XPathParser(inputStream);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_voRZ10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        XPathParser parser = new XPathParser(reader);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_cSqj11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("yet another test"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_tEjq4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_AMAU5() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_CXRx8() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_GtqD9() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Nnxu10() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_DgAJ11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_vTEq3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_zVhV4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_PBeJ5() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_oXAB6() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_bfVg8() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_qiml9() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_XPzU10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_zfkZ11() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_ZJHx3() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_inAP4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_UxEK5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_ugUk9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_AUnh10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_JWWm11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_KZtT4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_kasG10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_SMQq0() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_zPtX3() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream charStream = new SimpleCharStream(stream);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_Flpj5() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_nIhM6() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_sydW7() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_GGBr8() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_PDOg9() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream charStream = new SimpleCharStream(stream);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_sNWf10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_uQqD11() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_uzhH3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_RUKh4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_qLZm8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_dwoD9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_ppmI8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_SRpm9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_EljH10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_jdBn11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_ZYwH1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input data"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_mvoc4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input data"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_hSIy5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input data"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_BnuL5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_Nhpa3() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream("test input".getBytes());
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_eTFS5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_wBBj6() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3});
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_RvIN7() throws Exception {
    java.io.Reader reader = new java.io.CharArrayReader(new char[]{'a', 'b', 'c'});
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_EzQx8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XRrZ9() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_CYdH10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("abcdefghijklmnopqrstuvwxyz");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_AOni11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("abcdefghijklmnopqrstuvwxyz"), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_OhbV2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_yyMU3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0x41, 0x42}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_vXOM4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_oqTO5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0x43, 0x44, 0x45}), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_jstB9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0x01, 0x02, 0x03}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_yWnI11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0x10, 0x20}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_qhis5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_zZID9() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertEquals("Parse error", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_pOVa10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertEquals("Parse error", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RzLR11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Parse error", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_FrFx4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_rNeW6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_heiP7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_kCjw11() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithVariableReference_gppZ0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("variable");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertEquals("variable", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprWithFunctionCall_DrJK1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("function()");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.PrimaryExpr();
        assertEquals("functionResult", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualityExprReturnsCorrectObject_LOkC0() throws ParseException {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(inputStream));
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.EqualityExpr();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnaryExprWithSlash_mPPP0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("/");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.UnaryExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExpr_QBOi0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("some input data that makes sense for the test");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.RelationalExpr();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAndExprSingleEquality_FrAR0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("a = b");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.AndExpr();
        assertEquals("Expected single equality expression", "a = b", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAndExprNoAnd_OJlH2() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("a = b or c = d");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.AndExpr();
        assertEquals("Expected single equality expression without AND", "a = b", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicate_xjSW0() throws ParseException {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        XPathParser parser = new XPathParser(inputStream);
        Object result = parser.Predicate();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameSingleNCName_ZLch0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("NCName");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);
        assertEquals("Expected QName with single NCName", "NCName", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWildcardNameWithNamespace_NxJo1() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("NCName1:NCName2");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.WildcardName();
        assertNotNull(result);
        assertEquals("Expected QName with namespace and local part", "NCName1:NCName2", result.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSubtractiveExprSingleMinusOperation_Xggz0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("5 - 3");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.SubtractiveExpr();
    assertEquals(2, result); // Assuming the compiler.minus method correctly subtracts the values
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseExpression_cKgN0() throws ParseException {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    Object result = parser.parseExpression();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentReturnsCorrectExpression_XRUP0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("expression data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object expected = parser.Expression(); // Assuming Expression() method is correctly implemented and accessible
        Object result = parser.Argument();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithAxisSpecifierAndNodeType_kiAy0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTestWithAxisSelf_MtGy0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ArrayList steps = new ArrayList();
        parser.NodeTest(steps);
        assertFalse(steps.isEmpty());
        assertEquals(1, steps.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionNameForFunctionLast_JHVl0() throws ParseException {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        XPathParser parser = new XPathParser(inputStream);
        int result = parser.CoreFunctionName();
        assertEquals(Compiler.FUNCTION_LAST, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNCNameReturnsCorrectTokenImage_EEwC0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("some input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        String result = parser.NCName();
        assertEquals("ExpectedTokenImage", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDisableTracing_Qgxj0() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    parser.disable_tracing();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeReturnsNodeTypeText_MwWb0() throws ParseException {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        int result = parser.NodeType();
        assertEquals(Compiler.NODE_TYPE_TEXT, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbbreviatedAxisSpecifier_DefaultChildAxis_ABKy0() throws ParseException {
    java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(input);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    int result = parser.AbbreviatedAxisSpecifier();
    assertEquals(Compiler.AXIS_CHILD, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelativeLocationPath_joFW0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("your test data here");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.RelativeLocationPath();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression_oerq0() throws ParseException {
        java.io.StringReader reader = new java.io.StringReader("some input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.Expression();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisNameSelf_cEEI0() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("AXIS_SELF".getBytes());
        XPathParser parser = new XPathParser(stream);
        int result = parser.AxisName();
        assertEquals(Compiler.AXIS_SELF, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_rXRt0() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream charStream = new SimpleCharStream(stream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(charStream);
        XPathParser parser = new XPathParser(tokenManager);
        Object result = parser.LocationPath();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Without_CoreFunctions_ThrowsParseException_Nerv2() throws Exception {
        java.io.StringReader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        assertThrows(ParseException.class, () -> {
            parser.QName_Without_CoreFunctions();
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprSingleExpression_wPRO0_1() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("expression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprSingleExpression_wPRO0_2() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("expression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertEquals("expression", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprWithMultipleOrs_PFYK1_1() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("expr1 OR expr2 OR expr3".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprWithMultipleOrs_PFYK1_2() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("expr1 OR expr2 OR expr3".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertTrue(result instanceof ArrayList);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprWithMultipleOrs_PFYK1_3() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("expr1 OR expr2 OR expr3".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertEquals(3, ((ArrayList) result).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprNoOr_sonA2_1() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("singleExpression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExprNoOr_sonA2_2() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("singleExpression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.OrExpr();
        assertEquals("singleExpression", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNameReturnsCorrectQName_Zqyc0() throws ParseException {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    Object result = parser.FunctionName();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_yRYO0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_xVpn1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_tMHc2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_CUhw3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_jvck4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_oQLQ5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_cyTB11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_zAYz1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_cVxZ2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Invalid Input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_hERC3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_MEhy4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_peYL5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_NFmm6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Test Input"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_appC7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Another Test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eqhS8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("More Testing"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_SlJF9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Edge Case Test"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_vfRf10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Edge Case Test"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_BGss11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Final Test"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_tHji0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_hkmb1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_XZeN2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_Rzra3() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_ACko4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_gwXz5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_flTa8() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_ATpz9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_qSVt0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_qSVt0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_fjXW1_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_fjXW1_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_RGGB2_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_RGGB2_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_HtPq3_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_HtPq3_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_wJRo4_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_wJRo4_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_YhCD5_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_YhCD5_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_JtMP6_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_JtMP6_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 2048));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_RZCv7_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_RZCv7_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}));
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eiwF8_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("test input"));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eiwF8_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("test input"));
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_Hbhr9_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_Hbhr9_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_ULlq10_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("test input"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_ULlq10_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("test input"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RXNr11_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RXNr11_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("Parse error at token 1.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_sFyo0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_MMob1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_UYVV2() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_NZak3() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_WsYC4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_ICqk5() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_ZggP6() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_rxGI7() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_VUgx8() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_OswC9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_Cgvr10() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_RODd11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_frbA0() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_Vgdh1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_GUts2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_elio3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_bsBX4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_iWbc5() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_ezIl6() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_DmSo7() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Fdxt8() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_IKYS9() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_ndKi11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_PUBb0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[]{}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_fdQn1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_Roau2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_kMsu3() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_uiFg4() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_Catj5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_khab6() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 512));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_vAKQ7() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{})));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Jave10() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_TMtR11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 2048));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_wgXT0_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_zwEl1_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_hLxZ2_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_MAGU3_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_MAGU3_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_vYoW4_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_vYoW4_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_icEW5_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {})), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_icEW5_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {})), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_HsNG6_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_HsNG6_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024), 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_mnlu0_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_Vetd1_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_Rytm2_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_Rytm2_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_kiFh3_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_kiFh3_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_NFtJ4_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_NFtJ4_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_ZnBH5_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_tDDs6_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_jLey7_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_jLey7_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_YOWP8_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_YOWP8_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_lAvo9_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 512);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_lAvo9_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 512);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_uTFt10_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_uTFt10_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_FRNr11_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_FRNr11_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_rgYV0() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_FZUq2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_nZEk3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_ARuY4() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_DbJr6() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_kIrg8() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_kybJ9() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_hGFF10() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[]{});
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_bQoQ0() throws Exception {
        java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
        XPathParser parser = new XPathParser(stream);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_LaYI1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        XPathParser parser = new XPathParser(reader);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_RYRa2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_lsrT3() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_ZBza4() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_CHpB5() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_YWbZ6() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_HkcP7() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_ZzBq8() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_tGjj9() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_lDtW10() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_lKxn11() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_pRUb3() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_cheA4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_kzrv5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_yYSi9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_Jzex10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_BVxg11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_evps10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_Ocdq11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_sfhD7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_LzLZ8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_EpKI9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_yIke10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NcpD11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_sMHt0_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_PJiv1_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_OOKk2_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_CCTh3_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_fMhd4_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_ChIT5_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_ChIT5_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_sORj6_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_SqxV7_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_SqxV7_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eGlz8_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_lMRL9_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_qdUo10_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RAoT11_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException expected with specific token settings", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_klPE0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_EzZO1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_SjMB2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_PzeY3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_pDaK4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_XIdq5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_McrD6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_AQGs7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mtKV8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_nUrR9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_DHtY10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_UQHt11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_AvOv3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_dUCp4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_PnRr5() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_CgkB6() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_FENi7() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Nsfo8() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_mlRE9() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_mfZI10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_xKVv11() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_jGBE11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_JCeg3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_doTw4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_gZtG5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Gjkv6() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertTrue(exception instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_tXfZ7() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertTrue(exception instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_SBUd8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertTrue(exception instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_BgQO9() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException", exception.getClass().getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_mfiF10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException", exception.getClass().getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_IpSS11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals("ParseException", exception.getClass().getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_qUOa0_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {}));
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_xwIZ1_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_fOpJ2_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_VDzw3_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_irkL4_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_irkL4_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_CYOi5() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_vWnV10() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_cecV0_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[]{}));
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_vNhO1_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_GpRC2_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_vfZx3_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_BYxe4_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_mevQ5_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_kluL6_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_JcsE7_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_JcsE7_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_stBu8_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_gRks9_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_gRks9_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_Xcps10_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_TVba11_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_TVba11_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_PLJt5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_LQrX3() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_jsrW4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_bcxp5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_svrV6() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream("invalid".getBytes());
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_vrbb7() throws Exception {
    java.io.Reader reader = new java.io.StringReader("invalid");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_jSnV8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("invalid"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_VfkU9() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException e = parser.generateParseException();
    assertTrue(e instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_kfnC10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertTrue(e instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_OAGI11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertTrue(e instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_Zulw5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_ZMga5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_isUN6() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        XPathParser parser = new XPathParser(inputStream);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_cDQm10() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_jqCN11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_waga2_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_GmUJ3_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_lEur4_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_JzOE5_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_JzOE5_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_VUvV6_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_Smee7_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eoEJ8_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_aKhY9_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_GMsP10_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_GMsP10_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bUqk11_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bUqk11_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 2048);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_FCCN0_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_FCCN0_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_nypE1_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_KnCD2_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_KUUs3_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_KUUs3_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_SQYY4_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_SQYY4_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_oqAc5_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_oqAc5_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_peFV6_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_peFV6_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_WoPl7_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("InvalidInput"));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_WoPl7_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("InvalidInput"));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_KIxz8_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("InvalidInput".getBytes()));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_KIxz8_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("InvalidInput".getBytes()));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_turg9_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("AnotherInvalidInput"));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_turg9_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("AnotherInvalidInput"));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_TDve10_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("AnotherInvalidInput".getBytes()));
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_TDve10_2() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("AnotherInvalidInput".getBytes()));
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_pmhY11_1() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("YetAnotherInvalidInput"), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_pmhY11_2() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("YetAnotherInvalidInput"), 1, 1));
        XPathParser parser = new XPathParser(tm);
        ParseException exception = parser.generateParseException();
        assertEquals("Token recognition error at: ", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_lyyc3() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_XRng4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_Hook5() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_EqoL6() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_wXMc7() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream charStream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Hnrz8() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_arpX3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_KfPz5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_SiaR6() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException e = parser.generateParseException();
    assertTrue(e instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_tZxc8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertTrue(e instanceof ParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_IJZL9() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException e = parser.generateParseException();
    assertEquals("ParseException encountered", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_GfnB10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertEquals("ParseException encountered", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_qmRB11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("ParseException encountered", e.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_KLXR11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Zcap6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_xLQN10() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_prgs11() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_PYyf0_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_Lreo1_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_oPHG3_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_HDJK4_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_LLiR5_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_LLiR5_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_sEvZ6_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_lBnl7_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_PLKS8_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_PLKS8_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XLlq9_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XLlq9_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FUHr10_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FUHr10_2() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Trma11_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Trma11_2() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_VcDS0() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_QSsO3() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_rwCS5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_Cegf0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_UuoQ1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_MSXi2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_EkCy3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_RDeQ4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_THVI5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_KcnT6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_WVeu7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_PjBJ8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_UXBu9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_HCRV10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Qqah11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_POzg3() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_ohaP4() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("test input"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_wwsV5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("test"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_CRNr6() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("test input".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_coDF7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("another test"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mptb8() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 256));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_xYNB9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("different input".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_wTkP10() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("yet another input"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_dREu11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("yet another input"), 2, 3));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_AeGu0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_alhu4() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("variable"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_afUq5() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("variable".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_vTbb6() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("85"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_acQb7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("85".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Olbi8() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("86"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_nEjA9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("86".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FIxO10() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("variable 85 86"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Vuas11() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("variable 85 86".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_zdpX2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_evWB3() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_NvUz4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_RrWn5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_mJMh8() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_ZlfH9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_nYHR10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_UBwZ11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_UkzI3() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream("variable".getBytes());
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_XRCw4() throws Exception {
    java.io.Reader reader = new java.io.StringReader("variable");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_yBbs5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("variable"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_avZM9() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test".getBytes());
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_bjQz10() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_ltWz11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_JBxP0_2() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_wQng1_1() throws Exception {
    XPathParser parser = new XPathParser((java.io.Reader) null);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_wQng1_2() throws Exception {
    XPathParser parser = new XPathParser((java.io.Reader) null);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_VOyx2_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_VOyx2_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_Exrc3_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_Exrc3_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_FprG4_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_FprG4_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_PbaA5_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_PbaA5_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_oBLu6_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_oBLu6_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_VnFH7_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_VnFH7_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_CpuR8_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_CpuR8_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_TplW9_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_TplW9_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_CLuP10_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_Iwhd11_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error encountered.", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_VMyE8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_gVun10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RrCe11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_fvWv0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_SuZb10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_iSwr6() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_mbmk10() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 512);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_rrsn5() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_awfv10() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_aFWe2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_JQyy5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 256);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_kDji4() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0x23, 0x45}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_SJKa5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0x23, 0x45}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_ucDJ6() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("function"), 1, 1, 256));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_skAS8() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0x01, 0x02, 0x03}), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_mazD9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0x7F, 0x45, 0x4C}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_yWLo10() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_uAOV11() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("yet another test"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_vxqa2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("")), 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_hdkd4() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("function()"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_nxAm5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("function()")), 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_ecCk6() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("node()".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_Pkat7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("node()"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Pfqy8() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("node()")), 2);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_cQAO9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("attribute::name".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Jvdq10() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("attribute::name"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_iMLD11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("attribute::name")), 3);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_grbu5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("test input")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_MHtr6() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0x01, 0x02, 0x03}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_WASM7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("\u0001\u0002\u0003"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_GpnF8() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("\u0001\u0002\u0003")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_tGXt9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("function()".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_xPib11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("function()")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_UmLy4() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_disn10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_jKcx3() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_jqnh5() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_VKXE6() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_Oncu8() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        XPathParser parser = new XPathParser(reader);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_AaNo9() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        XPathParser parser = new XPathParser(inputStream);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_cYyX4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_DkDF5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_UiUt10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_yOfJ11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_hNAZ2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(null);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_rbuD11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 512);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_XHcp7() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {}), 1, 1, 256));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_cUEj8() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_lFmn10() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("node()")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_zIbG11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_WozF1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_Bntu4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_RiUd5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_fOmN7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_MQGv8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_uwOm9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_gctr10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_WqXI11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_xhyE3() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("false()".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_JjUb5() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("attribute::name")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_joXF6() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("text()".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_QAuB7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("comment()"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_nQxQ8() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("processing-instruction('xml')")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_nMTQ9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("ancestor::div[1]".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_sHkK10() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("child::*/child::span"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_DXsB11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("descendant-or-self::node()/@style")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_VWUC9() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("another test input".getBytes()));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_gsxv10() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("another test input"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_nJwv11() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test input")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_OkxC8() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("another test")));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_gvmo9() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("another test".getBytes()));
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_pSNH10() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("complex input with special characters: !@#$%^&*()"));
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_KANc11() throws Exception {
        XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("complex input with special characters: !@#$%^&*()")));
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_SUxk6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_BjFt7() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_UoIC3() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException5_oPtu4() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_LbCx5() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_dyrC9() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_zraH10() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_llLB11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = parser.generateParseException();
        assertNotNull(exception);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_ztHq2_1() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(null, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_ztHq2_2() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(null, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_Qsrn1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_UePo2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_jtUu3() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_mgmi4() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_hxIE5() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_EiMd6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_JdyJ3() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_iXHH4() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_SQkN7() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_paDJ6() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_FDKK8() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_vPCR9() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_yMjP10() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_EdSh11() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_MXGc11() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 2048);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertNotNull(e);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_OwbL4() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_xkWH7() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
        // This test is more about demonstrating the structure as we can't directly check private fields without a getter.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisableTracing() throws Exception {
        // Initialize XPathParser with a mocked XPathParserTokenManager
        xpathParser = new XPathParser(tokenManager);
        // Call the method disable_tracing
        xpathParser.disable_tracing();
        // Since disable_tracing() has no output or change in state, we simply verify that it does not throw an exception
        // This is a minimal test and typically not very useful
        // In a real-world scenario, you would want to test the effects of this method if it had any
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeInvalid() throws Exception {
        // Initialize the XPathParser with the mocked token manager
        xpathParser = new XPathParser(tokenManager);
        // Setup the mock to return an invalid token kind
        when(jj_nt.kind).thenReturn(-1);
        // Call the method under test and expect an exception
        assertThrows(ParseException.class, () -> xpathParser.NodeType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpression() throws Exception {
        // Initialize XPathParser with a mocked XPathParserTokenManager
        xpathParser = new XPathParser(tokenManager);
        // Arrange
        Object expectedObject = new Object();
        when(xpathParser.OrExpr()).thenReturn(expectedObject);
        // Act
        Object result = xpathParser.Expression();
        // Assert
        assertSame(expectedObject, result, "The Expression method should return the object returned by OrExpr.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCallWithNullArguments() throws Exception {
        xpathParser = new XPathParser(tokenManager);
        // Setup
        Object functionName = "testFunction";
        when(xpathParser.FunctionName()).thenReturn(functionName);
        when(xpathParser.ArgumentList()).thenReturn(null);
        Object expectedReturnValue = new Object();
        when(compiler.function(functionName, null)).thenReturn(expectedReturnValue);
        // Execute
        Object result = xpathParser.FunctionCall();
        // Verify
        verify(compiler).function(functionName, null);
        assertEquals(expectedReturnValue, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionCallWithNonNullArguments() throws Exception {
        xpathParser = new XPathParser(tokenManager);
        // Setup
        Object functionName = "testFunction";
        ArrayList<Object> arguments = new ArrayList<>();
        arguments.add("arg1");
        arguments.add("arg2");
        when(xpathParser.FunctionName()).thenReturn(functionName);
        when(xpathParser.ArgumentList()).thenReturn(arguments);
        Object expectedReturnValue = new Object();
        when(compiler.function(functionName, arguments.toArray())).thenReturn(expectedReturnValue);
        // Execute
        Object result = xpathParser.FunctionCall();
        // Verify
        verify(compiler).function(functionName, arguments.toArray());
        assertEquals(expectedReturnValue, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFilterExpr_ReturnsPrimaryExpr_BThV0() throws Exception {
    jj_nt.kind = XPathParserTokenManager.EOF;
    when(tokenManager.getNextToken()).thenReturn(jj_nt);
    xpathParser = new XPathParser(tokenManager);
    Object expectedExpr = new Object();
    when(xpathParser.PrimaryExpr()).thenReturn(expectedExpr);
    Object result = xpathParser.FilterExpr();
    verify(compiler, never()).expressionPath(any(), any(), any());
    assertEquals(expectedExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFilterExprWithEmptyInput_HSYG0_ukPk0() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    try {
        Object result = parser.FilterExpr();
        assertNull(result, "Expected null for empty input");
    } catch (ParseException e) {
        fail("ParseException should not be thrown for empty input");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFilterExprWithValidInput_JZfi1_GVkI0() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("some valid XPath expression");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    try {
        Object result = parser.FilterExpr();
        assertNotNull(result, "Expected non-null for valid input");
    } catch (ParseException e) {
        fail("ParseException should not be thrown for valid input");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_yqou5_nwcP0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("invalid input"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_yqou5_nwcP0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("invalid input"));
    ParseException e = parser.generateParseException();
    assertTrue(e.getMessage().contains("Lexical error"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_OgmF7_JoVQ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("invalid input"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_OgmF7_JoVQ0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("invalid input"));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertTrue(e.getMessage().contains("Lexical error"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_IAMm1_aHyl0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException e = parser.generateParseException();
    assertEquals("Token recognition error at: ", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mola8_gXny0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token recognition error at: ", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_ooas1_Eutw0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException e = parser.generateParseException();
    assertEquals("Expected message", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_QeSi2_ePOA0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Expected message", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_sPRi1_Bqnd0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException exception = parser.generateParseException();
    assertEquals("Token error.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_ntru2_NtAo0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertEquals("Token error.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_LvEF4_mTug0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("child::node()"));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_LvEF4_mTug0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("child::node()"));
    ParseException exception = parser.generateParseException();
    assertEquals("Token error.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_GDaB7_UtZy0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("ancestor::node()"));
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_GDaB7_UtZy0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("ancestor::node()"));
    ParseException exception = parser.generateParseException();
    assertEquals("Token error.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_MDMX4_Npfy0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("InvalidInput"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_wsFp7_cYAg0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("0x123"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_RWlI8_IcFS0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("0x123"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_cXKa10_TAWi0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("123"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_MZVA11_xock0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("123"), 1, 1));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_fuNT11_MLrd0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_mtQi4_oPqI0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("test input"));
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_Zhdi7_wuGt0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("another test"));
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_kDmj10_ZAQZ0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("yet another test"));
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_DBEY8_LKLR0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Rjdc10_bKPO0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_HWKZ6_WamI0() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException exception = parser.generateParseException();
    assertEquals(0, exception.expectedTokenSequences.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_puVm7_QxVU0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertEquals(0, exception.expectedTokenSequences.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_XJtB8_eelP0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertEquals(0, exception.expectedTokenSequences.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_MKzO9_LgJu0() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException exception = parser.generateParseException();
    assertTrue(exception.expectedTokenSequences.length == 0 || exception.expectedTokenSequences[0].length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_xWLs10_TroC0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    XPathParser parser = new XPathParser(reader);
    ParseException exception = parser.generateParseException();
    assertTrue(exception.expectedTokenSequences.length == 0 || exception.expectedTokenSequences[0].length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_UjDt11_AnYy0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = parser.generateParseException();
    assertTrue(exception.expectedTokenSequences.length == 0 || exception.expectedTokenSequences[0].length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_AtNt4_baam0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("count(//item)"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_bhAL5_oLxf0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("count(//item)")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_TEuM7_iHWR0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("node()[@attr='value']"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_tgWq8_KXwi0() throws Exception {
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader("node()[@attr='value']")));
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_AjKc10_zeat0() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("ancestor::node()[1]"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_pGmh10_QvIC0() throws Exception {
    java.io.InputStream inputStream = System.in;
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bFYc11_eLIY0() throws Exception {
    java.io.InputStream inputStream = System.in;
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = parser.generateParseException();
    assertNotNull(e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_NEOb0_KyKu0_2() throws Exception {
    XPathParser parser = new XPathParser((java.io.Reader) null);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_ZUtN3_PqAU0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in); // Use System.in instead of null
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_ZUtN3_PqAU0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in); // Use System.in instead of null
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_viur5_cbfV0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_lWeE6_ATBM0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_vCRv8_OBkM0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_Xbfb9_ghXO0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_Xbfb9_ghXO0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_TuvX10_nGsd0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_TuvX10_nGsd0_2() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 1);
    XPathParser parser = new XPathParser(tm);
    ParseException e = parser.generateParseException();
    assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_JKSn11_HYyT0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2}), 1, 1, 512);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = parser.generateParseException();
    assertNotNull(exception);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_qDfG4_Tbzt0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("invalid input"));
    ParseException e = parser.generateParseException();
    assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_kCXR7_wTVI0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("1234"));
    ParseException e = parser.generateParseException();
    assertNotNull(e);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_kCXR7_wTVI0_2() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("1234"));
    ParseException e = parser.generateParseException();
    assertEquals("TokenMgrError", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_YCbh10_FHQO0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader("test input"));
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrExprSingleExpression_wPRO0_dHax0_1() throws ParseException {
    java.io.InputStream stream = new java.io.ByteArrayInputStream("expression".getBytes());
    XPathParser parser = new XPathParser(stream);
    Object result = parser.QName_Without_CoreFunctions();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrExprSingleExpression_wPRO0_dHax0_2() throws ParseException {
    java.io.InputStream stream = new java.io.ByteArrayInputStream("expression".getBytes());
    XPathParser parser = new XPathParser(stream);
    Object result = parser.QName_Without_CoreFunctions();
    assertEquals("expression", result.toString());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testOrExprNoOr_sonA2_jbes0_1() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("singleExpression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.QName_Without_CoreFunctions();
        assertNotNull(result);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testOrExprNoOr_sonA2_jbes0_2() throws ParseException {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("singleExpression".getBytes());
        XPathParser parser = new XPathParser(stream);
        Object result = parser.QName_Without_CoreFunctions();
        assertEquals("singleExpression", result.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQNameWithoutCoreFunctionsReturnsCorrectQName_Zqyc0_pIJA0() throws ParseException {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    Object result = parser.QName_Without_CoreFunctions();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_xVpn1_uTHx0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_tMHc2_KnrG0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_jvck4_dHLK0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_oQLQ5_hfbE0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_cyTB11_juJg0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_hERC3_BjLC0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2}), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_peYL5_FQis0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4}));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_NFmm6_saqG0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Test Input"), 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_appC7_BoOc0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Another Test"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_eqhS8_SEPZ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("More Testing"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_SlJF9_OVgA0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Edge Case Test"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException11_vfRf10_jUfw0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Edge Case Test"), 1, 1, 2048);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException12_BGss11_FAXA0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("Final Test"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_tHji0_FmDN0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_hkmb1_zylK0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, parser::generateParseException);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_XZeN2_ZPdz0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, parser::generateParseException);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException4_Rzra3_eFTE0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException6_gwXz5_AqJa0() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_flTa8_NRtX0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException10_ATpz9_rJpc0() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_qSVt0_wUaZ0() throws Exception {
    ParseException exception = null;
    try {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
    } catch (ParseException e) {
        exception = e;
    }
    assertNotNull(exception);
    assertEquals("Parse error at token 1.", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_RGGB2_yxCJ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_wJRo4_neXH0_1() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException8_RZCv7_oSrO0_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}));
        ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException10_Hbhr9_Ebzj0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[] {0, 1, 2, 3}), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_ULlq10_repc0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_RXNr11_ZOot0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_sFyo0_YMzw0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException2_MMob1_DmzL0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        assertThrows(ParseException.class, () -> parser.generateParseException());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_UYVV2_ULPy0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException5_WsYC4_mzuC0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_ICqk5_FWYA0() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException7_ZggP6_DeFn0_1() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("test input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_rxGI7_IFGr0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
public void testGenerateParseException9_VUgx8_yIjh0() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_OswC9_zSpq0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_Cgvr10_ZYBn0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_GUts2_vxMZ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_Fdxt8_ddao0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException12_ndKi11_dIis0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException1_PUBb0_IQES0() throws Exception {
        try {
            XPathParser parser = new XPathParser((java.io.InputStream) null);
            parser.QName_Without_CoreFunctions();
            fail("Expected a ParseException to be thrown");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_Roau2_BLrX0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException4_kMsu3_Memn0() throws Exception {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        try {
            parser.QName_Without_CoreFunctions();
            fail("Expected a ParseException to be thrown");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_TMtR11_tMWY0() throws Exception {
    try {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertNotNull(e, "Exception should not be null");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_icEW5_pBkP0() throws Exception {
    try {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException exception) {
        assertEquals("Token error", exception.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_HsNG6_flXJ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_Vetd1_LgJv0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException3_Rytm2_WhCK0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_ZnBH5_fNig0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_tDDs6_Hftt0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_YOWP8_XzIA0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertTrue(e != null);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_lAvo9_rZyx0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_uTFt10_vcEs0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}));
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_FRNr11_hlAl0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[]{0, 1, 2, 3}), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException3_FZUq2_Qedp0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_nZEk3_csQq0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_ARuY4_gWhH0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_kIrg8_iQPS0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException10_kybJ9_gLSc0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException3_RYRa2_RpkX0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, () -> parser.generateParseException());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_lsrT3_AGFf0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_ZBza4_blUw0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
public void testGenerateParseException6_CHpB5_BABS0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_HkcP7_PxkQ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException9_ZzBq8_CVHP0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_tGjj9_uZZC0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_lDtW10_fuHW0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
public void testGenerateParseException4_pRUb3_aMXy0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_yYSi9_VUMR0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("test input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_evps10_vZrt0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_sfhD7_Omgm0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_LzLZ8_Teoi0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_EpKI9_qXWO0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_yIke10_ARqZ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_NcpD11_wEGN0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_sMHt0_icoQ0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException2_PJiv1_rPTq0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        XPathParser parser = new XPathParser(reader);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_lMRL9_VZUM0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_qdUo10_lLpE0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException1_klPE0_ZHSl0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_EzZO1_vBCd0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, parser::generateParseException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_SjMB2_nMaB0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_PzeY3_NulE0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_McrD6_kNTX0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_AQGs7_DGtO0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mtKV8_hlVo0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_nUrR9_HeIZ0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_DHtY10_qTAz0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_UQHt11_zkVY0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException4_AvOv3_twdo0() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        assertThrows(ParseException.class, () -> parser.generateParseException());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_dUCp4_NIlx0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_PnRr5_RIpv0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_CgkB6_xOds0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_mfZI10_TrXN0() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_xKVv11_cGlq0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_jGBE11_CbQJ0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_dJxM2_lrwT0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_SBUd8_PVDN0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_qUOa0_tFdR0() throws Exception {
    try {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertNotNull(e);
        assertEquals("Token error", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_irkL4_BONZ0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertNotNull(e, "Expected exception was not null");
    }
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException6_CYOi5_nmNe0_1() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_vNhO1_sCPo0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.StringReader(""));
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_vfZx3_bfDE0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_BYxe4_eWlo0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_mevQ5_dxbo0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertEquals("Parse error", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_JcsE7_NCFe0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertEquals("Expected a different message", "Parse error", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_stBu8_HByS0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_gRks9_eLpn0_2() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    ParseException e = parser.generateParseException();
    assertEquals("Expected a different message", "Parse error", e.getMessage());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException12_TVba11_xNKi0_2() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = parser.generateParseException();
        assertEquals("Parse error", e.getMessage());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException6_PLJt5_NhZz0() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, parser::generateParseException);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException7_svrV6_ATeH0_1() throws Exception {
        java.io.InputStream stream = new java.io.ByteArrayInputStream("invalid".getBytes());
        XPathParser parser = new XPathParser(stream);
        ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException9_jSnV8_xDsu0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("invalid"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        assertThrows(ParseException.class, parser::generateParseException);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_VfkU9_WbOQ0_1() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(stream);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_OAGI11_myws0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertInstanceOf(ParseException.class, e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_Ebae3_WSYK0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertTrue(e != null);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_ymca7_xILe0() throws Exception {
    try {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertTrue(e != null);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_isUN6_CQOS0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_RHiH5_zJTb0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_GmUJ3_XVVz0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException e) {
        assertEquals("Token error", e.getMessage());
    }
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_VUvV6_KOdI0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException8_Smee7_KGAt0_2() throws Exception {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        ParseException e = parser.generateParseException();
        assertEquals("Token error", e.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_bUqk11_zZqR0_1() throws Exception {
    ParseException e = assertThrows(ParseException.class, () -> {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.QName_Without_CoreFunctions();
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_KUUs3_ozlS0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_oqAc5_uecS0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException7_peFV6_VMRe0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1024);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException10_turg9_QAHi0_1() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader("AnotherInvalidInput"));
        ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_Hook5_Nkck0_1() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_EqoL6_MPbn0_1() throws Exception {
    java.io.InputStream stream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream charStream = new SimpleCharStream(stream);
    XPathParserTokenManager tm = new XPathParserTokenManager(charStream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException9_Hnrz8_OFUe0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException11_GfnB10_XBjN0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("");
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(reader));
        XPathParser parser = new XPathParser(tokenManager);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_KLXR11_sseC0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_HjaM1_ZZtR0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException6_Ujcz5_Xpvg0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_Zcap6_xXFv0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_xLQN10_qQwh0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException1_PYyf0_ufjn0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    XPathParser parser = new XPathParser(inputStream);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException2_Lreo1_azCg0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_HDJK4_qCrJ0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_PLKS8_MOdx0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_XLlq9_YyGF0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_FUHr10_llSH0_1() throws Exception {
    java.io.InputStream inputStream = new java.io.ByteArrayInputStream(new byte[0]);
    SimpleCharStream stream = new SimpleCharStream(inputStream, 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_MSXi2_MEYU0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException4_EkCy3_NLMR0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_RDeQ4_TiLu0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_THVI5_ByGC0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test input"), 1, 1, 2048);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException7_KcnT6_xaVM0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_WVeu7_CwGi0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test input"));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_PjBJ8_KIah0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, parser::generateParseException);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException6_wwsV5_epnj0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mptb8_ZMpW0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("another test"), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_dREu11_RFeJ0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("yet another input"), 2, 3);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException8_acQb7_EFcJ0_1() throws Exception {
    XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream("85".getBytes()));
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException3_zdpX2_stCz0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in, 1, 1, 1024);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_NvUz4_bHDS0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException6_RrWn5_FgXO0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_mJMh8_qyWD0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> parser.generateParseException());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_ZlfH9_OjjD0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException5_XRCw4_vLDu0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("variable");
        XPathParser parser = new XPathParser(reader);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException11_bjQz10_dMrc0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("test");
        XPathParser parser = new XPathParser(reader);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException9_hvsL8_buTi0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.Reader) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_KxGN9_Qiff0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream((java.io.InputStream) null);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException5_oPtu4_jeoL0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException6_LbCx5_cQCE0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException10_dyrC9_CLoq0() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        assertThrows(ParseException.class, parser::generateParseException);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException12_llLB11_KzXN0_1() throws Exception {
        java.io.Reader reader = new java.io.StringReader("input data");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException2_Qsrn1_cYJj0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_jtUu3_NZmO0() throws Exception {
    XPathParser parser = new XPathParser((java.io.InputStream) null);
    try {
        parser.QName_Without_CoreFunctions();
        fail("Expected a ParseException to be thrown");
    } catch (ParseException exception) {
        assertNotNull(exception);
    }
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_EiMd6_YlYl0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("input"), 1, 1, 1024);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_JdyJ3_geYp0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException7_paDJ6_TpxE0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException10_vPCR9_DsJm0_1() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1, 256);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
    ParseException e = assertThrows(ParseException.class, parser::generateParseException);}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException11_yMjP10_pLXU0_1() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream("test".getBytes()));
        XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tm);
        ParseException e = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException5_OwbL4_hGwM0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException8_xkWH7_Kvfb0() throws Exception {
        XPathParser parser = new XPathParser(new java.io.ByteArrayInputStream(new byte[0]));
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = Timeout.ThreadMode.SEPARATE_THREAD)
    public void testGenerateParseException9_YmEs8_whNq0() throws Exception {
        XPathParser parser = new XPathParser(new java.io.StringReader(""));
        assertThrows(ParseException.class, () -> parser.QName_Without_CoreFunctions());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_uBQD10_GBVw0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException12_MRGX11_QUmc0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0]), 1, 1, 1024);
    XPathParserTokenManager tm = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tm);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException4_gTBk3_ELUd0() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
    XPathParser parser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, parser::generateParseException);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGenerateParseException9_xAZz8_ejmK0_1() throws Exception {
        java.io.InputStream inputStream = new java.io.ByteArrayInputStream("input".getBytes());
        SimpleCharStream stream = new SimpleCharStream(inputStream);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 0);
        XPathParser parser = new XPathParser(tokenManager);
        ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGenerateParseException11_YMCj10_MUMW0_1() throws Exception {
    java.io.Reader reader = new java.io.StringReader("input");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    ParseException exception = assertThrows(ParseException.class, () -> parser.generateParseException());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEnableTracing_VScS0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser xpathParser = new XPathParser(tokenManager);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithEmptySteps_gniT0_yrfY0_1() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithEmptySteps_gniT0_yrfY0_2() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assertTrue(result instanceof Object, "Result should be an instance of Object");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithValidSteps_LgtD1_qekk0_1() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("/step1/step2");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAbsoluteLocationPathWithValidSteps_LgtD1_qekk0_2() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("/step1/step2");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AbsoluteLocationPath();
    assertTrue(result instanceof Object, "Result should be an instance of Object");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQName_Without_CoreFunctions_ThrowsParseException_PltL0() throws Exception {
    XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
    XPathParser xpathParser = new XPathParser(tm);
    when(jj_nt.kind).thenReturn(-1); // Simulate invalid token leading to ParseException
    when(tm.getNextToken()).thenReturn(jj_nt); // Ensure the parser receives the mocked token
    assertThrows(ParseException.class, () -> xpathParser.QName_Without_CoreFunctions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQName_Without_CoreFunctionsThrowsParseException_EHcV0() throws Exception {
    jj_nt.kind = -1; // Invalid kind leading to ParseException
    when(tokenManager.getNextToken()).thenReturn(jj_nt);
    XPathParser xpathParser = new XPathParser(tokenManager);
    assertThrows(ParseException.class, () -> xpathParser.QName_Without_CoreFunctions(),
        "QName_Without_CoreFunctions should throw ParseException for invalid token kind.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPathExprWithFilterExpr_AWkB0_znnm0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertNotNull(parser.PathExpr(), "Expected non-null result from PathExpr when jj_2_6 returns true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPathExprWithLocationPath_lVay1_JwCl0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    assertNotNull(parser.PathExpr(), "Expected non-null result from PathExpr when jj_2_6 returns false");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnaryExprWithFunction_iqsm0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    jj_nt.kind = XPathParser.FUNCTION_ROUND;
    when(tokenManager.getNextToken()).thenReturn(jj_nt);
    XPathParser xpathParser = new XPathParser(tokenManager);
    Object expectedExpr = new Object();
    when(xpathParser.UnionExpr()).thenReturn(expectedExpr);
    Object result = xpathParser.UnionExpr(); // Corrected method call to match the setup
    assertEquals(expectedExpr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQName_Without_CoreFunctions_SingleAndOperation_PWtm0() throws Exception {
    when(xpathParser.jj_nt.kind).thenReturn(XPathParserConstants.AND);
    Object expectedExpr = new Object();
    String ncName = "testName";
    when(xpathParser.NCName_Without_CoreFunctions()).thenReturn(ncName);
    when(compiler.qname(null, ncName)).thenReturn(expectedExpr);
    Object result = xpathParser.QName_Without_CoreFunctions();
    verify(xpathParser).NCName_Without_CoreFunctions();
    verify(compiler).qname(null, ncName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprMultipleEquality_hnXg1_aXfH0_1() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("a = b and c = d");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertTrue(result instanceof ArrayList, "Expected list of expressions");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAndExprMultipleEquality_hnXg1_aXfH0_2() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("a = b and c = d");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.AndExpr();
    assertEquals(2, ((ArrayList) result).size(), "Expected two elements in the list");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnionExprSinglePath_WLmR0_dXHE0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("single/path");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.UnionExpr();
    assertNotNull(result, "Result should not be null for valid path expression");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnionExprMultipleUnion_NaMh1_TNtY0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("path1 | path2 | path3");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.UnionExpr();
    assertNotNull(result, "Result should not be null for multiple union expressions");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnionExprNoUnion_WFpG2_pXQA0() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("path/without/union");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.UnionExpr();
    assert result != null : "Result should not be null when there is no union";
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompiler_clFr0() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLocationStepSlashSlash_LIfi0() throws Exception {
    XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
    XPathParser xpathParser = new XPathParser(tm);
    Compiler compiler = mock(Compiler.class);
    when(tm.getNextToken()).thenReturn(jj_nt);
    when(jj_nt.kind).thenReturn(XPathParserConstants.SLASHSLASH);
    when(compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE)).thenReturn(new Object());
    when(compiler.step(eq(Compiler.AXIS_DESCENDANT_OR_SELF), any(), any())).thenReturn(new Object());
    ArrayList<Object> steps = new ArrayList<>();
    steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE), null));
    verify(compiler).nodeTypeTest(Compiler.NODE_TYPE_NODE);
    verify(compiler).step(eq(Compiler.AXIS_DESCENDANT_OR_SELF), any(), any());
    assertEquals(1, steps.size(), "Steps list should have one element after LocationStep with SLASHSLASH");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCoreFunctionCallWithNullArguments_MswV0_QaKx0_1() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    Mockito.when(parser.CoreFunctionName()).thenReturn(1); // Example function code
    Mockito.when(parser.ArgumentList()).thenReturn(null);
    Object result = parser.CoreFunctionCall();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCoreFunctionCallWithNullArguments_MswV0_QaKx0_2() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    Mockito.when(parser.CoreFunctionName()).thenReturn(1); // Example function code
    Mockito.when(parser.ArgumentList()).thenReturn(null);
    Object result = parser.CoreFunctionCall();
    assertEquals(compiler.function(1, null), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCoreFunctionCallWithArguments_SKPt1_wwDB0_1() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    Mockito.when(parser.CoreFunctionName()).thenReturn(2); // Another example function code
    ArrayList<Object> arguments = new ArrayList<>();
    arguments.add("arg1");
    arguments.add("arg2");
    Mockito.when(parser.ArgumentList()).thenReturn(arguments);
    Object result = parser.CoreFunctionCall();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCoreFunctionCallWithArguments_SKPt1_wwDB0_2() throws ParseException {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tm = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tm);
    Mockito.when(parser.CoreFunctionName()).thenReturn(2); // Another example function code
    ArrayList<Object> arguments = new ArrayList<>();
    arguments.add("arg1");
    arguments.add("arg2");
    Mockito.when(parser.ArgumentList()).thenReturn(arguments);
    Object result = parser.CoreFunctionCall();
    assertEquals(result, compiler.function(2, arguments.toArray(new Object[0])));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQName_Without_CoreFunctions_GQSJ0() throws Exception {
    String expectedNCName = "expectedName";
    Object expectedQName = new Object();
    when(xpathParser.NCName()).thenReturn(expectedNCName);
    when(compiler.qname(null, expectedNCName)).thenReturn(expectedQName);
    Object result = xpathParser.QName_Without_CoreFunctions();
    verify(xpathParser, times(1)).NCName();
    verify(compiler, times(1)).qname(null, expectedNCName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCoreFunctionNameNamespaceUri_ymdI0() throws Exception {
    when(tokenManager.getNextToken()).thenReturn(jj_nt);
    XPathParserTokenManager tm = new XPathParserTokenManager(new SimpleCharStream(new java.io.ByteArrayInputStream(new byte[0])));
    xpathParser = new XPathParser(tm);
    assertEquals("http://www.w3.org/2005/xpath-functions", xpathParser.CoreFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNCName_Ecgz0() throws Exception {
    when(token.kind).thenReturn(XPathParser.NCName); // Mock the kind of token
    when(token.image).thenReturn("expectedNCName"); // Mock the image of token
    XPathParser xpathParser = new XPathParser((java.io.InputStream) null); // Create an instance of XPathParser
    Field tokenField = XPathParser.class.getDeclaredField("token"); // Reflectively access the token field
    tokenField.setAccessible(true);
    tokenField.set(xpathParser, token); // Set the token in XPathParser
    when(token.kind).thenReturn(XPathParser.NCName);
    Field jj_ntField = XPathParser.class.getDeclaredField("jj_nt");
    jj_ntField.setAccessible(true);
    jj_ntField.set(xpathParser, token); // Set the jj_nt in XPathParser
    String result = xpathParser.NCName_Without_CoreFunctions();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDisableTracing_yHMt0() throws Exception {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""));
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser xpathParser = new XPathParser(tokenManager);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVariableReference_vkqW0_zaYt0_1() throws ParseException {
    java.io.StringReader reader = new java.io.StringReader("some input data that represents a variable reference");
    SimpleCharStream stream = new SimpleCharStream(reader);
    XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
    XPathParser parser = new XPathParser(tokenManager);
    Object result = parser.VariableReference();
    assertNotNull(result);}
}