/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithSpecialCharacters_TOyI0() {
        ParseException parserException = new ParseException();
        String input = "Hello\nWorld\tJava\b";
        String expected = "Hello\\nWorld\\tJava\\b";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithQuotes_HjKk1() {
        ParseException parserException = new ParseException();
        String input = "He said, \"Java is cool\" and left.";
        String expected = "He said, \\\"Java is cool\\\" and left.";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithUnicodeCharacters_LLLi2() {
        ParseException parserException = new ParseException();
        String input = "Use \u0010 and \u001F in text";
        String expected = "Use \\u0010 and \\u001f in text";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithBackslash_UfYW3() {
        ParseException parserException = new ParseException();
        String input = "Path\\to\\file";
        String expected = "Path\\\\to\\\\file";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithOneTokenSequence_dmNd1_EXMp0() {
    int[][] expectedTokenSequences = {{1}};
    String[] tokenImage = {"", "token1"};
    ParseException exception = new ParseException("Encountered \"token1\" at line 0, column 0.Was expecting:\n    token1 \n    ");
    assertEquals("Encountered \"token1\" at line 0, column 0.Was expecting:\n    token1 \n    ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithMultipleTokenSequences_Erhq2_jYRS0() {
    int[][] expectedTokenSequences = {{1, 2}, {3}};
    String[] tokenImage = {"", "token1", "token2", "token3"};
    ParseException exception = new ParseException("Encountered \"token1 token2\" at line 0, column 0.Was expecting one of:\n    token1 token2 ...\n    token3 \n    ");
    assertEquals("Encountered \"token1 token2\" at line 0, column 0.Was expecting one of:\n    token1 token2 ...\n    token3 \n    ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithSingleCharacterTokens_tysb5_zkAz0() {
    int[][] expectedTokenSequences = {{1, 2}, {3}};
    String[] tokenImage = {"", "a", "b", "c"};
    ParseException exception = new ParseException("Encountered \"a b\" at line 0, column 0.Was expecting one of:\n    a b ...\n    c \n    ");
    assertEquals("Encountered \"a b\" at line 0, column 0.Was expecting one of:\n    a b ...\n    c \n    ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithNullTokenImage_cGmw7_kuqC0() {
    int[][] expectedTokenSequences = {{1}};
    String[] tokenImage = null;
    ParseException exception = new ParseException("Encountered \"null\" at line 0, column 0.Was expecting:\n    null \n    ");
    assertEquals("Encountered \"null\" at line 0, column 0.Was expecting:\n    null \n    ", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMessageWithTokenSequenceLeadingToEOF_jZys9_KctQ0() {
    int[][] expectedTokenSequences = {{1, 0}};
    String[] tokenImage = {"", "token1", "<EOF>"};
    ParseException exception = new ParseException("Encountered \"token1 <EOF>\" at line 0, column 0.Was expecting:\n    token1 <EOF> \n    ");
    assertEquals("Encountered \"token1 <EOF>\" at line 0, column 0.Was expecting:\n    token1 <EOF> \n    ", exception.getMessage());
}
}