/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.JXPathContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SimplePathInterpreter_Test_Passing {
private SimplePathInterpreter simplePathInterpreter;
private EvalContext mockContext;
private NodePointer mockRoot;
private Expression[] predicates;
private Step[] steps;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_AtEndOfSteps() {
        simplePathInterpreter = new SimplePathInterpreter();
        // Setup
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        Step[] steps = new Step[0]; // Empty steps to trigger base case
        // Execution
        NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, 0);
        // Assertions
        assertSame(parent, result, "Should return the same parent pointer when steps are empty.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterpretSimpleExpressionPath() {
        simplePathInterpreter = new SimplePathInterpreter();
        mockContext = mock(EvalContext.class);
        mockRoot = mock(NodePointer.class);
        predicates = new Expression[0]; // Assuming Expression is an interface or class available in the context
        steps = new Step[0]; // Assuming Step is an interface or class available in the context
        // Setup
        NodePointer expectedPointer = mock(NodePointer.class);
        when(mockRoot.createPath(any(JXPathContext.class), any())).thenReturn(expectedPointer);
        // Execute
        NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(mockContext, mockRoot, predicates, steps);
        // Verify
        verify(mockRoot).createPath(any(JXPathContext.class), any());
        assertEquals(expectedPointer, result, "The returned NodePointer should match the expected pointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointer_WithChildAxis_ojoK0() {
    SimplePathInterpreter simplePathInterpreter = new SimplePathInterpreter();
    EvalContext context = mock(EvalContext.class);
    NodePointer parent = mock(NodePointer.class);
    NodePointer expectedPointer = mock(NodePointer.class);
    NodeNameTest nodeNameTest = mock(NodeNameTest.class);
    QName qName = new QName("test");
    Step step = mock(Step.class);
    when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
    when(step.getNodeTest()).thenReturn(nodeNameTest);
    when(nodeNameTest.getNodeName()).thenReturn(qName);
    Step[] steps = new Step[]{step};
    when(parent.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(expectedPointer);
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, parent, null, steps);
    assertNotNull(result, "Result should not be null when steps are processed.");
    verify(parent).createChild(any(JXPathContext.class), eq(qName), eq(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointer_WithAttributeAxis_WjkD0() {
    SimplePathInterpreter simplePathInterpreter = new SimplePathInterpreter();
    EvalContext context = mock(EvalContext.class);
    NodePointer parent = mock(NodePointer.class);
    NodePointer expectedPointer = mock(NodePointer.class);
    NodeNameTest nodeNameTest = mock(NodeNameTest.class);
    QName qName = new QName("attribute");
    Step step = mock(Step.class);
    when(step.getAxis()).thenReturn(Compiler.AXIS_ATTRIBUTE);
    when(step.getNodeTest()).thenReturn(nodeNameTest);
    when(nodeNameTest.getNodeName()).thenReturn(qName);
    Step[] steps = new Step[]{step};
    when(parent.createAttribute(any(JXPathContext.class), any(QName.class))).thenReturn(expectedPointer);
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, parent, null, steps);
    assertNotNull(result, "Result should not be null when steps are processed.");
    verify(parent).createAttribute(any(JXPathContext.class), eq(qName));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointerWithPredicates_Pmcp4_qPgp0_1() {
    EvalContext context = Mockito.mock(EvalContext.class);
    NodePointer parent = Mockito.mock(NodePointer.class);
    Expression[] predicates = new Expression[1];
    predicates[0] = Mockito.mock(Expression.class);
    Step[] steps = new Step[1];
    steps[0] = Mockito.mock(Step.class); // Mock the Step object since it has protected access
    NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, 0);
    assertTrue(result instanceof NullPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNullPointerWithPredicates_Pmcp4_qPgp0_2() {
    EvalContext context = Mockito.mock(EvalContext.class);
    NodePointer parent = Mockito.mock(NodePointer.class);
    Expression[] predicates = new Expression[1];
    predicates[0] = Mockito.mock(Expression.class);
    Step[] steps = new Step[1];
    steps[0] = Mockito.mock(Step.class); // Mock the Step object since it has protected access
    NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, 0);
    assertEquals("test", ((NullPropertyPointer) result).getPropertyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInterpretSimpleLocationPath_ljgi0() throws Exception {
    SimplePathInterpreter simplePathInterpreter = new SimplePathInterpreter();
    EvalContext context = mock(EvalContext.class);
    NodePointer root = mock(NodePointer.class);
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[1];
    steps[0] = mock(Step.class);
    NodePointer expectedPointer = mock(NodePointer.class);
    when(SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps)).thenReturn(expectedPointer);
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps);
    assertNotNull(result, "Result should not be null");
}
}