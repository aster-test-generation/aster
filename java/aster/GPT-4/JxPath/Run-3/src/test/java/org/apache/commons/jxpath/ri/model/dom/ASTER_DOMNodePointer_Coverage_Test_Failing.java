/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private DOMNodePointer parentNode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SiblingNodes_FirstBeforeSecond_JPtv4() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getBaseValue()).thenReturn(node1);
        when(pointer2.getBaseValue()).thenReturn(node2);
        Node firstChild = mock(Node.class);
        Node secondChild = mock(Node.class);
        when(firstChild.getNextSibling()).thenReturn(secondChild);
        when(secondChild.getNextSibling()).thenReturn(null);
        when(firstChild.equals(node1)).thenReturn(true);
        when(secondChild.equals(node2)).thenReturn(true);
        Node parentNode = mock(Node.class);
        when(parentNode.getFirstChild()).thenReturn(firstChild);
        DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, null);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assert result == -1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SiblingNodes_SecondBeforeFirst_HDJM5() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getBaseValue()).thenReturn(node1);
        when(pointer2.getBaseValue()).thenReturn(node2);
        Node firstChild = mock(Node.class);
        Node secondChild = mock(Node.class);
        when(firstChild.getNextSibling()).thenReturn(secondChild);
        when(secondChild.getNextSibling()).thenReturn(null);
        when(firstChild.equals(node2)).thenReturn(true);
        when(secondChild.equals(node1)).thenReturn(true);
        Node parentNode = mock(Node.class);
        when(parentNode.getFirstChild()).thenReturn(firstChild);
        DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, null);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElementNode_ntpR2() {
        Node elementNode = mock(Element.class);
        when(elementNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeList nodeList = mock(NodeList.class);
        when(nodeList.getLength()).thenReturn(0);
        when(elementNode.getChildNodes()).thenReturn(nodeList);
        DOMNodePointer pointer = new DOMNodePointer(elementNode, Locale.getDefault());
        pointer.setValue(mock(Element.class));
        verify(elementNode, times(0)).appendChild(any(Node.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithChildNodes_mhTy3() {
        Node elementNode = mock(Element.class);
        when(elementNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeList nodeList = mock(NodeList.class);
        when(nodeList.getLength()).thenReturn(1);
        when(elementNode.getChildNodes()).thenReturn(nodeList);
        when(nodeList.item(0)).thenReturn(mock(Node.class));
        DOMNodePointer pointer = new DOMNodePointer(elementNode, Locale.getDefault());
        Element newValue = mock(Element.class);
        NodeList newValueChildren = mock(NodeList.class);
        when(newValue.getChildNodes()).thenReturn(newValueChildren);
        when(newValueChildren.getLength()).thenReturn(1);
        when(newValueChildren.item(0)).thenReturn(mock(Node.class));
        pointer.setValue(newValue);
        verify(elementNode).appendChild(any(Node.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_tlkD4() {
        Node elementNode = mock(Element.class);
        when(elementNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeList nodeList = mock(NodeList.class);
        when(nodeList.getLength()).thenReturn(0);
        when(elementNode.getChildNodes()).thenReturn(nodeList);
        DOMNodePointer pointer = new DOMNodePointer(elementNode, Locale.getDefault());
        pointer.setValue("non-empty string");
        verify(elementNode).appendChild(any(Node.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_paCb0() {
        Node node = mock(Node.class);
        when(node.getNamespaceURI()).thenReturn("http://example.com/namespace");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        String namespaceURI = domNodePointer.getNamespaceURI();
        assert "http://example.com/namespace".equals(namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NodeIsElement_NoPrefix_fJHp1() {
        Element element = mock(Element.class);
        when(element.hasAttribute("test")).thenReturn(false);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("test");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.createAttribute(context, name);
        verify(element).setAttribute("test", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NodeIsElement_WithPrefix_KnownNamespace_fodS2() {
        Element element = mock(Element.class);
        NamespaceResolver nsResolver = mock(NamespaceResolver.class);
        when(nsResolver.getNamespaceURI("ns")).thenReturn("http://example.com/ns");
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("ns", "test");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.setNamespaceResolver(nsResolver);
        domNodePointer.createAttribute(context, name);
        verify(element).setAttributeNS("http://example.com/ns", "ns:test", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NodeIsElement_AttributeExists_EQXO4() {
        Element element = mock(Element.class);
        when(element.hasAttribute("test")).thenReturn(true);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("test");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.createAttribute(context, name);
        verify(element, never()).setAttribute("test", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeNoNamespace_KPyk2() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeDefaultNamespace_oaqv3() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://default.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://default.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodePrefixedNamespace_tpLd4() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns:prefix")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://prefixed.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://prefixed.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeNoNamespaceInParent_IrSp5() {
        Element element = mock(Element.class);
        Node parent = mock(Node.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        when(element.getParentNode()).thenReturn(parent);
        when(parent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) parent).getAttributeNode("xmlns")).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeNamespaceInParent_OhaH6() {
        Element element = mock(Element.class);
        Element parent = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        when(element.getParentNode()).thenReturn(parent);
        when(parent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parent.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://parent.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://parent.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNonElementNode_vquJ10() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        String result = DOMNodePointer.getNamespaceURI(node);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithDocumentNodeAndNullDocumentElement_asMx11() {
        Document doc = mock(Document.class);
        when(doc.getDocumentElement()).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(doc);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeAndMultipleLevels_gpiG12() {
        Element element = mock(Element.class);
        Element parent = mock(Element.class);
        Element grandParent = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        when(element.getParentNode()).thenReturn(parent);
        when(parent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parent.getAttributeNode("xmlns")).thenReturn(null);
        when(parent.getParentNode()).thenReturn(grandParent);
        when(grandParent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(grandParent.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://grandparent.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://grandparent.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNodeWithNonNullTrimmedText_eIoQ1() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment comment = mock(Comment.class);
        when(node).thenReturn(comment);
        when(comment.getData()).thenReturn(" Some text ");
        Object result = domNodePointer.getValue();
        assertEquals("Some text", result, "Should return trimmed text from comment node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNodeWithNullText_jHiC2() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment comment = mock(Comment.class);
        when(node).thenReturn(comment);
        when(comment.getData()).thenReturn(null);
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Should return empty string for null text in comment node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNodeWithEmptyText_ASqk3() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        Comment comment = mock(Comment.class);
        when(node).thenReturn(comment);
        when(comment.getData()).thenReturn("");
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Should return empty string for empty text in comment node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithWildcardAndMatchingLocalName_ReturnsTrue_PCkT4() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("prefix", "localName");
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespace");
        when(DOMNodePointer.getLocalName(node)).thenReturn("localName");
        when(DOMNodePointer.getNamespaceURI(node)).thenReturn("namespace");
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithNonMatchingLocalName_ReturnsFalse_ueiQ5() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("prefix", "localName");
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(false);
        when(DOMNodePointer.getLocalName(node)).thenReturn("differentName");
        assertFalse(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_nrMi10() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("target");
        when(node.getAttributes()).thenReturn(null); // Simulate PI node behavior
        assertTrue(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTest_NonMatchingTarget_ReturnsFalse_KyeN11() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("differentTarget");
        when(node.getAttributes()).thenReturn(null); // Simulate PI node behavior
        assertFalse(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValue_xSEQ0() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        NodePointer mockedNodePointer = mock(NodePointer.class);
        when(domNodePointer.createChild(context, name, index)).thenReturn(mockedNodePointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(mockedNodePointer).setValue(value);
        assertEquals(mockedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullIdAndNoParent_yHaK1() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("");
        String result = domNodePointer.asPath();
        assertEquals("/element[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullIdAndParentPathNotEndingWithSlash_YdhU2() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("parent");
        String result = domNodePointer.asPath();
        assertEquals("parent/element[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullIdAndParentPathEndingWithSlash_LDrF3() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("parent/");
        String result = domNodePointer.asPath();
        assertEquals("parent/element[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullNamespaceURI_oNjE4() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("");
        when(domNodePointer.getNamespaceURI()).thenReturn(null);
        String result = domNodePointer.asPath();
        assertEquals("/element[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullNamespaceURINoPrefix_Myln5() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("");
        when(domNodePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver().getPrefix("http://example.com")).thenReturn(null);
        String result = domNodePointer.asPath();
        assertEquals("/node()[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullNamespaceURIWithPrefix_TEkk6() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(parentNode.asPath()).thenReturn("");
        when(domNodePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver().getPrefix("http://example.com")).thenReturn("ex");
        String result = domNodePointer.asPath();
        assertEquals("/ex:element[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathProcessingInstructionNode_UNkR9() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        when(parentNode.asPath()).thenReturn("");
        String result = domNodePointer.asPath();
        assertEquals("/processing-instruction('target')[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_NonCommentNode_Eoqo4_GKuZ0() {
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNodeValue()).thenReturn("NodeValue");
    Object result = domNodePointer.getValue();
    assertEquals("NodeValue", result, "Should return the string value of the node.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_WithDocumentNode_UjoD0_cZTw0() {
    Node node = mock(Node.class);
    Document document = mock(Document.class);
    when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    when(document.getElementById("testID")).thenReturn(null);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = domNodePointer.getPointerByID(context, "testID");
    assertTrue(result instanceof NullPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_XMLNSPrefix_Rivg3_SuvM0() {
    Node node = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("xmlns", "http://www.w3.org/2000/xmlns/");
    when(pointer.getNamespaceResolver()).thenReturn(resolver);
    assertEquals("http://www.w3.org/2000/xmlns/", pointer.getNamespaceURI("xmlns"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NonExistingPrefix_dEvG4_Haks0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getParentNode()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = pointer.getNamespaceResolver();
    assertNull(resolver.getNamespaceURI("nonExisting"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_UnknownNamespace_kusk9_yuLv0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getParentNode()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = mock(NamespaceResolver.class);
    when(resolver.getNamespaceURI("unknown")).thenReturn(null);
    pointer.setNamespaceResolver(resolver);
    assertNull(pointer.getNamespaceURI("unknown"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_CommentNodeWithNonNullTrimmedText_eIoQ1_lBwG0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
    when(node.getNodeValue()).thenReturn(" Some text ");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    Object result = domNodePointer.getNodeValue();
    assertEquals("Some text", result, "Should return trimmed text from comment node.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTestWithNonMatchingLocalName_ReturnsFalse_ueiQ5_ZUOP0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    QName testName = new QName("prefix", "localName");
    NodeNameTest nodeNameTest = mock(NodeNameTest.class);
    when(nodeNameTest.getNodeName()).thenReturn(testName);
    when(nodeNameTest.isWildcard()).thenReturn(false);
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    when(domNodePointer.getLocalName(node)).thenReturn("differentName");
    when(domNodePointer.testNode(node, nodeNameTest)).thenReturn(false);
    assertFalse(domNodePointer.testNode(node, nodeNameTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_nrMi10_WbYd0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
    ProcessingInstruction piNode = mock(ProcessingInstruction.class);
    when(piNode.getTarget()).thenReturn("target");
    when(node.getNodeName()).thenReturn("target"); // Corrected method to simulate PI node behavior
    DOMNodePointer nodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertTrue(nodePointer.testNode(piTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_NonMatchingTarget_ReturnsFalse_KyeN11_DOOo0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    ProcessingInstructionTest piTest = new ProcessingInstructionTest("target");
    ProcessingInstruction piNode = mock(ProcessingInstruction.class);
    when(piNode.getTarget()).thenReturn("differentTarget");
    when(node.getNodeName()).thenReturn(null); // Corrected to simulate PI node behavior
    DOMNodePointer nodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(nodePointer.testNode(piTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullIdAndNoParent_yHaK1_IYpB0() {
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.asPath();
    assertEquals("/element[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullIdAndParentPathNotEndingWithSlash_YdhU2_zizp0() {
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.ELEMENT_NODE);
    when(node.getNodeName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("parent");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.asPath();
    assertEquals("parent/element[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullIdAndParentPathEndingWithSlash_LDrF3_PTqY0() {
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.ELEMENT_NODE);
    when(node.getNodeName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("parent/");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    String result = domNodePointer.asPath();
    assertEquals("parent/element[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullNamespaceURI_oNjE4_nuIL0() {
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("");
    when(domNodePointer.getNamespaceURI(anyString())).thenReturn(null);
    when(domNodePointer.asPath()).thenReturn("/element[1]");
    String result = domNodePointer.asPath();
    assertEquals("/element[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullNamespaceURIWithPrefix_TEkk6_GDvA0() {
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("");
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    when(namespaceResolver.getNamespaceURI("ex")).thenReturn("http://example.com");
    when(namespaceResolver.getPrefix("http://example.com")).thenReturn("ex");
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    when(domNodePointer.asPath()).thenCallRealMethod();
    String result = domNodePointer.asPath();
    assertEquals("/ex:element[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathTextNode_JAZz7_tEOI0() {
    Node node = mock(Node.class);
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, node);
    when(node.getNodeType()).thenReturn(org.w3c.dom.Node.TEXT_NODE);
    when(parentNode.asPath()).thenReturn("");
    when(domNodePointer.asPath()).thenReturn("/text()[1]");
    String result = domNodePointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathProcessingInstructionNode_UNkR9_kjno0() {
    Node node = mock(Node.class);
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(node.getNodeName()).thenReturn("target");
    when(parentNode.asPath()).thenReturn("");
    String result = domNodePointer.asPath();
    assertEquals("/processing-instruction('target')[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathDocumentNode_zpeZ10_lkYR0() {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Document.DOCUMENT_NODE);
    when(domNodePointer.getNamespaceResolver()).thenReturn(new NamespaceResolver());
    String result = domNodePointer.getNamespaceResolver().toString(); // Assuming toString() method to simulate asPath() functionality
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeAndEmptyAttributeValue_uTpJ14() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNamespaceURI()).thenReturn(null);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullValue_Szod1() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        NodePointer mockedNodePointer = mock(NodePointer.class);
        when(domNodePointer.createChild(context, name, index)).thenReturn(mockedNodePointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(mockedNodePointer).setValue(value);
        assertEquals(mockedNodePointer, result);
    }
}