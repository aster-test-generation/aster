/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
DynamicPointer dynamicPointer;
@Mock
    private Object bean;
@Mock
    private QName name;
@Mock
    private PageContextHandler handler;
@Mock
    private Locale locale;
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer parentNode;
@Mock
    private QName qName;
@Mock
    private PageContextHandler pageContextHandler;
@Mock
    private NodePointer startWith;
private DynamicPointer dynamicPointerWithParent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported() {
        QName qName = new QName("testNamespace", "testLocalName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported(), "Dynamic property declaration should be supported.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicPropertyDeclarationSupported_mKvN0() {
    QName qName = new QName("namespace", "localName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.equals(dynamicPointer), "Should return true when comparing the same object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertFalse(dynamicPointer.equals(null), "Should return false when comparing to null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object differentClassObject = new Object();
        assertFalse(dynamicPointer.equals(differentClassObject), "Should return false when comparing to an object of a different class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_ReturnsFalse() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer other = new DynamicPointer(name, new Object(), handler, locale);
        assertFalse(dynamicPointer.equals(other), "Should return false when beans are different.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName differentName = new QName("different");
        DynamicPointer other = new DynamicPointer(differentName, bean, handler, locale);
        assertFalse(dynamicPointer.equals(other), "Should return false when QNames are different.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields_ReturnsTrue() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer other = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.equals(other), "Should return true when all fields are the same.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_CflX0() {
    QName qName = new QName("namespace", "localName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(pointer.equals(pointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_jRNM1() {
    QName qName = new QName("namespace", "localName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
    assertFalse(pointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_eUWk2() {
    QName qName = new QName("namespace", "localName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
    Object differentClassObject = new Object();
    assertFalse(pointer.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentBean_HeIJ3() {
    QName qName = new QName("namespace", "localName");
    Object bean1 = new Object();
    Object bean2 = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer1 = new DynamicPointer(qName, bean1, handler, locale);
    DynamicPointer pointer2 = new DynamicPointer(qName, bean2, handler, locale);
    assertFalse(pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentName_ZsCI4() {
    QName qName1 = new QName("namespace", "localName1");
    QName qName2 = new QName("namespace", "localName2");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer1 = new DynamicPointer(qName1, bean, handler, locale);
    DynamicPointer pointer2 = new DynamicPointer(qName2, bean, handler, locale);
    assertFalse(pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameFields_HLab5() {
    QName qName = new QName("namespace", "localName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer pointer1 = new DynamicPointer(qName, bean, handler, locale);
    DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        // Act
        boolean result = dynamicPointer.isCollection();
        // Assert
        assertFalse(result, "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_HXJH0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    assertFalse(dynamicPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        // Initialize DynamicPointer with mocks
        dynamicPointer = new DynamicPointer(name, bean, null, null);
        // Setup
        int expectedHashCode = System.identityHashCode(bean);
        when(name.hashCode()).thenReturn(123);
        expectedHashCode += 123;
        // Execute
        int actualHashCode = dynamicPointer.hashCode();
        // Verify
        assertEquals(expectedHashCode, actualHashCode, "The hash code calculation should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_bhEp0() {
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + name.hashCode();
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_ZmgX1() {
        QName name = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean);
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_FwVq0_1() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(name);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_FwVq0_2() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(name);
    assertTrue(result instanceof DynamicAttributeIterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodeIterator_mPhg0() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    String property = "testProperty";
    boolean reverse = false;
    NodePointer startWith = null; // Assuming null is a valid value for simplicity.
    NodeIterator result = dynamicPointer.createNodeIterator(property, reverse, startWith);
    assertNotNull(result, "Expected non-null result from createNodeIterator");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        when(name.getName()).thenReturn("ExpectedName");
        QName result = dynamicPointer.getName();
        assertEquals("ExpectedName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_eNyU0() {
    QName expectedName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(expectedName, bean, handler, locale);
    QName actualName = dynamicPointer.getName();
    assertEquals(expectedName, actualName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_gzWf0_1() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_gzWf0_2() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertTrue(result instanceof DynamicPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_dBHg0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    String expectedPath = "/";
    String actualPath = dynamicPointer.asPath();
    assertEquals(expectedPath, actualPath);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int length = dynamicPointer.getLength();
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_xuGN0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    assertEquals(1, dynamicPointer.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        bean = new Object(); // Mock or create a real instance of Object as needed
        QName name = new QName("testName");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object result = dynamicPointer.getBaseValue();
        assertEquals(bean, result, "The getBaseValue method should return the bean object set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_tend0() {
    QName name = new QName("testName");
    Object expectedBean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, expectedBean, handler, locale);
    Object actualBean = dynamicPointer.getBaseValue();
    assertEquals(expectedBean, actualBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_NodeIsNull_ReturnsTrue() throws Exception {
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        // Arrange
        when(dynamicPointer.getNode()).thenReturn(null);
        // Act
        boolean result = dynamicPointer.isLeaf();
        // Assert
        assertTrue(result, "Expected isLeaf to return true when node is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_aDmL0() {
        QName name = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_lfEw1() {
        QName name = new QName("test");
        String atomicBean = "String is atomic";
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, atomicBean, handler, locale);
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_QPvW2() {
        QName name = new QName("test");
        List<Object> nonAtomicBean = new ArrayList<>();
        nonAtomicBean.add("List is non-atomic");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(name, nonAtomicBean, handler, locale);
        assertFalse(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_lFGX0() throws Exception {
    QName name = new QName("qualifiedName");
    Object bean = new Object();
    PageContextHandler pageContextHandler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, pageContextHandler, locale);
    DynamicPropertyPointer expectedPropertyPointer = new DynamicPropertyPointer(dynamicPointer, pageContextHandler);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithParent_ReturnsParentPath_WbCV0() throws Exception {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DOMNodePointer mockParentNodePointer = Mockito.mock(DOMNodePointer.class);
    Mockito.when(mockParentNodePointer.asPath()).thenReturn("/parent/path");
    DynamicPointer dynamicPointerWithParent = new DynamicPointer(mockParentNodePointer, name, bean, handler);
    String result = dynamicPointerWithParent.asPath();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithoutParent_ReturnsRootPath_eXQD0() throws Exception {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DOMNodePointer mockParentNodePointer = Mockito.mock(DOMNodePointer.class);
    Mockito.when(mockParentNodePointer.asPath()).thenReturn("/parent/path");
    DynamicPointer dynamicPointerWithParent = new DynamicPointer(mockParentNodePointer, name, bean, handler);
    DynamicPointer dynamicPointerWithoutParent = new DynamicPointer(name, bean, handler, locale);
    String result = "/"; // Assuming root path for the test case purpose
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_FwVq0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(name);
    assertNotNull(result);
    assertTrue(result instanceof DynamicAttributeIterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_gzWf0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);
    assertTrue(result instanceof DynamicPropertyPointer);
}
}