/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.jsp.PageContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageContextHandler_Test_Passing {
private PageContextHandler pageContextHandler;
@Mock
    private PageContext mockPageContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() throws Exception {
        pageContextHandler = new PageContextHandler();
        // Prepare enumerations for each scope
        Vector<String> pageScopeAttributes = new Vector<>();
        pageScopeAttributes.add("pageName");
        pageScopeAttributes.add("pageTitle");
        Vector<String> requestScopeAttributes = new Vector<>();
        requestScopeAttributes.add("requestId");
        requestScopeAttributes.add("requestType");
        Vector<String> sessionScopeAttributes = new Vector<>();
        sessionScopeAttributes.add("sessionId");
        sessionScopeAttributes.add("sessionUser");
        Vector<String> applicationScopeAttributes = new Vector<>();
        applicationScopeAttributes.add("appName");
        applicationScopeAttributes.add("appVersion");
        // Mocking the PageContext to return these enumerations
        when(mockPageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE))
            .thenReturn(pageScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE))
            .thenReturn(requestScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE))
            .thenReturn(sessionScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE))
            .thenReturn(applicationScopeAttributes.elements());
        // Call the method under test
        String[] propertyNames = pageContextHandler.getPropertyNames(mockPageContext);
        // Assertions
        assertNotNull(propertyNames);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() throws Exception {
        pageContextHandler = new PageContextHandler();
        // Prepare enumerations for each scope
        Vector<String> pageScopeAttributes = new Vector<>();
        pageScopeAttributes.add("pageName");
        pageScopeAttributes.add("pageTitle");
        Vector<String> requestScopeAttributes = new Vector<>();
        requestScopeAttributes.add("requestId");
        requestScopeAttributes.add("requestType");
        Vector<String> sessionScopeAttributes = new Vector<>();
        sessionScopeAttributes.add("sessionId");
        sessionScopeAttributes.add("sessionUser");
        Vector<String> applicationScopeAttributes = new Vector<>();
        applicationScopeAttributes.add("appName");
        applicationScopeAttributes.add("appVersion");
        // Mocking the PageContext to return these enumerations
        when(mockPageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE))
            .thenReturn(pageScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE))
            .thenReturn(requestScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE))
            .thenReturn(sessionScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE))
            .thenReturn(applicationScopeAttributes.elements());
        // Call the method under test
        String[] propertyNames = pageContextHandler.getPropertyNames(mockPageContext);
        // Assertions
        assertEquals(8, propertyNames.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_3() throws Exception {
        pageContextHandler = new PageContextHandler();
        // Prepare enumerations for each scope
        Vector<String> pageScopeAttributes = new Vector<>();
        pageScopeAttributes.add("pageName");
        pageScopeAttributes.add("pageTitle");
        Vector<String> requestScopeAttributes = new Vector<>();
        requestScopeAttributes.add("requestId");
        requestScopeAttributes.add("requestType");
        Vector<String> sessionScopeAttributes = new Vector<>();
        sessionScopeAttributes.add("sessionId");
        sessionScopeAttributes.add("sessionUser");
        Vector<String> applicationScopeAttributes = new Vector<>();
        applicationScopeAttributes.add("appName");
        applicationScopeAttributes.add("appVersion");
        // Mocking the PageContext to return these enumerations
        when(mockPageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE))
            .thenReturn(pageScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE))
            .thenReturn(requestScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE))
            .thenReturn(sessionScopeAttributes.elements());
        when(mockPageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE))
            .thenReturn(applicationScopeAttributes.elements());
        // Call the method under test
        String[] propertyNames = pageContextHandler.getPropertyNames(mockPageContext);
        // Assertions
        assertArrayEquals(new String[] {"appName", "appVersion", "pageName", "pageTitle", "requestId", "requestType", "sessionId", "sessionUser"}, propertyNames);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesEmpty_iFzz0_1() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesEmpty_iFzz0_2() {
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesSingleScope_nnUE1_1() {
        Vector<String> attributes = new Vector<>();
        attributes.add("attribute1");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesSingleScope_nnUE1_2() {
        Vector<String> attributes = new Vector<>();
        attributes.add("attribute1");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesSingleScope_nnUE1_3() {
        Vector<String> attributes = new Vector<>();
        attributes.add("attribute1");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals("attribute1", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesMultipleScopes_qukv2_1() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesMultipleScopes_qukv2_2() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesMultipleScopes_qukv2_3() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("pageAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesMultipleScopes_qukv2_4() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("sessionAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesDuplicateNames_Ycax3_1() {
        Vector<String> attributes = new Vector<>();
        attributes.add("duplicateAttribute");
        attributes.add("duplicateAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesDuplicateNames_Ycax3_2() {
        Vector<String> attributes = new Vector<>();
        attributes.add("duplicateAttribute");
        attributes.add("duplicateAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesDuplicateNames_Ycax3_3() {
        Vector<String> attributes = new Vector<>();
        attributes.add("duplicateAttribute");
        attributes.add("duplicateAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(attributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(new Vector().elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(new Vector().elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals("duplicateAttribute", result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_1() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_2() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertEquals(4, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_3() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("pageAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_4() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("requestAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_5() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("sessionAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesAllScopes_NyCe4_6() {
        Vector<String> pageAttributes = new Vector<>();
        pageAttributes.add("pageAttribute");
        Vector<String> requestAttributes = new Vector<>();
        requestAttributes.add("requestAttribute");
        Vector<String> sessionAttributes = new Vector<>();
        sessionAttributes.add("sessionAttribute");
        Vector<String> applicationAttributes = new Vector<>();
        applicationAttributes.add("applicationAttribute");
        PageContext pageContext = mock(PageContext.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(pageAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.REQUEST_SCOPE)).thenReturn(requestAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.SESSION_SCOPE)).thenReturn(sessionAttributes.elements());
        when(pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE)).thenReturn(applicationAttributes.elements());
        PageContextHandler handler = new PageContextHandler();
        String[] result = handler.getPropertyNames(pageContext);
        assertTrue(Arrays.asList(result).contains("applicationAttribute"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty() throws Exception {
        // Initialization is handled by Mockito annotations
        // Arrange
        String propertyName = "exampleProperty";
        Object expectedValue = "exampleValue";
        when(mockPageContext.findAttribute(propertyName)).thenReturn(expectedValue);
        // Act
        Object result = pageContextHandler.getProperty(mockPageContext, propertyName);
        // Assert
        assertEquals(expectedValue, result, "The returned property value should match the expected value.");
        verify(mockPageContext).findAttribute(propertyName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_Pmzh0() {
    PageContextHandler handler = new PageContextHandler();
    PageContext mockPageContext = mock(PageContext.class);
    String property = "attributeName";
    Object expectedValue = new Object();
    when(mockPageContext.findAttribute(property)).thenReturn(expectedValue);
    Object result = handler.getProperty(mockPageContext, property);
    assertEquals(expectedValue, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty() {
        pageContextHandler = new PageContextHandler();
        // Arrange
        String property = "testProperty";
        String value = "testValue";
        // Act
        pageContextHandler.setProperty(mockPageContext, property, value);
        // Assert
        verify(mockPageContext).setAttribute(property, value, PageContext.PAGE_SCOPE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetProperty_cvJt0() {
    PageContextHandler handler = new PageContextHandler();
    PageContext mockPageContext = mock(PageContext.class);
    String property = "testAttribute";
    String value = "testValue";
    handler.setProperty(mockPageContext, property, value);
    verify(mockPageContext).setAttribute(property, value, PageContext.PAGE_SCOPE);
}
}