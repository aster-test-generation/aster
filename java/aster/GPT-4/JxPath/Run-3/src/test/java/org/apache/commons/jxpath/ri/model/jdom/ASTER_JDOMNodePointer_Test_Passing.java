/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
@Mock
    private Element parentElement;
@Mock
    private ProcessingInstruction processingInstructionNode;
@Mock
    private List contentList;
@Mock
    private DOMNodePointer parent;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private Namespace namespace;
@Mock
    private Namespace mockNamespace;
@Mock
    private NamespaceResolver mockNamespaceResolver;
@Mock
    private NodePointer childNodePointer;
private JDOMNodePointer jdomNodePointerDocument;
private Locale locale;
@Mock
    private NamespaceResolver namespaceResolver;
private String id;
private NamespaceResolver localNamespaceResolver;
@Mock
    private Comment commentNode;
private Object node;
private JDOMNodePointer jdomNodePointer;
@Mock
    private Element element;
@Mock
    private Text textNode;
@Mock
    private Document document;
@Mock
    private Comment comment;
@Mock
    private ProcessingInstruction processingInstruction;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory factory;
@Mock
    private NodeIterator nodeIterator;
@Mock
    private NodePointer nodePointer;
private QName name;
private final int index = 0;
private final String prefix = "prefix";
private final String namespaceURI = "http://example.com/ns";
@Mock
    private Locale mockLocale;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodePointer startWith;
@Mock
    private JDOMNodeIterator expectedIterator;
@InjectMocks
    private JDOMNodePointer jdomnodepointer;
@Mock
    private Element mockElement;
@Mock
    private Document mockDocument;
private JDOMNodePointer jdomNodePointerElement;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        Element valueElement = new Element("test");
        valueElement.addContent(new Text("content"));
        jdomNodePointer.setValue(valueElement);
        verify(element).getContent();
        verify(element, times(1)).addContent(any(Element.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        Document valueDocument = new Document(new Element("root"));
        jdomNodePointer.setValue(valueDocument);
        verify(element).getContent();
        verify(element, times(1)).addContent(any(Element.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        Comment valueComment = new Comment("This is a comment");
        jdomNodePointer.setValue(valueComment);
        verify(element).getContent();
        verify(element).addContent(any(Comment.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        ProcessingInstruction valuePI = new ProcessingInstruction("target", "data");
        jdomNodePointer.setValue(valuePI);
        verify(element).getContent();
        verify(element).addContent(any(ProcessingInstruction.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullString() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        String nullString = null;
        jdomNodePointer.setValue(nullString);
        verify(element, never()).addContent(any(Text.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyString() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        String emptyString = "";
        jdomNodePointer.setValue(emptyString);
        verify(element, never()).addContent(any(Text.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithText_EEYR0() {
        Object node = new Text("Initial");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Updated Text");
        assertEquals("Updated Text", ((Text) node).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyText_pqyA1() {
        Text node = new Text("Initial");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("");
        assertTrue(((Text) node).getText().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_OxAU2() {
        Element node = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("Content"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof Element);
        assertEquals("Content", ((Text) ((Element) node.getContent(0)).getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument_UFSu3() {
        Element node = new Element("root");
        Document valueDocument = new Document(new Element("docRoot").addContent(new Text("Doc Content")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof Element);
        assertEquals("Doc Content", ((Text) ((Element) node.getContent(0)).getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_UgXM4() {
        Element node = new Element("root");
        CDATA cdata = new CDATA("CDATA Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof CDATA);
        assertEquals("CDATA Content", ((CDATA) node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction_JIrK5() {
        Element node = new Element("root");
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(pi);
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof ProcessingInstruction);
        assertEquals("data", ((ProcessingInstruction) node.getContent(0)).getData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment_iPxM6() {
        Element node = new Element("root");
        Comment comment = new Comment("Comment Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(comment);
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof Comment);
        assertEquals("Comment Content", ((Comment) node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullString_ZiJM7() {
        Element node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(null);
        assertTrue(node.getContent().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_bokk8() {
        Element node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Non-empty string");
        assertFalse(node.getContent().isEmpty());
        assertTrue(node.getContent(0) instanceof Text);
        assertEquals("Non-empty string", ((Text) node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyElementContent_fDaZ9() {
        Element node = new Element("root");
        Element emptyElement = new Element("empty");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(emptyElement);
        assertTrue(node.getContent().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentHavingMultipleElements_ecdC10() {
        Element node = new Element("root");
        Document doc = new Document(new Element("docRoot").addContent(new Element("child1")).addContent(new Element("child2")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(doc);
        assertFalse(node.getContent().isEmpty());
        assertEquals(2, node.getContentSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertEquals(2, node.getContentSize());
        assertTrue(node.getContent(0) instanceof Text);
        assertTrue(node.getContent(1) instanceof CDATA);
        assertEquals("Text1", ((Text) node.getContent(0)).getText());
        assertEquals("CDATA1", ((CDATA) node.getContent(1)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Mocking or creating the required parameters for JDOMNodePointer
        Object node = new Object(); // Assuming Object can be a placeholder for any node type
        Locale locale = Locale.getDefault(); // Use the default locale or any specific if required
        // Initialize JDOMNodePointer with mocked or real objects
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Since isCollection() always returns false, we assert that the returned value is false
        assertFalse(jdomNodePointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_mTbR0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    assertFalse(jDOMNodePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        node = new Object(); // Mocking or using a real object as needed
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        // Act
        Object result = jdomNodePointer.getImmediateNode();
        // Assert
        assertEquals(node, result, "The returned node should be the same as the one set in the constructor.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_ERDJ0() {
    Object expectedNode = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(expectedNode, locale);
    Object actualNode = jDOMNodePointer.getImmediateNode();
    assertEquals(expectedNode, actualNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        jdomNodePointer = new JDOMNodePointer(node, null);
        // Arrange
        int expectedHashCode = 123;
        when(node.hashCode()).thenReturn(expectedHashCode);
        // Act
        int actualHashCode = jdomNodePointer.hashCode();
        // Assert
        assertEquals(expectedHashCode, actualHashCode, "The hash code should match the mocked hash code of the node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_dxee0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    int expectedHashCode = node.hashCode();
    assertEquals(expectedHashCode, jDOMNodePointer.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_Ynce0() {
    Locale locale = new Locale("en");
    Object node = new Object();
    QName qName = new QName("testName");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodeIterator result = jDOMNodePointer.attributeIterator(qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        QName result = jdomNodePointer.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("elementName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        // Switching the node to a ProcessingInstruction
        jdomNodePointer = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("targetName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementHavingNamespace_lavG0() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("elementName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementNoNamespace_PVAz1() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("elementName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithProcessingInstruction_QSge2() {
        ProcessingInstruction pi = new ProcessingInstruction() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("targetName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementEmptyName_vPht4() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_WithElementHavingNamespace_kvDD0() {
    Element element = mock(Element.class);
    when(element.getNamespaceURI()).thenReturn("http://example.com/ns");
    JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
    String result = pointer.getNamespaceURI();
    assertEquals("http://example.com/ns", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithPrefix_EXsb0() {
        Element element = new Element("elementName", "prefix", "namespaceURI");
        String result = JDOMNodePointer.getPrefix(element);
        assertEquals("prefix", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_ElementWithoutPrefix_seqV1() {
        Element element = new Element("elementName", "namespaceURI");
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullElement_ROzQ4() {
        Element element = null;
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullAttribute_dPBH5() {
        Attribute attribute = null;
        String result = JDOMNodePointer.getPrefix(attribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NonElementNonAttributeObject_jwTs6() {
        Object nonElementNonAttribute = new Object();
        String result = JDOMNodePointer.getPrefix(nonElementNonAttribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking the necessary objects
        Object node = new Object();
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with mocked objects
        jdomnodepointer = new JDOMNodePointer(node, locale);
        // Call the method to test
        int length = jdomnodepointer.getLength();
        // Assert the expected result
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsOne_hGwB0() {
    Object node = new Object();
    Locale locale = new Locale("en");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    int length = jDOMNodePointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() throws Exception {
        // Mocking the required objects for JDOMNodePointer
        Object node = new Object(); // Assuming Object can be used as a node
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with mocked node and locale
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Execute the method to test
        NodeIterator result = jdomNodePointer.namespaceIterator();
        // Assertions to verify the behavior
        assertNotNull(result, "The result of namespaceIterator should not be null.");
        assertTrue(result instanceof JDOMNamespaceIterator, "The result should be an instance of JDOMNamespaceIterator.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_BPXd0() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodeIterator result = jDOMNodePointer.namespaceIterator();
    assertNotNull(result);
    assertTrue(result instanceof JDOMNamespaceIterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithEmptyElement_XxWS0() {
        Element element = new Element("testElement");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertTrue(pointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonEmptyElement_veAN1() {
        Element element = new Element("testElement");
        element.addContent(new Element("childElement"));
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertFalse(pointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocument_vYFp2() {
        Document document = new Document();
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        assertTrue(pointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        assertTrue(jdomNodePointer.equals(jdomNodePointer), "Should return true when comparing the same object");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        assertFalse(jdomNodePointer.equals(null), "Should return false when comparing to null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        Object differentClassObject = new Object();
        assertFalse(jdomNodePointer.equals(differentClassObject), "Should return false when comparing to an object of a different class");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_ReturnsFalse() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        Object anotherNode = new Object();
        JDOMNodePointer anotherJDOMNodePointer = new JDOMNodePointer(anotherNode, Locale.getDefault());
        assertFalse(jdomNodePointer.equals(anotherJDOMNodePointer), "Should return false when nodes are different");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_ReturnsTrue() throws Exception {
        node = new Object();
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        Object sameNode = node;
        JDOMNodePointer anotherJDOMNodePointer = new JDOMNodePointer(sameNode, Locale.getDefault());
        assertTrue(jdomNodePointer.equals(anotherJDOMNodePointer), "Should return true when nodes are the same");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_xKBC0() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_xeTY1() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_EqualNodes_jGlI2() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer1 = new JDOMNodePointer(node, locale);
        JDOMNodePointer pointer2 = new JDOMNodePointer(node, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNodes_pcks3() {
        Locale locale = Locale.getDefault();
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), locale);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullTest_ReturnsTrue_lYnu0() {
        NodePointer pointer = null;
        Object node = null;
        NodeTest test = null;
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_ElementNode_MatchingName_ReturnsTrue_NyrC1() {
        NodePointer pointer = null;
        Element node = new Element("testElement");
        QName testName = new QName("testElement");
        NodeNameTest test = new NodeNameTest(testName);
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_NonElementNode_ReturnsFalse_qXuA2() {
        NodePointer pointer = null;
        Object node = new Object();
        QName testName = new QName("testElement");
        NodeNameTest test = new NodeNameTest(testName);
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_ElementNode_NonMatchingName_ReturnsFalse_BnvT3() {
        NodePointer pointer = null;
        Element node = new Element("differentElement");
        QName testName = new QName("testElement");
        NodeNameTest test = new NodeNameTest(testName);
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_ElementNode_MatchingLocalNameAndNamespace_ReturnsTrue_JyAe14() {
        NodePointer pointer = null;
        Element node = new Element("testElement", "http://example.com");
        QName testName = new QName("http://example.com", "testElement");
        NodeNameTest test = new NodeNameTest(testName);
        assertTrue(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTest_ElementNode_NonMatchingLocalNameAndNamespace_ReturnsFalse_LTfl15() {
        NodePointer pointer = null;
        Element node = new Element("differentElement", "http://example.com");
        QName testName = new QName("http://example.com", "testElement");
        NodeNameTest test = new NodeNameTest(testName);
        assertFalse(JDOMNodePointer.testNode(pointer, node, test));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithElement_OvHy0() {
        Element element = mock(Element.class);
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        assertEquals("", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithComment_VwUM1() {
        Comment comment = mock(Comment.class);
        when(comment.getText()).thenReturn(" This is a comment ");
        JDOMNodePointer pointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertEquals("This is a comment", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithText_TrhW2() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(" Some text ");
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("Some text", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithProcessingInstruction_wPgx3() {
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(pi.getData()).thenReturn(" data ");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        assertEquals("data", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullComment_SqPz7() {
        Comment comment = mock(Comment.class);
        when(comment.getText()).thenReturn(null);
        JDOMNodePointer pointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertNull(pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyText_GYXk8() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn("");
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.getDefault());
        assertEquals("", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyProcessingInstruction_UWaj9() {
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(pi.getData()).thenReturn("");
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        assertEquals("", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullText_LxIe10() {
        Text text = mock(Text.class);
        when(text.getText()).thenReturn(null);
        JDOMNodePointer pointer = new JDOMNodePointer(text, Locale.getDefault());
        assertNull(pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullProcessingInstruction_EzRi11() {
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(pi.getData()).thenReturn(null);
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        assertNull(pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLanguageWithNullCurrentLanguage_IJDB0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.ENGLISH);
    boolean result = nodePointer.isLanguage("EN");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_Shgk0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodePointer result = jDOMNodePointer.namespacePointer("testPrefix");
    assertNotNull(result);
    assertEquals(JDOMNamespacePointer.class, result.getClass());
    assertEquals("testPrefix", result.getName().getPrefix());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithElement_YSuz0() {
    Element element = new Element("testElement");
    String result = JDOMNodePointer.getLocalName(element);
    assertEquals("testElement", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithNonRelevantObject_mKpF2() {
    Object nonRelevantObject = new Object();
    String result = JDOMNodePointer.getLocalName(nonRelevantObject);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage() throws Exception {
        // Assuming JDOMNodePointer has a constructor that accepts node and locale
        jdomnodepointer = new JDOMNodePointer(node, Locale.ENGLISH);
        // Setup the mock to return a specific language when findEnclosingAttribute is called
        when(jdomnodepointer.findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE)).thenReturn("en");
        // Execute the method under test
        String language = jdomnodepointer.getLanguage();
        // Verify the interaction with the mock
        verify(jdomnodepointer).findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE);
        // Assert the expected result
        assertEquals("en", language, "The language should be 'en'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLanguage_oWxR0() {
    Object node = new Object(); // Assuming node is of type Object as per JDOMNodePointer constructor
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String expectedLanguage = "en"; // Assuming the method findEnclosingAttribute returns "en" for "lang"
    String actualLanguage = jDOMNodePointer.getLanguage();
    assertEquals(expectedLanguage, actualLanguage);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix() throws Exception {
        // Setup the JDOMNodePointer with a mocked node
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        // Test for the XML namespace
        String result = jdomNodePointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullElement() throws Exception {
        // Setup the JDOMNodePointer with a mocked node
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        // Test when element is null
        when(mockDocument.getRootElement()).thenReturn(null);
        // Execute the method
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        String result = jdomNodePointer.getNamespaceURI("testPrefix");
        // Verify and assert results
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XMLPrefix_yqTh0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        String uri = pointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", uri);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        node = new Object(); // Assuming node is just an Object for simplicity.
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        Object result = jdomNodePointer.getBaseValue();
        assertEquals(node, result, "The getBaseValue method should return the node set in constructor.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_Uofj0() {
    Object expectedNode = new Object();
    Locale locale = Locale.getDefault();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(expectedNode, locale);
    Object actualNode = jDOMNodePointer.getBaseValue();
    assertEquals(expectedNode, actualNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_OxAU2_1() {
        Element node = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("Content"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_OxAU2_2() {
        Element node = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("Content"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertTrue(node.getContent(0) instanceof Element);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElement_OxAU2_3() {
        Element node = new Element("root");
        Element valueElement = new Element("child");
        valueElement.addContent(new Text("Content"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueElement);
        assertEquals("Content", ((Text) ((Element) node.getContent(0)).getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument_UFSu3_1() {
        Element node = new Element("root");
        Document valueDocument = new Document(new Element("docRoot").addContent(new Text("Doc Content")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument_UFSu3_2() {
        Element node = new Element("root");
        Document valueDocument = new Document(new Element("docRoot").addContent(new Text("Doc Content")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertTrue(node.getContent(0) instanceof Element);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocument_UFSu3_3() {
        Element node = new Element("root");
        Document valueDocument = new Document(new Element("docRoot").addContent(new Text("Doc Content")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(valueDocument);
        assertEquals("Doc Content", ((Text) ((Element) node.getContent(0)).getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_UgXM4_1() {
        Element node = new Element("root");
        CDATA cdata = new CDATA("CDATA Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_UgXM4_2() {
        Element node = new Element("root");
        CDATA cdata = new CDATA("CDATA Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertTrue(node.getContent(0) instanceof CDATA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_UgXM4_3() {
        Element node = new Element("root");
        CDATA cdata = new CDATA("CDATA Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertEquals("CDATA Content", ((CDATA) node.getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction_JIrK5_1() {
        Element node = new Element("root");
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(pi);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction_JIrK5_2() {
        Element node = new Element("root");
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(pi);
        assertTrue(node.getContent(0) instanceof ProcessingInstruction);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithProcessingInstruction_JIrK5_3() {
        Element node = new Element("root");
        ProcessingInstruction pi = new ProcessingInstruction("target", "data");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(pi);
        assertEquals("data", ((ProcessingInstruction) node.getContent(0)).getData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment_iPxM6_1() {
        Element node = new Element("root");
        Comment comment = new Comment("Comment Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(comment);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment_iPxM6_2() {
        Element node = new Element("root");
        Comment comment = new Comment("Comment Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(comment);
        assertTrue(node.getContent(0) instanceof Comment);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithComment_iPxM6_3() {
        Element node = new Element("root");
        Comment comment = new Comment("Comment Content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(comment);
        assertEquals("Comment Content", ((Comment) node.getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_bokk8_1() {
        Element node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Non-empty string");
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_bokk8_2() {
        Element node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Non-empty string");
        assertTrue(node.getContent(0) instanceof Text);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString_bokk8_3() {
        Element node = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue("Non-empty string");
        assertEquals("Non-empty string", ((Text) node.getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentHavingMultipleElements_ecdC10_1() {
        Element node = new Element("root");
        Document doc = new Document(new Element("docRoot").addContent(new Element("child1")).addContent(new Element("child2")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(doc);
        assertFalse(node.getContent().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithDocumentHavingMultipleElements_ecdC10_2() {
        Element node = new Element("root");
        Document doc = new Document(new Element("docRoot").addContent(new Element("child1")).addContent(new Element("child2")));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(doc);
        assertEquals(2, node.getContentSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11_1() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertEquals(2, node.getContentSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11_2() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertTrue(node.getContent(0) instanceof Text);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11_3() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertTrue(node.getContent(1) instanceof CDATA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11_4() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertEquals("Text1", ((Text) node.getContent(0)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListContent_weMq11_5() {
        Element node = new Element("root");
        ArrayList content = new ArrayList();
        content.add(new Text("Text1"));
        content.add(new CDATA("CDATA1"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(content);
        assertEquals("CDATA1", ((CDATA) node.getContent(1)).getText());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_1() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        QName result = jdomNodePointer.getName();
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_2() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        QName result = jdomNodePointer.getName();
        assertEquals("elementName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_1() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        // Switching the node to a ProcessingInstruction
        jdomNodePointer = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction_2() {
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointer = new JDOMNodePointer(element, null);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        // Switching the node to a ProcessingInstruction
        jdomNodePointer = new JDOMNodePointer(processingInstruction, null);
        QName result = jdomNodePointer.getName();
        assertEquals("targetName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementHavingNamespace_lavG0_1() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementHavingNamespace_lavG0_2() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("elementName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementNoNamespace_PVAz1_1() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithProcessingInstruction_QSge2_1() {
        ProcessingInstruction pi = new ProcessingInstruction() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithProcessingInstruction_QSge2_2() {
        ProcessingInstruction pi = new ProcessingInstruction() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(pi, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("targetName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithElementEmptyName_vPht4_2() {
        Element element = new Element() {
        };
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_1() throws Exception {
        // Mocking the required objects for JDOMNodePointer
        Object node = new Object(); // Assuming Object can be used as a node
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with mocked node and locale
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Execute the method to test
        NodeIterator result = jdomNodePointer.namespaceIterator();
        // Assertions to verify the behavior
        assertNotNull(result, "The result of namespaceIterator should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_2() throws Exception {
        // Mocking the required objects for JDOMNodePointer
        Object node = new Object(); // Assuming Object can be used as a node
        Locale locale = Locale.getDefault();
        // Initialize JDOMNodePointer with mocked node and locale
        jdomNodePointer = new JDOMNodePointer(node, locale);
        // Execute the method to test
        NodeIterator result = jdomNodePointer.namespaceIterator();
        // Assertions to verify the behavior
        assertTrue(result instanceof JDOMNamespaceIterator, "The result should be an instance of JDOMNamespaceIterator.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_BPXd0_1() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodeIterator result = jDOMNodePointer.namespaceIterator();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_BPXd0_2() {
    Locale locale = new Locale("en");
    Object node = new Object();
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodeIterator result = jDOMNodePointer.namespaceIterator();
    assertTrue(result instanceof JDOMNamespaceIterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithElementHavingNoContent() {
        Locale locale = Locale.getDefault();
        jdomNodePointerElement = new JDOMNodePointer(mockElement, locale);
        jdomNodePointerDocument = new JDOMNodePointer(mockDocument, locale);
        when(mockElement.getContent()).thenReturn(java.util.Collections.emptyList());
        assertTrue(jdomNodePointerElement.isLeaf(), "Element with no content should be a leaf");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocumentHavingNoContent() {
        Locale locale = Locale.getDefault();
        jdomNodePointerElement = new JDOMNodePointer(mockElement, locale);
        jdomNodePointerDocument = new JDOMNodePointer(mockDocument, locale);
        when(mockDocument.getContent()).thenReturn(java.util.Collections.emptyList());
        assertTrue(jdomNodePointerDocument.isLeaf(), "Document with no content should be a leaf");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithUnknownNamespacePrefix_1() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        QName name = new QName("unknownPrefix", "testName");
        when(namespaceResolver.getNamespaceURI("unknownPrefix")).thenReturn(null);
        Exception exception = assertThrows(JXPathException.class, () -> {
            jdomNodePointer.createAttribute(context, name);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NullNodeTest_ReturnsTrue() throws Exception {
        node = new Object(); // Assuming node is just an Object for the purpose of this test.
        locale = Locale.getDefault();
        jdomNodePointer = new JDOMNodePointer(node, locale);
        assertTrue(JDOMNodePointer.testNode(nodePointer, node, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_TextNode_ReturnsTrue() throws Exception {
        node = new Object(); // Assuming node is just an Object for the purpose of this test.
        locale = Locale.getDefault();
        jdomNodePointer = new JDOMNodePointer(node, locale);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
        Text textNode = mock(Text.class);
        assertTrue(JDOMNodePointer.testNode(nodePointer, textNode, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue() throws Exception {
        node = new Object(); // Assuming node is just an Object for the purpose of this test.
        locale = Locale.getDefault();
        jdomNodePointer = new JDOMNodePointer(node, locale);
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        when(piTest.getTarget()).thenReturn("testPI");
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getTarget()).thenReturn("testPI");
        assertTrue(JDOMNodePointer.testNode(nodePointer, piNode, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_Shgk0_1() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodePointer result = jDOMNodePointer.namespacePointer("testPrefix");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_Shgk0_2() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodePointer result = jDOMNodePointer.namespacePointer("testPrefix");
    assertEquals(JDOMNamespacePointer.class, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_Shgk0_3() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    NodePointer result = jDOMNodePointer.namespacePointer("testPrefix");
    assertEquals("testPrefix", result.getName().getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_1() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        when(jdomNodePointer.createChild(context, name, 0)).thenReturn(childNodePointer);
        Object value = new Object();
        int index = 0;
        // Execute the method to test
        NodePointer result = jdomNodePointer.createChild(context, name, index, value);
        // Verify the interactions
        verify(jdomNodePointer).createChild(context, name, index);
        verify(childNodePointer).setValue(value);
        // Assertions to check the returned value
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_2() throws Exception {
        jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        when(jdomNodePointer.createChild(context, name, 0)).thenReturn(childNodePointer);
        Object value = new Object();
        int index = 0;
        // Execute the method to test
        NodePointer result = jdomNodePointer.createChild(context, name, index, value);
        // Verify the interactions
        verify(jdomNodePointer).createChild(context, name, index);
        verify(childNodePointer).setValue(value);
        // Assertions to check the returned value
        assertEquals(childNodePointer, result, "The returned NodePointer should be the one created and set.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_DocumentNode() throws Exception {
        // Setup the JDOMNodePointer with a mocked node
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        // Setup for Document node
        when(mockDocument.getRootElement()).thenReturn(mockElement);
        when(mockElement.getNamespace("testPrefix")).thenReturn(mockNamespace);
        when(mockNamespace.getURI()).thenReturn("http://example.com/test");
        // Execute the method
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        String result = jdomNodePointer.getNamespaceURI("testPrefix");
        // Verify and assert results
        assertEquals("http://example.com/test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_ElementNode() throws Exception {
        // Setup the JDOMNodePointer with a mocked node
        jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
        // Setup for Element node
        when(mockElement.getNamespace("testPrefix")).thenReturn(mockNamespace);
        when(mockNamespace.getURI()).thenReturn("http://example.com/test");
        // Execute the method
        jdomNodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
        String result = jdomNodePointer.getNamespaceURI("testPrefix");
        // Verify and assert results
        assertEquals("http://example.com/test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttributeReturnsValue() throws Exception {
        // Setup the mocks
        when(element.getAttributeValue("targetAttribute", namespace)).thenReturn("value");
        when(element.getAttributeValue("emptyAttribute", namespace)).thenReturn("");
        Object node = element; // Mocked element is the node
        String result = JDOMNodePointer.findEnclosingAttribute(node, "targetAttribute", namespace);
        assertEquals("value", result, "Should return the attribute value when present and not empty");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttributeReturnsNullForEmptyValue() throws Exception {
        // Setup the mocks
        when(element.getAttributeValue("targetAttribute", namespace)).thenReturn("value");
        when(element.getAttributeValue("emptyAttribute", namespace)).thenReturn("");
        Object node = element; // Mocked element is the node
        String result = JDOMNodePointer.findEnclosingAttribute(node, "emptyAttribute", namespace);
        assertNull(result, "Should return null when the attribute value is empty");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttributeReturnsNullWhenNoAttribute() throws Exception {
        // Setup the mocks
        when(element.getAttributeValue("targetAttribute", namespace)).thenReturn("value");
        when(element.getAttributeValue("emptyAttribute", namespace)).thenReturn("");
        when(element.getAttributeValue("nonexistentAttribute", namespace)).thenReturn(null);
        Object node = element; // Mocked element is the node
        String result = JDOMNodePointer.findEnclosingAttribute(node, "nonexistentAttribute", namespace);
        assertNull(result, "Should return null when the attribute does not exist");
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testCreateChildFailure_IkmX1_cLSQ0() {
        assertThrows(JXPathAbstractFactoryException.class, () -> {
            JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
            JXPathContext context = JXPathContext.newContext(new Object());
            QName name = new QName("testNode");
            int index = 0;
            nodePointer.createChild(context, name, index);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_SameNode_wUEs0() throws Exception {
    Element node = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    when(pointer1.getBaseValue()).thenReturn(node);
    when(pointer2.getBaseValue()).thenReturn(node);
    int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_DifferentNodes_iJOC0() throws Exception {
    Element node = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    Object node1 = new Object();
    Object node2 = new Object();
    when(pointer1.getBaseValue()).thenReturn(node1);
    when(pointer2.getBaseValue()).thenReturn(node2);
    List<Object> children = new ArrayList<>();
    children.add(node1);
    children.add(node2);
    when(node.getContent()).thenReturn(children);
    int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
    assertTrue(result < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_AttributeAndElement_EJqS0() throws Exception {
    Element node = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    Object node1 = mock(Attribute.class);
    Object node2 = new Object();
    when(pointer1.getBaseValue()).thenReturn(node1);
    when(pointer2.getBaseValue()).thenReturn(node2);
    int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_ElementAndAttribute_OjXV0() throws Exception {
    Element node = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    Object node1 = new Object();
    Object node2 = mock(Attribute.class);
    when(pointer1.getBaseValue()).thenReturn(node1);
    when(pointer2.getBaseValue()).thenReturn(node2);
    int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_ThrowsExceptionForNonElementNode_VKoH0() throws Exception {
    Element node = mock(Element.class);
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    Object nonElementNode = new Object();
    JDOMNodePointer nonElementPointer = new JDOMNodePointer(nonElementNode, Locale.getDefault());
    when(pointer1.getBaseValue()).thenReturn(new Object());
    when(pointer2.getBaseValue()).thenReturn(new Object());
    assertThrows(IllegalStateException.class, () -> nonElementPointer.compareChildNodePointers(pointer1, pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextAndNonEmptyString_cZwo0_nmOD0() {
    Text node = new Text("");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("Hello World");
    assertEquals("Hello World", node.getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextAndEmptyString_btoE1_RGsz0() {
    Text node = new Text("Initial");
    Element parent = new Element("dummyElement"); // Corrected by adding a required name for the Element constructor
    parent.addContent(node);
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("");
    assertFalse(parent.getContent().contains(node));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndElementValue_mVOF2_KbbN0() {
    Element node = new Element("root");
    Element value = new Element("value");
    value.addContent(new Text("Content"));
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("Content", ((Text)node.getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndDocumentValue_VULF3_zlSa0() {
    Element node = new Element("element");
    Document value = new Document(new Element("root"));
    value.getRootElement().addContent(new Text("Doc Content"));
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("Doc Content", ((Text)((Element)node.getContent(0)).getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndTextValue_yBAN4_aZGq0() {
    Element node = new Element("elementName"); // Correctly using the constructor with a string argument
    Text value = new Text("Text Content");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("Text Content", ((Text)node.getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndCDATAValue_AwgJ5_Cshh0() {
    Element node = new Element("elementName"); // Corrected to include required argument "elementName"
    CDATA value = new CDATA("CDATA Content");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("CDATA Content", ((CDATA)node.getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndPIValue_ITuz6_XHLq0_1() {
    Element node = new Element("elementName"); // Corrected to include required argument "elementName"
    ProcessingInstruction value = new ProcessingInstruction("target", "data");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("target", ((ProcessingInstruction)node.getContent(0)).getTarget());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndPIValue_ITuz6_XHLq0_2() {
    Element node = new Element("elementName"); // Corrected to include required argument "elementName"
    ProcessingInstruction value = new ProcessingInstruction("target", "data");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("data", ((ProcessingInstruction)node.getContent(0)).getData());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndCommentValue_ebUK7_gQQV0() {
    Element node = new Element("elementName"); // Corrected by adding a required string argument for the element name
    Comment value = new Comment("Comment Content");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(value);
    assertEquals("Comment Content", ((Comment)node.getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndStringValue_dVSx8_bWqa0() {
    Element node = new Element("elementName"); // Corrected by specifying an element name
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("String Content");
    assertEquals("String Content", ((Text)node.getContent(0)).getText());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndNullValue_HtaV9_wEhT0() {
    Element node = new Element("testElement");
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(null);
    assertTrue(node.getContent().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndEmptyStringValue_QrZT10_FUpV0() {
    Element node = new Element("testElement"); // Corrected by adding a required string argument for the element name
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue("");
    assertTrue(node.getContent().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithElementAndNonStringObject_GNib11_SWcW0() {
    Element node = new Element("testElement"); // Corrected by adding required name parameter
    Object nonStringObject = new Object();
    JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
    pointer.setValue(nonStringObject);
    assertTrue(node.getContent().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_NwXx0_IGed0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNode");
    int index = 0;
    NodePointer result = nodePointer.createChild(context, name, index);
    Assertions.assertNotNull(result, "Expected non-null NodePointer on successful creation");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNonZeroIndex_FLaE2_kkNm0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNode");
    int index = 1;
    NodePointer result = nodePointer.createChild(context, name, index);
    Assertions.assertNotNull(result, "Expected non-null NodePointer when index is non-zero");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithWholeCollectionIndex_PIoj3_JjAm0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testNode");
    int index = JDOMNodePointer.WHOLE_COLLECTION;
    NodePointer result = nodePointer.createChild(context, name, index);
    Assertions.assertNotNull(result, "Expected non-null NodePointer when index is WHOLE_COLLECTION");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNamespace_numL4_EXKI0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("ns", "testNode");
    int index = 0;
    NodePointer result = nodePointer.createChild(context, name, index);
    assertNotNull(result, "Expected non-null NodePointer with namespace");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_bndy0() throws Exception {
    Locale mockLocale = Locale.getDefault();
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer((Object) null, mockLocale);
    QName name = new QName("testName");
    NodeIterator result = jdomNodePointer.attributeIterator(name);
    assertTrue(result instanceof JDOMAttributeIterator);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_fJBP0() throws Exception {
    Object node = new Object(); // Assuming node is just an Object for mocking
    JDOMNodePointer jdomnodepointer = new JDOMNodePointer(node, Locale.getDefault());
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
    Field field = JDOMNodePointer.class.getDeclaredField("localNamespaceResolver");
    field.setAccessible(true);
    field.set(jdomnodepointer, namespaceResolver);
    String result = jdomnodepointer.getNamespaceResolver().getNamespaceURI("prefix");
    verify(namespaceResolver).getNamespaceURI("prefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithElementHavingPrefix_ZDxn0() throws Exception {
    Locale locale = null; // Locale needs to be explicitly defined as null
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer((Object) null, locale);
    when(element.getNamespacePrefix()).thenReturn("prefix");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithElementNoPrefix_dVLa0() throws Exception {
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer((Object) null, Locale.getDefault());
    when(element.getNamespacePrefix()).thenReturn("");
    assertNull(jdomNodePointer.getPrefix(element), "Null should be returned when Element has no prefix.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_TextNode_ReturnsTrue_LpJp5_Acwz0() {
    NodePointer pointer = null;
    NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
    assertTrue(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_CommentNode_ReturnsTrue_FVDF6_MikY0() {
    NodePointer pointer = null;
    Comment node = new Comment(""); // Corrected by adding the required empty string parameter
    NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    assertTrue(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_ProcessingInstructionTest_MatchingTarget_ReturnsTrue_lCeH8_HQSB0() {
    NodePointer pointer = null;
    ProcessingInstruction node = new ProcessingInstruction("target", "data");
    ProcessingInstructionTest test = new ProcessingInstructionTest("target");
    assertTrue(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_WildcardWithNoPrefix_ReturnsTrue_aaZG10_GvJG0() {
    NodePointer pointer = null;
    Element node = new Element("anyElement");
    QName testName = new QName("*");
    NodeNameTest test = new NodeNameTest(testName, null);
    assertTrue(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_WildcardWithMatchingNamespace_ReturnsTrue_ogSz11_GJeS0() {
    NodePointer pointer = null;
    Element node = new Element("anyElement", "http://example.com");
    QName testName = new QName("http://example.com", "*");
    NodeNameTest test = new NodeNameTest(testName, "namespace");
    assertTrue(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTest_WildcardWithNonMatchingNamespace_ReturnsFalse_zpnb12_EIJB0() {
    NodePointer pointer = null;
    Element node = new Element("anyElement", "http://example.com");
    QName testName = new QName("http://different.com", "*");
    NodeNameTest test = new NodeNameTest(testName, "someType"); // Assuming "someType" is a valid type for the second parameter
    assertFalse(JDOMNodePointer.testNode(pointer, node, test));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_NodeIsRemovedFromParent_wgHc0() throws Exception {
    when(parentElement.getContent()).thenReturn(contentList);
    Locale locale = Locale.getDefault(); // Assuming default locale for simplicity
    jdomNodePointer = new JDOMNodePointer(parentElement, locale);
    Field nodeParentField = JDOMNodePointer.class.getDeclaredField("nodeParent");
    nodeParentField.setAccessible(true);
    nodeParentField.set(jdomNodePointer, parentElement);
    jdomNodePointer.remove();
    verify(contentList).remove(node);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithElement_bxyz0() throws Exception {
    Element element = mock(Element.class);
    String expectedElementName = "elementName";
    when(element.getName()).thenReturn(expectedElementName);
    String result = JDOMNodePointer.getLocalName(element);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithNull_APmM0() throws Exception {
    Element element = mock(Element.class);
    String result = JDOMNodePointer.getLocalName(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalNameWithUnsupportedType_zzxM0() throws Exception {
    Element element = mock(Element.class);
    Object unsupportedNode = new Object();
    String result = JDOMNodePointer.getLocalName(unsupportedNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithProcessingInstruction_huBO0() throws Exception {
    when(parent.asPath()).thenReturn("/parentPath");
    when(processingInstruction.getTarget()).thenReturn("target");
    jdomNodePointer = new JDOMNodePointer(parent, processingInstruction);
    String path = jdomNodePointer.asPath();
    assertEquals("/parentPath/processing-instruction('target')[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NullNode_OcOj1_EYHA0() {
    JDOMNodePointer pointer = new JDOMNodePointer((Object) null, Locale.getDefault(), null);
    String uri = pointer.getNamespaceURI("anyPrefix");
    assertNull(uri);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_ElementNodeWithNamespace_nTKK3_kOxS0() {
    Element element = Mockito.mock(Element.class);
    when(element.getNamespaceURI()).thenReturn("http://example.com/ns");
    JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
    String uri = pointer.getNamespaceURI("existingPrefix");
    assertEquals("http://example.com/ns", uri);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_ElementNodeWithoutNamespace_iRUv4_sGDj0() {
    Element element = Mockito.mock(Element.class); // Correctly using Mockito to create a mock Element
    JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
    String uri = pointer.getNamespaceURI("nonExistingPrefix");
    assertNull(uri);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_AttributePresent_Mwun0_yEHK0() {
    Element element = new Element("testElement");
    Namespace ns = Namespace.getNamespace("prefix", "uri");
    element.setAttribute("targetAttr", "value", ns);
    String result = JDOMNodePointer.findEnclosingAttribute(element, "targetAttr", ns);
    assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_AttributeAbsent_TTJD1_EOZO0() {
    Element element = new Element("testElement");
    Namespace ns = Namespace.getNamespace("prefix", "uri");
    String result = JDOMNodePointer.findEnclosingAttribute(element, "nonexistentAttr", ns);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_NullElement_NSGT2_jyvp0() {
    Namespace ns = Namespace.getNamespace("prefix", "uri");
    String result = JDOMNodePointer.findEnclosingAttribute(null, "anyAttr", ns);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_ParentHasAttribute_dvEq3_jIVY0() {
    Element child = new Element("child");
    Element parent = new Element("parent");
    Namespace ns = Namespace.getNamespace("prefix", "uri");
    parent.setAttribute("targetAttr", "value", ns);
    parent.addContent(child); // Correct way to set parent in JDOM
    String result = JDOMNodePointer.findEnclosingAttribute(child, "targetAttr", ns);
    assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindEnclosingAttribute_DeepNesting_obLN4_MSTm0() {
    Element child = new Element("child");
    Element parent = new Element("parent");
    Element grandparent = new Element("grandparent");
    Namespace ns = Namespace.getNamespace("prefix", "uri");
    grandparent.setAttribute("targetAttr", "value", ns);
    grandparent.addContent(parent);
    parent.addContent(child);
    String result = JDOMNodePointer.findEnclosingAttribute(child, "targetAttr", ns);
    assertEquals("value", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolverNotNull_BZWG0_pXsL0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver resolver = nodePointer.getNamespaceResolver();
    assertNotNull(resolver, "NamespaceResolver should not be null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolverConsistency_IllR1_XAXL0() {
    JDOMNodePointer nodePointer = new JDOMNodePointer(new Object(), Locale.getDefault());
    NamespaceResolver resolver1 = nodePointer.getNamespaceResolver();
    NamespaceResolver resolver2 = nodePointer.getNamespaceResolver();
    assertSame(resolver1, resolver2, "NamespaceResolver should be the same on multiple calls");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_DocumentNode_UCEd0() throws Exception {
    jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
    when(mockDocument.getRootElement()).thenReturn(mockElement);
    when(mockElement.getNamespaceURI()).thenReturn("http://example.com/test");
    jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
    String result = jdomNodePointer.getNamespaceURI("testPrefix");
    assertEquals("http://example.com/test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_ElementNode_kMig0() throws Exception {
    jdomNodePointer = new JDOMNodePointer(mockDocument, Locale.getDefault());
    when(mockElement.getNamespaceURI()).thenReturn("http://example.com/test");
    jdomNodePointer = new JDOMNodePointer(mockElement, Locale.getDefault());
    String result = jdomNodePointer.getNamespaceURI("testPrefix");
    assertEquals("http://example.com/test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithUnknownNamespacePrefix_DfmV0_1() throws Exception {
    Object element = new Object(); // Assuming element is an instance of Object for JDOMNodePointer
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    QName name = new QName("unknownPrefix", "testName");
    when(namespaceResolver.getNamespaceURI("unknownPrefix")).thenReturn(null);
    when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    Exception exception = assertThrows(JXPathException.class, () -> {
        jdomNodePointer.createAttribute(null, name);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTestNode_NullNodeTest_ReturnsTrue_cfPF0() throws Exception {
    Object node = new Object(); // Assuming node is just an Object for the purpose of this test.
    Locale locale = Locale.getDefault();
    JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, locale, null);
    assertTrue(JDOMNodePointer.testNode(jdomNodePointer, node, null));
}
}