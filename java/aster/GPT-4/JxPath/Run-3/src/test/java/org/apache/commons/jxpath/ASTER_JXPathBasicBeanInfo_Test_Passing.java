/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import java.util.HashMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtomicTrue_oOif0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class, true);
    assertTrue(beanInfo.isAtomic());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerClass_ffmf0() {
    Class expectedClass = String.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, expectedClass);
    Class resultClass = beanInfo.getDynamicPropertyHandlerClass();
    assertEquals(expectedClass, resultClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsWithEmptyClass_PEDP0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
    assertEquals(0, descriptors.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsWithInterface_YeWL1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(List.class);
    PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
    assertTrue(descriptors.length > 0); // Assuming List interface has properties
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsWithNormalClass_bkGP2() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
    PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsWithAtomicTrue_owMl3() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Integer.class, true);
    PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptorsWithDynamicPropertyHandler_LzuW4() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(ArrayList.class, HashMap.class);
    PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
    assertTrue(descriptors.length > 0); // ArrayList should have properties
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicTrue_VGXg0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
    assertTrue(beanInfo.isDynamic());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicFalse_GxFL1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    assertFalse(beanInfo.isDynamic());
}
}