/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
@Mock
    private BeanPointer beanPointer;
@InjectMocks
    private PropertyIterator propertyIterator;
@Mock
    private BeanPointer beanPointerMock;
@Mock
    private PropertyPointer propertyNodePointerMock;
@Mock
    private PropertyPointer propertyNodePointer;
private final String propertyName = "testProperty";
private final boolean reverse = false;
@Mock
    private NodePointer valuePointer;
@Mock
    private NullPropertyPointer nullPropertyPointer;
private final String name = "testProperty";
    private int position = 0;
    private boolean targetReady = false;
    private int startPropertyIndex;
    private boolean empty = false;
    private int startIndex = 0;
    private boolean includeStart = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        // Initialize PropertyIterator with a mocked BeanPointer and default values
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        // Test initial position, expecting 0 as set in the PropertyIterator constructor
        assertEquals(0, propertyIterator.getPosition(), "Initial position should be 0");
        // If there were methods to change the position, you would test them here
        // For example, if there was a method propertyIterator.incrementPosition();
        // Then you would call it and check the position again
        // propertyIterator.incrementPosition();
        // assertEquals(1, propertyIterator.getPosition(), "Position after increment should be 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenNameIsNull() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, null, false, null);
        // Setup
        propertyIterator = new PropertyIterator(beanPointer, null, false, null);
        // Action
        boolean result = propertyIterator.setPosition(5);
        // Assertion
        assertTrue(result, "Expected setPosition to return true when name is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWhenNameIsNotNull() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, null, false, null);
        // Setup
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        // Action
        boolean result = propertyIterator.setPosition(5);
        // Assertion
        assertTrue(result, "Expected setPosition to return true when name is not null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_AllPropertiesForward_tsbI0() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, null, false, null);
    boolean result = propertyIterator.setPosition(5);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_AllPropertiesReverse_RFnq1() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, null, true, null);
    boolean result = propertyIterator.setPosition(3);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithAllPropertiesValidPosition_qSWi0() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    BeanPointer beanPointer = new BeanPointer(domNodePointer, qName, bean, beanInfo);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, null, false, domNodePointer);
    boolean result = propertyIterator.setPosition(5);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithAllPropertiesInvalidPosition_kQcb1() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    BeanPointer beanPointer = new BeanPointer(domNodePointer, qName, bean, beanInfo);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, null, false, domNodePointer);
    boolean result = propertyIterator.setPosition(0);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithValidPosition_QVoC0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en");
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    boolean result = propertyIterator.setPosition(2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithInvalidPosition_IaEZ1() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en");
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    boolean result = propertyIterator.setPosition(0);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_1() throws Exception {
        // Initialize PropertyIterator with mocks and default values
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        // Set fields to non-default values to test the reset functionality
        propertyIterator.reset(); // This should reset the position and targetReady to their initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that values are reset to their initial state
        assertEquals(0, position, "Position should be reset to 0");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_2() throws Exception {
        // Initialize PropertyIterator with mocks and default values
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        // Set fields to non-default values to test the reset functionality
        propertyIterator.reset(); // This should reset the position and targetReady to their initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that values are reset to their initial state
        assertEquals(false, targetReady, "TargetReady should be reset to false");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_gmjI0() {
    QName qName = new QName("testNamespace", "testLocalName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale, "testId");
    BeanPointer beanPointer = new BeanPointer(domNodePointer, qName, bean, beanInfo);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    propertyIterator.reset();
    assertTrue(true); // Dummy assertion, replace with actual checks if possible
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer_1() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer_2() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertEquals(valuePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowsException_ReturnsNullPropertyPointer() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenThrow(new RuntimeException("Test Exception"));
        when(propertyNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(propertyNodePointer.getPropertyName()).thenReturn(name);
        when(propertyNodePointer.getIndex()).thenReturn(0);
        when(nullPropertyPointer.getValuePointer()).thenReturn(null);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZeroNameNotNullTargetNotReadyNotEmpty_PCFX0() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = new Locale("en");
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZeroNameNotNullTargetReadyEmpty_xhWr1() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = new Locale("en");
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZeroNameNullSetPositionFalse_OKgn2() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = new Locale("en");
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator iterator = new PropertyIterator(beanPointer, null, false, null);
        NodePointer result = iterator.getNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_AOxK3_2() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = new Locale("en");
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertTrue(result instanceof NullPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_SSqb0() throws Exception {
    BeanPointer beanPointerMock = mock(BeanPointer.class);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointerMock, "propertyName", false, null);
    NodePointer propertyNodePointerMock = mock(NodePointer.class);
    when(propertyIterator.getNodePointer()).thenReturn(propertyNodePointerMock);
    NodePointer result = propertyIterator.getNodePointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_Empty_ReturnsNull_CAUU0() throws Exception {
    propertyIterator = new PropertyIterator(beanPointer, name, false, null);
    empty = true;
    NodePointer result = propertyIterator.getNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_PositionNotSet_ReturnsNull_ELsE0() throws Exception {
    QName name = new QName("testName");
    BeanPointer beanPointer = new BeanPointer(name, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, null, false, null);
    NodePointer result = propertyIterator.getNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrepareForIndividualProperty7_Euag6_gbQS0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    propertyIterator.prepareForIndividualProperty("propertyName");
    NodePointer nodePointer = propertyIterator.getNodePointer();
    assertNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrepareForIndividualProperty9_YtFo8_OKxK0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    propertyIterator.prepareForIndividualProperty("propertyName");
    NodePointer nodePointer = propertyIterator.getNodePointer();
    assertNotNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrepareForIndividualProperty10_VCPd9_uWrz0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", true, null);
    propertyIterator.prepareForIndividualProperty("propertyName");
    NodePointer nodePointer = propertyIterator.getNodePointer();
    assertNotNull(nodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrepareForIndividualProperty11_WKQn10_xCxL0() {
    QName qName = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    propertyIterator.prepareForIndividualProperty("propertyName");
    NodePointer nodePointer = propertyIterator.getNodePointer();
    assertEquals(nodePointer.getIndex(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        // Initialize PropertyIterator with mocks and default values
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        // Set fields to non-default values to test the reset functionality
        propertyIterator.reset(); // This should reset the position and targetReady to their initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that values are reset to their initial state
        assertEquals(0, position, "Position should be reset to 0");
        assertEquals(false, targetReady, "TargetReady should be reset to false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result);
        assertEquals(valuePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_AOxK3() {
        QName qName = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = new Locale("en");
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
        assertTrue(result instanceof NullPropertyPointer);
    }
}