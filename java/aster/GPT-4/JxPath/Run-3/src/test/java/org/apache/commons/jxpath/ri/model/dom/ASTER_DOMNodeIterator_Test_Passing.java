/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodeIterator_Test_Passing {
@Mock
    private DOMNodePointer parentNode;
@Mock
    private NodeTypeTest nodeTest;
private DOMNodeIterator domNodeIterator;
@Mock
    private DOMNodePointer parentNodePointer;
private Node child;
private NodePointer parent;
@Mock
    private Node node;
@Mock
    private NodePointer nodePointer;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_InitialPosition() {
        // Assuming default constructor values for simplicity in setup
        boolean reverse = false;
        DOMNodePointer startWith = null;
        domNodeIterator = new DOMNodeIterator(parentNode, nodeTest, reverse, startWith);
        // Testing initial position which should be 0 after construction
        assertEquals(0, domNodeIterator.getPosition(), "Initial position should be 0");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPosition_pXQd0() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer parentPointer = new DOMNodePointer(node, locale);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DOMNodePointer startWithPointer = new DOMNodePointer(node, locale);
    DOMNodeIterator domNodeIterator = new DOMNodeIterator(parentPointer, nodeTest, false, startWithPointer);
    int expectedPosition = 0; // Assuming the initial position is 0
    int actualPosition = domNodeIterator.getPosition();
    assertEquals(expectedPosition, actualPosition);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionForwardSuccess_OGPw0_Ahfd0() {
    Node node = Mockito.mock(Node.class); // Using Mockito to create a mock Node
    Locale locale = Locale.getDefault();
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DOMNodeIterator iterator = new DOMNodeIterator(parent, nodeTest, false, parent);
    boolean result = iterator.setPosition(3);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionReverseSuccess_rDcP2_NMCp0() {
    Node node = Mockito.mock(Node.class); // Using Mockito to create a mock Node
    Locale locale = Locale.getDefault();
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DOMNodeIterator iterator = new DOMNodeIterator(parent, nodeTest, true, parent);
    boolean result = iterator.setPosition(2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_PositionZero_TgAF0_QVLi0() {
    Locale locale = new Locale("en", "US");
    Node node = mock(Node.class); // Mocking Node to avoid NullPointerException
    when(node.getFirstChild()).thenReturn(null); // Ensuring getFirstChild returns null
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DOMNodePointer startWith = new DOMNodePointer(node, locale);
    DOMNodeIterator iterator = new DOMNodeIterator(parent, nodeTest, false, startWith);
    NodePointer result = iterator.getNodePointer();
    assertNull(result, "Expected null when child is not initialized");
}
}