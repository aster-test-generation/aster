/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionAttributeNodeIterator_Test_Passing {
@Mock
    private CollectionPointer collectionPointer;
@Mock
    private NodePointer elementPointer;
@Mock
    private NodeIterator expectedNodeIterator;
private QName name = new QName("testNamespace", "testName");
@InjectMocks
    private CollectionAttributeNodeIterator collectionAttributeNodeIterator;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator_1() throws Exception {
        collectionAttributeNodeIterator = new CollectionAttributeNodeIterator(collectionPointer, name);
        // Arrange
        when(elementPointer.attributeIterator(name)).thenReturn(expectedNodeIterator);
        // Act
        NodeIterator result = collectionAttributeNodeIterator.getElementNodeIterator(elementPointer);
        // Assert
        verify(elementPointer).attributeIterator(name); // Verify that attributeIterator was called with the correct QName
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator_2() throws Exception {
        collectionAttributeNodeIterator = new CollectionAttributeNodeIterator(collectionPointer, name);
        // Arrange
        when(elementPointer.attributeIterator(name)).thenReturn(expectedNodeIterator);
        // Act
        NodeIterator result = collectionAttributeNodeIterator.getElementNodeIterator(elementPointer);
        // Assert
        verify(elementPointer).attributeIterator(name); // Verify that attributeIterator was called with the correct QName
        assertEquals(expectedNodeIterator, result, "The returned NodeIterator should match the expected one.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetElementNodeIterator() throws Exception {
        collectionAttributeNodeIterator = new CollectionAttributeNodeIterator(collectionPointer, name);
        // Arrange
        when(elementPointer.attributeIterator(name)).thenReturn(expectedNodeIterator);
        // Act
        NodeIterator result = collectionAttributeNodeIterator.getElementNodeIterator(elementPointer);
        // Assert
        assertNotNull(result, "The result should not be null.");
        assertEquals(expectedNodeIterator, result, "The returned NodeIterator should match the expected one.");
        verify(elementPointer).attributeIterator(name); // Verify that attributeIterator was called with the correct QName
    }
}