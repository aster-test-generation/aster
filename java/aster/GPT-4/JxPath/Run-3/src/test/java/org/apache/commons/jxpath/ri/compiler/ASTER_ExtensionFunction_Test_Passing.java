/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import java.util.Arrays;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Passing {
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private Function function;
@Mock
    private Expression expression;
@Mock
    private NodeSet nodeSet;
private QName functionName;
private Expression[] args;
@InjectMocks
    private ExtensionFunction extensionFunction;
private EvalContext evalContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionName_iGkf0() {
    QName qName = new QName("prefix", "localName");
    Expression[] expressions = new Expression[0];
    ExtensionFunction extensionFunction = new ExtensionFunction(qName, expressions);
    QName result = extensionFunction.getFunctionName();
    assertEquals("prefix:localName", result.getPrefix() + ":" + result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_UUPh0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction function = new ExtensionFunction(functionName, args);
        assertEquals("testFunction()", function.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_uMMU3() {
        QName functionName = new QName("testFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        assertEquals("testFunction()", function.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_WithValidFunction() throws Exception {
        functionName = new QName("namespace", "functionName");
        args = new Expression[] {expression};
        extensionFunction = new ExtensionFunction(functionName, args);
        when(context.getRootContext()).thenReturn(rootContext);
        when(expression.compute(context)).thenReturn("computedValue");
        when(rootContext.getFunction(eq(functionName), any())).thenReturn(function);
        Object[] parameters = {"computedValue"};
        when(function.invoke(context, parameters)).thenReturn("result");
        Object result = extensionFunction.computeValue(context);
        assertEquals("result", result);
        verify(rootContext).getFunction(functionName, parameters);
        verify(function).invoke(context, parameters);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionReturnsNodeSet() throws Exception {
        functionName = new QName("namespace", "functionName");
        args = new Expression[] {expression};
        extensionFunction = new ExtensionFunction(functionName, args);
        when(context.getRootContext()).thenReturn(rootContext);
        when(expression.compute(context)).thenReturn("computedValue");
        when(rootContext.getFunction(eq(functionName), any())).thenReturn(function);
        Object[] parameters = {"computedValue"};
        when(function.invoke(context, parameters)).thenReturn(nodeSet);
        Object result = extensionFunction.computeValue(context);
        assertTrue(result instanceof NodeSetContext);
        verify(rootContext).getFunction(functionName, parameters);
        verify(function).invoke(context, parameters);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_iJwv0() {
        QName qName = new QName("prefix", "localName");
        Expression[] expressions = new Expression[0];
        ExtensionFunction extensionFunction = new ExtensionFunction(qName, expressions);
        assertTrue(extensionFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() {
        functionName = new QName("http://example.com", "testFunction");
        extensionFunction = new ExtensionFunction(functionName, null);
        evalContext = mock(EvalContext.class);
        // Arrange
        Object expectedValue = "Expected Result";
        when(evalContext.getValue()).thenReturn(expectedValue);
        // Act
        Object result = extensionFunction.compute(evalContext);
        // Assert
        assertEquals(expectedValue, result, "The compute method should return the value obtained from EvalContext");
        verify(evalContext).getValue(); // Verify that getValue was called on evalContext
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NoSuchFunction() throws Exception {
        functionName = new QName("namespace", "functionName");
        args = new Expression[] {expression};
        extensionFunction = new ExtensionFunction(functionName, args);
        when(context.getRootContext()).thenReturn(rootContext);
        when(expression.compute(context)).thenReturn("computedValue");
        when(rootContext.getFunction(eq(functionName), any())).thenReturn(function);
        Object[] parameters = {"computedValue"};
        when(rootContext.getFunction(eq(functionName), any())).thenReturn(null);
        Exception exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });
        String expectedMessage = "No such function: " + functionName + Arrays.asList(parameters);
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
    }
}