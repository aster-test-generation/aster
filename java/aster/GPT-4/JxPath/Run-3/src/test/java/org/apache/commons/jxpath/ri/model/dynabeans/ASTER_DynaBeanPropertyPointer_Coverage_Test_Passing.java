/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynaBeanPropertyPointer_Coverage_Test_Passing {
    private DynaBeanPropertyPointer dynabeanPropertyPointer;
    private DOMNodePointer domNodePointer;
    private DynaBean dynaBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WHOLE_COLLECTION_GPjW1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.getIndex()).thenReturn(DynaBeanPropertyPointer.WHOLE_COLLECTION);
        when(dynaBean.get("test")).thenReturn("value");
        when(ValueUtils.getValue("value")).thenReturn("processedValue");
        assertEquals("processedValue", pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_IndexedProperty_ValidIndex_Wlcx2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        when(dynaBean.get("test", 1)).thenReturn("valueAtIndex");
        when(ValueUtils.getValue("valueAtIndex")).thenReturn("processedValueAtIndex");
        assertEquals("processedValueAtIndex", pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_IndexedProperty_ArrayIndexOutOfBoundsException_pbLc3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(100);
        when(dynaBean.get("test", 100)).thenThrow(new ArrayIndexOutOfBoundsException());
        assertNull(pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_IndexedProperty_IllegalArgumentException_Mkep4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        when(dynaBean.get("test", 1)).thenThrow(new IllegalArgumentException());
        when(dynaBean.get("test")).thenReturn("value");
        when(ValueUtils.getValue("value", 1)).thenReturn("processedValueAtIndex");
        assertEquals("processedValueAtIndex", pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NonIndexedProperty_Collection_ZUVR5() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.getIndex()).thenReturn(0);
        when(dynaBean.get("test")).thenReturn("value");
        when(ValueUtils.isCollection("value")).thenReturn(true);
        when(ValueUtils.getValue("value", 0)).thenReturn("processedValueAtIndex");
        assertEquals("processedValueAtIndex", pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NonIndexedProperty_NonCollection_IndexNotZero_BoJc6() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.getIndex()).thenReturn(1);
        when(dynaBean.get("test")).thenReturn("value");
        when(ValueUtils.isCollection("value")).thenReturn(false);
        assertNull(pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_NonIndexedProperty_NonCollection_IndexZero_HbVQ7() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getPropertyName()).thenReturn("test");
        when(pointer.getIndex()).thenReturn(0);
        when(dynaBean.get("test")).thenReturn("value");
        when(ValueUtils.isCollection("value")).thenReturn(false);
        assertEquals("value", pointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection_EBkA0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(DynaBeanPropertyPointer.WHOLE_COLLECTION);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty_OcAP1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), 1, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_OhYI2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isCollection()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        Object baseValue = new Object();
        when(pointer.getBaseValue()).thenReturn(baseValue);
        Object modifiedCollection = new Object();
        when(ValueUtils.remove(baseValue, 1)).thenReturn(modifiedCollection);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), modifiedCollection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_iWbE3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(0);
        when(pointer.isIndexedProperty()).thenReturn(false);
        when(pointer.isCollection()).thenReturn(false);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection_NotTriggered_YKqc4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(1); // Not WHOLE_COLLECTION
        pointer.remove();
        verify(dynaBean, never()).set(pointer.getPropertyName(), null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty_NotTriggered_xrKc5() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isIndexedProperty()).thenReturn(false);
        pointer.remove();
        verify(dynaBean, never()).set(anyString(), anyInt(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_NotTriggered_EOih6() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isCollection()).thenReturn(false);
        pointer.remove();
        verify(dynaBean, never()).set(anyString(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_NotTriggered_GNRt7() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(1); // Not 0
        pointer.remove();
        verify(dynaBean, never()).set(pointer.getPropertyName(), null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_WithIndexedProperty_DrRB8() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(0);
        when(pointer.isIndexedProperty()).thenReturn(true);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), 0, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_WithCollection_YQqd9() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(0);
        when(pointer.isCollection()).thenReturn(true);
        Object baseValue = new Object();
        when(pointer.getBaseValue()).thenReturn(baseValue);
        Object modifiedCollection = new Object();
        when(ValueUtils.remove(baseValue, 0)).thenReturn(modifiedCollection);
        pointer.remove();
        verify(dynaBean).set(pointer.getPropertyName(), modifiedCollection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNameWhenNameIsNullAndIndexIsValid_mFQS0_qdPf0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    String[] propertyNames = {"property1", "property2"};
    when(pointer.getPropertyNames()).thenReturn(propertyNames);
    pointer.setPropertyIndex(1); // valid index using setter method
    String result = pointer.getPropertyName();
    assertEquals("property2", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNameWhenNameIsNullAndIndexIsInvalid_NUcx1_fsYh0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    String[] propertyNames = {"property1", "property2"};
    when(pointer.getPropertyNames()).thenReturn(propertyNames);
    pointer.setPropertyIndex(5); // Use setter to set the invalid index
    String result = pointer.getPropertyName();
    assertEquals("*", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNameWhenNameIsNotNull_kmca2_pMbO0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    when(dynaBean.get("name")).thenReturn("existingName");
    String result = pointer.getPropertyName();
    assertEquals("existingName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNameWhenNameIsNullAndNoPropertyNames_fnOD3_yPqM0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    when(pointer.getPropertyNames()).thenReturn(new String[0]);
    pointer.setPropertyIndex(0); // Corrected access to propertyIndex using a setter method
    String result = pointer.getPropertyName();
    assertEquals("*", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndex_EmptyPropertyNames_VcqB4_UqYE0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    pointer.setPropertyIndex(DynaBeanPropertyPointer.UNSPECIFIED_PROPERTY);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndex_NullPropertyNames_wQZH5_SzpW0() {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
    when(pointer.getPropertyNames()).thenReturn(null);
    pointer.setPropertyIndex(DynaBeanPropertyPointer.UNSPECIFIED_PROPERTY);
    int index = pointer.getPropertyIndex();
    assertEquals(DynaBeanPropertyPointer.UNSPECIFIED_PROPERTY, index);
}
}