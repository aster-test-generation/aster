/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
@Mock
    private DOMNodePointer parentNodeMock;
@Mock
    private Attr attributeMock;
@InjectMocks
    private DOMAttributePointer domAttributePointer;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
private Attr attr;
private DOMNodePointer parentNode;
@Mock
    private Attr attribute;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodeTypeTest nodeTypeTest;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private DOMNodePointer parent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        // Initialize the DOMAttributePointer with mocked DOMNodePointer and Attr
        domAttributePointer = new DOMAttributePointer(parentNodeMock, attributeMock);
        // Arrange
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Act
        int result = domAttributePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(0, result, "The compareChildNodePointers method should always return 0 as per current implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameInstance() throws Exception {
        attr = mock(Attr.class);
        parentNode = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        assertTrue(domAttributePointer.equals(domAttributePointer), "Should be true when comparing the same instance.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() throws Exception {
        attr = mock(Attr.class);
        parentNode = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        assertFalse(domAttributePointer.equals(null), "Should be false when comparing to null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() throws Exception {
        attr = mock(Attr.class);
        parentNode = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        Object differentClassObject = new Object();
        assertFalse(domAttributePointer.equals(differentClassObject), "Should be false when comparing to an object of a different class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameAttributes() throws Exception {
        attr = mock(Attr.class);
        parentNode = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        DOMAttributePointer anotherPointer = new DOMAttributePointer(parentNode, attr);
        assertTrue(domAttributePointer.equals(anotherPointer), "Should be true when comparing two pointers with the same attribute.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentAttributes() throws Exception {
        attr = mock(Attr.class);
        parentNode = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        Attr anotherAttr = mock(Attr.class);
        DOMAttributePointer anotherPointer = new DOMAttributePointer(parentNode, anotherAttr);
        assertFalse(domAttributePointer.equals(anotherPointer), "Should be false when comparing two pointers with different attributes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenNodeTestIsNull_ShouldReturnTrue() throws Exception {
        // DOMAttributePointer is initialized with mocks due to @InjectMocks
        assertTrue(domAttributePointer.testNode(null), "Should return true when nodeTest is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenNodeTestIsNodeTypeTestAndNodeTypeIsNode_ShouldReturnTrue() throws Exception {
        // DOMAttributePointer is initialized with mocks due to @InjectMocks
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(domAttributePointer.testNode(nodeTypeTest), "Should return true when nodeTest is NodeTypeTest and nodeType is NODE_TYPE_NODE");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenNodeTestIsNodeTypeTestAndNodeTypeIsNotNode_ShouldReturnFalse() throws Exception {
        // DOMAttributePointer is initialized with mocks due to @InjectMocks
        when(nodeTypeTest.getNodeType()).thenReturn(999); // Assuming 999 is not NODE_TYPE_NODE
        assertFalse(domAttributePointer.testNode(nodeTypeTest), "Should return false when nodeTest is NodeTypeTest and nodeType is not NODE_TYPE_NODE");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenNodeTestIsNotNodeTypeTest_ShouldReturnFalse() throws Exception {
        // DOMAttributePointer is initialized with mocks due to @InjectMocks
        assertFalse(domAttributePointer.testNode(nodeTest), "Should return false when nodeTest is not an instance of NodeTypeTest");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() {
        domAttributePointer = new DOMAttributePointer(null, attr); // Assuming parent can be null for this test
        String testValue = "testValue";
        domAttributePointer.setValue(testValue);
        verify(attr, times(1)).setValue(testValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenAttrValueIsNull() {
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(false);
        assertNull(domAttributePointer.getValue(), "The value should be null when attr value is null and not specified.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenAttrValueIsEmptyAndNotSpecified() {
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        assertNull(domAttributePointer.getValue(), "The value should be null when attr value is empty and not specified.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenAttrValueIsEmptyButSpecified() {
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("", domAttributePointer.getValue(), "The value should be empty string when attr value is empty but specified.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenAttrValueIsNotNullOrEmpty() {
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        String expectedValue = "someValue";
        when(attr.getValue()).thenReturn(expectedValue);
        when(attr.getSpecified()).thenReturn(true);
        assertEquals(expectedValue, domAttributePointer.getValue(), "The value should be the same as the attr value when it is not null or empty.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueReturnsAttributeValue_EFGG0() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("testValue");
        when(attr.getSpecified()).thenReturn(true);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertEquals("testValue", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueReturnsNullForEmptyValue_fUpH1() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertNull(pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueReturnsNullForNullValue_RKtx2() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertNull(pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueReturnsValueWhenNotSpecifiedButNotEmpty_CIJo3() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("value");
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertEquals("value", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Initialize DOMAttributePointer with mocked DOMNodePointer and Attr
        domAttributePointer = new DOMAttributePointer(parentNode, attribute);
        // Since isCollection method always returns false, we assert that it returns false
        assertFalse(domAttributePointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        when(attr.getNodeName()).thenReturn("testAttr");
        Object result = domAttributePointer.getImmediateNode();
        assertNotNull(result);
        assertTrue(result instanceof Attr);
        assertEquals("testAttr", ((Attr) result).getNodeName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        domAttributePointer = new DOMAttributePointer(parentNode, attr);
        // Mock the behavior of System.identityHashCode to return a consistent value for testing
        int expectedHashCode = 12345;
        when(System.identityHashCode(attr)).thenReturn(expectedHashCode);
        // Call the hashCode method
        int actualHashCode = domAttributePointer.hashCode();
        // Verify the result
        assertEquals(expectedHashCode, actualHashCode, "The hash code should match the mocked identity hash code.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        domAttributePointer = new DOMAttributePointer(parent, attr);
        QName result = domAttributePointer.getName();
        assertEquals("prefix", result.getPrefix());
        assertEquals("localName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNonNullPrefix() throws Exception {
        when(attr.getPrefix()).thenReturn("testPrefix");
        when(parentNode.getNamespaceURI("testPrefix")).thenReturn("http://example.com/test");
        // Setup scenario where prefix is not null
        String expectedNamespaceURI = "http://example.com/test";
        String actualNamespaceURI = domAttributePointer.getNamespaceURI();
        assertEquals(expectedNamespaceURI, actualNamespaceURI, "The namespace URI should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNullPrefix() throws Exception {
        when(attr.getPrefix()).thenReturn("testPrefix");
        when(parentNode.getNamespaceURI("testPrefix")).thenReturn("http://example.com/test");
        // Setup scenario where prefix is null
        when(attr.getPrefix()).thenReturn(null);
        String actualNamespaceURI = domAttributePointer.getNamespaceURI();
        assertNull(actualNamespaceURI, "The namespace URI should be null when the prefix is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() throws Exception {
        when(parentNode.asPath()).thenReturn("/parentNodePath");
        when(attribute.getName()).thenReturn("attributeName");
        domAttributePointer = new DOMAttributePointer(parentNode, attribute);
        String expectedPath = "/parentNodePath/@attributeName";
        String actualPath = domAttributePointer.asPath();
        assertEquals(expectedPath, actualPath, "The asPath method should return the correct attribute path.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        domAttributePointer = new DOMAttributePointer(parentNode, attribute);
        assertEquals(1, domAttributePointer.getLength(), "The length should always return 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        when(attr.getValue()).thenReturn("expectedValue");
        Object baseValue = domAttributePointer.getBaseValue();
        assertEquals(attr, baseValue, "The base value should be the same as the mocked Attr object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        domAttributePointer = new DOMAttributePointer(parentNode, attribute);
        assertTrue(domAttributePointer.isLeaf(), "isLeaf should return true for DOMAttributePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_1() throws Exception {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        when(attr.getNodeName()).thenReturn("testAttr");
        Object result = domAttributePointer.getImmediateNode();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_2() throws Exception {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        when(attr.getNodeName()).thenReturn("testAttr");
        Object result = domAttributePointer.getImmediateNode();
        assertTrue(result instanceof Attr);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_3() throws Exception {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        when(attr.getNodeName()).thenReturn("testAttr");
        Object result = domAttributePointer.getImmediateNode();
        assertEquals("testAttr", ((Attr) result).getNodeName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_1() throws Exception {
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        domAttributePointer = new DOMAttributePointer(parent, attr);
        QName result = domAttributePointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_2() throws Exception {
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        domAttributePointer = new DOMAttributePointer(parent, attr);
        QName result = domAttributePointer.getName();
        assertEquals("localName", result.getName());}
}