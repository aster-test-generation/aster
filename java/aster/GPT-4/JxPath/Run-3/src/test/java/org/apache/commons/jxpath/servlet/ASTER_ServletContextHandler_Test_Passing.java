/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockServletContext;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Passing {
@Mock
    private ServletContext mockServletContext;
@InjectMocks
    private ServletContextHandler servletContextHandler;
@Mock
    private ServletContext servletContext;
@Mock
    private Enumeration<String> attributeNames;
    private static final int DEFAULT_PROPERTY_COUNT = 16;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNamesWithValidContext_cIML0_1() {
    ServletContextHandler handler = new ServletContextHandler();
    Object context = new Object(); // Assuming Object can be used as a valid context
    String[] propertyNames = handler.getPropertyNames(context);
    assertNotNull(propertyNames);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNamesWithValidContext_cIML0_2() {
    ServletContextHandler handler = new ServletContextHandler();
    Object context = new Object(); // Assuming Object can be used as a valid context
    String[] propertyNames = handler.getPropertyNames(context);
    assertTrue(propertyNames.length >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        String testPropertyKey = "testKey";
        Object expectedPropertyValue = "testValue";
        when(mockServletContext.getAttribute(testPropertyKey)).thenReturn(expectedPropertyValue);
        // Execution
        Object actualPropertyValue = servletContextHandler.getProperty(mockServletContext, testPropertyKey);
        // Assertion
        assertEquals(expectedPropertyValue, actualPropertyValue, "The returned property value should match the expected value.");
        verify(mockServletContext).getAttribute(testPropertyKey);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_aiew0() {
    ServletContextHandler handler = new ServletContextHandler();
    ServletContext context = mock(ServletContext.class);
    String property = "exampleProperty";
    String expectedValue = "value";
    when(context.getAttribute(property)).thenReturn(expectedValue);
    Object result = handler.getProperty(context, property);
    assertEquals(expectedValue, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty() throws Exception {
        // Initialization is handled by Mockito annotations
        // Arrange
        String property = "exampleProperty";
        String value = "exampleValue";
        // Act
        servletContextHandler.setProperty(mockServletContext, property, value);
        // Assert
        verify(mockServletContext).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetProperty_XyuL0() {
    ServletContextHandler handler = new ServletContextHandler();
    MockServletContext context = new MockServletContext();
    String property = "testProperty";
    String value = "testValue";
    handler.setProperty(context, property, value);
    assertEquals("testValue", context.getAttribute(property));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_1() {
        servletContextHandler = new ServletContextHandler();
        when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        // Setup
        HashSet<String> set = new HashSet<>();
        when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        // Action
        servletContextHandler.collectPropertyNames(set, servletContext);
        // Assert
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_2() {
        servletContextHandler = new ServletContextHandler();
        when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        // Setup
        HashSet<String> set = new HashSet<>();
        when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        // Action
        servletContextHandler.collectPropertyNames(set, servletContext);
        // Assert
        assertTrue(set.contains("attr1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_3() {
        servletContextHandler = new ServletContextHandler();
        when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        // Setup
        HashSet<String> set = new HashSet<>();
        when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        // Action
        servletContextHandler.collectPropertyNames(set, servletContext);
        // Assert
        assertTrue(set.contains("attr2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithServletContext_ETmI0_1() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, servletContext);
    assertTrue(propertyNames.contains("attr1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithServletContext_ETmI0_2() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, servletContext);
    assertTrue(propertyNames.contains("attr2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithServletContext_ETmI0_3() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, servletContext);
    assertTrue(propertyNames.contains("attr3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithHttpSessionAndServletContext_EmrP1_1() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    HttpSessionAndServletContext sessionAndContext = mock(HttpSessionAndServletContext.class);
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(sessionAndContext.getServletContext()).thenReturn(servletContext);
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, sessionAndContext);
    assertTrue(propertyNames.contains("attr1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithHttpSessionAndServletContext_EmrP1_2() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    HttpSessionAndServletContext sessionAndContext = mock(HttpSessionAndServletContext.class);
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(sessionAndContext.getServletContext()).thenReturn(servletContext);
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, sessionAndContext);
    assertTrue(propertyNames.contains("attr2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithEmptyAttributes_zFDg2() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> propertyNames = new HashSet<>();
    ServletContext servletContext = mock(ServletContext.class);
    Enumeration<String> attributeNames = Collections.enumeration(new ArrayList<String>());
    when(servletContext.getAttributeNames()).thenReturn(attributeNames);
    handler.collectPropertyNames(propertyNames, servletContext);
    assertTrue(propertyNames.isEmpty());
}
}