/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Stack;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Stack;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@InjectMocks
    private PrecedingOrFollowingContext precedingOrFollowingContext;
private PrecedingOrFollowingContext precedingOrFollowingContextTrue;
private PrecedingOrFollowingContext precedingOrFollowingContextFalse;
private NodePointer currentNodePointer;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NodePointer currentRootLocation;
@Mock
    private NodePointer parentNode;
@Mock
    private boolean setStarted = false;
    private Stack stack = null;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionDecreasePosition_SwTH0() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
        context.setPosition(5);
        boolean result = context.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionIncreasePosition_jHQD1() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
        context.setPosition(2);
        boolean result = context.setPosition(4);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionToSamePosition_TMKq2() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
        context.setPosition(3);
        boolean result = context.setPosition(3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBeyondAvailableNodes_qiIx3() throws Exception {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
        context.setPosition(1);
        boolean result = context.setPosition(10);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_WhenReverseIsTrue_ShouldReturnNegativeOne() throws Exception {
        // Mock the dependencies
        NamespaceContext mockNamespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        // Create instances of PrecedingOrFollowingContext with reverse true and false
        precedingOrFollowingContextTrue = new PrecedingOrFollowingContext(mockNamespaceContext, new NodeTypeTest(1), true);
        precedingOrFollowingContextFalse = new PrecedingOrFollowingContext(mockNamespaceContext, new NodeTypeTest(1), false);
        int result = precedingOrFollowingContextTrue.getDocumentOrder();
        assertEquals(-1, result, "Expected document order to be -1 when reverse is true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_WhenReverseIsFalse_ShouldReturnOne() throws Exception {
        // Mock the dependencies
        NamespaceContext mockNamespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        // Create instances of PrecedingOrFollowingContext with reverse true and false
        precedingOrFollowingContextTrue = new PrecedingOrFollowingContext(mockNamespaceContext, new NodeTypeTest(1), true);
        precedingOrFollowingContextFalse = new PrecedingOrFollowingContext(mockNamespaceContext, new NodeTypeTest(1), false);
        int result = precedingOrFollowingContextFalse.getDocumentOrder();
        assertEquals(1, result, "Expected document order to be 1 when reverse is false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWhenReverseIsTrue_TidC0() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, true);
        assertEquals(-1, context.getDocumentOrder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWhenReverseIsFalse_jBdK1() throws Exception {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        assertEquals(1, context.getDocumentOrder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception {
        currentNodePointer = mock(NodePointer.class);
        NamespaceContext namespaceContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        // Using reflection to set the private field
        try {
            java.lang.reflect.Field field = PrecedingOrFollowingContext.class.getDeclaredField("currentNodePointer");
            field.setAccessible(true);
            field.set(precedingOrFollowingContext, currentNodePointer);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new RuntimeException(e);
        }
        NodePointer result = precedingOrFollowingContext.getCurrentNodePointer();
        assertEquals(currentNodePointer, result, "The returned NodePointer should be the same as the mocked one.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_FJLE0() throws Exception {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
    NodePointer expected = context.getCurrentNodePointer();
    assertEquals(expected, context.getCurrentNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_initialEmptyStack_PzCq0() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_initialNonEmptyStackReverse_OGyN1() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), true);
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_singleNodeMatching_zckf2() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
    assertTrue(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_singleNodeNotMatching_KQWi3() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(2));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_multipleNodesSomeMatching_JqPs5_1() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(2), false);
    assertFalse(context.nextNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_multipleNodesSomeMatching_JqPs5_2() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(2), false);
    assertTrue(context.nextNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_reverseTrueMultipleNodes_Karq10_1() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), true);
    assertTrue(context.nextNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_Reset_aafR0() throws Exception {
    precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
    Field positionField = PrecedingOrFollowingContext.class.getDeclaredField("position");
    positionField.setAccessible(true);
    positionField.setInt(precedingOrFollowingContext, 5);
    doNothing().when(precedingOrFollowingContext).reset();
    boolean result = precedingOrFollowingContext.setPosition(3);
    verify(precedingOrFollowingContext, times(1)).reset();
    assertTrue(result, "setPosition should return true when resetting to a lower position");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_multipleNodesAllMatching_HCCp4() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), false);
    assertTrue(context.nextNode());
    assertTrue(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_multipleNodesSomeMatching_JqPs5() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(2), false);
    assertFalse(context.nextNode());
    assertTrue(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_reverseTrueMultipleNodes_Karq10() throws Exception {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(1), true);
    assertTrue(context.nextNode());
    assertTrue(context.nextNode());
}
}