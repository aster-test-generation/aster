/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
private String propertyName = "*";
@Mock
    private DOMNodePointer mockParent;
@Mock
    private PropertyOwnerPointer mockPropertyOwnerPointer;
@Mock
    private PropertyPointer mockPropertyPointer;
@InjectMocks
    private NullPropertyPointer nullPropertyPointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathContext context;
@Mock
    private NodePointer createdNodePointer;
@Mock
    private AbstractFactory factory;
@Mock
    private DOMNodePointer parentDOMNodePointer;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private DOMNodePointer mockParentNodePointer;
@Mock
    private JXPathContext mockContext;
@Mock
    private AbstractFactory mockFactory;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private NodePointer nodePointerMock;
@Mock
    private JXPathContext jxPathContextMock;
@Mock
    private DOMNodePointer parentNodeMock;
    private boolean byNameAttribute = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_1() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Setup
        final String expectedPropertyName = "testProperty";
        when(domNodePointerMock.getName()).thenReturn(new QName(expectedPropertyName));
        // Execution
        NodePointer result = nullPropertyPointer.getValuePointer();
        // Assertion
        assertTrue(result instanceof NullPointer, "The result should be an instance of NullPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_2() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Setup
        final String expectedPropertyName = "testProperty";
        when(domNodePointerMock.getName()).thenReturn(new QName(expectedPropertyName));
        // Execution
        NodePointer result = nullPropertyPointer.getValuePointer();
        // Assertion
        assertTrue(((NullPointer) result).getName().toString().equals(expectedPropertyName), "The QName of the result should match the expected property name");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(parent);
        QName name = new QName("testName");
        Object value = new Object();
        int index = 0;
        when(parent.createPath(context)).thenReturn(createdNodePointer);
        when(createdNodePointer.getName()).thenReturn(name);
        when(context.getFactory()).thenReturn(factory);
        when(createdNodePointer.createChild(context, name, index, value)).thenReturn(createdNodePointer);
        NodePointer result = nullPropertyPointer.createPath(context, value);
        verify(parent).createPath(context);
        verify(createdNodePointer).createChild(context, name, index, value);
        assertEquals(createdNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_1() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(parentDOMNodePointer);
        JXPathContext mockContext = mock(JXPathContext.class);
        QName mockQName = new QName("localName");
        int index = 0;
        when(mockNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(mockNodePointer);
        when(nullPropertyPointer.createPath(any(JXPathContext.class))).thenReturn(mockNodePointer);
        NodePointer result = nullPropertyPointer.createChild(mockContext, mockQName, index);
        verify(mockNodePointer).createChild(mockContext, mockQName, index);
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_2() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(parentDOMNodePointer);
        JXPathContext mockContext = mock(JXPathContext.class);
        QName mockQName = new QName("localName");
        int index = 0;
        when(mockNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(mockNodePointer);
        when(nullPropertyPointer.createPath(any(JXPathContext.class))).thenReturn(mockNodePointer);
        NodePointer result = nullPropertyPointer.createChild(mockContext, mockQName, index);
        verify(mockNodePointer).createChild(mockContext, mockQName, index);
        assertEquals(mockNodePointer, result, "The returned NodePointer should match the mocked NodePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyName() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        assertEquals(propertyName, nullPropertyPointer.getPropertyName(), "The property name should match the expected value '*'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithBadFactoryException_1() {
        nullPropertyPointer = new NullPropertyPointer(mockParentNodePointer);
        // Setup
        when(mockParentNodePointer.createPath(mockContext)).thenReturn(mockParentNodePointer);
        when(mockContext.getFactory()).thenReturn(mockFactory);
        // Execution & Verification
        Exception exception = assertThrows(RuntimeException.class, () -> {
            nullPropertyPointer.createPath(mockContext);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionTrue() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Assuming getIndex() is a method in NullPropertyPointer that can be mocked
        // and WHOLE_COLLECTION is a static final int in NullPropertyPointer
        when(nullPropertyPointer.getIndex()).thenReturn(NullPropertyPointer.WHOLE_COLLECTION + 1);
        assertTrue(nullPropertyPointer.isCollection(), "isCollection should return true when index is not WHOLE_COLLECTION");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionFalse() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Assuming getIndex() is a method in NullPropertyPointer that can be mocked
        // and WHOLE_COLLECTION is a static final int in NullPropertyPointer
        when(nullPropertyPointer.getIndex()).thenReturn(NullPropertyPointer.WHOLE_COLLECTION);
        assertFalse(nullPropertyPointer.isCollection(), "isCollection should return false when index is WHOLE_COLLECTION");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        DOMNodePointer mockParent = new DOMNodePointer(null, null, null);
        nullPropertyPointer = new NullPropertyPointer(mockParent);
        Object result = nullPropertyPointer.getImmediateNode();
        assertNull(result, "The result should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(mockDomNodePointer);
        // Test setting a new property name
        String newPropertyName = "newPropertyName";
        nullPropertyPointer.setPropertyName(newPropertyName);
        // Use reflection to access the private field to verify its value
        java.lang.reflect.Field field = nullPropertyPointer.getClass().getDeclaredField("propertyName");
        field.setAccessible(true);
        String updatedPropertyName = (String) field.get(nullPropertyPointer);
        // Assert that the property name was updated correctly
        assertEquals(newPropertyName, updatedPropertyName, "Property name should be updated to the new value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() throws Exception {
        // Mocking or creating instances of dependencies required for NullPropertyPointer
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        // Since isContainer method of NullPropertyPointer class always returns true
        assertTrue(nullPropertyPointer.isContainer(), "isContainer should always return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Initialize NullPropertyPointer with a mocked DOMNodePointer
        nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        QName result = nullPropertyPointer.getName();
        assertEquals(propertyName, result.getName(), "The name should match the property name '*'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        int length = nullPropertyPointer.getLength();
        assertEquals(0, length, "The length of NullPropertyPointer should always be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        Object result = nullPropertyPointer.getBaseValue();
        assertNull(result, "The base value should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Since isActual method of NullPropertyPointer always returns false,
        // we assert that the returned value is indeed false.
        assertFalse(nullPropertyPointer.isActual(), "isActual should always return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyIndex() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(mockDomNodePointer);
        // Prepare
        int index = 5;
        // Action
        nullPropertyPointer.setPropertyIndex(index);
        // Since setPropertyIndex method does not change any observable state or return a value,
        // and it's an empty implementation, there's nothing specific to assert here.
        // This test ensures that there are no exceptions thrown when calling the method.
        // However, we can verify that no interactions have occurred with the mockDomNodePointer
        // since the method should not interact with other objects.
        verifyNoInteractions(mockDomNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Act
        boolean result = nullPropertyPointer.isLeaf();
        // Assert
        assertTrue(result, "isLeaf should always return true for NullPropertyPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Since isActualProperty always returns false, we assert that it does indeed return false
        assertFalse(nullPropertyPointer.isActualProperty(), "isActualProperty should always return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        // Mocking DOMNodePointer as it is required by NullPropertyPointer constructor
        DOMNodePointer mockedDomNodePointer = org.mockito.Mockito.mock(DOMNodePointer.class);
        nullPropertyPointer = new NullPropertyPointer(mockedDomNodePointer);
        // Act
        int count = nullPropertyPointer.getPropertyCount();
        // Assert
        assertEquals(0, count, "The property count should always be zero for NullPropertyPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_ThrowsExceptionWhenParentIsNull_gbqt0_1() {
    NullPropertyPointer pointerWithNullParent = new NullPropertyPointer(null);
    Exception exception = assertThrows(JXPathInvalidAccessException.class, () -> pointerWithNullParent.setValue(new Object()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_C_Laqj0() throws Exception {
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
    QName qName = new QName("testName");
    int index = 0;
    Object value = new Object();
    when(nodePointerMock.createChild(any(JXPathContext.class), any(QName.class), anyInt(), any())).thenReturn(nodePointerMock);
    when(nullPropertyPointer.createPath(any(JXPathContext.class))).thenReturn(nodePointerMock);
    NodePointer result = nullPropertyPointer.createChild(jxPathContextMock, qName, index, value);
    verify(nodePointerMock).createChild(jxPathContextMock, qName, index, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameAttributeValue_YAVu0() {
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockDomNodePointer);
    String expectedPropertyName = "testName";
    nullPropertyPointer.setNameAttributeValue(expectedPropertyName);
    assertEquals(expectedPropertyName, nullPropertyPointer.getPropertyName(), "Property name should be updated to 'testName'");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_ByNameAttributeFalse_uKWP0() throws Exception {
    when(parentNodeMock.asPath()).thenReturn("/parent/path");
    assertEquals("/parent/path", nullPropertyPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_ByNameAttributeTrue_ygPv0() throws Exception {
    when(parentNodeMock.asPath()).thenReturn("/parent/path");
    when(nullPropertyPointer.getPropertyName()).thenReturn("name");
    when(nullPropertyPointer.getIndex()).thenReturn(1); // Assuming index is set to 1
    String expectedPath = "/parent/path[@name='name'][2]";
    assertEquals(expectedPath, nullPropertyPointer.asPath());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_txoi0() throws Exception {
    org.w3c.dom.Node node = null; // This would be a mock if Node interactions needed to be tested
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
    String[] propertyNames = nullPropertyPointer.getPropertyNames();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(parentDOMNodePointer);
        JXPathContext mockContext = mock(JXPathContext.class);
        QName mockQName = new QName("localName");
        int index = 0;
        when(mockNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(mockNodePointer);
        when(nullPropertyPointer.createPath(any(JXPathContext.class))).thenReturn(mockNodePointer);
        NodePointer result = nullPropertyPointer.createChild(mockContext, mockQName, index);
        verify(mockNodePointer).createChild(mockContext, mockQName, index);
        assertNotNull(result, "The result should not be null");
        assertEquals(mockNodePointer, result, "The returned NodePointer should match the mocked NodePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer() throws Exception {
        nullPropertyPointer = new NullPropertyPointer(domNodePointerMock);
        // Setup
        final String expectedPropertyName = "testProperty";
        when(domNodePointerMock.getName()).thenReturn(new QName(expectedPropertyName));
        // Execution
        NodePointer result = nullPropertyPointer.getValuePointer();
        // Assertion
        assertTrue(result instanceof NullPointer, "The result should be an instance of NullPointer");
        assertTrue(((NullPointer) result).getName().toString().equals(expectedPropertyName), "The QName of the result should match the expected property name");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithBadFactoryException() {
        nullPropertyPointer = new NullPropertyPointer(mockParentNodePointer);
        // Setup
        when(mockParentNodePointer.createPath(mockContext)).thenReturn(mockParentNodePointer);
        when(mockContext.getFactory()).thenReturn(mockFactory);
        // Execution & Verification
        Exception exception = assertThrows(RuntimeException.class, () -> {
            nullPropertyPointer.createPath(mockContext);
        });
        assertTrue(exception.getMessage().contains("Bad factory exception"));
    }
}