/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeTypeTest_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringSwitch_YGZH0() {
        int testInput = 1; // This should be replaced with Compiler.NODE_TYPE_NODE if available.
        String result = NodeTypeTest.nodeTypeToString(testInput);
        assertEquals("node", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringReturnsText_NnCK1() {
        int testInput = 2; // This should be replaced with Compiler.NODE_TYPE_TEXT if available.
        String result = NodeTypeTest.nodeTypeToString(testInput);
        assertEquals("text", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringReturnsProcessingInstruction_UgwE2() {
        int testInput = 4; // This should be replaced with Compiler.NODE_TYPE_PI if available.
        String result = NodeTypeTest.nodeTypeToString(testInput);
        assertEquals("processing-instruction", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeToStringReturnsUnknown_kZDk3() {
        int testInput = 999; // Arbitrary undefined constant.
        String result = NodeTypeTest.nodeTypeToString(testInput);
        assertEquals("UNKNOWN", result);
    }
}