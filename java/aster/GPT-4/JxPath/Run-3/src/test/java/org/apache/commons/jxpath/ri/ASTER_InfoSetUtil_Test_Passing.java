/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithInteger_ihOC0() {
        assertEquals(5, InfoSetUtil.number(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNumber_hSlx0() {
        assertEquals(5.0, InfoSetUtil.doubleValue(5), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanTrue_fBsk1() {
        assertEquals(0.0, InfoSetUtil.doubleValue(true), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanFalse_ohJh2() {
        assertEquals(1.0, InfoSetUtil.doubleValue(false), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithEmptyString_emaW3() {
        assertEquals(0.0, InfoSetUtil.doubleValue(""), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringNumber_TGFA4() {
        assertEquals(123.45, InfoSetUtil.doubleValue("123.45"), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithInvalidString_tuXd5() {
        assertTrue(Double.isNaN(InfoSetUtil.doubleValue("invalid")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithPositiveNumber_OqPk0() {
        assertTrue(InfoSetUtil.booleanValue(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeNumber_ZrIt1() {
        assertTrue(InfoSetUtil.booleanValue(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithZero_SdJY2() {
        assertFalse(InfoSetUtil.booleanValue(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeZero_CopT3() {
        assertFalse(InfoSetUtil.booleanValue(-0.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_TIpG4() {
        assertFalse(InfoSetUtil.booleanValue(Double.NaN));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithTrueBoolean_Jhpc5() {
        assertTrue(InfoSetUtil.booleanValue(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithFalseBoolean_YvYZ6() {
        assertFalse(InfoSetUtil.booleanValue(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNonEmptyString_eIfi7() {
        assertTrue(InfoSetUtil.booleanValue("test"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithEmptyString_xdqH8() {
        assertFalse(InfoSetUtil.booleanValue(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNull_xBok9() {
        assertFalse(InfoSetUtil.booleanValue(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNull_mbUb0() {
        assertEquals("", InfoSetUtil.stringValue(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithString_lNMX1() {
        assertEquals("Hello", InfoSetUtil.stringValue("Hello"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithInteger_RQJE2() {
        assertEquals("100", InfoSetUtil.stringValue(100));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithDouble_AHht3() {
        assertEquals("100.5", InfoSetUtil.stringValue(100.5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithDoubleAsInteger_jwQf4() {
        assertEquals("101", InfoSetUtil.stringValue(101.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanTrue_UVFf5() {
        assertEquals("true", InfoSetUtil.stringValue(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanFalse_TgwK6() {
        assertEquals("false", InfoSetUtil.stringValue(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithDouble_bMIq1_KEJY0() {
    assertEquals("5.5", InfoSetUtil.stringValue(5.5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringNumber_cAor4_twnR0_1() {
    assertEquals("123", InfoSetUtil.stringValue("123"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringNumber_cAor4_twnR0_2() {
    assertEquals("123.0", InfoSetUtil.stringValue(123.0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringNonNumber_vsdx5_RSqR0() {
    assertEquals("abc", InfoSetUtil.stringValue("abc"));
}
}