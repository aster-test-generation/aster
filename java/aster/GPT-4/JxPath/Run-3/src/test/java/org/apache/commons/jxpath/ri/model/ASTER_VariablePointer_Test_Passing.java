/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.BasicVariables;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
@InjectMocks
    private VariablePointer variablePointer;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory factory;
@Mock
    private NodePointer clonedNodePointer;
private QName qName;
private final int index = 1;
private final String name = "testName";
@Mock
    private Variables variables;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeIterator expectedNodeIterator;
@Mock
    private NodePointer nodePointer;
    private NodePointer valuePointer;
    private boolean actual;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenPointer1LessThanPointer2() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result, "Expected pointer1 to be less than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenPointer1GreaterThanPointer2() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        when(pointer1.getIndex()).thenReturn(3);
        when(pointer2.getIndex()).thenReturn(2);
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(1, result, "Expected pointer1 to be greater than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenPointersAreEqual() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        when(pointer1.getIndex()).thenReturn(2);
        when(pointer2.getIndex()).thenReturn(2);
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result, "Expected pointers to be equal");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ThrowsExceptionForUndefinedVariable_jQAr0() {
        QName qName = new QName("undefinedVariable");
        VariablePointer variablePointer = new VariablePointer(qName);
        try {
            variablePointer.setValue("newValue");
            fail("Expected JXPathException was not thrown.");
        } catch (JXPathException e) {
            assertEquals("Cannot set undefined variable: undefinedVariable", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_DeclaresNewVariableWhenWholeCollection_Hndh2() {
        QName qName = new QName("variable");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, qName);
        variablePointer.index = VariablePointer.WHOLE_COLLECTION; // Assuming WHOLE_COLLECTION is a static field indicating non-collection index
        variablePointer.setValue("newValue");
        assertEquals("newValue", variables.getVariable("variable")); // Assuming method getVariable exists to retrieve the variable value
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNullCollection_DXFf0() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    try {
        variablePointer.createChild(context, qName, 0);
        fail("Expected an exception due to null collection");
    } catch (JXPathAbstractFactoryException e) {
        assertEquals("Factory did not assign a collection to variable 'test' for path: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithInvalidIndex_IDre1() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    try {
        variablePointer.createChild(context, qName, -1);
        fail("Expected an exception due to invalid index");
    } catch (JXPathInvalidAccessException e) {
        assertEquals("Index is less than 1: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithIndexOutOfBounds_REkO2() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    try {
        variablePointer.createChild(context, qName, 100);
        fail("Expected an exception due to index out of bounds");
    } catch (JXPathAbstractFactoryException e) {
        assertEquals("Factory could not create object path: ", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_eVCm3() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, 0);
    assertNotNull(result);
    assertEquals(0, result.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWholeCollection_ivGJ4() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, VariablePointer.WHOLE_COLLECTION);
    assertNotNull(result);
    assertEquals(0, result.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithNullValue_UFRp0() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    assertFalse(variablePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithCollectionValue_tKjf1() {
    QName qName = new QName("test");
    KeywordVariables variables = new KeywordVariables("keyword", new ArrayList<>());
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    assertTrue(variablePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithNonCollectionValue_hexc2() {
    QName qName = new QName("test");
    KeywordVariables variables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    assertFalse(variablePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_WholeCollection_sGph0() {
        QName qName = new QName("testName");
        VariablePointer variablePointer = new VariablePointer(qName);
        variablePointer.index = VariablePointer.WHOLE_COLLECTION;
        Object expected = ValueUtils.getValue(variablePointer.getBaseValue());
        Object result = variablePointer.getImmediateNode();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_SpecificIndex_zelE1() {
        QName qName = new QName("testName");
        VariablePointer variablePointer = new VariablePointer(qName);
        variablePointer.index = 1; // Assuming 1 is a valid index for testing
        Object expected = ValueUtils.getValue(variablePointer.getBaseValue(), 1);
        Object result = variablePointer.getImmediateNode();
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithVariables_WmaU0() {
        QName qName = new QName("prefix", "localName");
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        int expectedHashCode = System.identityHashCode(keywordVariables) + qName.hashCode();
        assertEquals(expectedHashCode, variablePointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutVariables_ggVU1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        int expectedHashCode = qName.hashCode();
        assertEquals(expectedHashCode, variablePointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_GAIP0() {
    QName qName = new QName("testPrefix", "testLocalName");
    VariablePointer variablePointer = new VariablePointer(qName);
    NodeIterator result = variablePointer.attributeIterator(qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_NsHt0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    QName result = variablePointer.getName();
    assertEquals(qName, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_BaseValueNull_xqYL0() {
        QName qName = new QName("test");
        VariablePointer vp = new VariablePointer(qName);
        assertEquals(1, vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_BaseValueNotNullAndEmpty_XpfE1() {
        QName qName = new QName("test");
        KeywordVariables kv = new KeywordVariables("keyword", "");
        VariablePointer vp = new VariablePointer(kv, qName);
        assertEquals(1, vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_BaseValueNotNullAndNonEmpty_OibO2() {
        QName qName = new QName("test");
        KeywordVariables kv = new KeywordVariables("keyword", "value");
        VariablePointer vp = new VariablePointer(kv, qName);
        assertEquals(5, vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_cKQN0() {
        QName qName = new QName("test");
        VariablePointer vp = new VariablePointer(qName);
        assertTrue(vp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_zvHc1() {
        QName qName = new QName("test");
        KeywordVariables kv = new KeywordVariables("keyword", "atomicValue");
        VariablePointer vp = new VariablePointer(kv, qName);
        assertTrue(vp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_DSAS2() {
        QName qName = new QName("test");
        KeywordVariables kv = new KeywordVariables("keyword", new Object());
        VariablePointer vp = new VariablePointer(kv, qName);
        assertFalse(vp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespaceIterator_HbOX0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    NodeIterator result = variablePointer.namespaceIterator();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_KLIo0() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        assertTrue(vp.equals(vp));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_kRxZ1() {
        QName qName1 = new QName("localName");
        VariablePointer vp1 = new VariablePointer(qName1);
        QName qName2 = new QName("localName");
        VariablePointer vp2 = new VariablePointer(qName2);
        assertTrue(vp1.equals(vp2) && vp2.equals(vp1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_QAVA2() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        assertFalse(vp.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_CQEa3() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        Object other = new Object();
        assertFalse(vp.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_OFCg4() {
        QName qName1 = new QName("localName1");
        VariablePointer vp1 = new VariablePointer(qName1);
        QName qName2 = new QName("localName2");
        VariablePointer vp2 = new VariablePointer(qName2);
        assertFalse(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_WithKeywordVariables_uQga5() {
        QName qName = new QName("localName");
        KeywordVariables kv = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(kv, qName);
        VariablePointer vp2 = new VariablePointer(kv, qName);
        assertTrue(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_ActualTrue_XYUY0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer result = variablePointer.getImmediateValuePointer();
        assertNotNull(result);
        assertEquals(result.getImmediateNode(), variablePointer.getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_ActualFalse_pqNl1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer result = variablePointer.getImmediateValuePointer();
        assertTrue(result instanceof NullPointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithValueSetTrue_feMl0() {
    QName qName = new QName("testName");
    KeywordVariables variables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    Object value = new Object();
    NodePointer result = variablePointer.createPath(context, value);
    assertEquals(value, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullFactory_iKtL2() {
        QName name = new QName("testVariable");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, name);
        JXPathContext context = JXPathContext.newContext(new Object());
        context.setFactory(null); // No factory set
        try {
            variablePointer.createPath(context);
            fail("NullPointerException expected due to null factory");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_InvalidNegativeIndex_DmTZ1() {
        QName qName = new QName("testName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = -1;
        assertThrows(JXPathInvalidAccessException.class, () -> pointer.remove());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexWithinBounds_ifmb2() {
        QName qName = new QName("testName");
        List<Object> list = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        KeywordVariables variables = new KeywordVariables("keyword", list);
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = 1;
        pointer.remove();
        assertEquals(2, list.size());
        assertFalse(list.contains("item2"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexOutOfBounds_SJFj3() {
        QName qName = new QName("testName");
        List<Object> list = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        KeywordVariables variables = new KeywordVariables("keyword", list);
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = 5;
        pointer.remove();
        assertEquals(3, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_EmptyCollection_gmAn5() {
        QName qName = new QName("testName");
        List<Object> list = new ArrayList<>();
        KeywordVariables variables = new KeywordVariables("keyword", list);
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = 0;
        pointer.remove();
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContainerReturnsTrue_NjeF0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_FuiJ0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer result = variablePointer.namespacePointer("someNamespace");
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_aNqj0() {
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    Object value = new Object();
    NodePointer result = variablePointer.createChild(context, name, index, value);
    assertNotNull(result);
    assertEquals(index, result.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithSimpleQName_ypZN0() {
        QName qName = new QName("simpleName");
        VariablePointer pointer = new VariablePointer(qName);
        assertEquals("$simpleName", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithPrefixedQName_rvBI1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer pointer = new VariablePointer(qName);
        assertEquals("$prefix:localName", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariables_KLgF2() {
        QName qName = new QName("keywordName");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer pointer = new VariablePointer(variables, qName);
        assertEquals("$keywordName", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithIndex_eNLH3() {
        QName qName = new QName("indexedName");
        VariablePointer pointer = new VariablePointer(qName);
        assertEquals("$indexedName[1]", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNegativeIndex_Sfij4() {
        QName qName = new QName("negativeIndexedName");
        VariablePointer pointer = new VariablePointer(qName);
        assertEquals("$negativeIndexedName", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithHighIndex_CRSJ5() {
        QName qName = new QName("highIndexedName");
        VariablePointer pointer = new VariablePointer(qName);
        assertEquals("$highIndexedName[100]", pointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueWithUndefinedVariable_eCtm0() {
    QName qName = new QName("undefinedVariable");
    KeywordVariables keywordVariables = new KeywordVariables("keyword", null);
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    try {
        variablePointer.getBaseValue();
        fail("Expected JXPathException was not thrown.");
    } catch (JXPathException e) {
        assertEquals("Undefined variable: undefinedVariable", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueWithDefinedVariable_Tlmz1() {
    QName qName = new QName("definedVariable");
    Map<String, Object> map = new HashMap<>();
    map.put("definedVariable", "value");
    KeywordVariables keywordVariables = new KeywordVariables("keyword", map);
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    assertEquals("value", variablePointer.getBaseValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActualReturnsTrue_QgZm0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_eVCm3_1() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, 0);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_eVCm3_2() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, 0);
    assertEquals(0, result.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWholeCollection_ivGJ4_1() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, VariablePointer.WHOLE_COLLECTION);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWholeCollection_ivGJ4_2() {
    QName qName = new QName("test");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = variablePointer.createChild(context, qName, VariablePointer.WHOLE_COLLECTION);
    assertEquals(0, result.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_ActualTrue_XYUY0_1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer result = variablePointer.getImmediateValuePointer();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_ActualTrue_XYUY0_2() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer result = variablePointer.getImmediateValuePointer();
        assertEquals(result.getImmediateNode(), variablePointer.getImmediateNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexWithinBounds_ifmb2_1() {
        QName qName = new QName("testName");
        List<Object> list = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        KeywordVariables variables = new KeywordVariables("keyword", list);
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = 1;
        pointer.remove();
        assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexWithinBounds_ifmb2_2() {
        QName qName = new QName("testName");
        List<Object> list = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        KeywordVariables variables = new KeywordVariables("keyword", list);
        VariablePointer pointer = new VariablePointer(variables, qName);
        pointer.index = 1;
        pointer.remove();
        assertFalse(list.contains("item2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_aNqj0_1() {
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    Object value = new Object();
    NodePointer result = variablePointer.createChild(context, name, index, value);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_aNqj0_2() {
    QName name = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(name);
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    Object value = new Object();
    NodePointer result = variablePointer.createChild(context, name, index, value);
    assertEquals(index, result.getIndex());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testGetImmediateValuePointer_UndefinedVariable_Qppi2_NclU0() {
        assertThrows(JXPathException.class, () -> {
            QName qName = new QName("prefix", "localName");
            VariablePointer variablePointer = new VariablePointer(qName);
            NodePointer result = variablePointer.getImmediateValuePointer();
            result.getImmediateNode(); // This should throw JXPathException
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariableFound_GNhn0() throws Exception {
    QName name = new QName("testVariable");
    KeywordVariables variables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(variables, name);
    JXPathContext context = mock(JXPathContext.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable(name.toString())).thenReturn(true);
    when(context.getParentContext()).thenReturn(null);
    variablePointer.findVariables(context);
    assertTrue(variablePointer.isActual(), "Variable should be marked as actual when found.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesWhenVariableIsDeclared_RkUe0_gjWV0() {
    QName qName = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    Object contextBean = new Object();
    JXPathContext context = JXPathContext.newContext(null, contextBean);
    Variables variables = new BasicVariables();
    variables.declareVariable("testVariable", new Object());
    context.setVariables(variables);
    variablePointer.findVariables(context);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesWhenVariableIsNotDeclared_EkLi1_YHHR0() {
    QName qName = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    Object contextBean = new Object();
    JXPathContext context = JXPathContext.newContext(contextBean);
    Variables variables = new BasicVariables();
    context.setVariables(variables);
    variablePointer.findVariables(context);
    assertFalse(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariablesWhenVariableIsDeclaredInParentContext_IMuN2_flyf0() {
    QName qName = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    Object grandParentContextBean = new Object();
    JXPathContext grandParent = JXPathContext.newContext(null, grandParentContextBean);
    Variables grandParentVariables = new BasicVariables();
    grandParentVariables.declareVariable("testVariable", new Object());
    grandParent.setVariables(grandParentVariables);
    Object parentContextBean = new Object();
    JXPathContext parentContext = JXPathContext.newContext(grandParent, parentContextBean);
    Object contextBean = new Object();
    JXPathContext context = JXPathContext.newContext(parentContext, contextBean);
    variablePointer.findVariables(context);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_WholeCollection_EJBN0_JzEn0() {
    QName qName = new QName("testName");
    KeywordVariables variables = new KeywordVariables("keyword", new Object());
    VariablePointer pointer = new VariablePointer(variables, qName);
    pointer.remove();
    assertTrue(pointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_ActualFalse_FactoryCanDeclareVariable_BZnJ0_1() throws Exception {
    QName name = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
    when(factory.declareVariable(context, name.toString())).thenReturn(true);
    NodePointer result = variablePointer.createPath(context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_ActualFalse_FactoryCanDeclareVariable_BZnJ0_2() throws Exception {
    QName name = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
    when(factory.declareVariable(context, name.toString())).thenReturn(true);
    NodePointer result = variablePointer.createPath(context);
    assertEquals(variablePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_ActualFalse_FactoryCannotDeclareVariable_kdpI0_1() {
    QName name = new QName("qualifiedName");
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
    when(factory.declareVariable(context, name.toString())).thenReturn(false);
    Exception exception = assertThrows(JXPathAbstractFactoryException.class, () -> {
        variablePointer.createPath(context);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_oKMN0() throws Exception {
    QName name = new QName("qualifiedName");
    VariablePointer variablePointer = new VariablePointer(name);
    int index = 1;
    Object value = new Object();
    NodePointer expectedNodePointer = mock(NodePointer.class);
    when(variablePointer.clone()).thenReturn(expectedNodePointer);
    NodePointer result = variablePointer.createChild(context, new org.apache.commons.jxpath.ri.QName("qualifiedName"), index, value);
    verify(expectedNodePointer).setIndex(index);
}
}