/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Method;
import java.util.Arrays;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatch_NtzC0_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "abs", new Object[]{-10});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatch_NtzC0_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "abs", new Object[]{-10});
        assertEquals("abs", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_FHYA1_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "random", null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_FHYA1_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "random", null);
        assertEquals("random", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NoMatch_EJhF2() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "nonExistentMethod", new Object[]{"test"});
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_AmbiguousMatch_IFYT3() {
        try {
            MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2.0});
            fail("Expected an JXPathException to be thrown");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: max", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithNull_TkUo4_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getProperty", new Object[]{null});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithNull_TkUo4_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getProperty", new Object[]{null});
        assertEquals("getProperty", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithOverloads_NQxe5_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "min", new Object[]{10, 20});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithOverloads_NQxe5_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "min", new Object[]{10, 20});
        assertEquals("min", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithDifferentTypes_DABx6_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1.0, 2.0});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithDifferentTypes_DABx6_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1.0, 2.0});
        assertEquals("max", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithSubtypeParameters_PJfu7_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "sort", new Object[]{new ArrayList<>()});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithSubtypeParameters_PJfu7_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "sort", new Object[]{new ArrayList<>()});
        assertEquals("sort", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithInterfaceParameters_hQWx8_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "shuffle", new Object[]{new ArrayList<>(), new Random()});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithInterfaceParameters_hQWx8_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "shuffle", new Object[]{new ArrayList<>(), new Random()});
        assertEquals("shuffle", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithArrayParameters_SWWw9_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "asList", new Object[]{new Object[]{"one", "two", "three"}});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithArrayParameters_SWWw9_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "asList", new Object[]{new Object[]{"one", "two", "three"}});
        assertEquals("asList", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithPrimitiveArray_gkuC10_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "toString", new Object[]{new int[]{1, 2, 3}});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithPrimitiveArray_gkuC10_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "toString", new Object[]{new int[]{1, 2, 3}});
        assertEquals("toString", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithBoxedAndPrimitiveTypes_aPLp11_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithBoxedAndPrimitiveTypes_aPLp11_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2});
        assertEquals("max", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithNullInParameters_qCJr12_1() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getenv", new Object[]{null});
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithNullInParameters_qCJr12_2() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getenv", new Object[]{null});
        assertEquals("getenv", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithMultipleNulls_rewx13() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getProperties", new Object[]{null, null});
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullParameters_phbO0() {
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_EmptyParameters_ZBWz1() {
        Object[] parameters = {};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_FirstParameterNull_jXmX2() {
        Object[] parameters = {null, 1};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NoMatchType_Vvgo3() {
        Object[] parameters = {new Object(), 1};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ExactMatch_rPjh4() throws NoSuchMethodException {
        Object[] parameters = {new String("example"), 0, 3};
        Method expected = String.class.getMethod("substring", int.class, int.class);
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ExactMatchSingleParameter_PsiM5() throws NoSuchMethodException {
        Object[] parameters = {new String("example"), 4};
        Method expected = String.class.getMethod("substring", int.class);
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_InexactMatch_UEMa6() {
        Object[] parameters = {new String("example"), "4"};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_AmbiguousCall_WMHR7() {
        Object[] parameters = {new String("example"), 1, 2};
        try {
            MethodLookupUtils.lookupMethod(String.class, "compareTo", parameters);
            fail("Expected JXPathException to be thrown");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: compareTo", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NoSuchMethod_NCUt8() {
        Object[] parameters = {new String("example"), 1.5};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_StaticMethod_icJz9() {
        Object[] parameters = {Math.class, 2.0};
        Method result = MethodLookupUtils.lookupMethod(Math.class, "abs", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_NullTypeInParameters_bYmc11() {
        Object[] parameters = {new String("example"), null};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_MultipleNullsInParameters_UbHo12() {
        Object[] parameters = {new String("example"), null, null};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_DifferentTypeInParameters_QhfO13() {
        Object[] parameters = {new String("example"), new Integer(1), new Double(2)};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ValidParametersWithNulls_uvCh14() {
        Object[] parameters = {new String("example"), 1, null};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethod_ValidParametersDifferentOrder_bnqT15() {
        Object[] parameters = {new String("example"), 3, 1};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatch_NtzC0() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "abs", new Object[]{-10});
        assertNotNull(result);
        assertEquals("abs", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_NullParameters_FHYA1() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "random", null);
        assertNotNull(result);
        assertEquals("random", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithNull_TkUo4() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getProperty", new Object[]{null});
        assertNotNull(result);
        assertEquals("getProperty", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithOverloads_NQxe5() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "min", new Object[]{10, 20});
        assertNotNull(result);
        assertEquals("min", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_ExactMatchWithDifferentTypes_DABx6() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1.0, 2.0});
        assertNotNull(result);
        assertEquals("max", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithSubtypeParameters_PJfu7() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "sort", new Object[]{new ArrayList<>()});
        assertNotNull(result);
        assertEquals("sort", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithInterfaceParameters_hQWx8() {
        Method result = MethodLookupUtils.lookupStaticMethod(Collections.class, "shuffle", new Object[]{new ArrayList<>(), new Random()});
        assertNotNull(result);
        assertEquals("shuffle", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithArrayParameters_SWWw9() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "asList", new Object[]{new Object[]{"one", "two", "three"}});
        assertNotNull(result);
        assertEquals("asList", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithPrimitiveArray_gkuC10() {
        Method result = MethodLookupUtils.lookupStaticMethod(Arrays.class, "toString", new Object[]{new int[]{1, 2, 3}});
        assertNotNull(result);
        assertEquals("toString", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithBoxedAndPrimitiveTypes_aPLp11() {
        Method result = MethodLookupUtils.lookupStaticMethod(Math.class, "max", new Object[]{1, 2});
        assertNotNull(result);
        assertEquals("max", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_WithNullInParameters_qCJr12() {
        Method result = MethodLookupUtils.lookupStaticMethod(System.class, "getenv", new Object[]{null});
        assertNotNull(result);
        assertEquals("getenv", result.getName());
    }
}