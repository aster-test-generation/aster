/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtensionFunction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_hqPb0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction function = new ExtensionFunction(functionName, args);
        String result = function.toString();
        assertEquals("testFunction()", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_FAYr3() {
        QName functionName = new QName("testFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        String result = function.toString();
        assertEquals("testFunction()", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_pErt0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0]; // Assuming empty for simplicity
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        EvalContext context = mock(EvalContext.class);
        when(extensionFunction.computeValue(context)).thenReturn("Expected Result");
        Object result = extensionFunction.compute(context);
        assert "Expected Result".equals(result);
    }
}