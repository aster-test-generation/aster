/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
@Mock
    private DOMNodePointer parentPointer;
private NullElementPointer nullElementPointer;
private int index = 5;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private DOMNodePointer parentMock;
@Mock
    private JXPathContext contextMock;
@Mock
    private NodePointer expectedNodePointer;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private NodePointer immediateParentPointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DOMNodePointer parentNode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        assertTrue(nullElementPointer.equals(nullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        assertFalse(nullElementPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        Object differentObject = new Object();
        assertFalse(nullElementPointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameParentAndIndex_ReturnsTrue() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        NullElementPointer anotherPointer = new NullElementPointer(parentPointer, index);
        assertTrue(nullElementPointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        DOMNodePointer anotherParentPointer = mock(DOMNodePointer.class);
        NullElementPointer anotherPointer = new NullElementPointer(anotherParentPointer, index);
        assertFalse(nullElementPointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentIndex_ReturnsFalse() {
        nullElementPointer = new NullElementPointer(parentPointer, index);
        NullElementPointer anotherPointer = new NullElementPointer(parentPointer, index + 1);
        assertFalse(nullElementPointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        // Initialize NullElementPointer with a mock DOMNodePointer
        nullElementPointer = new NullElementPointer(mockParent, 0);
        // Assert that calling setValue on NullElementPointer throws UnsupportedOperationException
        assertThrows(UnsupportedOperationException.class, () -> {
            nullElementPointer.setValue("anyValue");
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_1() throws Exception {
        // Mock the getName method to return a QName object
        when(domNodePointer.getName()).thenReturn(qName);
        // Initialize NullElementPointer with a mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(domNodePointer, 0);
        // Execute the method to test
        NodePointer result = nullElementPointer.getValuePointer();
        // Verify the result is an instance of NullPointer
        // Verify the NullPointer is correctly initialized with the expected QName
        assertTrue(result instanceof NullPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_2() throws Exception {
        // Mock the getName method to return a QName object
        when(domNodePointer.getName()).thenReturn(qName);
        // Initialize NullElementPointer with a mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(domNodePointer, 0);
        // Execute the method to test
        NodePointer result = nullElementPointer.getValuePointer();
        // Verify the result is an instance of NullPointer
        // Verify the NullPointer is correctly initialized with the expected QName
        assertTrue(((NullPointer) result).getName() == qName);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_Gbvh0_1() {
    QName qName = new QName("testNamespace");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertTrue(result instanceof NullPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_Gbvh0_2() {
    QName qName = new QName("testNamespace");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertEquals(qName, result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        nullElementPointer = new NullElementPointer(mockParent, 0);
        JXPathContext mockContext = mock(JXPathContext.class);
        Object value = new Object();
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(mockParent.createChild(any(JXPathContext.class), any(), anyInt(), any())).thenReturn(expectedNodePointer);
        NodePointer result = nullElementPointer.createPath(mockContext, value);
        verify(mockParent).createChild(mockContext, null, 0, value);
        assertEquals(expectedNodePointer, result, "The returned NodePointer should match the expected one.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        // Mocking DOMNodePointer as it is the dependency required for NullElementPointer
        DOMNodePointer mockedParent = org.mockito.Mockito.mock(DOMNodePointer.class);
        // Initialize NullElementPointer with the mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(mockedParent, 0);
        // Since isCollection method of NullElementPointer always returns false
        // we assert that the returned value is indeed false
        assertFalse(nullElementPointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() {
        // Assuming DOMNodePointer can be mocked or instantiated with null values for simplicity
        DOMNodePointer parentNode = new DOMNodePointer(null, null, null);
        nullElementPointer = new NullElementPointer(parentNode, 0);
        // Act
        Object result = nullElementPointer.getImmediateNode();
        // Assert
        assertNull(result, "The getImmediateNode method should return null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() throws Exception {
        DOMNodePointer parent = new DOMNodePointer(null, null, "testId");
        nullElementPointer = new NullElementPointer(parent, 0);
        assertTrue(nullElementPointer.isContainer(), "NullElementPointer should always return true for isContainer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        when(parentPointer.hashCode()).thenReturn(123);
        nullElementPointer = new NullElementPointer(parentPointer, index);
        int expectedHashCode = 123 + index;
        assertEquals(expectedHashCode, nullElementPointer.hashCode(), "The hash code should be the sum of the parent's hash code and the index.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Assuming DOMNodePointer can be mocked or instantiated with nulls if its methods are not used in the test
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        nullElementPointer = new NullElementPointer(domNodePointer, 0);
        QName result = nullElementPointer.getName();
        assertNull(result, "The getName method should return null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        // Initialize NullElementPointer with a mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(mockDomNodePointer, 0);
        // Act
        PropertyPointer result = nullElementPointer.getPropertyPointer();
        // Assert
        assertTrue(result instanceof NullPropertyPointer, "The result should be an instance of NullPropertyPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithValidParent() throws Exception {
        // Assuming index and WHOLE_COLLECTION are accessible; typically these would be static/final in the class
        int index = 1; // Example index
        int WHOLE_COLLECTION = -1; // Example constant for WHOLE_COLLECTION
        nullElementPointer = new NullElementPointer(parentPointer, index);
        when(parentPointer.asPath()).thenReturn("/parentPath");
        when(parentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(immediateParentPointer.asPath()).thenReturn("/immediateParentPath");
        when(immediateParentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(parentPointer.getImmediateParentPointer()).thenReturn(immediateParentPointer);
        // Setup specific scenario
        when(immediateParentPointer.getIndex()).thenReturn(0); // Not WHOLE_COLLECTION
        // Execute
        String result = nullElementPointer.asPath();
        // Verify
        assertEquals("/immediateParentPath/.[2]", result, "The path should be correctly constructed based on the parent pointers and index.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithNoImmediateParentIndex() throws Exception {
        // Assuming index and WHOLE_COLLECTION are accessible; typically these would be static/final in the class
        int index = 1; // Example index
        int WHOLE_COLLECTION = -1; // Example constant for WHOLE_COLLECTION
        nullElementPointer = new NullElementPointer(parentPointer, index);
        when(parentPointer.asPath()).thenReturn("/parentPath");
        when(parentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(immediateParentPointer.asPath()).thenReturn("/immediateParentPath");
        when(immediateParentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        when(parentPointer.getImmediateParentPointer()).thenReturn(immediateParentPointer);
        // Setup specific scenario
        when(immediateParentPointer.getIndex()).thenReturn(-1); // WHOLE_COLLECTION
        // Execute
        String result = nullElementPointer.asPath();
        // Verify
        assertEquals("/immediateParentPath[2]", result, "The path should reflect the absence of a valid immediate parent index.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_debB0() {
    DOMNodePointer parent = null;
    NullElementPointer pointer = new NullElementPointer(parent, 0);
    String result = pointer.asPath();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        nullElementPointer = new NullElementPointer(mockDomNodePointer, 0);
        int length = nullElementPointer.getLength();
        assertEquals(0, length, "The length should always be 0 for NullElementPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Mocking DOMNodePointer as it is required by NullElementPointer constructor
        DOMNodePointer mockedParent = org.mockito.Mockito.mock(DOMNodePointer.class);
        // Initialize NullElementPointer with the mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(mockedParent, 0);
        // Since getBaseValue() should return null, we test exactly that
        assertNull(nullElementPointer.getBaseValue(), "The base value should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        nullElementPointer = new NullElementPointer(domNodePointerMock, 0);
        assertFalse(nullElementPointer.isActual(), "isActual should always return false for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        // Assuming index is irrelevant for the isLeaf method as it does not use the index in its logic
        nullElementPointer = new NullElementPointer(parentNode, 0);
        // Since isLeaf method in NullElementPointer always returns true, the test should always expect true
        assertTrue(nullElementPointer.isLeaf(), "isLeaf should always return true for NullElementPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafReturnsTrue_Ipkg0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    assertTrue(nullElementPointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_O_Unique_iIRK0() throws Exception {
    int index = 0;
    NullElementPointer nullElementPointer = new NullElementPointer(parentMock, index);
    when(parentMock.createChild(contextMock, null, 0)).thenReturn(expectedNodePointer);
    NodePointer result = nullElementPointer.createPath(contextMock);
    verify(parentMock).createChild(contextMock, null, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer() throws Exception {
        // Mock the getName method to return a QName object
        when(domNodePointer.getName()).thenReturn(qName);
        // Initialize NullElementPointer with a mocked DOMNodePointer
        nullElementPointer = new NullElementPointer(domNodePointer, 0);
        // Execute the method to test
        NodePointer result = nullElementPointer.getValuePointer();
        // Verify the result is an instance of NullPointer
        assertTrue(result instanceof NullPointer);
        // Verify the NullPointer is correctly initialized with the expected QName
        assertTrue(((NullPointer) result).getName() == qName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_Gbvh0() {
    QName qName = new QName("testNamespace");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), "testId");
    NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
    NodePointer result = nullElementPointer.getValuePointer();
    assertTrue(result instanceof NullPointer);
    assertEquals(qName, result.getName());
}
}