/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.net.URL;
import javax.xml.transform.Source;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XMLDocumentContainer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullSource_CiRR1() {
        XMLDocumentContainer container = new XMLDocumentContainer((Source) null);
        try {
            container.getValue();
            fail("Expected an exception when source is null");
        } catch (JXPathException e) {
            assertNotNull("Exception should contain a message", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullURL_SVAZ4() {
        XMLDocumentContainer container = new XMLDocumentContainer((URL) null);
        try {
            container.getValue();
            fail("Expected an exception when URL is null");
        } catch (JXPathException e) {
            assertNotNull("Exception should contain a message", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithValidURL_HqNq2_xQGV0() throws Exception {
    URL xmlURL = new URL("http://example.com/sample.xml");
    XMLDocumentContainer container = new XMLDocumentContainer(xmlURL);
    assertNotNull(container.getValue(), "Document should not be null when URL is valid");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInvalidURL_DpMv3_hfHH0() {
    try {
        URL xmlURL = new URL("http://invalid-url");
        XMLDocumentContainer container = new XMLDocumentContainer(xmlURL);
        container.getValue();
        fail("Expected an exception for an invalid URL");
    } catch (Exception e) {
        assertTrue(e instanceof JXPathException, "Exception should be a JXPathException");
    }
}
}