/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Collections;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassFunctions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullNamespaceAndNonMatchingInstanceNamespace_MdwU0() {
        ClassFunctions cf = new ClassFunctions(Function.class, "someNamespace");
        assertNull(cf.getFunction(null, "methodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithMatchingNamespaceAndNonExistentMethod_JIVf1() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNull(cf.getFunction("testNamespace", "nonExistentMethod", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNullParameters_RImO2() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNull(cf.getFunction(null, "methodName", null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionConstructorSuccess_xcRa3() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNotNull(cf.getFunction(null, "new", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionStaticMethodSuccess_uAxc4() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNotNull(cf.getFunction("testNamespace", "staticMethodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionInstanceMethodSuccess_oPnJ5() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNotNull(cf.getFunction("testNamespace", "instanceMethodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithNonMatchingNamespace_OgKP6() {
        ClassFunctions cf = new ClassFunctions(Function.class, "namespace1");
        assertNull(cf.getFunction("namespace2", "methodName", new Object[] {}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithConstructorNotFound_SZXT7() {
        ClassFunctions cf = new ClassFunctions(Function.class, null);
        assertNull(cf.getFunction(null, "new", new Object[] {1, "param"}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionWithMethodNotFound_oqCU8() {
        ClassFunctions cf = new ClassFunctions(Function.class, "testNamespace");
        assertNull(cf.getFunction("testNamespace", "missingMethod", new Object[] {1, 2}));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUsedNamespaces_HksH0() {
    ClassFunctions classFunctions = new ClassFunctions(Object.class, "com.example");
    Set<String> expected = Collections.singleton("com.example");
    assertEquals(expected, classFunctions.getUsedNamespaces());
}
}