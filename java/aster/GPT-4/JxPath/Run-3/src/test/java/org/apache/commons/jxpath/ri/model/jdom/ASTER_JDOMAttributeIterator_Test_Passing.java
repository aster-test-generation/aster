/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributeIterator_Test_Passing {
private JDOMAttributeIterator jdomAttributeIterator;
private DOMNodePointer mockDomNodePointer;
private QName mockQName;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private QName mockName;
@Mock
    private List<Attribute> attributes;
@Mock
    private NodePointer parent;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        mockDomNodePointer = mock(DOMNodePointer.class);
        mockQName = mock(QName.class);
        jdomAttributeIterator = new JDOMAttributeIterator(mockDomNodePointer, mockQName);
        // Since the position is initialized to 0 and there are no methods to change it in the provided code,
        // the expected behavior is that getPosition always returns 0.
        assertEquals(0, jdomAttributeIterator.getPosition(), "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AttributesEmpty_ReturnsNull() {
        // Initialize JDOMAttributeIterator with mocks
        jdomAttributeIterator = new JDOMAttributeIterator(parent, new QName("test"));
        // Setup
        when(attributes.isEmpty()).thenReturn(true);
        // Execute
        NodePointer result = jdomAttributeIterator.getNodePointer();
        // Verify
        assertNull(result, "Expected result to be null when attributes are empty");
        verify(attributes, times(1)).isEmpty();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AttributesNotEmpty_ReturnsNodePointer_1() {
        // Initialize JDOMAttributeIterator with mocks
        jdomAttributeIterator = new JDOMAttributeIterator(parent, new QName("test"));
        // Setup
        Attribute mockAttribute = mock(Attribute.class);
        List<Attribute> attributeList = new ArrayList<>();
        attributeList.add(mockAttribute);
        when(attributes.get(0)).thenReturn(mockAttribute);
        when(attributes.size()).thenReturn(1);
        // Execute
        NodePointer result = jdomAttributeIterator.getNodePointer();
        // Verify
        verify(attributes, times(1)).get(0);
        assertNotNull(result, "Expected result to be not null when attributes are not empty");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AttributesNotEmpty_ReturnsNodePointer_2() {
        // Initialize JDOMAttributeIterator with mocks
        jdomAttributeIterator = new JDOMAttributeIterator(parent, new QName("test"));
        // Setup
        Attribute mockAttribute = mock(Attribute.class);
        List<Attribute> attributeList = new ArrayList<>();
        attributeList.add(mockAttribute);
        when(attributes.get(0)).thenReturn(mockAttribute);
        when(attributes.size()).thenReturn(1);
        // Execute
        NodePointer result = jdomAttributeIterator.getNodePointer();
        // Verify
        verify(attributes, times(1)).get(0);
        assertTrue(result instanceof JDOMAttributePointer, "Expected result to be instance of JDOMAttributePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AttributesNotEmpty_ReturnsNodePointer() {
        // Initialize JDOMAttributeIterator with mocks
        jdomAttributeIterator = new JDOMAttributeIterator(parent, new QName("test"));
        // Setup
        Attribute mockAttribute = mock(Attribute.class);
        List<Attribute> attributeList = new ArrayList<>();
        attributeList.add(mockAttribute);
        when(attributes.get(0)).thenReturn(mockAttribute);
        when(attributes.size()).thenReturn(1);
        // Execute
        NodePointer result = jdomAttributeIterator.getNodePointer();
        // Verify
        assertNotNull(result, "Expected result to be not null when attributes are not empty");
        assertTrue(result instanceof JDOMAttributePointer, "Expected result to be instance of JDOMAttributePointer");
        verify(attributes, times(1)).get(0);
    }
}