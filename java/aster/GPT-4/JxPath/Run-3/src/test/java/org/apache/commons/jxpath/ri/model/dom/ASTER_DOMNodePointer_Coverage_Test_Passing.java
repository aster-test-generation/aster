/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Passing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private DOMNodePointer parentNode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeVsAttribute_SameOrder_SFDv2() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        NamedNodeMap map = mock(NamedNodeMap.class);
        when(map.getLength()).thenReturn(2);
        when(map.item(0)).thenReturn(node1);
        when(map.item(1)).thenReturn(node2);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getBaseValue()).thenReturn(node1);
        when(pointer2.getBaseValue()).thenReturn(node2);
        Node node = mock(Node.class);
        when(node.getAttributes()).thenReturn(map);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, null);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assert result == -1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeVsAttribute_DifferentOrder_uNKk3() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        NamedNodeMap map = mock(NamedNodeMap.class);
        when(map.getLength()).thenReturn(2);
        when(map.item(0)).thenReturn(node2);
        when(map.item(1)).thenReturn(node1);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getBaseValue()).thenReturn(node1);
        when(pointer2.getBaseValue()).thenReturn(node2);
        Node node = mock(Node.class);
        when(node.getAttributes()).thenReturn(map);
        DOMNodePointer domNodePointer = new DOMNodePointer(node, null);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assert result == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_GvoY0_1() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("prefix");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_GvoY0_2() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("prefix");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_XFqU1_1() {
        ProcessingInstruction mockPI = mock(ProcessingInstruction.class);
        when(mockPI.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockPI.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockPI, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_XFqU1_2() {
        ProcessingInstruction mockPI = mock(ProcessingInstruction.class);
        when(mockPI.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockPI.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockPI, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("target", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForOtherNodeType_myEf2_1() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForOtherNodeType_myEf2_2() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute_NodeIsElement_ReturnNodePointer_oKLo5() {
        Element element = mock(Element.class);
        when(element.hasAttribute("test")).thenReturn(false);
        NodeIterator nodeIterator = mock(NodeIterator.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        Node node = element;
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("test");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        domNodePointer.createAttribute(context, name);
        verify(nodeIterator).setPosition(1);
        assertSame(nodePointer, domNodePointer.createAttribute(context, name));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithDocumentNode_suyb0() {
        Document doc = mock(Document.class);
        Element element = mock(Element.class);
        when(doc.getDocumentElement()).thenReturn(element);
        when(element.getNamespaceURI()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(doc);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNodeHavingNamespace_Byrk1() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn("http://example.com");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithEmptyNamespaceReturned_lmSU8() {
        Element element = mock(Element.class);
        when(element.getNamespaceURI()).thenReturn("");
        String result = DOMNodePointer.getNamespaceURI(element);
        assertNull(result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_nMPp0() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withNullDefaultNamespace_Zytm0() {
        Node node = mock(Node.class);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withDocumentNode_cMWx1() {
        Document doc = mock(Document.class);
        Element element = mock(Element.class);
        when(doc.getDocumentElement()).thenReturn(element);
        when(doc.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(doc, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withElementNodeHavingNamespace_voQb2() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertEquals("http://example.com", pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withElementNodeNoNamespace_bXDt3() {
        Element element = mock(Element.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withParentNodeTraversal_PlsP4() {
        Element child = mock(Element.class);
        Element parent = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(child.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(child.getParentNode()).thenReturn(parent);
        when(parent.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        DOMNodePointer pointer = new DOMNodePointer(child, Locale.getDefault());
        assertEquals("http://example.com", pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withMultipleLevelsOfParentNodes_CoFI5() {
        Element child = mock(Element.class);
        Element parent = mock(Element.class);
        Element grandparent = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(child.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(grandparent.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(child.getParentNode()).thenReturn(parent);
        when(parent.getParentNode()).thenReturn(grandparent);
        when(grandparent.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        DOMNodePointer pointer = new DOMNodePointer(child, Locale.getDefault());
        assertEquals("http://example.com", pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withNullNode_tFIo6() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withEmptyNamespace_wktp7() {
        Element element = mock(Element.class);
        Attr attr = mock(Attr.class);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("");
        DOMNodePointer pointer = new DOMNodePointer(element, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withNonElementNode_CZAV8() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_withDocumentElementNode_KaSV9() {
        Document doc = mock(Document.class);
        Element element = mock(Element.class);
        when(doc.getDocumentElement()).thenReturn(element);
        when(doc.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        DOMNodePointer pointer = new DOMNodePointer(doc, Locale.getDefault());
        assertNull(pointer.getDefaultNamespaceURI());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_LzIL00() {
        node = mock(Node.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullTest_ReturnsTrue_ooQl1() {
        assertTrue(DOMNodePointer.testNode(node, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeNotElement_ReturnsFalse_AEXl2() {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        assertFalse(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithWildcardAndNullPrefix_ReturnsTrue_ReyI3() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "test");
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeNode_ReturnsTrue_JTbN6() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeText_ReturnsTrueForTextNodes_DoTc7() {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeComment_ReturnsTrueForCommentNodes_XebA8() {
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypePI_ReturnsTrueForPINodes_kGFY9() {
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_PI);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_UnsupportedNodeType_ReturnsFalse_NDGw12() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(999); // Unsupported node type
        assertFalse(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeText_ReturnsFalseForNonTextNodes_DpUY13() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        assertFalse(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeComment_ReturnsFalseForNonCommentNodes_jxOt14() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        assertFalse(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypePI_ReturnsFalseForNonPINodes_tEAJ15() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_PI);
        assertFalse(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_ejTl01() {
        node = mock(Node.class);
        parentNode = mock(DOMNodePointer.class);
        domNodePointer = new DOMNodePointer(parentNode, node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathTextNode_JAZz7() {
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(parentNode.asPath()).thenReturn("");
        String result = domNodePointer.asPath();
        assertEquals("/text()[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathCDataSectionNode_ufep8() {
        when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
        when(parentNode.asPath()).thenReturn("");
        String result = domNodePointer.asPath();
        assertEquals("/text()[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathDocumentNode_zpeZ10() {
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(parentNode.asPath()).thenReturn("");
        String result = domNodePointer.asPath();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_AttributeVsNonAttribute_HTYB0_HXOi0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    when(pointer1.getBaseValue()).thenReturn(node1);
    when(pointer2.getBaseValue()).thenReturn(node2);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node1, locale, null);
    int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
    assert result == -1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_NonAttributeVsAttribute_mQma1_nmqJ0() {
    Node node1 = mock(Node.class);
    Node node2 = mock(Node.class);
    when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
    NodePointer pointer1 = mock(NodePointer.class);
    NodePointer pointer2 = mock(NodePointer.class);
    when(pointer1.getBaseValue()).thenReturn(node1);
    when(pointer2.getBaseValue()).thenReturn(node2);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node1, locale);
    int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
    assert result == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithEmptyString_pxrU1_Rjjl0() {
    Node textNode = mock(Node.class);
    when(textNode.getNodeType()).thenReturn(Node.TEXT_NODE);
    when(textNode.getParentNode()).thenReturn(mock(Node.class));
    DOMNodePointer pointer = new DOMNodePointer(textNode, Locale.getDefault());
    pointer.setValue("");
    verify(textNode.getParentNode()).removeChild(textNode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_WithNullNode_FcLg9_CCJH0() {
    DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.getDefault());
    NamespaceResolver namespaceResolver = nodePointer.getNamespaceResolver();
    String result = namespaceResolver.getNamespaceURI(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_WithNonDocumentNode_ahGX1_NlLT0() {
    Node node = mock(Node.class);
    Document document = mock(Document.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    when(document.getElementById("testID")).thenReturn(null);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = domNodePointer.getPointerByID(context, "testID");
    assertTrue(result instanceof NullPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_ElementFound_ENuY2_YNwz0() {
    Node node = mock(Node.class);
    Document document = mock(Document.class);
    Element element = mock(Element.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    when(document.getElementById("testID")).thenReturn(element);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = JXPathContext.newContext(null);
    Pointer result = domNodePointer.getPointerByID(context, "testID");
    assertTrue(result instanceof DOMNodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_NullPrefix_mjUL0_RlyM0() {
    Node node = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    assertNull(pointer.getNamespaceResolver().getNamespaceURI(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_EmptyPrefix_pZQz1_yQVL0() {
    Node node = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = new NamespaceResolver();
    pointer.setNamespaceResolver(resolver);
    assertNull(pointer.getNamespaceResolver().getNamespaceURI(""));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_XMLPrefix_wSgT2_vxip0() {
    Node node = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = pointer.getNamespaceResolver();
    resolver.registerNamespace("xml", "http://www.w3.org/XML/1998/namespace");
    assertEquals("http://www.w3.org/XML/1998/namespace", resolver.getNamespaceURI("xml"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_WithExistingNamespaceInMap_EQHg5_NDRe0() {
    Node node = mock(Node.class);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("existing", "http://example.com");
    pointer.setNamespaceResolver(resolver);
    assertEquals("http://example.com", pointer.getNamespaceResolver().getNamespaceURI("existing"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_WithAttributeNode_gPOj6_qIHV0() {
    Node node = mock(Element.class);
    Attr attr = mock(Attr.class);
    when(attr.getValue()).thenReturn("http://example.com");
    when(((Element) node).getAttributeNode("xmlns:test")).thenReturn(attr);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getParentNode()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver resolver = pointer.getNamespaceResolver();
    resolver.registerNamespace("test", "http://example.com");
    assertEquals("http://example.com", resolver.getNamespaceURI("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_AttributeNodeNotFound_jFMA7_KDPX0() {
    Node node = mock(Element.class);
    when(((Element) node).getAttributeNode("xmlns:test")).thenReturn(null);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getParentNode()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    assertNull(pointer.getNamespaceURI("test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_nMPp0_PyOC0() {
    node = mock(Node.class);
    domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_LzIL00_sSla0() {
    Node node = mock(Node.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NullTest_ReturnsTrue_ooQl1_XvPQ0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertTrue(domNodePointer.getNamespaceResolver() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeNotElement_ReturnsFalse_AEXl2_mJVh0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NodeNameTest nodeNameTest = mock(NodeNameTest.class);
    assertFalse(domNodePointer.testNode(nodeNameTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeNameTestWithWildcardAndNullPrefix_ReturnsTrue_ReyI3_lGzD0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    NodeNameTest nodeNameTest = mock(NodeNameTest.class);
    QName testName = new QName(null, "test");
    when(nodeNameTest.getNodeName()).thenReturn(testName);
    when(nodeNameTest.isWildcard()).thenReturn(true);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertTrue(domNodePointer.testNode(nodeNameTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeText_ReturnsTrueForTextNodes_DoTc7_ebHU0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
    DOMNodePointer nodePointer = new DOMNodePointer(node, Locale.getDefault());
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
    assertTrue(nodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeComment_ReturnsTrueForCommentNodes_XebA8_dRJF0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertTrue(domNodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_UnsupportedNodeType_ReturnsFalse_NDGw12_qFAS0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(999); // Unsupported node type
    DOMNodePointer nodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(nodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeText_ReturnsFalseForNonTextNodes_DpUY13_Avfs0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(domNodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypeComment_ReturnsFalseForNonCommentNodes_jxOt14_JgQc0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(domNodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_NodeTypeTest_NodeTypePI_ReturnsFalseForNonPINodes_tEAJ15_JgWu0() {
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_PI);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(domNodePointer.testNode(nodeTypeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_ejTl01_Wuno0() {
    Node node = mock(Node.class);
    Locale locale = mock(Locale.class);
    VariablePointer variablePointer = mock(VariablePointer.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullNamespaceURINoPrefix_Myln5_snRy0() {
    Node node = mock(Node.class);
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class, RETURNS_DEEP_STUBS);
    NamespaceResolver namespaceResolver = mock(NamespaceResolver.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getNamespaceURI()).thenReturn("http://example.com");
    when(node.getLocalName()).thenReturn("element");
    when(parentNode.asPath()).thenReturn("");
    when(domNodePointer.getNode()).thenReturn(node);
    when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
    when(namespaceResolver.getPrefix("http://example.com")).thenReturn(null);
    when(domNodePointer.asPath()).thenReturn("/node()[1]");
    String result = domNodePointer.asPath();
    assertEquals("/node()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathCDataSectionNode_ufep8_tkUH0() {
    Node node = mock(Node.class);
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, node);
    when(node.getNodeType()).thenReturn((short) Node.CDATA_SECTION_NODE);
    when(parentNode.asPath()).thenReturn("");
    String result = domNodePointer.asPath();
    assertEquals("/text()[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForElementNode_GvoY0() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(mockNode.getPrefix()).thenReturn("prefix");
        when(mockNode.getLocalName()).thenReturn("localName");
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals("prefix", result.getPrefix());
        assertEquals("localName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForProcessingInstructionNode_XFqU1() {
        ProcessingInstruction mockPI = mock(ProcessingInstruction.class);
        when(mockPI.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(mockPI.getTarget()).thenReturn("target");
        DOMNodePointer pointer = new DOMNodePointer(mockPI, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals("target", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameForOtherNodeType_myEf2() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.getDefault());
        QName result = pointer.getName();
        assertEquals(null, result.getPrefix());
        assertEquals(null, result.getName());
    }
}