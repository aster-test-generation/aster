/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
private QName name;
private DynaBean dynaBean;
private DOMNodePointer parent;
private DynaBeanPointer dynabeanpointer;
private DynaBeanPointer dynaBeanPointer;
@Mock
    private DOMNodePointer parentNode;
@Mock
    private QName qName;
private Locale locale;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private QName mockName;
@Mock
    private DynaBean mockDynaBean;
@InjectMocks
    private DynaBeanPointer dynaBeanPointerWithParent;
private DynaBeanPointer dynaBeanPointerWithoutParent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynabeanpointer.equals(dynabeanpointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        assertFalse(dynabeanpointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        Object differentObject = new Object();
        assertFalse(dynabeanpointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields_ReturnsTrue() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer anotherPointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynabeanpointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        DynaBeanPointer anotherPointer = new DynaBeanPointer(differentParent, name, dynaBean);
        assertFalse(dynabeanpointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        QName differentName = new QName("differentName");
        DynaBeanPointer anotherPointer = new DynaBeanPointer(parent, differentName, dynaBean);
        assertFalse(dynabeanpointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentDynaBean_ReturnsFalse() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        parent = mock(DOMNodePointer.class);
        dynabeanpointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBean differentDynaBean = mock(DynaBean.class);
        DynaBeanPointer anotherPointer = new DynaBeanPointer(parent, name, differentDynaBean);
        assertFalse(dynabeanpointer.equals(anotherPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        QName name = new QName("testNamespace", "testLocalName");
        DynaBean dynaBean = mock(DynaBean.class); // Assuming DynaBean is an interface or class you can mock.
        Locale locale = Locale.getDefault();
        dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        // Since isCollection method in DynaBeanPointer returns false, we assert that it should return false.
        assertFalse(dynaBeanPointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_WJOG0() {
    QName name = new QName("testName");
    Locale locale = new Locale("en", "US");
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
    assertFalse(dynaBeanPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parentNode, qName, dynaBean);
        // Arrange
        when(dynaBean.toString()).thenReturn("Mocked DynaBean");
        // Act
        Object result = dynaBeanPointer.getImmediateNode();
        // Assert
        assertNotNull(result, "The result should not be null");
        assertTrue(result instanceof DynaBean, "The result should be an instance of DynaBean");
        assertEquals(dynaBean, result, "The result should be the mocked DynaBean instance");
        assertEquals("Mocked DynaBean", result.toString(), "The result should match the mocked toString value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithName() throws Exception {
        when(name.hashCode()).thenReturn(123);
        // Setup the name to return a consistent hashCode
        int expectedHashCode = 123;
        assertEquals(expectedHashCode, dynaBeanPointer.hashCode(), "The hash code should match the mocked hash code of the name object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithNullName() throws Exception {
        when(name.hashCode()).thenReturn(123);
        // Setup the scenario where name is null
        dynaBeanPointer = new DynaBeanPointer(null, dynaBean, null);
        assertEquals(0, dynaBeanPointer.hashCode(), "The hash code should be zero when name is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        name = new QName("testName");
        dynaBean = mock(DynaBean.class);
        locale = Locale.ENGLISH;
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        QName result = dynabeanpointer.getName();
        assertEquals(name, result, "The getName method should return the QName object used during initialization");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() {
        qName = new QName("testNamespace", "testLocalName");
        dynaBean = mock(DynaBean.class);
        locale = Locale.getDefault();
        dynaBeanPointer = new DynaBeanPointer(qName, dynaBean, locale);
        PropertyPointer propertyPointer = dynaBeanPointer.getPropertyPointer();
        assertNotNull(propertyPointer, "PropertyPointer should not be null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithParent() throws Exception {
        // Setup for the scenario where DynaBeanPointer has a parent
        dynaBeanPointerWithParent = new DynaBeanPointer(mockParent, mockName, mockDynaBean);
        // Setup for the scenario where DynaBeanPointer does not have a parent
        dynaBeanPointerWithoutParent = new DynaBeanPointer(mockName, mockDynaBean, null);
        // Mock the behavior of the parent's asPath method
        when(mockParent.asPath()).thenReturn("/parentPath");
        // Execute the method under test
        String result = dynaBeanPointerWithParent.asPath();
        // Verify the result
        assertEquals("/parentPath", result, "The asPath should return the path from the parent when parent is not null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithoutParent() throws Exception {
        // Setup for the scenario where DynaBeanPointer has a parent
        dynaBeanPointerWithParent = new DynaBeanPointer(mockParent, mockName, mockDynaBean);
        // Setup for the scenario where DynaBeanPointer does not have a parent
        dynaBeanPointerWithoutParent = new DynaBeanPointer(mockName, mockDynaBean, null);
        // Execute the method under test
        String result = dynaBeanPointerWithoutParent.asPath();
        // Verify the result
        assertEquals("/", result, "The asPath should return '/' when there is no parent.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_bcLh0() {
        QName name = new QName("testName");
        Locale locale = Locale.getDefault();
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        String result = dynaBeanPointer.asPath();
        assertEquals("/", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsOne_dxVe0() {
    QName qName = new QName("testName");
    Locale locale = Locale.getDefault();
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(qName, dynaBean, locale);
    int length = dynaBeanPointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        dynaBeanPointer = new DynaBeanPointer(parentNode, name, dynaBean);
        // Setup
        when(dynaBeanPointer.getBaseValue()).thenReturn(dynaBean);
        // Execution
        Object result = dynaBeanPointer.getBaseValue();
        // Verification
        assertEquals(dynaBean, result, "The returned base value should be the same as the mocked DynaBean instance.");
        verify(dynaBeanPointer).getBaseValue(); // Optionally verify the method was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_1() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parentNode, qName, dynaBean);
        // Arrange
        when(dynaBean.toString()).thenReturn("Mocked DynaBean");
        // Act
        Object result = dynaBeanPointer.getImmediateNode();
        // Assert
        assertNotNull(result, "The result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_2() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parentNode, qName, dynaBean);
        // Arrange
        when(dynaBean.toString()).thenReturn("Mocked DynaBean");
        // Act
        Object result = dynaBeanPointer.getImmediateNode();
        // Assert
        assertTrue(result instanceof DynaBean, "The result should be an instance of DynaBean");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_3() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parentNode, qName, dynaBean);
        // Arrange
        when(dynaBean.toString()).thenReturn("Mocked DynaBean");
        // Act
        Object result = dynaBeanPointer.getImmediateNode();
        // Assert
        assertEquals(dynaBean, result, "The result should be the mocked DynaBean instance");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_4() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parentNode, qName, dynaBean);
        // Arrange
        when(dynaBean.toString()).thenReturn("Mocked DynaBean");
        // Act
        Object result = dynaBeanPointer.getImmediateNode();
        // Assert
        assertEquals("Mocked DynaBean", result.toString(), "The result should match the mocked toString value");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_ADLB0() {
    QName name = new QName("testName");
    DynaBean dynaBean = Mockito.mock(DynaBean.class); // Using Mockito to mock the DynaBean instance
    Locale locale = Locale.getDefault();
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
}
}