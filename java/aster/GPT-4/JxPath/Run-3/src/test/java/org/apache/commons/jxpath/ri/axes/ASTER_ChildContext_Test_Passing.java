/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
@Mock
    private NodeIterator iterator;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
@InjectMocks
    private ChildContext childContext;
@Mock
    private NamespaceContext parentNamespaceContext;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodePointer nodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_initialPosition_LpUx0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_nonInitialPosition_AaPB1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        childContext.setPosition(1); // Set initial position
        boolean result = childContext.setPosition(2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_withNullParent_gbfT2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, true);
        boolean result = childContext.setPosition(1);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_reverseOrder_IPBt3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, true);
        boolean result = childContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionFails() throws Exception {
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.setPosition(1)).thenReturn(false);
        NodePointer result = childContext.getCurrentNodePointer();
        assertNull(result, "Expected null when position is 0 and setPosition returns false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds_1() throws Exception {
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(mockNodePointer);
        NodePointer result = childContext.getCurrentNodePointer();
        assertNotNull(result, "Expected non-null NodePointer when position is 0 and setPosition returns true");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds_2() throws Exception {
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(mockNodePointer);
        NodePointer result = childContext.getCurrentNodePointer();
        assertEquals(mockNodePointer, result, "Expected NodePointer returned from iterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenIteratorIsNull() throws Exception {
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        childContext = new ChildContext(parentContext, nodeTest, false, false); // Re-initialize to ensure iterator is null
        NodePointer result = childContext.getCurrentNodePointer();
        assertNull(result, "Expected null when iterator is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_ZPtQ0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, false);
        NodePointer result = childContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_ReturnsNull_WhenPositionIsZeroAndIteratorIsNull_ZYgJ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
        assertNull(childContext.getSingleNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        // Initialize ChildContext with mocked NamespaceContext and NodeTypeTest
        childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        // Arrange
        when(childContext.getCurrentPosition()).thenReturn(1);
        when(childContext.setPosition(2)).thenReturn(true);
        // Act
        boolean result = childContext.nextNode();
        // Assert
        verify(childContext).setPosition(2);
        assertTrue(result, "Expected nextNode to return true when advancing position");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_XSAK0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, true, false);
    boolean result = childContext.nextNode();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_ReturnsNullWhenIteratorIsNull_EXDW0() throws Exception {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
    when(childContext.nextNode()).thenReturn(true);
    Pointer result = childContext.getSingleNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_ReturnsNullWhenNoNodePointer_VDkt0() throws Exception {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
    when(childContext.nextNode()).thenReturn(true).thenReturn(false);
    when(childContext.getSingleNodePointer()).thenReturn(null);
    Pointer result = childContext.getSingleNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_WhenPositionIsZeroAndSetPositionSucceeds() throws Exception {
        childContext = new ChildContext(parentContext, nodeTest, false, false);
        when(iterator.setPosition(1)).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(mockNodePointer);
        NodePointer result = childContext.getCurrentNodePointer();
        assertNotNull(result, "Expected non-null NodePointer when position is 0 and setPosition returns true");
        assertEquals(mockNodePointer, result, "Expected NodePointer returned from iterator");
    }
}