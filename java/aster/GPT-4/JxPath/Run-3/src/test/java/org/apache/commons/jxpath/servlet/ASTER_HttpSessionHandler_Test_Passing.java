/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.http.HttpSession;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionHandler_Test_Passing {
HttpSessionHandler httpsessionhandler;
HttpSession httpsession;
HttpSessionAndServletContext httpsessionandservletcontext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_SessionExists() throws Exception {
        httpsession = mock(HttpSession.class);
        httpsessionandservletcontext = mock(HttpSessionAndServletContext.class);
        httpsessionhandler = new HttpSessionHandler();
        // Arrange
        String property = "attributeKey";
        String value = "attributeValue";
        when(httpsessionandservletcontext.getSession()).thenReturn(httpsession);
        // Act
        httpsessionhandler.setProperty(httpsessionandservletcontext, property, value);
        // Assert
        verify(httpsession).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_SessionIsNull_ThrowsException_1() {
        httpsession = mock(HttpSession.class);
        httpsessionandservletcontext = mock(HttpSessionAndServletContext.class);
        httpsessionhandler = new HttpSessionHandler();
        // Arrange
        String property = "attributeKey";
        String value = "attributeValue";
        when(httpsessionandservletcontext.getSession()).thenReturn(null);
        // Act & Assert
        // Assert
        Exception exception = assertThrows(JXPathException.class, () -> {
            httpsessionhandler.setProperty(httpsessionandservletcontext, property, value);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyWithValidSession_bByS0() {
    HttpSessionHandler handler = new HttpSessionHandler();
    HttpSessionAndServletContext mockHandle = mock(HttpSessionAndServletContext.class);
    HttpSession mockSession = mock(HttpSession.class);
    when(mockHandle.getSession()).thenReturn(mockSession);
    handler.setProperty(mockHandle, "testAttribute", "testValue");
    verify(mockSession).setAttribute("testAttribute", "testValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_SessionHasAttribute_ReturnsAttributeValue_LWZI0() throws Exception {
    HttpSession httpsession = mock(HttpSession.class);
    HttpSessionAndServletContext httpsessionandservletcontext = mock(HttpSessionAndServletContext.class);
    HttpSessionHandler httpsessionhandler = new HttpSessionHandler();
    String property = "testProperty";
    Object expectedValue = new Object();
    when(httpsessionandservletcontext.getSession()).thenReturn(httpsession);
    when(httpsession.getAttribute(property)).thenReturn(expectedValue);
    Object result = httpsessionhandler.getProperty(httpsessionandservletcontext, property);
    assertEquals(expectedValue, result);
    verify(httpsession, times(1)).getAttribute(property);
    verify(httpsessionandservletcontext, never()).getServletContext();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_SessionIsNull_ThrowsException() {
        httpsession = mock(HttpSession.class);
        httpsessionandservletcontext = mock(HttpSessionAndServletContext.class);
        httpsessionhandler = new HttpSessionHandler();
        // Arrange
        String property = "attributeKey";
        String value = "attributeValue";
        when(httpsessionandservletcontext.getSession()).thenReturn(null);
        // Act & Assert
        Exception exception = assertThrows(JXPathException.class, () -> {
            httpsessionhandler.setProperty(httpsessionandservletcontext, property, value);
        });
        // Assert
        assertEquals("Cannot set session attribute: there is no session", exception.getMessage());
    }
}