/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Iterator;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Passing {
@Mock
    private Expression nameTestExpression;
@Mock
    private PropertyPointer dynamicPropertyPointer;
@InjectMocks
    private PredicateContext predicateContext;
@Mock
    private NamespaceContext parentContext;
@Mock
    private Expression expression;
@Mock
    private Iterator iterator;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodePointer expectedNodePointer;
@Mock
    private NamespaceContext mockNamespaceContext;
    private boolean done = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_StandardPositioning_OVjE0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_StandardPositioningFails_Gywg1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.setPosition(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_InvalidPosition_LMBM2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.setPosition(-1);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_DynamicPropertyPointerNull_LYbC3() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.setPosition(2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_DynamicPropertyPointerOutOfRange_gKxw5() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant(10);
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.setPosition(100);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithNullNameTestExpression_gNYH0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant constant = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        boolean result = predicateContext.setPosition(1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithInvalidPosition_ZXLm1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant constant = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
        boolean result = predicateContext.setPosition(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        // Initialization of PredicateContext with mocked NamespaceContext is handled by Mockito
        // Act
        predicateContext.reset();
        // Assert
        verify(parentContext, times(1)).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsFalseWhenNoMoreNodes() throws Exception {
        when(nameTestExpression.computeValue(parentContext)).thenReturn("expectedPropertyName");
        when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"expectedPropertyName"});
        when(parentContext.nextNode()).thenReturn(false);
        assertFalse(predicateContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeHandlesIteratorAndNodePointer() throws Exception {
        when(nameTestExpression.computeValue(parentContext)).thenReturn("expectedPropertyName");
        when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"expectedPropertyName"});
        when(parentContext.nextNode()).thenReturn(true);
        when(expression.computeValue(parentContext)).thenReturn(iterator);
        when(iterator.hasNext()).thenReturn(true);
        when(iterator.next()).thenReturn(nodePointer);
        when(nodePointer.getNode()).thenReturn(new Object()); // Assuming getNode returns an object
        assertTrue(predicateContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeHandlesNumberAndSetsPosition() throws Exception {
        when(nameTestExpression.computeValue(parentContext)).thenReturn("expectedPropertyName");
        when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"expectedPropertyName"});
        when(parentContext.nextNode()).thenReturn(true);
        when(expression.computeValue(parentContext)).thenReturn(1); // Assuming computeValue returns a Number
        when(parentContext.setPosition(1)).thenReturn(true);
        assertTrue(predicateContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsFalseWhenIteratorHasNoNext() throws Exception {
        when(nameTestExpression.computeValue(parentContext)).thenReturn("expectedPropertyName");
        when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"expectedPropertyName"});
        when(parentContext.nextNode()).thenReturn(true);
        when(expression.computeValue(parentContext)).thenReturn(iterator);
        when(iterator.hasNext()).thenReturn(false);
        assertFalse(predicateContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenDone_wNtd0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        PredicateContext context = new PredicateContext(namespaceContext, new Constant(1));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsTrueWhenPropertyNameMatches_iVKe1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        PredicateContext context = new PredicateContext(namespaceContext, new Constant("propertyName"));
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenPropertyNameDoesNotMatch_jiMy2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        PredicateContext context = new PredicateContext(namespaceContext, new Constant("invalidPropertyName"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsTrueWhenNumberIsPosition_enIy7() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        PredicateContext context = new PredicateContext(namespaceContext, new Constant(1));
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenNumberIsNotPosition_fDsd8() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        PredicateContext context = new PredicateContext(namespaceContext, new Constant(100));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndSetPositionFalse_QocR0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        Constant expression = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        assertNull(predicateContext.getCurrentNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetReturnsTrue() throws Exception {
        // Initialization of PredicateContext with a mocked NamespaceContext is handled by Mockito annotations
        // Arrange
        when(mockNamespaceContext.nextSet()).thenReturn(true);
        // Act
        boolean result = predicateContext.nextSet();
        // Assert
        assertTrue(result, "Expected nextSet to return true");
        verify(mockNamespaceContext).nextSet(); // Verify that nextSet was called on the mock
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetReturnsFalse() throws Exception {
        // Initialization of PredicateContext with a mocked NamespaceContext is handled by Mockito annotations
        // Arrange
        when(mockNamespaceContext.nextSet()).thenReturn(false);
        // Act
        boolean result = predicateContext.nextSet();
        // Assert
        assertFalse(result, "Expected nextSet to return false");
        verify(mockNamespaceContext).nextSet(); // Verify that nextSet was called on the mock
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSet_qamc0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant(10);
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_WithNullDynamicPropertyPointer_DelegatesToParentContext_NLTa0() throws Exception {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    Constant expression = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(parentContext, expression);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    when(parentContext.getCurrentNodePointer()).thenReturn(expectedNodePointer);
    NodePointer result = predicateContext.getCurrentNodePointer();
    assertSame(expectedNodePointer, result);
    verify(parentContext).getCurrentNodePointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithNullNameTestExpression_YiJe0() {
    NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
    when(mockNamespaceContext.nextSet()).thenReturn(true);
    Constant mockConstant = mock(Constant.class);
    PredicateContext predicateContext = new PredicateContext(mockNamespaceContext, mockConstant);
    boolean result = predicateContext.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithPositionGreaterThanLength_pnjT3_EXql0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.setPosition(100); // Assuming length is less than 100
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNodeReturnsFalseWhenPropertyNamesDoNotMatch_Fvfz0() throws Exception {
    when(nameTestExpression.computeValue(parentContext)).thenReturn("expectedPropertyName");
    when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"expectedPropertyName"});
    when(parentContext.nextNode()).thenReturn(true);
    when(dynamicPropertyPointer.getPropertyNames()).thenReturn(new String[]{"otherPropertyName"});
    assertFalse(predicateContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsTrueWhenIteratorHasNext_CgVP3_votl0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, null);
    PredicateContext context = new PredicateContext(namespaceContext, new Constant("item"));
    assertTrue(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsFalseWhenIteratorIsEmpty_cxUU4_RUFf0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, null);
    PredicateContext context = new PredicateContext(namespaceContext, new Constant(""));
    assertFalse(context.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsTrueWhenNodePointerIsNotNull_SkbW5_sSIy0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, null);
    PredicateContext context = new PredicateContext(namespaceContext, new Constant(1)); // Assuming 1 as a placeholder Number
    assertTrue(context.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsFalseWhenNodePointerIsNull_Cyhz6_SCkr0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, null);
    PredicateContext context = new PredicateContext(namespaceContext, new Constant((String) null));
    assertFalse(context.nextSet());
}
}