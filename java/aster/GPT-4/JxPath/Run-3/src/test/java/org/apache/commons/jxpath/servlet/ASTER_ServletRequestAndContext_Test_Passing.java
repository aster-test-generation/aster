/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletRequestAndContext_Test_Passing {
private ServletRequest request;
private ServletContext context;
private ServletRequestAndContext servletRequestAndContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsNullForNonHttpServletRequest() {
        request = mock(HttpServletRequest.class);
        context = mock(ServletContext.class);
        servletRequestAndContext = new ServletRequestAndContext(request, context);
        // Given
        ServletRequest nonHttpRequest = mock(ServletRequest.class);
        ServletRequestAndContext nonHttpSrc = new ServletRequestAndContext(nonHttpRequest, context);
        // When
        HttpSession session = nonHttpSrc.getSession();
        // Then
        assertNull(session, "Session should be null for non-HTTP requests");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSessionForHttpServletRequest_1() {
        request = mock(HttpServletRequest.class);
        context = mock(ServletContext.class);
        servletRequestAndContext = new ServletRequestAndContext(request, context);
        // Given
        HttpSession expectedSession = mock(HttpSession.class);
        when(((HttpServletRequest) request).getSession(false)).thenReturn(expectedSession);
        // When
        HttpSession actualSession = servletRequestAndContext.getSession();
        // Then
        assertNotNull(actualSession, "Session should not be null for HTTP requests");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSessionForHttpServletRequest_2() {
        request = mock(HttpServletRequest.class);
        context = mock(ServletContext.class);
        servletRequestAndContext = new ServletRequestAndContext(request, context);
        // Given
        HttpSession expectedSession = mock(HttpSession.class);
        when(((HttpServletRequest) request).getSession(false)).thenReturn(expectedSession);
        // When
        HttpSession actualSession = servletRequestAndContext.getSession();
        // Then
        assertEquals(expectedSession, actualSession, "The session returned was not as expected");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsNull_WhenRequestIsNotHttpServletRequest_zlfp0() {
        ServletRequest request = mock(ServletRequest.class);
        ServletContext context = mock(ServletContext.class);
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        HttpSession session = servletRequestAndContext.getSession();
        assertNull(session);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_ReturnsSession_WhenRequestIsHttpServletRequest_ZIui1() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        ServletContext context = mock(ServletContext.class);
        ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(request, context);
        HttpSession expectedSession = mock(HttpSession.class);
        when(request.getSession(false)).thenReturn(expectedSession);
        HttpSession session = servletRequestAndContext.getSession();
        assertSame(expectedSession, session);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletRequest() throws Exception {
        request = mock(ServletRequest.class);
        context = mock(ServletContext.class);
        servletRequestAndContext = new ServletRequestAndContext(request, context);
        ServletRequest result = servletRequestAndContext.getServletRequest();
        assertEquals(request, result, "The returned ServletRequest should be the same as the mocked request");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletRequest_nHDU0() {
    ServletRequest mockRequest = mock(ServletRequest.class);
    ServletContext mockContext = mock(ServletContext.class);
    ServletRequestAndContext servletRequestAndContext = new ServletRequestAndContext(mockRequest, mockContext);
    ServletRequest result = servletRequestAndContext.getServletRequest();
    assertEquals(mockRequest, result);
}
}