/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithSufficientBufferBeforeWrap_PhOR0() {
    java.io.StringReader reader = new java.io.StringReader("abcdefghijklmnopqrstuvwxyz");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 26);
    stream.buffer = "abcdefghijklmnopqrstuvwxyz".toCharArray();
    stream.bufpos = 25;
    stream.bufsize = 26;
    char[] expected = "xyz".toCharArray();
    char[] result = stream.GetSuffix(3);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithBufferWrap_zIEE1() {
    java.io.StringReader reader = new java.io.StringReader("abcdefghijklmnopqrstuvwxyz");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 26);
    stream.buffer = "abcdefghijklmnopqrstuvwxyz".toCharArray();
    stream.bufpos = 2;
    stream.bufsize = 26;
    char[] expected = "abc".toCharArray();
    char[] result = stream.GetSuffix(3);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_ZoqJ0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(5, stream.buffer.length);
        assertEquals(-1, stream.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndLargerBuffer_qhkp1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(10, stream.buffer.length);
        assertEquals(-1, stream.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitResetPosition_Kmyj2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("initial"), 1, 1, 20);
        stream.ReInit(new java.io.StringReader("reset"), 2, 3, 20);
        assertEquals(2, stream.line);
        assertEquals(2, stream.column);
        assertEquals(-1, stream.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_AllTokensOnSameLine_nFcQ0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 3;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(2, stream.line);
    assertEquals(6, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_QoIV1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 1;
    stream.tokenBegin = 8;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 2, 2, 2, 2, 2, 2, 1, 1};
    stream.bufcolumn = new int[]{9, 10, 1, 2, 3, 4, 5, 6, 7, 8};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 4);
    assertEquals(3, stream.line);
    assertEquals(5, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_SingleTokenChange_SlKA2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.line);
    assertEquals(1, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_MultipleLines_FVAf3() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 4;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 2, 2, 3, 3, 3, 3, 3, 3, 3};
    stream.bufcolumn = new int[]{1, 1, 2, 1, 2, 3, 4, 5, 6, 7};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(4, 5);
    assertEquals(4, stream.line);
    assertEquals(9, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_EmptyBuffer_HgLr4() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.line);
    assertEquals(1, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_LineIncrement_RgHK5() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 2;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 2, 2, 2};
    stream.bufcolumn = new int[]{1, 2, 1, 2, 3};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 2);
    assertEquals(2, stream.line);
    assertEquals(4, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_ComplexBufferAdjustment_KDot6() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 9;
    stream.tokenBegin = 5;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1, 2, 2, 2, 2, 2};
    stream.bufcolumn = new int[]{6, 7, 8, 9, 10, 1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 3);
    assertEquals(3, stream.line);
    assertEquals(8, stream.column);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndColumn_PfLY0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    int endColumn = stream.getEndColumn();
    assertEquals(1, endColumn);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginLine_HUfl0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    int expectedLine = 1;
    assertEquals(expectedLine, stream.getBeginLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImageWithSingleSegmentBuffer_WtlV0() {
    char[] testBuffer = {'a', 'b', 'c', 'd', 'e'};
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.buffer = testBuffer;
    stream.bufpos = 4;
    stream.tokenBegin = 1;
    String result = stream.GetImage();
    assertEquals("bcde", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImageWithWrappedSegmentBuffer_NiAC1() {
    char[] testBuffer = {'a', 'b', 'c', 'd', 'e'};
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.buffer = testBuffer;
    stream.bufpos = 1;
    stream.tokenBegin = 3;
    stream.bufsize = 5;
    String result = stream.GetImage();
    assertEquals("deab", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_XjfU0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 0;
        scs.bufpos = 5;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(true);
        assertEquals(2058, scs.buffer.length);
        assertEquals(2058, scs.bufline.length);
        assertEquals(2058, scs.bufcolumn.length);
        assertEquals(2058, scs.available);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_ESKo1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 3;
        scs.bufpos = 9;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(false);
        assertEquals(2058, scs.buffer.length);
        assertEquals(2058, scs.bufline.length);
        assertEquals(2058, scs.bufcolumn.length);
        assertEquals(2058, scs.available);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginColumn_sUIl0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    int expectedColumn = 1;
    assertEquals(expectedColumn, stream.getBeginColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndLine_tYhN0() {
    java.io.StringReader reader = new java.io.StringReader("test content");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedLine = 1;
    assertEquals(expectedLine, stream.getEndLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithValidReader_PJGu0() {
    java.io.StringReader reader = new java.io.StringReader("Sample text for testing");
    SimpleCharStream stream = new SimpleCharStream(reader);
    stream.ReInit(reader, 1, 1);
    assertNotNull(stream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_ezRZ0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    assertEquals(1, stream.getLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithValidReader_QelY0() {
    java.io.StringReader reader = new java.io.StringReader("Sample text for testing");
    SimpleCharStream stream = new SimpleCharStream(reader);
    stream.ReInit(new java.io.StringReader("Reinitialized text"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetColumn_SttR0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    int expectedColumn = 1; // Assuming initial column setup correctly in constructor
    assertEquals(expectedColumn, stream.getColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_yEAU0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_fRJQ1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(2, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsLF);
        assertFalse(scs.prevCharIsCR);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_pcIl2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);
        assertEquals(9, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_pXRH3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);
        assertEquals(2, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_ZoqJ0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(5, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_ZoqJ0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(-1, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndLargerBuffer_qhkp1_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(10, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndLargerBuffer_qhkp1_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        stream.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(-1, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitResetPosition_Kmyj2_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("initial"), 1, 1, 20);
        stream.ReInit(new java.io.StringReader("reset"), 2, 3, 20);
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitResetPosition_Kmyj2_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("initial"), 1, 1, 20);
        stream.ReInit(new java.io.StringReader("reset"), 2, 3, 20);
        assertEquals(2, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitResetPosition_Kmyj2_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("initial"), 1, 1, 20);
        stream.ReInit(new java.io.StringReader("reset"), 2, 3, 20);
        assertEquals(-1, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_AllTokensOnSameLine_nFcQ0_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 3;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_AllTokensOnSameLine_nFcQ0_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 3;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 3);
    assertEquals(6, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_QoIV1_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 1;
    stream.tokenBegin = 8;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 2, 2, 2, 2, 2, 2, 1, 1};
    stream.bufcolumn = new int[]{9, 10, 1, 2, 3, 4, 5, 6, 7, 8};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 4);
    assertEquals(3, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_QoIV1_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 1;
    stream.tokenBegin = 8;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 2, 2, 2, 2, 2, 2, 1, 1};
    stream.bufcolumn = new int[]{9, 10, 1, 2, 3, 4, 5, 6, 7, 8};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 4);
    assertEquals(5, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_SingleTokenChange_SlKA2_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_SingleTokenChange_SlKA2_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_MultipleLines_FVAf3_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 4;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 2, 2, 3, 3, 3, 3, 3, 3, 3};
    stream.bufcolumn = new int[]{1, 1, 2, 1, 2, 3, 4, 5, 6, 7};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(4, 5);
    assertEquals(4, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_MultipleLines_FVAf3_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 4;
    stream.tokenBegin = 0;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 2, 2, 3, 3, 3, 3, 3, 3, 3};
    stream.bufcolumn = new int[]{1, 1, 2, 1, 2, 3, 4, 5, 6, 7};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(4, 5);
    assertEquals(9, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_EmptyBuffer_HgLr4_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_EmptyBuffer_HgLr4_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.bufpos = 0;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 1, 1, 1};
    stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(1, 1);
    assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_LineIncrement_RgHK5_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 2;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 2, 2, 2};
    stream.bufcolumn = new int[]{1, 2, 1, 2, 3};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 2);
    assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_LineIncrement_RgHK5_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 2;
    stream.tokenBegin = 0;
    stream.bufsize = 5;
    stream.bufline = new int[]{1, 1, 2, 2, 2};
    stream.bufcolumn = new int[]{1, 2, 1, 2, 3};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(2, 2);
    assertEquals(4, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_ComplexBufferAdjustment_KDot6_1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 9;
    stream.tokenBegin = 5;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1, 2, 2, 2, 2, 2};
    stream.bufcolumn = new int[]{6, 7, 8, 9, 10, 1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 3);
    assertEquals(3, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdjustBeginLineColumn_ComplexBufferAdjustment_KDot6_2() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.bufpos = 9;
    stream.tokenBegin = 5;
    stream.bufsize = 10;
    stream.bufline = new int[]{1, 1, 1, 1, 1, 2, 2, 2, 2, 2};
    stream.bufcolumn = new int[]{6, 7, 8, 9, 10, 1, 2, 3, 4, 5};
    stream.inBuf = 0;
    stream.adjustBeginLineColumn(3, 3);
    assertEquals(8, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_XjfU0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 0;
        scs.bufpos = 5;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(true);
        assertEquals(2058, scs.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_XjfU0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 0;
        scs.bufpos = 5;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(true);
        assertEquals(2058, scs.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_XjfU0_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 0;
        scs.bufpos = 5;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(true);
        assertEquals(2058, scs.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_XjfU0_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 0;
        scs.bufpos = 5;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(true);
        assertEquals(2058, scs.available);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_ESKo1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 3;
        scs.bufpos = 9;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(false);
        assertEquals(2058, scs.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_ESKo1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 3;
        scs.bufpos = 9;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(false);
        assertEquals(2058, scs.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_ESKo1_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 3;
        scs.bufpos = 9;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(false);
        assertEquals(2058, scs.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_ESKo1_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.tokenBegin = 3;
        scs.bufpos = 9;
        scs.buffer = new char[10];
        scs.bufline = new int[10];
        scs.bufcolumn = new int[10];
        scs.ExpandBuff(false);
        assertEquals(2058, scs.available);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_yEAU0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_yEAU0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_yEAU0_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertTrue(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_yEAU0_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_fRJQ1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(2, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_fRJQ1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_fRJQ1_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertTrue(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_fRJQ1_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_pcIl2_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_pcIl2_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(9, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_pcIl2_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_pcIl2_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_pXRH3_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_pXRH3_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(2, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_pXRH3_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_pXRH3_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBeginTokenReturnsCorrectChar_LOAk0_TPoF0() throws java.io.IOException {
    java.io.StringReader reader = new java.io.StringReader("abc");
    SimpleCharStream stream = new SimpleCharStream(reader);
    char expected = 'a';
    char result = stream.BeginToken();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithPositiveAmount_njTo0_zGRv0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.backup(5);
    assertEquals(-4, stream.bufpos, "Expected buffer position adjustment");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithNegativeAmount_hNTZ1_MHuN0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    stream.backup(-3);
    assertEquals(4, stream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadCharFromReader_EkCQ0_NydZ0() throws java.io.IOException {
    java.io.StringReader reader = new java.io.StringReader("abc");
    SimpleCharStream stream = new SimpleCharStream(reader);
    assertEquals('a', stream.readChar());
}
}