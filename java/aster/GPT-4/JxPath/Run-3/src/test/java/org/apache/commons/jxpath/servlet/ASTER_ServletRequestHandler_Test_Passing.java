/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
public class Aster_ServletRequestHandler_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithEmptyAttributesAndParameters_NkLU0() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    when(servletRequest.getAttributeNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    when(servletRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertTrue(set.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithAttributesOnly_yVCg1() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(servletRequest.getAttributeNames()).thenReturn(attributeNames);
    when(servletRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertEquals(2, set.size());
    assertTrue(set.contains("attr1"));
    assertTrue(set.contains("attr2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithParametersOnly_OgaU2() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletRequest.getParameterNames()).thenReturn(parameterNames);
    when(servletRequest.getAttributeNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertEquals(2, set.size());
    assertTrue(set.contains("param1"));
    assertTrue(set.contains("param2"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithAttributesOnly_yVCg1_1() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(servletRequest.getAttributeNames()).thenReturn(attributeNames);
    when(servletRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithAttributesOnly_yVCg1_2() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(servletRequest.getAttributeNames()).thenReturn(attributeNames);
    when(servletRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertTrue(set.contains("attr1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithAttributesOnly_yVCg1_3() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> attributeNames = Collections.enumeration(Arrays.asList("attr1", "attr2"));
    when(servletRequest.getAttributeNames()).thenReturn(attributeNames);
    when(servletRequest.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertTrue(set.contains("attr2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithParametersOnly_OgaU2_1() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletRequest.getParameterNames()).thenReturn(parameterNames);
    when(servletRequest.getAttributeNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithParametersOnly_OgaU2_2() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletRequest.getParameterNames()).thenReturn(parameterNames);
    when(servletRequest.getAttributeNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertTrue(set.contains("param1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCollectPropertyNamesWithParametersOnly_OgaU2_3() {
    ServletRequestHandler handler = new ServletRequestHandler();
    HashSet<String> set = new HashSet<>();
    ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
    ServletRequest servletRequest = mock(ServletRequest.class);
    when(bean.getServletRequest()).thenReturn(servletRequest);
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletRequest.getParameterNames()).thenReturn(parameterNames);
    when(servletRequest.getAttributeNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    handler.collectPropertyNames(set, bean);
    assertTrue(set.contains("param2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_ReturnsSingleParameterValue_Xgzw0_VDMu0() {
    ServletRequestHandler handler = new ServletRequestHandler();
    MockHttpServletRequest mockRequest = new MockHttpServletRequest();
    mockRequest.addParameter("key", "value");
    ServletRequestAndContext bean = new ServletRequestAndContext(mockRequest, null);
    HashSet<String> properties = new HashSet<>();
    handler.collectPropertyNames(properties, bean);
    assertTrue(properties.contains("key"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_ReturnsArrayForMultipleParameterValues_empL2_lgsQ0() {
    ServletRequestHandler handler = new ServletRequestHandler();
    MockHttpServletRequest mockRequest = new MockHttpServletRequest();
    mockRequest.addParameter("key", "value1", "value2");
    ServletRequestAndContext bean = new ServletRequestAndContext(mockRequest, null);
    Object result = handler.getProperty(bean, "key");
    assertArrayEquals(new String[]{"value1", "value2"}, (String[]) result);
}
}