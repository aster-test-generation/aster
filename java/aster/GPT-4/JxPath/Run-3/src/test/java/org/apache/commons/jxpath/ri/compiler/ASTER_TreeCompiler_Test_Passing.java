/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TreeCompiler_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeTypeTest_WJCa0() {
    TreeCompiler compiler = new TreeCompiler();
    int testNodeType = 1;
    Object result = compiler.nodeTypeTest(testNodeType);
    assertTrue(result instanceof NodeTypeTest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVariableReferenceWithValidQName_vDvb0() {
    TreeCompiler compiler = new TreeCompiler();
    QName qName = new QName("namespaceURI", "localPart");
    Object result = compiler.variableReference(qName);
    assertTrue(result instanceof VariableReference);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testProcessingInstructionWithValidInstruction_Cgxf0() {
    TreeCompiler compiler = new TreeCompiler();
    String instruction = "xml-stylesheet";
    Object result = compiler.processingInstructionTest(instruction);
    assertTrue(result instanceof ProcessingInstructionTest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrWithNonNullArguments_grXs0_Vyga0_1() {
    TreeCompiler compiler = new TreeCompiler();
    Expression[] expressions = {new CoreOperationAdd(new Expression[]{new Constant(new Double(1)), new Constant(new Double(2))}), 
                                new CoreOperationAdd(new Expression[]{new Constant(new Double(3)), new Constant(new Double(4))})};
    Object result = compiler.or(expressions);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOrWithNonNullArguments_grXs0_Vyga0_2() {
    TreeCompiler compiler = new TreeCompiler();
    Expression[] expressions = {new CoreOperationAdd(new Expression[]{new Constant(new Double(1)), new Constant(new Double(2))}), 
                                new CoreOperationAdd(new Expression[]{new Constant(new Double(3)), new Constant(new Double(4))})};
    Object result = compiler.or(expressions);
    assertTrue(result instanceof CoreOperationOr);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMultiplyWithExpressions_nunb0_buwa0() {
    TreeCompiler compiler = new TreeCompiler();
    Expression leftExpr = new CoreOperationAdd(new Expression[]{new Constant(new Double(1)), new Constant(new Double(2))}); // Assuming constructor exists
    Expression rightExpr = new CoreOperationAdd(new Expression[]{new Constant(new Double(3)), new Constant(new Double(4))}); // Assuming constructor exists
    Object result = compiler.multiply(leftExpr, rightExpr);
    assertTrue(result instanceof CoreOperationMultiply);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLocationPathWithAbsoluteTrue_Xndl0_UktX0() {
    TreeCompiler compiler = new TreeCompiler();
    Object result = compiler.processingInstructionTest("data");
    assertTrue(result instanceof ProcessingInstructionTest);
}
}