/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LocationPath_Test_Passing {
@InjectMocks
    private LocationPath locationPath;
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private EvalContext absoluteRootContext;
@Mock
    private InitialContext initialContext;
@Mock
    private NodePointer nodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithEmptyStepsAndNotAbsolute_rTdf0() {
    Step[] steps = new Step[0];
    LocationPath locationPath = new LocationPath(false, steps);
    String result = locationPath.toString();
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_AbsolutePath() throws Exception {
        // Assuming LocationPath constructor parameters if needed
        locationPath = new LocationPath(true, new Step[]{});
        // Setup
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        when(locationPath.isAbsolute()).thenReturn(true);
        when(locationPath.getSingleNodePointerForSteps(absoluteRootContext)).thenReturn(nodePointer);
        // Execute
        Object result = locationPath.computeValue(context);
        // Verify
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_RelativePath_UTxi0() throws Exception {
    Step[] steps = new Step[] {}; // Assuming Step is defined elsewhere
    LocationPath path = new LocationPath(false, steps);
    assertFalse(path.isAbsolute());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAbsoluteTrue_ymlp0_auie0() {
    Step[] steps = new Step[0]; // Assuming Step is defined elsewhere
    LocationPath locationPath = new LocationPath(true, steps);
    assertTrue(locationPath.isAbsolute());
}
}