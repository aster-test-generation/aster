/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ChildContext_Coverage_Test_Passing {
    private NodeIterator iterator;
    private ChildContext childContext;
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetNoExceptionThrown_TaTs1() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, false);
        try {
            childContext.reset();
        } catch (Exception e) {
            fail("Reset method should not throw any exception.");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroSetPositionFails_NkfP0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        ChildContext childContext = new ChildContext(parentContext, nodeTest, false, false);
        ChildContext spyChildContext = spy(childContext);
        doReturn(false).when(spyChildContext).setPosition(1);
        NodePointer result = spyChildContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_PositionIsZeroAndNoNextSet_iSkM0() {
        NamespaceContext namespaceContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        when(childContext.nextSet()).thenReturn(false);
        assertNull(childContext.getSingleNodePointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResetCompletesSuccessfully_svoA2_PsMo0() {
    NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
    ChildContext childContext = new ChildContext(namespaceContext, new NodeTypeTest(1), true, false);
    childContext.reset();
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_PrepareMethodThrowsException_mpNj8_zUne0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    ChildContext childContext = spy(new ChildContext(namespaceContext, nodeTypeTest, false, false));
    when(childContext.nextSet()).thenReturn(true).thenReturn(false);
    try {
        childContext.getSingleNodePointer();
        fail("Expected an exception to be thrown");
    } catch (RuntimeException e) {
        assertEquals("Test Exception", e.getMessage());
    }
}
}