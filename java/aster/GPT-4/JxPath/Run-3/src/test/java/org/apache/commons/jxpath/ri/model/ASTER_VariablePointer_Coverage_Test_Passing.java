/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Passing {
    private NodePointer clonedNodePointer;
    private VariablePointer variablePointer;
    private QName qName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollection_vgbI3() {
        QName name = new QName("variable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION); // Assuming WHOLE_COLLECTION is a static field
        variablePointer.setValue("newValue");
        verify(variables).declareVariable(name.toString(), "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithVariableDeclaration_Blam6() {
        QName name = new QName("variable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, name);
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
        variablePointer.setValue("newValue");
        verify(variables).declareVariable(name.toString(), "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_CallsSuperSetIndex_HfBR0() {
        QName mockQName = mock(QName.class);
        VariablePointer variablePointer = spy(new VariablePointer(mockQName));
        variablePointer.setIndex(5);
        verify(variablePointer).setIndex(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNull_ZGvb0() {
        QName qName = new QName("test");
        VariablePointer variablePointer = mock(VariablePointer.class);
        when(variablePointer.getBaseValue()).thenReturn(null);
        when(variablePointer.getLength()).thenCallRealMethod();
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameVariablesAndName_xRzb0() {
        QName qName1 = new QName("prefix", "localName");
        KeywordVariables variables1 = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(variables1, qName1);
        VariablePointer vp2 = new VariablePointer(variables1, qName1);
        assertTrue(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_ZbrC1() {
        QName qName1 = new QName("prefix", "localName");
        QName qName2 = new QName("prefix", "differentLocalName");
        KeywordVariables variables1 = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(variables1, qName1);
        VariablePointer vp2 = new VariablePointer(variables1, qName2);
        assertFalse(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathDeclaresVariableSuccessfully_euXk1() {
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        variablePointer.createPath(context);
        verify(factory, times(1)).declareVariable(context, name.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsFindVariables_nAYd2() {
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        variablePointer.createPath(context);
        verify(variablePointer, times(1)).findVariables(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithAbstractFactoryRetrieval_VvFr3() {
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        variablePointer.createPath(context);
        verify(variablePointer, times(1)).getAbstractFactory(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithAsPathMethodCall_dqWb4() {
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        when(factory.declareVariable(context, name.toString())).thenReturn(false);
        when(variablePointer.asPath()).thenReturn("/test/path");
        try {
            variablePointer.createPath(context);
        } catch (JXPathAbstractFactoryException e) {
        }
        verify(variablePointer, times(1)).asPath();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ValidIndex_CollectionNotNull_EdBD2() {
        QName name = new QName("testName");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer pointer = new VariablePointer(variables, name);
        List<Object> collection = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getLength()).thenReturn(collection.size());
        pointer.index = 1;
        pointer.remove();
        verify(variables).declareVariable(name.toString(), collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_CollectionNotNull_IndexWithinRange_wNAO3() {
        QName name = new QName("testName");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer pointer = new VariablePointer(variables, name);
        List<Object> collection = new ArrayList<>(Arrays.asList("item1", "item2", "item3"));
        when(pointer.getBaseValue()).thenReturn(collection);
        when(pointer.getLength()).thenReturn(collection.size());
        when(ValueUtils.remove(collection, 1)).thenReturn(collection);
        pointer.index = 1;
        pointer.remove();
        verify(variables).declareVariable(name.toString(), collection);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_CollectionNull_IndexWithinRange_UgnG4() {
        QName name = new QName("testName");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer pointer = new VariablePointer(variables, name);
        when(pointer.getBaseValue()).thenReturn(null);
        when(pointer.getLength()).thenReturn(0);
        pointer.index = 1;
        pointer.remove();
        verify(variables, never()).declareVariable(anyString(), any());
    }
@Test
public void testCreatePathThrowsExceptionWhenFactoryCannotDeclareVariable_pXSx0_qARk0() {
    QName name = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(name);
    JXPathContext context = mock(JXPathContext.class);
    AbstractFactory factory = mock(AbstractFactory.class);
    when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
    when(factory.declareVariable(context, name.toString())).thenReturn(false);
    when(variablePointer.asPath()).thenReturn("/test/path");
    assertThrows(JXPathAbstractFactoryException.class, () -> {
        variablePointer.createPath(context);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithCollectionModification_vzyy5_cTjy0() {
    QName name = new QName("variable");
    KeywordVariables variables = mock(KeywordVariables.class);
    VariablePointer variablePointer = new VariablePointer(variables, name);
    variablePointer.setIndex(0);
    List<Object> baseValue = new ArrayList<>(Arrays.asList("initial"));
    variablePointer.setValue("newValue");
    verify(variables, never()).declareVariable(anyString(), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_CollectionCreated_mXVd1_szoo0() {
    JXPathContext context = mock(JXPathContext.class);
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = spy(new VariablePointer(new QName("variable")));
    variablePointer.createChild(context, qName, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndex_WithKeywordVariables_eRmt2_dnkK0() {
    QName qName = new QName("prefix", "localName");
    KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    variablePointer.setIndex(20);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testChildIterator_cvLy0_MqMi0() {
    QName qName = new QName("namespace", "localName");
    KeywordVariables variables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    NodeTest mockNodeTest = mock(NodeTest.class);
    NodePointer mockNodePointer = mock(NodePointer.class);
    NodePointer mockValuePointer = mock(NodePointer.class);
    NodeIterator expectedIterator = mock(NodeIterator.class);
    when(variablePointer.getValuePointer()).thenReturn(mockValuePointer);
    when(mockValuePointer.childIterator(mockNodeTest, true, mockNodePointer)).thenReturn(expectedIterator);
    NodeIterator resultIterator = variablePointer.childIterator(mockNodeTest, true, mockNodePointer);
    verify(mockValuePointer).childIterator(mockNodeTest, true, mockNodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWhenActualIsTrue_wksZ0_Hrwc0() {
    QName name = mock(QName.class);
    JXPathContext context = mock(JXPathContext.class);
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.isActual()).thenReturn(true);
    variablePointer.setValue("testValue");
    NodePointer result = variablePointer.createPath(context, "testValue");
    assertSame(variablePointer, result, "Should return itself when actual is true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWhenActualIsFalse_AUPZ1_WMGp0() {
    QName name = mock(QName.class);
    JXPathContext context = mock(JXPathContext.class);
    NodePointer mockNodePointer = mock(NodePointer.class);
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.isActual()).thenReturn(false);
    when(variablePointer.createPath(context)).thenReturn(mockNodePointer);
    NodePointer result = variablePointer.createPath(context, "testValue");
    assertSame(mockNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueCalledWhenActualIsTrue_PTeC2_YKTJ0() {
    QName name = mock(QName.class);
    JXPathContext context = mock(JXPathContext.class);
    VariablePointer variablePointer = spy(new VariablePointer(name));
    doReturn(true).when(variablePointer).isActual(); // Correct way to set 'actual' when it's private
    variablePointer.createPath(context, "testValue");
    verify(variablePointer).setValue("testValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueCalledOnNewNodePointerWhenActualIsFalse_KdKz3_CYKe0() {
    QName name = mock(QName.class);
    JXPathContext context = mock(JXPathContext.class);
    NodePointer mockNodePointer = mock(NodePointer.class);
    VariablePointer variablePointer = new VariablePointer(name);
    when(variablePointer.isActual()).thenReturn(false);
    when(variablePointer.createPath(context)).thenReturn(mockNodePointer);
    variablePointer.createPath(context, "testValue");
    verify(mockNodePointer).setValue("testValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathCalledWhenActualIsFalse_kPpN4_pBHb0() {
    QName name = mock(QName.class);
    JXPathContext context = mock(JXPathContext.class);
    VariablePointer variablePointer = spy(new VariablePointer(name));
    doReturn(false).when(variablePointer).isActual();
    variablePointer.createPath(context, "testValue");
    verify(variablePointer).createPath(context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_ActualTrue_WholeCollection_cfhP0_ESfC0() {
    QName name = new QName("testName");
    KeywordVariables variables = mock(KeywordVariables.class);
    VariablePointer pointer = new VariablePointer(variables, name);
    doNothing().when(variables).undeclareVariable(name.toString());
    pointer.remove();
    verify(variables).undeclareVariable(name.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_SBZP0_RoZQ0() {
    QName qName = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(qName);
    when(variablePointer.isActual()).thenReturn(true);
    assertTrue(variablePointer.isActual());
}
}