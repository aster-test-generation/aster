/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassLoaderUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonPrimitiveType_yHrb1() throws ClassNotFoundException {
        Class<?> result = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "java.lang.String", true);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithCurrentClassLoader_XTrk1_CEFn0_1() throws ClassNotFoundException {
    Thread.currentThread().setContextClassLoader(null);
    ClassLoader currentClassLoader = mock(ClassLoader.class);
    String className = "java.lang.String";
    Class<?> expectedClass = String.class;
    when(currentClassLoader.loadClass(className)).thenReturn((Class) expectedClass);
    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    Class<?> result = ClassLoaderUtil.getClass(className);
    verify(currentClassLoader).loadClass(className);
    Thread.currentThread().setContextClassLoader(originalClassLoader);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassWithCurrentClassLoader_XTrk1_CEFn0_2() throws ClassNotFoundException {
    Thread.currentThread().setContextClassLoader(null);
    ClassLoader currentClassLoader = mock(ClassLoader.class);
    String className = "java.lang.String";
    Class<?> expectedClass = String.class;
    when(currentClassLoader.loadClass(className)).thenReturn((Class) expectedClass);
    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    Class<?> result = ClassLoaderUtil.getClass(className);
    verify(currentClassLoader).loadClass(className);
    Thread.currentThread().setContextClassLoader(originalClassLoader);
    assertEquals(expectedClass, result);}
}