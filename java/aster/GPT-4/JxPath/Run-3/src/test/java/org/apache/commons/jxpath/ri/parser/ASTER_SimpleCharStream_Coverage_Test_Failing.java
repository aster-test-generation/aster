/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_oytu0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true; // Manually setting prevCharIsLF to true
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_oytu0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true; // Manually setting prevCharIsLF to true
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnResetPrevCharIsLF_dONQ1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true; // Manually setting prevCharIsLF to true
        stream.UpdateLineColumn('a');
        assertFalse(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_jCdN3_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true; // Manually setting prevCharIsCR to true
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_jCdN3_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true; // Manually setting prevCharIsCR to true
        stream.UpdateLineColumn('a');
        assertEquals(1, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnResetPrevCharIsCR_PQES4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true; // Manually setting prevCharIsCR to true
        stream.UpdateLineColumn('a');
        assertFalse(stream.prevCharIsCR);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCRFollowedByLF_NlRB5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true; // Manually setting prevCharIsCR to true
        stream.UpdateLineColumn('\n');
        assertTrue(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_GuAh7() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.UpdateLineColumn('\n');
        assertTrue(stream.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithNullInputStream_yiNl1_iusU0() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""));
    scs.ReInit((java.io.InputStream) null, 1, 1, 4096);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsLF_oytu0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsLF = true; // Manually setting prevCharIsLF to true
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);
        assertEquals(1, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithPrevCharIsCR_jCdN3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.prevCharIsCR = true; // Manually setting prevCharIsCR to true
        stream.UpdateLineColumn('a');
        assertEquals(2, stream.line);
        assertEquals(1, stream.column);
    }
}