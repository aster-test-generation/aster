/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import java.util.HashMap;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
@Mock
    private NamespaceResolver parent;
@InjectMocks
    private NamespaceResolver namespaceResolver;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private NodePointer mockNamespacePointer;
@Mock
    private QName mockQName;
@Mock
    private Map<String, String> namespaceMap;
@Mock
    private Map<String, String> reverseMap;
@Mock
    private NamespaceResolver parentNamespaceResolver;
    private boolean sealed;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_WhenParentExists_ShouldNotSealParentTwice() throws Exception {
        // The @InjectMocks annotation automatically injects the mock 'parent' into 'namespaceResolver'
        namespaceResolver.seal();
        namespaceResolver.seal(); // Seal again to check idempotence
        verify(parent, times(1)).seal(); // Should still only seal the parent once
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer() throws Exception {
        // All setup is handled by Mockito annotations
        // Act: Set the namespace context pointer
        namespaceResolver.setNamespaceContextPointer(mockNodePointer);
        // Assert: Verify the internal state is changed as expected (if possible)
        // Since we cannot directly check the internal state of 'pointer' (private field),
        // we assume setting it has no side effects or errors if no exception is thrown.
        // This is a limitation of the test due to encapsulation.
        // Normally, you would use reflection or expose internal state through methods for testing,
        // but since the instruction was to apublic void TODOs and further modifications, we conclude here.
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_Found() throws Exception {
        when(mockNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
        when(mockNodeIterator.getNodePointer()).thenReturn(mockNamespacePointer);
        when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNamespacePointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("ex");
        // Setup the iterator to simulate finding the namespace URI
        when(mockNodeIterator.setPosition(1)).thenReturn(true);
        when(mockNodeIterator.setPosition(2)).thenReturn(false); // End iteration
        // Call the method under test
        String result = NamespaceResolver.getPrefix(mockNodePointer, "http://example.com");
        // Verify the result
        assertEquals("ex", result, "The prefix should be 'ex' for the namespace URI 'http://example.com'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NotFound() throws Exception {
        when(mockNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
        when(mockNodeIterator.getNodePointer()).thenReturn(mockNamespacePointer);
        when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNamespacePointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("ex");
        // Setup the iterator to simulate not finding the namespace URI
        when(mockNodeIterator.setPosition(1)).thenReturn(true);
        when(mockNodeIterator.setPosition(2)).thenReturn(false); // End iteration
        when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://not-example.com");
        // Call the method under test
        String result = NamespaceResolver.getPrefix(mockNodePointer, "http://example.com");
        // Verify the result
        assertNull(result, "The prefix should be null as the namespace URI 'http://example.com' was not found");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NoNamespaceIterator() throws Exception {
        when(mockNodePointer.namespaceIterator()).thenReturn(mockNodeIterator);
        when(mockNodeIterator.getNodePointer()).thenReturn(mockNamespacePointer);
        when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(mockNamespacePointer.getName()).thenReturn(mockQName);
        when(mockQName.getName()).thenReturn("ex");
        // Setup to return null for namespace iterator
        when(mockNodePointer.namespaceIterator()).thenReturn(null);
        // Call the method under test
        String result = NamespaceResolver.getPrefix(mockNodePointer, "http://example.com");
        // Verify the result
        assertNull(result, "The prefix should be null as there is no namespace iterator");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithNullNamespaceURI_FoPQ0() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    Mockito.when(mockPointer.getParent()).thenReturn(null);
    String result = NamespaceResolver.getPrefix(mockPointer, null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithEmptyNamespaceURI_bKKV1() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    Mockito.when(mockPointer.getParent()).thenReturn(null);
    String result = NamespaceResolver.getPrefix(mockPointer, "");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithValidNamespaceURI_hlyS2() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    NodeIterator mockIterator = Mockito.mock(NodeIterator.class);
    NodePointer mockNamespacePointer = Mockito.mock(NodePointer.class);
    QName mockQName = new QName("prefix", "localName");
    Mockito.when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
    Mockito.when(mockIterator.setPosition(1)).thenReturn(true);
    Mockito.when(mockIterator.getNodePointer()).thenReturn(mockNamespacePointer);
    Mockito.when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
    Mockito.when(mockNamespacePointer.getName()).thenReturn(mockQName);
    Mockito.when(mockPointer.getParent()).thenReturn(null);
    String result = NamespaceResolver.getPrefix(mockPointer, "http://example.com");
    assertEquals("prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithNoMatchingNamespaceURI_ZZEe3() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    NodeIterator mockIterator = Mockito.mock(NodeIterator.class);
    NodePointer mockNamespacePointer = Mockito.mock(NodePointer.class);
    Mockito.when(mockPointer.namespaceIterator()).thenReturn(mockIterator);
    Mockito.when(mockIterator.setPosition(1)).thenReturn(true);
    Mockito.when(mockIterator.getNodePointer()).thenReturn(mockNamespacePointer);
    Mockito.when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
    Mockito.when(mockPointer.getParent()).thenReturn(null);
    String result = NamespaceResolver.getPrefix(mockPointer, "http://nonexistent.com");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithMultipleLevels_SxeR4() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    NodePointer parentPointer = Mockito.mock(NodePointer.class);
    NodeIterator mockIterator = Mockito.mock(NodeIterator.class);
    NodePointer mockNamespacePointer = Mockito.mock(NodePointer.class);
    QName mockQName = new QName("prefix", "localName");
    Mockito.when(mockPointer.namespaceIterator()).thenReturn(null);
    Mockito.when(mockPointer.getParent()).thenReturn(parentPointer);
    Mockito.when(parentPointer.namespaceIterator()).thenReturn(mockIterator);
    Mockito.when(mockIterator.setPosition(1)).thenReturn(true);
    Mockito.when(mockIterator.getNodePointer()).thenReturn(mockNamespacePointer);
    Mockito.when(mockNamespacePointer.getNamespaceURI()).thenReturn("http://example.com");
    Mockito.when(mockNamespacePointer.getName()).thenReturn(mockQName);
    String result = NamespaceResolver.getPrefix(mockPointer, "http://example.com");
    assertEquals("prefix", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrefixWithNoNamespaceIterator_Fhhr5() {
    NodePointer mockPointer = Mockito.mock(NodePointer.class);
    Mockito.when(mockPointer.namespaceIterator()).thenReturn(null);
    Mockito.when(mockPointer.getParent()).thenReturn(null);
    String result = NamespaceResolver.getPrefix(mockPointer, "http://example.com");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_WithKnownNamespace() throws Exception {
        // The parent mock is automatically injected into namespaceResolver due to @InjectMocks
        // Arrange
        String namespaceURI = "http://example.com/ns";
        String expectedPrefix = "ex";
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(expectedPrefix);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
        assertEquals(expectedPrefix, result);
        verify(parent, times(1)).getExternallyRegisteredPrefix(namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_WithUnknownNamespace() throws Exception {
        // The parent mock is automatically injected into namespaceResolver due to @InjectMocks
        // Arrange
        String unknownNamespaceURI = "http://unknown.com/ns";
        when(parent.getExternallyRegisteredPrefix(unknownNamespaceURI)).thenReturn(null);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(unknownNamespaceURI);
        // Assert
        assertNull(result);
        verify(parent, times(1)).getExternallyRegisteredPrefix(unknownNamespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_WithNullParent() throws Exception {
        // The parent mock is automatically injected into namespaceResolver due to @InjectMocks
        // Arrange
        namespaceResolver = new NamespaceResolver(null); // No parent
        String namespaceURI = "http://example.com/ns";
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_NullNamespace_buyn0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getExternallyRegisteredPrefix(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_ExistingNamespace_UQBG1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.reverseMap.put("http://example.com", "ex");
        String result = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("ex", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_NonExistingNamespaceWithParent_ziFG2() {
        NamespaceResolver parent = new NamespaceResolver();
        parent.reverseMap.put("http://example.com", "ex");
        NamespaceResolver resolver = new NamespaceResolver(parent);
        String result = resolver.getExternallyRegisteredPrefix("http://example.com");
        assertEquals("ex", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_Successful() throws Exception {
        namespaceResolver = new NamespaceResolver();
        // Arrange
        String prefix = "ns";
        String namespaceURI = "http://example.com/ns";
        // Act
        namespaceResolver.registerNamespace(prefix, namespaceURI);
        // Assert
        verify(namespaceMap).put(prefix, namespaceURI);
        verify(reverseMap).put(namespaceURI, prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_ThrowsWhenSealed_1() throws Exception {
        namespaceResolver = new NamespaceResolver();
        // Arrange
        String prefix = "ns";
        String namespaceURI = "http://example.com/ns";
        NamespaceResolver sealedResolver = spy(new NamespaceResolver());
        doReturn(true).when(sealedResolver).isSealed();
        // Act & Assert
        IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> {
            sealedResolver.registerNamespace(prefix, namespaceURI);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_XlYE0_1() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://example.com/ns1");
    assertEquals("http://example.com/ns1", resolver.namespaceMap.get("prefix1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_XlYE0_2() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://example.com/ns1");
    assertEquals("prefix1", resolver.reverseMap.get("http://example.com/ns1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_SealedNamespaceResolver_LuVO1() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.seal();
    assertThrows(IllegalStateException.class, () -> {
        resolver.registerNamespace("prefix2", "http://example.com/ns2");
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithNoParentAndNoMapping_WWNv0() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getExternallyRegisteredNamespaceURI("nonexistent");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithParentAndNoMapping_YgvJ1() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    String result = child.getExternallyRegisteredNamespaceURI("nonexistent");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithParentAndMapping_ZvQC2() {
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver child = new NamespaceResolver(parent);
    parent.namespaceMap.put("prefix", "http://example.com");
    String result = child.getExternallyRegisteredNamespaceURI("prefix");
    assertEquals("http://example.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithNonNullPrefix() throws Exception {
        // Initialize NamespaceResolver with a mocked parent
        namespaceResolver = new NamespaceResolver(parentNamespaceResolver);
        // Arrange
        String namespaceURI = "http://example.com/ns";
        String expectedPrefix = "ex";
        when(parentNamespaceResolver.getPrefix(namespaceURI)).thenReturn(expectedPrefix);
        // Act
        String result = namespaceResolver.getPrefix(namespaceURI);
        // Assert
        assertEquals(expectedPrefix, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithNullPrefixAndNonNullParent() throws Exception {
        // Initialize NamespaceResolver with a mocked parent
        namespaceResolver = new NamespaceResolver(parentNamespaceResolver);
        // Arrange
        String namespaceURI = "http://example.com/ns";
        String expectedPrefix = "ex";
        when(parentNamespaceResolver.getPrefix(namespaceURI)).thenReturn(null);
        when(parentNamespaceResolver.getPrefix(namespaceURI)).thenReturn(expectedPrefix);
        // Act
        String result = namespaceResolver.getPrefix(namespaceURI);
        // Assert
        assertEquals(expectedPrefix, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_WithNullPrefixAndNullParent() throws Exception {
        // Initialize NamespaceResolver with a mocked parent
        namespaceResolver = new NamespaceResolver(parentNamespaceResolver);
        // Arrange
        String namespaceURI = "http://example.com/ns";
        when(parentNamespaceResolver.getPrefix(namespaceURI)).thenReturn(null);
        // Act
        String result = namespaceResolver.getPrefix(namespaceURI);
        // Assert
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNamespaceURI_ReturnsNull_kiqS0() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getPrefix(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_RegisteredPrefix_ReturnsPrefix_SMSR1() {
        NamespaceResolver resolver = new NamespaceResolver();
        String result = resolver.getPrefix("http://example.com");
        assertEquals("ex", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_UnregisteredPrefixWithParent_ReturnsParentPrefix_Dhha2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver child = new NamespaceResolver(parent);
        String result = child.getPrefix("http://example.org");
        assertEquals("org", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNonNullURI() throws Exception {
        // This setup is automatically handled by Mockito with annotations used above.
        // Setup
        String prefix = "testPrefix";
        String expectedURI = "http://example.com/test";
        when(parentNamespaceResolver.getNamespaceURI(prefix)).thenReturn(null);
        when(namespaceResolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(expectedURI);
        // Execution
        String result = namespaceResolver.getNamespaceURI(prefix);
        // Verification
        assertEquals(expectedURI, result);
        verify(parentNamespaceResolver, never()).getNamespaceURI(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNullURIAndParentNotNull() throws Exception {
        // This setup is automatically handled by Mockito with annotations used above.
        // Setup
        String prefix = "testPrefix";
        String expectedURI = "http://example.com/test";
        when(parentNamespaceResolver.getNamespaceURI(prefix)).thenReturn(expectedURI);
        when(namespaceResolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(null);
        // Execution
        String result = namespaceResolver.getNamespaceURI(prefix);
        // Verification
        assertEquals(expectedURI, result);
        verify(parentNamespaceResolver).getNamespaceURI(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithAllNulls() throws Exception {
        // This setup is automatically handled by Mockito with annotations used above.
        // Setup
        String prefix = "testPrefix";
        when(parentNamespaceResolver.getNamespaceURI(prefix)).thenReturn(null);
        when(namespaceResolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(null);
        // Execution
        String result = namespaceResolver.getNamespaceURI(prefix);
        // Verification
        assertNull(result);
        verify(parentNamespaceResolver).getNamespaceURI(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithNullPrefix_kKZI0() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getNamespaceURI(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithKnownPrefix_RheS1() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getNamespaceURI("xml");
    assertEquals("http://www.w3.org/XML/1998/namespace", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIWithUnknownPrefixAndNoParent_HVPs2() {
    NamespaceResolver resolver = new NamespaceResolver();
    String result = resolver.getNamespaceURI("unknown");
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNull() throws Exception {
        // This setup automatically injects the mocked parentNamespaceResolver into namespaceResolver
        // Setup the namespaceResolver with no parent
        namespaceResolver = new NamespaceResolver();
        Pointer result = namespaceResolver.getNamespaceContextPointer();
        assertNull(result, "The pointer should be null when both the current instance and parent have no pointers.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNull_pAaj0() {
        NamespaceResolver resolver = new NamespaceResolver();
        assertNull(resolver.getNamespaceContextPointer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSealed_gQgr0() {
    NamespaceResolver resolver = new NamespaceResolver();
    assertFalse(resolver.isSealed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_1() throws Exception {
        namespaceResolver = new NamespaceResolver();
        NamespaceResolver cloned = (NamespaceResolver) namespaceResolver.clone();
        assertNotNull(cloned, "Cloned object should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_2() throws Exception {
        namespaceResolver = new NamespaceResolver();
        NamespaceResolver cloned = (NamespaceResolver) namespaceResolver.clone();
        assertNotSame(namespaceResolver, cloned, "Cloned object should not be the same as the original object");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_3() throws Exception {
        namespaceResolver = new NamespaceResolver();
        NamespaceResolver cloned = (NamespaceResolver) namespaceResolver.clone();
        assertFalse(sealed);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_voZA0_1() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_voZA0_2() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotSame(original, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternallyRegisteredNamespaceURI_WithDirectMapping_dckv0() throws Exception {
    HashMap<String, String> namespaceMap = new HashMap<>();
    NamespaceResolver parent = new NamespaceResolver();
    NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
    Field field = NamespaceResolver.class.getDeclaredField("namespaceMap");
    field.setAccessible(true);
    field.set(namespaceResolver, namespaceMap);
    String prefix = "example";
    String expectedUri = "http://example.com";
    namespaceMap.put(prefix, expectedUri);
    String result = namespaceResolver.getExternallyRegisteredNamespaceURI(prefix);
    assertEquals(expectedUri, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceContextPointer_WhenPointerIsNullAndParentIsNotNull_rJMO0() throws Exception {
    Pointer expectedPointer = mock(Pointer.class);
    when(parentNamespaceResolver.getNamespaceContextPointer()).thenReturn(expectedPointer);
    Pointer result = namespaceResolver.getNamespaceContextPointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSealedTrue_zYBf0() throws Exception {
    NamespaceResolver namespaceResolver = new NamespaceResolver();
    Field sealedField = NamespaceResolver.class.getDeclaredField("sealed");
    sealedField.setAccessible(true);
    sealedField.set(namespaceResolver, true); // Setting sealed to true for testing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSealedFalse_UGZm0() throws Exception {
    NamespaceResolver namespaceResolver = new NamespaceResolver();
    Field sealedField = NamespaceResolver.class.getDeclaredField("sealed");
    sealedField.setAccessible(true);
    sealedField.set(namespaceResolver, false); // Setting sealed to false for testing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_ThrowsWhenSealed() throws Exception {
        namespaceResolver = new NamespaceResolver();
        // Arrange
        String prefix = "ns";
        String namespaceURI = "http://example.com/ns";
        NamespaceResolver sealedResolver = spy(new NamespaceResolver());
        doReturn(true).when(sealedResolver).isSealed();
        // Act & Assert
        IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> {
            sealedResolver.registerNamespace(prefix, namespaceURI);
        });
        assertEquals("Cannot register namespaces on a sealed NamespaceResolver", thrown.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterNamespace_NewNamespace_XlYE0() {
    NamespaceResolver resolver = new NamespaceResolver();
    resolver.registerNamespace("prefix1", "http://example.com/ns1");
    assertEquals("http://example.com/ns1", resolver.namespaceMap.get("prefix1"));
    assertEquals("prefix1", resolver.reverseMap.get("http://example.com/ns1"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone() throws Exception {
        namespaceResolver = new NamespaceResolver();
        NamespaceResolver cloned = (NamespaceResolver) namespaceResolver.clone();
        assertNotNull(cloned, "Cloned object should not be null");
        assertNotSame(namespaceResolver, cloned, "Cloned object should not be the same as the original object");
        assertFalse(sealed);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_voZA0() {
    NamespaceResolver original = new NamespaceResolver();
    NamespaceResolver cloned = (NamespaceResolver) original.clone();
    assertNotNull(cloned);
    assertNotSame(original, cloned);
}
}