/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointerFactory_Test_Passing {
private CollectionPointerFactory collectionPointerFactory;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithCollection_aSVw0() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    List<Object> collection = new ArrayList<>();
    QName name = new QName("test");
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, collection, locale);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonCollection_NjhT1() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    String nonCollection = "Not a collection";
    QName name = new QName("test");
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, nonCollection, locale);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection_1() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("test");
        Object bean = mock(Collection.class); // Assuming Collection type to simulate collection behavior
        NodePointer result = collectionPointerFactory.createNodePointer(parent, name, bean);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection_2() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("test");
        Object bean = mock(Collection.class); // Assuming Collection type to simulate collection behavior
        NodePointer result = collectionPointerFactory.createNodePointer(parent, name, bean);
        assertTrue(result instanceof CollectionPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonCollection() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("test");
        Object bean = new Object(); // Non-collection object
        NodePointer result = collectionPointerFactory.createNodePointer(parent, name, bean);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_vtnR0_AzNc0() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    int expectedOrder = 10; // Assuming the correct order value is 10
    assertEquals(expectedOrder, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection() throws Exception {
        collectionPointerFactory = new CollectionPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("test");
        Object bean = mock(Collection.class); // Assuming Collection type to simulate collection behavior
        NodePointer result = collectionPointerFactory.createNodePointer(parent, name, bean);
        assertNotNull(result);
        assertTrue(result instanceof CollectionPointer);
    }
}