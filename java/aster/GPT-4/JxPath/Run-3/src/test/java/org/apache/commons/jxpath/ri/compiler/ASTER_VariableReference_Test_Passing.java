/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
@Mock
    private QName varName;
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private VariableReference variableReference;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVariableName_Fwus0() {
    QName qName = new QName("prefix", "localName");
    VariableReference variableReference = new VariableReference(qName);
    QName result = variableReference.getVariableName();
    assertEquals(qName, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependentReturnsFalse_dgiO0() {
    QName qName = new QName("prefix", "localName");
    VariableReference variableReference = new VariableReference(qName);
    assertFalse(variableReference.isContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithQualifiedName_jUee0() {
    QName qName = new QName("prefix", "localName");
    VariableReference variableReference = new VariableReference(qName);
    assertEquals("$prefix:localName", variableReference.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependentReturnsFalse_HtBk0() {
    QName qName = new QName("prefix", "localName");
    VariableReference variableReference = new VariableReference(qName);
    assertFalse(variableReference.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_vPSO0() throws Exception {
    QName varName = new QName("variable");
    VariableReference variableReference = new VariableReference(varName);
    EvalContext context = mock(EvalContext.class);
    Object expectedValue = new Object();
    when(context.getValue()).thenReturn(expectedValue);
    Object result = variableReference.compute(context);
    verify(context).getValue(); // Verify that getValue was called on the context object
}
}