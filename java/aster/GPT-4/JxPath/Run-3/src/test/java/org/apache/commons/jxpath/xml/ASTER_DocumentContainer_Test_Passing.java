/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.xml;
import java.net.URL;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DocumentContainer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIOException_lvHe2() throws Exception {
        URL url = new URL("http://example.com/invalid.xml");
        DocumentContainer container = new DocumentContainer(url);
        try {
            container.getValue();
            fail("Expected JXPathException due to IOException");
        } catch (JXPathException ex) {
            assertNotNull("Expected exception message", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNullURL_acQz0_gAbm0() throws Exception {
    DocumentContainer container = new DocumentContainer(null);
    assertNull(container.getValue(), "Expected null document when URL is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithValidURL_URRg1_XYuK0() throws Exception {
    URL url = new URL("http://example.com/valid.xml");
    DocumentContainer container = new DocumentContainer(url);
    assertNotNull(container.getValue(), "Expected non-null document for valid URL");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithValidURLAndModel_ApaA3_ULik0() throws Exception {
    URL url = new URL("http://example.com/valid.xml");
    DocumentContainer container = new DocumentContainer(url, "model");
    assertNotNull(container.parseXML(url.openStream()), "Expected non-null document for valid URL and model");
}
}