/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletRequestHandler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithEmptyStringsArray_QLiV1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("testProperty")).thenReturn(new String[]{});
        assertNull(handler.getProperty(bean, "testProperty"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithSingleElementStringsArray_xoFE2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("testProperty")).thenReturn(new String[]{"value"});
        assertEquals("value", handler.getProperty(bean, "testProperty"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithMultipleElementStringsArray_feFE3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("testProperty")).thenReturn(new String[]{"value1", "value2"});
        assertArrayEquals(new String[]{"value1", "value2"}, (String[]) handler.getProperty(bean, "testProperty"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithAttributePresent_YdZP4() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("testProperty")).thenReturn(null);
        when(servletRequest.getAttribute("testProperty")).thenReturn("attributeValue");
        assertEquals("attributeValue", handler.getProperty(bean, "testProperty"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_eKji0() {
        ServletRequestAndContext mockRequestAndContext = mock(ServletRequestAndContext.class);
        ServletRequest mockServletRequest = mock(ServletRequest.class);
        when(mockRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
        ServletRequestHandler handler = new ServletRequestHandler();
        handler.setProperty(mockRequestAndContext, "testProperty", "testValue");
        verify(mockServletRequest).setAttribute("testProperty", "testValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_OJfk1() {
        ServletRequestAndContext mockRequestAndContext = mock(ServletRequestAndContext.class);
        ServletRequest mockServletRequest = mock(ServletRequest.class);
        when(mockRequestAndContext.getServletRequest()).thenReturn(mockServletRequest);
        ServletRequestHandler handler = new ServletRequestHandler();
        handler.setProperty(mockRequestAndContext, "testProperty", null);
        verify(mockServletRequest).setAttribute("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithEmptyAttributesAndParameters_HOcm0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(servletRequest.getParameterNames()).thenReturn(mock(Enumeration.class));
        handler.collectPropertyNames(set, bean);
        assertTrue(set.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithBothAttributesAndParameters_cHyN3_1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("attribute1");
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("parameter1");
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("attribute1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithNullServletRequest_irXA6() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        when(bean.getServletRequest()).thenReturn(null);
        handler.collectPropertyNames(set, bean);
        assertTrue(set.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithExceptionInGettingAttributes_OIBo7() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenThrow(new RuntimeException("Failed to get attributes"));
        when(servletRequest.getParameterNames()).thenReturn(mock(Enumeration.class));
        try {
            handler.collectPropertyNames(set, bean);
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithExceptionInGettingParameters_rwET8() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(servletRequest.getParameterNames()).thenThrow(new RuntimeException("Failed to get parameters"));
        try {
            handler.collectPropertyNames(set, bean);
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}