/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import java.util.Arrays;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ContainerPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointerWhenValuePointerIsNull_GgJC0_1() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        QName name = mock(QName.class);
        Object immediateNode = new Object();
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(parentNode.getName()).thenReturn(name);
        when(parentNode.getImmediateNode()).thenReturn(immediateNode);
        NodePointer result = containerPointer.getImmediateValuePointer();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointerWhenValuePointerIsNull_GgJC0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        QName name = mock(QName.class);
        Object immediateNode = new Object();
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(parentNode.getName()).thenReturn(name);
        when(parentNode.getImmediateNode()).thenReturn(immediateNode);
        NodePointer result = containerPointer.getImmediateValuePointer();
        assertNotNull(result);
        assertSame(immediateNode, result.getImmediateNode());
        assertSame(name, result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionReturnsTrue_mZem0() {
        DocumentContainer container = mock(DocumentContainer.class);
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        Locale locale = Locale.getDefault();
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(containerPointer.getBaseValue()).thenReturn(Arrays.asList("item1", "item2"));
        when(ValueUtils.isCollection(any())).thenReturn(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_WoEt0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DocumentContainer mockContainer = mock(DocumentContainer.class);
        NodePointer mockValuePointer = mock(NodePointer.class);
        NodeTest mockNodeTest = mock(NodeTest.class);
        NodePointer mockStartWith = mock(NodePointer.class);
        NodeIterator expectedIterator = mock(NodeIterator.class);
        when(mockValuePointer.childIterator(mockNodeTest, true, mockStartWith)).thenReturn(expectedIterator);
        ContainerPointer containerPointer = new ContainerPointer(mockParent, mockContainer);
        NodeIterator resultIterator = containerPointer.childIterator(mockNodeTest, true, mockStartWith);
        verify(mockValuePointer).childIterator(mockNodeTest, true, mockStartWith);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_BHel0_yKZO0() {
    DocumentContainer container = mock(DocumentContainer.class);
    Locale locale = mock(Locale.class);
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    NodeIterator nodeIterator = mock(NodeIterator.class);
    when(domNodePointer.namespaceIterator()).thenReturn(nodeIterator);
    ContainerPointer containerPointer = new ContainerPointer(domNodePointer, container);
}
}