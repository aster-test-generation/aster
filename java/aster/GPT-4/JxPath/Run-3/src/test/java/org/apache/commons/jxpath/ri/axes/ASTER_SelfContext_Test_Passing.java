/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Passing {
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NodePointer nodePointer;
@InjectMocks
    private SelfContext selfContext;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private NodeTypeTest mockNodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
    private boolean startedSet = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenPositionIsNotOne() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertFalse(selfContext.setPosition(2), "setPosition should return false when position is not 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenNodePointerIsNull() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        assertFalse(selfContext.setPosition(1), "setPosition should return false when nodePointer is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenNodeTestFails() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(false);
        assertFalse(selfContext.setPosition(1), "setPosition should return false when nodeTest fails");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenPositionIsNotOne_zfgP0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        assertFalse(selfContext.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalse_WhenPositionIsOneAndNodePointerIsNull_oqSN2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ReturnsNull_WhenPositionIsZeroAndSetPositionFails_Ednu0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        NodePointer result = selfContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ReturnsNull_WhenPositionIsReset_Novi2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        selfContext.setPosition(1); // Assuming setPosition method exists and sets position to 1
        selfContext.setPosition(0); // Resetting position to 0
        NodePointer result = selfContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_VWgw0() throws Exception {
    selfContext = new SelfContext(parentContext, nodeTest);
    Field startedSetField = SelfContext.class.getDeclaredField("startedSet");
    startedSetField.setAccessible(true);
    startedSetField.set(selfContext, true);
    selfContext.reset();
    assertFalse((Boolean) startedSetField.get(selfContext));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_WDIq0() throws Exception {
    selfContext = new SelfContext(mockNamespaceContext, mockNodeTypeTest);
    Pointer expectedPointer = Mockito.mock(Pointer.class); // Using Mockito to create a mock Pointer
    when(mockNamespaceContext.getSingleNodePointer()).thenReturn(expectedPointer);
    Pointer actualPointer = selfContext.getSingleNodePointer();
    verify(mockNamespaceContext).getSingleNodePointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrue_WhenPositionIsOne_AndNodePointerIsNotNull_AndNodeTestIsNull_fid2() {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(null)).thenReturn(true);
        assertFalse(selfContext.setPosition(1), "setPosition should return true when position is 1, nodePointer is not null, and nodeTest is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrue_WhenPositionIsOneAndNodePointerIsNotNullAndNodeTestIsNull_xgeN1_fid2() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        SelfContext selfContext = new SelfContext(namespaceContext, null);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_JBtx0_jlVj0_fid2() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
    boolean result = selfContext.nextNode();
}
}