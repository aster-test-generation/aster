/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionAndServletContext_Test_Passing {
@Mock
    private HttpSession session;
private HttpSessionAndServletContext httpsessionandservletcontext;
@Mock
    private ServletContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_1() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, null);
        Field field_session = HttpSessionAndServletContext.class.getDeclaredField("session");
        field_session.setAccessible(true);
        field_session.set(httpsessionandservletcontext, session);
        HttpSession result = httpsessionandservletcontext.getSession();
        assertNotNull(result, "Session should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSession_2() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, null);
        Field field_session = HttpSessionAndServletContext.class.getDeclaredField("session");
        field_session.setAccessible(true);
        field_session.set(httpsessionandservletcontext, session);
        HttpSession result = httpsessionandservletcontext.getSession();
        assertSame(session, result, "The returned session should be the same as the mocked session");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSession_xYYG0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext mockContext = mock(ServletContext.class);
    HttpSessionAndServletContext testClass = new HttpSessionAndServletContext(mockSession, mockContext);
    HttpSession result = testClass.getSession();
    assertEquals(mockSession, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletContext_1() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, context);
        Field field_context = HttpSessionAndServletContext.class.getDeclaredField("context");
        field_context.setAccessible(true);
        field_context.set(httpsessionandservletcontext, context);
        ServletContext retrievedContext = httpsessionandservletcontext.getServletContext();
        assertNotNull(retrievedContext, "ServletContext should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletContext_2() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, context);
        Field field_context = HttpSessionAndServletContext.class.getDeclaredField("context");
        field_context.setAccessible(true);
        field_context.set(httpsessionandservletcontext, context);
        ServletContext retrievedContext = httpsessionandservletcontext.getServletContext();
        assertSame(context, retrievedContext, "The retrieved ServletContext should be the same as the mocked one");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletContext_oABg0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext expectedContext = mock(ServletContext.class);
    HttpSessionAndServletContext testClass = new HttpSessionAndServletContext(mockSession, expectedContext);
    ServletContext resultContext = testClass.getServletContext();
    assertSame(expectedContext, resultContext);
}
}