/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.functions;
import java.lang.reflect.Constructor;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstructorFunction_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvokeWithNullContext_ioxI1() throws Exception {
        Constructor<ExpressionContext> constructor = ExpressionContext.class.getConstructor();
        ConstructorFunction constructorFunction = new ConstructorFunction(constructor);
        try {
            constructorFunction.invoke(null, null);
            fail("Expected an exception to be thrown");
        } catch (JXPathInvalidAccessException e) {
            assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvokeWithCorrectParameters_yCXF4_gpYO0() throws Exception {
    Constructor<String> constructor = String.class.getConstructor(String.class);
    ConstructorFunction constructorFunction = new ConstructorFunction(constructor);
    ExpressionContext context = mock(ExpressionContext.class);
    Object[] parameters = new Object[]{"test"};
    String result = (String) constructorFunction.invoke(context, parameters);
    assertEquals("test", result);
}
}