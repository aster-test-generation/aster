/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletRequest;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletRequestHandler_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyWithNullStrings_iKQw0() {
        ServletRequestHandler handler = new ServletRequestHandler();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getParameterValues("testProperty")).thenReturn(null);
        when(servletRequest.getAttribute("testProperty")).thenReturn(null);
        assertNull(handler.getProperty(bean, "testProperty"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithAttributesOnly_nTcW1_1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("attribute1");
        when(servletRequest.getParameterNames()).thenReturn(mock(Enumeration.class));
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("attribute1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithAttributesOnly_nTcW1_2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("attribute1");
        when(servletRequest.getParameterNames()).thenReturn(mock(Enumeration.class));
        handler.collectPropertyNames(set, bean);
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithParametersOnly_wpDx2_1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("parameter1");
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("parameter1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithParametersOnly_wpDx2_2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(mock(Enumeration.class));
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("parameter1");
        handler.collectPropertyNames(set, bean);
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithBothAttributesAndParameters_cHyN3_2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("attribute1");
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("parameter1");
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("parameter1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithBothAttributesAndParameters_cHyN3_3() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("attribute1");
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("parameter1");
        handler.collectPropertyNames(set, bean);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithDuplicateAttributeAndParameterNames_RlRE4_1() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("commonName");
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("commonName");
        handler.collectPropertyNames(set, bean);
        assertTrue(set.contains("commonName"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithDuplicateAttributeAndParameterNames_RlRE4_2() {
        ServletRequestHandler handler = new ServletRequestHandler();
        HashSet<String> set = new HashSet<>();
        ServletRequestAndContext bean = mock(ServletRequestAndContext.class);
        ServletRequest servletRequest = mock(ServletRequest.class);
        Enumeration<String> attributes = mock(Enumeration.class);
        Enumeration<String> parameters = mock(Enumeration.class);
        when(bean.getServletRequest()).thenReturn(servletRequest);
        when(servletRequest.getAttributeNames()).thenReturn(attributes);
        when(attributes.hasMoreElements()).thenReturn(true, false);
        when(attributes.nextElement()).thenReturn("commonName");
        when(servletRequest.getParameterNames()).thenReturn(parameters);
        when(parameters.hasMoreElements()).thenReturn(true, false);
        when(parameters.nextElement()).thenReturn("commonName");
        handler.collectPropertyNames(set, bean);
        assertEquals(1, set.size());}
}