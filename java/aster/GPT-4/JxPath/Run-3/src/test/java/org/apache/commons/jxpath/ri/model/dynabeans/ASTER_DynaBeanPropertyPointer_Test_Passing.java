/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.ArrayList;
import java.util.Arrays;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Passing {
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DynaBean dynaBeanMock;
@InjectMocks
    private DynaBeanPropertyPointer dynaBeanPropertyPointer;
@Mock
    private DOMNodePointer parentNode;
@Mock
    private DynaBean dynaBean;
@Mock
    private DynaClass dynaClass;
@Mock
    private DynaProperty dynaProperty;
@Mock
    private DOMNodePointer domNodePointer;
private String name = "testProperty";
@InjectMocks
    private DynaBeanPropertyPointer dynabeanPropertyPointer;
@Mock
    private DynaProperty dynaProperty1;
@Mock
    private DynaProperty dynaProperty2;
@Mock
    private DynaProperty dynaPropertyClass;
    private String[] names;
    private static final String CLASS = "class";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsIndexedPropertyTrue() throws Exception {
        dynabeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperty(name)).thenReturn(dynaProperty);
        when(dynaProperty.isIndexed()).thenReturn(true);
        assertTrue(dynabeanPropertyPointer.isIndexedProperty(), "Property should be indexed");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsIndexedPropertyFalse() throws Exception {
        dynabeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperty(name)).thenReturn(dynaProperty);
        when(dynaProperty.isIndexed()).thenReturn(false);
        assertFalse(dynabeanPropertyPointer.isIndexedProperty(), "Property should not be indexed");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName() throws Exception {
        // Initialization of mocks and class under test is handled by Mockito
        String expectedPropertyName = "testProperty";
        // Call the method under test
        dynaBeanPropertyPointer.setPropertyName(expectedPropertyName);
        // Use reflection to access the private field 'name'
        java.lang.reflect.Field nameField = DynaBeanPropertyPointer.class.getDeclaredField("name");
        nameField.setAccessible(true);
        String actualPropertyName = (String) nameField.get(dynaBeanPropertyPointer);
        // Assert that the name was set correctly
        assertEquals(expectedPropertyName, actualPropertyName, "Property name should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithWildcardNameReturnsNull() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("*");
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithIndexedPropertyAndValidIndex() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
        when(dynaBean.get("propertyName", 1)).thenReturn("expectedValue");
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertEquals("expectedValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithIndexedPropertyAndOutOfBounds() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(100);
        when(dynaBean.get("propertyName", 100)).thenThrow(new ArrayIndexOutOfBoundsException());
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithNonIndexedProperty() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(false);
        when(dynaBean.get("propertyName")).thenReturn("expectedValue");
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertEquals("expectedValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithCollectionAndValidIndex() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(false);
        when(dynaBean.get("propertyName")).thenReturn(java.util.Arrays.asList("value1", "value2"));
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertEquals("value2", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWithCollectionAndInvalidIndex() {
        // Assuming the constructor of DynaBeanPropertyPointer initializes some fields
        // which are used in getImmediateNode method.
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(false);
        when(dynaBean.get("propertyName")).thenReturn(java.util.Arrays.asList("value1", "value2"));
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(5);
        // Execute
        Object result = dynaBeanPropertyPointer.getImmediateNode();
        // Verify
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection() throws Exception {
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(DynaBeanPropertyPointer.WHOLE_COLLECTION);
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
        // Action
        dynaBeanPropertyPointer.remove();
        // Assert
        verify(dynaBean).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty() throws Exception {
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
        when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
        // Action
        dynaBeanPropertyPointer.remove();
        // Assert
        verify(dynaBean).set("testProperty", 1, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection() throws Exception {
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
        when(dynaBeanPropertyPointer.isCollection()).thenReturn(true);
        when(dynaBeanPropertyPointer.getBaseValue()).thenReturn(new ArrayList<>());
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
        // Action
        dynaBeanPropertyPointer.remove();
        // Assert
        verify(dynaBean).set(eq("testProperty"), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_SingleIndex() throws Exception {
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        when(dynaBeanPropertyPointer.getIndex()).thenReturn(0);
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
        // Action
        dynaBeanPropertyPointer.remove();
        // Assert
        verify(dynaBean).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointerMock, dynaBeanMock);
        // Since isContainer method always returns true, the test should always expect true.
        assertTrue(dynaBeanPropertyPointer.isContainer(), "isContainer should always return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() throws Exception {
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperties()).thenReturn(new DynaProperty[] {dynaProperty1, dynaProperty2, dynaPropertyClass});
        when(dynaProperty1.getName()).thenReturn("property1");
        when(dynaProperty2.getName()).thenReturn("property2");
        when(dynaPropertyClass.getName()).thenReturn("class");
        String[] expectedPropertyNames = {"property1", "property2"};
        assertArrayEquals(expectedPropertyNames, dynaBeanPropertyPointer.getPropertyNames());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void set(String name, String key, Object value) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        when(dynaBean.get("propertyName")).thenReturn("expectedValue");
        // Setup the property name to be fetched
        when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
        // Execute the method under test
        Object result = dynaBeanPropertyPointer.getBaseValue();
        // Verify the interaction with the mocked DynaBean
        verify(dynaBean).get("propertyName");
        // Assert the expected result
        assertEquals("expectedValue", result, "The returned value should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyIndex_NoChange() {
        // The setup is already handled by Mockito annotations
        // Arrange
        int initialIndex = 3;
        dynaBeanPropertyPointer.setPropertyIndex(initialIndex);
        // Act
        dynaBeanPropertyPointer.setPropertyIndex(initialIndex);
        // Assert
        verify(dynaBeanPropertyPointer, times(1)).setPropertyIndex(initialIndex);
        assertNotNull(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualPropertyTrue() throws Exception {
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperty(anyString())).thenReturn(dynaProperty);
        dynabeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        String propertyName = "existingProperty";
        when(dynaClass.getDynaProperty(propertyName)).thenReturn(dynaProperty);
        // Action
        boolean result = dynabeanPropertyPointer.isActualProperty();
        // Assertion
        assertTrue(result, "The property should be actual when DynaProperty is not null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualPropertyFalse() throws Exception {
        when(dynaBean.getDynaClass()).thenReturn(dynaClass);
        when(dynaClass.getDynaProperty(anyString())).thenReturn(dynaProperty);
        dynabeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
        // Setup
        String propertyName = "nonExistingProperty";
        when(dynaClass.getDynaProperty(propertyName)).thenReturn(null);
        // Action
        boolean result = dynabeanPropertyPointer.isActualProperty();
        // Assertion
        assertFalse(result, "The property should not be actual when DynaProperty is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyIndex_WhenAlreadySpecified_RtXy0() {
    dynaBeanPropertyPointer.setIndex(0); // Correct way to set the index using a setter
    int index = dynaBeanPropertyPointer.getIndex(); // Correct way to get the index using a getter
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_ZhSx0() throws Exception {
    when(dynaBean.getDynaClass()).thenReturn(dynaClass);
    when(dynaClass.getDynaProperties()).thenReturn(new DynaProperty[] {dynaProperty1, dynaProperty2});
    when(dynaProperty1.getName()).thenReturn("property1");
    when(dynaProperty2.getName()).thenReturn("property2");
    String[] expectedPropertyNames = {"property1", "property2"};
    assertArrayEquals(expectedPropertyNames, dynaBeanPropertyPointer.getPropertyNames());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyIndex_ChangesIndex_EDdz0() {
    int newIndex = 5;
    dynaBeanPropertyPointer.setPropertyIndex(-1); // Ensure initial state
    dynaBeanPropertyPointer.setPropertyIndex(newIndex);
    verify(dynaBeanPropertyPointer).setPropertyIndex(newIndex);
    assertNull(dynaBeanPropertyPointer.getName(), "Name should be null after index change");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_IndexedProperty_GsAL0() throws Exception {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
    when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
    when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
    dynaBeanPropertyPointer.remove();
    verify(dynaBean).set("testProperty", 1, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemove_Collection_xEWg0() throws Exception {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
    when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
    when(dynaBeanPropertyPointer.isCollection()).thenReturn(true);
    ArrayList<Object> list = new ArrayList<>();
    when(dynaBeanPropertyPointer.getBaseValue()).thenReturn(list);
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("testProperty");
    dynaBeanPropertyPointer.remove();
    verify(dynaBean).set(eq("testProperty"), any());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyIndex_NoChange_SUDO0() {
    int initialIndex = 3;
    dynaBeanPropertyPointer.setPropertyIndex(initialIndex);
    dynaBeanPropertyPointer.setPropertyIndex(initialIndex);
    verify(dynaBeanPropertyPointer, times(1)).setPropertyIndex(initialIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeWithIndexedPropertyAndOutOfBounds_Eknq0() {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
    when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
    when(dynaBeanPropertyPointer.getIndex()).thenReturn(100);
    when(dynaBean.get("propertyName", 100)).thenThrow(new IndexOutOfBoundsException());
    Object result = dynaBeanPropertyPointer.getImmediateNode();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeWithCollectionAndValidIndex_nwhC0() {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
    when(dynaBeanPropertyPointer.getPropertyNames()).thenReturn(new String[]{"propertyName"});
    when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(true);
    when(dynaBean.get("propertyName")).thenReturn(Arrays.asList("value1", "value2"));
    when(dynaBeanPropertyPointer.getIndex()).thenReturn(1);
    Object result = dynaBeanPropertyPointer.getImmediateNode();
    assertEquals("value2", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeWithCollectionAndInvalidIndex_EJEV0() {
    DOMNodePointer parentNode = mock(DOMNodePointer.class);
    DynaBean dynaBean = mock(DynaBean.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(parentNode, dynaBean);
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
    when(dynaBeanPropertyPointer.isIndexedProperty()).thenReturn(false);
    when(dynaBean.get("propertyName")).thenReturn(Arrays.asList("value1", "value2"));
    when(dynaBeanPropertyPointer.getIndex()).thenReturn(5);
    Object result = dynaBeanPropertyPointer.getImmediateNode();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_lFZL0() throws Exception {
    DynaBean dynaBean = mock(DynaBean.class);
    when(dynaBean.get("propertyName")).thenReturn("expectedValue");
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointer, dynaBean);
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn("propertyName");
    Object result = dynaBeanPropertyPointer.getBaseValue();
    verify(dynaBean).get("propertyName");
    assertEquals("expectedValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyName_goBb0() throws Exception {
    String expectedPropertyName = "testProperty";
    when(dynaBeanPropertyPointer.getPropertyName()).thenReturn(expectedPropertyName);
    assertEquals(expectedPropertyName, dynaBeanPropertyPointer.getPropertyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContainer_dLMB0() {
    DynaBeanPropertyPointer dynaBeanPropertyPointer = new DynaBeanPropertyPointer(domNodePointerMock, dynaBeanMock);
    Assertions.assertTrue(dynaBeanPropertyPointer.isContainer(), "isContainer should always return true");
}
}