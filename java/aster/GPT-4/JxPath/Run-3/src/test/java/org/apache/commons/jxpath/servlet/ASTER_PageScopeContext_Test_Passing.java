/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import javax.servlet.jsp.PageContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Passing {
@Mock
    private PageContext pageContext;
private PageScopeContext pageScopeContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttribute() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        String attributeName = "testAttribute";
        Object expectedValue = new Object();
        Mockito.when(pageContext.getAttribute(attributeName, PageContext.PAGE_SCOPE)).thenReturn(expectedValue);
        Object result = pageScopeContext.getAttribute(attributeName);
        Assertions.assertEquals(expectedValue, result, "The returned attribute should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeReturnsCorrectValue_zQRj0() {
    PageContext mockPageContext = mock(PageContext.class);
    when(mockPageContext.getAttribute("testAttribute", PageContext.PAGE_SCOPE)).thenReturn("expectedValue");
    PageScopeContext pageScopeContext = new PageScopeContext(mockPageContext);
    Object result = pageScopeContext.getAttribute("testAttribute");
    assertEquals("expectedValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_1() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        // Prepare mock data
        Enumeration<String> expectedAttributes = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(expectedAttributes);
        // Execute the method
        Enumeration<String> result = pageScopeContext.getAttributeNames();
        // Assertions
        List<String> resultList = Collections.list(result);
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeNames_2() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        // Prepare mock data
        Enumeration<String> expectedAttributes = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(expectedAttributes);
        // Execute the method
        Enumeration<String> result = pageScopeContext.getAttributeNames();
        // Assertions
        List<String> resultList = Collections.list(result);
        assertEquals(Arrays.asList("attr1", "attr2", "attr3"), resultList, "The returned attribute names should match the expected ones.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeNames_olMN0() {
    PageContext mockPageContext = mock(PageContext.class);
    Enumeration<String> expectedAttributes = Collections.enumeration(Arrays.asList("attr1", "attr2", "attr3"));
    when(mockPageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(expectedAttributes);
    PageScopeContext pageScopeContext = new PageScopeContext(mockPageContext);
    Enumeration<String> result = pageScopeContext.getAttributeNames();
    List<String> resultList = Collections.list(result);
    List<String> expectedList = Collections.list(expectedAttributes);
    assertEquals(expectedList, resultList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAttribute() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        Field field_pageContext = PageScopeContext.class.getDeclaredField("pageContext");
        field_pageContext.setAccessible(true);
        field_pageContext.set(pageScopeContext, pageContext);
        String attributeName = "testAttribute";
        String attributeValue = "value";
        pageScopeContext.setAttribute(attributeName, attributeValue);
        verify(pageContext).setAttribute(attributeName, attributeValue, PageContext.PAGE_SCOPE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAttribute_kbct0() {
    PageContext mockPageContext = mock(PageContext.class);
    PageScopeContext pageScopeContext = new PageScopeContext(mockPageContext);
    String attribute = "testAttribute";
    Object value = new Object();
    pageScopeContext.setAttribute(attribute, value);
    verify(mockPageContext).setAttribute(attribute, value, PageContext.PAGE_SCOPE);
}
}