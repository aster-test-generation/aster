/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.jxpath.ri.compiler.Path;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullObject_tScP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Object.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullToPrimitive_qbaw1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_AssignableTypes_xquH2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("Hello", String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_BooleanToNumber_Cupx4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, Integer.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_BooleanToAtomicBoolean_WVGV5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, java.util.concurrent.atomic.AtomicBoolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NumberToBoolean_MyEZ6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(123, Boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_StringToBoolean_nSpS7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("true", Boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_StringToInteger_QTDd8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("123", Integer.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_StringToDouble_qSZL9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("123.45", Double.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ArrayToArray_SameType_YpsK10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{1, 2, 3};
        assertTrue(converter.canConvert(array, Integer[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ArrayToArray_DifferentType_RCdD11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{1, 2, 3};
        assertFalse(converter.canConvert(array, String[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ArrayToCollection_EIYU12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{1, 2, 3};
        assertTrue(converter.canConvert(array, ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_EmptyArrayToCollection_qadU13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{};
        assertTrue(converter.canConvert(array, ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_CollectionToArray_dQqq14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertTrue(converter.canConvert(list, Integer[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_CollectionToCollection_xlss15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertTrue(converter.canConvert(list, HashSet.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_EmptyCollectionToArray_aSHQ16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        assertTrue(converter.canConvert(list, Integer[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_EmptyCollectionToCollection_hJXZ17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = new ArrayList<>();
        assertTrue(converter.canConvert(list, HashSet.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_UnsupportedConversion_XYFF21() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Thread.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_UnsupportedType_jFWG23() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canConvert(new Object(), Path.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromListToSpecificCollection_gRvo24() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = Arrays.asList("one", "two", "three");
        assertTrue(converter.canConvert(list, LinkedList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromSetToSpecificCollection_plry25() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> set = new HashSet<>(Arrays.asList("one", "two", "three"));
        assertTrue(converter.canConvert(set, TreeSet.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromArrayToPrimitiveArray_LKTd26() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{1, 2, 3};
        assertTrue(converter.canConvert(array, int[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromArrayToDifferentPrimitiveArray_EMtR27() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] array = new Integer[]{1, 2, 3};
        assertFalse(converter.canConvert(array, double[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromArrayToCompatibleTypeArray_VAXG28() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number[] array = new Number[]{1, 2.5, 3};
        assertTrue(converter.canConvert(array, Double[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromArrayToIncompatibleTypeArray_hUTs29() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number[] array = new Number[]{1, 2.5, 3};
        assertFalse(converter.canConvert(array, Boolean[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromCollectionToCompatibleTypeArray_FaZu30() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Number> list = Arrays.asList(1, 2.5, 3);
        assertTrue(converter.canConvert(list, Double[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_FromCollectionToIncompatibleTypeArray_CHbM31() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Number> list = Arrays.asList(1, 2.5, 3);
        assertFalse(converter.canConvert(list, Boolean[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanCreateArrayList_nyqq0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(ArrayList.class);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanCreateHashSet_Dxtt1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(HashSet.class);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCannotCreateListInterface_gpwe2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(List.class);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCannotCreateCollectionInterface_lNgO3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(Collection.class);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCannotCreateSetInterface_mJxL4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(Set.class);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCannotCreateAbstractList_xZpi5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    boolean result = converter.canCreateCollection(AbstractList.class);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithArrayList_gIhI0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(ArrayList.class);
        assertTrue(result instanceof ArrayList);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithHashSet_Dcjw1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(HashSet.class);
        assertTrue(result instanceof HashSet);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithListInterface_jDht2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(List.class);
        assertTrue(result instanceof ArrayList);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithSetInterface_dmvY3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(Set.class);
        assertTrue(result instanceof HashSet);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithCollectionInterface_EmBF4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(Collection.class);
        assertTrue(result instanceof ArrayList);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForByte_kxsf0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Byte)(byte)123, converter.allocateNumber(Byte.class, 123.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForShort_bNPL1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Short)(short)1234, converter.allocateNumber(Short.class, 1234.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForInteger_iDrm2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Integer)123456, converter.allocateNumber(Integer.class, 123456.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForLong_gnbS3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Long)1234567890L, converter.allocateNumber(Long.class, 1234567890.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForFloat_HLhC4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Float)123.45f, converter.allocateNumber(Float.class, 123.45));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForDouble_tVSv5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((Double)123456.789, converter.allocateNumber(Double.class, 123456.789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigInteger_Prvl6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(BigInteger.valueOf(1234567890L), converter.allocateNumber(BigInteger.class, 1234567890.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigDecimal_ttEU7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(new BigDecimal(123456.789), converter.allocateNumber(BigDecimal.class, 123456.789));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberWithNullType_xGfm10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertNull(converter.allocateNumber(null, 123.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveBoolean_HgGD0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(boolean.class);
    assertEquals(Boolean.FALSE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveChar_FfRy1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(char.class);
    assertEquals(Character.valueOf('\0'), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveByte_rALR2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(byte.class);
    assertEquals(Byte.valueOf((byte) 0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveShort_OgwJ3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(short.class);
    assertEquals(Short.valueOf((short) 0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveInt_swkp4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(int.class);
    assertEquals(Integer.valueOf(0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveLong_vnIf5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(long.class);
    assertEquals(Long.valueOf(0L), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveFloat_OCDJ6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(float.class);
    assertEquals(Float.valueOf(0.0f), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveDouble_oggj7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(double.class);
    assertEquals(Double.valueOf(0.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToPrimitiveNull_nPFt8() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertNullToPrimitive(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_Qkqs0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> originalList = new ArrayList<>();
    originalList.add("test");
    Collection result = converter.unmodifiableCollection(originalList);
    assertTrue(result instanceof List);
    assertThrows(UnsupportedOperationException.class, () -> ((List<String>) result).add("new"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSortedSet_nVhP1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> originalSortedSet = new TreeSet<>();
    originalSortedSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSortedSet);
    assertTrue(result instanceof SortedSet);
    assertThrows(UnsupportedOperationException.class, () -> ((SortedSet<String>) result).add("new"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSet_oPPZ2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> originalSet = new HashSet<>();
    originalSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSet);
    assertTrue(result instanceof Set);
    assertThrows(UnsupportedOperationException.class, () -> ((Set<String>) result).add("new"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollection_vUah3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> originalCollection = new LinkedList<>();
    originalCollection.add("test");
    Collection result = converter.unmodifiableCollection(originalCollection);
    assertNotNull(result);
    assertThrows(UnsupportedOperationException.class, () -> result.add("new"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBoolean_BzAo0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Boolean result = (Boolean) converter.convertStringToPrimitive("true", Boolean.TYPE);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToCharacter_jUOE1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Character result = (Character) converter.convertStringToPrimitive("a", Character.TYPE);
    assertEquals('a', result.charValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToByte_eUgq2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Byte result = (Byte) converter.convertStringToPrimitive("1", Byte.TYPE);
    assertEquals(Byte.valueOf("1"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToShort_lIgX3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Short result = (Short) converter.convertStringToPrimitive("123", Short.TYPE);
    assertEquals(Short.valueOf("123"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_aWPt4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer result = (Integer) converter.convertStringToPrimitive("12345", Integer.TYPE);
    assertEquals(Integer.valueOf(12345), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToLong_EUOV5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Long result = (Long) converter.convertStringToPrimitive("1234567890", Long.TYPE);
    assertEquals(Long.valueOf(1234567890), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToFloat_SIcd6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Float result = (Float) converter.convertStringToPrimitive("3.14", Float.TYPE);
    assertEquals(Float.valueOf(3.14f), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToDouble_Yrtq7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Double result = (Double) converter.convertStringToPrimitive("3.14159", Double.TYPE);
    assertEquals(Double.valueOf(3.14159), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToNull_qmgU8() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("test", Object.class);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_Qkqs0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> originalList = new ArrayList<>();
    originalList.add("test");
    Collection result = converter.unmodifiableCollection(originalList);
    assertTrue(result instanceof List);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableList_Qkqs0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> originalList = new ArrayList<>();
    originalList.add("test");
    Collection result = converter.unmodifiableCollection(originalList);
    assertThrows(UnsupportedOperationException.class, () -> ((List<String>) result).add("new"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSortedSet_nVhP1_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> originalSortedSet = new TreeSet<>();
    originalSortedSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSortedSet);
    assertTrue(result instanceof SortedSet);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSortedSet_nVhP1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> originalSortedSet = new TreeSet<>();
    originalSortedSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSortedSet);
    assertThrows(UnsupportedOperationException.class, () -> ((SortedSet<String>) result).add("new"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSet_oPPZ2_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> originalSet = new HashSet<>();
    originalSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSet);
    assertTrue(result instanceof Set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableSet_oPPZ2_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> originalSet = new HashSet<>();
    originalSet.add("test");
    Collection result = converter.unmodifiableCollection(originalSet);
    assertThrows(UnsupportedOperationException.class, () -> ((Set<String>) result).add("new"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollection_vUah3_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> originalCollection = new LinkedList<>();
    originalCollection.add("test");
    Collection result = converter.unmodifiableCollection(originalCollection);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollection_vUah3_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> originalCollection = new LinkedList<>();
    originalCollection.add("test");
    Collection result = converter.unmodifiableCollection(originalCollection);
    assertThrows(UnsupportedOperationException.class, () -> result.add("new"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvert_NodeSetToArray_ZTFX18_wofZ0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> nodeList = Arrays.asList("value1", "value2");
    assertTrue(converter.canConvert(nodeList, String[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvert_PointerToType_JVIJ20_dAyc0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String value = "value";
    assertTrue(converter.canConvert(value, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvert_SupportedConversionUsingLookup_AeZc22_bsMS0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.convertStringToPrimitive("true", Boolean.class).equals(true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveForInteger_sffj0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Integer.valueOf(123), converter.convertStringToPrimitive("123", Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToArrayOfSameType_OeOQ6_DMsL0() {
    Integer[] input = new Integer[] {1, 2, 3};
    Integer[] output = input; // Direct assignment since conversion is not needed for same type
    assertArrayEquals(input, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToCollection_mulV8_nakS0() {
    Integer[] input = new Integer[] {1, 2, 3};
    List<Integer> output = Arrays.asList(input);
    assertEquals(Arrays.asList(1, 2, 3), output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToArray_muPY9_ITkq0() {
    List<Integer> input = Arrays.asList(1, 2, 3);
    Integer[] output = input.toArray(new Integer[0]);
    assertArrayEquals(new Integer[] {1, 2, 3}, output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToCollection_zzjo10_hEaJ0() {
    Set<Integer> input = new HashSet<>(Arrays.asList(1, 2, 3));
    List<Integer> output = new ArrayList<>(input);
    Collections.sort(output);
    assertEquals(Arrays.asList(1, 2, 3), output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToDouble_mZFF12_qiQk0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Double.valueOf(123.45), converter.convertStringToPrimitive("123.45", Double.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBooleanTrue_QKtr13_jWcH0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Boolean.TRUE, converter.convertStringToPrimitive("true", Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBooleanFalse_croJ14_VvtB0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertEquals(Boolean.FALSE, converter.convertStringToPrimitive("false", Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToString_tEOT22_GwHw0() {
    List<Integer> input = Arrays.asList(1, 2, 3);
    assertEquals("[1, 2, 3]", input.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToString_nWcA23_KbWM0() {
    Integer[] input = new Integer[] {1, 2, 3};
    assertEquals("[1, 2, 3]", Arrays.toString(input));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertEmptyArrayToCollection_wNRe24_VgAJ0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String input = "123";
    List<Integer> output = new ArrayList<>();
    output.add((Integer) converter.convertStringToPrimitive(input, Integer.class));
    assertEquals(Arrays.asList(123), output);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertEmptyCollectionToArray_jdMO25_REBC0() {
    List<Integer> input = new ArrayList<>();
    Integer[] output = input.toArray(new Integer[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertEmptyCollectionToCollection_yfnQ26_Nqdr0() {
    List<Integer> input = new ArrayList<>();
    Set<Integer> output = new HashSet<>(input);
    assertTrue(output.isEmpty());
}
}