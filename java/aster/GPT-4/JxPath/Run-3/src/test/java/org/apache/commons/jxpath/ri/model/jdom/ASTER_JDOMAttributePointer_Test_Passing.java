/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import org.apache.commons.jxpath.ri.QName;
import org.jdom.Attribute;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithNullParent_ReturnsOnlyAttributePath_pcTL1() {
        Attribute attribute = new Attribute("name", "value");
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, attribute);
        String result = jdomAttributePointer.asPath();
        assertEquals("@name", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_ySFG0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    Attribute attr = mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(parent, attr);
    when(parent.asPath()).thenReturn("/example/path");
    when(attr.getName()).thenReturn("attributeName");
    String result = jdomAttributePointer.asPath();
    assertEquals("/example/path/@attributeName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_Xacv0_whvn0() {
    org.w3c.dom.Node node = null; // Assuming 'node' can be null for the sake of this example
    Locale locale = Locale.getDefault();
    QName qName = new QName("namespace", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
    Attribute attribute = new Attribute("name", "value");
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(domNodePointer, attribute);
    Object result = jdomAttributePointer.getBaseValue();
    assertEquals(attribute, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_qttm0() throws Exception {
    DOMNodePointer mockParent = Mockito.mock(DOMNodePointer.class);
    Attribute mockAttribute = Mockito.mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(mockParent, mockAttribute);
    assertTrue(jdomAttributePointer.isLeaf(), "isLeaf should return true for JDOMAttributePointer");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_lacJ0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    Attribute mockAttribute = mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(mockDomNodePointer, mockAttribute);
    assertFalse(jdomAttributePointer.isLeaf(), "isLeaf should always return true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_nDNO0() throws Exception {
    DOMNodePointer mockDomNodePointer = Mockito.mock(DOMNodePointer.class);
    Attribute mockAttribute = Mockito.mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(mockDomNodePointer, mockAttribute);
    boolean isLeaf = jdomAttributePointer.isLeaf();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActual_GVfk0() throws Exception {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    Attribute mockAttribute = mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(mockDomNodePointer, mockAttribute);
    assertTrue(jdomAttributePointer.isLeaf(), "isLeaf should always return true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_qBbR0() throws Exception {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    Attribute attr = mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(domNodePointer, attr);
    String newValue = "new value";
    jdomAttributePointer.setValue(newValue);
    verify(attr).setValue(newValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_FNCS0() {
    DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
    Attribute attr = mock(Attribute.class);
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(domNodePointer, attr);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_LxBB0() throws Exception {
    JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(null, null);
    boolean result = jdomAttributePointer.isLeaf();
}
}