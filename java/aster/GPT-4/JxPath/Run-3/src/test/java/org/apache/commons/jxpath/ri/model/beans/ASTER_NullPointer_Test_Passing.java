/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
private QName qName;
@Mock
    private NodePointer createdPathPointer;
private String id;
private Locale locale;
@Mock
    private QName name;
@Mock
    private QName otherName;
@InjectMocks
    private NullPointer nullPointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathContext context;
@Mock
    private NodePointer parentNodePointer;
@Mock
    private NodePointer valueNodePointer;
@Mock
    private QName childName;
@Mock
    private NodePointer createdChildPointer;
@Mock
    private NodePointer pathPointer;
@Mock
    private DOMNodePointer parentMock;
@Mock
    private NodePointer nodePointerMock;
@Mock
    private NodePointer valuePointerMock;
@Mock
    private JXPathContext contextMock;
private DOMNodePointer domNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        nullPointer = new NullPointer(Locale.getDefault(), "testId");
        when(pathPointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(createdChildPointer);
        when(nullPointer.createPath(context)).thenReturn(pathPointer);
        int index = 0;
        NodePointer result = nullPointer.createChild(context, childName, index);
        verify(pathPointer).createChild(context, childName, index);
        assertEquals(createdChildPointer, result, "The returned NodePointer should be the one created by createChild method.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject() {
        nullPointer = new NullPointer(name, Locale.getDefault());
        assertTrue(nullPointer.equals(nullPointer), "A NullPointer should be equal to itself.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() {
        nullPointer = new NullPointer(name, Locale.getDefault());
        assertFalse(nullPointer.equals(null), "A NullPointer should not be equal to null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() {
        nullPointer = new NullPointer(name, Locale.getDefault());
        Object differentClassObject = new Object();
        assertFalse(nullPointer.equals(differentClassObject), "A NullPointer should not be equal to an object of a different class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameName() {
        nullPointer = new NullPointer(name, Locale.getDefault());
        NullPointer otherNullPointer = new NullPointer(name, Locale.getDefault());
        when(name.equals(any())).thenReturn(true);
        assertTrue(nullPointer.equals(otherNullPointer), "Two NullPointers with the same QName should be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName() {
        nullPointer = new NullPointer(name, Locale.getDefault());
        NullPointer otherNullPointer = new NullPointer(otherName, Locale.getDefault());
        when(name.equals(otherName)).thenReturn(false);
        assertFalse(nullPointer.equals(otherNullPointer), "Two NullPointers with different QNames should not be equal.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_DrJQ0() {
        Locale locale = new Locale("en");
        QName name = new QName("testName");
        NullPointer pointer = new NullPointer(name, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_TVhX1() {
        Locale locale = new Locale("en");
        QName name = new QName("testName");
        NullPointer pointer = new NullPointer(name, locale);
        Object other = new Object();
        assertFalse(pointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullNameInBoth_Qmyw2() {
        Locale locale = new Locale("en");
        NullPointer pointer1 = new NullPointer(locale, "id1");
        NullPointer pointer2 = new NullPointer(locale, "id2");
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameDifferentLocale_zdpO3() {
        QName name = new QName("testName");
        NullPointer pointer1 = new NullPointer(name, new Locale("en"));
        NullPointer pointer2 = new NullPointer(name, new Locale("fr"));
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNameSameLocale_tImh4() {
        Locale locale = new Locale("en");
        QName name1 = new QName("name1");
        QName name2 = new QName("name2");
        NullPointer pointer1 = new NullPointer(name1, locale);
        NullPointer pointer2 = new NullPointer(name2, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullNameInOne_JDPg5() {
        Locale locale = new Locale("en");
        QName name = new QName("testName");
        NullPointer pointer1 = new NullPointer(locale, "id1");
        NullPointer pointer2 = new NullPointer(name, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNonNullParent() throws Exception {
        // Initialize NullPointer with a mock parent and a QName
        QName name = new QName("testName");
        nullPointer = new NullPointer(parent, name);
        // Setup mocks
        when(parent.createPath(context, "testValue")).thenReturn(parentNodePointer);
        when(parentNodePointer.getValuePointer()).thenReturn(valueNodePointer);
        // Execute
        NodePointer result = nullPointer.createPath(context, "testValue");
        // Verify
        verify(parent).createPath(context, "testValue");
        verify(parentNodePointer).getValuePointer();
        assertNotNull(result);
        assertEquals(valueNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullParent() throws Exception {
        // Initialize NullPointer with a mock parent and a QName
        QName name = new QName("testName");
        nullPointer = new NullPointer(parent, name);
        // Setup mocks
        when(parent.createPath(context, "testValue")).thenReturn(parentNodePointer);
        when(parentNodePointer.getValuePointer()).thenReturn(valueNodePointer);
        // Setup NullPointer with null parent
        NullPointer nullPointerWithNullParent = new NullPointer(new Locale("en"), "id");
        // Execute and Verify
        Exception exception = assertThrows(UnsupportedOperationException.class, () -> {
            nullPointerWithNullParent.createPath(context, "testValue");
        });
        // Check exception message
        assertTrue(exception.getMessage().contains("Cannot create the root object"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithNonNullParent_HadU0() {
    QName qName = new QName("testNamespace", "testName");
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    NullPointer nullPointer = new NullPointer(domNodePointer, qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    Object value = new Object();
    NodePointer result = nullPointer.createPath(context, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithNullParentThrowsException_eTCi1() {
    QName qName = new QName("testNamespace", "testName");
    Locale locale = new Locale("en", "US");
    NullPointer nullPointer = new NullPointer(qName, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    Object value = new Object();
    assertThrows(UnsupportedOperationException.class, () -> {
        nullPointer.createPath(context, value);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_sGyr0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(locale, "testId");
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    NodePointer result = nullPointer.createChild(context, name, index);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Since NullPointer's isCollection method does not depend on its constructor parameters,
        // we can instantiate it with any values. Here, we use simple values for demonstration.
        QName name = new QName("testName");
        Locale locale = Locale.getDefault();
        nullPointer = new NullPointer(name, locale);
        // The isCollection method should always return false as per the current implementation.
        assertFalse(nullPointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_oRzn0() {
    Locale locale = new Locale("en", "US");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(name, locale);
    assertFalse(nullPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        // Initialize NullPointer with mocks
        QName name = new QName("testNamespace", "testName");
        nullPointer = new NullPointer(parentMock, name);
        // Setup the parent mock to return a NodePointer when createPath is called
        when(parentMock.createPath(contextMock)).thenReturn(nodePointerMock);
        // Setup the nodePointerMock to return a valuePointer when getValuePointer is called
        when(nodePointerMock.getValuePointer()).thenReturn(valuePointerMock);
        // Execute the method to test
        NodePointer result = nullPointer.createPath(contextMock);
        // Verify the interactions
        verify(parentMock).createPath(contextMock);
        verify(nodePointerMock).getValuePointer();
        // Assert the result
        assertEquals(valuePointerMock, result, "The result should be the valuePointer returned by the nodePointerMock.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithNullParentThrowsException_DcMS1() {
    QName qName = new QName("testName");
    NullPointer nullPointer = new NullPointer(Locale.getDefault(), "testId");
    JXPathContext context = JXPathContext.newContext(new Object());
    assertThrows(UnsupportedOperationException.class, () -> nullPointer.createPath(context));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithName() {
        // Initialize NullPointer with a mocked QName
        nullPointer = new NullPointer(name, null);
        // Arrange
        int expectedHashCode = 42; // Arbitrary number for testing
        when(name.hashCode()).thenReturn(expectedHashCode);
        // Act
        int result = nullPointer.hashCode();
        // Assert
        assertEquals(expectedHashCode, result, "The hash code should match the mocked QName hash code.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonNullName_OjQB0() {
    QName qName = new QName("testNamespace", "testLocalName");
    NullPointer nullPointer = new NullPointer(qName, Locale.getDefault());
    int expectedHashCode = qName.hashCode();
    assertEquals(expectedHashCode, nullPointer.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_NBHC1() {
    NullPointer nullPointer = new NullPointer(Locale.getDefault(), "testId");
    int expectedHashCode = 0;
    assertEquals(expectedHashCode, nullPointer.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        when(name.getName()).thenReturn("expectedName");
        nullPointer = new NullPointer(name, Locale.getDefault());
        QName result = nullPointer.getName();
        assertEquals("expectedName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_tYFV0() {
    QName expectedName = new QName("testName");
    NullPointer nullPointer = new NullPointer(expectedName, Locale.getDefault());
    QName actualName = nullPointer.getName();
    assertEquals(expectedName, actualName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_DcxS0() {
    QName qName = new QName("testNamespace");
    Locale locale = new Locale("en", "US");
    NullPointer nullPointer = new NullPointer(qName, locale);
    PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
    assertTrue(propertyPointer instanceof NullPropertyPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_UIwz0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(locale, "testId");
    JXPathContext context = JXPathContext.newContext(new Object());
    int index = 0;
    Object value = new Object();
    NodePointer result = nullPointer.createChild(context, name, index, value);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullId_rIWH0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "123");
        String result = nullPointer.asPath();
        assertEquals("id(123)", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_yiqI1() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), null);
        String result = nullPointer.asPath();
        assertEquals("null()", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        // Since getLength() does not interact with the parameters, we can use any values here.
        nullPointer = new NullPointer(new Locale("en"), "testId");
        // Act
        int length = nullPointer.getLength();
        // Assert
        assertEquals(0, length, "The length should always be 0 for NullPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsZero_Fzda0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(name, locale);
    int length = nullPointer.getLength();
    assertEquals(0, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        // Initialize NullPointer with a QName and Locale, as these are required by constructors
        QName name = new QName("testName");
        Locale locale = Locale.ENGLISH;
        nullPointer = new NullPointer(name, locale);
        // Call the method under test
        Object result = nullPointer.getBaseValue();
        // Verify the result
        assertNull(result, "The base value should be null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValueReturnsNull_sVDM0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(name, locale);
    Object result = nullPointer.getBaseValue();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        // Since NullPointer does not depend on external interactions for isActual,
        // we can instantiate it directly without mocks.
        nullPointer = new NullPointer(new Locale("en"), "testId");
        // The isActual method of NullPointer should always return false.
        assertFalse(nullPointer.isActual(), "isActual should always return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActualReturnsFalse_PIJK0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(name, locale);
    assertFalse(nullPointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        // Mocking QName and Locale as they are used in constructors
        QName mockedQName = new QName("mockedName");
        Locale mockedLocale = new Locale("en", "US");
        // Initialize NullPointer with mocked dependencies
        nullPointer = new NullPointer(mockedQName, mockedLocale);
        // Act
        boolean result = nullPointer.isLeaf();
        // Assert
        assertTrue(result, "NullPointer should always return true for isLeaf method.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafReturnsTrue_WCiZ0() {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(name, locale);
    assertTrue(nullPointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNonNullParent_1() throws Exception {
        // Initialize NullPointer with a mock parent and a QName
        QName name = new QName("testName");
        nullPointer = new NullPointer(parent, name);
        // Setup mocks
        when(parent.createPath(context, "testValue")).thenReturn(parentNodePointer);
        when(parentNodePointer.getValuePointer()).thenReturn(valueNodePointer);
        // Execute
        NodePointer result = nullPointer.createPath(context, "testValue");
        // Verify
        verify(parent).createPath(context, "testValue");
        verify(parentNodePointer).getValuePointer();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNonNullParent_2() throws Exception {
        // Initialize NullPointer with a mock parent and a QName
        QName name = new QName("testName");
        nullPointer = new NullPointer(parent, name);
        // Setup mocks
        when(parent.createPath(context, "testValue")).thenReturn(parentNodePointer);
        when(parentNodePointer.getValuePointer()).thenReturn(valueNodePointer);
        // Execute
        NodePointer result = nullPointer.createPath(context, "testValue");
        // Verify
        verify(parent).createPath(context, "testValue");
        verify(parentNodePointer).getValuePointer();
        assertEquals(valueNodePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullParent_1() throws Exception {
        // Initialize NullPointer with a mock parent and a QName
        QName name = new QName("testName");
        nullPointer = new NullPointer(parent, name);
        // Setup mocks
        when(parent.createPath(context, "testValue")).thenReturn(parentNodePointer);
        when(parentNodePointer.getValuePointer()).thenReturn(valueNodePointer);
        // Setup NullPointer with null parent
        NullPointer nullPointerWithNullParent = new NullPointer(new Locale("en"), "id");
        // Execute and Verify
        // Check exception message
        Exception exception = assertThrows(UnsupportedOperationException.class, () -> {
            nullPointerWithNullParent.createPath(context, "testValue");
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        qName = new QName("namespace", "localName");
        locale = Locale.getDefault();
        domNodePointer = mock(DOMNodePointer.class);
        nullPointer = new NullPointer(domNodePointer, qName);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assertTrue(propertyPointer instanceof NullPropertyPointer, "The returned object should be an instance of NullPropertyPointer.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithNullIdAndNullParent_ReturnsNullFunction_Rlvo0() throws Exception {
    Locale locale = new Locale("en");
    QName name = new QName("testName");
    DOMNodePointer parent = mock(DOMNodePointer.class);
    NullPointer nullPointer = new NullPointer(parent, name);
    when(parent.asPath()).thenReturn(null);
    String result = nullPointer.asPath();
    assertEquals("null()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WithNullIdAndNonNullParent_ReturnsParentPath_mJfX0() throws Exception {
    Locale locale = new Locale("en");
    QName name = new QName("qualifiedName");
    DOMNodePointer parent = mock(DOMNodePointer.class);
    NullPointer nullPointer = new NullPointer(parent, name);
    String parentPath = "/parent/path";
    when(parent.asPath()).thenReturn(parentPath);
    String result = nullPointer.asPath();
    assertEquals(parentPath, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_A_YxVM0() throws Exception {
    NullPointer nullPointer = new NullPointer(new Locale("en"), "testId");
    NodePointer createdPathPointer = mock(NodePointer.class);
    NodePointer createdChildPointer = mock(NodePointer.class);
    JXPathContext context = mock(JXPathContext.class);
    QName childName = new QName("childName");
    when(createdPathPointer.createChild(any(JXPathContext.class), any(QName.class), anyInt(), any())).thenReturn(createdChildPointer);
    when(nullPointer.createPath(context)).thenReturn(createdPathPointer);
    int index = 0;
    Object value = new Object();
    NodePointer result = nullPointer.createChild(context, childName, index, value);
    verify(createdPathPointer).createChild(context, childName, index, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithNonNullParent_pajI0_ISFR0() {
    QName qName = new QName("testName");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault());
    NullPointer nullPointer = new NullPointer(domNodePointer, qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = nullPointer.createPath(context);
    assertNotNull(result, "Expected non-null result when parent is not null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_WithNullName_Sped0() {
}
}