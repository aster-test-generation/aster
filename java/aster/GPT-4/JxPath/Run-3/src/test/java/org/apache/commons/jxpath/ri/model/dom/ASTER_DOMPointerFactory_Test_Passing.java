/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Passing {
@InjectMocks
    private DOMPointerFactory domPointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private Node mockNode;
@Mock
    private QName mockQName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNodeBean_1() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        verify(mockNode, atLeastOnce()).getNodeType();
        assertNotNull(result, "Resulting NodePointer should not be null when bean is a Node");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNodeBean_2() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        verify(mockNode, atLeastOnce()).getNodeType();
        assertTrue(result instanceof DOMNodePointer, "Resulting NodePointer should be an instance of DOMNodePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonNodeBean() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        Object nonNodeBean = new Object();
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, nonNodeBean);
        // Verification
        assertNull(result, "Resulting NodePointer should be null when bean is not a Node");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNodeBean_kGgI0_1() {
    DOMPointerFactory factory = new DOMPointerFactory();
    Node node = Mockito.mock(Node.class);
    QName name = new QName("test");
    NodePointer parent = Mockito.mock(NodePointer.class);
    NodePointer result = factory.createNodePointer(parent, name, node);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNodeBean_kGgI0_2() {
    DOMPointerFactory factory = new DOMPointerFactory();
    Node node = Mockito.mock(Node.class);
    QName name = new QName("test");
    NodePointer parent = Mockito.mock(NodePointer.class);
    NodePointer result = factory.createNodePointer(parent, name, node);
    assertTrue(result instanceof DOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNodeBean_IqwU1() {
    DOMPointerFactory factory = new DOMPointerFactory();
    QName name = new QName("test");
    NodePointer parent = Mockito.mock(NodePointer.class);
    Object nonNodeBean = new Object();
    NodePointer result = factory.createNodePointer(parent, name, nonNodeBean);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNode_SugS1_BRza0() {
    DOMPointerFactory factory = new DOMPointerFactory();
    Object nonNodeBean = new Object();
    QName name = new QName("testNonNode");
    NodePointer parent = null; // Parent is required but not provided in the original test
    NodePointer result = factory.createNodePointer(parent, name, nonNodeBean);
    assertNull(result, "Expected null NodePointer for non-Node input");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_MejO0_JxSM0() {
    DOMPointerFactory factory = new DOMPointerFactory();
    int expectedOrder = 0; // Assuming default order as 0 since DOM_POINTER_FACTORY_ORDER is not defined
    assertEquals(expectedOrder, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNodeBean() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        assertNotNull(result, "Resulting NodePointer should not be null when bean is a Node");
        assertTrue(result instanceof DOMNodePointer, "Resulting NodePointer should be an instance of DOMNodePointer");
        verify(mockNode, atLeastOnce()).getNodeType();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNodeBean_kGgI0() {
    DOMPointerFactory factory = new DOMPointerFactory();
    Node node = Mockito.mock(Node.class);
    QName name = new QName("test");
    NodePointer parent = Mockito.mock(NodePointer.class);
    NodePointer result = factory.createNodePointer(parent, name, node);
    assertNotNull(result);
    assertTrue(result instanceof DOMNodePointer);
}
}