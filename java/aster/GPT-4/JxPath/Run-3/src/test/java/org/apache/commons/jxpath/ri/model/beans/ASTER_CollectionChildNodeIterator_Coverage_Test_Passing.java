/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CollectionChildNodeIterator_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetElementNodeIterator_RSbn0_REvf0() {
    NodePointer mockElementPointer = mock(NodePointer.class);
    NodeTypeTest test = new NodeTypeTest(1);
    CollectionChildNodeIterator iterator = new CollectionChildNodeIterator(null, test, false, null);
    when(mockElementPointer.childIterator(any(NodeTest.class), eq(false), eq(null))).thenReturn(mock(NodeIterator.class));
    NodeIterator result = iterator.getElementNodeIterator(mockElementPointer);
    verify(mockElementPointer).childIterator(test, false, null);
    assertNotNull(result, "NodeIterator should not be null");
}
}