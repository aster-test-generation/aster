/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Comment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Failing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private DOMNodePointer parentNode;
    private JXPathContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_HLcK0() {
        Node mockNode = mock(Node.class);
        when(mockNode.getNamespaceURI()).thenReturn("http://example.com/namespace");
        Locale locale = Locale.getDefault();
        DOMNodePointer domNodePointer = new DOMNodePointer(mockNode, locale);
        String namespaceURI = domNodePointer.getNamespaceURI();
        assertEquals("http://example.com/namespace", namespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndTextIsNotNull_ISde1() {
        Comment commentNode = mock(Comment.class);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node).thenReturn(commentNode);
        when(commentNode.getData()).thenReturn(" Some text ");
        Object result = domNodePointer.getValue();
        assertEquals("Some text", result, "Trimmed text should be returned");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndTextIsNull_FOPa2() {
        Comment commentNode = mock(Comment.class);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node).thenReturn(commentNode);
        when(commentNode.getData()).thenReturn(null);
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Empty string should be returned when comment text is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsNotCommentNode_LZqi3() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.toString()).thenReturn("ElementNode");
        Object result = domNodePointer.getValue();
        assertEquals("ElementNode", result, "String value of node should be returned");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndTextIsEmpty_FQLC4() {
        Comment commentNode = mock(Comment.class);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node).thenReturn(commentNode);
        when(commentNode.getData()).thenReturn("");
        Object result = domNodePointer.getValue();
        assertEquals("", result, "Empty string should be returned when comment text is empty");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithExistingAttribute_mEpq3() {
        Node node = mock(Element.class);
        QName name = new QName(null, "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        JXPathContext context = mock(JXPathContext.class);
        when(((Element) node).hasAttribute("localName")).thenReturn(true);
        domNodePointer.createAttribute(context, name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNullNode_LRUm4() {
        Node node = mock(Node.class); // Not an instance of Element
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        JXPathContext context = mock(JXPathContext.class);
        try {
            domNodePointer.createAttribute(context, name);
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNamespaceResolverNull_nwji5() {
        Node node = mock(Element.class);
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(domNodePointer.getNamespaceResolver()).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        try {
            domNodePointer.createAttribute(context, name);
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNamespaceResolverNotNull_YpIR6() {
        Node node = mock(Element.class);
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NamespaceResolver nsResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
        when(nsResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
        JXPathContext context = mock(JXPathContext.class);
        domNodePointer.createAttribute(context, name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNullNamespaceURI_IJRG8() {
        Node node = mock(Element.class);
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NamespaceResolver nsResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
        when(nsResolver.getNamespaceURI("prefix")).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        try {
            domNodePointer.createAttribute(context, name);
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithIterator_dXBP9() {
        Node node = mock(Element.class);
        QName name = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        NamespaceResolver nsResolver = mock(NamespaceResolver.class);
        when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
        when(nsResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
        JXPathContext context = mock(JXPathContext.class);
        NodeIterator it = mock(NodeIterator.class);
        when(domNodePointer.attributeIterator(name)).thenReturn(it);
        when(it.getNodePointer()).thenReturn(mock(NodePointer.class));
        domNodePointer.createAttribute(context, name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValue_UWeC0() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(domNodePointer.createChild(context, name, index)).thenReturn(mockNodePointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(domNodePointer).createChild(context, name, index);
        verify(mockNodePointer).setValue(value);
        assertEquals(mockNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValueWithNullValue_gZiB1() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(domNodePointer.createChild(context, name, index)).thenReturn(mockNodePointer);
        NodePointer result = domNodePointer.createChild(context, name, index, value);
        verify(domNodePointer).createChild(context, name, index);
        verify(mockNodePointer).setValue(value);
        assertEquals(mockNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithWildcardAndNullPrefix_ReturnsTrue_sQDT3() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("test");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(testName.getPrefix()).thenReturn(null);
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithWildcard_ReturnsTrue_KiTJ4() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("test");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(testName.getName()).thenReturn("testName");
        when(DOMNodePointer.getLocalName(node)).thenReturn("testName");
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithMatchingLocalName_ReturnsTrue_iLCH5() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("test");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(testName.getName()).thenReturn("testName");
        when(DOMNodePointer.getLocalName(node)).thenReturn("testName");
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeNameTestWithNamespaceURI_ReturnsTrue_WrDn6() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("test");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespaceURI");
        when(DOMNodePointer.getNamespaceURI(node)).thenReturn("namespaceURI");
        assertTrue(DOMNodePointer.testNode(node, nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTestWithMatchingTarget_ReturnsTrue_ilby10() {
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(piTest.getTarget()).thenReturn("target");
        when(piNode.getTarget()).thenReturn("target");
        when(node).thenReturn(piNode);
        assertTrue(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_ProcessingInstructionTestWithNonMatchingTarget_ReturnsFalse_GwcM11() {
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(piTest.getTarget()).thenReturn("target");
        when(piNode.getTarget()).thenReturn("differentTarget");
        when(node).thenReturn(piNode);
        assertFalse(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParentInstanceofDOMNodePointer_JkZY3() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        String result = domNodePointer.asPath();
        assertTrue(result.contains("/parent/path/element"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBufferLengthZero_uUbq4() {
        when(parentNode.asPath()).thenReturn("");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        String result = domNodePointer.asPath();
        assertTrue(result.startsWith("/element"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBufferLastCharNotSlash_TkaH5() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        String result = domNodePointer.asPath();
        assertTrue(result.endsWith("/element"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullNamespaceURI_gTSe7() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(domNodePointer.getNamespaceURI()).thenReturn(null);
        String result = domNodePointer.asPath();
        assertTrue(result.contains("[1]")); // Assuming getRelativePositionByQName() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullNamespaceAndPrefix_zUBB8() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(domNodePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver().getPrefix("http://example.com")).thenReturn("ex");
        String result = domNodePointer.asPath();
        assertTrue(result.contains("ex:element[1]")); // Assuming getRelativePositionByQName() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullNamespaceAndNullPrefix_UBZT9() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("element");
        when(domNodePointer.getNamespaceURI()).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver().getPrefix("http://example.com")).thenReturn(null);
        String result = domNodePointer.asPath();
        assertTrue(result.contains("node()[1]")); // Assuming getRelativePositionOfElement() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathProcessingInstructionNode_ijRj12() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        String result = domNodePointer.asPath();
        assertTrue(result.contains("/processing-instruction('target')[1]")); // Assuming getRelativePositionOfPI() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_WHOLE_COLLECTION_xTzY0_tSXo0() {
    JXPathContext context = mock(JXPathContext.class);
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    QName name = new QName("test");
    try {
        domNodePointer.createChild(context, name, 0); // Assuming 0 or some other parameter is correct
    } catch (JXPathAbstractFactoryException e) {
    }
    verify(context, atLeastOnce()).getNamespaceURI(anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithoutPrefix_zcAy2_bkgv0() {
    Node node = mock(Element.class);
    QName name = new QName(null, "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    JXPathContext context = mock(JXPathContext.class);
    when(((Element) node).hasAttribute("localName")).thenReturn(false);
    doNothing().when((Element) node).setAttribute(anyString(), anyString());
    domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithNamespaceURI_oLjw7_jmyf0() {
    Node node = mock(Element.class);
    QName name = new QName("prefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver nsResolver = mock(NamespaceResolver.class);
    when(nsResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
    domNodePointer.setNamespaceResolver(nsResolver);
    JXPathContext context = mock(JXPathContext.class);
    doNothing().when((Element) node).setAttributeNS(anyString(), anyString(), anyString());
    domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithKnownPrefix_oIbX1_MCZQ0() {
    Node node = mock(Element.class);
    QName name = new QName("knownPrefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver nsResolver = mock(NamespaceResolver.class);
    when(nsResolver.getNamespaceURI("knownPrefix")).thenReturn("http://example.com");
    domNodePointer.setNamespaceResolver(nsResolver);
    JXPathContext context = mock(JXPathContext.class);
    doNothing().when((Element) node).setAttributeNS(anyString(), anyString(), anyString());
    domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_withNullNode_HMIl9_kepb0() {
    try {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.getNamespaceURI(null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPrefixIsEmpty_DMNi1() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
        assertNull("Expected default namespace URI", pointer.getNamespaceURI(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPrefixIsXml_LFiY2() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
        assertEquals("Expected XML namespace URI", DOMNodePointer.XML_NAMESPACE_URI, pointer.getNamespaceURI("xml"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIPrefixIsXmlns_MJtb3() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
        assertEquals("Expected XMLNS namespace URI", DOMNodePointer.XMLNS_NAMESPACE_URI, pointer.getNamespaceURI("xmlns"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURINamespacesNull_NVNt4() {
        DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
        assertNull("Expected unknown namespace", pointer.getNamespaceURI("nonExistingPrefix"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithNamespaceURI_oLjw7_jmyf0_fid1() {
    Node node = mock(Element.class);
    QName name = new QName("prefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver nsResolver = mock(NamespaceResolver.class);
    when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
    when(nsResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
    JXPathContext context = mock(JXPathContext.class);
    doNothing().when((Element) node).setAttributeNS(anyString(), anyString(), anyString());
    domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithKnownPrefix_oIbX1_MCZQ0_fid1() {
    Node node = mock(Element.class);
    QName name = new QName("knownPrefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    NamespaceResolver nsResolver = mock(NamespaceResolver.class);
    when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
    when(nsResolver.getNamespaceURI("knownPrefix")).thenReturn("http://example.com");
    JXPathContext context = mock(JXPathContext.class);
    doNothing().when((Element) node).setAttributeNS(anyString(), anyString(), anyString());
    domNodePointer.createAttribute(context, name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURIPrefixIsNull_nqVK0_vvdA0() {
    DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
    NamespaceResolver resolver = pointer.getNamespaceResolver();
    assertNull("Expected default namespace URI", resolver.getNamespaceURI(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURINamespaceNotFoundInMap_YkhQ6_YSoz0() {
    DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
    NamespaceResolver resolver = pointer.getNamespaceResolver();
    assertNull("Expected unknown namespace", resolver.getNamespaceURI("nonExistingPrefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURINamespaceFoundInMap_TxLk5_ynuo0() {
    DOMNodePointer pointer = new DOMNodePointer(null, Locale.getDefault());
    pointer.getNamespaceResolver().registerNamespace("existingPrefix", "http://example.com");
    assertEquals("Expected namespace from map", "http://example.com", pointer.getNamespaceResolver().getNamespaceURI("existingPrefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValueWithException_KJGV2() {
        Node node = mock(Node.class);
        Locale locale = Locale.getDefault();
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(domNodePointer.createChild(context, name, index)).thenReturn(mockNodePointer);
        doThrow(new RuntimeException("Error setting value")).when(mockNodePointer).setValue(value);
        try {
            domNodePointer.createChild(context, name, index, value);
            fail("Expected an exception to be thrown");
        } catch (RuntimeException e) {
            assertEquals("Error setting value", e.getMessage());
        }
        verify(domNodePointer).createChild(context, name, index);
        verify(mockNodePointer).setValue(value);
    }
}