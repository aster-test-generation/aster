/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletContextHandler_Test_Passing {
private final HashMap<String, Object> attributes = new HashMap<>();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetProperty_aJnj0_eLkb0() {
    ServletContextHandler handler = new ServletContextHandler();
    ServletContext context = org.mockito.Mockito.mock(ServletContext.class);
    String property = "testProperty";
    String expectedValue = "testValue";
    org.mockito.Mockito.when(context.getAttribute(property)).thenReturn(expectedValue);
    Object result = handler.getProperty(context, property);
    assertEquals(expectedValue, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithServletContext_RomX0_LMmK0_1() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext servletContext = org.mockito.Mockito.mock(ServletContext.class);
        Enumeration<String> attributeNames = org.mockito.Mockito.mock(Enumeration.class);
        org.mockito.Mockito.when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        org.mockito.Mockito.when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        org.mockito.Mockito.when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        handler.collectPropertyNames(set, servletContext);
        assertTrue(set.contains("attr1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithServletContext_RomX0_LMmK0_2() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext servletContext = org.mockito.Mockito.mock(ServletContext.class);
        Enumeration<String> attributeNames = org.mockito.Mockito.mock(Enumeration.class);
        org.mockito.Mockito.when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        org.mockito.Mockito.when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        org.mockito.Mockito.when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        handler.collectPropertyNames(set, servletContext);
        assertTrue(set.contains("attr2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithServletContext_RomX0_LMmK0_3() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext servletContext = org.mockito.Mockito.mock(ServletContext.class);
        Enumeration<String> attributeNames = org.mockito.Mockito.mock(Enumeration.class);
        org.mockito.Mockito.when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        org.mockito.Mockito.when(attributeNames.hasMoreElements()).thenReturn(true, true, false);
        org.mockito.Mockito.when(attributeNames.nextElement()).thenReturn("attr1", "attr2");
        handler.collectPropertyNames(set, servletContext);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNamesWithEmptyAttributes_skWr2_zCNv0() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        ServletContext servletContext = org.mockito.Mockito.mock(ServletContext.class);
        Enumeration<String> attributeNames = org.mockito.Mockito.mock(Enumeration.class);
        org.mockito.Mockito.when(servletContext.getAttributeNames()).thenReturn(attributeNames);
        org.mockito.Mockito.when(attributeNames.hasMoreElements()).thenReturn(false);
        handler.collectPropertyNames(set, servletContext);
        assertTrue(set.isEmpty());
    }
}