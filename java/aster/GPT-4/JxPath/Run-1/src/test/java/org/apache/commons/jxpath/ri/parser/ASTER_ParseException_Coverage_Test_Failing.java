/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesFullRange_XMQK15() {
        ParseException pe = new ParseException();
        StringBuilder input = new StringBuilder();
        StringBuilder expected = new StringBuilder();
        for (char ch = 0; ch < 128; ch++) {
            input.append(ch);
            if (ch < 0x20 || ch > 0x7e) {
                String s = "0000" + Integer.toString(ch, 16);
                expected.append("\\u" + s.substring(s.length() - 4, s.length()));
            } else {
                switch (ch) {
                    case '\b':
                        expected.append("\\b");
                        break;
                    case '\t':
                        expected.append("\\t");
                        break;
                    case '\n':
                        expected.append("\\n");
                        break;
                    case '\f':
                        expected.append("\\f");
                        break;
                    case '\r':
                        expected.append("\\r");
                        break;
                    case '\"':
                        expected.append("\\\"");
                        break;
                    case '\'':
                        expected.append("\\\'");
                        break;
                    case '\\':
                        expected.append("\\\\");
                        break;
                    default:
                        expected.append(ch);
                        break;
                }
            }
        }
        String result = pe.add_escapes(input.toString());
        assertEquals(expected.toString(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesStringWithAllControlCharacters_wgRx21() {
        ParseException pe = new ParseException();
        StringBuilder input = new StringBuilder();
        for (char ch = 0; ch < 0x20; ch++) {
            input.append(ch);
        }
        String result = pe.add_escapes(input.toString());
        assertEquals("\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f", result);
    }
}