/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMPointerFactory_Test_Failing {
@InjectMocks
    private DOMPointerFactory domPointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private Node mockNode;
@Mock
    private QName mockQName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNode_1() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode instanceof Node).thenReturn(true);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNode_2() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode instanceof Node).thenReturn(true);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        assertTrue(result instanceof DOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNode_3() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode instanceof Node).thenReturn(true);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        assertEquals(mockNode, ((DOMNodePointer) result).getImmediateNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNode() throws Exception {
        // Initialization is handled by Mockito annotations
        // Setup
        when(mockNode instanceof Node).thenReturn(true);
        // Execution
        NodePointer result = domPointerFactory.createNodePointer(mockParentNodePointer, mockQName, mockNode);
        // Verification
        assertNotNull(result);
        assertTrue(result instanceof DOMNodePointer);
        assertEquals(mockNode, ((DOMNodePointer) result).getImmediateNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_uNRP0_PNBy0_fid2() {
    DOMPointerFactory factory = new DOMPointerFactory();
    int expected = 0; // Assuming default order as 0 since DOM_POINTER_FACTORY_ORDER is not defined
    assertEquals(expected, factory.getOrder());
}
}