/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Failing {
    public void testToStringWithEmptyPredicatesAndSteps_sZlI0_0() {
        Constant constant = new Constant("'Test'");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        assertEquals("'Test'", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyPredicatesAndSteps_sZlI0() {
        Constant constant = new Constant("Test");
        ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
        assertEquals("Test", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSinglePredicate_SyLf1_fid1() {
        Constant constant = new Constant("Test");
        Expression[] predicates = {new Constant(1)};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        assertEquals("Test[1]", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultiplePredicates_clfk2_fid1() {
        Constant constant = new Constant("Test");
        Expression[] predicates = {new Constant(1), new Constant(2)};
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, null);
        assertEquals("Test[1][2]", expressionPath.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNestedExpressions_XQZc7_jaju0_fid3() {
    Constant constant = new Constant("Nested");
    ExpressionPath expressionPath = new ExpressionPath(constant, null, null);
    assertEquals("(Nested)", expressionPath.toString());
}
}