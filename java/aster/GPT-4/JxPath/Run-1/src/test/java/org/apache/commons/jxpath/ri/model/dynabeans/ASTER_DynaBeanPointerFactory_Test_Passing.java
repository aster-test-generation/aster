/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointerFactory_Test_Passing {
@InjectMocks
    private DynaBeanPointerFactory dynaBeanPointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private DynaBean mockDynaBean;
@Mock
    private DynaBeanPointer mockDynaBeanPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonDynaBean() throws Exception {
        // Setup is handled by Mockito annotations
        // Arrange
        Object nonDynaBean = new Object();
        // Act
        NodePointer result = dynaBeanPointerFactory.createNodePointer(mockParentNodePointer, mockQName, nonDynaBean);
        // Assert
        assertNull(result);
    }
}