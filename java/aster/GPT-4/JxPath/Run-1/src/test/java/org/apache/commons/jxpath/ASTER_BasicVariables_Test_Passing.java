/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicVariables_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVariableNonExistingKey_qjHB1() {
    BasicVariables basicVariables = new BasicVariables();
    assertThrows(IllegalArgumentException.class, () -> {
        basicVariables.getVariable("nonExistingKey");
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeclaredVariable_ExistingKey_gsQS0_kmhK0() {
    BasicVariables basicVariables = new BasicVariables();
    basicVariables.declareVariable("testKey", "testValue");
    assertTrue(basicVariables.isDeclaredVariable("testKey"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeclareVariable_YHtb0_MJbg0() {
    BasicVariables basicVariables = new BasicVariables();
    basicVariables.declareVariable("testKey", "testValue");
    assertEquals("testValue", basicVariables.getVariable("testKey"));
}
}