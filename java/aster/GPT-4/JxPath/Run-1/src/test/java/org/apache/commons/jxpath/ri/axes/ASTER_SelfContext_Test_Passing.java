/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Passing {
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodePointer nodePointer;
@Mock
    private NodeTest nodeTest;
@InjectMocks
    private SelfContext selfContext;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private NodeTypeTest mockNodeTypeTest;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodeTypeTest nodeTypeTest;
    private boolean startedSet = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_NotFirstPosition_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertFalse(selfContext.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FirstPosition_NodePointerNull_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FirstPosition_NodePointerNotNull_NodeTestNotNull_NodeTestFails_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(false);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionReturnsFalseWhenPositionIsNotOne_mDLu0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        assertFalse(selfContext.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FirstPosition_NodePointerNotNull_NodeTestNull_ReturnsTrue_fid2() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertFalse(selfContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FirstPosition_NodePointerNotNull_NodeTestNotNull_NodeTestPasses_ReturnsTrue_fid2() throws Exception {
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertFalse(selfContext.setPosition(1));
    }
}