/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanAttributeIterator_Test_Passing {
@Mock
    private BeanPointer beanPointerMock;
@Mock
    private QName qNameMock;
@InjectMocks
    private BeanAttributeIterator beanAttributeIterator;
@Mock
    private BeanPointer parent;
@Mock
    private QName name;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        // Mock setup if necessary, currently not needed as BeanAttributeIterator does not interact with mocks in getPosition
        // Since position is initialized to 0 and there are no setters, it should return 0
        int expectedPosition = 0;
        int actualPosition = beanAttributeIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPosition_YnNh0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass());
    BeanPointer parent = new BeanPointer(qName, bean, beanInfo, Locale.getDefault());
    BeanAttributeIterator iterator = new BeanAttributeIterator(parent, qName);
    int expectedPosition = 0; // Assuming default position is 0 for new iterator
    assertEquals(expectedPosition, iterator.getPosition());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_IncludeXmlLangFalse_PositionOne_jckF0() throws Exception {
    BeanPointer parent = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    QName name = new QName("attributeName");
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, name);
    boolean includeXmlLang = false;
    assertTrue(beanAttributeIterator.setPosition(1), "setPosition should return true when includeXmlLang is false and position is 1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_IncludeXmlLangFalse_PositionTwo_qOiR0() throws Exception {
    BeanPointer parent = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    QName name = new QName("attributeName");
    BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(parent, name);
    boolean includeXmlLang = false;
    assertTrue(beanAttributeIterator.setPosition(2), "setPosition should return true when includeXmlLang is false and position is 2");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionTrueWhenIncludeXmlLangAndPositionOne_xmgv0_dirX0() {
    QName qName = new QName("test");
    BeanPointer parent = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    BeanAttributeIterator iterator = new BeanAttributeIterator(parent, qName);
    assertTrue(iterator.setPosition(1));
}
}