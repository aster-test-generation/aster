/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyDescriptorsWithNullClass_YGtW13() {
        try {
            new JXPathBasicBeanInfo(null);
            fail("Should throw NullPointerException");
        } catch (NullPointerException expected) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyDescriptorsWithNullClassAndDynamicHandler_swgZ15() {
        try {
            new JXPathBasicBeanInfo(null, null);
            fail("Should throw NullPointerException");
        } catch (NullPointerException expected) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyDescriptorsWithNullClassAndAtomic_Mtoo16() {
        try {
            new JXPathBasicBeanInfo(null, true);
            fail("Should throw NullPointerException");
        } catch (NullPointerException expected) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamic_yqxB1() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAtomic_ocat2() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, false);
        String result = beanInfo.toString();
        assertTrue(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamicAndAtomic_SFfE11() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
        String result = beanInfo.toString();
        assertTrue(result.contains(", dynamic") && result.contains(", atomic"));
    }
}