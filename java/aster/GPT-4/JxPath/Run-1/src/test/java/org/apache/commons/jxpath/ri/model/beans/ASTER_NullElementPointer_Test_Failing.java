/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Failing {
private NullElementPointer nullElementPointer;
private DOMNodePointer mockParentPointer;
private int index;
DOMNodePointer mockDOMNodePointer;
QName mockQName;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathContext context;
@InjectMocks
private final Object value = new Object();
DOMNodePointer domNodePointer;
@Mock
    private Locale mockLocale;
@Mock
    private NodePointer mockImmediateParentPointer;
private static final int WHOLE_COLLECTION = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer_2() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        mockQName = mock(QName.class);
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        when(mockDOMNodePointer.getName()).thenReturn(mockQName);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        int parentHashCode = 12345;
        when(mockParentPointer.hashCode()).thenReturn(parentHashCode);
        int expectedHashCode = parentHashCode + index;
        int actualHashCode = nullElementPointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() throws Exception {
        when(mockParentPointer.getImmediateParentPointer()).thenReturn(mockImmediateParentPointer);
        when(mockImmediateParentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        when(mockParentPointer.asPath()).thenReturn("/parentPath");
        when(mockParentPointer.getIndex()).thenReturn(WHOLE_COLLECTION);
        String expectedPath = "/parentPath[3]";
        String actualPath = nullElementPointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithVariablePointerParentAndIndex_AoKH4() {
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, 2);
        String result = nullElementPointer.asPath();
        assertEquals("/.[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithVariablePointerParentAndWholeCollectionIndex_BFaB5() {
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, -1);
        String result = nullElementPointer.asPath();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariablesParentAndIndex_Tqqu6() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(keywordVariables, qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, 3);
        String result = nullElementPointer.asPath();
        assertEquals("/.[4]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariablesParentAndWholeCollectionIndex_MFjX7() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(keywordVariables, qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, -1);
        String result = nullElementPointer.asPath();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        mockQName = mock(QName.class);
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        when(mockDOMNodePointer.getName()).thenReturn(mockQName);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result);
        assertNotNull(result.getName());
    }
}