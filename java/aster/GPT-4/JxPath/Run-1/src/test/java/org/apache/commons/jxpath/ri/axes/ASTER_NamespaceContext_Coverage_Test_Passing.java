/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespaceContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetCallsSuperReset_evsZ2() {
        SelfContext selfContext = mock(SelfContext.class);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = spy(new NamespaceContext(selfContext, nodeTypeTest));
        namespaceContext.reset();
        verify(namespaceContext, times(1)).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetCompletesWithoutException_gSgr3() {
        SelfContext selfContext = mock(SelfContext.class);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        try {
            namespaceContext.reset();
        } catch (Exception e) {
            fail("Reset method should not throw any exception");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnFalse_Initial_qkbc0() {
        NamespaceContext context = new NamespaceContext(null, null);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetPositionCalled_AWRR1() {
        NamespaceContext context = spy(new NamespaceContext(null, new NodeTypeTest(1)));
        context.nextNode();
        verify(context).setPosition(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTestNotInstanceOfNodeNameTest_uXsY3() {
        NamespaceContext context = new NamespaceContext(null, new NodeTypeTest(1));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTestWithPrefix_kTDD4() {
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName qName = new QName("prefix", "localName");
        when(nodeNameTest.getNodeName()).thenReturn(qName);
        NamespaceContext context = new NamespaceContext(null, nodeNameTest);
        assertFalse(context.nextNode());
    }
}