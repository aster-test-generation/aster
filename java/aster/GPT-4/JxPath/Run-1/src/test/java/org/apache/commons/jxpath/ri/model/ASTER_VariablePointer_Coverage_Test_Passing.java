/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointer_Coverage_Test_Passing {
    private NodePointer clonedNodePointer;
    private VariablePointer variablePointer;
    private QName qName;


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WithValueNotCollection_kCjh1() {
        QName qName = new QName("test");
        VariablePointer variablePointer = new VariablePointer(qName);
        Object nonCollectionValue = mock(Object.class);
        when(variablePointer.getBaseValue()).thenReturn(nonCollectionValue);
        when(ValueUtils.isCollection(nonCollectionValue)).thenReturn(false);
        boolean result = variablePointer.isCollection();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithIndexNotWholeCollection_EfOC2() {
        QName qName = new QName("testVariable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, qName);
        variablePointer.setIndex(1); // Assuming setIndex method exists and WHOLE_COLLECTION is not 1
        variablePointer.setValue("newValue");
        verify(variables, never()).declareVariable(anyString(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueInCollection_bGRL4() {
        QName qName = new QName("testVariable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, qName);
        variablePointer.setIndex(1); // Assuming setIndex method exists and WHOLE_COLLECTION is not 1
        List<Object> collection = new ArrayList<>();
        collection.add("oldValue");
        when(variablePointer.getBaseValue()).thenReturn(collection);
        variablePointer.setValue("newValue");
        assertEquals("newValue", collection.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollection_JSnE5() {
        QName qName = new QName("testVariable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, qName);
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
        variablePointer.setValue("newValue");
        verify(variables).declareVariable("testVariable", "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollectionAndNullValue_HQEf6() {
        QName qName = new QName("testVariable");
        KeywordVariables variables = mock(KeywordVariables.class);
        VariablePointer variablePointer = new VariablePointer(variables, qName);
        variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
        variablePointer.setValue(null);
        verify(variables).declareVariable("testVariable", null);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameVariablesAndName_UlPv0() {
        QName qName1 = new QName("prefix", "localName");
        KeywordVariables variables1 = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(variables1, qName1);
        VariablePointer vp2 = new VariablePointer(variables1, qName1);
        assertTrue(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentVariablesSameName_LERO1() {
        QName qName1 = new QName("prefix", "localName");
        KeywordVariables variables1 = new KeywordVariables("keyword1", new Object());
        KeywordVariables variables2 = new KeywordVariables("keyword2", new Object());
        VariablePointer vp1 = new VariablePointer(variables1, qName1);
        VariablePointer vp2 = new VariablePointer(variables2, qName1);
        assertFalse(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenActualIsTrue_pixT0() {
        QName name = new QName("test");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        doNothing().when(variablePointer).setValue(value);
        NodePointer result = variablePointer.createPath(context, value);
        verify(variablePointer).setValue(value);
        assertSame(variablePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWhenActualIsFalse_Pvxk1() {
        QName name = new QName("test");
        VariablePointer variablePointer = new VariablePointer(name);
        JXPathContext context = mock(JXPathContext.class);
        Object value = new Object();
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(variablePointer.createPath(context)).thenReturn(mockNodePointer);
        doNothing().when(mockNodePointer).setValue(value);
        NodePointer result = variablePointer.createPath(context, value);
        verify(variablePointer).createPath(context);
        verify(mockNodePointer).setValue(value);
        assertSame(mockNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsDeclareVariable_ZJqB1() {
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        variablePointer.createPath(context);
        verify(factory).declareVariable(context, name.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsGetAbstractFactory_ImwD2() {
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        variablePointer.createPath(context);
        verify(variablePointer).getAbstractFactory(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathCallsFindVariablesWhenVariableDeclared_IMtJ3() {
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testVariable");
        VariablePointer variablePointer = new VariablePointer(name);
        AbstractFactory factory = mock(AbstractFactory.class);
        when(factory.declareVariable(context, name.toString())).thenReturn(true);
        when(variablePointer.getAbstractFactory(context)).thenReturn(factory);
        variablePointer.createPath(context);
        verify(variablePointer).findVariables(context);
    }
@BeforeEach
    @Test
    public void testIsActual_Ykzy0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertTrue(variablePointer.isActual());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_HSHf0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        assert variablePointer.isActual() == true;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithCollection_CzEw3_xUTi0() {
    QName qName = new QName("testVariable");
    KeywordVariables variables = mock(KeywordVariables.class);
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    variablePointer.setIndex(1); // Assuming setIndex method exists and WHOLE_COLLECTION is not 1
    List collection = mock(List.class);
    when(variablePointer.getBaseValue()).thenReturn(collection);
    variablePointer.setValue("newValue");
    verify(collection, times(1)).set(1, "newValue");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithWholeCollectionAndComplexObject_ebkC7_SJOK0() {
    QName qName = new QName("testVariable");
    KeywordVariables variables = mock(KeywordVariables.class);
    VariablePointer variablePointer = new VariablePointer(variables, qName);
    variablePointer.setIndex(VariablePointer.WHOLE_COLLECTION);
    Object complexObject = new Object(); // Assuming ComplexObject is replaced by Object for simplicity
    variablePointer.setValue(complexObject);
    verify(variables).declareVariable("testVariable", complexObject);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_aSyb0_dIbP0() throws Exception {
    QName qName = new QName("testName");
    VariablePointer variablePointer = new VariablePointer(qName);
    when(variablePointer.isActual()).thenReturn(true);
}
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_HIUG0() {
        qName = new QName("prefix", "localName");
        variablePointer = new VariablePointer(qName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_hsDb0() {
        QName qName = mock(QName.class);
        NodeTest nodeTest = mock(NodeTest.class);
        NodePointer startWith = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        NodeIterator expectedIterator = mock(NodeIterator.class);
        VariablePointer variablePointer = new VariablePointer(qName);
        when(valuePointer.childIterator(nodeTest, true, startWith)).thenReturn(expectedIterator);
        when(variablePointer.getValuePointer()).thenReturn(valuePointer);
        NodeIterator resultIterator = variablePointer.childIterator(nodeTest, true, startWith);
    }

}