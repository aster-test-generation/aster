/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Passing {
@Mock
    private DOMNodePointer parentNode;
@Mock
    private QName qName;
@InjectMocks
    private DOMAttributeIterator domAttributeIterator;
private List<Node> attributes;
@Mock
    private NodePointer parent;
@Mock
    private Attr attr;
    private int position = 0;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        // Initialize DOMAttributeIterator with a mocked DOMNodePointer and QName
        domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
        // Since position is initialized to 0 and there are no methods to change it in the provided code,
        // we expect getPosition to return 0.
        int expectedPosition = 0;
        int actualPosition = domAttributeIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AtPositionZero_ReturnsNull() {
        // Setup the mocks and the object under test
        domAttributeIterator = new DOMAttributeIterator(parent, new QName("test"));
        when(attributes.get(anyInt())).thenReturn(attr);
        // Setup the initial position to simulate the condition where position is 0
        // and setPosition(1) returns false
        assertNull(domAttributeIterator.getNodePointer(), "Expected getNodePointer to return null when position is 0 and setPosition(1) is false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AtValidPosition_ReturnsNodePointer() {
        // Setup the mocks and the object under test
        domAttributeIterator = new DOMAttributeIterator(parent, new QName("test"));
        when(attributes.get(anyInt())).thenReturn(attr);
        // Arrange
        when(attributes.size()).thenReturn(1); // Ensure there is at least one attribute
        domAttributeIterator.setPosition(1); // Set a valid position
        // Act
        NodePointer result = domAttributeIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected getNodePointer to return a non-null NodePointer");
        assertTrue(result instanceof DOMAttributePointer, "Expected result to be an instance of DOMAttributePointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AtValidPosition_ReturnsNodePointer_1() {
        // Setup the mocks and the object under test
        domAttributeIterator = new DOMAttributeIterator(parent, new QName("test"));
        when(attributes.get(anyInt())).thenReturn(attr);
        // Arrange
        when(attributes.size()).thenReturn(1); // Ensure there is at least one attribute
        domAttributeIterator.setPosition(1); // Set a valid position
        // Act
        NodePointer result = domAttributeIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected getNodePointer to return a non-null NodePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_AtValidPosition_ReturnsNodePointer_2() {
        // Setup the mocks and the object under test
        domAttributeIterator = new DOMAttributeIterator(parent, new QName("test"));
        when(attributes.get(anyInt())).thenReturn(attr);
        // Arrange
        when(attributes.size()).thenReturn(1); // Ensure there is at least one attribute
        domAttributeIterator.setPosition(1); // Set a valid position
        // Act
        NodePointer result = domAttributeIterator.getNodePointer();
        // Assert
        assertTrue(result instanceof DOMAttributePointer, "Expected result to be an instance of DOMAttributePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ValidPosition_ERfQ0_1() {
    Node node = mock(Node.class);
    QName qName = new QName("testPrefix", "testLocalName");
    DOMNodePointer parentNode = new DOMNodePointer(node, null);
    ArrayList<Node> attributes = new ArrayList<>();
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
    assertTrue(domAttributeIterator.setPosition(1), "Position should be set successfully within range.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ValidPosition_ERfQ0_2() {
    Node node = mock(Node.class);
    QName qName = new QName("testPrefix", "testLocalName");
    DOMNodePointer parentNode = new DOMNodePointer(node, null);
    ArrayList<Node> attributes = new ArrayList<>();
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
    assertTrue(domAttributeIterator.setPosition(2), "Position should be set successfully within range.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ValidPosition_ERfQ0_3() {
    Node node = mock(Node.class);
    QName qName = new QName("testPrefix", "testLocalName");
    DOMNodePointer parentNode = new DOMNodePointer(node, null);
    ArrayList<Node> attributes = new ArrayList<>();
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
    assertTrue(domAttributeIterator.setPosition(3), "Position should be set successfully within range.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_InvalidPosition_IfMm0_1() {
    Node node = mock(Node.class);
    QName qName = new QName("testPrefix", "testLocalName");
    DOMNodePointer parentNode = new DOMNodePointer(node, null);
    ArrayList<Node> attributes = new ArrayList<>();
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
    assertFalse(domAttributeIterator.setPosition(0), "Position 0 should be out of range and return false.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_InvalidPosition_IfMm0_2() {
    Node node = mock(Node.class);
    QName qName = new QName("testPrefix", "testLocalName");
    DOMNodePointer parentNode = new DOMNodePointer(node, null);
    ArrayList<Node> attributes = new ArrayList<>();
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    attributes.add(mock(Node.class));
    DOMAttributeIterator domAttributeIterator = new DOMAttributeIterator(parentNode, qName);
    assertFalse(domAttributeIterator.setPosition(4), "Position 4 should be out of range and return false.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_AtStartPosition_XSks0_jnrD0() {
    QName qName = new QName("attribute");
    Node mockNode = mock(Node.class); // Using a mock Node since Node is an abstract class
    DOMNodePointer parent = new DOMNodePointer(mockNode, Locale.getDefault());
    DOMAttributeIterator iterator = new DOMAttributeIterator(parent, qName);
    NodePointer result = iterator.getNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_AtNegativePosition_RLpL2_jvNE0() {
    QName qName = new QName("attribute");
    Node mockNode = mock(Node.class); // Using a mock Node since Node is an interface
    DOMNodePointer parent = new DOMNodePointer(mockNode, Locale.getDefault());
    DOMAttributeIterator iterator = new DOMAttributeIterator(parent, qName);
    iterator.setPosition(-1); // Assuming setPosition method exists and sets position correctly
    NodePointer result = iterator.getNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_AtOutOfBoundsPosition_iHrQ3_QZwb0() {
    QName qName = new QName("attribute");
    Node mockNode = mock(Node.class); // Using a mock Node object
    DOMNodePointer parent = new DOMNodePointer(mockNode, Locale.getDefault());
    DOMAttributeIterator iterator = new DOMAttributeIterator(parent, qName);
    iterator.setPosition(100); // Assuming setPosition method exists and sets position to an out of bounds index
    NodePointer result = iterator.getNodePointer();
    assertNull(result);
}
}