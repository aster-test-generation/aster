/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.IndexedPropertyDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNullValue_JOcD0() {
        assertFalse(ValueUtils.isCollection(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNonCollectionNonArray_LSKD1() {
        assertFalse(ValueUtils.isCollection(123));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_HeYA2() {
        int[] array = new int[] {1, 2, 3};
        assertTrue(ValueUtils.isCollection(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArrayReturningTrue_OcUS3() {
        String[] array = new String[] {"a", "b", "c"};
        assertTrue(ValueUtils.isCollection(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_tMFg4() {
        Collection<String> collection = new ArrayList<>();
        collection.add("hello");
        assertTrue(ValueUtils.isCollection(collection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNonCollectionObject_FnkN5() {
        Object obj = new Object();
        assertFalse(ValueUtils.isCollection(obj));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoContainer_Ytyf2() {
        String nonContainerObject = "justAString";
        Object result = ValueUtils.getValue(nonContainerObject);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withArray_nNZj0() {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withCollection_TMto1() {
        assertEquals(1, ValueUtils.getCollectionHint(ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withPrimitive_QwKS2() {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withInterface_DPwq3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withFinalClass_eOpe4() {
        assertEquals(-1, ValueUtils.getCollectionHint(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withNonFinalClass_UAnN5() {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withNonCollectionInterface_vKmp6() {
        assertEquals(0, ValueUtils.getCollectionHint(Runnable.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withPrimitiveArray_ceeT7() {
        assertEquals(1, ValueUtils.getCollectionHint(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withNonPrimitiveArray_wlZi8() {
        assertEquals(1, ValueUtils.getCollectionHint(Integer[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHint_withHashSet_YJGd9() {
        assertEquals(1, ValueUtils.getCollectionHint(HashSet.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithValidMethod_KzWW0() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        Method method = mock(Method.class);
        when(ipd.getIndexedReadMethod()).thenReturn(method);
        when(method.invoke(bean, Integer.valueOf(0))).thenReturn("ExpectedValue");
        Object result = ValueUtils.getValue(bean, ipd, 0);
        assertEquals("ExpectedValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithNullMethod_wnsw1() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        when(ipd.getIndexedReadMethod()).thenReturn(null);
        Object result = ValueUtils.getValue(bean, ipd, 0);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithInvocationTargetException_IndexOutOfBounds_YrAD2() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        Method method = mock(Method.class);
        when(ipd.getIndexedReadMethod()).thenReturn(method);
        when(method.invoke(bean, Integer.valueOf(0))).thenThrow(new InvocationTargetException(new IndexOutOfBoundsException()));
        Object result = ValueUtils.getValue(bean, ipd, 0);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithInvocationTargetException_OtherException_Ghnj3() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        Method method = mock(Method.class);
        when(ipd.getIndexedReadMethod()).thenReturn(method);
        when(method.invoke(bean, Integer.valueOf(0))).thenThrow(new InvocationTargetException(new Exception("Other exception")));
        try {
            ValueUtils.getValue(bean, ipd, 0);
            fail("JXPathException expected");
        } catch (JXPathException ex) {
            assertNotNull(ex);
            assertEquals("Cannot access property: null", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithOtherThrowable_YzDQ4() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        Method method = mock(Method.class);
        when(ipd.getIndexedReadMethod()).thenReturn(method);
        when(method.invoke(bean, Integer.valueOf(0))).thenThrow(new IllegalArgumentException());
        try {
            ValueUtils.getValue(bean, ipd, 0);
            fail("JXPathException expected");
        } catch (JXPathException ex) {
            assertNotNull(ex);
            assertEquals("Cannot access property: null", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_NotIndexedPropertyDescriptor_YFVV5() throws Exception {
        Object bean = new Object();
        PropertyDescriptor pd = mock(PropertyDescriptor.class);
        Object result = ValueUtils.getValue(bean, pd, 0);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_IndexedPropertyDescriptorWithValidMethodAndIndex_uFAt6() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = mock(IndexedPropertyDescriptor.class);
        Method method = mock(Method.class);
        when(ipd.getIndexedReadMethod()).thenReturn(method);
        when(method.invoke(bean, Integer.valueOf(1))).thenReturn("ExpectedValueAtIndex");
        Object result = ValueUtils.getValue(bean, ipd, 1);
        assertEquals("ExpectedValueAtIndex", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ArrayRemoveMiddleElement_WHfo2() {
        Integer[] array = {1, 2, 3};
        Object result = ValueUtils.remove(array, 1);
        Integer[] expected = {1, 3};
        assertArrayEquals(expected, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ArrayRemoveFirstElement_WqAQ3() {
        Integer[] array = {1, 2, 3};
        Object result = ValueUtils.remove(array, 0);
        Integer[] expected = {2, 3};
        assertArrayEquals(expected, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ArrayRemoveLastElement_QEjt4() {
        Integer[] array = {1, 2, 3};
        Object result = ValueUtils.remove(array, 2);
        Integer[] expected = {1, 2};
        assertArrayEquals(expected, (Integer[]) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ListRemoveMiddleElement_IqRk6() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 1);
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 3));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ListRemoveFirstElement_yMyR7() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 0);
        List<Integer> expected = new ArrayList<>(Arrays.asList(2, 3));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_ListRemoveLastElement_ryoV8() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(list, 2);
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 2));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_CollectionRemoveElement_KLQS10() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(collection, 1);
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(1, 3));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_CollectionRemoveFirstElement_TAWI11() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(collection, 0);
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(2, 3));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_CollectionRemoveLastElement_GMhU12() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3));
        Object result = ValueUtils.remove(collection, 2);
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(1, 2));
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_WithReadMethod_jQLF0() throws IntrospectionException, NoSuchMethodException {
        Object object = new Object();
        IndexedPropertyDescriptor pd = new IndexedPropertyDescriptor("testProperty", Object.class, "getTestProperty", null, null, "getTestPropertyAtIndex");
        pd.setReadMethod(Object.class.getMethod("getTestProperty"));
        assertEquals(0, ValueUtils.getIndexedPropertyLength(object, pd));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndexedPropertyLength_NoReadMethodAndNoIndexedReadMethod_kEcx2() throws IntrospectionException {
        Object object = new Object();
        IndexedPropertyDescriptor pd = new IndexedPropertyDescriptor("testProperty", Object.class, null, null, null, null);
        try {
            ValueUtils.getIndexedPropertyLength(object, pd);
            fail("Expected JXPathException was not thrown.");
        } catch (JXPathException e) {
            assertEquals("No indexed read method for property testProperty", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithValidConversion_Yayv0() throws Exception {
        Object bean = new Object();
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("property", Object.class, null, null, null, "setIndexedProperty");
        Method writeMethod = Object.class.getMethod("setIndexedProperty", Integer.class, Object.class);
        ipd.setIndexedWriteMethod(writeMethod);
        Object value = "123";
        int index = 0;
        ValueUtils.setValue(bean, ipd, index, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullCollection_kIms0() {
        ValueUtils.setValue(null, 0, "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArray_NYfQ1() {
        Integer[] array = new Integer[1];
        ValueUtils.setValue(array, 0, 123);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArrayAndTypeConversion_VQwi2() {
        Integer[] array = new Integer[1];
        ValueUtils.setValue(array, 0, "123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithList_eSck3() {
        List<String> list = new ArrayList<>();
        list.add("oldValue");
        ValueUtils.setValue(list, 0, "newValue");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArrayNullElement_ZPKp5() {
        String[] array = new String[1];
        ValueUtils.setValue(array, 0, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithListNullElement_Ojww6() {
        List<String> list = new ArrayList<>();
        list.add("oldValue");
        ValueUtils.setValue(list, 0, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArrayPrimitiveType_vQIj7() {
        int[] array = new int[1];
        ValueUtils.setValue(array, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArrayPrimitiveTypeConversion_nryp8() {
        int[] array = new int[1];
        ValueUtils.setValue(array, 0, "10");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_NullCollection_ReturnsZero_umbk0() {
        assertEquals(0, ValueUtils.getLength(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_ValidArray_ReturnsCorrectLength_lWdp1() {
        Integer[] array = new Integer[]{1, 2, 3};
        assertEquals(3, ValueUtils.getLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_ValidCollection_ReturnsCorrectSize_yVqa2() {
        Collection<Integer> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        assertEquals(3, ValueUtils.getLength(collection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_SingleElement_ReturnsOne_eFRG3() {
        assertEquals(1, ValueUtils.getLength(42));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_EmptyArray_ReturnsZero_ARjj4() {
        Integer[] emptyArray = new Integer[]{};
        assertEquals(0, ValueUtils.getLength(emptyArray));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_EmptyCollection_ReturnsZero_AlrV5() {
        Collection<Integer> emptyCollection = new ArrayList<>();
        assertEquals(0, ValueUtils.getLength(emptyCollection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_NonCollectionNonArray_ReturnsOne_sQyz6() {
        String singleString = "Hello";
        assertEquals(1, ValueUtils.getLength(singleString));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_ArrayOfCollections_ReturnsArrayLength_TerD7() {
        Collection<Integer>[] arrayOfCollections = new Collection[]{
            new ArrayList<>(Arrays.asList(1, 2)),
            new ArrayList<>(Arrays.asList(3, 4, 5))
        };
        assertEquals(2, ValueUtils.getLength(arrayOfCollections));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_lBnd0() {
        Iterator result = ValueUtils.iterate(null);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_DSgW1() {
        Object[] emptyArray = new Object[0];
        Iterator result = ValueUtils.iterate(emptyArray);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2_1() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2_2() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(1, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2_3() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(2, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2_4() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(3, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2_5() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_SjSx3() {
        Collection<Object> emptyCollection = Collections.emptyList();
        Iterator result = ValueUtils.iterate(emptyCollection);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4_1() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4_2() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(1, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4_3() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(2, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4_4() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertEquals(3, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4_5() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_HUVx5_1() {
        Object singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_HUVx5_2() {
        Object singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertEquals("test", result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_HUVx5_3() {
        Object singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyStringArray_znea6() {
        String[] emptyArray = new String[0];
        Iterator result = ValueUtils.iterate(emptyArray);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7_1() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7_2() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertEquals("a", result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7_3() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertEquals("b", result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7_4() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertEquals("c", result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7_5() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyIntArray_oeKh8() {
        int[] emptyArray = new int[0];
        Iterator result = ValueUtils.iterate(emptyArray);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9_1() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9_2() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(1, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9_3() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(2, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9_4() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertEquals(3, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9_5() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyList_hdbv10() {
        List<Object> emptyList = new ArrayList<>();
        Iterator result = ValueUtils.iterate(emptyList);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11_1() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertTrue(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11_2() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertEquals(1, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11_3() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertEquals(2, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11_4() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertEquals(3, result.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11_5() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertFalse(result.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerSubsequentInvocation_eeVJ1() {
        Class<DynamicPropertyHandler> clazz = DynamicPropertyHandler.class;
        DynamicPropertyHandler firstHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        DynamicPropertyHandler secondHandler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertSame(firstHandler, secondHandler);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithNewInstance_mXkR2_1() {
        Class<DynamicPropertyHandler> clazz = DynamicPropertyHandler.class;
        DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(handler);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerWithNewInstance_mXkR2_2() {
        Class<DynamicPropertyHandler> clazz = DynamicPropertyHandler.class;
        DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertTrue(handler instanceof DynamicPropertyHandler);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_NullMethod_MrmS0() {
        Method result = ValueUtils.getAccessibleMethod(null);
        assert result == null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_ArrayExpansion_dVxt3_1() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 5);
        assertNotNull(expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_ArrayExpansion_dVxt3_2() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 5);
        assertEquals(5, expanded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_ArrayExpansion_dVxt3_3() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 5);
        assertArrayEquals(new Integer[]{1, 2, 3, null, null}, expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_CollectionExpansion_swVo4_1() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 5);
        assertNotNull(expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_CollectionExpansion_swVo4_2() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 5);
        assertEquals(5, expanded.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_CollectionExpansion_swVo4_3() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 5);
        assertEquals(Arrays.asList(1, 2, 3, null, null), expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyArrayExpansion_aqkt6_1() {
        String[] array = new String[0];
        String[] expanded = (String[]) ValueUtils.expandCollection(array, 3);
        assertNotNull(expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyArrayExpansion_aqkt6_2() {
        String[] array = new String[0];
        String[] expanded = (String[]) ValueUtils.expandCollection(array, 3);
        assertEquals(3, expanded.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyArrayExpansion_aqkt6_3() {
        String[] array = new String[0];
        String[] expanded = (String[]) ValueUtils.expandCollection(array, 3);
        assertArrayEquals(new String[]{null, null, null}, expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyCollectionExpansion_VjGo7_1() {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 3);
        assertNotNull(expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyCollectionExpansion_VjGo7_2() {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 3);
        assertEquals(3, expanded.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyCollectionExpansion_VjGo7_3() {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 3);
        assertEquals(Arrays.asList(null, null, null), expanded);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_NoExpansionNeeded_Array_rCyv8() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 3);
        assertArrayEquals(array, expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_NoExpansionNeeded_Collection_EnBv9() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 3);
        assertEquals(list, expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_ArrayWithNulls_KkWE10() {
        Integer[] array = new Integer[]{1, null, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 5);
        assertArrayEquals(new Integer[]{1, null, 3, null, null}, expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_CollectionWithNulls_FAYP11() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, null, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 5);
        assertEquals(Arrays.asList(1, null, 3, null, null), expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_LargeExpansion_Array_XGEo12() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 100);
        assertEquals(100, expanded.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_LargeExpansion_Collection_nEKi13() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 100);
        assertEquals(100, expanded.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_TypeSpecificArray_OnVk14() {
        Double[] array = new Double[]{1.1, 2.2, 3.3};
        Double[] expanded = (Double[]) ValueUtils.expandCollection(array, 5);
        assertArrayEquals(new Double[]{1.1, 2.2, 3.3, null, null}, expanded);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testSetValueWithListIndexOutOfBounds_sRtj10_Mlpl0() {
        List<String> list = new ArrayList<>();
        assertThrows(IndexOutOfBoundsException.class, () -> ValueUtils.setValue(list, 1, "newValue"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ArrayWithNegativeIndex_RFlT2_tTAB0() {
    Object[] array = {1, 2, 3};
    assertNull(ValueUtils.getValue(array, -1), "Expected null for negative index");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ArrayWithIndexOutOfBounds_tUYt3_ZuXI0() {
    Object[] array = {1, 2, 3};
    assertNull(ValueUtils.getValue(array, 3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ListWithNegativeIndex_Meak6_xUmG0() {
    List<Object> list = Arrays.asList(1, 2, 3);
    assertNull(ValueUtils.getValue(list, -1), "Expected null for negative index");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_ListWithIndexOutOfBounds_nlts7_wAcQ0() {
    List<Object> list = Arrays.asList(1, 2, 3);
    assertNull(ValueUtils.getValue(list, 3), "Expected null for index out of bounds");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollection_EmptyCollection_APRL9_aBJj0() {
    Collection<Object> collection = new HashSet<>();
    Collection<Object> expandedCollection = (Collection<Object>) ValueUtils.expandCollection(collection, 0);
    assertEquals(0, expandedCollection.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_CollectionWithNegativeIndex_RrrE10_ESHW0() {
    Collection<Object> collection = new HashSet<>(Arrays.asList(1, 2, 3));
    assertNull(ValueUtils.getValue(collection, -1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_CollectionWithIndexOutOfBounds_eZEG11_nVOL0() {
    Collection<Object> collection = new HashSet<>(Arrays.asList(1, 2, 3));
    assertNull(ValueUtils.getValue(collection, 3), "Expected null for index out of bounds");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollection_CollectionIteratorNoNext_wicz15_abFT0_1() {
    Collection<Object> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
    Object expandedCollection = ValueUtils.expandCollection(collection, 4);
    assertNotNull(expandedCollection);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollection_CollectionIteratorNoNext_wicz15_abFT0_2() {
    Collection<Object> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
    Object expandedCollection = ValueUtils.expandCollection(collection, 4);
    assertEquals(4, ((Collection) expandedCollection).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollection_CollectionIteratorNoNext_wicz15_abFT0_3() {
    Collection<Object> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
    Object expandedCollection = ValueUtils.expandCollection(collection, 4);
    assertNull(((Collection) expandedCollection).toArray()[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExpandCollection_NullCollection_OYIA0_kwse0() {
    assertNull(ValueUtils.expandCollection(null, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_rsyp2() {
        Object[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());
        assertEquals(1, result.next());
        assertEquals(2, result.next());
        assertEquals(3, result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_gMOA4() {
        Collection<Object> collection = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(collection);
        assertTrue(result.hasNext());
        assertEquals(1, result.next());
        assertEquals(2, result.next());
        assertEquals(3, result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_HUVx5() {
        Object singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertTrue(result.hasNext());
        assertEquals("test", result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyStringArray_dAQo7() {
        String[] array = {"a", "b", "c"};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());
        assertEquals("a", result.next());
        assertEquals("b", result.next());
        assertEquals("c", result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyIntArray_sNhe9() {
        int[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());
        assertEquals(1, result.next());
        assertEquals(2, result.next());
        assertEquals(3, result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyList_SoKr11() {
        List<Object> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        Iterator result = ValueUtils.iterate(list);
        assertTrue(result.hasNext());
        assertEquals(1, result.next());
        assertEquals(2, result.next());
        assertEquals(3, result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerFirstInvocation_PXDl0() {
        Class<DynamicPropertyHandler> clazz = DynamicPropertyHandler.class;
        DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(clazz);
        assertNotNull(handler);
        assertTrue(handler instanceof DynamicPropertyHandler);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_ArrayExpansion_dVxt3() {
        Integer[] array = new Integer[]{1, 2, 3};
        Integer[] expanded = (Integer[]) ValueUtils.expandCollection(array, 5);
        assertNotNull(expanded);
        assertEquals(5, expanded.length);
        assertArrayEquals(new Integer[]{1, 2, 3, null, null}, expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_CollectionExpansion_swVo4() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 5);
        assertNotNull(expanded);
        assertEquals(5, expanded.size());
        assertEquals(Arrays.asList(1, 2, 3, null, null), expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyArrayExpansion_aqkt6() {
        String[] array = new String[0];
        String[] expanded = (String[]) ValueUtils.expandCollection(array, 3);
        assertNotNull(expanded);
        assertEquals(3, expanded.length);
        assertArrayEquals(new String[]{null, null, null}, expanded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollection_EmptyCollectionExpansion_VjGo7() {
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> expanded = (ArrayList<Integer>) ValueUtils.expandCollection(list, 3);
        assertNotNull(expanded);
        assertEquals(3, expanded.size());
        assertEquals(Arrays.asList(null, null, null), expanded);
}
}