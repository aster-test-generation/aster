/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Passing {
    private CoreFunction coreFunction;
    private EvalContext mockContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithCorrectArgCount_fLSu1() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        when(expressions[0].computeValue(context)).thenReturn("en");
        coreFunction.functionLang(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithNullPointer_HNCp2() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        when(context.getSingleNodePointer()).thenReturn(null);
        when(expressions[0].computeValue(context)).thenReturn("en");
        Boolean result = (Boolean) coreFunction.functionLang(context);
        assert result.equals(Boolean.FALSE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithLanguageMatch_swtk3() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getSingleNodePointer()).thenReturn(nodePointer);
        when(expressions[0].computeValue(context)).thenReturn("en");
        when(nodePointer.isLanguage("en")).thenReturn(true);
        Boolean result = (Boolean) coreFunction.functionLang(context);
        assert result.equals(Boolean.TRUE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithLanguageMismatch_XNof4() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getSingleNodePointer()).thenReturn(nodePointer);
        when(expressions[0].computeValue(context)).thenReturn("en");
        when(nodePointer.isLanguage("fr")).thenReturn(false);
        Boolean result = (Boolean) coreFunction.functionLang(context);
        assert result.equals(Boolean.FALSE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLangWithNullLanguage_MmvB5() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getSingleNodePointer()).thenReturn(nodePointer);
        when(expressions[0].computeValue(context)).thenReturn(null);
        when(nodePointer.isLanguage(null)).thenReturn(false);
        Boolean result = (Boolean) coreFunction.functionLang(context);
        assert result.equals(Boolean.FALSE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_NullArgs_tcRe0() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        int result = coreFunction.getArgumentCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_EmptyArgs_NiMQ1() {
        Expression[] args = new Expression[0];
        CoreFunction coreFunction = new CoreFunction(1, args);
        int result = coreFunction.getArgumentCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgumentCount_NonEmptyArgs_DKNW2() {
        Expression[] args = new Expression[3]; // Assuming Expression is a defined class
        CoreFunction coreFunction = new CoreFunction(1, args);
        int result = coreFunction.getArgumentCount();
        assertEquals(3, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionStartsWith_BothStringsMatch_rxfy0() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn("He");
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
        Object result = coreFunction.functionStartsWith(context);
        assertTrue((Boolean) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionStartsWith_StringsDoNotMatch_wLST1() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn("world");
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
        Object result = coreFunction.functionStartsWith(context);
        assertFalse((Boolean) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithNullContext_qcdn8() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        try {
            coreFunction.functionName(null);
            fail("Expected a NullPointerException to be thrown");
        } catch (NullPointerException e) {
            assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_NoArguments_NodePointerNonNullNamespace_VBKv1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(coreFunction.getArgumentCount()).thenReturn(0);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn("http://example.com");
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithTwoArguments_BoON1() {
        Expression[] args = {mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn("Hello");
        when(args[1].compute(context)).thenReturn("World");
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("HelloWorld");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithMultipleArguments_gTwh2() {
        Expression[] args = {mock(Expression.class), mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn("Hello");
        when(args[1].compute(context)).thenReturn(" ");
        when(args[2].compute(context)).thenReturn("World");
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("Hello World");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithEmptyStrings_QeSK3() {
        Expression[] args = {mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn("");
        when(args[1].compute(context)).thenReturn("");
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithMixedTypes_cGnl5() {
        Expression[] args = {mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn(123);
        when(args[1].compute(context)).thenReturn(true);
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("123true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithSpecialCharacters_wgcd6() {
        Expression[] args = {mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn("Hello");
        when(args[1].compute(context)).thenReturn(" World!@#");
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("Hello World!@#");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithEmptyContext_GTXV0() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(0);
        when(context.nextNode()).thenReturn(false);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(0), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context, never()).setPosition(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithSingleElement_Gpgp1() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(0);
        when(context.nextNode()).thenReturn(true).thenReturn(false);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(1), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context, times(2)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithMultipleElements_kNPD2() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(0);
        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(2), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context, times(3)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithNoResetNeeded_ZOHS6() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(0);
        when(context.nextNode()).thenReturn(true).thenReturn(false);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(1), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context, never()).setPosition(anyInt());
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameLast_yHqK0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertEquals("last", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNamePosition_kjWc1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        assertEquals("position", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameCount_DCHt2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        assertEquals("count", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameId_focB3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        assertEquals("id", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameLocalName_yRis4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        assertEquals("local-name", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameNamespaceUri_rLvB5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        assertEquals("namespace-uri", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameName_rNqN6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        assertEquals("name", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameString_Xjip7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
        assertEquals("string", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameConcat_PUvR8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONCAT, null);
        assertEquals("concat", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameStartsWith_Vzyt9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STARTS_WITH, null);
        assertEquals("starts-with", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameEndsWith_kgno10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ENDS_WITH, null);
        assertEquals("ends-with", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameContains_lXCk11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CONTAINS, null);
        assertEquals("contains", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameSubstringBefore_qIgN12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_BEFORE, null);
        assertEquals("substring-before", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameSubstringAfter_mTmw13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING_AFTER, null);
        assertEquals("substring-after", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameSubstring_tEWy14() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUBSTRING, null);
        assertEquals("substring", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameStringLength_YJBL15() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, null);
        assertEquals("string-length", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameNormalizeSpace_aGFH16() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
        assertEquals("normalize-space", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameTranslate_gOsZ17() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
        assertEquals("translate", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameBoolean_RqRX18() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertEquals("boolean", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameNot_BQLb19() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
        assertEquals("not", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameTrue_crgK20() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
        assertEquals("true", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameFalse_RKQD21() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
        assertEquals("false", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameLang_afeE22() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        assertEquals("lang", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameNumber_UcON23() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        assertEquals("number", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameSum_cMcx24() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
        assertEquals("sum", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameFloor_jWjU25() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
        assertEquals("floor", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameCeiling_ffpG26() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
        assertEquals("ceiling", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameRound_pcHV27() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        assertEquals("round", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameKey_SELF28() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, null);
        assertEquals("key", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameFormatNumber_UGUI29() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        assertEquals("format-number", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNameUnknownFunction_BCId30() {
        CoreFunction coreFunction = new CoreFunction(-1, null);
        assertEquals("unknownFunction-1()", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionStringWithZeroArguments_SzCH0() {
        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(coreFunction.getArgumentCount()).thenReturn(0);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(InfoSetUtil.stringValue(nodePointer)).thenReturn("nodeValue");
        Object result = coreFunction.functionString(context);
        verify(coreFunction).getArgumentCount();
        verify(context).getCurrentNodePointer();
        assert "nodeValue".equals(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNaNValue_kpop1_1() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.NaN);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNaNValue_kpop1_2() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.NaN);
        Object result = coreFunction.functionRound(context);
        assertTrue(Double.isNaN((Double) result));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithInfiniteValue_qGfF2_1() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithInfiniteValue_qGfF2_2() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
        Object result = coreFunction.functionRound(context);
        assertTrue(Double.isInfinite((Double) result));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithInfiniteValue_qGfF2_3() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
        Object result = coreFunction.functionRound(context);
        assertEquals(Double.POSITIVE_INFINITY, (Double) result, 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNormalValue_HTTV3_1() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(3.7);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNormalValue_HTTV3_2() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(3.7);
        Object result = coreFunction.functionRound(context);
        assertEquals(4.0, (Double) result, 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNegativeValue_qYFH4_1() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(-1.2);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNegativeValue_qYFH4_2() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(-1.2);
        Object result = coreFunction.functionRound(context);
        assertEquals(-1.0, (Double) result, 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSum_NullValue_DiPK1() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        when(expressions[0].compute(context)).thenReturn(null);
        Object result = coreFunction.functionSum(context);
        assertEquals(Double.valueOf(0), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSum_EvalContextWithNoNodes_LgVx2() {
        Expression[] expressions = {mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, expressions);
        EvalContext context = mock(EvalContext.class);
        EvalContext evalContext = mock(EvalContext.class);
        when(expressions[0].compute(context)).thenReturn(evalContext);
        when(evalContext.hasNext()).thenReturn(false);
        Object result = coreFunction.functionSum(context);
        assertEquals(Double.valueOf(0), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithTwoArguments_VkBy0() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(1.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithThreeArguments_zSbc1() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        Expression arg3 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(1.0);
        when(arg3.computeValue(context)).thenReturn(4.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithInvalidFromNaN_ZBBI2() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(Double.NaN);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithFromGreaterThanLength_mwZP3() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(10.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithNegativeLength_zPWb4() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        Expression arg3 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(1.0);
        when(arg3.computeValue(context)).thenReturn(-1.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithToLessThanOne_IURd5() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        Expression arg3 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(0.0);
        when(arg3.computeValue(context)).thenReturn(1.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithToGreaterThanLengthPlusOne_TZWZ6() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        Expression arg3 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(1.0);
        when(arg3.computeValue(context)).thenReturn(10.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubstringWithFromLessThanOne_shpR7() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn("Hello");
        when(arg2.computeValue(context)).thenReturn(0.0);
        CoreFunction cf = new CoreFunction(0, new Expression[]{arg1, arg2});
        cf.functionSubstring(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCeilingWithInfinite_uwSy2_AdJl0() {
    Expression[] args = {mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext context = mock(EvalContext.class);
    when(args[0].computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
    Object result = coreFunction.functionCeiling(context);
    assertEquals(Double.POSITIVE_INFINITY, (double) result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_FunctionBoolean_NoArgs_FJaB2_npPW0() {
    CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
    assertTrue(coreFunction.computeContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSum_EvalContextWithNodes_CBdA3_rTAY0() {
    Expression[] expressions = {mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(expressions[0].compute(context)).thenReturn(evalContext);
    when(evalContext.hasNext()).thenReturn(true, false);
    when(evalContext.next()).thenReturn(nodePointer);
    when(nodePointer.getValue()).thenReturn(5.0);
    Object result = coreFunction.functionSum(context);
    assertEquals(Double.valueOf(5.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSum_EvalContextWithAllZeroValues_mArc9_LLvJ0() {
    Expression[] expressions = {mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer1 = mock(NodePointer.class);
    NodePointer nodePointer2 = mock(NodePointer.class);
    when(expressions[0].computeValue(context)).thenReturn(evalContext);
    when(evalContext.hasNext()).thenReturn(true, true, false);
    when(evalContext.next()).thenReturn(nodePointer1, nodePointer2);
    when(nodePointer1.getValue()).thenReturn(0.0);
    when(nodePointer2.getValue()).thenReturn(0.0);
    Object result = coreFunction.functionSum(context);
    assertEquals(Double.valueOf(0.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionStartsWith_NullStrings_giYQ3_fid1() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn(null);
        when(arg2.computeValue(context)).thenReturn(null);
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
        Object result = coreFunction.functionStartsWith(context);
        assertTrue((Boolean) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithEmptyFirstString_BkgN1_epMA0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("");
    when(exp2.computeValue(context)).thenReturn("test");
    when(coreFunction.functionSubstring(context)).thenReturn("");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithNonMatchingSecondString_iRti2_uBpn0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("world");
    when(coreFunction.functionSubstringBefore(context)).thenReturn("");
    Object result = coreFunction.functionSubstringBefore(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithMatchingSecondString_KAjd3_TsZP0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello world");
    when(exp2.computeValue(context)).thenReturn(" world");
    when(coreFunction.functionSubstringBefore(context)).thenReturn("hello");
    Object result = coreFunction.functionSubstringBefore(context);
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithSameStrings_EJKH6_QGVk0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("hello");
    when(coreFunction.functionSubstring(context)).thenReturn("");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoArguments_OUJJ0_qfRW0_fid1() {
    Expression[] args = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(1, args);
    assertEquals("last()", coreFunction.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullArguments_JqSZ3_dQtg0_fid1() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    assertEquals("last()", coreFunction.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_FunctionLast_uCsp1_DFAp0_fid1() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNaNValue_kpop1() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.NaN);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);
        assertTrue(Double.isNaN((Double) result));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithInfiniteValue_qGfF2() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);
        assertTrue(Double.isInfinite((Double) result));
        assertEquals(Double.POSITIVE_INFINITY, (Double) result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNormalValue_HTTV3() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(3.7);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);
        assertEquals(4.0, (Double) result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionRoundWithNegativeValue_qYFH4() {
        Expression[] args = new Expression[1];
        Expression expr = mock(Expression.class);
        args[0] = expr;
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(expr.computeValue(context)).thenReturn(-1.2);
        Object result = coreFunction.functionRound(context);
        assertTrue(result instanceof Double);
        assertEquals(-1.0, (Double) result, 0.0);
    }
}