/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Stack;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Stack;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private NodeTypeTest mockNodeTypeTest;
@InjectMocks
    private DescendantContext descendantContext;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NamespaceContext parentContext;
@Mock
    private NodePointer currentNodePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodeIterator nodeIterator;
    private boolean setStarted = false;
    private Stack stack = null;
private boolean getSetStarted(DescendantContext descendantContext) {
    try {
        Field field = DescendantContext.class.getDeclaredField("setStarted");
        field.setAccessible(true);
        return field.getBoolean(descendantContext);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_1() throws Exception {
        descendantContext = new DescendantContext(mockNamespaceContext, true, mockNodeTypeTest);
        // Mock the behavior of nextNode method
        DescendantContext spyDescendantContext = spy(descendantContext);
        doReturn(true).when(spyDescendantContext).nextNode();
        // Test when position is greater than the current position
        // Test when position is less than the current position
        spyDescendantContext.setPosition(5); // Move to position 5
        doNothing().when(spyDescendantContext).reset(); // Mock reset method
        // Test when nextNode returns false
        doReturn(false).when(spyDescendantContext).nextNode();
        assertTrue(spyDescendantContext.setPosition(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_2() throws Exception {
        descendantContext = new DescendantContext(mockNamespaceContext, true, mockNodeTypeTest);
        // Mock the behavior of nextNode method
        DescendantContext spyDescendantContext = spy(descendantContext);
        doReturn(true).when(spyDescendantContext).nextNode();
        // Test when position is greater than the current position
        // Test when position is less than the current position
        spyDescendantContext.setPosition(5); // Move to position 5
        doNothing().when(spyDescendantContext).reset(); // Mock reset method
        // Test when nextNode returns false
        doReturn(false).when(spyDescendantContext).nextNode();
        assertTrue(spyDescendantContext.setPosition(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_3() throws Exception {
        descendantContext = new DescendantContext(mockNamespaceContext, true, mockNodeTypeTest);
        // Mock the behavior of nextNode method
        DescendantContext spyDescendantContext = spy(descendantContext);
        doReturn(true).when(spyDescendantContext).nextNode();
        // Test when position is greater than the current position
        // Test when position is less than the current position
        spyDescendantContext.setPosition(5); // Move to position 5
        doNothing().when(spyDescendantContext).reset(); // Mock reset method
        // Test when nextNode returns false
        doReturn(false).when(spyDescendantContext).nextNode();
        assertFalse(spyDescendantContext.setPosition(10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        descendantContext = new DescendantContext(mockNamespaceContext, true, mockNodeTypeTest);
        // Set the setStarted to true before calling reset
        setStarted = true;
        // Call the reset method
        descendantContext.reset();
        // Assert that setStarted is now false
        assertFalse(setStarted);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionToZero_ogBf0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertTrue(descendantContext.setPosition(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionToPositive_QCWu1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertTrue(descendantContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionToNegative_sxvl2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertFalse(descendantContext.setPosition(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBeyondLimit_tITj3() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertFalse(descendantContext.setPosition(100));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_includeSelfTrue_currentNodePointerNotNull() throws Exception {
        MockitoAnnotations.openMocks(this);
        descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(Compiler.NODE_TYPE_NODE));
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.isLeaf()).thenReturn(false);
        when(currentNodePointer.testNode(any(NodeTest.class))).thenReturn(true);
        when(currentNodePointer.childIterator(any(NodeTest.class), anyBoolean(), any())).thenReturn(nodeIterator);
        when(nodeIterator.setPosition(anyInt())).thenReturn(true);
        when(nodeIterator.getNodePointer()).thenReturn(currentNodePointer);
        boolean result = descendantContext.nextNode();
        assertTrue(result);
        verify(currentNodePointer, times(1)).testNode(any(NodeTest.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_includeSelfFalse_currentNodePointerIsNull() throws Exception {
        MockitoAnnotations.openMocks(this);
        descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(Compiler.NODE_TYPE_NODE));
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        boolean result = descendantContext.nextNode();
        assertFalse(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_stackNotEmpty() throws Exception {
        MockitoAnnotations.openMocks(this);
        descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(Compiler.NODE_TYPE_NODE));
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.isLeaf()).thenReturn(false);
        when(currentNodePointer.childIterator(any(NodeTest.class), anyBoolean(), any())).thenReturn(nodeIterator);
        when(nodeIterator.setPosition(anyInt())).thenReturn(true);
        when(nodeIterator.getNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.testNode(any(NodeTest.class))).thenReturn(true);
        descendantContext.nextNode(); // First call to initialize the stack
        boolean result = descendantContext.nextNode(); // Second call to test stack iteration
        assertTrue(result);
        verify(nodeIterator, times(2)).setPosition(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_stackEmpty() throws Exception {
        MockitoAnnotations.openMocks(this);
        descendantContext = new DescendantContext(parentContext, true, new NodeTypeTest(Compiler.NODE_TYPE_NODE));
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.isLeaf()).thenReturn(true);
        boolean result = descendantContext.nextNode();
        assertFalse(result);
        verify(currentNodePointer, never()).childIterator(any(NodeTest.class), anyBoolean(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisChildOrderingRequired() throws Exception {
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        assertTrue(descendantContext.isChildOrderingRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointerInitialPosition_lxVU0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        NodePointer result = descendantContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointerAfterSetPosition_mlMh1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.setPosition(1); // Assuming setPosition is a method that sets the position
        NodePointer result = descendantContext.getCurrentNodePointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointerWithNonZeroPosition_tVmq2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.setPosition(2); // Assuming setPosition is a method that sets the position
        NodePointer result = descendantContext.getCurrentNodePointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChildOrderingRequired_ghzo0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
    assertTrue(descendantContext.isChildOrderingRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_initialState_XPdH0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        assertFalse(descendantContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_withNonLeafNode_aefN1() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, false, new NodeTypeTest(1));
        assertFalse(descendantContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_WaOl0_voze0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
    descendantContext.reset();
    assertFalse(getSetStarted(descendantContext));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition() throws Exception {
        descendantContext = new DescendantContext(mockNamespaceContext, true, mockNodeTypeTest);
        // Mock the behavior of nextNode method
        DescendantContext spyDescendantContext = spy(descendantContext);
        doReturn(true).when(spyDescendantContext).nextNode();
        // Test when position is greater than the current position
        assertTrue(spyDescendantContext.setPosition(5));
        // Test when position is less than the current position
        spyDescendantContext.setPosition(5); // Move to position 5
        doNothing().when(spyDescendantContext).reset(); // Mock reset method
        assertTrue(spyDescendantContext.setPosition(3));
        // Test when nextNode returns false
        doReturn(false).when(spyDescendantContext).nextNode();
        assertFalse(spyDescendantContext.setPosition(10));
    }
}