/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionAndServletContext_Test_Failing {
private HttpSession session;
private ServletContext context;
private HttpSessionAndServletContext httpsessionandservletcontext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletContext() throws Exception {
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, context);
        // Mock the behavior of the ServletContext
        when(httpsessionandservletcontext.getServletContext()).thenReturn(context);
        // Call the method under test
        ServletContext result = httpsessionandservletcontext.getServletContext();
        // Assert the results
        assertEquals(context, result, "The returned ServletContext should match the mocked context.");
    }
}