/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BeanPropertyPointer_Coverage_Test_Passing {
    private Object mockBean;
    private BeanPropertyPointer beanPropertyPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_ImmediateNodeIsNotNull_Fidi1() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, beanInfo);
        JXPathContext context = mock(JXPathContext.class);
        Object node = new Object();
        when(beanPropertyPointer.getImmediateNode()).thenReturn(node);
        NodePointer result = beanPropertyPointer.createPath(context);
        verify(beanPropertyPointer, never()).createPath(context);
        assertEquals(beanPropertyPointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_SuperCreatePathCalled_IEyC2() {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer beanPropertyPointer = spy(new BeanPropertyPointer(domNodePointer, beanInfo));
        JXPathContext context = mock(JXPathContext.class);
        when(beanPropertyPointer.getImmediateNode()).thenReturn(null);
        beanPropertyPointer.createPath(context);
        verify(beanPropertyPointer).createPath(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection_dkOZ0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(pointer.getIndex()).thenReturn(BeanPropertyPointer.WHOLE_COLLECTION);
        pointer.remove();
        verify(pointer).setValue(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IsCollection_Changed_bEqh1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(pointer.isCollection()).thenReturn(true);
        when(pointer.getBaseValue()).thenReturn(new ArrayList<>());
        when(ValueUtils.remove(any(), anyInt())).thenReturn(new ArrayList<>());
        pointer.remove();
        verify(pointer).setValue(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IsCollection_NotChanged_kHqU2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(pointer.isCollection()).thenReturn(true);
        Object baseValue = new ArrayList<>();
        when(pointer.getBaseValue()).thenReturn(baseValue);
        when(ValueUtils.remove(any(), anyInt())).thenReturn(baseValue);
        pointer.remove();
        verify(pointer, never()).setValue(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_dsbV3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(pointer.getIndex()).thenReturn(0);
        pointer.remove();
        verify(pointer).setValue(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_SetWholeCollection_WPVq4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(pointer.getIndex()).thenReturn(0);
        pointer.remove();
        verify(pointer).setIndex(BeanPropertyPointer.WHOLE_COLLECTION);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_WhenPropertyDescriptorsIsNull_KmjD0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] expectedDescriptors = new PropertyDescriptor[0];
        when(beanInfo.getPropertyDescriptors()).thenReturn(expectedDescriptors);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        PropertyDescriptor[] result = pointer.getPropertyDescriptors();
        assertArrayEquals(expectedDescriptors, result);
        verify(beanInfo, times(1)).getPropertyDescriptors();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_WhenPropertyDescriptorsIsNotNull_HdsL1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] expectedDescriptors = new PropertyDescriptor[0];
        when(beanInfo.getPropertyDescriptors()).thenReturn(expectedDescriptors);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.getPropertyDescriptors(); // First call to set the propertyDescriptors
        PropertyDescriptor[] result = pointer.getPropertyDescriptors(); // Second call should use cached value
        assertArrayEquals(expectedDescriptors, result);
        verify(beanInfo, times(1)).getPropertyDescriptors(); // Should still be called only once
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_WhenBeanInfoReturnsDifferentDescriptors_vSUU2() throws IntrospectionException {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] firstCallDescriptors = {new PropertyDescriptor("first", null)};
        PropertyDescriptor[] secondCallDescriptors = {new PropertyDescriptor("second", null)};
        when(beanInfo.getPropertyDescriptors())
            .thenReturn(firstCallDescriptors)
            .thenReturn(secondCallDescriptors);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        PropertyDescriptor[] firstResult = pointer.getPropertyDescriptors();
        when(beanInfo.getPropertyDescriptors()).thenReturn(secondCallDescriptors);
        PropertyDescriptor[] secondResult = pointer.getPropertyDescriptors();
        assertArrayEquals(firstCallDescriptors, firstResult);
        assertArrayEquals(firstCallDescriptors, secondResult); // Should not change as it should use cached value
        verify(beanInfo, times(1)).getPropertyDescriptors(); // Should be called only once
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_ReturnsZero_WhenBeanInfoIsAtomic_dxTX0() {
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        when(beanInfo.isAtomic()).thenReturn(true);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        int result = beanPropertyPointer.getPropertyCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_ReturnsPropertyDescriptorsLength_WhenBeanInfoIsNotAtomic_xhNZ1() {
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        when(beanInfo.isAtomic()).thenReturn(false);
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[] {mock(PropertyDescriptor.class), mock(PropertyDescriptor.class)});
        DOMNodePointer parent = mock(DOMNodePointer.class);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        int result = beanPropertyPointer.getPropertyCount();
        assertEquals(2, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_ReturnsZero_WhenPropertyDescriptorsIsEmpty_glow2() {
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        when(beanInfo.isAtomic()).thenReturn(false);
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[] {});
        DOMNodePointer parent = mock(DOMNodePointer.class);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        int result = beanPropertyPointer.getPropertyCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_SameIndex_NoAction_FEYx0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(5); // Set initial index
        pointer.setIndex(5); // Set the same index
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_DifferentIndex_NotWholeCollection_NotZero_NotCollection_ZhRX1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(5); // Set initial index
        pointer.setIndex(3); // Set a different index
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WholeCollectionToZero_NotCollection_PHeM2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(BeanPropertyPointer.WHOLE_COLLECTION); // Set initial index to WHOLE_COLLECTION
        pointer.setIndex(0); // Set index to 0
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WholeCollectionToNonZero_IsCollection_FZwE3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(BeanPropertyPointer.WHOLE_COLLECTION); // Set initial index to WHOLE_COLLECTION
        when(pointer.isCollection()).thenReturn(true);
        pointer.setIndex(1); // Set index to 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_NonWholeCollectionToZero_IsCollection_mCNF4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(5); // Set initial index
        when(pointer.isCollection()).thenReturn(true);
        pointer.setIndex(0); // Set index to 0
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_NonWholeCollectionToNonZero_IsCollection_Ozyh5() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        pointer.setIndex(5); // Set initial index
        when(pointer.isCollection()).thenReturn(true);
        pointer.setIndex(3); // Set a different index
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_ReturnValue_YCjC4() {
        BeanPropertyPointer bpp = mock(BeanPropertyPointer.class, CALLS_REAL_METHODS);
        Object expectedValue = new Object();
        when(bpp.getImmediateNode()).thenCallRealMethod();
        when(bpp.getValue()).thenReturn(expectedValue);
        Object result = bpp.getImmediateNode();
        assertEquals(expectedValue, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WhenNamesIsNull_teXe0() throws IntrospectionException {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[] {
            new PropertyDescriptor("property1", null),
            new PropertyDescriptor("property2", null)
        };
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        String[] names = pointer.getPropertyNames();
        assertNotNull(names);
        assertEquals(2, names.length);
        assertEquals("property1", names[0]);
        assertEquals("property2", names[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WhenNamesIsNotNull_NCMi1() throws IntrospectionException {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[] {
            new PropertyDescriptor("property1", null),
            new PropertyDescriptor("property2", null)
        };
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        pointer.getPropertyNames(); // Call once to set names
        String[] names = pointer.getPropertyNames(); // Call again to test non-null path
        assertNotNull(names);
        assertEquals(2, names.length);
        assertEquals("property1", names[0]);
        assertEquals("property2", names[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WithEmptyPropertyDescriptors_TskP2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[0];
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        String[] names = pointer.getPropertyNames();
        assertNotNull(names);
        assertEquals(0, names.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WithNullPropertyDescriptors_titf3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(null);
        String[] names = pointer.getPropertyNames();
        assertNull(names);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WithSinglePropertyDescriptor_EUWU4() throws IntrospectionException {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[] {
            new PropertyDescriptor("singleProperty", null)
        };
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        String[] names = pointer.getPropertyNames();
        assertNotNull(names);
        assertEquals(1, names.length);
        assertEquals("singleProperty", names[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_WithMultiplePropertyDescriptors_yYvp5() throws IntrospectionException {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
        PropertyDescriptor[] pds = new PropertyDescriptor[] {
            new PropertyDescriptor("property1", null),
            new PropertyDescriptor("property2", null),
            new PropertyDescriptor("property3", null)
        };
        BeanPropertyPointer pointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        String[] names = pointer.getPropertyNames();
        assertNotNull(names);
        assertEquals(3, names.length);
        assertEquals("property1", names[0]);
        assertEquals("property2", names[1]);
        assertEquals("property3", names[2]);
    }
}