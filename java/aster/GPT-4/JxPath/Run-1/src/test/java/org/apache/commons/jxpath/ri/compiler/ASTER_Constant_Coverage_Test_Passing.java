/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Constant_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_fkxD0() {
        String expectedValue = "testValue";
        Constant constant = new Constant(expectedValue);
        Object result = constant.computeValue(null); // context is not used in the method, so passing null
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentReturnsFalse_ogzQ0() {
        Constant constant = new Constant("Test String");
        boolean result = constant.computeContextDependent();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependentReturnsFalse_vjrr0_FQoG0_1() {
    Constant constantWithString = new Constant("Test String");
    Constant constantWithNumber = new Constant(123);
    assertFalse(constantWithString.isContextDependent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependentReturnsFalse_vjrr0_FQoG0_2() {
    Constant constantWithString = new Constant("Test String");
    Constant constantWithNumber = new Constant(123);
    assertFalse(constantWithNumber.isContextDependent());}
}