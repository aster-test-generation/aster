/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
@InjectMocks
    private VariablePointer variablePointer;
@Mock
    private NodePointer pointer1;
@Mock
    private NodePointer pointer2;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory factory;
@Mock
    private NodePointer clonedNodePointer;
@Mock
    private Variables variables;
@Mock
    private JXPathContext parentContext;
private QName name;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private JXPathContext mockContext;
@Mock
    private QName qName;
    private NodePointer valuePointer;
    private boolean actual;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_FirstHigher() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(2);
        when(pointer2.getIndex()).thenReturn(1);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(1, result, "Expected pointer1 to have a higher index than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SecondHigher() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(-1, result, "Expected pointer2 to have a higher index than pointer1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_Equal() throws Exception {
        variablePointer = new VariablePointer(new QName("test"));
        // Arrange
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(1);
        // Act
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        // Assert
        assertEquals(0, result, "Expected both pointers to have the same index");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithUndefinedVariable_jAkZ0() {
        QName qName = new QName("undefinedVariable");
        VariablePointer vp = new VariablePointer(qName);
        try {
            vp.setValue("newValue");
            fail("Expected JXPathException was not thrown.");
        } catch (JXPathException ex) {
            assertEquals("Cannot set undefined variable: undefinedVariable", ex.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueAtIndex_UMRY1() {
        QName qName = new QName("variable");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer vp = new VariablePointer(variables, qName);
        vp.index = 1; // Assuming index is publicly accessible for the sake of the test
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWholeCollection_hsyi3() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWholeCollection_hsyi3_fid1() {
        QName qName = new QName("variable");
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer vp = new VariablePointer(variables, qName);
        vp.index = VariablePointer.WHOLE_COLLECTION; // Assuming WHOLE_COLLECTION is a static field
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_BNpC0() {
        QName qName = new QName("testPrefix", "testLocalName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodeIterator result = variablePointer.attributeIterator(qName);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_gKzj0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        QName result = variablePointer.getName();
        assertEquals(qName, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_eSHr0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NodeIterator result = variablePointer.namespaceIterator();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_BaseValueNotNull_PoDI1() {
        QName qName = new QName("test");
        KeywordVariables kv = new KeywordVariables("keyword", new Object());
        VariablePointer vp = new VariablePointer(kv, qName);
        assertEquals(ValueUtils.getLength(new Object()), vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_ActualFalse_MbMG2() {
        QName qName = new QName("test");
        VariablePointer vp = new VariablePointer(qName);
        assertEquals(0, vp.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_EzYj0() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        assertTrue(vp.equals(vp));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_CEQq1() {
        QName qName1 = new QName("localName");
        VariablePointer vp1 = new VariablePointer(qName1);
        QName qName2 = new QName("localName");
        VariablePointer vp2 = new VariablePointer(qName2);
        assertTrue(vp1.equals(vp2) && vp2.equals(vp1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_shkP2() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        assertFalse(vp.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_TNCu3() {
        QName qName = new QName("localName");
        VariablePointer vp = new VariablePointer(qName);
        Object differentClassObject = new Object();
        assertFalse(vp.equals(differentClassObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_IyxG4() {
        QName qName1 = new QName("localName1");
        VariablePointer vp1 = new VariablePointer(qName1);
        QName qName2 = new QName("localName2");
        VariablePointer vp2 = new VariablePointer(qName2);
        assertFalse(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_WithKeywordVariables_DVXP5() {
        QName qName = new QName("localName");
        KeywordVariables kv = new KeywordVariables("keyword", new Object());
        VariablePointer vp1 = new VariablePointer(kv, qName);
        VariablePointer vp2 = new VariablePointer(kv, qName);
        assertTrue(vp1.equals(vp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContainerReturnsTrue_mkAZ0() {
    QName qName = new QName("prefix", "localName");
    VariablePointer variablePointer = new VariablePointer(qName);
    assertTrue(variablePointer.isContainer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariableDeclared_VWGA0_qsth0() {
    QName qName = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext mockContext = Mockito.mock(JXPathContext.class);
    Variables mockVariables = Mockito.mock(Variables.class);
    Mockito.when(mockContext.getVariables()).thenReturn(mockVariables);
    Mockito.when(mockVariables.isDeclaredVariable("testVariable")).thenReturn(true);
    Mockito.when(mockContext.getParentContext()).thenReturn(null);
    variablePointer.findVariables(mockContext);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindVariables_VariableDeclaredInParentContext_YrwD2_DXxu0() {
    QName qName = new QName("testVariable");
    VariablePointer variablePointer = new VariablePointer(qName);
    JXPathContext mockContext = Mockito.mock(JXPathContext.class);
    JXPathContext mockParentContext = Mockito.mock(JXPathContext.class);
    Variables mockVariables = Mockito.mock(Variables.class);
    Variables mockParentVariables = Mockito.mock(Variables.class);
    Mockito.when(mockContext.getVariables()).thenReturn(mockVariables);
    Mockito.when(mockVariables.isDeclaredVariable("testVariable")).thenReturn(false);
    Mockito.when(mockContext.getParentContext()).thenReturn(mockParentContext);
    Mockito.when(mockParentContext.getVariables()).thenReturn(mockParentVariables);
    Mockito.when(mockParentVariables.isDeclaredVariable("testVariable")).thenReturn(true);
    Mockito.when(mockParentContext.getParentContext()).thenReturn(null);
    variablePointer.findVariables(mockContext);
    assertTrue(variablePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafWithAtomicNode_HkJj1_rIfn0() {
    QName qName = new QName("testNode");
    KeywordVariables kv = new KeywordVariables("keyword", "AtomicValue");
    VariablePointer vp = new VariablePointer(kv, qName);
    assertTrue(vp.isLeaf(), "Expected to be a leaf with atomic node");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithIndexAndNotActual_ruNo1_RTOA0() {
    QName qName = new QName("testName");
    VariablePointer vp = new VariablePointer(qName);
}
}