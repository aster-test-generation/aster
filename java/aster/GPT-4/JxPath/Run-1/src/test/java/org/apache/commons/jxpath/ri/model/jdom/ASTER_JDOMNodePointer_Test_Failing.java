/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.Attribute;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
@Mock
    private NamespaceResolver localNamespaceResolver;
private JDOMNodePointer jdomNodePointer;
private NodePointer pointer1;
private NodePointer pointer2;
private Element element;
private Attribute attribute1;
private Attribute attribute2;
private Object node1;
private Object node2;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private DOMNodePointer mockParent;
private Object node = new Object();
    private JXPathContext context;
@Mock
    private AbstractFactory factory;
@Mock
    private NodeIterator nodeIterator;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private Locale localeMock;
@Mock
    private ProcessingInstruction processingInstruction;
private JDOMNodePointer jdomNodePointerElement;
private JDOMNodePointer jdomNodePointerProcessingInstruction;
@Mock
    private NodePointer mockStartWith;
@InjectMocks
    private JDOMNodePointer jdomnodepointer;
@Mock
    private Attribute attribute;
@Mock
    private Element mockElement;
@Mock
    private Document mockDocument;
private JDOMNodePointer jdomNodePointerDocument;
private JDOMNodePointer jdomNodePointerOther;
@Mock
    private NamespaceResolver namespaceResolver;
@Mock
    private NodePointer nodePointer;
private QName qName;
@Mock
    private Element elementNode;
@Mock
    private Text textNode;
@Mock
    private NodeTest nodeTest;
@Mock
    private NodeNameTest nodeNameTest;
private Comment comment;
private Text text;
@Mock
    private Element parentElement;
@Mock
    private NodePointer childNodePointer;
@Mock
    private ProcessingInstruction piNode;
@Mock
    private JDOMNodePointer parentNode;
@Mock
    private Document document;
@Mock
    private Namespace namespace;
private static final String ATTRIBUTE_NAME = "testAttr";
private static final String ATTRIBUTE_VALUE = "value";
@Mock
    private NamespaceResolver mockNamespaceResolver;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonEmptyString() throws Exception {
        // Mock an Element node
        when(element.getContent()).thenReturn(new ArrayList<>());
        // Create JDOMNodePointer with the mocked Element
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        // Prepare the value to set
        String value = "Hello World";
        // Call setValue
        jdomNodePointer.setValue(value);
        // Verify that the content of the element is cleared
        verify(element).getContent().clear();
        // Verify that new Text content is added to the element
        verify(element).addContent(any(Text.class));
        // Assert that the text added to the element is correct
        ArgumentCaptor<Text> textCaptor = ArgumentCaptor.forClass(Text.class);
        verify(element).addContent(textCaptor.capture());
        assertEquals("Hello World", textCaptor.getValue().getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithEmptyString() throws Exception {
        // Mock an Element node
        when(element.getContent()).thenReturn(new ArrayList<>());
        // Create JDOMNodePointer with the mocked Element
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        // Set an empty string as value
        jdomNodePointer.setValue("");
        // Verify that the content of the element is cleared
        verify(element).getContent().clear();
        // Verify that no new content is added to the element
        verify(element, never()).addContent(any(Text.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNull() throws Exception {
        // Mock an Element node
        when(element.getContent()).thenReturn(new ArrayList<>());
        // Create JDOMNodePointer with the mocked Element
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        // Set null as value
        jdomNodePointer.setValue(null);
        // Verify that the content of the element is cleared
        verify(element).getContent().clear();
        // Verify that no new content is added to the element
        verify(element, never()).addContent(any(Text.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        jdomNodePointer = new JDOMNodePointer(node, null);
        // Setup the behavior of the mock
        when(node.hashCode()).thenReturn(123);
        // Execute the method on the class under test
        int result = jdomNodePointer.hashCode();
        // Assert the result
        assertEquals(123, result, "The hashCode method should return the hash code of the node object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_1() {
        Locale locale = Locale.getDefault();
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, locale);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, locale);
        QName result = jdomNodePointerElement.getName();
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element_2() {
        Locale locale = Locale.getDefault();
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, locale);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, locale);
        QName result = jdomNodePointerElement.getName();
        assertEquals("elementName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Element() {
        Locale locale = Locale.getDefault();
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, locale);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, locale);
        QName result = jdomNodePointerElement.getName();
        assertEquals("ns", result.getPrefix());
        assertEquals("elementName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstruction() {
        Locale locale = Locale.getDefault();
        // Setup for Element node
        when(element.getNamespacePrefix()).thenReturn("ns");
        when(element.getName()).thenReturn("elementName");
        jdomNodePointerElement = new JDOMNodePointer(element, locale);
        // Setup for ProcessingInstruction node
        when(processingInstruction.getTarget()).thenReturn("targetName");
        jdomNodePointerProcessingInstruction = new JDOMNodePointer(processingInstruction, locale);
        QName result = jdomNodePointerProcessingInstruction.getName();
        assertEquals(null, result.getPrefix()); // No namespace prefix expected
        assertEquals("targetName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElementAndDocumentValue_vIHO3() {
        Element node = new Element("node");
        Document value = new Document(new Element("root"));
        value.getRootElement().addContent(new Text("DocContent"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(value);
        assertEquals(1, node.getContentSize());
        assertTrue(node.getContent(0) instanceof Text);
        assertEquals("DocContent", ((Text)node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithElementAndCDATAValue_OfNv5() {
        Element node = new Element("node");
        CDATA value = new CDATA("CDataValue");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(value);
        assertEquals(1, node.getContentSize());
        assertTrue(node.getContent(0) instanceof CDATA);
        assertEquals("CDataValue", ((CDATA)node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithElementHavingPrefix() {
        // Setup is not required to instantiate JDOMNodePointer as getPrefix is a static method
        when(element.getNamespacePrefix()).thenReturn("ns");
        String result = JDOMNodePointer.getPrefix(element);
        assertEquals("ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithElementHavingNoPrefix() {
        // Setup is not required to instantiate JDOMNodePointer as getPrefix is a static method
        when(element.getNamespacePrefix()).thenReturn("");
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithElementHavingNullPrefix() {
        // Setup is not required to instantiate JDOMNodePointer as getPrefix is a static method
        when(element.getNamespacePrefix()).thenReturn(null);
        String result = JDOMNodePointer.getPrefix(element);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCDATA_tZRX4() {
        Element node = new Element("node");
        CDATA cdata = new CDATA("CDATA content");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(cdata);
        assertEquals("CDATA content", ((CDATA)node.getContent(0)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNonStringableObject_WUrR8() {
        Element node = new Element("node");
        Object nonStringable = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(nonStringable);
        assertTrue(node.getContent().isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithArrayList_natQ11() {
        Element node = new Element("node");
        ArrayList<Object> list = new ArrayList<>();
        list.add(new Element("elem").addContent(new Text("ListElement")));
        list.add(new Text("ListText"));
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        pointer.setValue(list);
        assertEquals("ListElement", ((Text)((Element)node.getContent(0)).getContent(0)).getText());
        assertEquals("ListText", ((Text)node.getContent(1)).getText());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithNamespace() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(element.getNamespaceURI()).thenReturn("http://example.com/");
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        String prefix = "ex";
        String localName = "attribute";
        String namespaceUri = "http://example.com/";
        qName = new QName(prefix, localName);
        when(namespaceResolver.getNamespaceURI(prefix)).thenReturn(namespaceUri);
        when(element.getAttribute(localName, Namespace.getNamespace(prefix, namespaceUri))).thenReturn(null);
        when(jdomNodePointer.attributeIterator(qName)).thenReturn(nodeIterator);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        NodePointer result = jdomNodePointer.createAttribute(context, qName);
        verify(element).setAttribute(localName, "", Namespace.getNamespace(prefix, namespaceUri));
        verify(nodeIterator).setPosition(1);
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithoutNamespace() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(element.getNamespaceURI()).thenReturn("http://example.com/");
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        String localName = "attribute";
        qName = new QName(localName);
        when(element.getAttribute(localName)).thenReturn(null);
        when(jdomNodePointer.attributeIterator(qName)).thenReturn(nodeIterator);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        NodePointer result = jdomNodePointer.createAttribute(context, qName);
        verify(element).setAttribute(localName, "");
        verify(nodeIterator).setPosition(1);
        assertEquals(nodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithUnknownNamespacePrefix() throws Exception {
        jdomNodePointer = new JDOMNodePointer(element, Locale.getDefault());
        when(element.getNamespaceURI()).thenReturn("http://example.com/");
        when(jdomNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        String prefix = "unknown";
        String localName = "attribute";
        qName = new QName(prefix, localName);
        when(namespaceResolver.getNamespaceURI(prefix)).thenReturn(null);
        Exception exception = assertThrows(JXPathException.class, () -> {
            jdomNodePointer.createAttribute(context, qName);
        });
        assertTrue(exception.getMessage().contains("Unknown namespace prefix"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithDocument_oyht2() {
        Document document = new Document();
        JDOMNodePointer nodePointer = new JDOMNodePointer(document, Locale.getDefault());
        assertTrue(nodePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithElement() throws Exception {
        // Setup mock behavior
        when(element.getName()).thenReturn("elementName");
        when(attribute.getName()).thenReturn("attributeName");
        String localName = JDOMNodePointer.getLocalName(element);
        assertEquals("elementName", localName, "The local name of the element should match the mocked response.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithAttribute() throws Exception {
        // Setup mock behavior
        when(element.getName()).thenReturn("elementName");
        when(attribute.getName()).thenReturn("attributeName");
        String localName = JDOMNodePointer.getLocalName(attribute);
        assertEquals("attributeName", localName, "The local name of the attribute should match the mocked response.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithNull() throws Exception {
        // Setup mock behavior
        when(element.getName()).thenReturn("elementName");
        when(attribute.getName()).thenReturn("attributeName");
        String localName = JDOMNodePointer.getLocalName(null);
        assertEquals(null, localName, "The local name should be null when the node is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage() throws Exception {
        // Assuming JDOMNodePointer has a constructor that accepts node and locale
        jdomNodePointer = new JDOMNodePointer(node, Locale.ENGLISH);
        // Setup the expected behavior of the mocked method
        when(jdomNodePointer.findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE)).thenReturn("en");
        // Execute the method under test
        String language = jdomNodePointer.getLanguage();
        // Verify the behavior was called as expected
        verify(jdomNodePointer).findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE);
        // Assert the result
        assertEquals("en", language, "The language should be 'en'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_gLLU0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = jDOMNodePointer.namespacePointer(prefix);
    assertNotNull(result);
    assertEquals(JDOMNamespacePointer.class, result.getClass());
    assertEquals(prefix, result.getName().getPrefix());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLanguage_wJfL0() {
    Object node = new Object(); // Mock object node
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    String expectedLanguage = "en"; // Assuming 'lang' attribute is set to 'en'
    String actualLanguage = jDOMNodePointer.getLanguage();
    assertEquals(expectedLanguage, actualLanguage);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_FCYF0() {
    Object node = new Object();
    Locale locale = new Locale("en", "US");
    JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
    JXPathContext context = JXPathContext.newContext(null, new Object());
    QName name = new QName("testName");
    int index = 0;
    String value = "testValue";
    NodePointer result = jDOMNodePointer.createChild(context, name, index, value);
    assertEquals("testValue", result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_ElementPrefix_ReturnsCorrectNamespaceURI() throws Exception {
        jdomNodePointer = new JDOMNodePointer(document, Locale.getDefault());
        // Setup
        String prefix = "ex";
        String expectedUri = "http://example.com/ns";
        when(document.getRootElement()).thenReturn(element);
        when(element.getNamespace(prefix)).thenReturn(Namespace.getNamespace(prefix, expectedUri));
        // Execute
        String result = jdomNodePointer.getNamespaceURI(prefix);
        // Verify
        assertEquals(expectedUri, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NoNamespaceFound_ReturnsNull() throws Exception {
        jdomNodePointer = new JDOMNodePointer(document, Locale.getDefault());
        // Setup
        String prefix = "unknown";
        when(document.getRootElement()).thenReturn(element);
        when(element.getNamespace(prefix)).thenReturn(null);
        // Execute
        String result = jdomNodePointer.getNamespaceURI(prefix);
        // Verify
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_Found() throws Exception {
        when(element.getAttributeValue(ATTRIBUTE_NAME, namespace)).thenReturn(ATTRIBUTE_VALUE);
        // Setup the scenario where the attribute is found
        Object node = element; // Assuming 'nodeParent' would return null, stopping the loop
        // Act
        String result = JDOMNodePointer.findEnclosingAttribute(node, ATTRIBUTE_NAME, namespace);
        // Assert
        assertEquals(ATTRIBUTE_VALUE, result, "The attribute value should be returned when found.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NotFound() throws Exception {
        when(element.getAttributeValue(ATTRIBUTE_NAME, namespace)).thenReturn(ATTRIBUTE_VALUE);
        // Setup the scenario where the attribute is not found
        when(element.getAttributeValue(ATTRIBUTE_NAME, namespace)).thenReturn(null);
        Object node = element; // Assuming 'nodeParent' would return null, stopping the loop
        // Act
        String result = JDOMNodePointer.findEnclosingAttribute(node, ATTRIBUTE_NAME, namespace);
        // Assert
        assertNull(result, "The result should be null when the attribute is not found.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_EmptyAttributeValue() throws Exception {
        when(element.getAttributeValue(ATTRIBUTE_NAME, namespace)).thenReturn(ATTRIBUTE_VALUE);
        // Setup the scenario where the attribute value is empty
        when(element.getAttributeValue(ATTRIBUTE_NAME, namespace)).thenReturn("");
        Object node = element; // Assuming 'nodeParent' would return null, stopping the loop
        // Act
        String result = JDOMNodePointer.findEnclosingAttribute(node, ATTRIBUTE_NAME, namespace);
        // Assert
        assertNull(result, "The result should be null when the attribute value is empty.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNoParent_BDqI0() {
        Element node = new Element("testElement");
        JDOMNodePointer pointer = new JDOMNodePointer(node, Locale.getDefault());
        String result = pointer.asPath();
        assertEquals("/testElement[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndParent_Ipbe5() {
        Element child = new Element("child");
        Element parent = new Element("parent");
        parent.addContent(child);
        JDOMNodePointer childPointer = new JDOMNodePointer(new JDOMNodePointer(parent, Locale.getDefault()), child);
        String result = childPointer.asPath();
        assertEquals("/parent/child[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeMultipleChildren_jOoO7() {
        Element parent = new Element("parent");
        Element child1 = new Element("child");
        Element child2 = new Element("child");
        parent.addContent(child1);
        parent.addContent(child2);
        JDOMNodePointer childPointer = new JDOMNodePointer(new JDOMNodePointer(parent, Locale.getDefault()), child2);
        String result = childPointer.asPath();
        assertEquals("/parent/child[2]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeMultipleDifferentChildren_dhIh8() {
        Element parent = new Element("parent");
        Element child1 = new Element("child1");
        Element child2 = new Element("child2");
        parent.addContent(child1);
        parent.addContent(child2);
        JDOMNodePointer childPointer = new JDOMNodePointer(new JDOMNodePointer(parent, Locale.getDefault()), child2);
        String result = childPointer.asPath();
        assertEquals("/parent/child2[1]", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespace_Yuhg7() {
        Element elementNode = new Element("testElement", "http://example.com/ns");
        JDOMNodePointer pointer = new JDOMNodePointer(elementNode, Locale.getDefault());
        String result = pointer.asPath();
        assertEquals("ns:testElement[1]", result);
    }
}