/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Failing {
    private CoreFunction coreFunction;
    private EvalContext mockContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionStartsWith_NullStrings_giYQ3() {
        EvalContext context = mock(EvalContext.class);
        Expression arg1 = mock(Expression.class);
        Expression arg2 = mock(Expression.class);
        when(arg1.computeValue(context)).thenReturn(null);
        when(arg2.computeValue(context)).thenReturn(null);
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2});
        Object result = coreFunction.functionStartsWith(context);
        assertFalse((Boolean) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithZeroArguments_bYFZ0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        QName name = mock(QName.class);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(name);
        when(name.toString()).thenReturn("NodeName");
        when(coreFunction.getArgumentCount()).thenReturn(0);
        assertEquals("NodeName", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithOneArgumentButNoEvalContext_dyms1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        Expression expression = coreFunction.getArg1();
        when(expression.compute(context)).thenReturn(new Object());
        when(coreFunction.getArgumentCount()).thenReturn(1);
        assertEquals("", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithOneArgumentAndEvalContextButNoNext_AVXA2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        Expression expression = coreFunction.getArg1();
        when(expression.compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(false);
        when(coreFunction.getArgumentCount()).thenReturn(1);
        assertEquals("", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithOneArgumentAndEvalContextWithNext_zqal3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        QName name = mock(QName.class);
        Expression expression = coreFunction.getArg1();
        when(expression.compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(true);
        when(setContext.next()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(name);
        when(name.toString()).thenReturn("NextNodeName");
        when(coreFunction.getArgumentCount()).thenReturn(1);
        assertEquals("NextNodeName", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameAssertArgCount_Wztq4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        try {
            coreFunction.functionName(context);
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid argument count", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithInvalidArgumentType_yVie5() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        Expression expression = coreFunction.getArg1();
        when(expression.compute(context)).thenReturn(new String("Not an EvalContext"));
        when(coreFunction.getArgumentCount()).thenReturn(1);
        assertEquals("", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithNullNodePointer_nvPO6() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentNodePointer()).thenReturn(null);
        when(coreFunction.getArgumentCount()).thenReturn(0);
        assertEquals("", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithNullNodeName_zAbW7() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(null);
        when(coreFunction.getArgumentCount()).thenReturn(0);
        assertEquals("", coreFunction.functionName(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNameWithNullExpressionArray_Ilzy9() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArgumentCount()).thenReturn(1);
        try {
            coreFunction.functionName(context);
            fail("Expected a NullPointerException to be thrown");
        } catch (NullPointerException e) {
            assertNotNull(e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_NoArguments_NodePointerNullNamespace_vNuv0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        when(coreFunction.getArgumentCount()).thenReturn(0);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn(null);
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_OneArgument_NonEvalContext_TpfO3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        Expression expression = coreFunction.getArg1();
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(expression.compute(context)).thenReturn(new Object());
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_OneArgument_EvalContextNoNext_pMER4() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        Expression expression = coreFunction.getArg1();
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(expression.compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(false);
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_OneArgument_EvalContextHasNextNullNamespace_qXEL5() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        Expression expression = coreFunction.getArg1();
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(expression.compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(true);
        when(setContext.next()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn(null);
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNamespaceURI_OneArgument_EvalContextHasNextNonNullNamespace_sDkP6() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        Expression expression = coreFunction.getArg1();
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(expression.compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(true);
        when(setContext.next()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn("http://example.com");
        String result = (String) coreFunction.functionNamespaceURI(context);
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionConcatWithNullValues_XCcs4() {
        Expression[] args = {mock(Expression.class), mock(Expression.class)};
        CoreFunction coreFunction = new CoreFunction(0, args);
        EvalContext context = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn(null);
        when(args[1].compute(context)).thenReturn(null);
        String result = (String) coreFunction.functionConcat(context);
        assert result.equals("nullnull");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithInitialPositionNonZero_fQEj3() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(3);
        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(context).setPosition(3);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(2), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context).setPosition(3);
        verify(context, times(3)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithInitialPositionReset_saLt4() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(1);
        when(context.nextNode()).thenReturn(true).thenReturn(false);
        doNothing().when(context).setPosition(1);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(1), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context).setPosition(1);
        verify(context, times(2)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithInitialPositionAndMultipleResets_XSIK5() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(2);
        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(context).setPosition(2);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(3), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context).setPosition(2);
        verify(context, times(4)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLastWithMultipleResetsAndPositions_cFtF7() {
        EvalContext context = mock(EvalContext.class);
        when(context.getCurrentPosition()).thenReturn(5);
        when(context.nextNode()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(context).setPosition(5);
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(Double.valueOf(5), coreFunction.functionLast(context));
        verify(context).getCurrentPosition();
        verify(context).reset();
        verify(context).setPosition(5);
        verify(context, times(6)).nextNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalName_NoArguments_eRiO0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        QName qName = mock(QName.class);
        when(context.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(qName);
        when(qName.getName()).thenReturn("nodeName");
        when(coreFunction.getArgumentCount()).thenReturn(0);
        Object result = coreFunction.functionLocalName(context);
        assertEquals("nodeName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalName_WithArguments_HasNext_KCeT1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        NodePointer nodePointer = mock(NodePointer.class);
        QName qName = mock(QName.class);
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(coreFunction.getArg1()).thenReturn(mock(Expression.class));
        when(coreFunction.getArg1().compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(true);
        when(setContext.next()).thenReturn(nodePointer);
        when(nodePointer.getName()).thenReturn(qName);
        when(qName.getName()).thenReturn("nodeName");
        Object result = coreFunction.functionLocalName(context);
        assertEquals("nodeName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalName_WithArguments_NoNext_mfGm2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        EvalContext setContext = mock(EvalContext.class);
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(coreFunction.getArg1()).thenReturn(mock(Expression.class));
        when(coreFunction.getArg1().compute(context)).thenReturn(setContext);
        when(setContext.hasNext()).thenReturn(false);
        Object result = coreFunction.functionLocalName(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalName_WithArguments_InvalidType_zKCg3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArgumentCount()).thenReturn(1);
        when(coreFunction.getArg1()).thenReturn(mock(Expression.class));
        when(coreFunction.getArg1().compute(context)).thenReturn(new Object());
        Object result = coreFunction.functionLocalName(context);
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLocalName_AssertArgCount_ufEQ4() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[]{mock(Expression.class), mock(Expression.class)});
        EvalContext context = mock(EvalContext.class);
        try {
            coreFunction.functionLocalName(context);
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid argument count", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionKey_AssertArgCount_KaHI0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
        EvalContext context = mock(EvalContext.class);
        coreFunction.functionKey(context);
    }
@Test
    public void testFunctionSubstringWithInvalidArgumentCount_LYmd2_ZKbo0() {
        CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
        EvalContext context = mock(EvalContext.class);
        when(coreFunction.getArgumentCount()).thenReturn(1); // Invalid argument count for substring function
        try {
            coreFunction.functionSubstring(context);
            fail("Expected an AssertionError to be thrown");
        } catch (AssertionError e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithEmptyFirstString_BkgN1_epMA0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("");
    when(exp2.computeValue(context)).thenReturn("test");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithNonMatchingSecondString_iRti2_uBpn0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("world");
    Object result = coreFunction.functionSubstringBefore(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithMatchingSecondString_KAjd3_TsZP0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello world");
    when(exp2.computeValue(context)).thenReturn(" world");
    Object result = coreFunction.functionSubstringBefore(context);
    assertEquals("hello", result.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithEmptySecondString_JwoH4_lUnH0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithBothStringsEmpty_cJkN5_MEhz0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("");
    when(exp2.computeValue(context)).thenReturn(0.0); // Changed to return a number since substring expects a number for the second argument
    Object result = coreFunction.functionSubstring(context); // Changed method name to functionSubstring
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithSameStrings_EJKH6_QGVk0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("hello");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_Jfcv0_mXli0() {
    EvalContext context = mock(EvalContext.class);
    Object expectedValue = "Expected Result";
    when(context.getValue()).thenReturn(expectedValue);
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    Object result = coreFunction.functionSubstring(context);
    assertEquals(expectedValue, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoArguments_OUJJ0_qfRW0() {
    Expression[] args = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(1, args);
    assertEquals("CoreFunction()", coreFunction.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNullArguments_JqSZ3_dQtg0() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    assertEquals("CoreFunction()", coreFunction.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_FunctionLast_uCsp1_DFAp0() {
    assertTrue(coreFunction.computeContextDependent(), "Expected to return true for FUNCTION_LAST");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_FunctionSum_xJyh4_Rchd0() {
    assertFalse(coreFunction.computeContextDependent(), "Expected to return false for FUNCTION_SUM");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_FunctionBoolean_EmptyArgs_ilvw5_bqtL0() {
    assertTrue(coreFunction.computeContextDependent(), "Expected to return true for FUNCTION_BOOLEAN with empty args");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithOneArgument_ATgN1_eekj0() {
    CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
    EvalContext context = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    Object computedValue = "computedValue";
    when(coreFunction.getArgumentCount()).thenReturn(1);
    when(coreFunction.getArg1()).thenReturn(arg1);
    when(arg1.computeValue(context)).thenReturn(computedValue);
    when(InfoSetUtil.stringValue(computedValue)).thenReturn("stringValue");
    Object result = coreFunction.functionString(context);
    verify(coreFunction).getArgumentCount();
    verify(coreFunction).getArg1();
    verify(arg1).computeValue(context);
    assert "stringValue".equals(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithOneArgumentNullValue_mdyG3_fffz0() {
    CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
    EvalContext context = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    when(coreFunction.getArgumentCount()).thenReturn(1);
    when(coreFunction.getArg1()).thenReturn(arg1);
    when(arg1.computeValue(context)).thenReturn(null);
    Object result = coreFunction.functionString(context);
    verify(coreFunction).getArgumentCount();
    verify(coreFunction).getArg1();
    verify(arg1).computeValue(context);
    assert result == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithEmptySecondString_JwoH4_lUnH0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("hello");
    when(exp2.computeValue(context)).thenReturn("");
    Object result = coreFunction.functionSubstring(context);
    assertEquals("hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringBeforeWithBothStringsEmpty_cJkN5_MEhz0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression exp1 = mock(Expression.class);
    Expression exp2 = mock(Expression.class);
    when(coreFunction.getArg1()).thenReturn(exp1);
    when(coreFunction.getArg2()).thenReturn(exp2);
    when(exp1.computeValue(context)).thenReturn("");
    when(exp2.computeValue(context)).thenReturn(""); // Corrected to return a string since substring expects a string for the second argument
    Object result = coreFunction.functionSubstring(context); // Assuming functionSubstring is the correct method name
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_Jfcv0_mXli0_fid1() {
    EvalContext context = mock(EvalContext.class);
    Object expectedValue = "Incorrect number of arguments: last()";
    when(context.getValue()).thenReturn(expectedValue);
    CoreFunction coreFunction = new CoreFunction(1, new Expression[0]);
    Object result = coreFunction.functionSubstring(context);
    assertEquals(expectedValue, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithOneArgument_ATgN1_eekj0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
    EvalContext context = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    Object computedValue = "computedValue";
    when(coreFunction.getArgumentCount()).thenReturn(1);
    when(coreFunction.getArg1()).thenReturn(arg1);
    when(arg1.computeValue(context)).thenReturn(computedValue);
    when(InfoSetUtil.stringValue(computedValue)).thenReturn("stringValue");
    Object result = coreFunction.functionString(context);
    verify(coreFunction).getArgumentCount();
    verify(coreFunction).getArg1();
    verify(arg1).computeValue(context);
    assertEquals("stringValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringWithOneArgumentNullValue_mdyG3_fffz0_fid1() {
    CoreFunction coreFunction = mock(CoreFunction.class, CALLS_REAL_METHODS);
    EvalContext context = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    when(coreFunction.getArgumentCount()).thenReturn(1);
    when(arg1.computeValue(context)).thenReturn(null);
    when(coreFunction.getArg1()).thenReturn(arg1);
    Object result = coreFunction.functionString(context);
    verify(coreFunction).getArgumentCount();
    verify(coreFunction).getArg1();
    verify(arg1).computeValue(context);
    assertNull(result);
}
}