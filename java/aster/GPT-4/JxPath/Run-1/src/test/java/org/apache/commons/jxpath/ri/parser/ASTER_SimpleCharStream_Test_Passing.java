/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithSufficientBufferBeforePosition_VCjm0() {
    java.io.StringReader reader = new java.io.StringReader("HelloWorld");
    SimpleCharStream scs = new SimpleCharStream(reader, 1, 1);
    scs.buffer = "HelloWorld".toCharArray();
    scs.bufpos = 9;
    scs.bufsize = 10;
    char[] result = scs.GetSuffix(5);
    assertArrayEquals(new char[] {'W', 'o', 'r', 'l', 'd'}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSuffixWithWrapAroundBuffer_Ouom1() {
    java.io.StringReader reader = new java.io.StringReader("HelloWorld");
    SimpleCharStream scs = new SimpleCharStream(reader, 1, 1);
    scs.buffer = "WorldHello".toCharArray();
    scs.bufpos = 4;
    scs.bufsize = 10;
    char[] result = scs.GetSuffix(7);
    assertArrayEquals(new char[] {'l', 'o', 'W', 'o', 'r', 'l', 'd'}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_WcGq0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(5, scs.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_WcGq0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(-1, scs.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndSameSizeBuffer_Nqaz1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(10, scs.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndSameSizeBuffer_Nqaz1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(-1, scs.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndLargerBuffer_ihAU2_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
        assertEquals(20, scs.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndLargerBuffer_ihAU2_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
        assertEquals(-1, scs.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImageSingleToken_VyxP0() {
        java.io.StringReader reader = new java.io.StringReader("hello");
        SimpleCharStream stream = new SimpleCharStream(reader);
        stream.tokenBegin = 0;
        stream.bufpos = 4;
        stream.buffer = new char[]{'h', 'e', 'l', 'l', 'o'};
        String result = stream.GetImage();
        assertEquals("hello", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithInputStream_KwlK0() {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    stream.ReInit(System.in, 1, 1);
    assertNotNull(stream); // Example assertion to ensure the stream object is not null.
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReInitWithValidReader_QTBm0() {
    java.io.StringReader reader = new java.io.StringReader("Sample input");
    SimpleCharStream charStream = new SimpleCharStream(reader);
    charStream.ReInit(reader, 1, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(2048 + 10, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(2048 + 10, stream.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0_4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(2048 + 10, stream.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_IItq1_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 3;
        stream.bufpos = 9;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(false);
        assertEquals(6, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_IItq1_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 3;
        stream.bufpos = 9;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(false);
        assertEquals(2048 + 10, stream.buffer.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_IItq1_3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 3;
        stream.bufpos = 9;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(false);
        assertEquals(2048 + 10, stream.bufline.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_IItq1_4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 3;
        stream.bufpos = 9;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(false);
        assertEquals(2048 + 10, stream.bufcolumn.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFillBuff_UsingReaderWithDefaultBufferSize_ATwl8_aczs0() throws Exception {
    java.io.StringReader reader = new java.io.StringReader("Default buffer size test.");
    SimpleCharStream scs = new SimpleCharStream(reader);
    scs.FillBuff();
    assertTrue(scs.maxNextCharInd > 0);
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginLine_UtuA0_fid1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""),0,0);
    int expectedLine =0;
    assertEquals(expectedLine, stream.getBeginLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImageWrappedToken_NWxz1_fid1() {
        java.io.StringReader reader = new java.io.StringReader("elloworld");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 10);
        stream.tokenBegin = 6;
        stream.bufpos = 4;
        stream.bufsize = 10;
        stream.buffer = new char[]{'w', 'o', 'r', 'l', 'd', 'h', 'e', 'l', 'l', 'o'};
        String result = stream.GetImage();
        assertEquals("elloworld", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginColumn_qiDO0_fid1() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1,0);
    int expectedColumn =0; // Assuming tokenBegin is initialized to 0 and bufcolumn[0] is set to0
    assertEquals(expectedColumn, stream.getBeginColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(15, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithPositiveAmount_Pqno0_tkUq0_fid1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.backup(1);
}
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithNegativeAmount_xbzn1_oSsP0_fid1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"),0,0);
    stream.backup(-1);
    assertEquals(1, stream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndSmallerBuffer_WcGq0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 5);
        assertEquals(5, scs.buffer.length);
        assertEquals(-1, scs.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithSameReaderAndSameSizeBuffer_Nqaz1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 10);
        assertEquals(10, scs.buffer.length);
        assertEquals(-1, scs.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithNewReaderAndLargerBuffer_ihAU2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 5);
        scs.ReInit(new java.io.StringReader("test"), 1, 1, 20);
        assertEquals(20, scs.buffer.length);
        assertEquals(-1, scs.bufpos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundFalse_IItq1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 3;
        stream.bufpos = 9;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(false);
        assertEquals(6, stream.bufpos);
        assertEquals(2048 + 10, stream.buffer.length);
        assertEquals(2048 + 10, stream.bufline.length);
        assertEquals(2048 + 10, stream.bufcolumn.length);
    }
}