/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointerFactory_Test_Failing {
@InjectMocks
    private BeanPointerFactory beanPointerFactory;
@Mock
    private NodePointer parent;
@Mock
    private QName name;
@Mock
    private Object bean;
@Mock
    private JXPathBeanInfo beanInfo;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNullBean_wxiB0_4() throws Exception {
    Class<?> beanClass = Object.class;
    JXPathIntrospector jXPathIntrospectorMock = mock(JXPathIntrospector.class);
    when(jXPathIntrospectorMock.getBeanInfo(beanClass)).thenReturn(beanInfo);
    NodePointer result = beanPointerFactory.createNodePointer(parent, name, bean);
    BeanPointer beanPointer = (BeanPointer) result;
    assertSame(bean, beanPointer.getBaseValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_xnuG0_cwAZ0_fid3() {
    BeanPointerFactory factory = new BeanPointerFactory();
    int expected = 0; // Assuming default order as 0 since BEAN_POINTER_FACTORY_ORDER is not defined
    assertEquals(expected, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNullBean_wxiB0_1() throws Exception {
    Class<?> beanClass = Object.class;
    when(JXPathIntrospector.getBeanInfo(beanClass)).thenReturn(beanInfo);
    NodePointer result = beanPointerFactory.createNodePointer(parent, name, bean);
    BeanPointer beanPointer = (BeanPointer) result;
    assertTrue(result instanceof BeanPointer, "Expected a BeanPointer when bean is not null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNullBean_wxiB0_2() throws Exception {
    Class<?> beanClass = Object.class;
    when(JXPathIntrospector.getBeanInfo(beanClass)).thenReturn(beanInfo);
    NodePointer result = beanPointerFactory.createNodePointer(parent, name, bean);
    BeanPointer beanPointer = (BeanPointer) result;
    assertSame(parent, beanPointer.getParent(), "Parent pointer should match the one provided");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNullBean_wxiB0_3() throws Exception {
    Class<?> beanClass = Object.class;
    when(JXPathIntrospector.getBeanInfo(beanClass)).thenReturn(beanInfo);
    NodePointer result = beanPointerFactory.createNodePointer(parent, name, bean);
    BeanPointer beanPointer = (BeanPointer) result;
    assertSame(name, beanPointer.getName(), "QName should match the one provided");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonNullBean_wxiB0_4_fid3() throws Exception {
    Class<?> beanClass = Object.class;
    when(JXPathIntrospector.getBeanInfo(beanClass)).thenReturn(beanInfo);
    NodePointer result = beanPointerFactory.createNodePointer(parent, name, bean);
    BeanPointer beanPointer = (BeanPointer) result;
    assertSame(bean, beanPointer.getBaseValue(), "Bean should match the one provided");}
}