/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Passing {
@Mock
    private QName functionName;
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private Function function;
@Mock
    private Expression[] args;
@Mock
    private NodeSet nodeSet;
@InjectMocks
    private ExtensionFunction extensionFunction;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionName_cVXY0() {
    QName functionName = new QName("prefix", "localName");
    Expression[] args = new Expression[0];
    ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
    QName result = extensionFunction.getFunctionName();
    assertEquals("prefix:localName", result.getPrefix() + ":" + result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionFound_ReturnsResult() throws Exception {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] { "param1", "param2" };
        when(args.length).thenReturn(2);
        when(args[0].compute(context)).thenReturn("param1");
        when(args[1].compute(context)).thenReturn("param2");
        when(rootContext.getFunction(functionName, parameters)).thenReturn(function);
        when(function.invoke(context, parameters)).thenReturn("result");
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute
        Object result = extensionFunction.computeValue(context);
        // Verify
        assertEquals("result", result);
        verify(function).invoke(context, parameters);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionNotFound_ThrowsException_1() {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] { "param1" };
        when(args.length).thenReturn(1);
        when(args[0].compute(context)).thenReturn("param1");
        when(rootContext.getFunction(functionName, parameters)).thenReturn(null);
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute & Verify
        Exception exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionReturnsNodeSet_WrapsInNodeSetContext_1() throws Exception {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] {};
        when(args.length).thenReturn(0);
        when(rootContext.getFunction(functionName, parameters)).thenReturn(function);
        when(function.invoke(context, parameters)).thenReturn(nodeSet);
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute
        Object result = extensionFunction.computeValue(context);
        // Verify
        assertTrue(result instanceof NodeSetContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionReturnsNodeSet_WrapsInNodeSetContext_2() throws Exception {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] {};
        when(args.length).thenReturn(0);
        when(rootContext.getFunction(functionName, parameters)).thenReturn(function);
        when(function.invoke(context, parameters)).thenReturn(nodeSet);
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute
        Object result = extensionFunction.computeValue(context);
        // Verify
        assertEquals(nodeSet, ((NodeSetContext) result).getNodeSet());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NoArguments_omMB0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction function = new ExtensionFunction(functionName, args);
        assertEquals("testFunction()", function.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_wZvK0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        assertTrue(extensionFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_XOkm0() throws Exception {
    extensionFunction = new ExtensionFunction(functionName, null);
    Object expectedValue = new Object();
    when(context.getValue()).thenReturn(expectedValue); // Corrected method to getValue()
    Object result = extensionFunction.computeValue(context); // Corrected method to computeValue()
    verify(context).getValue(); // Verify that getValue was called on the context
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionNotFound_ThrowsException() {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] { "param1" };
        when(args.length).thenReturn(1);
        when(args[0].compute(context)).thenReturn("param1");
        when(rootContext.getFunction(functionName, parameters)).thenReturn(null);
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute & Verify
        Exception exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });
        assertTrue(exception.getMessage().contains("No such function:"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionReturnsNodeSet_WrapsInNodeSetContext() throws Exception {
        when(context.getRootContext()).thenReturn(rootContext);
        // Setup
        Object[] parameters = new Object[] {};
        when(args.length).thenReturn(0);
        when(rootContext.getFunction(functionName, parameters)).thenReturn(function);
        when(function.invoke(context, parameters)).thenReturn(nodeSet);
        // Configure ExtensionFunction
        extensionFunction = new ExtensionFunction(functionName, args);
        // Execute
        Object result = extensionFunction.computeValue(context);
        // Verify
        assertTrue(result instanceof NodeSetContext);
        assertEquals(nodeSet, ((NodeSetContext) result).getNodeSet());
    }
}