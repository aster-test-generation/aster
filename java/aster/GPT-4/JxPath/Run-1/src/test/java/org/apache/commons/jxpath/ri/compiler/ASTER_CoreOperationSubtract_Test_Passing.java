/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationSubtract_Test_Passing {
private CoreOperationSubtract coreOperationSubtract;
private Constant arg1;
private Constant arg2;
private EvalContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbolReturnsHyphen_TuPq0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationSubtract subtractOperation = new CoreOperationSubtract(arg1, arg2);
    assertEquals("-", subtractOperation.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        // Setup the mock behavior
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(4.0);
        // Execute the method under test
        Object result = coreOperationSubtract.computeValue(context);
        // Verify the results
        assertNotNull(result, "Result should not be null");
        assertTrue(result instanceof Double, "Result should be of type Double");
        assertEquals(6.0, (Double) result, 0.001, "The subtraction result should be correct");
        // Verify interactions
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsFalse_EaFj0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationSubtract operation = new CoreOperationSubtract(arg1, arg2);
    assertFalse(operation.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_1() {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        // Setup the mock behavior
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(4.0);
        // Execute the method under test
        Object result = coreOperationSubtract.computeValue(context);
        // Verify the results
        // Verify interactions
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
        assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_2() {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        // Setup the mock behavior
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(4.0);
        // Execute the method under test
        Object result = coreOperationSubtract.computeValue(context);
        // Verify the results
        // Verify interactions
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
        assertTrue(result instanceof Double, "Result should be of type Double");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_3() {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationSubtract = new CoreOperationSubtract(arg1, arg2);
        // Setup the mock behavior
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(4.0);
        // Execute the method under test
        Object result = coreOperationSubtract.computeValue(context);
        // Verify the results
        // Verify interactions
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
        assertEquals(6.0, (Double) result, 0.001, "The subtraction result should be correct");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_VKvY0_YEtH0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationSubtract subtractOperation = new CoreOperationSubtract(arg1, arg2);
    int expectedPrecedence = subtractOperation.getPrecedence(); // Correctly using the method to get the expected precedence
    assertEquals(expectedPrecedence, subtractOperation.getPrecedence());
}
}