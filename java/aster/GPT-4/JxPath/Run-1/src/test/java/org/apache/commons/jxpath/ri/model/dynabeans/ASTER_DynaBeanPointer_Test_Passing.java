/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
@Mock
    private QName name;
@Mock
    private DynaBean dynaBean;
@Mock
    private DOMNodePointer parent;
private DynaBeanPointer dynaBeanPointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private QName qName;
@Mock
    private Locale locale;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private QName mockName;
@Mock
    private DynaBean mockDynaBean;
private DynaBeanPointer dynaBeanPointerWithParent;
private DynaBeanPointer dynaBeanPointerWithoutParent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynaBeanPointer.equals(dynaBeanPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        assertFalse(dynaBeanPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        Object differentObject = new Object();
        assertFalse(dynaBeanPointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent_ReturnsFalse() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        DynaBeanPointer different = new DynaBeanPointer(differentParent, name, dynaBean);
        assertFalse(dynaBeanPointer.equals(different));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        QName differentName = mock(QName.class);
        DynaBeanPointer different = new DynaBeanPointer(parent, differentName, dynaBean);
        assertFalse(dynaBeanPointer.equals(different));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentDynaBean_ReturnsFalse() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBean differentDynaBean = mock(DynaBean.class);
        DynaBeanPointer different = new DynaBeanPointer(parent, name, differentDynaBean);
        assertFalse(dynaBeanPointer.equals(different));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields_ReturnsTrue() {
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        DynaBeanPointer same = new DynaBeanPointer(parent, name, dynaBean);
        assertTrue(dynaBeanPointer.equals(same));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        QName qName = new QName("testName");
        DynaBean dynaBean = null; // Assuming DynaBean is an interface or class you can mock if needed
        Locale locale = Locale.getDefault();
        dynaBeanPointer = new DynaBeanPointer(qName, dynaBean, locale);
        // Since isCollection method returns false, we assert that it indeed returns false
        assertFalse(dynaBeanPointer.isCollection(), "isCollection should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_xURs0() {
    QName qName = new QName("testName");
    Locale locale = new Locale("en", "US");
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(qName, dynaBean, locale);
    assertFalse(dynaBeanPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        // Act
        PropertyPointer result = dynaBeanPointer.getPropertyPointer();
        // Assert
        assertNotNull(result, "PropertyPointer should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        // Act
        PropertyPointer result = dynaBeanPointer.getPropertyPointer();
        // Assert
        assertTrue(result instanceof DynaBeanPropertyPointer, "Result should be an instance of DynaBeanPropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_3() throws Exception {
        dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        // Act
        PropertyPointer result = dynaBeanPointer.getPropertyPointer();
        // Assert
        assertSame(dynaBean, result.getBean(), "The bean in the property pointer should be the same as the mocked DynaBean");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithoutParent() throws Exception {
        // Create a DynaBeanPointer with a parent
        dynaBeanPointerWithParent = new DynaBeanPointer(mockParent, mockName, mockDynaBean);
        // Create a DynaBeanPointer without a parent (null parent)
        dynaBeanPointerWithoutParent = new DynaBeanPointer(null, mockName, mockDynaBean);
        // Mocking the behavior of asPath from the parent to return a specific path
        when(mockParent.asPath()).thenReturn("/parentPath");
        // Test asPath when there is no parent
        String result = dynaBeanPointerWithoutParent.asPath();
        assertEquals("/", result, "The path should be root '/' when there is no parent");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking dependencies of DynaBeanPointer
        DOMNodePointer parentNode = new DOMNodePointer(null, null, null);
        QName name = new QName("testName");
        DynaBean dynaBean = null; // Assuming DynaBean is an interface or class you can mock if needed
        // Initialize DynaBeanPointer with mocked objects
        dynaBeanPointer = new DynaBeanPointer(parentNode, name, dynaBean);
        // Act
        int length = dynaBeanPointer.getLength();
        // Assert
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsOne_tEnn0() {
    QName qName = new QName("testName");
    Locale locale = new Locale("en", "US");
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(qName, dynaBean, locale);
    int length = dynaBeanPointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        // Mock dependencies
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        QName name = new QName("testName");
        DynaBean dynaBean = null; // Assuming DynaBean is an interface or class you can mock if needed
        // Initialize the object to test
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        // Since isLeaf method returns false, we assert that it indeed returns false
        assertFalse(dynaBeanPointer.isLeaf(), "isLeaf should return false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_Eewq0() {
    QName name = new QName("testName");
    Locale locale = new Locale("en", "US");
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
    Object result = dynaBeanPointer.getBaseValue();
    assertEquals(dynaBean, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNonNullParent_KqEb1_XNua0() {
    org.w3c.dom.Node node = mock(org.w3c.dom.Node.class); // Using a mock object for Node
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    QName qName = new QName("testName");
    DynaBean dynaBean = mock(DynaBean.class); // Using a mock object for DynaBean since it's an interface
    DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(domNodePointer, qName, dynaBean);
    String result = dynaBeanPointer.asPath();
    assertNotEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Initialize DynaBeanPointer with mocks
        dynaBeanPointer = new DynaBeanPointer(parent, name, dynaBean);
        // Setup the behavior of the mock
        when(name.getName()).thenReturn("ExpectedName");
        // Execute the method to be tested
        QName result = dynaBeanPointer.getName();
        // Verify the result
        assertNotNull(result, "The result should not be null.");
        assertEquals("ExpectedName", result.getName(), "The name should match the expected value.");
        // Verify interactions
        verify(name, times(1)).getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        dynaBeanPointer = new DynaBeanPointer(name, dynaBean, locale);
        // Act
        PropertyPointer result = dynaBeanPointer.getPropertyPointer();
        // Assert
        assertNotNull(result, "PropertyPointer should not be null");
        assertTrue(result instanceof DynaBeanPropertyPointer, "Result should be an instance of DynaBeanPropertyPointer");
        assertSame(dynaBean, result.getBean(), "The bean in the property pointer should be the same as the mocked DynaBean");
    }
}