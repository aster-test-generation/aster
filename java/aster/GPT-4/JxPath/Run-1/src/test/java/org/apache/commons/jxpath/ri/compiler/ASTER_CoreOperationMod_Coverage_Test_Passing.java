/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationMod_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_jnAi0() {
        Constant arg1 = new Constant(5);
        Constant arg2 = new Constant(3);
        CoreOperationMod operation = new CoreOperationMod(arg1, arg2);
        assertEquals("mod", operation.getSymbol());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithZeroDivisor_HYGZ2() {
        Constant arg1 = mock(Constant.class);
        Constant arg2 = mock(Constant.class);
        EvalContext context = mock(EvalContext.class);
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(0.0);
        CoreOperationMod operation = new CoreOperationMod(arg1, arg2);
        try {
            operation.computeValue(context);
            fail("Should have thrown ArithmeticException due to division by zero");
        } catch (ArithmeticException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_hgsY0() {
        final int expectedPrecedence = CoreOperationMod.MULTIPLY_PRECEDENCE;
        Constant arg1 = new Constant("String");
        Constant arg2 = new Constant(123);
        CoreOperationMod operation = new CoreOperationMod(arg1, arg2);
        int actualPrecedence = operation.getPrecedence();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsFalse_vEQm0_MpGo0() {
    Constant arg1 = new Constant(1);
    Constant arg2 = new Constant("test");
    CoreOperationMod operation = new CoreOperationMod(arg1, arg2);
    assertFalse(operation.isSymmetric());
}
}