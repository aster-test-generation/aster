/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ProcessingInstruction;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.AbstractFactory;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
private NamespaceResolver localNamespaceResolver;
@Mock
    private Node node;
@Mock
    private NodePointer nodePointer1;
@Mock
    private NodePointer nodePointer2;
@Mock
    private NamedNodeMap namedNodeMap;
@InjectMocks
    private DOMNodePointer domNodePointer;
@Mock
    private NodeTest nodeTest;
private NodeList nodeList;
private Document document;
@Mock
    private JXPathContext context;
@Mock
    private AbstractFactory abstractFactory;
@Mock
    private NodeIterator nodeIterator;
private final QName qName = new QName("prefix", "localName");
private Locale locale = Locale.ENGLISH;
@Mock
    Element element;
@Mock
    private NodePointer startWith;
@Mock
    private NamespaceResolver namespaceResolver;
@Mock
    private Attr attr;
private final String id = "testId";
private NodePointer nodePointer;
private Node parentNode;
private ProcessingInstruction processingInstruction;
@Mock
    private NamespaceResolver parentNamespaceResolver;
    private String defaultNamespace;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeNodes() {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node attributeNode1 = mock(Node.class);
        Node attributeNode2 = mock(Node.class);
        when(attributeNode1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(attributeNode2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(attributeNode1);
        when(nodePointer2.getBaseValue()).thenReturn(attributeNode2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.item(0)).thenReturn(attributeNode1);
        when(namedNodeMap.getLength()).thenReturn(2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
        result = domNodePointer.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_AttributePresent() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Setup the node hierarchy and responses
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("targetAttr")).thenReturn("value");
        // Call the method under test
        String result = DOMNodePointer.findEnclosingAttribute(node, "targetAttr");
        // Assertions
        assertEquals("value", result, "The attribute value should be returned when present.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_AttributeAbsent() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Setup the node hierarchy and responses
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("targetAttr")).thenReturn("");
        // Call the method under test
        String result = DOMNodePointer.findEnclosingAttribute(node, "targetAttr");
        // Assertions
        assertNull(result, "The result should be null when the attribute is absent.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        // Arrange
        int expectedHashCode = 42;
        when(node.hashCode()).thenReturn(expectedHashCode);
        // Act
        int actualHashCode = domNodePointer.hashCode();
        // Assert
        assertEquals(expectedHashCode, actualHashCode, "The hash code should match the hash code of the node.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ns", result.getPrefix());
        assertEquals("ln", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(pi.getTarget()).thenReturn("target");
        when(node).thenReturn(pi);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals(null, result.getPrefix());
        assertEquals("target", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNodeHasNamespace() {
        // Setup is handled by Mockito annotations
        String expectedNamespaceURI = "http://example.com/ns";
        when(node.getNamespaceURI()).thenReturn(expectedNamespaceURI);
        String result = domNodePointer.getNamespaceURI();
        assertEquals(expectedNamespaceURI, result, "The namespace URI should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNodeHasNoNamespace() {
        // Setup is handled by Mockito annotations
        when(node.getNamespaceURI()).thenReturn(null);
        String result = domNodePointer.getNamespaceURI();
        assertEquals(null, result, "The namespace URI should be null when the node has no namespace.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        // Assuming Locale and id are not crucial for the test, using default values
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        // Arrange
        boolean reverse = false;
        // Act
        NodeIterator result = domNodePointer.childIterator(nodeTest, reverse, startWith);
        // Assert
        assertNotNull(result, "The result should not be null.");
        assertTrue(result instanceof DOMNodeIterator, "The result should be an instance of DOMNodeIterator.");
        // Verify internal behavior (optional, if you want to check how the method interacts with its parameters)
        verify(nodeTest, atLeastOnce()).toString(); // Assuming toString is called, replace with actual method interactions
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_WhenNodeHasChildNodes_ShouldReturnFalse() throws Exception {
        // Node and DOMNodePointer setup via Mockito annotations
        // Arrange
        when(node.hasChildNodes()).thenReturn(true);
        // Act
        boolean result = domNodePointer.isLeaf();
        // Assert
        assertFalse(result, "DOMNodePointer should not be a leaf when its node has child nodes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithKnownNamespace() throws Exception {
        when(node instanceof Element).thenReturn(true);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        QName qName = new QName("prefix", "localName");
        when(element.getNamespaceURI()).thenReturn("http://example.com");
        when(namespaceResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        domNodePointer.createAttribute(mock(JXPathContext.class), qName);
        verify(element).setAttributeNS("http://example.com", "prefix:localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithoutNamespace() throws Exception {
        when(node instanceof Element).thenReturn(true);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        QName qName = new QName("localName");
        when(element.hasAttribute("localName")).thenReturn(false);
        domNodePointer.createAttribute(mock(JXPathContext.class), qName);
        verify(element).setAttribute("localName", "");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeThrowsExceptionForUnknownPrefix() {
        when(node instanceof Element).thenReturn(true);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        QName qName = new QName("unknownPrefix", "localName");
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        when(namespaceResolver.getNamespaceURI("unknownPrefix")).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        Exception exception = assertThrows(JXPathException.class, () -> {
            domNodePointer.createAttribute(context, qName);
        });
        assertEquals("Unknown namespace prefix: unknownPrefix", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_NullNode_yWST0() {
        Node node = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        assertNull("Expected null namespace URI for null node", domNodePointer.getNamespaceURI());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithElementNode() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getNamespaceURI()).thenReturn("http://example.com/ns");
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("http://example.com/ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithDocumentNode() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node instanceof Document).thenReturn(true);
        when(((Document) node).getDocumentElement()).thenReturn(element);
        when(element.getNamespaceURI()).thenReturn("http://example.com/ns");
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("http://example.com/ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNullNamespaceURI() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getNamespaceURI()).thenReturn(null);
        when(node.getPrefix()).thenReturn("ex");
        when(((Element) node).getAttributeNode("xmlns:ex")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com/ns");
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("http://example.com/ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithEmptyNamespaceURI() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getNamespaceURI()).thenReturn("");
        when(node.getPrefix()).thenReturn(null);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com/ns");
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("http://example.com/ns", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithNoNamespaceFound() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node instanceof Element).thenReturn(true);
        when(((Element) node).getNamespaceURI()).thenReturn(null);
        when(node.getPrefix()).thenReturn("ex");
        when(((Element) node).getAttributeNode("xmlns:ex")).thenReturn(null);
        when(node.getParentNode()).thenReturn(null);
        String result = DOMNodePointer.getNamespaceURI(node);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndDataIsNotNull_ShouldReturnTrimmedData() {
        // This setup is automatically handled by Mockito with annotations
        // Arrange
        String commentData = " Some comment ";
        Comment commentNode = mock(Comment.class);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node).thenReturn(commentNode);
        when(commentNode.getData()).thenReturn(commentData);
        // Act
        Object result = domNodePointer.getValue();
        // Assert
        assertEquals("Some comment", result, "Should return trimmed comment data.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsCommentNodeAndDataIsNull_ShouldReturnEmptyString() {
        // This setup is automatically handled by Mockito with annotations
        // Arrange
        Comment commentNode = mock(Comment.class);
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(node).thenReturn(commentNode);
        when(commentNode.getData()).thenReturn(null);
        // Act
        Object result = domNodePointer.getValue();
        // Assert
        assertEquals("", result, "Should return an empty string for null comment data.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WhenNodeIsNotCommentNode_ShouldReturnStringValue() {
        // This setup is automatically handled by Mockito with annotations
        // Arrange
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE); // Assuming ELEMENT_NODE for non-comment
        when(node.getNodeValue()).thenReturn("Element Value");
        // Act
        Object result = domNodePointer.getValue();
        // Assert
        assertEquals("Element Value", result, "Should return the node value for non-comment nodes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_WithNamespace() {
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(node instanceof Document).thenReturn(true);
        when((Document) node).thenReturn(document);
        // Setup
        String expectedNamespace = "http://example.com/ns";
        when(attr.getValue()).thenReturn(expectedNamespace);
        // Execute
        String result = domNodePointer.getDefaultNamespaceURI();
        // Verify
        assertEquals(expectedNamespace, result, "The namespace URI should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_NoNamespace() {
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(node instanceof Document).thenReturn(true);
        when((Document) node).thenReturn(document);
        // Setup
        when(element.getAttributeNode("xmlns")).thenReturn(null);
        // Execute
        String result = domNodePointer.getDefaultNamespaceURI();
        // Verify
        assertNull(result, "The result should be null when there is no default namespace.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultNamespaceURI_EmptyNamespace() {
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(node instanceof Document).thenReturn(true);
        when((Document) node).thenReturn(document);
        // Setup
        when(attr.getValue()).thenReturn("");
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        // Execute
        String result = domNodePointer.getDefaultNamespaceURI();
        // Verify
        assertNull(result, "The result should be null when the namespace is empty.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WithParentNode() {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        Node parentNode = mock(Node.class);
        when(node.getParentNode()).thenReturn(parentNode);
        doNothing().when(parentNode).removeChild(node);
        domNodePointer.remove();
        verify(parentNode).removeChild(node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithUnknownNamespace_fEvs1() {
        Node node = Mockito.mock(Element.class);
        QName qName = new QName("unknownPrefix", "localName");
        Locale locale = new Locale("en");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        JXPathContext context = Mockito.mock(JXPathContext.class);
        NamespaceResolver nsResolver = Mockito.mock(NamespaceResolver.class);
        Mockito.when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
        Mockito.when(nsResolver.getNamespaceURI("unknownPrefix")).thenReturn(null);
        try {
            domNodePointer.createAttribute(context, qName);
            fail("JXPathException expected");
        } catch (JXPathException e) {
            assertEquals("Unknown namespace prefix: unknownPrefix", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeWithExistingAttribute_FFTX3() {
        Node node = Mockito.mock(Element.class);
        QName qName = new QName(null, "localName");
        Locale locale = new Locale("en");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        JXPathContext context = Mockito.mock(JXPathContext.class);
        Mockito.when(((Element) node).hasAttribute("localName")).thenReturn(true);
        NodePointer result = domNodePointer.createAttribute(context, qName);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeOnNonElementNode_SKsA4() {
        Node node = Mockito.mock(Node.class);
        QName qName = new QName("prefix", "localName");
        Locale locale = new Locale("en");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        JXPathContext context = Mockito.mock(JXPathContext.class);
        try {
            domNodePointer.createAttribute(context, qName);
            fail("UnsupportedOperationException expected");
        } catch (UnsupportedOperationException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_NullNodeName() {
        domNodePointer = new DOMNodePointer(node, null);
        // Setup
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn(null);
        // Execute
        String result = DOMNodePointer.getPrefix(node);
        // Verify
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer() {
        domNodePointer = new DOMNodePointer(node, locale);
        String prefix = "testPrefix";
        NodePointer result = domNodePointer.namespacePointer(prefix);
        assertNotNull(result);
        assertTrue(result instanceof NamespacePointer);
        assertEquals(prefix, result.getName().getPrefix());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage() throws Exception {
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("xml:lang")).thenReturn("en");
        // Setup the DOM structure and attributes
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("xml:lang")).thenReturn("en");
        // Create an instance of DOMNodePointer with mocked Node and Locale
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.ENGLISH);
        // Execute the method to test
        String language = domNodePointer.getLanguage();
        // Verify the results
        assertEquals("en", language, "The language should be 'en'");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_ElementDoesNotExist_kkUI1() {
    Node node = Mockito.mock(Node.class);
    Document document = Mockito.mock(Document.class);
    Mockito.when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    Mockito.when(node.getOwnerDocument()).thenReturn(document);
    Mockito.when(document.getElementById("nonexistentID")).thenReturn(null);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.ENGLISH);
    JXPathContext context = Mockito.mock(JXPathContext.class);
    Pointer result = domNodePointer.getPointerByID(context, "nonexistentID");
    assertTrue(result instanceof NullPointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithProcessingInstructionTestAndMatchingPI_ShouldReturnTrue() {
        node = mock(Node.class);
        nodeTest = mock(NodeTest.class); // Generic mock, will be cast in specific tests
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(piTest.getTarget()).thenReturn("targetPI");
        when(piNode.getTarget()).thenReturn("targetPI");
        when(node).thenReturn(piNode);
        assertTrue(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WithProcessingInstructionTestAndNonMatchingPI_ShouldReturnFalse() {
        node = mock(Node.class);
        nodeTest = mock(NodeTest.class); // Generic mock, will be cast in specific tests
        ProcessingInstructionTest piTest = mock(ProcessingInstructionTest.class);
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(piTest.getTarget()).thenReturn("targetPI");
        when(piNode.getTarget()).thenReturn("differentPI");
        when(node).thenReturn(piNode);
        assertFalse(DOMNodePointer.testNode(node, piTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLanguage_uOWc0() {
        Node node = null; // Assuming node is properly initialized elsewhere or mocked
        Locale locale = Locale.getDefault();
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
        String expectedLanguage = "en"; // Expected language to be returned
        assertEquals(expectedLanguage, domNodePointer.getLanguage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_KdfR0() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = domNodePointer.namespacePointer(prefix);
    assertNotNull(result);
    assertTrue(result instanceof NamespacePointer);
    assertEquals(prefix, result.getName().getPrefix());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSetsValueCorrectly_kAZx0() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    int index = 0;
    String expectedValue = "testValue";
    NodePointer result = domNodePointer.createChild(context, name, index, expectedValue);
    assertEquals(expectedValue, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithEmptyPrefix_ReturnsDefaultNamespace() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null); // No parent node
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getAttributeNode(anyString())).thenReturn(null); // No such attribute by default
        String defaultNamespaceURI = "http://default.namespace";
        domNodePointer = new DOMNodePointer(node, Locale.getDefault()) {
            public String getDefaultNamespaceURI() {
                return defaultNamespaceURI;
            }
        };
        String result = domNodePointer.getNamespaceURI("");
        assertEquals(defaultNamespaceURI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithXMLPrefix_ReturnsXMLNamespace() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null); // No parent node
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getAttributeNode(anyString())).thenReturn(null); // No such attribute by default
        String result = domNodePointer.getNamespaceURI("xml");
        assertEquals(DOMNodePointer.XML_NAMESPACE_URI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithXMLNSPrefix_ReturnsXMLNSNamespace() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null); // No parent node
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getAttributeNode(anyString())).thenReturn(null); // No such attribute by default
        String result = domNodePointer.getNamespaceURI("xmlns");
        assertEquals(DOMNodePointer.XMLNS_NAMESPACE_URI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithCustomPrefix_ReturnsCorrectNamespace() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null); // No parent node
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getAttributeNode(anyString())).thenReturn(null); // No such attribute by default
        String expectedNamespace = "http://example.com/ns";
        when(element.getAttributeNode("xmlns:custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn(expectedNamespace);
        when(node instanceof Document).thenReturn(true);
        when((Document) node).thenReturn(document);
        String result = domNodePointer.getNamespaceURI("custom");
        assertEquals(expectedNamespace, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WithUnknownPrefix_ReturnsNull() {
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getParentNode()).thenReturn(null); // No parent node
        when(document.getDocumentElement()).thenReturn(element);
        when(element.getAttributeNode(anyString())).thenReturn(null); // No such attribute by default
        when(node instanceof Document).thenReturn(true);
        when((Document) node).thenReturn(document);
        String result = domNodePointer.getNamespaceURI("unknown");
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_InitializesCorrectly() throws Exception {
        // Assuming Locale and id are not relevant for the initialization in this context
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(domNodePointer.getNamespaceResolver()).thenReturn(parentNamespaceResolver);
        // First call should initialize the localNamespaceResolver
        NamespaceResolver firstCallResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(firstCallResolver, "NamespaceResolver should not be null after initialization");
        // Subsequent calls should return the same instance
        NamespaceResolver secondCallResolver = domNodePointer.getNamespaceResolver();
        assertSame(firstCallResolver, secondCallResolver, "Should return the same NamespaceResolver instance on subsequent calls");
        // Verify interactions
        verify(domNodePointer, times(2)).getNamespaceResolver();
        verifyNoMoreInteractions(domNodePointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeNoNamespace_yZxb0() {
    Node node = mock(Element.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("elementName");
    when(node.getNamespaceURI()).thenReturn(null);
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault(), null);
    String result = pointer.asPath();
    assertEquals("/elementName[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNodeWithNamespace_Wnjw1() {
    Node node = mock(Element.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("elementName");
    when(node.getNamespaceURI()).thenReturn("http://example.com/ns");
    NamespaceResolver resolver = mock(NamespaceResolver.class);
    when(resolver.getPrefix("http://example.com/ns")).thenReturn("ex");
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault(), null);
    pointer.setNamespaceResolver(resolver);
    String result = pointer.asPath();
    assertEquals("/ex:elementName[1]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeNodes_1() {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node attributeNode1 = mock(Node.class);
        Node attributeNode2 = mock(Node.class);
        when(attributeNode1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(attributeNode2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(attributeNode1);
        when(nodePointer2.getBaseValue()).thenReturn(attributeNode2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.item(0)).thenReturn(attributeNode1);
        when(namedNodeMap.getLength()).thenReturn(2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        result = domNodePointer.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(-1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_AttributeNodes_2() {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node attributeNode1 = mock(Node.class);
        Node attributeNode2 = mock(Node.class);
        when(attributeNode1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(attributeNode2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodePointer1.getBaseValue()).thenReturn(attributeNode1);
        when(nodePointer2.getBaseValue()).thenReturn(attributeNode2);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.item(0)).thenReturn(attributeNode1);
        when(namedNodeMap.getLength()).thenReturn(2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        result = domNodePointer.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode_1() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ns", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode_1() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(pi.getTarget()).thenReturn("target");
        when(node).thenReturn(pi);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals(null, result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode_2() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        ProcessingInstruction pi = mock(ProcessingInstruction.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(pi.getTarget()).thenReturn("target");
        when(node).thenReturn(pi);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("target", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_1() throws Exception {
        // Assuming Locale and id are not crucial for the test, using default values
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        // Arrange
        boolean reverse = false;
        // Act
        NodeIterator result = domNodePointer.childIterator(nodeTest, reverse, startWith);
        // Assert
        // Verify internal behavior (optional, if you want to check how the method interacts with its parameters)
        verify(nodeTest, atLeastOnce()).toString(); // Assuming toString is called, replace with actual method interactions
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_2() throws Exception {
        // Assuming Locale and id are not crucial for the test, using default values
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), "testId");
        // Arrange
        boolean reverse = false;
        // Act
        NodeIterator result = domNodePointer.childIterator(nodeTest, reverse, startWith);
        // Assert
        // Verify internal behavior (optional, if you want to check how the method interacts with its parameters)
        verify(nodeTest, atLeastOnce()).toString(); // Assuming toString is called, replace with actual method interactions
        assertTrue(result instanceof DOMNodeIterator, "The result should be an instance of DOMNodeIterator.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttributeThrowsExceptionForUnknownPrefix_1() {
        when(node instanceof Element).thenReturn(true);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        QName qName = new QName("unknownPrefix", "localName");
        when(domNodePointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        when(namespaceResolver.getNamespaceURI("unknownPrefix")).thenReturn(null);
        JXPathContext context = mock(JXPathContext.class);
        Exception exception = assertThrows(JXPathException.class, () -> {
            domNodePointer.createAttribute(context, qName);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_DifferentNodes_1_fid3() {
        when(nodePointer1.getBaseValue()).thenReturn(node);
        when(nodePointer2.getBaseValue()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namedNodeMap);
        when(namedNodeMap.getLength()).thenReturn(1);
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(node.getFirstChild()).thenReturn(node1);
        when(node1.getNextSibling()).thenReturn(node2);
        int result = domNodePointer.compareChildNodePointers(nodePointer1, nodePointer2);
        result = domNodePointer.compareChildNodePointers(nodePointer2, nodePointer1);
        assertEquals(-1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ElementNode_2() throws Exception {
        // Assuming Node and ProcessingInstruction are part of the org.w3c.dom package
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPrefix()).thenReturn("ns");
        when(node.getLocalName()).thenReturn("ln");
        // Setup specific to this test case
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        // Execute
        QName result = domNodePointer.getName();
        // Verify
        assertEquals("ln", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_3() {
        domNodePointer = new DOMNodePointer(node, locale);
        String prefix = "testPrefix";
        NodePointer result = domNodePointer.namespacePointer(prefix);
        assertEquals(prefix, result.getName().getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNamespacePointer_KdfR0_3() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    String prefix = "testPrefix";
    NodePointer result = domNodePointer.namespacePointer(prefix);
    assertEquals(prefix, result.getName().getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_InitializesCorrectly_1() throws Exception {
        // Assuming Locale and id are not relevant for the initialization in this context
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(domNodePointer.getNamespaceResolver()).thenReturn(parentNamespaceResolver);
        // First call should initialize the localNamespaceResolver
        NamespaceResolver firstCallResolver = domNodePointer.getNamespaceResolver();
        // Subsequent calls should return the same instance
        NamespaceResolver secondCallResolver = domNodePointer.getNamespaceResolver();
        // Verify interactions
        verify(domNodePointer, times(2)).getNamespaceResolver();
        verifyNoMoreInteractions(domNodePointer);
        assertNotNull(firstCallResolver, "NamespaceResolver should not be null after initialization");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver_InitializesCorrectly_2() throws Exception {
        // Assuming Locale and id are not relevant for the initialization in this context
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
        when(domNodePointer.getNamespaceResolver()).thenReturn(parentNamespaceResolver);
        // First call should initialize the localNamespaceResolver
        NamespaceResolver firstCallResolver = domNodePointer.getNamespaceResolver();
        // Subsequent calls should return the same instance
        NamespaceResolver secondCallResolver = domNodePointer.getNamespaceResolver();
        // Verify interactions
        verify(domNodePointer, times(2)).getNamespaceResolver();
        verifyNoMoreInteractions(domNodePointer);
        assertSame(firstCallResolver, secondCallResolver, "Should return the same NamespaceResolver instance on subsequent calls");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_Success_IKxV0() throws Exception {
    when(context.getNamespaceURI("prefix")).thenReturn("namespaceURI");
    when(context.getFactory()).thenReturn(abstractFactory);
    when(abstractFactory.createObject(any(), any(), any(), anyString(), anyInt())).thenReturn(true);
    when(domNodePointer.childIterator(any(), anyBoolean(), any())).thenReturn(nodeIterator);
    when(nodeIterator.setPosition(1)).thenReturn(true);
    when(nodeIterator.getNodePointer()).thenReturn(mock(NodePointer.class));
    NodePointer result = domNodePointer.createChild(context, qName, 0);
    assertNotNull(result);
    verify(abstractFactory).createObject(context, domNodePointer, node, "localName", 0);
    verify(nodeIterator).setPosition(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildSuccess_DXJd0_ASxi0() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    AbstractFactory factory = mock(AbstractFactory.class);
    when(context.getFactory()).thenReturn(factory);
    when(factory.createObject(any(), any(), any(), any(), anyInt())).thenReturn(true);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    NodeIterator nodeIterator = mock(NodeIterator.class);
    when(nodeIterator.setPosition(anyInt())).thenReturn(true);
    when(nodeIterator.getNodePointer()).thenReturn(expectedNodePointer);
    when(domNodePointer.childIterator(any(), anyBoolean(), any())).thenReturn(nodeIterator);
    NodePointer result = domNodePointer.createChild(context, name, 0);
    assertEquals(expectedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChildWithNegativeIndex_xJda4_DDwR0() {
    Node node = mock(Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    AbstractFactory factory = mock(AbstractFactory.class);
    when(context.getFactory()).thenReturn(factory);
    when(factory.createObject(any(), any(), any(), any(), anyInt())).thenReturn(true);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    NodeIterator nodeIterator = mock(NodeIterator.class);
    when(nodeIterator.setPosition(anyInt())).thenReturn(true);
    when(nodeIterator.getNodePointer()).thenReturn(expectedNodePointer);
    when(domNodePointer.childIterator(any(), anyBoolean(), any())).thenReturn(nodeIterator);
    NodePointer result = domNodePointer.createChild(context, name, -1);
    assertEquals(expectedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceURI_WithParentPointer_GeXf2_YsjP0() {
    QName qName = new QName("prefix", "localName");
    KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
    Document document = mock(Document.class);
    Element element = mock(Element.class);
    when(document.getDocumentElement()).thenReturn(element);
    when(element.getAttributeNode("xmlns:prefix")).thenReturn(null);
    when(element.getParentNode()).thenReturn(null);
    DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, document);
    assertEquals("http://example.com/ns", domNodePointer.getNamespaceURI("prefix"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_WhenElementFound_stQk0_1() {
    when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    domNodePointer = new DOMNodePointer(node, locale, id);
    when(document.getElementById(id)).thenReturn(element);
    Pointer result = domNodePointer.getPointerByID(null, id);
    assertTrue(result instanceof DOMNodePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_WhenElementFound_stQk0_2() {
    when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    when(node.getOwnerDocument()).thenReturn(document);
    domNodePointer = new DOMNodePointer(node, locale, id);
    when(document.getElementById(id)).thenReturn(element);
    Pointer result = domNodePointer.getPointerByID(null, id);
    assertEquals(element, ((DOMNodePointer) result).getNode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithoutNamespace_CHSr2_jXtA0() {
    Node node = Mockito.mock(Element.class);
    QName qName = new QName(null, "localName");
    Locale locale = new Locale("en");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathContext context = Mockito.mock(JXPathContext.class);
    Mockito.when(((Element) node).hasAttribute("localName")).thenReturn(false);
    Mockito.doNothing().when((Element) node).setAttribute("localName", "");
    NodePointer result = domNodePointer.createAttribute(context, qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateAttributeWithKnownNamespace_qiOY0_KCYM0() {
    Node node = Mockito.mock(Element.class);
    QName qName = new QName("prefix", "localName");
    Locale locale = new Locale("en");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, locale);
    JXPathContext context = Mockito.mock(JXPathContext.class);
    NamespaceResolver nsResolver = Mockito.mock(NamespaceResolver.class);
    Mockito.doNothing().when((Element) node).setAttributeNS(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());
    Mockito.when(domNodePointer.getNamespaceResolver()).thenReturn(nsResolver);
    Mockito.when(nsResolver.getNamespaceURI("prefix")).thenReturn("http://example.com");
    NodePointer result = domNodePointer.createAttribute(context, qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointerByID_ElementExists_KiXx0_FLWl0() {
    Node node = Mockito.mock(Node.class);
    Document document = Mockito.mock(Document.class);
    Element element = Mockito.mock(Element.class);
    Mockito.when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
    Mockito.when(node.getOwnerDocument()).thenReturn(document);
    Mockito.when(document.getElementById("testID")).thenReturn(element);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.ENGLISH, "testID");
    JXPathContext context = Mockito.mock(JXPathContext.class);
    Pointer result = domNodePointer.getPointerByID(context, "testID");
    assertTrue(result instanceof DOMNodePointer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithElementNode_WuJB0() {
    Node node = mock(Node.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    when(node.getLocalName()).thenReturn("elementName");
    when(domNodePointer.getNamespaceURI(anyString())).thenReturn(null);
    String path = domNodePointer.asPath();
    assertEquals("elementName[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithProcessingInstructionNode_KqKC0() {
    Node node = mock(Node.class);
    ProcessingInstruction processingInstruction = mock(ProcessingInstruction.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
    when(processingInstruction.getTarget()).thenReturn("target");
    when(node.getOwnerDocument()).thenReturn(null);
    when(node.getParentNode()).thenReturn(null);
    when(node.getFirstChild()).thenReturn(null);
    when(node.getLastChild()).thenReturn(null);
    when(node.getPreviousSibling()).thenReturn(null);
    when(node.getNextSibling()).thenReturn(null);
    when(node).thenReturn(processingInstruction);
    String path = domNodePointer.asPath();
    assertEquals("/processing-instruction('target')[1]", path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_mpwT0() throws Exception {
    Node node = mock(Node.class);
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("prefix", "localName");
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    int index = 0;
    Object value = new Object();
    when(node.getOwnerDocument()).thenReturn(mock(Document.class));
    when(node.getOwnerDocument().createElement(anyString())).thenReturn(mock(Element.class));
    when(context.getLocale()).thenReturn(Locale.getDefault());
    NodePointer result = domNodePointer.createChild(context, name, index, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithProcessingInstructionNode_Tlpx4_YAGb0() {
    ProcessingInstruction node = Mockito.mock(ProcessingInstruction.class);
    Mockito.when(node.getTarget()).thenReturn("target");
    DOMNodePointer pointer = new DOMNodePointer(node, Locale.getDefault());
    assertEquals("/processing-instruction('target')[1]", pointer.asPath());
}
}