/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.JXPathException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MethodLookupUtils_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullParameters_ULSM0() {
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithEmptyParameters_HLxV1() {
        Object[] parameters = {};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullFirstParameter_vmYE2() {
        Object[] parameters = {null};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoMatchType_yJNq3() {
        Object[] parameters = {new Object()};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithConversion_ahEk4() {
        Object[] parameters = {"test", 1};
        Method result = MethodLookupUtils.lookupMethod(Object.class, "substring", parameters);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithExactMatch_JopO5() {
        Object[] parameters = {"test", 1, 2};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullInParameters_MsOG6() {
        Object[] parameters = {"test", null};
        Method result = MethodLookupUtils.lookupMethod(String.class, "substring", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoExactMatch_SdJU7() {
        Object[] parameters = {"test", 1, 2};
        Method result = MethodLookupUtils.lookupMethod(String.class, "contains", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithAmbiguousMatch_gaGE8() {
        Object[] parameters = {new StringBuilder(), "test"};
        try {
            Method result = MethodLookupUtils.lookupMethod(Appendable.class, "append", parameters);
            fail("Expected an JXPathException to be thrown");
        } catch (JXPathException e) {
            assertEquals("Ambiguous method call: append", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoMethodsFound_ZOtY9() {
        Object[] parameters = {5};
        Method result = MethodLookupUtils.lookupMethod(Integer.class, "nonExistentMethod", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithStaticMethod_DAfX10() {
        Object[] parameters = {5};
        Method result = MethodLookupUtils.lookupMethod(Math.class, "abs", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithInstanceMethod_tOQG11() {
        Object[] parameters = {"test"};
        Method result = MethodLookupUtils.lookupMethod(String.class, "length", parameters);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithInheritance_XnVE12() {
        Object[] parameters = {"test"};
        Method result = MethodLookupUtils.lookupMethod(Object.class, "toString", parameters);
        assertNotNull(result);
    }
}