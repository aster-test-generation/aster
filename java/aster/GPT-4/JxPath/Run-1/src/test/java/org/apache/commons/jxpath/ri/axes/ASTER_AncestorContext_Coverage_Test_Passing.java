/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AncestorContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_vhpo0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        int order = ancestorContext.getDocumentOrder();
        assertEquals(-1, order);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void reset_oTjU3_UENS0() {
    AncestorContext context = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
    context.reset(); // This line should now correctly reset the context
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResetMethodCompletes_ITVJ4_lKVV0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    AncestorContext ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
    try {
        ancestorContext.reset();
        assertTrue(true);
    } catch (Exception e) {
        fail("reset method should complete without throwing exceptions");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_IncludeSelf_True_NodeTestPasses_PgOw0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer mockPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockPointer);
        when(mockPointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        assertTrue(ancestorContext.nextNode());
        assertEquals(1, ancestorContext.getPosition());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_IncludeSelf_True_NodeTestFails_HOAN1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer mockPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockPointer);
        when(mockPointer.testNode(nodeTest)).thenReturn(false);
        AncestorContext ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        assertFalse(ancestorContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FirstCall_IncludeSelf_False_tuMi2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer mockPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(mockPointer);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        assertFalse(ancestorContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SubsequentCalls_FindValidParent_dHFO3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer firstPointer = mock(NodePointer.class);
        NodePointer secondPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(firstPointer);
        when(firstPointer.getImmediateParentPointer()).thenReturn(secondPointer);
        when(secondPointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // Initialize and move past the first node
        assertTrue(ancestorContext.nextNode());
        assertEquals(1, ancestorContext.getPosition());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SubsequentCalls_ParentDoesNotPassTest_EvDk5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer firstPointer = mock(NodePointer.class);
        NodePointer secondPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(firstPointer);
        when(firstPointer.getImmediateParentPointer()).thenReturn(secondPointer);
        when(secondPointer.testNode(nodeTest)).thenReturn(false);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // Initialize and move past the first node
        assertFalse(ancestorContext.nextNode());
}
}