/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AttributeContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Null_HVfI0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        NodePointer result = attributeContext.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetCompletesWithoutException_gRrM3() {
        NamespaceContext namespaceContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(namespaceContext, nodeTypeTest);
        attributeContext.reset(); // No exception should be thrown
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPositionWhenPositionIsLessThanCurrentPosition_BJlJ0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyContext = spy(attributeContext);
        doReturn(5).when(spyContext).getCurrentPosition();
        doNothing().when(spyContext).reset();
        spyContext.setPosition(3);
        verify(spyContext).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPositionWhenPositionIsEqualToCurrentPosition_LGAA1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyContext = spy(attributeContext);
        doReturn(3).when(spyContext).getCurrentPosition();
        boolean result = spyContext.setPosition(3);
        verify(spyContext, never()).reset();
        verify(spyContext, never()).nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPositionWhenPositionIsGreaterThanCurrentPositionAndNextNodeReturnsTrue_wRue2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyContext = spy(attributeContext);
        doReturn(1).when(spyContext).getCurrentPosition();
        doReturn(true).when(spyContext).nextNode();
        boolean result = spyContext.setPosition(2);
        verify(spyContext, times(1)).nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPositionWhenPositionIsGreaterThanCurrentPositionAndNextNodeReturnsFalse_FVpN3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyContext = spy(attributeContext);
        doReturn(1).when(spyContext).getCurrentPosition();
        doReturn(false).when(spyContext).nextNode();
        boolean result = spyContext.setPosition(3);
        verify(spyContext, times(1)).nextNode();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPositionWhenPositionIsGreaterThanCurrentPositionMultipleNextNodeCalls_SwzO4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
        AttributeContext spyContext = spy(attributeContext);
        doReturn(1).when(spyContext).getCurrentPosition();
        doReturn(true).when(spyContext).nextNode();
        doReturn(2).when(spyContext).getCurrentPosition();
        doReturn(true).when(spyContext).nextNode();
        doReturn(3).when(spyContext).getCurrentPosition();
        boolean result = spyContext.setPosition(3);
        verify(spyContext, times(2)).nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetPositionFails_sUWU0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        doThrow(new RuntimeException()).when(context).setPosition(anyInt());
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetStartedFalse_Rkyj1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeNameTest_URnA2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeNameTest nodeTest = mock(NodeNameTest.class);
        when(nodeTest.getNodeName()).thenReturn(new QName("test"));
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NodeTypeTest_NodeTypeNode_bbay3() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorNull_XiUO4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(null);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IteratorSetPositionFails_vXiL5() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NodePointer pointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(pointer);
        when(pointer.attributeIterator(any(QName.class))).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(false);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_Success_RhLM6() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        NodePointer pointer = mock(NodePointer.class);
        NodeIterator iterator = mock(NodeIterator.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(pointer);
        when(pointer.attributeIterator(any(QName.class))).thenReturn(iterator);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(pointer);
        AttributeContext context = new AttributeContext(parentContext, nodeTest);
        assertTrue(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResetCallsSuperReset_OzHO2_lISp0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
    AttributeContext attributeContext = spy(new AttributeContext(namespaceContext, nodeTypeTest));
    attributeContext.reset();
    verify(attributeContext, times(1)).reset(); // Corrected to call the visible reset method
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWhenPositionIsGreaterThanCurrentPositionAndNextNodeReturnsTrueThenFalse_ONCE5_xNju0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTest = mock(NodeTypeTest.class);
    AttributeContext attributeContext = new AttributeContext(parentContext, nodeTest);
    AttributeContext spyContext = spy(attributeContext);
    doReturn(1).when(spyContext).getCurrentPosition();
    doReturn(true).doReturn(false).when(spyContext).nextNode();
    boolean result = spyContext.setPosition(4);
    verify(spyContext, times(2)).nextNode();
    assertFalse(result);
}
}