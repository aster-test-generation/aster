/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicNodeSet_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointersWhenInitiallyNull_kOVX0_1() {
    BasicNodeSet nodeSet = new BasicNodeSet();
    List result = nodeSet.getPointers();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointersWhenInitiallyNull_kOVX0_2() {
    BasicNodeSet nodeSet = new BasicNodeSet();
    List result = nodeSet.getPointers();
    assertTrue(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointersReturnsUnmodifiableList_SBLA1() {
    BasicNodeSet nodeSet = new BasicNodeSet();
    List result = nodeSet.getPointers();
    try {
        result.add(new Object());
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringEmptySet_YFqL0() {
    BasicNodeSet basicNodeSet = new BasicNodeSet();
    assertEquals("[]", basicNodeSet.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValues_EmptyPointers_FKWH0() {
    BasicNodeSet nodeSet = new BasicNodeSet();
    List result = nodeSet.getValues();
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodesWhenEmpty_gIgE0() {
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        List result = basicNodeSet.getNodes();
        assertTrue(result.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPointersWhenInitiallyNull_kOVX0() {
    BasicNodeSet nodeSet = new BasicNodeSet();
    List result = nodeSet.getPointers();
    assertNotNull(result);
    assertTrue(result.isEmpty());
}
}