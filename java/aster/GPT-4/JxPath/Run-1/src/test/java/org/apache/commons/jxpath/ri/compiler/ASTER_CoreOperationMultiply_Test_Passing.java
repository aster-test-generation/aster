/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMultiply_Test_Passing {
private CoreOperationMultiply coreOperationMultiply;
private Constant arg1;
private Constant arg2;
private EvalContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() {
        arg1 = mock(Constant.class);
        arg2 = mock(Constant.class);
        context = mock(EvalContext.class);
        coreOperationMultiply = new CoreOperationMultiply(arg1, arg2);
        // Setup the expected values and interactions
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(5.0);
        // Execute the method under test
        Object result = coreOperationMultiply.computeValue(context);
        // Verify the interactions and assert the result
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
        assertEquals(50.0, result, "The multiplication result should be correct.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_XpdC0() {
    Constant constant1 = new Constant(5);
    Constant constant2 = new Constant(10);
    CoreOperationMultiply multiplyOperation = new CoreOperationMultiply(constant1, constant2);
    assertEquals("*", multiplyOperation.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsTrue_sdug0() {
    Constant const1 = new Constant(5);
    Constant const2 = new Constant(10);
    CoreOperationMultiply multiplyOperation = new CoreOperationMultiply(const1, const2);
    assertTrue(multiplyOperation.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_QSqy0_oFxm0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationMultiply multiplyOperation = new CoreOperationMultiply(arg1, arg2);
    int expectedPrecedence = multiplyOperation.getPrecedence(); // Assuming getPrecedence() returns the correct value
    assertEquals(expectedPrecedence, multiplyOperation.getPrecedence());
}
}