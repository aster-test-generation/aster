/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_eSEQ8_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicInteger.class, 10.5);
        assertEquals(new java.util.concurrent.atomic.AtomicInteger(10), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_OXkl9_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicLong.class, 10.5);
        assertEquals(new java.util.concurrent.atomic.AtomicLong(10L), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDate_lzyO27() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Date date = new Date(1234567890L);
        assertEquals(date, converter.convert("1234567890", Date.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToCalendar_txIh28() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(1234567890L);
        assertEquals(calendar, converter.convert("1234567890", Calendar.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLocale_sfbb29() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Locale.US, converter.convert("en_US", Locale.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNonInstantiableClass_CECu5_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(LinkedList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_eSEQ8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicInteger.class, 10.5);
        assertTrue(result instanceof java.util.concurrent.atomic.AtomicInteger);
        assertEquals(new java.util.concurrent.atomic.AtomicInteger(10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_OXkl9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicLong.class, 10.5);
        assertTrue(result instanceof java.util.concurrent.atomic.AtomicLong);
        assertEquals(new java.util.concurrent.atomic.AtomicLong(10L), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertNumberToAtomicBoolean_zvOx23_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(1, java.util.concurrent.atomic.AtomicBoolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToAtomicBoolean_auDV24_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("true", java.util.concurrent.atomic.AtomicBoolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToUUID_yIiL28_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("123e4567-e89b-12d3-a456-426614174000", java.util.UUID.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToLocale_BRdN29_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("en_US", java.util.Locale.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToCurrency_aPFu30_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("USD", java.util.Currency.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToTimeZone_Lgtp31_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("GMT", java.util.TimeZone.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToCharset_dkSh32_fid1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("UTF-8", java.nio.charset.Charset.class));
}
}