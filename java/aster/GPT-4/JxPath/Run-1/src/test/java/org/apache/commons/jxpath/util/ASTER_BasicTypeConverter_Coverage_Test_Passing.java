/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.math.BigDecimal;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithConcreteClass_nUOE0() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(ArrayList.class);
        assertTrue(result instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithListInterface_emNG3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(List.class);
        assertTrue(result instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithCollectionInterface_iwHs4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(Collection.class);
        assertTrue(result instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithSetInterface_ORIg5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(Set.class);
        assertTrue(result instanceof HashSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionWithConcreteHashSet_vrSy8() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection result = converter.allocateCollection(HashSet.class);
        assertTrue(result instanceof HashSet);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_IPhM0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_IPhM0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertTrue(result instanceof Boolean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_IPhM0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertFalse((Boolean) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_IMIk1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_IMIk1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertTrue(result instanceof Character);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_IMIk1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertEquals('\0', (char) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_IEWx2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_IEWx2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertTrue(result instanceof Byte);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_IEWx2_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertEquals(0, (byte) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_AbBL3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_AbBL3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertTrue(result instanceof Short);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_AbBL3_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertEquals(0, (short) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_qSXR4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_qSXR4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_qSXR4_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertEquals(0, (int) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_ReKG5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_ReKG5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_ReKG5_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertEquals(0L, (long) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_efdA6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_efdA6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertTrue(result instanceof Float);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_efdA6_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertEquals(0.0f, (float) result, 0.0f);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_gbIF7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_gbIF7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_gbIF7_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertEquals(0.0, (double) result, 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveNull_XjEy8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithList_nhOt0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> originalList = new ArrayList<>();
        originalList.add("test");
        Collection result = converter.unmodifiableCollection(originalList);
        assertTrue(result instanceof List);
        try {
            ((List) result).add("modification");
            fail("Should throw UnsupportedOperationException on attempt to modify unmodifiable list");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSortedSet_shVI1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> originalSortedSet = new TreeSet<>();
        originalSortedSet.add("test");
        Collection result = converter.unmodifiableCollection(originalSortedSet);
        assertTrue(result instanceof SortedSet);
        try {
            ((SortedSet) result).add("modification");
            fail("Should throw UnsupportedOperationException on attempt to modify unmodifiable sorted set");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithSet_ctir2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> originalSet = new HashSet<>();
        originalSet.add("test");
        Collection result = converter.unmodifiableCollection(originalSet);
        assertTrue(result instanceof Set);
        try {
            ((Set) result).add("modification");
            fail("Should throw UnsupportedOperationException on attempt to modify unmodifiable set");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithGeneralCollection_nqJZ3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> originalCollection = new ArrayList<>();
        originalCollection.add("test");
        Collection result = converter.unmodifiableCollection(originalCollection);
        assertNotNull(result);
        try {
            result.add("modification");
            fail("Should throw UnsupportedOperationException on attempt to modify unmodifiable collection");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptyList_lfnF4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> emptyList = new ArrayList<>();
        Collection result = converter.unmodifiableCollection(emptyList);
        assertTrue(result instanceof List);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptyList_lfnF4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> emptyList = new ArrayList<>();
        Collection result = converter.unmodifiableCollection(emptyList);
        assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySortedSet_MBTq5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> emptySortedSet = new TreeSet<>();
        Collection result = converter.unmodifiableCollection(emptySortedSet);
        assertTrue(result instanceof SortedSet);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySortedSet_MBTq5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> emptySortedSet = new TreeSet<>();
        Collection result = converter.unmodifiableCollection(emptySortedSet);
        assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySet_xNPe6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> emptySet = new HashSet<>();
        Collection result = converter.unmodifiableCollection(emptySet);
        assertTrue(result instanceof Set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySet_xNPe6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> emptySet = new HashSet<>();
        Collection result = converter.unmodifiableCollection(emptySet);
        assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NullObject_lCld0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(null, Object.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_AssignableType_YtnZ1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("Hello", String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ToStringType_btKQ2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(123, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_BooleanToNumber_VRZv3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(true, Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NumberToBoolean_WJUi4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(1, Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_StringToPrimitive_XjLR5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert("123", int.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_EmptyArrayToCollection_Uysu6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new int[]{}, ArrayList.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NonEmptyArrayToCollection_btpp7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new int[]{1, 2, 3}, ArrayList.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_ArrayToArrayOfDifferentType_klPL8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canConvert(new int[]{1, 2, 3}, Double[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_CollectionToArray_rAXW9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertTrue(converter.canConvert(list, Integer[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_CollectionToCollection_kJgm10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertTrue(converter.canConvert(list, HashSet.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_CollectionToDifferentCollection_LKNm11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertTrue(converter.canConvert(list, ArrayList.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_EmptyCollectionToType_linP12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        assertTrue(converter.canConvert(list, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_NonEmptyCollectionToType_yVjP13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = Arrays.asList("hello");
        assertTrue(converter.canConvert(list, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForByte_XVuP0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 123);
        assertTrue(result instanceof Byte);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForByte_XVuP0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 123);
        assertEquals((byte) 123, result.byteValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForShort_oZDS1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 12345);
        assertTrue(result instanceof Short);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForShort_oZDS1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 12345);
        assertEquals((short) 12345, result.shortValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForInteger_lsNh2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 123456789);
        assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForInteger_lsNh2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 123456789);
        assertEquals(123456789, result.intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForLong_aVPF3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 123456789012345L);
        assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForLong_aVPF3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 123456789012345L);
        assertEquals(123456789012345L, result.longValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForFloat_PvXp4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 123.45);
        assertTrue(result instanceof Float);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForFloat_PvXp4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 123.45);
        assertEquals(123.45f, result.floatValue(), 0.0f);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForDouble_ZZyV5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 123456.789);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForDouble_ZZyV5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 123456.789);
        assertEquals(123456.789, result.doubleValue(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigInteger_IxKX6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 1234567890123456789L);
        assertTrue(result instanceof BigInteger);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigInteger_IxKX6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 1234567890123456789L);
        assertEquals(new BigInteger("1234567890123456789"), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigDecimal_Nwvz7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 123456.7890123456789);
        assertTrue(result instanceof BigDecimal);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigDecimal_Nwvz7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 123456.7890123456789);
        assertEquals(new BigDecimal("123456.7890123456789"), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberWithNullType_sWXn11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertNull(converter.allocateNumber(null, 123));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToItself_MAJW2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object obj = new Object();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToSingleElement_lrdL8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = {"a", "b", "c"};
        String result = (String) converter.convert(array, String.class);
        assertEquals("Converting array to single element should return the first element", "a", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertEmptyArrayToSingleElement_lunR9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String[] array = {};
        String result = (String) converter.convert(array, String.class);
        assertEquals("Converting empty array to single element should return empty string", "", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToSingleElement_fgen12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = Arrays.asList("a", "b", "c");
        String result = (String) converter.convert(list, String.class);
        assertEquals("Converting Collection to single element should return the first element", "a", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertEmptyCollectionToSingleElement_byXf13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> list = new ArrayList<>();
        String result = (String) converter.convert(list, String.class);
        assertEquals("Converting empty Collection to single element should return empty string", "", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveBoolean_ZOsY0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveBoolean_ZOsY0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertTrue(result instanceof Boolean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveBoolean_ZOsY0_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(true, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveCharacter_vsiX1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveCharacter_vsiX1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertTrue(result instanceof Character);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveCharacter_vsiX1_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertEquals('a', result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveByte_qSBV2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveByte_qSBV2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertTrue(result instanceof Byte);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveByte_qSBV2_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertEquals((byte) 1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveShort_zKDD3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", Short.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveShort_zKDD3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", Short.class);
        assertTrue(result instanceof Short);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveShort_zKDD3_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", Short.class);
        assertEquals((short) 123, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInteger_jYkG4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("12345", Integer.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInteger_jYkG4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("12345", Integer.class);
        assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInteger_jYkG4_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("12345", Integer.class);
        assertEquals(12345, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveLong_zBCd5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1234567890", Long.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveLong_zBCd5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1234567890", Long.class);
        assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveLong_zBCd5_3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1234567890", Long.class);
        assertEquals(1234567890L, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveNull_BrXx8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("test", null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithNonPrimitiveWrapper_KDvf9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("test", String.class);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidBoolean_FENP10_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("not_a_boolean", Boolean.class);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidBoolean_FENP10_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("not_a_boolean", Boolean.class);
        assertFalse((Boolean) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidCharacter_IyOh11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("", Character.class);
            fail("Expected an exception to be thrown");
        } catch (StringIndexOutOfBoundsException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidByte_VqRT12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("256", Byte.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidShort_bRbq13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("not_a_short", Short.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidInteger_qqUK14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("not_an_integer", Integer.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidLong_HdvN15() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("not_a_long", Long.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidFloat_QHwQ16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("not_a_float", Float.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidDouble_pkfl17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.convertStringToPrimitive("not_a_double", Double.class);
            fail("Expected an exception to be thrown");
        } catch (NumberFormatException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvert_PointerToType_MYsO15_Olrl0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String value = "value";
    assertTrue(converter.convertStringToPrimitive(value, String.class).equals(value));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNullToObject_Oerp0_HYUj0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertNull(converter.convertStringToPrimitive(null, Object.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_QVNB0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Integer.class);
    assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_QVNB0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Integer.class);
    assertEquals(123, (int) result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveForAtomicLong_RsIW9_YkAQ0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456789012345", Long.class);
    assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveForAtomicLong_RsIW9_YkAQ0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456789012345", Long.class);
    assertEquals(123456789012345L, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToArrayOfSameType_gqDi5_EZnh0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] array = {1, 2, 3};
    Integer[] result = (Integer[]) converter.convert(array, Integer[].class);
    assertArrayEquals(array, result, "Converting array to array of same type should return the same array");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertPointerToObject_BqRY4_kqjL0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String pointerValue = "value";
    assertEquals("value", converter.convertStringToPrimitive(pointerValue, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNodeSetToObject_JdzA3_FZRA0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> values = Arrays.asList("value1", "value2");
    assertEquals(values, converter.convertStringToPrimitive(values, Object.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertArrayToDifferentArrayType_VSnJ6_oLOu0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] array = {1, 2, 3};
    Double[] result = (Double[]) converter.convert(array, Double[].class);
    assertArrayEquals(new Double[]{1.0, 2.0, 3.0}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToArray_Rsxy10_aTgz0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> list = Arrays.asList("a", "b", "c");
    String[] result = (String[]) converter.convert(list, String[].class);
    assertArrayEquals(new String[]{"a", "b", "c"}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertBooleanToNumber_OwrS14_WLPD0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String value = "true";
    Integer result = (Integer) converter.convertStringToPrimitive(value, Integer.class);
    assertEquals(Integer.valueOf(1), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertCollectionToCollection_JzNc11_aFnr0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> list = Arrays.asList("a", "b", "c");
    Set<String> result = new HashSet<>(list);
    assertEquals(new HashSet<>(Arrays.asList("a", "b", "c")), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertNumberToDifferentNumberType_KCFk17_DSdM0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String value = "1"; // Convert the integer to a string to match the method signature
    Double result = (Double) converter.convertStringToPrimitive(value, Double.class);
    assertEquals(Double.valueOf(1.0), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveFloat_Swbq6_xlcC0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14", Float.class);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveFloat_Swbq6_xlcC0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14", Float.class);
    assertTrue(result instanceof Float);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveFloat_Swbq6_xlcC0_3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14", Float.class);
    assertEquals(3.14f, (Float) result, 0.0f);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertUsingCustomConverter_hVHv19_Ggrl0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    String customType = "custom";
    String result = (String) converter.convertStringToPrimitive(customType, String.class);
    assertEquals("Custom converter should handle conversion", customType, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveDouble_XzrN7_rwZp0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14159", Double.class);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveDouble_XzrN7_rwZp0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14159", Double.class);
    assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveDouble_XzrN7_rwZp0_3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("3.14159", Double.class);
    assertEquals(3.14159, (Double) result, 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_IPhM0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(boolean.class);
        assertNotNull(result);
        assertTrue(result instanceof Boolean);
        assertFalse((Boolean) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_IMIk1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(char.class);
        assertNotNull(result);
        assertTrue(result instanceof Character);
        assertEquals('\0', (char) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_IEWx2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(byte.class);
        assertNotNull(result);
        assertTrue(result instanceof Byte);
        assertEquals(0, (byte) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_AbBL3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(short.class);
        assertNotNull(result);
        assertTrue(result instanceof Short);
        assertEquals(0, (short) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_qSXR4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(int.class);
        assertNotNull(result);
        assertTrue(result instanceof Integer);
        assertEquals(0, (int) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_ReKG5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(long.class);
        assertNotNull(result);
        assertTrue(result instanceof Long);
        assertEquals(0L, (long) result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_efdA6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(float.class);
        assertNotNull(result);
        assertTrue(result instanceof Float);
        assertEquals(0.0f, (float) result, 0.0f);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_gbIF7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertNullToPrimitive(double.class);
        assertNotNull(result);
        assertTrue(result instanceof Double);
        assertEquals(0.0, (double) result, 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptyList_lfnF4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<String> emptyList = new ArrayList<>();
        Collection result = converter.unmodifiableCollection(emptyList);
        assertTrue(result instanceof List);
        assertEquals(0, result.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySortedSet_MBTq5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        SortedSet<String> emptySortedSet = new TreeSet<>();
        Collection result = converter.unmodifiableCollection(emptySortedSet);
        assertTrue(result instanceof SortedSet);
        assertEquals(0, result.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionWithEmptySet_xNPe6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Set<String> emptySet = new HashSet<>();
        Collection result = converter.unmodifiableCollection(emptySet);
        assertTrue(result instanceof Set);
        assertEquals(0, result.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForByte_XVuP0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 123);
        assertTrue(result instanceof Byte);
        assertEquals((byte) 123, result.byteValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForShort_oZDS1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 12345);
        assertTrue(result instanceof Short);
        assertEquals((short) 12345, result.shortValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForInteger_lsNh2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 123456789);
        assertTrue(result instanceof Integer);
        assertEquals(123456789, result.intValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForLong_aVPF3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 123456789012345L);
        assertTrue(result instanceof Long);
        assertEquals(123456789012345L, result.longValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForFloat_PvXp4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 123.45);
        assertTrue(result instanceof Float);
        assertEquals(123.45f, result.floatValue(), 0.0f);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForDouble_ZZyV5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 123456.789);
        assertTrue(result instanceof Double);
        assertEquals(123456.789, result.doubleValue(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigInteger_IxKX6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 1234567890123456789L);
        assertTrue(result instanceof BigInteger);
        assertEquals(new BigInteger("1234567890123456789"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberForBigDecimal_Nwvz7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 123456.7890123456789);
        assertTrue(result instanceof BigDecimal);
        assertEquals(new BigDecimal("123456.7890123456789"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveBoolean_ZOsY0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertNotNull(result);
        assertTrue(result instanceof Boolean);
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveCharacter_vsiX1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("a", Character.class);
        assertNotNull(result);
        assertTrue(result instanceof Character);
        assertEquals('a', result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveByte_qSBV2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1", Byte.class);
        assertNotNull(result);
        assertTrue(result instanceof Byte);
        assertEquals((byte) 1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveShort_zKDD3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", Short.class);
        assertNotNull(result);
        assertTrue(result instanceof Short);
        assertEquals((short) 123, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInteger_jYkG4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("12345", Integer.class);
        assertNotNull(result);
        assertTrue(result instanceof Integer);
        assertEquals(12345, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveLong_zBCd5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("1234567890", Long.class);
        assertNotNull(result);
        assertTrue(result instanceof Long);
        assertEquals(1234567890L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveWithInvalidBoolean_FENP10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("not_a_boolean", Boolean.class);
        assertNotNull(result);
        assertFalse((Boolean) result);
    }
}