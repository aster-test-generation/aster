/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreOperationUnion_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_mlKx0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[]{});
        String result = coreOperationUnion.getSymbol();
        assertEquals("|", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_EmptyArgs_uCRV0() {
        Expression[] args = new Expression[0];
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        union.computeValue(context);
        verify(context).getRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_SingleArgReturningEvalContext_skFw1() {
        Expression[] args = new Expression[1];
        args[0] = mock(Expression.class);
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        EvalContext argContext = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn(argContext);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        union.computeValue(context);
        verify(args[0]).compute(context);
        verify(context, times(2)).getRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_SingleArgReturningNonEvalContext_fIsM2() {
        Expression[] args = new Expression[1];
        args[0] = mock(Expression.class);
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        Object nonEvalContextValue = new Object();
        when(args[0].compute(context)).thenReturn(nonEvalContextValue);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(nonEvalContextValue)).thenReturn(mock(EvalContext.class));
        union.computeValue(context);
        verify(args[0]).compute(context);
        verify(rootContext).getConstantContext(nonEvalContextValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_MultipleArgsAllReturningEvalContext_fARo3() {
        Expression[] args = new Expression[2];
        args[0] = mock(Expression.class);
        args[1] = mock(Expression.class);
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        EvalContext argContext1 = mock(EvalContext.class);
        EvalContext argContext2 = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn(argContext1);
        when(args[1].compute(context)).thenReturn(argContext2);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        union.computeValue(context);
        verify(args[0]).compute(context);
        verify(args[1]).compute(context);
        verify(context, times(3)).getRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_MultipleArgsMixedReturnTypes_Bflv4() {
        Expression[] args = new Expression[2];
        args[0] = mock(Expression.class);
        args[1] = mock(Expression.class);
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        EvalContext argContext1 = mock(EvalContext.class);
        Object nonEvalContextValue = new Object();
        when(args[0].compute(context)).thenReturn(argContext1);
        when(args[1].compute(context)).thenReturn(nonEvalContextValue);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getConstantContext(nonEvalContextValue)).thenReturn(mock(EvalContext.class));
        union.computeValue(context);
        verify(args[0]).compute(context);
        verify(args[1]).compute(context);
        verify(rootContext).getConstantContext(nonEvalContextValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ReturnUnionContext_YqFr5() {
        Expression[] args = new Expression[1];
        args[0] = mock(Expression.class);
        CoreOperationUnion union = new CoreOperationUnion(args);
        EvalContext context = mock(EvalContext.class);
        EvalContext argContext = mock(EvalContext.class);
        when(args[0].compute(context)).thenReturn(argContext);
        RootContext rootContext = mock(RootContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        Object result = union.computeValue(context);
        assertTrue(result instanceof UnionContext);
        verify(context, times(2)).getRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsTrue_xjMC0_wLjO0() {
    Expression[] expressions = new Expression[0]; // Assuming empty array is a valid input
    CoreOperationUnion coreOperationUnion = new CoreOperationUnion(expressions);
    assertTrue(coreOperationUnion.isSymmetric(), "isSymmetric should return true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_EYpE0_SlCX0() {
    Expression[] args = new Expression[0]; // Assuming constructor can handle empty array
    CoreOperationUnion coreOperationUnion = new CoreOperationUnion(args);
    int expectedPrecedence = CoreOperationUnion.UNION_PRECEDENCE; // Assuming UNION_PRECEDENCE is a static field
    assertEquals(expectedPrecedence, coreOperationUnion.getPrecedence(), "Precedence should match UNION_PRECEDENCE");
}
}