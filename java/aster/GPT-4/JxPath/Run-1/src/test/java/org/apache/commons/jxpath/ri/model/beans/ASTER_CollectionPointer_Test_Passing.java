/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
private CollectionPointer collectionPointer;
private static final int WHOLE_COLLECTION = -1;
@Mock
    private DOMNodePointer parent;
@Mock
    private Object collection;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private NodeTest nodeTestMock;
@Mock
    private NodeNameTest nodeNameTestMock;
@Mock
    private NodeTypeTest nodeTypeTestMock;
@Mock
    private JXPathContext context;
@Mock
    private QName name;
@Mock
    private NodePointer clonedNodePointer;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private NodeIterator mockNodeIterator;
@Mock
    private QName qNameMock;
@Mock
    private NodePointer mockNodePointer;
@Mock
    private NodeTest mockNodeTest;
@Mock
    private Object collectionMock;
private CollectionPointer sameCollectionPointer;
private CollectionPointer differentCollectionPointer;
private CollectionPointer nullCollectionPointer;
@Mock
    private NodePointer mockParentPointer;
@Mock
    private QName mockQName;
@Mock
    private Object mockNode;
@Mock
    private JXPathContext mockContext;
@Mock
    private DOMNodePointer domNodePointer;
    private NodePointer valuePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenFirstPointerHasHigherIndex() {
        collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(2);
        when(pointer2.getIndex()).thenReturn(1);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertTrue(result > 0, "Expected result to be positive when pointer1 has a higher index than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenPointersHaveSameIndex() {
        collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(1);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result, "Expected result to be zero when both pointers have the same index");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_WhenFirstPointerHasLowerIndex() {
        collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertTrue(result < 0, "Expected result to be negative when pointer1 has a lower index than pointer2");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_WholeCollection() throws Exception {
        collectionPointer = new CollectionPointer(parent, collection);
        // Arrange
        Object newValue = new Object();
        doNothing().when(parent).setValue(newValue);
        // Act
        collectionPointer.setValue(newValue);
        // Assert
        verify(parent).setValue(newValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenTestIsNull_ReturnsTrue() throws Exception {
        collectionPointer = new CollectionPointer(domNodePointerMock, new Object());
        assertTrue(collectionPointer.testNode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenTestIsNodeNameTest_ReturnsFalse() throws Exception {
        collectionPointer = new CollectionPointer(domNodePointerMock, new Object());
        assertFalse(collectionPointer.testNode(nodeNameTestMock));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenTestIsNodeTypeTestWithCorrectNodeType_ReturnsTrue() throws Exception {
        collectionPointer = new CollectionPointer(domNodePointerMock, new Object());
        when(nodeTypeTestMock.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(collectionPointer.testNode(nodeTypeTestMock));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenTestIsNodeTypeTestWithIncorrectNodeType_ReturnsFalse() throws Exception {
        collectionPointer = new CollectionPointer(domNodePointerMock, new Object());
        when(nodeTypeTestMock.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT); // Assuming NODE_TYPE_TEXT is a different type
        assertFalse(collectionPointer.testNode(nodeTypeTestMock));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_SpecificIndex_wLjt1() {
        DOMNodePointer parentNode = new DOMNodePointer(null, Locale.getDefault());
        List<Integer> initialCollection = new ArrayList<>(Arrays.asList(1, 2, 3));
        CollectionPointer collectionPointer = new CollectionPointer(parentNode, initialCollection);
        Integer newValue =2;
        int index = 1;
        assertEquals(newValue, initialCollection.get(index));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_ihsN0_1() {
    Locale locale = new Locale("en", "US");
    Object collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(null, new Object());
    QName name = new QName("testName");
    int index = 0;
    NodePointer result = collectionPointer.createChild(context, name, index);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_ihsN0_2() {
    Locale locale = new Locale("en", "US");
    Object collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(null, new Object());
    QName name = new QName("testName");
    int index = 0;
    NodePointer result = collectionPointer.createChild(context, name, index);
    assertEquals(index, result.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_sfxM0() {
    CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
    assertTrue(collectionPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenIndexIsWholeCollectionAndTestIsNull_ShouldReturnTrue_iEfn0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        assertTrue(cp.testNode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenIndexIsWholeCollectionAndTestIsNodeNameTest_ShouldReturnFalse_MrTe1() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTest nodeNameTest = new NodeNameTest(new QName("name"));
        assertFalse(cp.testNode(nodeNameTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenIndexIsWholeCollectionAndTestIsNodeTypeTestWithNodeTypeNode_ShouldReturnTrue_QcTc2() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        assertTrue(cp.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_WhenIndexIsWholeCollectionAndTestIsNodeTypeTestWithDifferentNodeType_ShouldReturnFalse_tGdg4() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeTypeTest nodeTypeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        assertFalse(cp.testNode(nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorOnWholeCollection_uKsc0() {
        Object collection = new ArrayList<>();
        Locale locale = new Locale("en", "US");
        CollectionPointer cp = new CollectionPointer(collection, locale);
        QName qName = new QName("testAttribute");
        NodeIterator result = cp.attributeIterator(qName);
        assertTrue(result instanceof CollectionAttributeNodeIterator);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorOnSpecificValue_xpti1() {
        Object collection = new ArrayList<>();
        Locale locale = new Locale("en", "US");
        CollectionPointer cp = new CollectionPointer(collection, locale);
        QName qName = new QName("testAttribute");
        NodeIterator result = cp.attributeIterator(qName);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode() throws Exception {
        collectionPointer = new CollectionPointer(domNodePointerMock, collectionMock);
        when(domNodePointerMock.getNode()).thenReturn(null);
        assertFalse(collectionPointer.isLeaf(), "isLeaf should return true when node is null");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject() throws Exception {
        collection = new Object();
        collectionPointer = new CollectionPointer(collection, Locale.getDefault());
        sameCollectionPointer = new CollectionPointer(collection, Locale.getDefault());
        differentCollectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        nullCollectionPointer = null;
        assertTrue(collectionPointer.equals(collectionPointer), "Should return true when comparing the same object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() throws Exception {
        collection = new Object();
        collectionPointer = new CollectionPointer(collection, Locale.getDefault());
        sameCollectionPointer = new CollectionPointer(collection, Locale.getDefault());
        differentCollectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        nullCollectionPointer = null;
        assertFalse(collectionPointer.equals(new Object()), "Should return false when comparing with a different class object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() throws Exception {
        collection = new Object();
        collectionPointer = new CollectionPointer(collection, Locale.getDefault());
        sameCollectionPointer = new CollectionPointer(collection, Locale.getDefault());
        differentCollectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        nullCollectionPointer = null;
        assertFalse(collectionPointer.equals(nullCollectionPointer), "Should return false when comparing with null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameCollection() throws Exception {
        collection = new Object();
        collectionPointer = new CollectionPointer(collection, Locale.getDefault());
        sameCollectionPointer = new CollectionPointer(collection, Locale.getDefault());
        differentCollectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        nullCollectionPointer = null;
        assertTrue(collectionPointer.equals(sameCollectionPointer), "Should return true when comparing objects with the same collection.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCollection() throws Exception {
        collection = new Object();
        collectionPointer = new CollectionPointer(collection, Locale.getDefault());
        sameCollectionPointer = new CollectionPointer(collection, Locale.getDefault());
        differentCollectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        nullCollectionPointer = null;
        assertFalse(collectionPointer.equals(differentCollectionPointer), "Should return false when comparing objects with different collections.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_HDDl1() {
        String atomicValue = "TestString";
        CollectionPointer cp = new CollectionPointer(atomicValue, Locale.getDefault());
        assertTrue(cp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_DXle2() {
        List<String> nonAtomicValue = Arrays.asList("one", "two", "three");
        CollectionPointer cp = new CollectionPointer(nonAtomicValue, Locale.getDefault());
        assertFalse(cp.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorReturnsNullForWholeCollection_JCGj0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodeIterator result = cp.namespaceIterator();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_WholeCollection_uMQV0() {
        CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
        NodePointer result = cp.getValuePointer();
        assertEquals(cp, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_SFUk0() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    assertTrue(cp.equals(cp));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_BQSv1() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    assertFalse(cp.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_YsKA2() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    Object differentClassObject = new Object();
    assertFalse(cp.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentCollection_xAuO3() {
    Object collection1 = new Object();
    Object collection2 = new Object();
    CollectionPointer cp1 = new CollectionPointer(collection1, Locale.getDefault());
    CollectionPointer cp2 = new CollectionPointer(collection2, Locale.getDefault());
    assertFalse(cp1.equals(cp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithExpansionNeeded_SRuR0_1() {
    Object collection = Arrays.asList(new Object[5]);
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = collectionPointer.createPath(context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithExpansionNeeded_SRuR0_2() {
    Object collection = Arrays.asList(new Object[5]);
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = collectionPointer.createPath(context);
    assertEquals(5, ValueUtils.getLength(collectionPointer.getBaseValue()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithoutExpansionNeeded_iZHV1_1() {
    Object collection = Arrays.asList(new Object[10]);
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = collectionPointer.createPath(context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithoutExpansionNeeded_iZHV1_2() {
    Object collection = Arrays.asList(new Object[10]);
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = collectionPointer.createPath(context);
    assertEquals(10, ValueUtils.getLength(collectionPointer.getBaseValue()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_WhenIndexIsWholeCollection_ShouldReturnNull() {
        collectionPointer = new CollectionPointer(domNodePointerMock, new Object());
        // Setup
        when(domNodePointerMock.getIndex()).thenReturn(WHOLE_COLLECTION);
        // Execute
        NodePointer result = collectionPointer.namespacePointer("anyNamespace");
        // Verify
        assertNull(result, "Expected null when index is WHOLE_COLLECTION");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerFalse_QHyW1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), null);
        assertFalse(collectionPointer.isContainer());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithParentAndWholeCollection() throws Exception {
        when(mockParent.asPath()).thenReturn("/parentPath");
        when(mockParent.getIndex()).thenReturn(WHOLE_COLLECTION);
        collectionPointer = new CollectionPointer(mockParent, new Object());
        assertEquals("/parentPath", collectionPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_jIKh0_1() {
    Locale locale = new Locale("en", "US");
    Object collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    QName name = new QName("testName");
    int index = 0;
    Object value = "testValue";
    NodePointer result = collectionPointer.createChild(context, name, index, value);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        collection = new Object();
        domNodePointer = mock(DOMNodePointer.class); // Mocking DOMNodePointer
        collectionPointer = new CollectionPointer(domNodePointer, collection);
        Object result = collectionPointer.getBaseValue();
        assertEquals(collection, result, "The returned base value should be the same as the collection set in setup.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_PoLv0() {
    List<Object> testCollection = Arrays.asList("item1", "item2", "item3");
    Locale testLocale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(testCollection, testLocale);
    Object result = collectionPointer.getBaseValue();
    assertEquals(testCollection, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNoParentAndWholeCollection_VqfP0() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    String result = cp.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_WhenIndexIsWholeCollectionAndTestIsNotNodeNameTestOrNodeTypeTest_ShouldReturnFalse_KfnQ5_JZyC0() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    NodeTest someOtherNodeTest = new NodeNameTest(new QName("someName"));
    assertFalse(cp.testNode(someOtherNodeTest));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_SpecificIndex_slNI1_OwQV0() {
    Object collection = new ArrayList<>(Arrays.asList("apple", "banana", "cherry"));
    Locale locale = new Locale("en", "US");
    CollectionPointer cp = new CollectionPointer(collection, locale);
    cp.setIndex(1); // Assuming setIndex method is correctly implemented in CollectionPointer to handle index setting
    Object result = cp.getImmediateNode();
    assertEquals("banana", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_WholeCollection_ohvd0_Kdmz0() {
    Object collection = new ArrayList<>(Arrays.asList("apple", "banana", "cherry"));
    Locale locale = new Locale("en", "US");
    CollectionPointer cp = new CollectionPointer(collection, locale);
    cp.setIndex(CollectionPointer.WHOLE_COLLECTION);
    Object result = cp.getImmediateNode();
    assertEquals(Arrays.asList("apple", "banana", "cherry"), result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPath_WholeCollection_uSrI0() throws Exception {
    final int WHOLE_COLLECTION = -1;
    DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
    Object collection = new Object();
    CollectionPointer collectionPointer = new CollectionPointer(domNodePointerMock, collection);
    when(domNodePointerMock.asPath()).thenReturn("/");
    String result = collectionPointer.asPath();
    assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNoParentAndSpecificIndex_JDsV1_vYgZ0() {
    CollectionPointer cp = new CollectionPointer(new Object(), Locale.getDefault());
    cp.setIndex(2); // Correctly using a setter method to set the index
    String result = cp.asPath();
    assertEquals("/.[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_ihsN0() {
    Locale locale = new Locale("en", "US");
    Object collection = new ArrayList<>();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(null, new Object());
    QName name = new QName("testName");
    int index = 0;
    NodePointer result = collectionPointer.createChild(context, name, index);
    assertNotNull(result);
    assertEquals(index, result.getIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithoutExpansionNeeded_iZHV1() {
    Object collection = Arrays.asList(new Object[10]);
    Locale locale = Locale.getDefault();
    CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = collectionPointer.createPath(context);
    assertNotNull(result);
    assertEquals(10, ValueUtils.getLength(collectionPointer.getBaseValue()));
}
}