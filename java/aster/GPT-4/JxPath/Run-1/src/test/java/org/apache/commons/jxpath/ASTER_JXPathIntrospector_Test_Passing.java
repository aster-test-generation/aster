/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathIntrospector_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithExistingBeanInfo_RKKD1_1() {
        Class<?> beanClass = JXPathBeanInfo.class; // JXPathBeanInfo is its own BeanInfo
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithExistingBeanInfo_RKKD1_2() {
        Class<?> beanClass = JXPathBeanInfo.class; // JXPathBeanInfo is its own BeanInfo
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass);
        assertTrue(result instanceof JXPathBeanInfo);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithCachedBeanInfo_kypG3_1() {
        Class<?> beanClass = JXPathBasicBeanInfo.class; // Assuming JXPathBasicBeanInfo is already cached
        JXPathIntrospector.getBeanInfo(beanClass); // First call to cache it
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass); // Second call should retrieve from cache
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithCachedBeanInfo_kypG3_2() {
        Class<?> beanClass = JXPathBasicBeanInfo.class; // Assuming JXPathBasicBeanInfo is already cached
        JXPathIntrospector.getBeanInfo(beanClass); // First call to cache it
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass); // Second call should retrieve from cache
        assertTrue(result instanceof JXPathBasicBeanInfo);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterAtomicClass_Jznh0_dTrx0_1() {
    Class<?> testClass = String.class;
    JXPathIntrospector.registerAtomicClass(testClass);
    JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(testClass);
    assertNotNull(beanInfo);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterAtomicClass_Jznh0_dTrx0_2() {
    Class<?> testClass = String.class;
    JXPathIntrospector.registerAtomicClass(testClass);
    JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(testClass);
    assertTrue(beanInfo instanceof JXPathBasicBeanInfo);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithExistingBeanInfo_RKKD1() {
        Class<?> beanClass = JXPathBeanInfo.class; // JXPathBeanInfo is its own BeanInfo
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass);
        assertNotNull(result);
        assertTrue(result instanceof JXPathBeanInfo);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfo_WithCachedBeanInfo_kypG3() {
        Class<?> beanClass = JXPathBasicBeanInfo.class; // Assuming JXPathBasicBeanInfo is already cached
        JXPathIntrospector.getBeanInfo(beanClass); // First call to cache it
        JXPathBeanInfo result = JXPathIntrospector.getBeanInfo(beanClass); // Second call should retrieve from cache
        assertNotNull(result);
        assertTrue(result instanceof JXPathBasicBeanInfo);
    }
}