/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocationPath_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyStepsAndNotAbsolute_VrIs0() {
        Step[] steps = new Step[0];
        LocationPath path = new LocationPath(false, steps);
        assertEquals("", path.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullSteps_uYUR1() {
        LocationPath path = new LocationPath(false, null);
        assertEquals("", path.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeWithAbsoluteTrue_LNXx0() {
        LocationPath locationPath = new LocationPath(true, null);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        locationPath.compute(context);
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeWithAbsoluteFalse_Ushh1() {
        LocationPath locationPath = new LocationPath(false, null);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        locationPath.compute(context);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeWithMockedEvalSteps_TIzY3() {
        LocationPath locationPath = spy(new LocationPath(false, null));
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        Object evalStepsResult = new Object();
        doReturn(evalStepsResult).when(locationPath).evalSteps(any(EvalContext.class));
        Object result = locationPath.compute(context);
        verify(locationPath).evalSteps(any(EvalContext.class));
        assertEquals(evalStepsResult, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWhenPathIsAbsolute_MdFG0() {
        boolean absolute = true;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        locationPath.computeValue(context);
        verify(context).getRootContext();
        verify(rootContext).getAbsoluteRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWhenPathIsNotAbsolute_FXGy1() {
        boolean absolute = false;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = mock(InitialContext.class);
        locationPath.computeValue(context);
        verify(context, never()).getRootContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueReturnsSingleNodePointerForSteps_PiVf2() {
        boolean absolute = true;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        RootContext rootContext = mock(RootContext.class);
        EvalContext absoluteRootContext = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(rootContext);
        when(rootContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        Object result = locationPath.computeValue(context);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueInitialContextUsedWhenNotAbsolute_QEsM3() {
        boolean absolute = false;
        Step[] steps = new Step[0];
        LocationPath locationPath = new LocationPath(absolute, steps);
        EvalContext context = mock(EvalContext.class);
        InitialContext initialContext = new InitialContext(context);
        locationPath.computeValue(context);
        assertNotNull(initialContext);
    }
}