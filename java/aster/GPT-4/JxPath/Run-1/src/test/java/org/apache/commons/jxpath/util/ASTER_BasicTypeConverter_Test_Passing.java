/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.math.BigDecimal;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BasicTypeConverter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithConcreteClass_LZUs0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithAbstractClass_aCmx1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithInterface_mMPm2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithSetInterface_KEeI3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithCollectionInterface_LZSd4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithNonInstantiableClass_CECu5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(LinkedList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionWithArrayListClass_SFaK0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = converter.allocateCollection(ArrayList.class);
    assertTrue(collection instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionWithHashSetClass_HvzQ1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = converter.allocateCollection(HashSet.class);
    assertTrue(collection instanceof HashSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionWithListInterface_HiPN2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = converter.allocateCollection(List.class);
    assertTrue(collection instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionWithSetInterface_AGlM3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = converter.allocateCollection(Set.class);
    assertTrue(collection instanceof HashSet);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAllocateCollectionWithCollectionInterface_XNDc4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection collection = converter.allocateCollection(Collection.class);
    assertTrue(collection instanceof ArrayList);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_OIJH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Boolean.FALSE, converter.convertNullToPrimitive(boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveChar_PHMi1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Character.valueOf('\0'), converter.convertNullToPrimitive(char.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveByte_vvZM2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Byte.valueOf((byte) 0), converter.convertNullToPrimitive(byte.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveShort_jjnl3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Short.valueOf((short) 0), converter.convertNullToPrimitive(short.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_uRGE4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Integer.valueOf(0), converter.convertNullToPrimitive(int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveLong_VMcx5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Long.valueOf(0L), converter.convertNullToPrimitive(long.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveFloat_DgSp6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Float.valueOf(0.0f), converter.convertNullToPrimitive(float.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveDouble_pQDE7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(Double.valueOf(0.0), converter.convertNullToPrimitive(double.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveNonPrimitive_XjBy8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertNull(converter.convertNullToPrimitive(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithList_fmQL0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(list);
    assertTrue(result instanceof List);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithList_fmQL0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(list);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSortedSet_WyUt1_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> sortedSet = new TreeSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(sortedSet);
    assertTrue(result instanceof SortedSet);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSortedSet_WyUt1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> sortedSet = new TreeSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(sortedSet);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSet_JmWi2_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> set = new HashSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(set);
    assertTrue(result instanceof Set);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSet_JmWi2_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> set = new HashSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(set);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithCollection_fliN3_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(collection);
    assertTrue(result instanceof Collection);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithCollection_fliN3_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(collection);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBoolean_bIOG0_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("true", Boolean.TYPE);
    assertTrue(result instanceof Boolean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBoolean_bIOG0_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("true", Boolean.TYPE);
    assertEquals(true, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToCharacter_SxRR1_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("a", Character.TYPE);
    assertTrue(result instanceof Character);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToCharacter_SxRR1_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("a", Character.TYPE);
    assertEquals('a', result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToByte_kxAQ2_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Byte.TYPE);
    assertTrue(result instanceof Byte);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToByte_kxAQ2_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Byte.TYPE);
    assertEquals((byte) 123, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToShort_Ujjt3_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("12345", Short.TYPE);
    assertTrue(result instanceof Short);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToShort_Ujjt3_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("12345", Short.TYPE);
    assertEquals((short) 12345, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_tiiZ4_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456", Integer.TYPE);
    assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_tiiZ4_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456", Integer.TYPE);
    assertEquals(123456, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToLong_KLRq5_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456789", Long.TYPE);
    assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToLong_KLRq5_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456789", Long.TYPE);
    assertEquals(123456789L, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToFloat_HTGo6_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.45", Float.TYPE);
    assertTrue(result instanceof Float);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToFloat_HTGo6_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.45", Float.TYPE);
    assertEquals(123.45f, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToDouble_IPrQ7_1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.456", Double.TYPE);
    assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToDouble_IPrQ7_2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.456", Double.TYPE);
    assertEquals(123.456, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToPrimitiveWithNull_QBVU8() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Void.TYPE);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_UIhi0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertTrue(result instanceof Byte);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_UIhi0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertEquals(Byte.valueOf((byte) 10), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_dUtt1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertTrue(result instanceof Short);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_dUtt1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertEquals(Short.valueOf((short) 10), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_JpTy2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_JpTy2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertEquals(Integer.valueOf(10), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_HrEw3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertTrue(result instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_HrEw3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertEquals(Long.valueOf(10L), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_Gbfy4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertTrue(result instanceof Float);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_Gbfy4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertEquals(Float.valueOf(10.5f), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_KATV5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_KATV5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertEquals(Double.valueOf(10.5), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_qCLq6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertTrue(result instanceof BigInteger);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_qCLq6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertEquals(BigInteger.valueOf(10L), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_LdVg7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertTrue(result instanceof BigDecimal);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_LdVg7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertEquals(new BigDecimal(10.5), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicInteger_eSEQ8_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicInteger.class, 10.5);
        assertTrue(result instanceof java.util.concurrent.atomic.AtomicInteger);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberAtomicLong_OXkl9_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(java.util.concurrent.atomic.AtomicLong.class, 10.5);
        assertTrue(result instanceof java.util.concurrent.atomic.AtomicLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberNegativeValue_qmZH10_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, -10.5);
        assertTrue(result instanceof Integer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberNegativeValue_qmZH10_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, -10.5);
        assertEquals(Integer.valueOf(-10), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberZeroValue_zElv11_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 0.0);
        assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberZeroValue_zElv11_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 0.0);
        assertEquals(Double.valueOf(0.0), result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertNullObject_uucg0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(null, String.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertSameType_ifzU1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(123, Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToBoolean_geBL2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("true", Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToCharacter_NeIH3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("a", Character.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToByte_YrzW4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1", Byte.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToShort_HlnM5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1", Short.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToInteger_rZiY6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1", Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToLong_PkjQ7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1", Long.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToFloat_Cgfs8() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1.0", Float.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToDouble_lHMM9() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("1.0", Double.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertBooleanToNumber_OLJi10() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(true, Integer.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertNumberToBoolean_RCUi11() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(1, Boolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertArrayToArray_orkV12() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] intArray = {1, 2, 3};
    assertTrue(converter.canConvert(intArray, Integer[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertArrayToCollection_PVfm13() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] intArray = {1, 2, 3};
    assertTrue(converter.canConvert(intArray, List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertCollectionToArray_ZRjx14() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<Integer> intList = Arrays.asList(1, 2, 3);
    assertTrue(converter.canConvert(intList, Integer[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertCollectionToCollection_PxLQ15() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<Integer> intList = Arrays.asList(1, 2, 3);
    assertTrue(converter.canConvert(intList, List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertEmptyArrayToArray_AClE16() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] intArray = {};
    assertTrue(converter.canConvert(intArray, Integer[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertEmptyArrayToCollection_tvEa17() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Integer[] intArray = {};
    assertTrue(converter.canConvert(intArray, List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertEmptyCollectionToArray_RGEC18() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<Integer> intList = Collections.emptyList();
    assertTrue(converter.canConvert(intList, Integer[].class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertEmptyCollectionToCollection_GZPJ19() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<Integer> intList = Collections.emptyList();
    assertTrue(converter.canConvert(intList, List.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertBooleanToAtomicBoolean_drxU22() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert(true, java.util.concurrent.atomic.AtomicBoolean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertNumberToAtomicBoolean_zvOx23() {
    BasicTypeConverter converter = new BasicTypeConverter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToBigInteger_FEaR25() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("123456789", java.math.BigInteger.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToBigDecimal_wfSj26() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("12345.6789", java.math.BigDecimal.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToDate_oprq27() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("2023-01-01", java.util.Date.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToCurrency_aPFu30() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertFalse(converter.canConvert("USD", java.util.Currency.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToTimeZone_Lgtp31() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertFalse(converter.canConvert("GMT", java.util.TimeZone.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToCharset_dkSh32() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertFalse(converter.canConvert("UTF-8", java.nio.charset.Charset.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToFile_vLKn33() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("path/to/file", java.io.File.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanConvertStringToURL_ymhu34() {
    BasicTypeConverter converter = new BasicTypeConverter();
    assertTrue(converter.canConvert("http://example.com", java.net.URL.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveInt_WYIH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(0, converter.convert(null, int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNullToPrimitiveBoolean_mQEk1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(false, converter.convert(null, boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertObjectToObject_NfXL2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object obj = new Object();
        assertEquals(obj, converter.convert(obj, Object.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToString_Utuj3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        String str = "test";
        assertEquals(str, converter.convert(str, String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToNumber_xyet4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(1, converter.convert(true, Integer.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToBoolean_JNpj5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(true, converter.convert(1, Boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveInt_Qwwp6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123, converter.convert("123", int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToArray_kjrN8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] intArray = {1, 2, 3};
        Integer[] result = (Integer[]) converter.convert(intArray, Integer[].class);
        assertArrayEquals(intArray, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToArray_WNOG9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        Integer[] result = (Integer[]) converter.convert(list, Integer[].class);
        assertArrayEquals(new Integer[]{1, 2, 3}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertArrayToCollection_AxZb10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Integer[] intArray = {1, 2, 3};
        List<Integer> result = (List<Integer>) converter.convert(intArray, List.class);
        assertEquals(Arrays.asList(1, 2, 3), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertCollectionToCollection_OlMr11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        List<Integer> list = Arrays.asList(1, 2, 3);
        List<Integer> result = (List<Integer>) converter.convert(list, List.class);
        assertEquals(list, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_IAaJ14() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(true, converter.convert("true", Boolean.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertNumberToString_yqwc16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals("123", converter.convert(123, String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToString_BuIw17() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals("true", converter.convert(true, String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInteger_scMQ18() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123, converter.convert("123", Integer.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLong_jLow21() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123L, converter.convert("123", Long.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToShort_PCFt22() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((short) 123, converter.convert("123", Short.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToByte_aBAi23() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals((byte) 123, converter.convert("123", Byte.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToCharacter_PQmN24() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals('a', converter.convert("a", Character.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBigInteger_UYXB25() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(new BigInteger("123"), converter.convert("123", BigInteger.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBigDecimal_SZXY26() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(new BigDecimal("123.45"), converter.convert("123.45", BigDecimal.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitiveDouble_xOOU7_vNaU0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123.45, (Double) converter.convert("123.45", double.class), 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDouble_vnkN19_euKb0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123.45, (Double) converter.convert("123.45", Double.class), 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToFloat_ZoMy20_dqjd0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(123.45f, (float) converter.convert("123.45", Float.class), 0.001f);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToFile_Ezwd32_BCBW0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(new java.io.File("test.txt"), converter.convert("test.txt", java.io.File.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToClass_rJGI33_jLER0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertEquals(String.class, converter.convert("java.lang.String", Class.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithList_fmQL0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(list);
    assertTrue(result instanceof List);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSortedSet_WyUt1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    SortedSet<String> sortedSet = new TreeSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(sortedSet);
    assertTrue(result instanceof SortedSet);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithSet_JmWi2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Set<String> set = new HashSet<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(set);
    assertTrue(result instanceof Set);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmodifiableCollectionWithCollection_fliN3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Collection<String> collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
    Collection result = converter.unmodifiableCollection(collection);
    assertTrue(result instanceof Collection);
    assertThrows(UnsupportedOperationException.class, () -> result.add("d"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToBoolean_bIOG0() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("true", Boolean.TYPE);
    assertTrue(result instanceof Boolean);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToCharacter_SxRR1() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("a", Character.TYPE);
    assertTrue(result instanceof Character);
    assertEquals('a', result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToByte_kxAQ2() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123", Byte.TYPE);
    assertTrue(result instanceof Byte);
    assertEquals((byte) 123, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToShort_Ujjt3() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("12345", Short.TYPE);
    assertTrue(result instanceof Short);
    assertEquals((short) 12345, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToInteger_tiiZ4() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456", Integer.TYPE);
    assertTrue(result instanceof Integer);
    assertEquals(123456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToLong_KLRq5() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123456789", Long.TYPE);
    assertTrue(result instanceof Long);
    assertEquals(123456789L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToFloat_HTGo6() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.45", Float.TYPE);
    assertTrue(result instanceof Float);
    assertEquals(123.45f, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvertStringToDouble_IPrQ7() {
    BasicTypeConverter converter = new BasicTypeConverter();
    Object result = converter.convertStringToPrimitive("123.456", Double.TYPE);
    assertTrue(result instanceof Double);
    assertEquals(123.456, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_UIhi0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertTrue(result instanceof Byte);
        assertEquals(Byte.valueOf((byte) 10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_dUtt1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertTrue(result instanceof Short);
        assertEquals(Short.valueOf((short) 10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_JpTy2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertTrue(result instanceof Integer);
        assertEquals(Integer.valueOf(10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_HrEw3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertTrue(result instanceof Long);
        assertEquals(Long.valueOf(10L), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_Gbfy4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertTrue(result instanceof Float);
        assertEquals(Float.valueOf(10.5f), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_KATV5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertTrue(result instanceof Double);
        assertEquals(Double.valueOf(10.5), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_qCLq6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertTrue(result instanceof BigInteger);
        assertEquals(BigInteger.valueOf(10L), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_LdVg7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertTrue(result instanceof BigDecimal);
        assertEquals(new BigDecimal(10.5), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberNegativeValue_qmZH10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, -10.5);
        assertTrue(result instanceof Integer);
        assertEquals(Integer.valueOf(-10), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberZeroValue_zElv11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 0.0);
        assertTrue(result instanceof Double);
        assertEquals(Double.valueOf(0.0), result);
    }
}