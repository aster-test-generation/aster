/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AncestorContext_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SubsequentCalls_NoValidParent_xaeN4() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer firstPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(firstPointer);
        when(firstPointer.getImmediateParentPointer()).thenReturn(null);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // Initialize and move past the first node
        assertFalse(ancestorContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_MultipleParents_ValidParentFound_ztys6() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NodePointer firstPointer = mock(NodePointer.class);
        NodePointer secondPointer = mock(NodePointer.class);
        NodePointer thirdPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(firstPointer);
        when(firstPointer.getImmediateParentPointer()).thenReturn(secondPointer);
        when(secondPointer.getImmediateParentPointer()).thenReturn(thirdPointer);
        when(thirdPointer.testNode(nodeTest)).thenReturn(true);
        AncestorContext ancestorContext = new AncestorContext(parentContext, false, nodeTest);
        ancestorContext.nextNode(); // Initialize and move past the first node
        ancestorContext.nextNode(); // Move past the second node
        assertTrue(ancestorContext.nextNode());
        assertEquals(1, ancestorContext.getPosition());
    }
}