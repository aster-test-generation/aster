/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathFunctionNotFoundException;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtensionFunction_Coverage_Test_Passing {
    private QName functionName;
    private ExtensionFunction extensionFunction;
    private EvalContext context;
    private Expression[] args;
    private Function function;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_SIiX0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0]; // Assuming Expression is defined elsewhere
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        boolean result = extensionFunction.computeContextDependent();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_QWxP0() {
        QName functionName = new QName("testFunction");
        Expression[] args = new Expression[0];
        ExtensionFunction function = new ExtensionFunction(functionName, args);
        assertEquals("testFunction()", function.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArguments_WSxl3() {
        QName functionName = new QName("testFunction");
        ExtensionFunction function = new ExtensionFunction(functionName, null);
        assertEquals("testFunction()", function.toString());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_ooCP0() {
        functionName = new QName("testFunction");
        args = new Expression[]{mock(Expression.class)};
        extensionFunction = new ExtensionFunction(functionName, args);
        context = mock(EvalContext.class);
        function = mock(Function.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionNotFound_ThrowsException_qELd1_1() {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(null);
        Exception exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ValidFunctionInvocation_ReturnsResult_tEOq2() throws Exception {
        Object expected = new Object();
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(expected);
        Object result = extensionFunction.computeValue(context);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NullArgs_NoExceptionThrown_gQkM4() throws Exception {
        extensionFunction = new ExtensionFunction(functionName, null);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(new Object());
        assertDoesNotThrow(() -> extensionFunction.computeValue(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_EmptyArgs_NoExceptionThrown_rSBg5() throws Exception {
        extensionFunction = new ExtensionFunction(functionName, new Expression[0]);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(new Object());
        assertDoesNotThrow(() -> extensionFunction.computeValue(context));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ArgsProcessing_ChecksParameterValues_vYka6() throws Exception {
        Object computedValue = new Object();
        when(args[0].compute(context)).thenReturn(computedValue);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(new Object());
        extensionFunction.computeValue(context);
        verify(context.getRootContext()).getFunction(eq(functionName), argThat(params -> params[0] == computedValue));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionReturnsNull_ResultIsNull_dpTc7() throws Exception {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(null);
        Object result = extensionFunction.computeValue(context);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NoFunctionFound_ThrowsSpecificExceptionMessage_RJhv8_1() {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(null);
        JXPathFunctionNotFoundException exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionThrowsException_PropagatesIt_YyAe9_1() throws Exception {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        RuntimeException runtimeException = new RuntimeException("Function error");
        when(function.invoke(eq(context), any())).thenThrow(runtimeException);
        Exception exception = assertThrows(RuntimeException.class, () -> {
            extensionFunction.computeValue(context);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ArgsNull_ChecksNullParameters_Djwh10() throws Exception {
        extensionFunction = new ExtensionFunction(functionName, null);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(new Object());
        extensionFunction.computeValue(context);
        verify(context.getRootContext()).getFunction(eq(functionName), argThat(params -> params == null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_ArgsEmpty_ChecksEmptyParameters_ipjN11() throws Exception {
        extensionFunction = new ExtensionFunction(functionName, new Expression[0]);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        when(function.invoke(eq(context), any())).thenReturn(new Object());
        extensionFunction.computeValue(context);
        verify(context.getRootContext()).getFunction(eq(functionName), argThat(params -> params.length == 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeValue_ReturnsNodeSetContext_WhenResultIsNodeSet_KUhy3_udTT0() throws Exception {
    NodeSet nodeSet = mock(NodeSet.class);
    when(context.getRootContext()).thenReturn(mock(RootContext.class));
    when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
    when(function.invoke(eq(context), any())).thenReturn(nodeSet);
    Object result = extensionFunction.compute(context);
    assertTrue(result instanceof NodeSetContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionNotFound_ThrowsException_qELd1() {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(null);
        Exception exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });
        assertTrue(exception.getMessage().contains("No such function:"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NoFunctionFound_ThrowsSpecificExceptionMessage_RJhv8() {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(null);
        JXPathFunctionNotFoundException exception = assertThrows(JXPathFunctionNotFoundException.class, () -> {
            extensionFunction.computeValue(context);
        });
        assertTrue(exception.getMessage().contains(functionName.toString()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_FunctionThrowsException_PropagatesIt_YyAe9() throws Exception {
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getRootContext().getFunction(eq(functionName), any())).thenReturn(function);
        RuntimeException runtimeException = new RuntimeException("Function error");
        when(function.invoke(eq(context), any())).thenThrow(runtimeException);
        Exception exception = assertThrows(RuntimeException.class, () -> {
            extensionFunction.computeValue(context);
        });
        assertSame(runtimeException, exception);
    }
}