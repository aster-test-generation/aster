/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
@Mock
    private static JXPathContextFactory factory;
@Mock
    private ServletContext servletContext;
@Mock
    private JXPathContext jXPathContext;
@InjectMocks
    private JXPathServletContexts jxpathservletcontexts;
@Mock
    private HttpSession session;
@Mock
    private JXPathContext mockContext;
@Mock
    private JXPathContext applicationContext;
@Mock
    private HttpSessionAndServletContext handle;
@Mock
    private PageContext pageContext;
@Mock
    private HttpServletRequest request;
@Mock
    private JXPathContext parentContext;
@Mock
    private JXPathContext context;
@Mock
    private KeywordVariables keywordVariables;
@Mock
    private HttpServletRequest httpServletRequest;
@Mock
    private HttpSession httpSession;
@Mock
    private JXPathContext existingContext;
@Mock
    private JXPathContext newContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_ExistingContext() throws Exception {
        // Initialize mocks and inject mocks setup in @InjectMocks
        // Setup
        when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jXPathContext);
        // Execute
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletContext);
        // Verify
        verify(servletContext, never()).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
        assertSame(jXPathContext, result, "Should return the existing context");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContext_GEft1_1() {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    JXPathContext existingContext = mock(JXPathContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(anyString(), any());
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContext_GEft1_2() {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    JXPathContext existingContext = mock(JXPathContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(anyString(), any());
    assertEquals(existingContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_WRNI1_1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_WRNI1_2() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertEquals(expectedContext, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NewContext_NOmT0_1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpServletRequest httpServletRequest = (HttpServletRequest) request;
        HttpSession session = mock(HttpSession.class);
        when(httpServletRequest.getSession(false)).thenReturn(session);
        JXPathContext expectedContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(expectedContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingValidContext_tSdV1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(request, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertSame(existingContext, resultContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_PSGo2_1() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotSame(existingContext, resultContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_PSGo2_2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(resultContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_NoSession_hqVV3() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        when(((HttpServletRequest) request).getSession(false)).thenReturn(null);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(resultContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_WithSession_Aobr4() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(((HttpServletRequest) request).getSession(false)).thenReturn(session);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotNull(resultContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetApplicationContext_ExistingContext_MIvW0_enUb0() {
    ServletContext servletContext = mock(ServletContext.class);
    JXPathContext expectedContext = mock(JXPathContext.class);
    when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
    JXPathContext resultContext = JXPathServletContexts.getApplicationContext(servletContext);
    verify(servletContext).getAttribute(Constants.JXPATH_CONTEXT);
    assertSame(expectedContext, resultContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetApplicationContext_NewContext_hMDq1_noox0() {
    ServletContext servletContext = mock(ServletContext.class);
    when(servletContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    JXPathContext newContext = mock(JXPathContext.class);
    JXPathContextFactory factory = mock(JXPathContextFactory.class);
    when(factory.newContext(null, servletContext)).thenReturn(newContext);
    JXPathServletContexts.getApplicationContext(servletContext);
    verify(servletContext).setAttribute(eq(Constants.JXPATH_CONTEXT), any(JXPathContext.class));
    assertNotNull(newContext, "Should create and return a new context");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionContext_ExistingContext_GEft1() {
    HttpSession session = mock(HttpSession.class);
    ServletContext servletContext = mock(ServletContext.class);
    JXPathContext existingContext = mock(JXPathContext.class);
    when(session.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
    JXPathContext result = JXPathServletContexts.getSessionContext(session, servletContext);
    verify(session, never()).setAttribute(anyString(), any());
    assertNotNull(result);
    assertEquals(existingContext, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_ExistingContext_WRNI1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertNotNull(result);
        assertEquals(expectedContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_ExistingInvalidContext_PSGo2() {
        ServletRequest request = mock(HttpServletRequest.class);
        ServletContext servletContext = mock(ServletContext.class);
        JXPathContext existingContext = mock(JXPathContext.class);
        ServletRequest differentRequest = mock(HttpServletRequest.class);
        ServletRequestAndContext handle = new ServletRequestAndContext(differentRequest, servletContext);
        when(existingContext.getContextBean()).thenReturn(handle);
        when(request.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(existingContext);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(request, servletContext);
        assertNotSame(existingContext, resultContext);
        assertNotNull(resultContext);
    }
}