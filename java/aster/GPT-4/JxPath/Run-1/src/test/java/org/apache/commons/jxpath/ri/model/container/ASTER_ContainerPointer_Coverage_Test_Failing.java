/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ContainerPointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WithValueIsCollection_NiIE0() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(containerPointer.getBaseValue()).thenReturn(java.util.Arrays.asList("item1", "item2"));
        when(ValueUtils.isCollection(containerPointer.getBaseValue())).thenReturn(true);
        assertTrue(containerPointer.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WithValueNotCollection_dgLX1() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        DocumentContainer container = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(parentNode, container);
        when(containerPointer.getBaseValue()).thenReturn("Not a collection");
        when(ValueUtils.isCollection(containerPointer.getBaseValue())).thenReturn(false);
        assertFalse(containerPointer.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameReturnsNull_vXzO0() {
        DocumentContainer container = new DocumentContainer(null); // Assuming null can be passed for simplicity
        Locale locale = new Locale("en", "US");
        ContainerPointer containerPointer = new ContainerPointer(container, locale);
        QName result = containerPointer.getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_TvMr0() {
        DocumentContainer container = new DocumentContainer(null); // Assuming null is an acceptable parameter
        Locale locale = Locale.getDefault();
        ContainerPointer containerPointer = new ContainerPointer(container, locale);
        int expectedHashCode = System.identityHashCode(container) + 0; // Assuming index is 0 as it's not defined in the class
        assertEquals(expectedHashCode, containerPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_WhenValuePointerIsNull_SAoz0() {
        ContainerPointer containerPointer = mock(ContainerPointer.class, CALLS_REAL_METHODS);
        NodePointer mockNodePointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Object immediateNode = new Object();
        when(containerPointer.getImmediateNode()).thenReturn(immediateNode);
        when(containerPointer.getName()).thenReturn(mockQName);
        when(NodePointer.newChildNodePointer(containerPointer, mockQName, immediateNode)).thenReturn(mockNodePointer);
        NodePointer result = containerPointer.getImmediateValuePointer();
        verify(containerPointer).getImmediateNode();
        verify(containerPointer).getName();
        assertEquals(mockNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_CallsGetImmediateNode_MxHk2() {
        ContainerPointer containerPointer = mock(ContainerPointer.class, CALLS_REAL_METHODS);
        NodePointer mockNodePointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Object immediateNode = new Object();
        when(containerPointer.getImmediateNode()).thenReturn(immediateNode);
        when(containerPointer.getName()).thenReturn(mockQName);
        when(NodePointer.newChildNodePointer(containerPointer, mockQName, immediateNode)).thenReturn(mockNodePointer);
        containerPointer.getImmediateValuePointer();
        verify(containerPointer).getImmediateNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateValuePointer_CallsGetName_fave3() {
        ContainerPointer containerPointer = mock(ContainerPointer.class, CALLS_REAL_METHODS);
        NodePointer mockNodePointer = mock(NodePointer.class);
        QName mockQName = mock(QName.class);
        Object immediateNode = new Object();
        when(containerPointer.getImmediateNode()).thenReturn(immediateNode);
        when(containerPointer.getName()).thenReturn(mockQName);
        when(NodePointer.newChildNodePointer(containerPointer, mockQName, immediateNode)).thenReturn(mockNodePointer);
        containerPointer.getImmediateValuePointer();
        verify(containerPointer).getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_tSnY0() {
        DocumentContainer container = new DocumentContainer(null); // Assuming a constructor that can handle null for simplicity
        ContainerPointer containerPointer = new ContainerPointer(container, null); // Assuming a constructor that can handle null Locale
        String result = containerPointer.asPath();
        assertEquals("/", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_taUN0() {
        DocumentContainer testContainer = new DocumentContainer(null); // Assuming URL can be null for the sake of the test
        ContainerPointer containerPointer = new ContainerPointer(testContainer, null); // Assuming Locale can be null for the sake of the test
        Object result = containerPointer.getBaseValue();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNull_QNZZ0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DocumentContainer mockContainer = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(mockParent, mockContainer);
        when(mockParent.getBaseValue()).thenReturn(null);
        int length = containerPointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWhenBaseValueIsNotNull_pwym1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DocumentContainer mockContainer = mock(DocumentContainer.class);
        Object baseValue = new Object();
        ContainerPointer containerPointer = new ContainerPointer(mockParent, mockContainer);
        when(mockParent.getBaseValue()).thenReturn(baseValue);
        when(ValueUtils.getLength(baseValue)).thenReturn(5);
        int length = containerPointer.getLength();
        assertEquals(5, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_grKb1_vRle0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    assertFalse(pointer.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_rLXH0_wkAg0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    assertEquals(pointer, pointer, "Should return true when comparing the same object");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_egIh2_MWiG0() {
    DocumentContainer container = new DocumentContainer(null);
    ContainerPointer pointer = new ContainerPointer(container, Locale.getDefault());
    Object differentObject = new Object();
    assertFalse(pointer.equals(differentObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentContainer_vhNK3_gCBe0() {
    DocumentContainer container1 = new DocumentContainer(null);
    DocumentContainer container2 = new DocumentContainer(null);
    ContainerPointer pointer1 = new ContainerPointer(container1, Locale.getDefault());
    ContainerPointer pointer2 = new ContainerPointer(container2, Locale.getDefault());
    assertFalse(pointer1.equals(pointer2), "Should return false when containers are different");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_QcUH0_jwnK0() {
    DOMNodePointer mockDomNodePointer = mock(DOMNodePointer.class);
    DocumentContainer mockDocumentContainer = mock(DocumentContainer.class);
    QName mockQName = mock(QName.class);
    NodeIterator mockNodeIterator = mock(NodeIterator.class);
    when(mockDomNodePointer.attributeIterator(mockQName)).thenReturn(mockNodeIterator);
    ContainerPointer containerPointer = new ContainerPointer(mockDomNodePointer, mockDocumentContainer);
    NodeIterator result = containerPointer.attributeIterator(mockQName);
    verify(mockDomNodePointer).attributeIterator(mockQName);
    assertSame(mockNodeIterator, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_WhenValuePointerIsNotNull_pgBx1_hUPt0() {
    ContainerPointer containerPointer = mock(ContainerPointer.class, CALLS_REAL_METHODS);
    NodePointer existingNodePointer = mock(NodePointer.class);
    when(containerPointer.getImmediateValuePointer()).thenReturn(existingNodePointer);
    NodePointer result = containerPointer.getImmediateValuePointer();
    verify(containerPointer, never()).getImmediateNode();
    verify(containerPointer, never()).getName();
    assertEquals(existingNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_WholeCollection_ksDN0_yDzH0() {
    DocumentContainer container = mock(DocumentContainer.class);
    DOMNodePointer parent = mock(DOMNodePointer.class);
    ContainerPointer containerPointer = new ContainerPointer(parent, container);
    when(containerPointer.getBaseValue()).thenReturn("BaseValue");
    when(containerPointer.getIndex()).thenReturn(-1); // Assuming WHOLE_COLLECTION is -1
    Object result = containerPointer.getImmediateNode();
    assertEquals("BaseValue", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_IndexCheck_VRKI2_wVjA0_1() {
    DocumentContainer container = mock(DocumentContainer.class);
    DOMNodePointer parent = mock(DOMNodePointer.class);
    ContainerPointer containerPointer = new ContainerPointer(parent, container);
    when(containerPointer.getBaseValue()).thenReturn(new int[]{1, 2, 3});
    when(containerPointer.getLength()).thenReturn(3);
    when(containerPointer.getIndex()).thenReturn(1);
    Object result = containerPointer.getImmediateNode();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_IndexCheck_VRKI2_wVjA0_2() {
    DocumentContainer container = mock(DocumentContainer.class);
    DOMNodePointer parent = mock(DOMNodePointer.class);
    ContainerPointer containerPointer = new ContainerPointer(parent, container);
    when(containerPointer.getBaseValue()).thenReturn(new int[]{1, 2, 3});
    when(containerPointer.getLength()).thenReturn(3);
    when(containerPointer.getIndex()).thenReturn(1);
    Object result = containerPointer.getImmediateNode();
    assertEquals(2, result);}
}