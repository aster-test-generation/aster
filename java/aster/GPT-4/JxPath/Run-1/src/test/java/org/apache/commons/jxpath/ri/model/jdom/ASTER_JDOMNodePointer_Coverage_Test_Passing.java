/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.jdom.CDATA;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Namespace;
import org.jdom.ProcessingInstruction;
import org.jdom.Text;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JDOMNodePointer_Coverage_Test_Passing {
    private DOMNodePointer domNodePointer;
    private JDOMNodePointer jdomNodePointer;
    private Text textNode;
    private Document document;
    private CDATA cdata;
    private ProcessingInstruction processingInstruction;
    private Comment comment;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_Rfjc0() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        String id = "testId";
        NodeTest mockNodeTest = mock(NodeTest.class);
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale, id);
        boolean result = pointer.testNode(mockNodeTest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_yrwX0() {
        Object expectedNode = new Object();
        Locale locale = new Locale("en", "US");
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(expectedNode, locale);
        Object actualNode = jDOMNodePointer.getImmediateNode();
        assertEquals(expectedNode, actualNode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_KcwV0() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        int expectedHashCode = node.hashCode();
        int actualHashCode = jDOMNodePointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_Pvoy0_1() {
        Object node = new Object(); // Assuming Object can be used as a node for simplicity
        Locale locale = new Locale("en", "US");
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        QName qName = new QName("testName");
        NodeIterator result = jDOMNodePointer.attributeIterator(qName);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_Pvoy0_2() {
        Object node = new Object(); // Assuming Object can be used as a node for simplicity
        Locale locale = new Locale("en", "US");
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        QName qName = new QName("testName");
        NodeIterator result = jDOMNodePointer.attributeIterator(qName);
        assertTrue(result instanceof JDOMAttributeIterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_SameNode_oCiR0() {
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        Object node = new Object();
        when(pointer1.getBaseValue()).thenReturn(node);
        when(pointer2.getBaseValue()).thenReturn(node);
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        int result = jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_InvalidNode_kYir4() {
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        Object node = new Object();
        when(pointer1.getBaseValue()).thenReturn(new Object());
        when(pointer2.getBaseValue()).thenReturn(new Object());
        JDOMNodePointer jdomNodePointer = new JDOMNodePointer(node, Locale.getDefault());
        try {
            jdomNodePointer.compareChildNodePointers(pointer1, pointer2);
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_tFfS0() {
        Object node = new Object(); // Assuming Object can be used here as a placeholder
        Locale locale = Locale.getDefault();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        int length = jDOMNodePointer.getLength();
        assertEquals(1, length);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixWithNonElementOrAttribute_dbaN6() {
        Object node = new Object();
        String result = JDOMNodePointer.getPrefix(node);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithProcessingInstruction_BZOk3() {
        ProcessingInstruction mockPI = mock(ProcessingInstruction.class);
        when(mockPI.getTarget()).thenReturn("target");
        JDOMNodePointer pointer = new JDOMNodePointer(mockPI, Locale.getDefault());
        QName result = pointer.getName();
        assertNull(result.getPrefix());
        assertEquals("target", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNonElementNonPI_IipW6() {
        Object nonElementNonPI = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(nonElementNonPI, Locale.getDefault());
        QName result = pointer.getName();
        assertNull(result.getPrefix());
        assertNull(result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithProcessingInstructionHavingNullTarget_HhWf8() {
        ProcessingInstruction mockPI = mock(ProcessingInstruction.class);
        when(mockPI.getTarget()).thenReturn(null);
        JDOMNodePointer pointer = new JDOMNodePointer(mockPI, Locale.getDefault());
        QName result = pointer.getName();
        assertNull(result.getPrefix());
        assertNull(result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexivity_VpYL0() {
        Locale locale = new Locale("en");
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullComparison_MvaU1() {
        Locale locale = new Locale("en");
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClassComparison_NJlA2() {
        Locale locale = new Locale("en");
        Object node = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(node, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentNode_eHZB3() {
        Locale locale = new Locale("en");
        Object node1 = new Object();
        Object node2 = new Object();
        JDOMNodePointer pointer1 = new JDOMNodePointer(node1, locale);
        JDOMNodePointer pointer2 = new JDOMNodePointer(node2, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNode_CIia4() {
        Locale locale = new Locale("en");
        Object node = new Object();
        JDOMNodePointer pointer1 = new JDOMNodePointer(node, locale);
        JDOMNodePointer pointer2 = new JDOMNodePointer(node, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_WithDifferentId_GJqT5() {
        Locale locale = new Locale("en");
        Object node = new Object();
        JDOMNodePointer pointer1 = new JDOMNodePointer(node, locale, "id1");
        JDOMNodePointer pointer2 = new JDOMNodePointer(node, locale, "id2");
        assertTrue(pointer1.equals(pointer2)); // Assuming ID does not affect equality
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithNonElementNonAttribute_nTrF2() {
        Object nonElementNonAttribute = new Object();
        String result = JDOMNodePointer.getLocalName(nonElementNonAttribute);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithNull_yBIt3() {
        String result = JDOMNodePointer.getLocalName(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameWithDifferentObjectType_KWyP4() {
        String randomObject = "JustAString";
        String result = JDOMNodePointer.getLocalName(randomObject);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCommentNode_YgzF3() {
        Comment comment = mock(Comment.class);
        when(comment.getText()).thenReturn(" This is a comment ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(comment, Locale.getDefault());
        assertEquals("This is a comment", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTextNode_BWHC4() {
        Text textNode = mock(Text.class);
        when(textNode.getText()).thenReturn(" This is text ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(textNode, Locale.getDefault());
        assertEquals("This is text", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithProcessingInstructionNode_zesi5() {
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getData()).thenReturn("data");
        JDOMNodePointer nodePointer = new JDOMNodePointer(piNode, Locale.getDefault());
        assertEquals("data", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithProcessingInstructionNodeAndPreserveSpace_KSHn6() {
        ProcessingInstruction piNode = mock(ProcessingInstruction.class);
        when(piNode.getData()).thenReturn(" data ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(piNode, Locale.getDefault());
        when(nodePointer.findEnclosingAttribute(any(), eq("space"), any())).thenReturn("preserve");
        assertEquals(" data ", nodePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTextNodeAndTrimSpace_QEYu7() {
        Text textNode = mock(Text.class);
        when(textNode.getText()).thenReturn(" data ");
        JDOMNodePointer nodePointer = new JDOMNodePointer(textNode, Locale.getDefault());
        when(nodePointer.findEnclosingAttribute(any(), eq("space"), any())).thenReturn("default");
        assertEquals("data", nodePointer.getValue());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildAndSetValue_bGny0() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = "testValue";
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(jDOMNodePointer.createChild(context, name, index)).thenReturn(mockNodePointer);
        NodePointer result = jDOMNodePointer.createChild(context, name, index, value);
        verify(mockNodePointer).setValue(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullValue_yqtR1() {
        Object node = new Object();
        Locale locale = Locale.getDefault();
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(node, locale);
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = null;
        NodePointer mockNodePointer = mock(NodePointer.class);
        when(jDOMNodePointer.createChild(context, name, index)).thenReturn(mockNodePointer);
        NodePointer result = jDOMNodePointer.createChild(context, name, index, value);
        verify(mockNodePointer).setValue(value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithPrefixXml_KdVw0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        String result = pointer.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNonDocumentOrElementNode_MkFo4() {
        Object nonElementOrDocumentNode = new Object();
        JDOMNodePointer pointer = new JDOMNodePointer(nonElementOrDocumentNode, Locale.getDefault());
        String result = pointer.getNamespaceURI("anyPrefix");
        assertNull(result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NullNode_OUFJ0() {
        String result = JDOMNodePointer.findEnclosingAttribute(null, "attr", null);
        assertNull(result);
    }
}