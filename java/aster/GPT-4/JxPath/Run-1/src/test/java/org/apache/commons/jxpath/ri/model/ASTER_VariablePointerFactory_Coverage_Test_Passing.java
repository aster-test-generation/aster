/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_VariablePointerFactory_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointer_dzUe0() {
        VariablePointerFactory factory = new VariablePointerFactory();
        NodePointer parent = null; // Assuming null is a valid argument for the parent
        QName name = new QName("testName");
        Object object = new Object(); // Using a generic object for simplicity
        NodePointer result = factory.createNodePointer(parent, name, object);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonVariableContextWrapper_sTIF3() {
        VariablePointerFactory factory = new VariablePointerFactory();
        QName qName = new QName("testVariable");
        Object nonWrapperObject = new Object();
        NodePointer result = factory.createNodePointer(qName, nonWrapperObject, Locale.getDefault());
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNullObject_PPuk6() {
        VariablePointerFactory factory = new VariablePointerFactory();
        QName qName = new QName("testVariable");
        NodePointer result = factory.createNodePointer(qName, null, Locale.getDefault());
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_zwRX0_SUgd0() {
    VariablePointerFactory factory = new VariablePointerFactory();
    int expected = 100; // Assuming 100 is the correct order value for VARIABLE_POINTER_FACTORY_ORDER
    assertEquals(expected, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperAndUndeclaredVariable_AZNo1_nFcn0_1() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(null);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperAndUndeclaredVariable_AZNo1_nFcn0_2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(null);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertTrue(result instanceof VariablePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperNoVariableInAnyLevel_QIgn5_kNDD0_1() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    Variables parentVariables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(parentContext);
    when(parentContext.getVariables()).thenReturn(parentVariables);
    when(parentVariables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(parentContext.getParentContext()).thenReturn(null);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperNoVariableInAnyLevel_QIgn5_kNDD0_2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    Variables parentVariables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(parentContext);
    when(parentContext.getVariables()).thenReturn(parentVariables);
    when(parentVariables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(parentContext.getParentContext()).thenReturn(null);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertTrue(result instanceof VariablePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperAndDeclaredVariable_xIZR0_lKGh0_1() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(true);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperAndDeclaredVariable_xIZR0_lKGh0_2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(true);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertTrue(result instanceof VariablePointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperMultipleLevels_rPQp4_KQYc0_1() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    Variables parentVariables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(parentContext);
    when(parentContext.getVariables()).thenReturn(parentVariables);
    when(parentVariables.isDeclaredVariable("testVariable")).thenReturn(true);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithVariableContextWrapperMultipleLevels_rPQp4_KQYc0_2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testVariable");
    JXPathContext context = mock(JXPathContext.class);
    JXPathContext parentContext = mock(JXPathContext.class);
    Variables variables = mock(Variables.class);
    Variables parentVariables = mock(Variables.class);
    when(context.getVariables()).thenReturn(variables);
    when(variables.isDeclaredVariable("testVariable")).thenReturn(false);
    when(context.getParentContext()).thenReturn(parentContext);
    when(parentContext.getVariables()).thenReturn(parentVariables);
    when(parentVariables.isDeclaredVariable("testVariable")).thenReturn(true);
    NodePointer result = factory.createNodePointer(null, qName, context);
    assertTrue(result instanceof VariablePointer);}
}