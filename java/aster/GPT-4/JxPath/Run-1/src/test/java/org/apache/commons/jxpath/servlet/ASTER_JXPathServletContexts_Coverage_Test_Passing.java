/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.assertSame;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathServletContexts_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_WhenContextIsNotNull_ENfu1() {
        PageContext mockPageContext = mock(PageContext.class);
        JXPathContext expectedContext = mock(JXPathContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(expectedContext);
        JXPathContext result = JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext, never()).setAttribute(anyString(), any());
        assertSame(expectedContext, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_VerifyGetServletContext_yOAP3() {
        PageContext mockPageContext = mock(PageContext.class);
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(mockPageContext.getRequest()).thenReturn(mockRequest);
        when(mockPageContext.getServletContext()).thenReturn(mock(ServletContext.class));
        JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPageContext_VerifySetAttribute_KHwR6_aVCP0() {
    PageContext mockPageContext = mock(PageContext.class);
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    ServletContext mockServletContext = mock(ServletContext.class);
    JXPathContext mockParentContext = mock(JXPathContext.class);
    JXPathContext mockContext = mock(JXPathContext.class);
    ServletRequestAndContext mockHandle = mock(ServletRequestAndContext.class);
    JXPathContextFactory mockFactory = mock(JXPathContextFactory.class);
    when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(mockPageContext.getRequest()).thenReturn(mockRequest);
    when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
    when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
    when(mockFactory.newContext(mockParentContext, mockHandle)).thenReturn(mockContext);
    when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(mockContext);
    JXPathServletContexts.getPageContext(mockPageContext);
    verify(mockPageContext).setAttribute(Constants.JXPATH_CONTEXT, mockContext);
}
}