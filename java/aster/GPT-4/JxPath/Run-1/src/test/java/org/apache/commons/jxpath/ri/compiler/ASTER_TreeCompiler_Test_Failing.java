/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TreeCompiler_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunction_Guny0_1() {
    TreeCompiler treeCompiler = new TreeCompiler();
    int code = 1;
    Object[] args = { "arg1", "arg2" };
    Object result = treeCompiler.function(code, args);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunction_Guny0_2() {
    TreeCompiler treeCompiler = new TreeCompiler();
    int code = 1;
    Object[] args = { "arg1", "arg2" };
    Object result = treeCompiler.function(code, args);
    assertTrue(result instanceof CoreFunction);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSum_LflC0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    Object[] arguments = {1, 2, 3};
    Object result = treeCompiler.sum(arguments);
    assertTrue(result instanceof CoreOperationAdd);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunction_Guny0_1_fid1() {
    TreeCompiler treeCompiler = new TreeCompiler();
    int code = 1;
    Object[] args = { "arg1", "arg2" };
    Object result = treeCompiler.function(code, args);
    assertTrue(result instanceof String);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunction_Guny0() {
    TreeCompiler treeCompiler = new TreeCompiler();
    int code = 1;
    Object[] args = { "arg1", "arg2" };
    Object result = treeCompiler.function(code, args);
    assertNotNull(result);
    assertTrue(result instanceof CoreFunction);
}
}