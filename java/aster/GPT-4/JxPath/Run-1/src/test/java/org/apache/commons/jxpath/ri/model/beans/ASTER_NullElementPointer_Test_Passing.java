/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
private NullElementPointer nullElementPointer;
private DOMNodePointer mockParentPointer;
private int index;
DOMNodePointer mockDOMNodePointer;
QName mockQName;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathContext context;
@InjectMocks
private final Object value = new Object();
DOMNodePointer domNodePointer;
@Mock
    private Locale mockLocale;
@Mock
    private NodePointer mockImmediateParentPointer;
private static final int WHOLE_COLLECTION = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_sameObject() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        assertTrue(nullElementPointer.equals(nullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_nullObject() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        assertFalse(nullElementPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentClass() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        assertFalse(nullElementPointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentParentPointer() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        DOMNodePointer differentMockParentPointer = mock(DOMNodePointer.class);
        NullElementPointer differentNullElementPointer = new NullElementPointer(differentMockParentPointer, index);
        assertFalse(nullElementPointer.equals(differentNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentIndex() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        NullElementPointer differentNullElementPointer = new NullElementPointer(mockParentPointer, index + 1);
        assertFalse(nullElementPointer.equals(differentNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_sameParentPointerAndIndex() throws Exception {
        mockParentPointer = mock(DOMNodePointer.class);
        index = 1;
        nullElementPointer = new NullElementPointer(mockParentPointer, index);
        NullElementPointer sameNullElementPointer = new NullElementPointer(mockParentPointer, index);
        assertTrue(nullElementPointer.equals(sameNullElementPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        Object value = new Object();
        UnsupportedOperationException exception = assertThrows(UnsupportedOperationException.class, () -> {
            nullElementPointer.setValue(value);
        });
        assert(exception.getMessage().contains("Collection element does not exist"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValuePointer_1() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        mockQName = mock(QName.class);
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        when(mockDOMNodePointer.getName()).thenReturn(mockQName);
        NodePointer result = nullElementPointer.getValuePointer();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_1() throws Exception {
        int index = 0; // Assuming index is 0 for this test case
        nullElementPointer = new NullElementPointer(parent, index);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, 0)).thenReturn(expectedNodePointer);
        NodePointer result = nullElementPointer.createPath(context);
        verify(parent).createChild(context, null, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_2() throws Exception {
        int index = 0; // Assuming index is 0 for this test case
        nullElementPointer = new NullElementPointer(parent, index);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, 0)).thenReturn(expectedNodePointer);
        NodePointer result = nullElementPointer.createPath(context);
        verify(parent).createChild(context, null, 0);
        assertEquals(expectedNodePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        assertNull(nullElementPointer.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        DOMNodePointer mockParent = org.mockito.Mockito.mock(DOMNodePointer.class);
        nullElementPointer = new NullElementPointer(mockParent, 0);
        assertFalse(nullElementPointer.isActual());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        mockDOMNodePointer = new DOMNodePointer(null, null, "id");
        nullElementPointer = new NullElementPointer(mockDOMNodePointer, 0);
        assertTrue(nullElementPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentParentPointer_bcZT2_JlMU0() {
    org.w3c.dom.Node node1 = null; // Assuming Node is an interface, use a mock or null
    Locale locale1 = Locale.getDefault();
    DOMNodePointer parent1 = new DOMNodePointer(node1, locale1);
    org.w3c.dom.Node node2 = null; // Assuming Node is an interface, use a mock or null
    Locale locale2 = Locale.getDefault();
    DOMNodePointer parent2 = new DOMNodePointer(node2, locale2);
    NullElementPointer pointer1 = new NullElementPointer(parent1, 1);
    NullElementPointer pointer2 = new NullElementPointer(parent2, 1);
    assertFalse(pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_FAhb0() throws Exception {
        org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
        Locale locale = Locale.ENGLISH;
        domNodePointer = new DOMNodePointer(node, locale);
        nullElementPointer = new NullElementPointer(domNodePointer, 0);
        assertFalse(nullElementPointer.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_sYsE0() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(mockDOMNodePointer, 0);
        assertTrue(nullelementpointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_UggE0_1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        int index = 1;
        NullElementPointer nullelementpointer = new NullElementPointer(parent, index);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, index, value)).thenReturn(expectedNodePointer);
        NodePointer result = parent.createChild(context, null, index, value);
        verify(parent, times(1)).createChild(context, null, index, value);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_UggE0_2() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        int index = 1;
        NullElementPointer nullelementpointer = new NullElementPointer(parent, index);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, index, value)).thenReturn(expectedNodePointer);
        NodePointer result = parent.createChild(context, null, index, value);
        verify(parent, times(1)).createChild(context, null, index, value);
        assertEquals(expectedNodePointer, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_avVt0() throws Exception {
        DOMNodePointer domNodePointer = mock(DOMNodePointer.class);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        boolean isLeaf = nullElementPointer.isLeaf();
        assertTrue(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_wUaU0() throws Exception {
        DOMNodePointer mockDOMNodePointer = mock(DOMNodePointer.class);
        NullElementPointer nullelementpointer = new NullElementPointer(mockDOMNodePointer, 0);
        boolean isLeaf = nullelementpointer.isLeaf();
        assertEquals(true, isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        int index = 0; // Assuming index is 0 for this test case
        nullElementPointer = new NullElementPointer(parent, index);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        when(parent.createChild(context, null, 0)).thenReturn(expectedNodePointer);
        NodePointer result = nullElementPointer.createPath(context);
        assertNotNull(result);
        assertEquals(expectedNodePointer, result);
        verify(parent).createChild(context, null, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithVariablePointerParentAndIndex_AoKH4_fid2() {
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, 2);
        String result = nullElementPointer.asPath();
        assertEquals("$prefix:localName[3]", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithKeywordVariablesParentAndIndex_Tqqu6_fid2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer parentPointer = new VariablePointer(keywordVariables, qName);
        NullElementPointer nullElementPointer = new NullElementPointer(parentPointer, 3);
        String result = nullElementPointer.asPath();
        assertEquals("$prefix:localName[4]", result);
}
}