/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Iterator;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Iterator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PredicateContext_Coverage_Test_Passing {
    private PropertyPointer dynamicPropertyPointer;
    private PredicateContext predicateContext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNextSetCallsResetAndParentNextSet_UurG0() {
        NamespaceContext mockParentContext = mock(NamespaceContext.class);
        Constant mockExpression = mock(Constant.class);
        PredicateContext predicateContext = new PredicateContext(mockParentContext, mockExpression);
        when(mockParentContext.nextSet()).thenReturn(true);
        boolean result = predicateContext.nextSet();
        verify(mockParentContext).nextSet(); // Verify if nextSet was called on parentContext
        assertTrue(result); // Assert that the result is true as mocked
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_IteratorHasNextTrue_rhiX6_ZKYm0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    when(parentContext.nextSet()).thenReturn(true).thenReturn(false);
    Constant expression = mock(Constant.class);
    PredicateContext context = new PredicateContext(parentContext, expression);
    Iterator iterator = mock(Iterator.class);
    when(iterator.hasNext()).thenReturn(true);
    when(iterator.next()).thenReturn("value");
    when(expression.computeValue(parentContext)).thenReturn(iterator);
    boolean result = context.nextSet();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_NameTestExpressionIsNull_dZct1_KYPr0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant constant = new Constant("dummy");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    when(namespaceContext.nextSet()).thenReturn(true);
    assertTrue(predicateContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_DynamicPropertyPointerIsNull_oeNp3_UUDA0() {
    PredicateContext predicateContext = mock(PredicateContext.class);
    when(predicateContext.setPosition(1)).thenReturn(true);
    assertTrue(predicateContext.setPosition(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_PositionLessThanOne_cwZi5_NqUU0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant constant = new Constant(5);
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    when(namespaceContext.nextSet()).thenReturn(true);
    assertFalse(predicateContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_NodePointer_FnMC7_QQwb0_1() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    when(parentContext.nextNode()).thenReturn(true).thenReturn(false);
    Constant expression = mock(Constant.class);
    PredicateContext context = new PredicateContext(parentContext, expression);
    NodePointer nodePointer = mock(NodePointer.class);
    when(expression.computeValue(parentContext)).thenReturn(nodePointer);
    when(nodePointer.getNode()).thenReturn("node");
    boolean result = context.nextNode();
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_NodePointer_FnMC7_QQwb0_2() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    when(parentContext.nextNode()).thenReturn(true).thenReturn(false);
    Constant expression = mock(Constant.class);
    PredicateContext context = new PredicateContext(parentContext, expression);
    NodePointer nodePointer = mock(NodePointer.class);
    when(expression.computeValue(parentContext)).thenReturn(nodePointer);
    when(nodePointer.getNode()).thenReturn("node");
    boolean result = context.nextNode();
    assertEquals(1, context.getPosition());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_PositionGreaterThanLength_fwKe6_rtMu0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    when(namespaceContext.nextSet()).thenReturn(false);
    assertFalse(predicateContext.nextSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_BooleanTrue_sPqf9_ZBwg0_1() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    when(parentContext.nextSet()).thenReturn(true).thenReturn(false);
    Constant expression = mock(Constant.class);
    PredicateContext context = new PredicateContext(parentContext, expression);
    when(expression.computeValue(parentContext)).thenReturn(true);
    boolean result = context.nextSet();
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_BooleanTrue_sPqf9_ZBwg0_2() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    when(parentContext.nextSet()).thenReturn(true).thenReturn(false);
    Constant expression = mock(Constant.class);
    PredicateContext context = new PredicateContext(parentContext, expression);
    when(expression.computeValue(parentContext)).thenReturn(true);
    boolean result = context.nextSet();
    assertTrue(context.getPosition() == 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ReturnFalseForInvalidPosition_BVRk7_huNT0_1() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    when(namespaceContext.nextSet()).thenReturn(true);
    assertFalse(predicateContext.setPosition(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ReturnFalseForInvalidPosition_BVRk7_huNT0_2() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    when(namespaceContext.nextSet()).thenReturn(true);
    assertFalse(predicateContext.setPosition(6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_SetIndexCalled_wAhI8_juDV0() {
    Expression nameTestExpression = mock(Expression.class);
    PropertyPointer dynamicPropertyPointer = mock(PropertyPointer.class);
    when(dynamicPropertyPointer.getLength()).thenReturn(5);
    PredicateContext predicateContext = new PredicateContext(null, new Constant(1));
    predicateContext.setPosition(1);
    verify(dynamicPropertyPointer).setIndex(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ReturnTrueForValidPosition_oFKm9_OZnP0() {
    Expression nameTestExpression = mock(Expression.class);
    PropertyPointer dynamicPropertyPointer = mock(PropertyPointer.class);
    when(dynamicPropertyPointer.getLength()).thenReturn(5);
    PredicateContext predicateContext = new PredicateContext(null, new Constant("test"));
    assertTrue(predicateContext.setPosition(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNextSetHandlesFalseReturn_vKcd1() {
        NamespaceContext mockParentContext = mock(NamespaceContext.class);
        Constant mockExpression = mock(Constant.class);
        PredicateContext predicateContext = new PredicateContext(mockParentContext, mockExpression);
        when(mockParentContext.nextSet()).thenReturn(false);
        boolean result = predicateContext.nextSet();
        verify(mockParentContext).nextSet(); // Verify if nextSet was called on parentContext
        assertFalse(result); // Assert that the result is false as mocked
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_CallsParentContextReset_hJaO2() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        Constant mockConstant = mock(Constant.class);
        PredicateContext context = new PredicateContext(mockNamespaceContext, mockConstant);
        context.reset();
        verify(mockNamespaceContext).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_SetsDoneToFalse_MSNn3() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        Constant mockConstant = mock(Constant.class);
        PredicateContext context = new PredicateContext(mockNamespaceContext, mockConstant);
        context.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroSetPositionFalse_jnUg0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        Constant expression = new Constant("test");
        PredicateContext context = new PredicateContext(parentContext, expression);
        when(context.setPosition(1)).thenReturn(false);
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_UseParentContext_hijw2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        Constant expression = new Constant("test");
        PredicateContext context = new PredicateContext(parentContext, expression);
        NodePointer expectedPointer = mock(NodePointer.class);
        when(parentContext.getCurrentNodePointer()).thenReturn(expectedPointer);
        NodePointer result = context.getCurrentNodePointer();
        assertSame(expectedPointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NoNextNode_HGGC1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        when(parentContext.nextNode()).thenReturn(false);
        Constant expression = mock(Constant.class);
        PredicateContext context = new PredicateContext(parentContext, expression);
        boolean result = context.nextNode();
        assertFalse(result);
    }
}