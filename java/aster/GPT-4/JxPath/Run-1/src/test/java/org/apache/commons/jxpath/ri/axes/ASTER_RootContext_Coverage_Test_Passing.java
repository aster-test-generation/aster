/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RootContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QSvE0() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        DOMNodePointer pointer = mock(DOMNodePointer.class);
        when(pointer.asPath()).thenReturn("sample/path");
        RootContext rootContext = new RootContext(jxpathContext, pointer);
        String result = rootContext.toString();
        assertEquals("RootContext@HASHCODE:sample/path", result.replaceFirst("RootContext@[0-9a-fA-F]+", "RootContext@HASHCODE"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNodeSet_KgdI0() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        NodeSet nodeSet = mock(NodeSet.class);
        EvalContext result = rootContext.getConstantContext(nodeSet);
        assertTrue(result instanceof NodeSetContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNodePointer_rTBi1_1() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        NodePointer nodePointer = mock(NodePointer.class);
        EvalContext result = rootContext.getConstantContext(nodePointer);
        assertTrue(result instanceof InitialContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNodePointer_rTBi1_2_fid1() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        NodePointer nodePointer = mock(NodePointer.class);
        EvalContext result = rootContext.getConstantContext(nodePointer);
        assertEquals(nodePointer, ((InitialContext) result).getContextNodePointer());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNonNodeSetNonNodePointer_onud2_1() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        String constant = "testString";
        EvalContext result = rootContext.getConstantContext(constant);
        assertTrue(result instanceof InitialContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNonNodeSetNonNodePointer_onud2_2() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        String constant = "testString";
        EvalContext result = rootContext.getConstantContext(constant);
        assertNotNull(((InitialContext) result).getContextNodePointer());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNull_FnZX3_1() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        EvalContext result = rootContext.getConstantContext(null);
        assertTrue(result instanceof InitialContext);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConstantContextWithNull_FnZX3_2() {
        JXPathContextReferenceImpl jxpathContext = mock(JXPathContextReferenceImpl.class);
        RootContext rootContext = new RootContext(jxpathContext, null);
        EvalContext result = rootContext.getConstantContext(null);
        assertNotNull(((InitialContext) result).getContextNodePointer());}
}