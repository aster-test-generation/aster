/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParseException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithControlCharacters_PYKg0() {
        ParseException parserException = new ParseException();
        String input = "\b\t\n\f\r\"\'\\";
        String expected = "\\b\\t\\n\\f\\r\\\"\\\'\\\\";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithAlphanumericCharacters_cFbx1() {
        ParseException parserException = new ParseException();
        String input = "abc123";
        String expected = "abc123";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithNonPrintableCharacters_ccdV2() {
        ParseException parserException = new ParseException();
        String input = String.valueOf((char) 0x01) + (char) 0x1F + (char) 0x80;
        String expected = "\\u0001\\u001f\\u0080";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithMixedCharacters_Ddwi3() {
        ParseException parserException = new ParseException();
        String input = "Hello, World!\n2023";
        String expected = "Hello, World!\\n2023";
        assertEquals(expected, parserException.add_escapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageNoSpecialConstructor_fKPr0() {
        ParseException exception = new ParseException("Error message");
        assertEquals("Error message", exception.getMessage());
    }
}