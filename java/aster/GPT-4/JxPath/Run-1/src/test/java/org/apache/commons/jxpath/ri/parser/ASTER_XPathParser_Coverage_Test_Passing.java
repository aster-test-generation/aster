/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XPathParser_Coverage_Test_Passing {
private int jj_gen;
    private XPathParser xpathParser;
    private XPathParserTokenManager tokenManager;
    private SimpleCharStream stream;
    private Compiler compiler;
    private Token token;
    private Token OR;
    private Token mockToken;
    private Token secondToken;
    private Compiler mockCompiler;
    private Compiler compilerMock;
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimaryExprThrowsParseException_zybr7() throws org.apache.commons.jxpath.ri.parser.ParseException {
        when(token.kind).thenReturn(-1);
        assertThrows(ParseException.class, () -> xpathParser.PrimaryExpr());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_pMhZ00() {
        xpathParser = new XPathParser(new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""))));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_AllFalseTokens_SQNd1_1() {
        ParseException result = xpathParser.generateParseException();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_AllFalseTokens_SQNd1_2() {
        ParseException result = xpathParser.generateParseException();
        assertTrue(result.getMessage().contains("Encountered unexpected token"));}
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicateExpression_pJvS1() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.Expression()).thenReturn(new Object());
        parser.Predicate();
        verify(parser).Expression();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicateReturnExpression_rVmf3() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object expectedExpressionResult = new Object();
        when(parser.Expression()).thenReturn(expectedExpressionResult);
        Object result = parser.Predicate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentReturnsExpression_jdGx0() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object expectedExpression = new Object();
        when(parser.Expression()).thenReturn(expectedExpression);
        Object result = parser.Argument();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentExpressionAssignment_xHtP1() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object expectedExpression = new Object();
        when(parser.Expression()).thenReturn(expectedExpression);
        parser.Argument();
        verify(parser).Expression();
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprAdditiveExprCalled_YSfE0() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.AdditiveExpr()).thenReturn(new Object());
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprSwitchOnKind_AIbE1() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.LT);
        when(parser.AdditiveExpr()).thenReturn(new Object());
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprBreakAfterDefault_LdIp2() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.EOF);
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprConsumeTokenGT_RKKH6() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.GT);
        when(parser.AdditiveExpr()).thenReturn(new Object());
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprConsumeTokenLTE_dCMs8() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.LTE);
        when(parser.AdditiveExpr()).thenReturn(new Object());
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprConsumeTokenGTE_QBaT10() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.GTE);
        when(parser.AdditiveExpr()).thenReturn(new Object());
        parser.RelationalExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprConsumeTokenMinusOne_SvJP12() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.jj_nt.kind).thenReturn(XPathParserConstants.EOF);
        try {
            parser.RelationalExpr();
        } catch (ParseException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelationalExprReturnEx_NkJT14() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        Object ex = new Object();
        when(parser.AdditiveExpr()).thenReturn(ex);
        Object result = parser.RelationalExpr();
        assertSame(ex, result);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelativeLocationPathCallsNodeTest_fdVy1() throws ParseException {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.RelativeLocationPath();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRelativeLocationPathReturnsCorrectly_XksM6() throws ParseException {
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        Object result = parser.RelativeLocationPath();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitAssignsTokenSource_QzkS0() {
        XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.ReInit(tm);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitGetsNextToken_Gsvc2() {
        XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
        when(tm.getNextToken()).thenReturn(new Token());
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.ReInit(tm);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithMockedToken_mZUl7() {
        XPathParserTokenManager tm = mock(XPathParserTokenManager.class);
        when(tm.getNextToken()).thenReturn(mockToken);
        XPathParser parser = new XPathParser((java.io.InputStream) null);
        parser.ReInit(tm);
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprInitialUnaryExpr_obdY0() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        when(parser.UnaryExpr()).thenReturn(new Object());
        parser.MultiplicativeExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprSwitchFirstCase_hpmk1() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        token.kind = 89;
        when(parser.jj_nt).thenReturn(token);
        when(parser.UnaryExpr()).thenReturn(new Object());
        parser.MultiplicativeExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprBreakAfterDefault_gWYw2() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        token.kind = 100; // Assuming 100 is not MOD, DIV, or 89
        when(parser.jj_nt).thenReturn(token);
        parser.MultiplicativeExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprConsumeTokenDIV_MUAs8() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        token.kind = XPathParserTokenManager.DIV;
        when(parser.jj_nt).thenReturn(token);
        when(parser.UnaryExpr()).thenReturn(new Object());
        parser.MultiplicativeExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprConsumeTokenMOD_SXqV11() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        token.kind = XPathParserTokenManager.MOD;
        when(parser.jj_nt).thenReturn(token);
        when(parser.UnaryExpr()).thenReturn(new Object());
        parser.MultiplicativeExpr();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiplicativeExprParseException_tiza16() throws ParseException {
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tm = new XPathParserTokenManager(stream);
        XPathParser parser = new XPathParser(tm);
        token.kind = 100; // Assuming 100 is not MOD, DIV, or 89
        when(parser.jj_nt).thenReturn(token);
        try {
            parser.MultiplicativeExpr();
        } catch (ParseException e) {
        }
    }
@BeforeEach
    @Test
    public void testQName_Without_CoreFunctions_SingleNCName_kNAP1() throws ParseException {
        when(compiler.qname(null, "localName")).thenReturn("ResolvedQName");
        Object result = xpathParser.QName_Without_CoreFunctions();
        assertEquals("ResolvedQName", result);
    }
@BeforeEach
    @Test
    public void testQName_Without_CoreFunctions_SingleNCName_nJBB1() throws ParseException {
        token.kind = XPathParserConstants.NCName;
        when(xpathParser.jj_nt).thenReturn(token);
        when(xpathParser.NCName()).thenReturn("example");
        when(compiler.qname(null, "example")).thenReturn("resolvedExample");
        Object result = xpathParser.QName_Without_CoreFunctions();
        assertEquals("resolvedExample", result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_cqMm0() {
        compiler = mock(Compiler.class);
        stream = mock(SimpleCharStream.class);
        xpathParser = new XPathParser(new XPathParserTokenManager(stream));
        token = new Token();
    }
@BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameWithNoColon_sbim0_Fnoi1() throws ParseException {
        when(xpathParser.NCName()).thenReturn("localName");
        Object result = xpathParser.QName_Without_CoreFunctions();
        verify(compilerMock).qname(null, "localName");
        assertNull(result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_NWlS0() {
        compiler = mock(Compiler.class);
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathParser = new XPathParser(tokenManager);
        token = new Token();
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_zRPe0() {
        compiler = mock(Compiler.class);
        stream = mock(SimpleCharStream.class);
        tokenManager = new XPathParserTokenManager(stream);
        xpathParser = new XPathParser(tokenManager);
        token = new Token();
        token.kind = 100; // A kind that does not match any expected case in switch
    }
@BeforeEach
    @Test
    public void testQName_Without_CoreFunctions_NCNamePath_GKkW1() throws ParseException {
        when(xpathParser.NCName()).thenReturn("localPart");
        when(compiler.qname(null, "localPart")).thenReturn(new Object());
        Object result = xpathParser.QName_Without_CoreFunctions();
        assertNotNull(result);
        verify(compiler).qname(null, "localPart");
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_ltQN0() {
        compiler = mock(Compiler.class);
        SimpleCharStream stream = mock(SimpleCharStream.class);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream);
        xpathParser = new XPathParser(tokenManager);
        token = mock(Token.class);
    }
@BeforeEach
    @Test
    public void testQName_Without_CoreFunctions_SingleNCName_YUrq1() throws ParseException {
        when(xpathParser.NCName()).thenReturn("localName");
        when(compiler.qname(null, "localName")).thenReturn("ResolvedQName");
        Object result = xpathParser.QName_Without_CoreFunctions();
        assertEquals("ResolvedQName", result);
    }
@BeforeEach
    @Test
    public void testQName_Without_CoreFunctions_SingleNCName_diQc1() throws ParseException {
        token.kind = XPathParserTokenManager.NCName;
        when(xpathParser.NCName()).thenReturn("localName");
        when(compiler.qname(null, "localName")).thenReturn("ResolvedQName");
        Object result = xpathParser.QName_Without_CoreFunctions();
        assertEquals("ResolvedQName", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_AllFalseTokens_SQNd1() {
        ParseException result = xpathParser.generateParseException();
        assertNotNull(result);
        assertTrue(result.getMessage().contains("Encountered unexpected token"));
    }
}