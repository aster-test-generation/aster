/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Step_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAxis_ofQB0() {
    int expectedAxis = 5;
    Step step = new Step(expectedAxis, new NodeTypeTest(1), new Expression[0]);
    assertEquals(expectedAxis, step.getAxis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodeTest_KpBh0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    Expression[] expressions = new Expression[0];
    Step step = new Step(0, nodeTypeTest, expressions);
    NodeTest result = step.getNodeTest();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAxisToStringSelf_yCpt0() {
    int axis = Compiler.AXIS_SELF;
    String result = Step.axisToString(axis);
    assertEquals("self", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependent_NoPredicates_sSPr2() {
        Step step = new Step(1, new NodeTypeTest(1), null);
        assertFalse(step.isContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithChildAxis_CLbY0() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, null);
        assertEquals(nodeTest.toString(), step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAttributeAxis_elKC1() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, nodeTest, null);
        assertEquals("@" + nodeTest.toString(), step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSelfAxis_nmJk2() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, null);
        assertEquals(".", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithParentAxis_VmGR3() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
        assertEquals("..", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDescendantOrSelfAxisNoPredicates_jIjk4() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, new Expression[0]);
        assertEquals("", step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoPredicates_pBRm8() {
        NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, new Expression[0]);
        assertEquals(nodeTest.toString(), step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAttributeAxisAndNoNodeType_OXxU13() {
        NodeTypeTest nodeTest = new NodeTypeTest(0); // Assuming 0 is not a valid node type
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, nodeTest, null);
        assertEquals("@" + nodeTest.toString(), step.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithOtherAxis_DCbC6_hwGH0() {
    NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
    Step step = new Step(Compiler.AXIS_FOLLOWING, nodeTest, null);
    assertEquals(Step.axisToString(Compiler.AXIS_FOLLOWING) + "::" + nodeTest.toString(), step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithParentAxisAndDifferentNodeType_hCRl11_uTHq0() {
    NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
    assertEquals(Step.axisToString(Compiler.AXIS_PARENT) + "::" + nodeTest.toString(), step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithSelfAxisAndDifferentNodeType_UzGi10_AITT0() {
    NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    Step step = new Step(Compiler.AXIS_SELF, nodeTest, null);
    assertEquals(Step.axisToString(Compiler.AXIS_SELF) + "::" + nodeTest.toString(), step.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDescendantOrSelfAxisAndDifferentNodeType_jADT12_nTOw0() {
    NodeTypeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
    Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, null);
    assertEquals(Step.axisToString(Compiler.AXIS_DESCENDANT_OR_SELF) + "::" + nodeTest.toString(), step.toString());
}
}