/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Step_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringSelf_fnfg0() {
        assertEquals("self", Step.axisToString(Compiler.AXIS_SELF));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringChild_PACW1() {
        assertEquals("child", Step.axisToString(Compiler.AXIS_CHILD));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringParent_AIng2() {
        assertEquals("parent", Step.axisToString(Compiler.AXIS_PARENT));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestor_oDFa3() {
        assertEquals("ancestor", Step.axisToString(Compiler.AXIS_ANCESTOR));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAttribute_EIkU4() {
        assertEquals("attribute", Step.axisToString(Compiler.AXIS_ATTRIBUTE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringNamespace_upxd5() {
        assertEquals("namespace", Step.axisToString(Compiler.AXIS_NAMESPACE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPreceding_Ivme6() {
        assertEquals("preceding", Step.axisToString(Compiler.AXIS_PRECEDING));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowing_kTUI7() {
        assertEquals("following", Step.axisToString(Compiler.AXIS_FOLLOWING));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendant_yuHb8() {
        assertEquals("descendant", Step.axisToString(Compiler.AXIS_DESCENDANT));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringAncestorOrSelf_MZYN9() {
        assertEquals("ancestor-or-self", Step.axisToString(Compiler.AXIS_ANCESTOR_OR_SELF));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringFollowingSibling_IAJE10() {
        assertEquals("following-sibling", Step.axisToString(Compiler.AXIS_FOLLOWING_SIBLING));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringPrecedingSibling_RUvP11() {
        assertEquals("preceding-sibling", Step.axisToString(Compiler.AXIS_PRECEDING_SIBLING));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringDescendantOrSelf_yRhz12() {
        assertEquals("descendant-or-self", Step.axisToString(Compiler.AXIS_DESCENDANT_OR_SELF));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAxisToStringUnknown_FJBM13() {
        assertEquals("UNKNOWN", Step.axisToString(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisChild_FJOs0() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, null);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisAttribute_sHTn1() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, nodeTest, null);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisSelfNodeTypeNode_tGST2() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_SELF, nodeTest, null);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisParentNodeTypeNode_oHjV3() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisDescendantOrSelfNodeTypeNodeNoPredicates_GTCH4() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_DESCENDANT_OR_SELF, nodeTest, null);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOtherAxis_qWqT5() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Step step = new Step(999, nodeTest, null); // Assuming 999 is some other axis
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPredicates_tAKr6() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Expression[] predicates = {mock(Expression.class)};
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, predicates);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultiplePredicates_nOnk7() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Expression[] predicates = {mock(Expression.class), mock(Expression.class)};
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, predicates);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyPredicates_UNcQ9() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Expression[] predicates = {};
        Step step = new Step(Compiler.AXIS_CHILD, nodeTest, predicates);
        step.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAxisParentNodeTypeNodeAppendDoubleDot_FfDf10() {
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        when(nodeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        Step step = new Step(Compiler.AXIS_PARENT, nodeTest, null);
        String result = step.toString();
        assert(result.equals(".."));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependentWithNullPredicates_tmmw0_uSNj0() {
    Step step = new Step(0, new NodeTypeTest(1), null);
    assertFalse(step.isContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependentWithEmptyPredicates_lEgd1_anSu0() {
    Expression[] predicates = new Expression[0];
    Step step = new Step(0, new NodeTypeTest(1), predicates);
    assertFalse(step.isContextDependent(), "Expected false when predicates are empty");
}
}