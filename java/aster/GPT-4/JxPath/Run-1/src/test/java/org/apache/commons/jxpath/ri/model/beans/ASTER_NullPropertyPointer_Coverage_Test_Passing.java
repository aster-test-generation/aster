/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NullPropertyPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_NewParentCreated_gCwC0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        NodePointer mockNewParent = mock(NodePointer.class);
        when(mockParent.createPath(mockContext)).thenReturn(mockNewParent);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
        nullPropertyPointer.createPath(mockContext, new Object());
        verify(mockParent).createPath(mockContext);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_IsAttribute_OrGA1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        JXPathContext mockContext = mock(JXPathContext.class);
        NodePointer mockNewParent = mock(NodePointer.class);
        QName mockName = mock(QName.class);
        NodePointer mockPointer = mock(NodePointer.class);
        when(mockParent.createPath(mockContext)).thenReturn(mockNewParent);
        when(mockNewParent.isAttribute()).thenReturn(true);
        when(mockNewParent.createAttribute(mockContext, mockName)).thenReturn(mockPointer);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
        nullPropertyPointer.createPath(mockContext, new Object());
        verify(mockNewParent).createAttribute(mockContext, mockName);
        verify(mockPointer).setValue(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_YVyu0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        JXPathContext context = mock(JXPathContext.class);
        QName name = new QName("testName");
        int index = 0;
        Object value = new Object();
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        NodePointer mockedNodePointer = mock(NodePointer.class);
        when(mockedNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt(), any())).thenReturn(mock(NodePointer.class));
        when(nullPropertyPointer.createPath(context)).thenReturn(mockedNodePointer);
        NodePointer result = nullPropertyPointer.createChild(context, name, index, value);
        verify(mockedNodePointer).createChild(context, name, index, value);
        assertNotNull(result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithPropertyOwnerPointerAndDynamicSupport_CrUv4() {
        PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
        PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
        when(mockParent.isContainer()).thenReturn(false);
        when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(mockParent.getPropertyPointer()).thenReturn(mockPropertyPointer);
        NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
        pointer.setValue("value");
        verify(mockPropertyPointer).setPropertyName(anyString());
        verify(mockPropertyPointer).setValue("value");
    }
@Test
public void testSetValueWithPropertyOwnerPointerNullPropertyPointer_BsEN5_oeWn0() {
    PropertyOwnerPointer mockParent = mock(PropertyOwnerPointer.class);
    when(mockParent.isContainer()).thenReturn(false);
    when(mockParent.isDynamicPropertyDeclarationSupported()).thenReturn(true);
    when(mockParent.getPropertyPointer()).thenReturn(null);
    NullPropertyPointer pointer = new NullPropertyPointer(mockParent);
    assertThrows(JXPathInvalidAccessException.class, () -> {
        pointer.setValue("value");
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNodeReturnsNull_pMcy0_RIMQ0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), null);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
    Object result = nullPropertyPointer.getImmediateNode();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_CfRF0_CaRw0_1() {
    DOMNodePointer mockParent = mock(DOMNodePointer.class);
    QName mockQName = new QName("testProperty");
    when(mockParent.getName()).thenReturn(mockQName);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
    NodePointer result = nullPropertyPointer.getValuePointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_CfRF0_CaRw0_2() {
    DOMNodePointer mockParent = mock(DOMNodePointer.class);
    QName mockQName = new QName("testProperty");
    when(mockParent.getName()).thenReturn(mockQName);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
    NodePointer result = nullPropertyPointer.getValuePointer();
    assertTrue(result instanceof NullPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValuePointer_CfRF0_CaRw0_3() {
    DOMNodePointer mockParent = mock(DOMNodePointer.class);
    QName mockQName = new QName("testProperty");
    when(mockParent.getName()).thenReturn(mockQName);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
    NodePointer result = nullPropertyPointer.getValuePointer();
    assertEquals("testProperty", result.getName().toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyNameWithValidName_KTOg0_tfnK0() {
    Locale locale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
    nullPropertyPointer.setPropertyName("validName");
    assertEquals("validName", nullPropertyPointer.getPropertyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_ABdi0_Cwtx0() {
    JXPathContext context = mock(JXPathContext.class);
    QName name = new QName("testName");
    int index = 0;
    NodePointer mockedNodePointer = mock(NodePointer.class);
    when(mockedNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt()))
        .thenReturn(mock(NodePointer.class));
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(new DOMNodePointer(null, Locale.getDefault()));
    when(nullPropertyPointer.createPath(context)).thenReturn(mockedNodePointer);
    NodePointer result = nullPropertyPointer.createChild(context, name, index);
    assertNotNull(result);
    verify(mockedNodePointer).createChild(context, name, index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyNameWithNull_SFne1_CNKq0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), null);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
    nullPropertyPointer.setPropertyName(null);
    assertEquals(null, nullPropertyPointer.getPropertyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_PropertyOwnerPointer_UtZX3_TNGO0() {
    DOMNodePointer mockParent = mock(DOMNodePointer.class);
    JXPathContext mockContext = mock(JXPathContext.class);
    PropertyOwnerPointer mockPropertyOwnerPointer = mock(PropertyOwnerPointer.class);
    PropertyPointer mockPropertyPointer = mock(PropertyPointer.class);
    QName mockName = mock(QName.class);
    when(mockParent.createPath(mockContext)).thenReturn(mockPropertyOwnerPointer);
    when(mockPropertyOwnerPointer.getPropertyPointer()).thenReturn(mockPropertyPointer);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(mockParent);
    nullPropertyPointer.createPath(mockContext, new Object());
    verify(mockPropertyOwnerPointer).getPropertyPointer();
    verify(mockPropertyPointer).createChild(mockContext, mockName, 0, new Object());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActualReturnsFalse_CUcv0_hldf0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), null);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
    boolean result = nullPropertyPointer.isActual();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_dHFl0_mBWS0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath_IsAttribute_OMyJ2_SbkX0() throws Exception {
    NullPropertyPointer nullPropertyPointer = mock(NullPropertyPointer.class);
    NodePointer newParent = mock(NodePointer.class);
    JXPathContext context = mock(JXPathContext.class);
    QName name = mock(QName.class);
    when(nullPropertyPointer.isAttribute()).thenReturn(true);
    when(nullPropertyPointer.getName()).thenReturn(name);
    when(newParent.createAttribute(context, name)).thenReturn(newParent);
    NodePointer result = newParent.createAttribute(context, name);
    verify(newParent).createAttribute(context, name);
    assertSame(newParent, result);
}
}