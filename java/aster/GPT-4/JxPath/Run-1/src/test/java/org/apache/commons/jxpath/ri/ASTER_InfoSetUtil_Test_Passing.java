/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNumber_UfUd0() {
        assertEquals(5.0, InfoSetUtil.doubleValue(5), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanTrue_QaYu1() {
        assertEquals(0.0, InfoSetUtil.doubleValue(true), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanFalse_hVrg2() {
        assertEquals(1.0, InfoSetUtil.doubleValue(false), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithEmptyString_ONWq3() {
        assertEquals(0.0, InfoSetUtil.doubleValue(""), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithStringNumber_aXBn4() {
        assertEquals(123.45, InfoSetUtil.doubleValue("123.45"), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithInvalidString_eOMG5() {
        assertTrue(Double.isNaN(InfoSetUtil.doubleValue("abc")));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNull_wijt0() {
        assertEquals("", InfoSetUtil.stringValue(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithString_orNF1() {
        assertEquals("Hello", InfoSetUtil.stringValue("Hello"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithInteger_wrlS2() {
        assertEquals("100", InfoSetUtil.stringValue(100));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithDouble_ZLHq3() {
        assertEquals("100.5", InfoSetUtil.stringValue(100.5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanTrue_Oguc4() {
        assertEquals("true", InfoSetUtil.stringValue(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanFalse_XtWS5() {
        assertEquals("false", InfoSetUtil.stringValue(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithObject_AaBj9() {
        Object obj = new Object();
        assertEquals(obj.toString(), InfoSetUtil.stringValue(obj));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithZeroNumber_LuCz0() {
        assertEquals(false, InfoSetUtil.booleanValue(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithPositiveNumber_IJFt1() {
        assertEquals(true, InfoSetUtil.booleanValue(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeNumber_OWmd2() {
        assertEquals(true, InfoSetUtil.booleanValue(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_SBdR3() {
        assertEquals(false, InfoSetUtil.booleanValue(Double.NaN));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithTrueBoolean_poee4() {
        assertEquals(true, InfoSetUtil.booleanValue(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithFalseBoolean_DVlu5() {
        assertEquals(false, InfoSetUtil.booleanValue(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNonNullString_TTzL6() {
        assertEquals(true, InfoSetUtil.booleanValue("test"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithEmptyString_Guoa7() {
        assertEquals(false, InfoSetUtil.booleanValue(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNullObject_bPvp13() {
        assertEquals(false, InfoSetUtil.booleanValue(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithInteger_vYQC0() {
        assertEquals(5, InfoSetUtil.number(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringRepresentingDouble_YmRF4_ggXi0() {
    assertEquals(10.5, InfoSetUtil.number("10.5").doubleValue(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithDouble_uUwR1_LLtE0() {
    assertEquals(5.5, InfoSetUtil.number(5.5).doubleValue(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringNotANumber_SlqI5_PxKN0() {
    assertEquals(Double.NaN, InfoSetUtil.number("not a number"));
}
}