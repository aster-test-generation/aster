/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
private DynamicPointer dynamicPointer;
private Object bean;
private QName name;
private PageContextHandler handler;
private Locale locale;
@Mock
    private DOMNodePointer parent;
@Mock
    private QName mockQName;
@Mock
    private Object mockBean;
@Mock
    private PageContextHandler mockPageContextHandler;
@Mock
    private Locale mockLocale;
@Mock
    private NodePointer mockStartWith;
@Mock
    private PageContextHandler pageContextHandler;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private QName mockName;
@Mock
    private PageContextHandler mockHandler;
private DynamicPointer dynamicPointerWithParent;
private DynamicPointer dynamicPointerWithoutParent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported() throws Exception {
        // Mock dependencies required for DynamicPointer
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        // Initialize DynamicPointer with mocked dependencies
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        // Execute the method to be tested
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        // Verify the result
        assertTrue(result, "isDynamicPropertyDeclarationSupported should return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.equals(dynamicPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertFalse(dynamicPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object differentObject = new Object();
        assertFalse(dynamicPointer.equals(differentObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields_ReturnsTrue() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        DynamicPointer anotherDynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertTrue(dynamicPointer.equals(anotherDynamicPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_ReturnsFalse() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        Object anotherBean = new Object();
        DynamicPointer anotherDynamicPointer = new DynamicPointer(name, anotherBean, handler, locale);
        assertFalse(dynamicPointer.equals(anotherDynamicPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_ReturnsFalse() {
        bean = new Object();
        name = new QName("namespace", "localName");
        handler = new PageContextHandler();
        locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        QName anotherName = new QName("namespace", "differentLocalName");
        DynamicPointer anotherDynamicPointer = new DynamicPointer(anotherName, bean, handler, locale);
        assertFalse(dynamicPointer.equals(anotherDynamicPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        // Mock dependencies needed for DynamicPointer
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        // Initialize DynamicPointer with mocked dependencies
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        // Call the method under test
        boolean result = dynamicPointer.isCollection();
        // Assert the expected outcome
        assertFalse(result, "isCollection should return false as it is hardcoded in the DynamicPointer class.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicPropertyDeclarationSupported_EyzD0() {
    QName qName = new QName("test");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_hZxQ0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertFalse(dynamicPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_XZlX0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(qName);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act
        PropertyPointer result = dynamicPointer.getPropertyPointer();
        // Assert
        assertNotNull(result, "PropertyPointer should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act
        PropertyPointer result = dynamicPointer.getPropertyPointer();
        // Assert
        assertTrue(result instanceof DynamicPropertyPointer, "Result should be an instance of DynamicPropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodeIterator_dOGq0() {
    QName qName = new QName("testNamespace", "testName");
    PageContextHandler pageContextHandler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    Object bean = new Object();
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
    String property = "testProperty";
    boolean reverse = false;
    NodePointer startWith = null;
    NodeIterator result = dynamicPointer.createNodeIterator(property, reverse, startWith);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_YFdx0() {
    QName testName = new QName("testName");
    Object testBean = new Object();
    PageContextHandler testHandler = new PageContextHandler();
    Locale testLocale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(testName, testBean, testHandler, testLocale);
    QName result = dynamicPointer.getName();
    assertEquals("testName", result.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_WithoutParent() throws Exception {
        when(mockParent.asPath()).thenReturn("/mockParentPath");
        dynamicPointerWithParent = new DynamicPointer(mockParent, mockName, mockBean, mockHandler);
        dynamicPointerWithoutParent = new DynamicPointer(mockName, mockBean, mockHandler, null);
        String result = dynamicPointerWithoutParent.asPath();
        assertEquals("/", result, "The path should be root '/' when there is no parent.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_POMx0() {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + name.hashCode();
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_SzSl1() {
        QName name = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean);
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int length = dynamicPointer.getLength();
        assertEquals(1, length, "The length should always be 1 as per the implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_btwo0_1() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_btwo0_2() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertTrue(result instanceof DynamicPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        bean = new Object();
        QName name = new QName("testName");
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        assertEquals(bean, dynamicPointer.getBaseValue(), "The getBaseValue method should return the bean object set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_XSgK0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertEquals(1, dynamicPointer.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_XtHm0() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_kaFr1() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_VCta2() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_zdHc3() {
        QName qName = new QName("test");
        Object bean1 = new Object();
        Object bean2 = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean1, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean2, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentQName_oMgC4() {
        QName qName1 = new QName("test1");
        QName qName2 = new QName("test2");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName1, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName2, bean, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_EqualObjects_DnaZ5() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBeanDifferentLocale_EChH6() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale1 = new Locale("en", "US");
        Locale locale2 = new Locale("fr", "FR");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean, handler, locale1);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale2);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAsPathWithNullParent_MJSU0() {
    QName qName = new QName("test");
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, new Object(), handler, locale);
    String expected = "/";
    String actual = dynamicPointer.asPath();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_fEMA0() {
    QName qName = new QName("testName");
    Object expectedBean = new Object();
    PageContextHandler pageContextHandler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, expectedBean, pageContextHandler, locale);
    Object actualBean = dynamicPointer.getBaseValue();
    assertEquals(expectedBean, actualBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_HPPg0() {
        QName qName = new QName("test");
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, null, handler, Locale.getDefault());
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_mfvN1() {
        QName qName = new QName("test");
        String atomicNode = "AtomicValue";
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, atomicNode, handler, Locale.getDefault());
        assertTrue(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_MWOJ2() {
        QName qName = new QName("test");
        List<String> nonAtomicNode = Arrays.asList("value1", "value2");
        PageContextHandler handler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, nonAtomicNode, handler, Locale.getDefault());
        assertFalse(dynamicPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_uLxq0() throws Exception {
    dynamicPointer = new DynamicPointer(parent, name, bean, handler);
    QName attributeName = new QName("attributeName");
    NodeIterator result = dynamicPointer.attributeIterator(attributeName);
    DynamicAttributeIterator iterator = (DynamicAttributeIterator) result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        Locale locale = Locale.getDefault();
        dynamicPointer = new DynamicPointer(name, bean, pageContextHandler, locale);
        // Act
        PropertyPointer result = dynamicPointer.getPropertyPointer();
        // Assert
        assertNotNull(result, "PropertyPointer should not be null");
        assertTrue(result instanceof DynamicPropertyPointer, "Result should be an instance of DynamicPropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_btwo0() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
    assertNotNull(result);
    assertTrue(result instanceof DynamicPropertyPointer);
}
}