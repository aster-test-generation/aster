/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
@Mock
    private QName name;
@Mock
    private JXPathBasicBeanInfo beanInfo;
@Mock
    private DOMNodePointer parent;
@Mock
    private Object bean;
@InjectMocks
    private BeanPointer beanPointer;
@Mock
    private Locale locale;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertTrue(beanPointer.equals(beanPointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertFalse(beanPointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertFalse(beanPointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        Object differentBean = new Object();
        BeanPointer other = new BeanPointer(parent, name, differentBean, beanInfo);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_1() throws Exception {
        // Initialize BeanPointer with mocks
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup the behavior of the mock
        when(name.getName()).thenReturn("expectedName");
        // Execute the method to test
        QName result = beanPointer.getName();
        // Verify the results
        assertNotNull(result, "The result should not be null.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_2() throws Exception {
        // Initialize BeanPointer with mocks
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup the behavior of the mock
        when(name.getName()).thenReturn("expectedName");
        // Execute the method to test
        QName result = beanPointer.getName();
        // Verify the results
        assertEquals("expectedName", result.getName(), "The name returned was not as expected.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() throws Exception {
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer, "PropertyPointer should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() throws Exception {
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertTrue(propertyPointer instanceof BeanPropertyPointer, "Should return an instance of BeanPropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullBean() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, null, beanInfo, locale);
        assertEquals("null()", beanPointer.asPath(), "Path should be 'null()' when bean is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_2() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123.45", beanPointer.asPath(), "Path should correctly display decimal numbers.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_2() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath(), "Path should return 'false()' for Boolean false.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithStringBean() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, "testString", beanInfo, locale);
        assertEquals("'testString'", beanPointer.asPath(), "Path should correctly format String values with single quotes.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithOtherObject() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, new Object(), beanInfo, locale);
        assertEquals("/", beanPointer.asPath(), "Path should return '/' for non-special object types.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_SUwJ0() {
        QName qName = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        QName expected = qName;
        QName actual = beanPointer.getName();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_FgEw0_1() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_FgEw0_2() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertTrue(result instanceof BeanPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        // Mocking dependencies required for BeanPointer
        QName name = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        // Initialize BeanPointer with mocked dependencies
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Act
        int length = beanPointer.getLength();
        // Assert
        assertEquals(1, length, "The length should always be 1 as per the current implementation.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        bean = new Object(); // Mocking the actual bean object
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        assertEquals(bean, beanPointer.getBaseValue(), "The getBaseValue method should return the bean object set in constructor");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_DZBe0() {
    QName name = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    int length = beanPointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() throws Exception {
        QName name = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Since isCollection method in BeanPointer class always returns false,
        // the test should assert that the returned value is indeed false.
        assertFalse(beanPointer.isCollection(), "The isCollection method should return false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_SvKV0() {
        QName qName = new QName("testName");
        Object expectedBean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, expectedBean, beanInfo, locale);
        Object actualBean = beanPointer.getBaseValue();
        assertEquals(expectedBean, actualBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_Awib0() {
    QName name = new QName("testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    assertFalse(beanPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_ivEe0() {
        QName name = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int expectedHashCode = name.hashCode();
        assertEquals(expectedHashCode, beanPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_PxtY1() {
        QName name = null;
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertEquals(0, beanPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNullNode_oYLL0() {
        QName name = new QName("testName");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, null, beanInfo, locale);
        assertTrue(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicNode_Qfvf1() {
        QName name = new QName("testName");
        String bean = "Test String";
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, true);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicNode_fywG2() {
        QName name = new QName("testName");
        List<String> bean = new ArrayList<>();
        bean.add("Test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(ArrayList.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(beanPointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNullBean_NNDp0() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, null, beanInfo, locale);
        assertEquals("null()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBean_LkDm1() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        assertEquals("123", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBeanTrue_fAwe2() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, true, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndBooleanBeanFalse_Ldip3() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndStringBean_PrGI4() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, "testString", beanInfo, locale);
        assertEquals("'testString'", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndComplexBean_vKVY6() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        Object complexBean = new Object();
        BeanPointer beanPointer = new BeanPointer(name, complexBean, beanInfo, locale);
        assertEquals("/", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParentAndNumberBeanNonZeroDecimal_BdRA7() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123.45", beanPointer.asPath());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_wlQI0() {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullObject_XQHn1() {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(pointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_RBRw2() {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_YiAz5() {
        QName name1 = new QName("test1");
        QName name2 = new QName("test2");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name1, bean, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name2, bean, beanInfo, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameName_ANul6() {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_Number_odkc7() {
        QName name = new QName("test");
        Integer bean1 = 5;
        Integer bean2 = 10;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Integer.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean1, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean2, beanInfo, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBean_Number_ytwi8() {
        QName name = new QName("test");
        Integer bean = 5;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Integer.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_String_LbiF9() {
        QName name = new QName("test");
        String bean1 = "hello";
        String bean2 = "world";
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean1, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean2, beanInfo, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBean_String_nwIZ10() {
        QName name = new QName("test");
        String bean = "hello";
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_Boolean_wYuK11() {
        QName name = new QName("test");
        Boolean bean1 = true;
        Boolean bean2 = false;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Boolean.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean1, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean2, beanInfo, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameBean_Boolean_DAss12() {
        QName name = new QName("test");
        Boolean bean = true;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Boolean.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean, beanInfo, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_Object_oBcR13() {
        QName name = new QName("test");
        Object bean1 = new Object();
        Object bean2 = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer pointer1 = new BeanPointer(name, bean1, beanInfo, locale);
        BeanPointer pointer2 = new BeanPointer(name, bean2, beanInfo, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_WhenNodeIsNull_ShouldReturnTrue_MxvV0() throws Exception {
    Object bean = mock(Object.class);
    BeanPointer beanPointer = mock(BeanPointer.class);
    when(beanPointer.getNode()).thenReturn(null);
    boolean result = beanPointer.isLeaf();
    assertFalse(result, "Expected isLeaf to return true when node is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameIndex_YiSu16_nCrN0() {
    QName name = new QName("test");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer pointer1 = new BeanPointer(name, bean, beanInfo, locale);
    BeanPointer pointer2 = new BeanPointer(name, bean, beanInfo, locale);
    pointer1.setIndex(1);
    pointer2.setIndex(1);
    assertTrue(pointer1.equals(pointer2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() throws Exception {
        // Initialize BeanPointer with mocks
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        // Setup the behavior of the mock
        when(name.getName()).thenReturn("expectedName");
        // Execute the method to test
        QName result = beanPointer.getName();
        // Verify the results
        assertNotNull(result, "The result should not be null.");
        assertEquals("expectedName", result.getName(), "The name returned was not as expected.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer, "PropertyPointer should not be null");
        assertTrue(propertyPointer instanceof BeanPropertyPointer, "Should return an instance of BeanPropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        assertEquals("123", beanPointer.asPath(), "Path should handle Number objects, trimming '.0'.");
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123.45", beanPointer.asPath(), "Path should correctly display decimal numbers.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath(), "Path should return 'true()' for Boolean true.");
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("false()", beanPointer.asPath(), "Path should return 'false()' for Boolean false.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_FgEw0() {
    QName qName = new QName("testNamespace", "testName");
    Object bean = new Object();
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
    PropertyPointer result = beanPointer.getPropertyPointer();
    assertNotNull(result);
    assertTrue(result instanceof BeanPropertyPointer);
}
}