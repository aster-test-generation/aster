/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ChildContext_Coverage_Test_Passing {
    private NodeIterator iterator;
    private ChildContext childContext;
    private NamespaceContext namespaceContext;
    private NodeTypeTest nodeTypeTest;
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroSetPositionFalse_XaHN0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        ChildContext childContext = new ChildContext(parentContext, nodeTest, false, false);
        ChildContext spyChildContext = spy(childContext);
        doReturn(false).when(spyChildContext).setPosition(1);
        NodePointer result = spyChildContext.getCurrentNodePointer();
        assertNull(result);
        verify(spyChildContext).setPosition(1);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ShouldReturnTrue_WhenIteratorIsNotNullAndSetPositionReturnsTrue_PsJa3_VBeV0() {
    when(childContext.getCurrentPosition()).thenReturn(1);
    when(childContext.setPosition(2)).thenReturn(true);
    boolean result = childContext.nextNode();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ShouldReturnFalse_WhenIteratorIsNull_OwSR5_StDT0() {
    ChildContext childContext = mock(ChildContext.class);
    when(childContext.setPosition(1)).thenReturn(false);
    boolean result = childContext.setPosition(1);
    assertFalse(result);
}
}