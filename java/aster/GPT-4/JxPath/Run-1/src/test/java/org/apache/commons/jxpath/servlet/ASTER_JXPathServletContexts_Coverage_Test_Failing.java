/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathServletContexts_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequestContext_WithHttpServletRequest_ALjD0() {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpSession mockSession = mock(HttpSession.class);
        ServletContext mockServletContext = mock(ServletContext.class);
        when(mockRequest instanceof HttpServletRequest).thenReturn(true);
        when(mockRequest.getSession(false)).thenReturn(mockSession);
        JXPathContext resultContext = JXPathServletContexts.getRequestContext(mockRequest, mockServletContext);
        assertNotNull(resultContext);
        verify(mockRequest).getSession(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPageContext_VerifyGetRequest_sqQq2() {
        PageContext mockPageContext = mock(PageContext.class);
        when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(mockPageContext.getRequest()).thenReturn(mock(HttpServletRequest.class));
        JXPathServletContexts.getPageContext(mockPageContext);
        verify(mockPageContext).getRequest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPageContext_VerifyNewContextCreation_DbDF4_dfKo0() {
    PageContext mockPageContext = mock(PageContext.class);
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    ServletContext mockServletContext = mock(ServletContext.class);
    JXPathContext mockParentContext = mock(JXPathContext.class);
    JXPathContextFactory mockFactory = mock(JXPathContextFactory.class);
    when(mockPageContext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
    when(mockPageContext.getRequest()).thenReturn(mockRequest);
    when(mockPageContext.getServletContext()).thenReturn(mockServletContext);
    when(JXPathServletContexts.getRequestContext(mockRequest, mockServletContext)).thenReturn(mockParentContext);
    when(mockFactory.newContext(mockParentContext, mockPageContext)).thenReturn(mock(JXPathContext.class));
    JXPathServletContexts.getPageContext(mockPageContext);
    verify(mockFactory).newContext(mockParentContext, mockPageContext);
}
}