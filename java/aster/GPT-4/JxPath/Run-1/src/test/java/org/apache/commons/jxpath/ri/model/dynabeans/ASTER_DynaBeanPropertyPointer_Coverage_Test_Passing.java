/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.ArrayList;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynaBeanPropertyPointer_Coverage_Test_Passing {
    DynaBeanPropertyPointer dynabeanPropertyPointer;
    DOMNodePointer domNodePointer;
    DynaBean dynaBean;

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection_jHhY0() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(DynaBeanPropertyPointer.WHOLE_COLLECTION);
        when(pointer.getPropertyName()).thenReturn("testProperty");
        pointer.remove();
        verify(dynaBean).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty_favH1() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        when(pointer.getPropertyName()).thenReturn("testProperty");
        pointer.remove();
        verify(dynaBean).set("testProperty", 1, null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_zHuD2() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isCollection()).thenReturn(true);
        when(pointer.getIndex()).thenReturn(1);
        when(pointer.getBaseValue()).thenReturn(new ArrayList<>());
        when(pointer.getPropertyName()).thenReturn("testProperty");
        pointer.remove();
        verify(dynaBean).set(eq("testProperty"), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_fLjp3() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(0);
        when(pointer.getPropertyName()).thenReturn("testProperty");
        pointer.remove();
        verify(dynaBean).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WholeCollection_NotTriggered_ZhYG4() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(1); // Not WHOLE_COLLECTION
        pointer.remove();
        verify(dynaBean, never()).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexedProperty_NotTriggered_mnvL5() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isIndexedProperty()).thenReturn(false); // Not an indexed property
        pointer.remove();
        verify(dynaBean, never()).set(anyString(), anyInt(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Collection_NotTriggered_gMXr6() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.isCollection()).thenReturn(false); // Not a collection
        pointer.remove();
        verify(dynaBean, never()).set(anyString(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_IndexZero_NotTriggered_EjXS7() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(1); // Not index 0
        pointer.remove();
        verify(dynaBean, never()).set("testProperty", null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_NoConditionsMet_IkMS8() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(2); // No specific condition met
        when(pointer.isIndexedProperty()).thenReturn(false);
        when(pointer.isCollection()).thenReturn(false);
        pointer.remove();
        verify(dynaBean, never()).set(anyString(), any());
        verify(dynaBean, never()).set(anyString(), anyInt(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_MultipleConditionsMet_aiJd9() {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPropertyPointer pointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(pointer.getIndex()).thenReturn(DynaBeanPropertyPointer.WHOLE_COLLECTION);
        when(pointer.isIndexedProperty()).thenReturn(true);
        when(pointer.isCollection()).thenReturn(true);
        when(pointer.getPropertyName()).thenReturn("testProperty");
        pointer.remove();
        verify(dynaBean).set("testProperty", null);
        verify(dynaBean, never()).set("testProperty", anyInt(), any());
        verify(dynaBean, never()).set("testProperty", any());
    }
}