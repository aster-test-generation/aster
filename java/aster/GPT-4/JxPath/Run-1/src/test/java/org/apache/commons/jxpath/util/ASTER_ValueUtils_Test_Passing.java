/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_MsPX0() {
        Integer[] array = new Integer[]{1, 2, 3};
        assertTrue(ValueUtils.isCollection(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_wkFU1() {
        Collection<Integer> collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        assertTrue(ValueUtils.isCollection(collection));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNull_dzgO2() {
        Object nullObject = null;
        assertFalse(ValueUtils.isCollection(nullObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonContainerObject_BhqV1() {
        Object nonContainerObject = new Integer(10);
        Object result = ValueUtils.getValue(nonContainerObject);
        assertEquals(10, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexedPropertyAndNullMethod_phtm2() throws Exception {
        String[] data = {"one", "two", "three"};
        IndexedPropertyDescriptor ipd = new IndexedPropertyDescriptor("testProperty", null, null, null, null);
        Object result = ValueUtils.getValue(data, ipd, 1);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonIndexedProperty_mHIH3() throws Exception {
        String[] data = {"one", "two", "three"};
        PropertyDescriptor pd = new PropertyDescriptor("length", data.getClass());
        Object result = ValueUtils.getValue(data, pd, 0);
        assertEquals("one", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithArray_JgaK0() {
        assertEquals(1, ValueUtils.getCollectionHint(int[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithCollection_agfk1() {
        assertEquals(1, ValueUtils.getCollectionHint(ArrayList.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithPrimitive_ZFVV2() {
        assertEquals(-1, ValueUtils.getCollectionHint(int.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithInterface_AqHg3() {
        assertEquals(0, ValueUtils.getCollectionHint(List.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithFinalClass_tAsF4() {
        assertEquals(-1, ValueUtils.getCollectionHint(String.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithRegularClass_RZdb5() {
        assertEquals(0, ValueUtils.getCollectionHint(Object.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNull_fbHc0() {
        Iterator result = ValueUtils.iterate(null);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_qGrY1() {
        Integer[] emptyArray = new Integer[0];
        Iterator result = ValueUtils.iterate(emptyArray);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_EHGJ2() {
        Integer[] array = {1, 2, 3};
        Iterator result = ValueUtils.iterate(array);
        assertTrue(result.hasNext());
        assertEquals(Integer.valueOf(1), result.next());
        assertEquals(Integer.valueOf(2), result.next());
        assertEquals(Integer.valueOf(3), result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_YpcK3() {
        List<Integer> list = Arrays.asList(1, 2, 3);
        Iterator result = ValueUtils.iterate(list);
        assertTrue(result.hasNext());
        assertEquals(Integer.valueOf(1), result.next());
        assertEquals(Integer.valueOf(2), result.next());
        assertEquals(Integer.valueOf(3), result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_yHRr4() {
        List<Integer> emptyList = Collections.emptyList();
        Iterator result = ValueUtils.iterate(emptyList);
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingleObject_mmZw5() {
        String singleObject = "test";
        Iterator result = ValueUtils.iterate(singleObject);
        assertTrue(result.hasNext());
        assertEquals("test", result.next());
        assertFalse(result.hasNext());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerWithValidClass_WGlw0() {
    Class<DynamicPropertyHandler> clazz = DynamicPropertyHandler.class;
    DynamicPropertyHandler result = ValueUtils.getDynamicPropertyHandler(clazz);
    assertNotNull(result);
    assertTrue(result instanceof DynamicPropertyHandler);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNull_uLYq0() {
        assertEquals(0, ValueUtils.getLength(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithArray_rdTw1() {
        Integer[] array = new Integer[] {1, 2, 3};
        assertEquals(3, ValueUtils.getLength(array));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithCollection_IktY2() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
        assertEquals(4, ValueUtils.getLength(list));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithSingleObject_xGFQ3() {
        String singleObject = "Hello";
        assertEquals(1, ValueUtils.getLength(singleObject));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOnArray_vgZM0() {
        Integer[] array = {1, 2, 3};
        ValueUtils.setValue(array, 1, 4);
        assertEquals(Integer.valueOf(4), Array.get(array, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOnList_QuwV1() {
        List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
        ValueUtils.setValue(list, 2, "z");
        assertEquals("z", list.get(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullCollection_fwTH3() {
        List<String> list = null;
        ValueUtils.setValue(list, 0, "test");
        assertNull(list);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueOutOfBounds_Insv4() {
        List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
        try {
            ValueUtils.setValue(list, 5, "z");
            fail("IndexOutOfBoundsException was expected");
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_adRC0() {
        assertNull(ValueUtils.getValue(null, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyArray_wGLV1() {
        Object[] array = new Object[0];
        assertNull(ValueUtils.getValue(array, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidArrayIndex_OWkA2() {
        Integer[] array = {1, 2, 3};
        assertEquals(2, ValueUtils.getValue(array, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidArrayIndex_nLdw3() {
        Integer[] array = {1, 2, 3};
        assertNull(ValueUtils.getValue(array, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeArrayIndex_sOSe4() {
        Integer[] array = {1, 2, 3};
        assertNull(ValueUtils.getValue(array, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyList_kESc5() {
        List<Object> list = new ArrayList<>();
        assertNull(ValueUtils.getValue(list, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidListIndex_zrOR6() {
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertEquals(2, ValueUtils.getValue(list, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidListIndex_bdmK7() {
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertNull(ValueUtils.getValue(list, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeListIndex_pVpP8() {
        List<Integer> list = Arrays.asList(1, 2, 3);
        assertNull(ValueUtils.getValue(list, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptySet_TVkP9() {
        Set<Object> set = new HashSet<>();
        assertNull(ValueUtils.getValue(set, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidSetIndex_iLTX10() {
        Set<Integer> set = new LinkedHashSet<>(Arrays.asList(1, 2, 3));
        assertEquals(2, ValueUtils.getValue(set, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidSetIndex_zGxe11() {
        Set<Integer> set = new LinkedHashSet<>(Arrays.asList(1, 2, 3));
        assertNull(ValueUtils.getValue(set, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeSetIndex_fxXj12() {
        Set<Integer> set = new LinkedHashSet<>(Arrays.asList(1, 2, 3));
        assertNull(ValueUtils.getValue(set, -1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_MiddleElement_bqtA0() {
        Integer[] array = {1, 2, 3, 4, 5};
        Integer[] expected = {1, 2, 4, 5};
        Integer[] result = (Integer[]) ValueUtils.remove(array, 2);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_FirstElement_bmwf1() {
        Integer[] array = {1, 2, 3, 4, 5};
        Integer[] expected = {2, 3, 4, 5};
        Integer[] result = (Integer[]) ValueUtils.remove(array, 0);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_LastElement_AkmS2() {
        Integer[] array = {1, 2, 3, 4, 5};
        Integer[] expected = {1, 2, 3, 4};
        Integer[] result = (Integer[]) ValueUtils.remove(array, 4);
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_MiddleElement_wwLk4() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 4, 5));
        List<Integer> result = (List<Integer>) ValueUtils.remove(list, 2);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_FirstElement_SDaO5() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        List<Integer> expected = new ArrayList<>(Arrays.asList(2, 3, 4, 5));
        List<Integer> result = (List<Integer>) ValueUtils.remove(list, 0);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_LastElement_aKoo6() {
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        List<Integer> expected = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
        List<Integer> result = (List<Integer>) ValueUtils.remove(list, 4);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_MiddleElement_qaVs8() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(1, 2, 4, 5));
        Collection<Integer> result = (Collection<Integer>) ValueUtils.remove(collection, 2);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_FirstElement_cRAE9() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(2, 3, 4, 5));
        Collection<Integer> result = (Collection<Integer>) ValueUtils.remove(collection, 0);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_LastElement_SMnJ10() {
        Collection<Integer> collection = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5));
        Collection<Integer> expected = new LinkedList<>(Arrays.asList(1, 2, 3, 4));
        Collection<Integer> result = (Collection<Integer>) ValueUtils.remove(collection, 4);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessibleMethod_NullMethod_paPF0() {
        assertNull(ValueUtils.getAccessibleMethod(null));
    }
}