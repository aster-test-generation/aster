/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertSame;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HttpSessionAndServletContext_Test_Passing {
private HttpSession session;
private ServletContext context;
private HttpSessionAndServletContext httpsessionandservletcontext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSession() throws Exception {
        session = mock(HttpSession.class);
        context = mock(ServletContext.class);
        httpsessionandservletcontext = new HttpSessionAndServletContext(session, context);
        HttpSession result = httpsessionandservletcontext.getSession();
        assertSame(session, result, "The getSession method should return the same session object that was set in setup.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSessionReturnsCorrectSession_fOfl0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext mockContext = mock(ServletContext.class);
    HttpSessionAndServletContext sessionAndContext = new HttpSessionAndServletContext(mockSession, mockContext);
    HttpSession result = sessionAndContext.getSession();
    assertSame(mockSession, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletContext_Axjm0() {
    HttpSession mockSession = mock(HttpSession.class);
    ServletContext expectedContext = mock(ServletContext.class);
    HttpSessionAndServletContext httpSessionAndServletContext = new HttpSessionAndServletContext(mockSession, expectedContext);
    ServletContext resultContext = httpSessionAndServletContext.getServletContext();
    assertSame(expectedContext, resultContext);
}
}