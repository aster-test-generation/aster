/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynamicPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_yvkb0() {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int expectedHashCode = System.identityHashCode(bean) + name.hashCode();
        assertEquals(expectedHashCode, dynamicPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_DUeU0() {
        QName expectedName = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(expectedName, bean, handler, locale);
        QName actualName = dynamicPointer.getName();
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_HxwF0() {
        QName name = new QName("testName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        String result = dynamicPointer.asPath();
        assertEquals("/", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthReturnsOne_zrpS0() {
        QName qName = new QName("example");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        int length = dynamicPointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_fGFA0() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer.equals(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_mDpx1() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(pointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentBean_eLib2() {
        QName qName = new QName("test");
        Object bean1 = new Object();
        Object bean2 = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean1, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean2, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameNameAndBean_jUMk3() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_Pjmh4() {
        QName qName1 = new QName("test1");
        QName qName2 = new QName("test2");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(qName1, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName2, bean, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullNameInOne_BCgf5() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(null, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(qName, bean, handler, locale);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NullNameInBoth_QqWO6() {
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer pointer1 = new DynamicPointer(null, bean, handler, locale);
        DynamicPointer pointer2 = new DynamicPointer(null, bean, handler, locale);
        assertTrue(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_xpxW0() {
        QName name = new QName("testName");
        Object expectedBean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(name, expectedBean, handler, locale);
        Object actualBean = dynamicPointer.getBaseValue();
        assertEquals(expectedBean, actualBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicPropertyDeclarationSupported_edGF0_SZAZ0() {
    QName qName = new QName("testQName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertTrue(dynamicPointer.isDynamicPropertyDeclarationSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionReturnsFalse_lIZh0_MTNy0() {
    QName qName = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
    assertFalse(dynamicPointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyPointer_gbAc0_Eryn0() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    PropertyPointer result = dynamicPointer.getPropertyPointer();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafWithNullNode_nyJh0_UJEq0() {
    QName name = new QName("testName");
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    DynamicPointer dynamicPointer = new DynamicPointer(name, null, handler, locale);
    boolean result = dynamicPointer.isLeaf();
    assertTrue(result, "Expected to be leaf when node is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_aunZ0_ndAj0_1() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(name);
    Assertions.assertNotNull(result, "NodeIterator should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAttributeIterator_aunZ0_ndAj0_2() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    NodeIterator result = dynamicPointer.attributeIterator(name);
    Assertions.assertTrue(result instanceof DynamicAttributeIterator, "Result should be instance of DynamicAttributeIterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodeIterator_smnn0_yjAl0_1() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    String property = "testProperty";
    boolean reverse = false;
    NodePointer startWith = mock(NodePointer.class);
    NodeIterator result = dynamicPointer.createNodeIterator(property, reverse, startWith);
    assertNotNull(result, "NodeIterator should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodeIterator_smnn0_yjAl0_2() {
    QName name = new QName("testName");
    Object bean = new Object();
    PageContextHandler handler = new PageContextHandler();
    Locale locale = Locale.getDefault();
    DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
    String property = "testProperty";
    boolean reverse = false;
    NodePointer startWith = mock(NodePointer.class);
    NodeIterator result = dynamicPointer.createNodeIterator(property, reverse, startWith);
    assertTrue(result instanceof PropertyIterator, "Result should be instance of PropertyIterator");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeafWithAtomicNode_qHNX1_JSMo0() {
    QName name = new QName("testName");
    PageContextHandler handler = new PageContextHandler();
    Locale locale = new Locale("en", "US");
    String atomicValue = "Atomic String"; // Assuming String is treated as atomic in JXPathIntrospector
    DynamicPointer dynamicPointer = new DynamicPointer(name, atomicValue, handler, locale);
    JXPathIntrospector.getBeanInfo(String.class).isAtomic(); // Assuming this returns true
    boolean result = dynamicPointer.isLeaf();
    assertTrue(result, "Expected to be leaf when node is atomic");
}
}