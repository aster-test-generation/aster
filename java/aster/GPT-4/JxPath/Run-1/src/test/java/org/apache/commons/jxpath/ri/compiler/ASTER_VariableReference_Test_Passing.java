/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.RootContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariableReference_Test_Passing {
@Mock
    private QName varName;
@Mock
    private EvalContext context;
@Mock
    private RootContext rootContext;
@Mock
    private VariableReference variableReference;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVariableName_qvNW0() {
    QName qName = new QName("prefix", "localName");
    VariableReference varRef = new VariableReference(qName);
    assertEquals(qName, varRef.getVariableName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsContextDependent_FNGg0() {
    QName qName = new QName("prefix", "localName");
    VariableReference varRef = new VariableReference(qName);
    assertFalse(varRef.isContextDependent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_kQiX0() {
    QName qName = new QName("prefix", "localName");
    VariableReference varRef = new VariableReference(qName);
    String result = varRef.toString();
    assertEquals("$prefix:localName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeContextDependent_CNDM0() {
    QName qName = new QName("prefix", "localName");
    VariableReference variableReference = new VariableReference(qName);
    boolean result = variableReference.computeContextDependent();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        variableReference = new VariableReference(varName);
        // Mock the behavior of computeValue method
        Object expectedValue = new Object();
        VariableReference spyVariableReference = spy(variableReference);
        doReturn(expectedValue).when(spyVariableReference).computeValue(context);
        // Call the method under test
        Object result = spyVariableReference.compute(context);
        // Verify the result
        assertEquals(expectedValue, result);
        verify(spyVariableReference).computeValue(context);
    }
}