/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimpleCharStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndColumn_Gjuy0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    assertEquals(1, stream.getEndColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginLine_UtuA0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
    int expectedLine = 1;
    assertEquals(expectedLine, stream.getBeginLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImageWrappedToken_NWxz1() {
        java.io.StringReader reader = new java.io.StringReader("hello world");
        SimpleCharStream stream = new SimpleCharStream(reader, 1, 1, 10);
        stream.tokenBegin = 6;
        stream.bufpos = 4;
        stream.bufsize = 10;
        stream.buffer = new char[]{'w', 'o', 'r', 'l', 'd', 'h', 'e', 'l', 'l', 'o'};
        String result = stream.GetImage();
        assertEquals("hello world", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBeginColumn_qiDO0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 5);
    int expectedColumn = 5; // Assuming tokenBegin is initialized to 0 and bufcolumn[0] is set to 5
    assertEquals(expectedColumn, stream.getBeginColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndLine_BxNK0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    int expectedLine = 1;
    assertEquals(expectedLine, stream.getEndLine());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(12, stream.bufpos);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_gpbZ0() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    int expectedLine = 1;
    int actualLine = scs.getLine();
    assertEquals(expectedLine, actualLine);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetColumn_tIQA0() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    assertEquals(1, stream.getColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_uXtc0_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 4;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{2, 2, 2, 2, 2}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_uXtc0_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 4;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{10, 11, 12, 13, 14}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_KiCp1_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{2, 2, 2, 1, 1, 1, 1, 2, 2, 2}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_KiCp1_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{18, 19, 20, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleCharacterToken_qlvn2_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 0;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1};
        stream.bufcolumn = new int[]{1};
        stream.adjustBeginLineColumn(3, 15);
        assertEquals(3, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleCharacterToken_qlvn2_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 0;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1};
        stream.bufcolumn = new int[]{1};
        stream.adjustBeginLineColumn(3, 15);
        assertEquals(15, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_EmptyBuffer_rpeV3_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = -1;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[0];
        stream.bufcolumn = new int[0];
        stream.adjustBeginLineColumn(4, 20);
        assertEquals(0, stream.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_EmptyBuffer_rpeV3_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = -1;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[0];
        stream.bufcolumn = new int[0];
        stream.adjustBeginLineColumn(4, 20);
        assertEquals(0, stream.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInToken_nXyN4_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 1, 2};
        stream.adjustBeginLineColumn(5, 10);
        assertArrayEquals(new int[]{5, 5, 6, 6}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInToken_nXyN4_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 1, 2};
        stream.adjustBeginLineColumn(5, 10);
        assertArrayEquals(new int[]{10, 11, 10, 11}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ComplexLineAndColumnChanges_Oadd5_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 1;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 5;
        stream.bufline = new int[]{1, 2, 2, 3, 3};
        stream.bufcolumn = new int[]{5, 1, 2, 1, 2};
        stream.adjustBeginLineColumn(7, 15);
        assertArrayEquals(new int[]{7, 8, 8, 9, 3}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ComplexLineAndColumnChanges_Oadd5_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 1;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 5;
        stream.bufline = new int[]{1, 2, 2, 3, 3};
        stream.bufcolumn = new int[]{5, 1, 2, 1, 2};
        stream.adjustBeginLineColumn(7, 15);
        assertArrayEquals(new int[]{15, 15, 16, 15, 2}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferWrapWithLineChange_Iguu6_1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 2, 2, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 1, 2, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(3, 10);
        assertArrayEquals(new int[]{3, 4, 4, 1, 1, 1, 1, 3, 3, 3}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferWrapWithLineChange_Iguu6_2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 2, 2, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 1, 2, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(3, 10);
        assertArrayEquals(new int[]{18, 10, 11, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_gney0_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_gney0_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_gney0_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertTrue(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_gney0_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_VxFF1_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_VxFF1_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_VxFF1_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertTrue(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_VxFF1_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_iWJF2_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_iWJF2_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(9, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_iWJF2_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_iWJF2_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_tjxT3_1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_tjxT3_2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(2, scs.column);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_tjxT3_3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsCR);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_tjxT3_4() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertFalse(scs.prevCharIsLF);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithPositiveAmount_Pqno0_tkUq0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.backup(1);
    assertEquals(-1, stream.bufpos, "Expected bufpos to adjust correctly");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBackupWithNegativeAmount_xbzn1_oSsP0() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.backup(-1);
    assertEquals(1, stream.bufpos);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndColumn_Gjuy0_fid1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    stream.UpdateLineColumn('t');
    stream.UpdateLineColumn('e');
    stream.UpdateLineColumn('s');
    stream.UpdateLineColumn('t');
    assertEquals(5, stream.getEndColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEndLine_BxNK0_fid1() {
    SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    int expectedLine = 1;
    stream.UpdateLineColumn('t');
    stream.UpdateLineColumn('e');
    stream.UpdateLineColumn('s');
    stream.UpdateLineColumn('t');
    assertEquals(expectedLine, stream.bufline[stream.bufpos]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLine_gpbZ0_fid1() {
    SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader("test"), 1, 1);
    scs.UpdateLineColumn('t'); // Manually update line column to initialize internal structures
    int expectedLine = 1;
    int actualLine = scs.getLine();
    assertEquals(expectedLine, actualLine);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetColumn_tIQA0_fid1() {
    java.io.StringReader reader = new java.io.StringReader("test data");
    SimpleCharStream stream = new SimpleCharStream(reader, 1, 1);
    stream.UpdateLineColumn('t'); // Manually update to set the initial position
    assertEquals(2, stream.getColumn());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_KiCp1_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos =1;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{2,1,1, 1, 1, 1, 1,1,1,1}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_KiCp1_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17,2};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{18, 19, 20, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ComplexLineAndColumnChanges_Oadd5_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 1;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 5;
        stream.bufline = new int[]{1, 2, 2, 3, 3};
        stream.bufcolumn = new int[]{5, 1, 2, 1, 2};
        stream.adjustBeginLineColumn(1, 15);
        assertArrayEquals(new int[]{1, 8, 8, 9, 3}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ComplexLineAndColumnChanges_Oadd5_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 1;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 5;
        stream.bufline = new int[]{1, 2, 2, 3, 3};
        stream.bufcolumn = new int[]{5, 1, 2, 1, 2};
        stream.adjustBeginLineColumn(7,5);
        assertArrayEquals(new int[]{15,5, 16,5, 2}, stream.bufcolumn);}
@Test
@Timeout(value =5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferWrapWithLineChange_Iguu6_1_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""),5,5);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize =50;
        stream.bufline = new int[]{1, 2, 2,5,5,5,5,5,5,5};
        stream.bufcolumn = new int[]{9,5, 2,52,53,54,55,56,57,58};
        stream.adjustBeginLineColumn(3,50);
        assertArrayEquals(new int[]{3, 4, 4,5,5,5,5, 3, 3, 3}, stream.bufline);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferWrapWithLineChange_Iguu6_2_fid1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 2, 2, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 1, 2, 12, 13, 14, 15, 16, 17,2};
        stream.adjustBeginLineColumn(3, 10);
        assertArrayEquals(new int[]{18, 10, 11, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandBuffWrapAroundTrue_GZLI0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 10);
        stream.tokenBegin = 0;
        stream.bufpos = 5;
        stream.buffer = new char[10];
        stream.bufline = new int[10];
        stream.bufcolumn = new int[10];
        stream.ExpandBuff(true);
        assertEquals(12, stream.bufpos);
        assertEquals(2048 + 10, stream.buffer.length);
        assertEquals(2048 + 10, stream.bufline.length);
        assertEquals(2048 + 10, stream.bufcolumn.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_AllTokensOnSameLine_uXtc0() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 4;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{1, 2, 3, 4, 5};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{2, 2, 2, 2, 2}, stream.bufline);
        assertArrayEquals(new int[]{10, 11, 12, 13, 14}, stream.bufcolumn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_TokenWrapAroundBuffer_KiCp1() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(2, 10);
        assertArrayEquals(new int[]{2, 2, 2, 1, 1, 1, 1, 2, 2, 2}, stream.bufline);
        assertArrayEquals(new int[]{18, 19, 20, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_SingleCharacterToken_qlvn2() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 0;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1};
        stream.bufcolumn = new int[]{1};
        stream.adjustBeginLineColumn(3, 15);
        assertEquals(3, stream.line);
        assertEquals(15, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_EmptyBuffer_rpeV3() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = -1;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[0];
        stream.bufcolumn = new int[0];
        stream.adjustBeginLineColumn(4, 20);
        assertEquals(0, stream.line);
        assertEquals(0, stream.column);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_LineChangeInToken_nXyN4() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 0;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 1, 2, 2};
        stream.bufcolumn = new int[]{1, 2, 1, 2};
        stream.adjustBeginLineColumn(5, 10);
        assertArrayEquals(new int[]{5, 5, 6, 6}, stream.bufline);
        assertArrayEquals(new int[]{10, 11, 10, 11}, stream.bufcolumn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_ComplexLineAndColumnChanges_Oadd5() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 1;
        stream.bufpos = 3;
        stream.inBuf = 0;
        stream.bufsize = 5;
        stream.bufline = new int[]{1, 2, 2, 3, 3};
        stream.bufcolumn = new int[]{5, 1, 2, 1, 2};
        stream.adjustBeginLineColumn(7, 15);
        assertArrayEquals(new int[]{7, 8, 8, 9, 3}, stream.bufline);
        assertArrayEquals(new int[]{15, 15, 16, 15, 2}, stream.bufcolumn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdjustBeginLineColumn_BufferWrapWithLineChange_Iguu6() {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        stream.tokenBegin = 8;
        stream.bufpos = 2;
        stream.inBuf = 0;
        stream.bufsize = 10;
        stream.bufline = new int[]{1, 2, 2, 1, 1, 1, 1, 1, 1, 1};
        stream.bufcolumn = new int[]{9, 1, 2, 12, 13, 14, 15, 16, 17, 18};
        stream.adjustBeginLineColumn(3, 10);
        assertArrayEquals(new int[]{3, 4, 4, 1, 1, 1, 1, 3, 3, 3}, stream.bufline);
        assertArrayEquals(new int[]{18, 10, 11, 12, 13, 14, 15, 10, 11, 12}, stream.bufcolumn);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithCR_gney0() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\r');
        assertEquals(1, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithLF_VxFF1() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\n');
        assertEquals(1, scs.line);
        assertEquals(1, scs.column);
        assertTrue(scs.prevCharIsLF);
        assertFalse(scs.prevCharIsCR);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithTab_iWJF2() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('\t');
        assertEquals(1, scs.line);
        assertEquals(9, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateLineColumnWithRegularChar_tjxT3() {
        SimpleCharStream scs = new SimpleCharStream(new java.io.StringReader(""), 1, 1);
        scs.UpdateLineColumn('a');
        assertEquals(1, scs.line);
        assertEquals(2, scs.column);
        assertFalse(scs.prevCharIsCR);
        assertFalse(scs.prevCharIsLF);
    }
}