/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
@Mock
    private BeanPointer beanPointerMock;
@InjectMocks
    private PropertyIterator propertyIterator;
@Mock
    private BeanPointer beanPointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private BeanPointer mockBeanPointer;
@Mock
    private PropertyPointer propertyNodePointer;
private final String propertyName = "testProperty";
private final String[] propertyNames = {"notTestProperty", "testProperty", "anotherProperty"};
private String name = "testProperty";
private boolean empty = false;
@Mock
    private NodePointer valuePointer;
    private int position = 0;
    private boolean targetReady = false;
    private int startPropertyIndex;
    private int startIndex = 0;
    private boolean includeStart = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        // Initialize PropertyIterator with mocks and a specific position value
        propertyIterator = new PropertyIterator(beanPointerMock, "propertyName", false, null);
        // Since position is initialized to 0 and not changed, it should return 0
        int expectedPosition = 0;
        int actualPosition = propertyIterator.getPosition();
        assertEquals(expectedPosition, actualPosition, "The position should initially be 0.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_1() throws Exception {
        // Initialize PropertyIterator with mock BeanPointer and other required parameters
        propertyIterator = new PropertyIterator(mockBeanPointer, "propertyName", false, null);
        // Manually change the internal state of propertyIterator
        propertyIterator.reset(); // Reset the state to initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that the reset method sets the fields back to their initial values
        assertEquals(0, position, "Position should be reset to 0");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_2() throws Exception {
        // Initialize PropertyIterator with mock BeanPointer and other required parameters
        propertyIterator = new PropertyIterator(mockBeanPointer, "propertyName", false, null);
        // Manually change the internal state of propertyIterator
        propertyIterator.reset(); // Reset the state to initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that the reset method sets the fields back to their initial values
        assertEquals(false, targetReady, "TargetReady should be reset to false");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        when(propertyIterator.getPropertyPointer()).thenReturn(propertyNodePointer);
        NodePointer result = propertyIterator.getPropertyPointer();
        assertEquals(propertyNodePointer, result, "The returned PropertyPointer should match the mocked PropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer_1() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer_2() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertEquals(valuePointer, result, "Expected NodePointer returned from PropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsNullWhenEmpty() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        empty = true;
        PropertyIterator emptyPropertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(null);
        // Act
        NodePointer result = emptyPropertyIterator.getNodePointer();
        // Assert
        assertNull(result, "Expected null NodePointer when empty is true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_HandlesExceptionByReturningNullPropertyPointer_1() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        Throwable throwable = new RuntimeException("Error");
        when(propertyNodePointer.getValuePointer()).thenThrow(throwable);
        NullPropertyPointer nullPropertyPointer = mock(NullPropertyPointer.class);
        when(nullPropertyPointer.getValuePointer()).thenReturn(null);
        when(propertyNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(propertyNodePointer.getPropertyName()).thenReturn(name);
        when(propertyNodePointer.getIndex()).thenReturn(0);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer even on exception");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_HandlesExceptionByReturningNullPropertyPointer_2() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        Throwable throwable = new RuntimeException("Error");
        when(propertyNodePointer.getValuePointer()).thenThrow(throwable);
        NullPropertyPointer nullPropertyPointer = mock(NullPropertyPointer.class);
        when(nullPropertyPointer.getValuePointer()).thenReturn(null);
        when(propertyNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(propertyNodePointer.getPropertyName()).thenReturn(name);
        when(propertyNodePointer.getIndex()).thenReturn(0);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertTrue(result instanceof NullPropertyPointer, "Expected result to be an instance of NullPropertyPointer");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_PositionZeroNameNullPositionSet_NKzn3_aHWe0() {
    QName qName = new QName("test");
    BeanPointer beanPointer = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    PropertyIterator iterator = new PropertyIterator(beanPointer, null, false, null);
    iterator.setPosition(0);
    assertNotNull(iterator.getNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_PositionZeroNameNullPositionNotSet_lRjR2_ChFK0() {
    QName qName = new QName("test");
    BeanPointer beanPointer = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    PropertyIterator iterator = new PropertyIterator(beanPointer, null, false, null);
    iterator.setPosition(0);
    assertNull(iterator.getNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNodePointer_ThrowsException_gPaE4_tdHs0() {
    QName qName = new QName("test");
    BeanPointer beanPointer = new BeanPointer(qName, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
    PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
    try {
        Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        positionField.setInt(iterator, 1); // Set position to ensure it goes into the try block
    } catch (NoSuchFieldException | IllegalAccessException e) {
        fail("Failed to set position via reflection");
    }
    assertNotNull(iterator.getNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        // Initialize PropertyIterator with mock BeanPointer and other required parameters
        propertyIterator = new PropertyIterator(mockBeanPointer, "propertyName", false, null);
        // Manually change the internal state of propertyIterator
        propertyIterator.reset(); // Reset the state to initial values
        // Use reflection to access private fields if necessary
        java.lang.reflect.Field positionField = PropertyIterator.class.getDeclaredField("position");
        positionField.setAccessible(true);
        int position = (int) positionField.get(propertyIterator);
        java.lang.reflect.Field targetReadyField = PropertyIterator.class.getDeclaredField("targetReady");
        targetReadyField.setAccessible(true);
        boolean targetReady = (boolean) targetReadyField.get(propertyIterator);
        // Assert that the reset method sets the fields back to their initial values
        assertEquals(0, position, "Position should be reset to 0");
        assertEquals(false, targetReady, "TargetReady should be reset to false");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ReturnsValuePointer() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer");
        assertEquals(valuePointer, result, "Expected NodePointer returned from PropertyPointer");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_HandlesExceptionByReturningNullPropertyPointer() throws Exception {
        propertyIterator = new PropertyIterator(beanPointer, name, false, null);
        when(propertyNodePointer.getValuePointer()).thenReturn(valuePointer);
        // Arrange
        Throwable throwable = new RuntimeException("Error");
        when(propertyNodePointer.getValuePointer()).thenThrow(throwable);
        NullPropertyPointer nullPropertyPointer = mock(NullPropertyPointer.class);
        when(nullPropertyPointer.getValuePointer()).thenReturn(null);
        when(propertyNodePointer.getImmediateParentPointer()).thenReturn(null);
        when(propertyNodePointer.getPropertyName()).thenReturn(name);
        when(propertyNodePointer.getIndex()).thenReturn(0);
        // Act
        NodePointer result = propertyIterator.getNodePointer();
        // Assert
        assertNotNull(result, "Expected non-null NodePointer even on exception");
        assertTrue(result instanceof NullPropertyPointer, "Expected result to be an instance of NullPropertyPointer");
    }
}