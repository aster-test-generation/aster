/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathException_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_NullException_NqzJ0() {
        JXPathException exception = new JXPathException("Test message");
        String result = exception.getMessage();
        assertEquals("Test message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_NullMessage_yKVg1() {
        JXPathException exception = new JXPathException((String) null);
        String result = exception.getMessage();
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithThrowableHavingNullMessage_XmGw2() {
        Throwable throwable = new Throwable();
        JXPathException exception = new JXPathException(throwable);
        String result = exception.getMessage();
        assertEquals("java.lang.Throwable", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithThrowableHavingMessage_hyxZ3() {
        Throwable throwable = new Throwable("Inner message");
        JXPathException exception = new JXPathException(throwable);
        String result = exception.getMessage();
        assertEquals("Inner message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithBothMessages_jUfq4() {
        Throwable throwable = new Throwable("Inner message");
        JXPathException exception = new JXPathException("Outer message", throwable);
        String result = exception.getMessage();
        assertEquals("Outer message; Inner message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithBothMessagesAndNullInnerMessage_rIoh5() {
        Throwable throwable = new Throwable();
        JXPathException exception = new JXPathException("Outer message", throwable);
        String result = exception.getMessage();
        assertEquals("Outer message; java.lang.Throwable", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithNullOuterMessageAndThrowableMessage_OJhW6() {
        Throwable throwable = new Throwable("Inner message");
        JXPathException exception = new JXPathException(null, throwable);
        String result = exception.getMessage();
        assertEquals("Inner message", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithNullOuterMessageAndNullThrowableMessage_ozPR7() {
        Throwable throwable = new Throwable();
        JXPathException exception = new JXPathException(null, throwable);
        String result = exception.getMessage();
        assertEquals("java.lang.Throwable", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WithNullOuterMessageAndThrowable_OCrU8() {
        Throwable throwable = new Throwable("Inner message");
        JXPathException exception = new JXPathException((String) null, throwable);
        String result = exception.getMessage();
        assertEquals("Inner message", result);
    }
}