/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Collection;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackageFunctions_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceMismatch_ChrT0() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("differentNamespace", "methodName", new Object[]{});
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyParameters_XPlO2() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("expectedNamespace", "methodName", new Object[]{});
        assertNull(result); // Assuming no method matches an empty parameter array
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirstParameterConversionNull_JSVX3() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Object[] parameters = {null};
        Function result = pf.getFunction("expectedNamespace", "methodName", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTargetIsCollectionEmpty_gIXM7() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Collection<Object> collection = new ArrayList<>();
        Object[] parameters = {collection};
        Function result = pf.getFunction("expectedNamespace", "methodName", parameters);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoLastDotInFullName_Kinw8() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("expectedNamespace", "methodNameWithoutDot", new Object[]{new Object()});
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUsedNamespaces_UudJ0_hkGz0_1() {
    String classPrefix = "TestPrefix";
    String namespace = "com.example";
    PackageFunctions packageFunctions = new PackageFunctions(classPrefix, namespace);
    Set<String> result = packageFunctions.getUsedNamespaces();
    assertNotNull(result, "Result should not be null");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUsedNamespaces_UudJ0_hkGz0_2() {
    String classPrefix = "TestPrefix";
    String namespace = "com.example";
    PackageFunctions packageFunctions = new PackageFunctions(classPrefix, namespace);
    Set<String> result = packageFunctions.getUsedNamespaces();
    assertEquals(1, result.size(), "Result should contain exactly one element");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUsedNamespaces_UudJ0_hkGz0_3() {
    String classPrefix = "TestPrefix";
    String namespace = "com.example";
    PackageFunctions packageFunctions = new PackageFunctions(classPrefix, namespace);
    Set<String> result = packageFunctions.getUsedNamespaces();
    assertTrue(result.contains(namespace), "Result should contain the namespace");}
}