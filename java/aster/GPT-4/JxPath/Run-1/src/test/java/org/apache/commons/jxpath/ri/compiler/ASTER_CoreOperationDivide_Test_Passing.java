/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationDivide_Test_Passing {
@Mock
    private Constant arg1;
@Mock
    private Constant arg2;
@Mock
    private EvalContext context;
@InjectMocks
    private CoreOperationDivide coreOperationDivide;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_DivisionByNonZero() throws Exception {
        coreOperationDivide = new CoreOperationDivide(arg1, arg2);
        // Setup
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(2.0);
        // Execution
        Object result = coreOperationDivide.computeValue(context);
        // Verification
        assertEquals(5.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_wkrK0() {
    Constant arg1 = new Constant(1);
    Constant arg2 = new Constant(2);
    CoreOperationDivide cod = new CoreOperationDivide(arg1, arg2);
    assertEquals("div", cod.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsFalse_Qjvu0() {
    Constant arg1 = new Constant(10);
    Constant arg2 = new Constant(5);
    CoreOperationDivide operation = new CoreOperationDivide(arg1, arg2);
    assertFalse(operation.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_bcnH0_yJPY0() {
    Constant arg1 = new Constant(5);
    Constant arg2 = new Constant(10);
    CoreOperationDivide operation = new CoreOperationDivide(arg1, arg2);
    int expectedPrecedence = CoreOperationDivide.MULTIPLY_PRECEDENCE; // Corrected access to static variable
    assertEquals(expectedPrecedence, operation.getPrecedence());
}
}