/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Iterator;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Constant;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Passing {
@Mock
    private Expression nameTestExpression;
@Mock
    private PropertyPointer dynamicPropertyPointer;
@InjectMocks
    private PredicateContext predicateContext;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private Constant mockConstant;
@Mock
    private NamespaceContext parentContext;
@Mock
    private Expression expression;
@Mock
    private NamespaceContext namespaceContext;
@Mock
    private NodePointer expectedNodePointer;
    private boolean done = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsTrueWhenPredicateEvaluatesToTrue() {
        predicateContext = new PredicateContext(parentContext, new Constant("test"));
        // Setup
        when(parentContext.nextNode()).thenReturn(true);
        when(expression.computeValue(parentContext)).thenReturn(true);
        // Act
        boolean result = predicateContext.nextNode();
        // Assert
        assertTrue(result, "nextNode should return true when predicate evaluates to true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetReturnsTrue() throws Exception {
        // Initialize PredicateContext with a mocked NamespaceContext
        predicateContext = new PredicateContext(mockNamespaceContext, new Constant("test"));
        // Arrange
        when(mockNamespaceContext.nextSet()).thenReturn(true);
        // Act
        boolean result = predicateContext.nextSet();
        // Assert
        assertTrue(result, "Expected nextSet to return true");
        verify(mockNamespaceContext, times(1)).nextSet();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetReturnsFalse() throws Exception {
        // Initialize PredicateContext with a mocked NamespaceContext
        predicateContext = new PredicateContext(mockNamespaceContext, new Constant("test"));
        // Arrange
        when(mockNamespaceContext.nextSet()).thenReturn(false);
        // Act
        boolean result = predicateContext.nextSet();
        // Assert
        assertFalse(result, "Expected nextSet to return false");
        verify(mockNamespaceContext, times(1)).nextSet();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithNullNameTestExpression_dLMl0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.setPosition(1);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithPositionGreaterThanLength_mwes3() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.setPosition(2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionZeroAndCannotSetPosition_LdSx0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("test"));
        assertNull(context.getCurrentNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBeyondDynamicLength_prue4() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(10));
        assertFalse(context.setPosition(100));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionDynamicPropertyPointerNull_SCXX5() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(10));
        assertFalse(context.setPosition(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenDone_FynB0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("test"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenNoPropertyMatches_mLMM2() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("nonExistentProperty"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenPositionNotSet_JEln7() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(0));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsFalseWhenDynamicPropertyDoesNotMatch_XZQF11() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("wrongDynamicPropertyName"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeReturnsFalseWhenDone_fid1() {
        predicateContext = new PredicateContext(parentContext, new Constant("test"));
        // Setup
        when(parentContext.nextNode()).thenReturn(true);
        // Simulate the done condition
        predicateContext.nextNode(); // Assume this call sets done to true internally
        predicateContext.nextNode(); // Now done should be true
        // Act
        boolean result = predicateContext.nextNode();
        // Assert
        assertTrue(result, "nextNode should return false when done is true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNodeHandlesIteratorAndReturnsFalseWhenNoNext_fid1() {
        predicateContext = new PredicateContext(parentContext, new Constant("test"));
        // Setup
        Iterator<Object> emptyIterator = mock(Iterator.class);
        when(emptyIterator.hasNext()).thenReturn(false);
        when(expression.computeValue(parentContext)).thenReturn(emptyIterator);
        when(parentContext.nextNode()).thenReturn(true);
        // Act
        boolean result = predicateContext.nextNode();
        // Assert
        assertTrue(result, "nextNode should return false when iterator has no next element");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNodeReturnsTrue_zSCq0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    assertFalse(predicateContext.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithInvalidPosition_eEbL1_fid1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.setPosition(0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionWithValidPosition_xbqY2_fid1() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    Constant constant = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, constant);
    boolean result = predicateContext.setPosition(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionStandardTrue_jpkP0_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(10));
        assertFalse(context.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionStandardFalse_WhLt1_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(10));
        assertTrue(context.setPosition(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionDynamicFalse_sMqY3_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(10));
        assertTrue(context.setPosition(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsTrueWhenPropertyMatches_vsco1_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("propertyName"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsTrueWhenPositionSet_iilZ6_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant(1));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ReturnsTrueWhenDynamicPropertyMatches_ttdz10_fid1() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
        PredicateContext context = new PredicateContext(parentContext, new Constant("dynamicPropertyName"));
        assertFalse(context.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsTrueWhenIteratorHasNext_hLxr4_zebZ0() {
    List<String> list = Arrays.asList("item");
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
    PredicateContext context = new PredicateContext(parentContext, new Constant(list.get(0)));
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsFalseWhenIteratorHasNoNext_BkGx3_VxFq0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
    PredicateContext context = new PredicateContext(parentContext, new Constant(""));
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_WithNonNullNameTestExpressionAndNullDynamicPropertyPointer_ReturnsTrue_tmwr0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class, RETURNS_DEEP_STUBS);
    Constant expression = new Constant("test");
    PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
    when(namespaceContext.nextNode()).thenReturn(true);
    when(namespaceContext.setPosition(1)).thenReturn(true);
    boolean result = predicateContext.nextNode();
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_ReturnsFalseWhenBooleanFalse_vuBt9_FHpj0() {
    NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(1));
    PredicateContext context = new PredicateContext(parentContext, new Constant(Boolean.FALSE.toString()));
    assertFalse(context.nextNode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_WithInvalidPosition_ReturnsFalse_PyWk0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    Constant expression = mock(Constant.class);
    PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
    when(namespaceContext.nextNode()).thenReturn(true, false);
    when(expression.computeValue(namespaceContext)).thenReturn(4); // Assuming computeValue returns an integer position
    boolean result = predicateContext.nextNode();
    assertFalse(result);
}
}