/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreFunction_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionNameForFunctionLast_pfUl0() {
    CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, new Expression[]{});
    String result = coreFunction.getFunctionName();
    assertEquals("last", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArgumentCountWithNullArgs_dHBI0() {
    CoreFunction coreFunction = new CoreFunction(1, null);
    int count = coreFunction.getArgumentCount();
    assertEquals(0, count);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFunctionCode_lsdP0() {
    Expression[] expressions = new Expression[0];
    CoreFunction coreFunction = new CoreFunction(5, expressions);
    assertEquals(5, coreFunction.getFunctionCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionLast_Kgia0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionBooleanNoArgs_fchM1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionSum_fzEq4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
        assertFalse(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentWithFunctionRound_TxiA5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        assertFalse(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NoArguments_zhuH0_fid1() {
        CoreFunction cf = new CoreFunction(1, new Expression[0]);
        assertEquals("last()", cf.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NullArguments_lylz3_fid1() {
        CoreFunction cf = new CoreFunction(1, null);
        assertEquals("last()", cf.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionTrueReturnsTrue_iEhF0_gLAB0() {
    CoreFunction coreFunction = new CoreFunction(0, null);
    EvalContext context = Mockito.mock(EvalContext.class); // Using Mockito to create a mock instance of the abstract class
    Object result = coreFunction.functionTrue(context);
    assertEquals(Boolean.TRUE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringAfter_SecondStringAbsent_OgQY0() {
    Expression[] expressions = new Expression[2];
    expressions[0] = mock(Expression.class);
    expressions[1] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext evalContext = mock(EvalContext.class);
    when(expressions[0].computeValue(evalContext)).thenReturn("hello world");
    when(expressions[1].computeValue(evalContext)).thenReturn("test");
    String result = (String) coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringAfter_BothStringsPresent_YZXy0() {
    Expression[] expressions = new Expression[3];
    expressions[0] = mock(Expression.class);
    expressions[1] = mock(Expression.class);
    expressions[2] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext evalContext = mock(EvalContext.class);
    when(expressions[0].computeValue(evalContext)).thenReturn("hello world");
    when(expressions[1].computeValue(evalContext)).thenReturn(6.0);
    when(expressions[2].computeValue(evalContext)).thenReturn(5.0);
    String result = (String) coreFunction.functionSubstring(evalContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringAfter_EmptySecondString_ynrX0() {
    Expression[] expressions = new Expression[2];
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    expressions[0] = arg1;
    expressions[1] = arg2;
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext evalContext = mock(EvalContext.class);
    when(arg1.computeValue(evalContext)).thenReturn("hello world");
    when(arg2.computeValue(evalContext)).thenReturn("");
    String result = (String) coreFunction.functionSubstring(evalContext);
    assertEquals("hello world", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringAfter_BothStringsEmpty_QLwd0() {
    Expression[] expressions = new Expression[2];
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    expressions[0] = arg1;
    expressions[1] = arg2;
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext evalContext = mock(EvalContext.class);
    when(arg1.computeValue(evalContext)).thenReturn("");
    when(arg2.computeValue(evalContext)).thenReturn(1.0);
    String result = (String) coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringAfter_EmptyFirstString_kvYh0() {
    Expression[] expressions = new Expression[2];
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    expressions[0] = arg1;
    expressions[1] = arg2;
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext evalContext = mock(EvalContext.class);
    when(arg1.computeValue(evalContext)).thenReturn("");
    when(arg2.computeValue(evalContext)).thenReturn(5.0); // Corrected to a valid double value
    String result = (String) coreFunction.functionSubstring(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithThreeArgs_KBDB0() {
    Expression[] args = new Expression[3];
    args[0] = mock(Expression.class);
    args[1] = mock(Expression.class);
    args[2] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext context = mock(EvalContext.class);
    when(args[0].computeValue(context)).thenReturn("Hello World");
    when(args[1].computeValue(context)).thenReturn(1.0);
    when(args[2].computeValue(context)).thenReturn(5.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("Hello", result);
}
@BeforeEach
    @Test
    public void testFunctionSubstring_xZPB1() {
        EvalContext context = mock(EvalContext.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithTwoArgs_WkyS0() {
    Expression[] expressions = new Expression[2];
    expressions[0] = mock(Expression.class);
    expressions[1] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn("Hello World");
    when(expressions[1].computeValue(context)).thenReturn(7.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionLocalName_WithArgumentsAndHasNext_ReturnsNextNodeName_jvmp0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext context = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    QName name = mock(QName.class);
    when(context.hasNext()).thenReturn(true);
    when(context.next()).thenReturn(nodePointer);
    when(nodePointer.getName()).thenReturn(name);
    when(name.toString()).thenReturn("");
    Expression[] args = new Expression[] {mock(Expression.class)};
    coreFunction = new CoreFunction(1, args);
    when(args[0].computeValue(context)).thenReturn(context);
    when(context.hasNext()).thenReturn(true);
    when(context.next()).thenReturn(nodePointer);
    Object result = coreFunction.functionLocalName(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithOutOfBoundsFrom_oyZS0() {
    Expression[] args = new Expression[3];
    args[0] = mock(Expression.class);
    args[1] = mock(Expression.class);
    args[2] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, args);
    EvalContext context = mock(EvalContext.class);
    when(args[0].computeValue(context)).thenReturn("Hello World");
    when(args[1].computeValue(context)).thenReturn(20.0);
    when(args[2].computeValue(context)).thenReturn(5.0); // Assuming a length for the third argument
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithNegativeLength_Wlfa0() {
    Expression[] expressions = new Expression[3];
    expressions[0] = mock(Expression.class);
    expressions[1] = mock(Expression.class);
    expressions[2] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn("Hello World");
    when(expressions[1].computeValue(context)).thenReturn(3.0);
    when(expressions[2].computeValue(context)).thenReturn(-1.0);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithInvalidFromNaN_nocr0() {
    Expression[] expressions = new Expression[3];
    expressions[0] = mock(Expression.class);
    expressions[1] = mock(Expression.class);
    expressions[2] = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn("Hello World");
    when(expressions[1].computeValue(context)).thenReturn(Double.NaN);
    String result = (String) coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCeilingWithNegativeValue_RbjL0() {
    Expression[] expressions = new Expression[]{mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn(-2.1);
    Object result = coreFunction.functionCeiling(context);
    assertEquals(-2.0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCeilingWithNaN_ibZN0() {
    Expression[] expressions = new Expression[]{mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn(Double.NaN);
    Object result = coreFunction.functionCeiling(context);
    assertTrue(Double.isNaN((Double) result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionCeilingWithInfinity_NgjY0() {
    Expression[] expressions = new Expression[]{mock(Expression.class)};
    CoreFunction coreFunction = new CoreFunction(0, expressions);
    EvalContext context = mock(EvalContext.class);
    when(expressions[0].computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
    Object result = coreFunction.functionCeiling(context);
    assertTrue(Double.isInfinite((Double) result) && (Double) result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionTranslate_BGog0() throws Exception {
    EvalContext evalContext = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    Expression arg3 = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
    when(arg1.computeValue(evalContext)).thenReturn("apple");
    when(arg2.computeValue(evalContext)).thenReturn("ap");
    when(arg3.computeValue(evalContext)).thenReturn("OA");
    Object result = coreFunction.functionTranslate(evalContext);
    assertEquals("OAAle", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionPosition_paXH0() {
    CoreFunction coreFunction = new CoreFunction(0, null); // Assuming functionCode and args are not used in functionPosition
    EvalContext mockContext = mock(EvalContext.class);
    when(mockContext.getCurrentPosition()).thenReturn(5);
    Object result = coreFunction.functionPosition(mockContext);
    verify(mockContext).getCurrentPosition();
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNot_WhenFalse_ShouldReturnTrue_SlcT0() throws Exception {
    Expression expression = mock(Expression.class);
    EvalContext evalContext = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{expression});
    when(expression.computeValue(evalContext)).thenReturn(false);
    Object result = coreFunction.functionNot(evalContext);
    assertEquals(true, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNot_WhenTrue_ShouldReturnFalse_rWni0() throws Exception {
    Expression expression = mock(Expression.class);
    EvalContext evalContext = mock(EvalContext.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{expression});
    when(expression.computeValue(any(EvalContext.class))).thenReturn(Boolean.TRUE);
    Object result = coreFunction.functionNot(evalContext);
    assertEquals(Boolean.FALSE, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionLastWithMultipleNodes_CQGz0() {
    CoreFunction coreFunction = new CoreFunction(0, null);
    EvalContext mockContext = mock(EvalContext.class);
    when(mockContext.nextNode()).thenReturn(true, true, true, false);
    when(mockContext.getCurrentPosition()).thenReturn(1, 2, 3);
    int count = 0;
    while (mockContext.nextNode()) {
        count++;
    }
    mockContext.reset();
    Double result = (double) count;
    verify(mockContext, times(4)).nextNode();
    verify(mockContext).reset();
    assertEquals(Double.valueOf(3), result, "Expected count should be 3 when there are three nodes.");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionRoundWithNaN_oufi0() throws Exception {
    EvalContext context = mock(EvalContext.class);
    Expression expression1 = mock(Expression.class);
    Expression expression2 = mock(Expression.class);
    Expression expression3 = mock(Expression.class);
    when(expression1.computeValue(context)).thenReturn("test string");
    when(expression2.computeValue(context)).thenReturn(Double.NaN);
    when(expression3.computeValue(context)).thenReturn(5.0);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{expression1, expression2, expression3});
    Object result = coreFunction.functionSubstring(context);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionSubstringWithNormalValue_DAZQ0() throws Exception {
    EvalContext context = mock(EvalContext.class);
    Expression arg1 = mock(Expression.class);
    Expression arg2 = mock(Expression.class);
    Expression arg3 = mock(Expression.class);
    CoreFunction coreFunction = new CoreFunction(0, new Expression[]{arg1, arg2, arg3});
    when(arg1.computeValue(context)).thenReturn("Hello World");
    when(arg2.computeValue(context)).thenReturn(1.0);
    when(arg3.computeValue(context)).thenReturn(4.0);
    Object result = coreFunction.functionSubstring(context);
    assertEquals("Hell", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionRoundWithNegativeInfinity_tXPb0() throws Exception {
    CoreFunction coreFunction = mock(CoreFunction.class);
    Expression expression1 = mock(Expression.class);
    Expression expression2 = mock(Expression.class);
    EvalContext context = mock(EvalContext.class);
    when(coreFunction.getArgumentCount()).thenReturn(2);
    when(coreFunction.getArg1()).thenReturn(expression1);
    when(coreFunction.getArg2()).thenReturn(expression2);
    when(expression1.computeValue(context)).thenReturn("test");
    when(expression2.computeValue(context)).thenReturn(Double.NEGATIVE_INFINITY);
    Object result = coreFunction.functionSubstring(context);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionRoundWithPositiveInfinity_BABU0() throws Exception {
    CoreFunction coreFunction = mock(CoreFunction.class);
    EvalContext context = mock(EvalContext.class);
    Expression expression1 = mock(Expression.class);
    Expression expression2 = mock(Expression.class);
    Expression expression3 = mock(Expression.class);
    when(coreFunction.getArgumentCount()).thenReturn(3);
    when(coreFunction.getArg1()).thenReturn(expression1);
    when(coreFunction.getArg2()).thenReturn(expression2);
    when(coreFunction.getArg3()).thenReturn(expression3);
    when(expression1.computeValue(context)).thenReturn("Hello World");
    when(expression2.computeValue(context)).thenReturn(Double.POSITIVE_INFINITY);
    when(expression3.computeValue(context)).thenReturn(5.0);
    Object result = coreFunction.functionSubstring(context);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_eHrl0() {
        MockitoAnnotations.initMocks(this);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithArguments_ReturnsEmptyStringWhenNoNextNode_XjOA0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    EvalContext argContext = mock(EvalContext.class);
    when(evalContext.hasNext()).thenReturn(false);
    Expression expression = mock(Expression.class);
    when(expression.computeValue(evalContext)).thenReturn(argContext);
    coreFunction = new CoreFunction(1, new Expression[]{expression});
    Object result = coreFunction.functionNamespaceURI(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithNoArguments_ReturnsNamespaceURI_UToy0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn("http://example.com");
    Object result = coreFunction.functionNamespaceURI(evalContext);
    assertEquals("http://example.com", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithNoArguments_ReturnsEmptyStringWhenNamespaceURINull_DRcn0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn(null);
    Object result = coreFunction.functionNamespaceURI(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithArguments_xNxZ0_1() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    Expression[] args = new Expression[1];
    Expression expr = mock(Expression.class);
    args[0] = expr;
    coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(expr.computeValue(evalContext)).thenReturn("Test String");
    Object result = coreFunction.functionStringLength(evalContext);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithArguments_xNxZ0_2() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    Expression[] args = new Expression[1];
    Expression expr = mock(Expression.class);
    args[0] = expr;
    coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(expr.computeValue(evalContext)).thenReturn("Test String");
    Object result = coreFunction.functionStringLength(evalContext);
    assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithArguments_xNxZ0_3() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    Expression[] args = new Expression[1];
    Expression expr = mock(Expression.class);
    args[0] = expr;
    coreFunction = new CoreFunction(0, args);
    EvalContext evalContext = mock(EvalContext.class);
    when(expr.computeValue(evalContext)).thenReturn("Test String");
    Object result = coreFunction.functionStringLength(evalContext);
    assertEquals(11.0, (Double) result, 0.01);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionNamespaceURI_WithArguments_ReturnsNamespaceURI_QABv0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    EvalContext argContext = mock(EvalContext.class);
    when(evalContext.hasNext()).thenReturn(true);
    when(evalContext.nextNode()).thenReturn(true);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getNamespaceURI()).thenReturn("");
    Expression expression = mock(Expression.class);
    when(expression.computeValue(evalContext)).thenReturn(argContext);
    coreFunction = new CoreFunction(1, new Expression[]{expression});
    Object result = coreFunction.functionNamespaceURI(evalContext);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithNoArguments_srmX0_1() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getValue()).thenReturn("Hello World");
    Object result = coreFunction.functionStringLength(evalContext);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithNoArguments_srmX0_2() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getValue()).thenReturn("Hello World");
    Object result = coreFunction.functionStringLength(evalContext);
    assertTrue(result instanceof Double);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionStringLength_WithNoArguments_srmX0_3() throws Exception {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    EvalContext evalContext = mock(EvalContext.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(evalContext.getCurrentNodePointer()).thenReturn(nodePointer);
    when(nodePointer.getValue()).thenReturn("Hello World");
    Object result = coreFunction.functionStringLength(evalContext);
    assertEquals(11.0, (Double) result, 0.01);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompute_zDON0() throws Exception {
    String expectedValue = "Expected Result";
    EvalContext evalContext = mock(EvalContext.class);
    CoreFunction coreFunction = mock(CoreFunction.class);
    when(coreFunction.functionSubstring(evalContext)).thenReturn(expectedValue);
    Object result = coreFunction.functionSubstring(evalContext);
    verify(coreFunction).functionSubstring(evalContext); // Verify that functionSubstring was indeed called on the coreFunction mock
}
}