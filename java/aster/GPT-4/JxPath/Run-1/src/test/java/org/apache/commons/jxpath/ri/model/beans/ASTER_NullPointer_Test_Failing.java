/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
private String id;
private QName name;
private NullPointer nullPointer;
@Mock
    private NodePointer parentMock;
@Mock
    private JXPathContext contextMock;
@Mock
    private NodePointer createdNodePointerMock;
@Mock
    private NodePointer valuePointerMock;
@Mock
    private JXPathContext context;
@Mock
    private NodePointer mockedNodePointer;
@Mock
    private NodePointer nodePointerMock;
@Mock
    private NodePointer mockNodePointer;
private QName childName;
private Object value;
private int index;
@Mock
    private DOMNodePointer parent;
@InjectMocks
    private NullPointer nullPointerWithId;
private NullPointer nullPointerWithoutId;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        nullPointer = new NullPointer(name, Locale.getDefault());
        // Setup
        int index = 0;
        when(mockedNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt())).thenReturn(mockedNodePointer);
        // Action
        NodePointer result = nullPointer.createChild(context, name, index);
        // Assertion
        assertNotNull(result, "The result should not be null.");
        verify(mockedNodePointer).createChild(context, name, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePathWithNonNullParent_vBES0() {
    QName qName = new QName("testNamespace");
    Locale locale = new Locale("en", "US");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    NullPointer nullPointer = new NullPointer(domNodePointer, qName);
    JXPathContext context = JXPathContext.newContext(new Object());
    Object value = new Object();
    try {
        NodePointer result = nullPointer.createPath(context, value);
        assertNotNull(result);
    } catch (UnsupportedOperationException e) {
        fail("Unexpected UnsupportedOperationException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_RZuC0() {
    Locale locale = new Locale("en", "US");
    QName name = new QName("testName");
    NullPointer nullPointer = new NullPointer(locale, "testId");
    JXPathContext context = JXPathContext.newContext(new Object());
    NodePointer result = nullPointer.createChild(context, name, 0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WithNonNullName() throws Exception {
        // Initialize NullPointer with a mocked QName
        nullPointer = new NullPointer(name, null);
        // Arrange
        when(name.hashCode()).thenReturn(123);
        // Act
        int result = nullPointer.hashCode();
        // Assert
        assertEquals(123, result, "The hash code should match the mocked hash code of the QName object.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLocales_FQqs5() {
        QName qName1 = new QName("name");
        Locale locale1 = new Locale("en", "US");
        NullPointer pointer1 = new NullPointer(qName1, locale1);
        QName qName2 = new QName("name");
        Locale locale2 = new Locale("fr", "FR");
        NullPointer pointer2 = new NullPointer(qName2, locale2);
        assertFalse(pointer1.equals(pointer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutIdWithParent() throws Exception {
        // Setup for NullPointer with an ID
        nullPointerWithId = new NullPointer(new Locale("en"), "123");
        // Setup for NullPointer without an ID and with a mocked parent
        QName name = new QName("testName");
        nullPointerWithoutId = new NullPointer(parent, name);
        // Mocking parent's asPath method
        when(parent.asPath()).thenReturn("parentPath()");
        String result = nullPointerWithoutId.asPath();
        assertEquals("parentPath()", result, "The asPath method should return the parent's path when ID is null.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_lQSd0() {
    Locale locale = new Locale("en", "US");
    QName qName = new QName("testNamespace", "testName");
    DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
    NullPointer nullPointer = new NullPointer(domNodePointer, qName);
    JXPathContext context = JXPathContext.newContext(null);
    NodePointer result = nullPointer.createChild(context, qName, 0, new Object());
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateChild_O_Olns0() throws Exception {
    QName name = new QName("testName");
    QName childName = new QName("childName");
    Object value = new Object();
    int index = 1;
    NullPointer nullPointer = new NullPointer(name, Locale.getDefault());
    NodePointer mockNodePointer = mock(NodePointer.class);
    JXPathContext context = mock(JXPathContext.class);
    when(mockNodePointer.createChild(any(JXPathContext.class), any(QName.class), anyInt(), any())).thenReturn(mockNodePointer);
    when(nullPointer.createPath(context)).thenReturn(mockNodePointer);
    NodePointer result = nullPointer.createChild(context, childName, index, value);
    verify(mockNodePointer).createChild(context, childName, index, value);
}
}