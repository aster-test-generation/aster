/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PropertyIterator_Coverage_Test_Passing {
    private PropertyIterator propertyIterator;
    private BeanPointer beanPointerMock;
    private DOMNodePointer domNodePointerMock;
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZero_NameNotNull_TargetNotReady_pPXJ0() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZero_NameNotNull_TargetReady_Empty_AvKE1() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZero_NameNull_SetPositionFails_DTWx2() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, null, false, null);
        NodePointer result = iterator.getNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionZero_NameNull_SetPositionSuccess_OizO3() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, null, false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_INBy4_2() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertTrue(result instanceof NullPropertyPointer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_CheckPropertyName_IpKJ5_2() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertEquals("propertyName", ((NullPropertyPointer)result).getPropertyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_fdgF0() {
        QName qName = new QName("testName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.getDefault();
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, locale);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        int position = propertyIterator.getPosition();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_INBy4() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
        assertTrue(result instanceof NullPropertyPointer);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_CheckPropertyName_IpKJ5() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
        assertEquals("propertyName", ((NullPropertyPointer)result).getPropertyName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_ThrowableCaught_CheckIndex_PftQ6() {
        BeanPointer beanPointer = new BeanPointer(new QName("test"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        PropertyIterator iterator = new PropertyIterator(beanPointer, "propertyName", false, null);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
        assertEquals(0, ((NullPropertyPointer)result).getIndex()); // Assuming index is 0 for simplicity
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualProperty_targetReady_KkJQ0() {
        BeanPointer mockBeanPointer = mock(BeanPointer.class);
        String name = "testProperty";
        boolean reverse = false;
        DOMNodePointer mockStartWith = mock(DOMNodePointer.class);
        PropertyIterator propertyIterator = new PropertyIterator(mockBeanPointer, name, reverse, mockStartWith);
        propertyIterator.prepareForIndividualProperty(name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualProperty_wholeCollectionReverse_gzKV12() {
        BeanPointer mockBeanPointer = mock(BeanPointer.class);
        String name = "testProperty";
        boolean reverse = true;
        DOMNodePointer mockStartWith = mock(DOMNodePointer.class);
        PropertyIterator propertyIterator = new PropertyIterator(mockBeanPointer, name, reverse, mockStartWith);
        propertyIterator.prepareForIndividualProperty(name);
}
}