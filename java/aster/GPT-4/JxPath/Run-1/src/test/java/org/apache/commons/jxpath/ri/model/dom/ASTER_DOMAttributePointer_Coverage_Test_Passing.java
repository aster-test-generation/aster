/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import org.w3c.dom.Attr;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMAttributePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsAttributeValue_cxiq0() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("someValue");
        when(attr.getSpecified()).thenReturn(true);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        Object result = pointer.getValue();
        assertEquals("someValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNullForNullAttributeValue_sVTv1() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(true);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        Object result = pointer.getValue();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsNullForEmptyAttributeValueAndNotSpecified_jtZR2() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        Object result = pointer.getValue();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ReturnsValueForEmptyAttributeValueButSpecified_sMCY3() {
        Attr attr = mock(Attr.class);
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        Object result = pointer.getValue();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_WithNullOwnerElement_VSjl1() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getOwnerElement()).thenReturn(null);
        DOMNodePointer mockNodePointer = mock(DOMNodePointer.class);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(mockNodePointer, mockAttr);
        domAttributePointer.remove();
        verify(mockAttr, never()).getOwnerElement();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_DiAU0_1() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_DiAU0_2() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_Wkie1_1() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn(null);
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertNull(result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_Wkie1_2() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn(null);
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_kFaV2_1() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_kFaV2_2() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNullPrefix_AELS0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        Attr mockAttr = mock(Attr.class);
        when(mockParent.getPrefix(mockAttr)).thenReturn(null);
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mockAttr);
        String result = pointer.getNamespaceURI();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIWithNonNullPrefix_doOF1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        Attr mockAttr = mock(Attr.class);
        String expectedNamespaceURI = "http://example.com/ns";
        when(mockParent.getPrefix(mockAttr)).thenReturn("ex");
        when(mockParent.getNamespaceURI("ex")).thenReturn(expectedNamespaceURI);
        DOMAttributePointer pointer = new DOMAttributePointer(mockParent, mockAttr);
        String result = pointer.getNamespaceURI();
        assertEquals(expectedNamespaceURI, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_IRsF0() {
        DOMNodePointer parent = null;
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        String path = pointer.asPath();
        assertEquals("@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentAndNonEmptyParentPath_emjG1() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        when(parentNode.asPath()).thenReturn("/parent/path");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        String path = pointer.asPath();
        assertEquals("/parent/path/@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentAndEmptyParentPath_XSQK2() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        when(parentNode.asPath()).thenReturn("");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        String path = pointer.asPath();
        assertEquals("/@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentAndParentPathNotEndingInSlash_sVPS3() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        when(parentNode.asPath()).thenReturn("parentPath");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        String path = pointer.asPath();
        assertEquals("parentPath/@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentAndParentPathEndingInSlash_nMxv4() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        when(parentNode.asPath()).thenReturn("parentPath/");
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        String path = pointer.asPath();
        assertEquals("parentPath/@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParentAndParentPathNull_SWoM6() {
        DOMNodePointer parentNode = mock(DOMNodePointer.class);
        when(parentNode.asPath()).thenReturn(null);
        Attr attr = mock(Attr.class);
        when(attr.getName()).thenReturn("attributeName");
        DOMAttributePointer pointer = new DOMAttributePointer(parentNode, attr);
        String path = pointer.asPath();
        assertEquals("@attributeName", path);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareChildNodePointers_AlwaysReturnsZero_vsvO0_JMDN0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, null);
    DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
    DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
    int result = domAttributePointer.compareChildNodePointers(pointer1, pointer2);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeWithNullNodeTest_bhjE0_dewu0() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.getDefault(), null);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, null);
    boolean result = domAttributePointer.isLeaf();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeWithNodeTypeNode_MwkO1_KsQM0() {
    Locale locale = null; // Assuming locale can be null as per the original test case
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithValidPrefixAndLocalName_DiAU0() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("prefix", result.getPrefix());
        assertEquals("localName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullPrefix_Wkie1() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn(null);
        when(mockAttr.getLocalName()).thenReturn("localName");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertNull(result.getPrefix());
        assertEquals("localName", result.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyLocalName_kFaV2() {
        Attr mockAttr = mock(Attr.class);
        when(mockAttr.getPrefix()).thenReturn("prefix");
        when(mockAttr.getLocalName()).thenReturn("");
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DOMAttributePointer attributePointer = new DOMAttributePointer(mockParent, mockAttr);
        QName result = attributePointer.getName();
        assertEquals("prefix", result.getPrefix());
        assertEquals("", result.getName());
    }
}