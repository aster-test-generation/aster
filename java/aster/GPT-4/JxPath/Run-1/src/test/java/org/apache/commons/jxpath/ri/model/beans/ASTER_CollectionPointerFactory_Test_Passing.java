/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointerFactory_Test_Passing {
@InjectMocks
    private CollectionPointerFactory collectionPointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private CollectionPointer mockCollectionPointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithCollection_BnpZ0() {
        CollectionPointerFactory factory = new CollectionPointerFactory();
        QName name = new QName("test");
        List<Object> bean = new ArrayList<>();
        Locale locale = Locale.getDefault();
        NodePointer result = factory.createNodePointer(name, bean, locale);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodePointerWithNonCollection_Bdyp1() {
        CollectionPointerFactory factory = new CollectionPointerFactory();
        QName name = new QName("test");
        String bean = "Not a collection";
        Locale locale = Locale.getDefault();
        NodePointer result = factory.createNodePointer(name, bean, locale);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_OyQP0_SsWB0() {
    CollectionPointerFactory factory = new CollectionPointerFactory();
    int expectedOrder = 10; // Assuming 10 is the correct order value for COLLECTION_POINTER_FACTORY_ORDER
    int actualOrder = factory.getOrder(); // Assuming getOrder() method exists and returns the order of the factory
    assertEquals(expectedOrder, actualOrder);
}
}