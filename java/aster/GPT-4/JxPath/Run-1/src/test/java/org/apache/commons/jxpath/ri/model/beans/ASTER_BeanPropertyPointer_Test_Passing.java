/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.beans.PropertyDescriptor;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
private transient PropertyDescriptor[] propertyDescriptors;
private static final Object UNINITIALIZED = null;
@Mock
    private DOMNodePointer mockParent;
@Mock
    private JXPathBasicBeanInfo mockBeanInfo;
@Mock
    private PropertyDescriptor mockPropertyDescriptor;
@InjectMocks
    private BeanPropertyPointer beanPropertyPointer;
@Mock
    private DOMNodePointer parent;
@Mock
    private JXPathBasicBeanInfo beanInfo;
@Mock
    private PropertyDescriptor propertyDescriptor;
@Mock
    private JXPathContext context;
private static final String PROPERTY_NAME = "testProperty";
@Mock
    private Object baseValue;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfoMock;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Mock
    private JXPathBasicBeanInfo mockJXPathBasicBeanInfo;
@Mock
    private DOMNodePointer domNodePointer;
private PropertyDescriptor[] mockPropertyDescriptors;
@Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    private Object value = UNINITIALIZED;
    private String propertyName;
    private transient String[] names;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName() {
        // Setup is handled by Mockito annotations
        // Act
        beanPropertyPointer.setPropertyName(PROPERTY_NAME);
        // Assert
        assertEquals(PROPERTY_NAME, beanPropertyPointer.getPropertyName(), "The property name should match the set value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() throws Exception {
        // Initialization of mocks is handled by MockitoExtension and InjectMocks
        // Since isContainer method returns true, we assert that it indeed returns true
        assertTrue(beanPropertyPointer.isContainer(), "The isContainer method should return true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WithSameIndex_DoesNotUpdateValue_1() throws Exception {
        beanPropertyPointer = new BeanPropertyPointer(mockParent, mockBeanInfo);
        // Arrange
        int initialIndex =-2147483648;
        beanPropertyPointer.setIndex(initialIndex); // Set initial index
        reset(mockParent); // Reset interactions after initial setup
        // Act
        beanPropertyPointer.setIndex(initialIndex);
        // Assert
        verify(mockParent, never()).setIndex(initialIndex);
        assertEquals(initialIndex, beanPropertyPointer.getIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_WhenPropertyDescriptorIsNull_ReturnsOne_WarB0() throws Exception {
    BeanPropertyPointer beanPropertyPointer = mock(BeanPropertyPointer.class);
    when(beanPropertyPointer.getBaseValue()).thenReturn(null);
    int length = beanPropertyPointer.getLength();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_UninitializedAndNullPropertyDescriptor_IsiY0() throws Exception {
    DOMNodePointer parent = mock(DOMNodePointer.class);
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
    Field baseValueField = BeanPropertyPointer.class.getDeclaredField("baseValue");
    baseValueField.setAccessible(true);
    baseValueField.set(beanPropertyPointer, UNINITIALIZED);
    Object result = beanPropertyPointer.getBaseValue();
    assertSame(UNINITIALIZED, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollectionWithNullValue_ngEX4_wPxE0() {
    try {
        BeanPropertyPointer bpp = new BeanPropertyPointer(null, new JXPathBasicBeanInfo(List.class));
        assertFalse(bpp.isCollection());
    } catch (Exception e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPropertyIndex_NoChangeWhenSameIndex_lvve0_1() throws Exception {
    beanPropertyPointer = new BeanPropertyPointer(mockParent, mockBeanInfo);
    when(mockBeanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]); // Mock to return an empty array of PropertyDescriptors
    int index = 3;
    beanPropertyPointer.setPropertyIndex(index); // Set initial index
    Object initialBaseValue = beanPropertyPointer.getBaseValue();
    Object initialValue = beanPropertyPointer.getValue();
    String initialPropertyName = beanPropertyPointer.getPropertyName();
    beanPropertyPointer.setPropertyIndex(index); // Set the same index again
    assertSame(initialBaseValue, beanPropertyPointer.getBaseValue());
}
}