/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Arrays;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackageFunctions_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParametersNull_bIEa1() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("expectedNamespace", "methodName", null);
        assertNotNull(result); // Assuming EMPTY_ARRAY handling leads to a valid default behavior
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMethodLookupSuccessful_qAwC4() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Object[] parameters = {new Object()};
        Function result = pf.getFunction("expectedNamespace", "methodName", parameters);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTargetIsCollection_zTcZ6() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Collection<Object> collection = Arrays.asList(new Object());
        Object[] parameters = {collection};
        Function result = pf.getFunction("expectedNamespace", "methodName", parameters);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorLookupSuccessful_FyNc10() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("expectedNamespace", "SomeClass.new", new Object[]{});
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStaticMethodLookupSuccessful_Gkuq11() {
        PackageFunctions pf = new PackageFunctions("SomePrefix", "expectedNamespace");
        Function result = pf.getFunction("expectedNamespace", "SomeClass.staticMethod", new Object[]{new Object()});
        assertNotNull(result);
    }
}