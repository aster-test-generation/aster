/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationNegate_Test_Passing {
@Mock
    private Constant constant;
@Mock
    private EvalContext evalContext;
@InjectMocks
    private CoreOperationNegate coreOperationNegate;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_PositiveNumber() throws Exception {
        coreOperationNegate = new CoreOperationNegate(constant);
        // Setup
        when(constant.computeValue(evalContext)).thenReturn(10.0);
        // Execute
        Object result = coreOperationNegate.computeValue(evalContext);
        // Verify
        verify(constant).computeValue(evalContext);
        assertEquals(-10.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_NegativeNumber() throws Exception {
        coreOperationNegate = new CoreOperationNegate(constant);
        // Setup
        when(constant.computeValue(evalContext)).thenReturn(-20.0);
        // Execute
        Object result = coreOperationNegate.computeValue(evalContext);
        // Verify
        verify(constant).computeValue(evalContext);
        assertEquals(20.0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_dLZp0() {
    Constant constant = new Constant(5);
    CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
    assertEquals("-", coreOperationNegate.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymmetricReturnsFalse_JTrL0() {
    Constant constant = new Constant(5); // Using Number constructor
    CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
    assertFalse(coreOperationNegate.isSymmetric());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrecedence_PBSa0_nWDl0() {
    Constant constant = new Constant(5);
    CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
    int expected = coreOperationNegate.getPrecedence();
    assertEquals(expected, coreOperationNegate.getPrecedence());
}
}