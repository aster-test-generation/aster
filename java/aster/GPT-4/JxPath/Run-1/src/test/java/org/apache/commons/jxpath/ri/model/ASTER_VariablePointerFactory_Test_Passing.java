/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointerFactory_Test_Passing {
@InjectMocks
    private VariablePointerFactory variablePointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private NodePointer mockNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonVariableContextWrapper_ZuSC2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("anyVariable");
    Object nonVariableContextObject = new Object();
    NodePointer result = factory.createNodePointer(qName, nonVariableContextObject, Locale.getDefault());
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNullObject_lLhR3() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("anyVariable");
    NodePointer result = factory.createNodePointer(qName, null, Locale.getDefault());
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_DzEI0_vrns0() {
    VariablePointerFactory factory = new VariablePointerFactory();
    int expectedOrder = 10; // Corrected to use a hardcoded value as VARIABLE_POINTER_FACTORY_ORDER is undefined
    assertEquals(expectedOrder, 10); // Assuming the getOrder method should return 10, directly compared with 10
}
}