/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
private NamespaceContext namespaceContext;
private SelfContext selfContext;
private NodeTypeTest nodeTypeTest;
@Mock
    private NodeIterator iterator;
@Mock
    private NodePointer currentNodePointer;
@Mock
    private NodeTest nodeTest;
@Mock
    private SelfContext parentContext;
    private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_SuccessfullyMovesToPosition() throws Exception {
        selfContext = mock(SelfContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Arrange
        int targetPosition = 5;
        when(namespaceContext.getCurrentPosition()).thenReturn(1, 2, 3, 4, 5);
        when(namespaceContext.nextNode()).thenReturn(true);
        // Act
        boolean result = namespaceContext.setPosition(targetPosition);
        // Assert
        assertTrue(result);
        verify(namespaceContext, times(4)).nextNode(); // Should call nextNode 4 times to reach position 5 from 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_FailsToReachPosition() throws Exception {
        selfContext = mock(SelfContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Arrange
        int targetPosition = 5;
        when(namespaceContext.getCurrentPosition()).thenReturn(1, 2, 3);
        when(namespaceContext.nextNode()).thenReturn(true, true, false); // fails on the third call
        // Act
        boolean result = namespaceContext.setPosition(targetPosition);
        // Assert
        assertFalse(result);
        verify(namespaceContext, times(3)).nextNode(); // Should call nextNode 3 times and then fail
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ResetCalledWhenPositionIsLessThanCurrent() throws Exception {
        selfContext = mock(SelfContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        // Arrange
        int targetPosition = 1;
        when(namespaceContext.getCurrentPosition()).thenReturn(3);
        // Act
        boolean result = namespaceContext.setPosition(targetPosition);
        // Assert
        verify(namespaceContext).reset(); // Verify reset is called because target position is less than current position
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenNodeTestIsNotNodeNameTest_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        when(nodeTest instanceof NodeNameTest).thenReturn(false);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenNodeNameTestWithPrefix_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName("ns", "localName");
        when(nodeTest).thenReturn(nodeNameTest);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenNodeNameTestIsWildcard_CreatesNamespaceIterator() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        when(nodeTest).thenReturn(nodeNameTest);
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(currentNodePointer.namespaceIterator()).thenReturn(iterator);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertTrue(result);
        verify(currentNodePointer).namespaceIterator();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenNodeNameTestIsNotWildcardAndNameExists_ReturnsTrue() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName testName = new QName(null, "localName");
        when(nodeTest).thenReturn(nodeNameTest);
        when(nodeNameTest.getNodeName()).thenReturn(testName);
        when(nodeNameTest.isWildcard()).thenReturn(false);
        when(currentNodePointer.namespacePointer("localName")).thenReturn(currentNodePointer);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenIteratorIsNotNullAndCanMoveNext_ReturnsTrue() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WhenIteratorCannotMoveNext_ReturnsFalse() throws Exception {
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        // Arrange
        when(iterator.setPosition(anyInt())).thenReturn(false);
        // Act
        boolean result = namespaceContext.nextNode();
        // Assert
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionReturnsTrueWhenPositionIsReached_FATU0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        assertTrue(namespaceContext.setPosition(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionResetsWhenPositionIsLessThanCurrent_FAFs2() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        namespaceContext.setPosition(5); // Set an initial position
        assertTrue(namespaceContext.setPosition(3)); // Reset and move to a lesser position
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionContinuesFromCurrentPosition_gZUa3() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(1));
        namespaceContext.setPosition(2); // Set an initial position
        assertTrue(namespaceContext.setPosition(4)); // Continue from position 2 to 4
    }
}