/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_InfoSetUtil_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumber_AujT0() {
        assertEquals(Integer.valueOf(5), InfoSetUtil.number(5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithStringValidDouble_hPDx3() {
        assertEquals(Double.valueOf(10.5), InfoSetUtil.number("10.5"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithEvalContextSingleNodePointerNotNull_OkXD5() {
        EvalContext ctx = mock(EvalContext.class);
        Pointer ptr = mock(Pointer.class);
        when(ctx.getSingleNodePointer()).thenReturn(ptr);
        when(ptr.getValue()).thenReturn(10);
        assertEquals(Integer.valueOf(10), InfoSetUtil.number(ctx));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNodePointer_Ljgw7() {
        NodePointer np = mock(NodePointer.class);
        when(np.getValue()).thenReturn(20);
        assertEquals(Integer.valueOf(20), InfoSetUtil.number(np));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberFloat_vbEF9() {
        assertEquals(Float.valueOf(5.5f), InfoSetUtil.number(5.5f));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberLong_Szkw10() {
        assertEquals(Long.valueOf(5000000000L), InfoSetUtil.number(5000000000L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberShort_sNYj11() {
        assertEquals(Short.valueOf((short) 2), InfoSetUtil.number((short) 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberByte_nGJj12() {
        assertEquals(Byte.valueOf((byte) 1), InfoSetUtil.number((byte) 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberWithNumberDouble_QmKl13() {
        assertEquals(Double.valueOf(123.456), InfoSetUtil.number(123.456));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNumberZero_HfAN0() {
        assertFalse(InfoSetUtil.booleanValue(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNumberNonZero_LNdy1() {
        assertTrue(InfoSetUtil.booleanValue(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNegativeZero_pFYj2() {
        assertFalse(InfoSetUtil.booleanValue(-0.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNaN_XEeA3() {
        assertFalse(InfoSetUtil.booleanValue(Double.NaN));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithBooleanTrue_YgUc4() {
        assertTrue(InfoSetUtil.booleanValue(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithBooleanFalse_SQnb5() {
        assertFalse(InfoSetUtil.booleanValue(false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithEvalContextNullPointer_AxHR7() {
        EvalContext ctx = mock(EvalContext.class);
        when(ctx.getSingleNodePointer()).thenReturn(null);
        assertFalse(InfoSetUtil.booleanValue(ctx));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithStringEmpty_zyTl8() {
        assertFalse(InfoSetUtil.booleanValue(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithStringNonEmpty_Rocz9() {
        assertTrue(InfoSetUtil.booleanValue("test"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNodePointerActual_JlsP10() {
        NodePointer pointer = mock(NodePointer.class);
        when(pointer.isActual()).thenReturn(true);
        assertTrue(InfoSetUtil.booleanValue(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNodePointerNotActual_gypK11() {
        NodePointer pointer = mock(NodePointer.class);
        when(pointer.isActual()).thenReturn(false);
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNodePointerGetValuePointerActual_SFzi13() {
        NodePointer pointer = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        when(pointer.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.isActual()).thenReturn(true);
        assertTrue(InfoSetUtil.booleanValue(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNodePointerGetValuePointerNotActual_payZ14() {
        NodePointer pointer = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        when(pointer.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.isActual()).thenReturn(false);
        assertFalse(InfoSetUtil.booleanValue(pointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNull_CBlG15() {
        assertFalse(InfoSetUtil.booleanValue(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithNonNullObject_AKNV16() {
        assertTrue(InfoSetUtil.booleanValue(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithNumber_bMsO0() {
        assertEquals(5.0, InfoSetUtil.doubleValue(5), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanTrue_RXqx1() {
        assertEquals(0.0, InfoSetUtil.doubleValue(true), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBooleanFalse_Vvhv2() {
        assertEquals(1.0, InfoSetUtil.doubleValue(false), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithEmptyString_KYyp3() {
        assertEquals(0.0, InfoSetUtil.doubleValue(""), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithValidString_oNwX4() {
        assertEquals(123.456, InfoSetUtil.doubleValue("123.456"), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithInvalidString_JAEn5() {
        assertEquals(Double.NaN, InfoSetUtil.doubleValue("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithFloatNumber_AqRR10() {
        assertEquals(10.1, InfoSetUtil.doubleValue(10.1f), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithDoubleNumber_Luvl11() {
        assertEquals(15.2, InfoSetUtil.doubleValue(15.2), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithLongNumber_mEND12() {
        assertEquals(100L, InfoSetUtil.doubleValue(100L), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithByteNumber_OFCW13() {
        assertEquals(2, InfoSetUtil.doubleValue((byte) 2), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithShortNumber_ezOZ14() {
        assertEquals(3, InfoSetUtil.doubleValue((short) 3), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBigInteger_Lmfw15() {
        assertEquals(new java.math.BigInteger("1234567890").doubleValue(), InfoSetUtil.doubleValue(new java.math.BigInteger("1234567890")), 0.001);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleValueWithBigDecimal_SDgy16() {
        assertEquals(new java.math.BigDecimal("12345.67890").doubleValue(), InfoSetUtil.doubleValue(new java.math.BigDecimal("12345.67890")), 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNull_UpbW0() {
        assertEquals("", InfoSetUtil.stringValue(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithString_pwUn1() {
        assertEquals("Hello", InfoSetUtil.stringValue("Hello"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithInteger_vJSr2() {
        assertEquals("42", InfoSetUtil.stringValue(42));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithDouble_oLrG3() {
        assertEquals("42.5", InfoSetUtil.stringValue(42.5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithLong_TxHL4() {
        assertEquals("1234567890123456789", InfoSetUtil.stringValue(1234567890123456789L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithFloat_lLNJ5() {
        assertEquals("3.14", InfoSetUtil.stringValue(3.14f));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanTrue_jVLT6() {
        assertEquals("true", InfoSetUtil.stringValue(true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithBooleanFalse_BdGk7() {
        assertEquals("false", InfoSetUtil.stringValue(false));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithObject_Ztyw11() {
        Object obj = new Object();
        assertEquals(obj.toString(), InfoSetUtil.stringValue(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumberEqualDoubleLong_XSEh12() {
        assertEquals("100", InfoSetUtil.stringValue(100.0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValueWithNumberNotEqualDoubleLong_oJhc13() {
        assertEquals("100.1", InfoSetUtil.stringValue(100.1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithStringInvalidNumber_pcvc4_BQLm0() {
    assertEquals("abc", InfoSetUtil.stringValue("abc"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithObject_CrQu8_eSmF0() {
    Object obj = new Object();
    assertEquals("InfoSetUtil.NOT_A_NUMBER", InfoSetUtil.stringValue(obj));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValueWithEvalContextNonNullPointer_fjgL6_HtBE0() {
    EvalContext ctx = mock(EvalContext.class);
    Pointer ptr = mock(Pointer.class);
    when(ctx.getSingleNodePointer()).thenReturn(ptr);
    when(ptr.getValue()).thenReturn("expectedValue");
    assertEquals("expectedValue", InfoSetUtil.stringValue(ctx));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBooleanValueWithVariablePointer_HzaV12_uxJg0() {
    VariablePointer varPointer = mock(VariablePointer.class);
    NodePointer nodePointer = mock(NodePointer.class);
    when(varPointer.getNode()).thenReturn(nodePointer);
    when(nodePointer.isActual()).thenReturn(true);
    assertTrue(InfoSetUtil.booleanValue(varPointer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumberWithEvalContextSingleNodePointerNull_nDSw6_tTwm0() {
    EvalContext ctx = mock(EvalContext.class);
    when(ctx.getSingleNodePointer()).thenReturn(null);
    assertEquals("", InfoSetUtil.stringValue(ctx));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testStringValueWithCustomObject_ExND14_jlTa0() {
    Object customObject = "Custom";
    assertEquals("Custom", InfoSetUtil.stringValue(customObject));
}
}