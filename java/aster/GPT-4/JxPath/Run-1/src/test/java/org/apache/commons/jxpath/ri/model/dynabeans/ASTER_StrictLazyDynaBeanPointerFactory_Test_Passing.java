/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;
import java.util.Locale;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_StrictLazyDynaBeanPointerFactory_Test_Passing {
    private NodePointer parent;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrder_wuIp0() {
    StrictLazyDynaBeanPointerFactory factory = new StrictLazyDynaBeanPointerFactory();
    int expectedOrder = DynaBeanPointerFactory.DYNA_BEAN_POINTER_FACTORY_ORDER - 1;
    assertEquals(expectedOrder, factory.getOrder());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointerWithNonLazyDynaBean_hpJY1() {
    StrictLazyDynaBeanPointerFactory factory = new StrictLazyDynaBeanPointerFactory();
    QName name = new QName("testPrefix", "testLocalName");
    Object nonLazyDynaBean = new Object();
    Locale locale = Locale.getDefault();
    NodePointer result = factory.createNodePointer(name, nonLazyDynaBean, locale);
    assertNull(result);
}
@Test
    public void testCreateNodePointer_tLNS0_2() {
        StrictLazyDynaBeanPointerFactory factory = new StrictLazyDynaBeanPointerFactory();
        NodePointer parent = mock(NodePointer.class);
        QName name = new QName("test");
        LazyDynaBean lazyDynaBean = mock(LazyDynaBean.class);
        NodePointer result = factory.createNodePointer(parent, name, lazyDynaBean);
        Object notLazyDynaBean = new Object();
        result = factory.createNodePointer(parent, name, notLazyDynaBean);
        assertNull(result);}
}