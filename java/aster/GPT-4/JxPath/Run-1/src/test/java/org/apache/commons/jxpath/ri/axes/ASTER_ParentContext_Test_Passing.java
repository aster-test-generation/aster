/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.mock;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
private ParentContext parentContext;
private NamespaceContext namespaceContext;
private NodeTypeTest nodeTypeTest;
@Mock
    private NamespaceContext mockNamespaceContext;
@Mock
    private NodeTypeTest mockNodeTypeTest;
@Mock
    private NodePointer currentNodePointer;
@Mock
    private NodeTypeTest nodeTest;
@Mock
    private NodePointer immediateParentPointer;
@InjectMocks
    private ParentContext parentContextUnderTest;
    private boolean setStarted = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsTrueWhenPositionIsOne() throws Exception {
        // Mock dependencies
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        // Initialize the object to be tested
        parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        // Arrange
        int position = 1;
        // Act
        boolean result = parentContext.setPosition(position);
        // Assert
        assertEquals(true, result, "setPosition should return true when position is 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_ReturnsFalseWhenPositionIsNotOne() throws Exception {
        // Mock dependencies
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        // Initialize the object to be tested
        parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        // Arrange
        int position = 2;
        // Act
        boolean result = parentContext.setPosition(position);
        // Assert
        assertEquals(false, result, "setPosition should return false when position is not 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDocumentOrder_IRxz0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
    int result = parentContext.getDocumentOrder();
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition() throws Exception {
        // Mocking dependencies of ParentContext
        NamespaceContext mockNamespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        parentContext = new ParentContext(mockNamespaceContext, new NodeTypeTest(1));
        // Act
        int result = parentContext.getCurrentPosition();
        // Assert
        assertEquals(1, result, "The current position should be 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_izUc0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
    ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
    NodePointer expectedNodePointer = parentContext.getCurrentNodePointer();
    assertEquals(expectedNodePointer, parentContext.getCurrentNodePointer());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_WlsO0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        int result = parentContext.getCurrentPosition();
        assertEquals(1, result);
    }
}