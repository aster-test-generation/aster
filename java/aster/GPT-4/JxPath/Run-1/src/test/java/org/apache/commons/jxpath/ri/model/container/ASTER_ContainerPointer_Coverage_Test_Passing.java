/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.xml.DocumentContainer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ContainerPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_qkFg0() {
        DOMNodePointer mockedDOMNodePointer = mock(DOMNodePointer.class);
        DocumentContainer mockedDocumentContainer = mock(DocumentContainer.class);
        ContainerPointer containerPointer = new ContainerPointer(mockedDOMNodePointer, mockedDocumentContainer);
        when(mockedDOMNodePointer.getNamespaceURI("testPrefix")).thenReturn("http://example.com/test");
        String result = containerPointer.getNamespaceURI("testPrefix");
        assertEquals("http://example.com/test", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_ysFx0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        DocumentContainer mockContainer = mock(DocumentContainer.class);
        NodePointer mockValuePointer = mock(NodePointer.class);
        NodeTest mockNodeTest = mock(NodeTest.class);
        NodePointer mockStartWith = mock(NodePointer.class);
        NodeIterator expectedIterator = mock(NodeIterator.class);
        when(mockValuePointer.childIterator(mockNodeTest, true, mockStartWith)).thenReturn(expectedIterator);
        ContainerPointer containerPointer = new ContainerPointer(mockParent, mockContainer);
        ContainerPointer spyContainerPointer = spy(containerPointer);
        doReturn(mockValuePointer).when(spyContainerPointer).getValuePointer();
        NodeIterator resultIterator = spyContainerPointer.childIterator(mockNodeTest, true, mockStartWith);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_nXSR0() {
        DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
        DocumentContainer documentContainerMock = mock(DocumentContainer.class);
        NodeIterator nodeIteratorMock = mock(NodeIterator.class);
        when(domNodePointerMock.namespaceIterator()).thenReturn(nodeIteratorMock);
        ContainerPointer containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        NodeIterator result = containerPointer.namespaceIterator();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_WwAO0() {
        DOMNodePointer mockedDomNodePointer = mock(DOMNodePointer.class);
        DocumentContainer mockedDocumentContainer = mock(DocumentContainer.class);
        NodePointer mockedNodePointer = mock(NodePointer.class);
        when(mockedDomNodePointer.getValuePointer()).thenReturn(mockedNodePointer);
        when(mockedNodePointer.namespacePointer("http://example.com/ns")).thenReturn(mockedNodePointer);
        ContainerPointer containerPointer = new ContainerPointer(mockedDomNodePointer, mockedDocumentContainer);
        NodePointer result = containerPointer.namespacePointer("http://example.com/ns");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateValuePointer_WhenValuePointerIsNotNull_pgBx1_hUPt0_fid2() {
    ContainerPointer containerPointer = mock(ContainerPointer.class, CALLS_REAL_METHODS);
    NodePointer existingNodePointer = mock(NodePointer.class);
    when(containerPointer.getImmediateValuePointer()).thenReturn(existingNodePointer);
    NodePointer result = containerPointer.getImmediateValuePointer();
    verify(containerPointer, times(1)).getImmediateNode();
    verify(containerPointer, never()).getName();
    assertEquals(existingNodePointer, result);
}
}