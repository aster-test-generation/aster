/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Failing {
@Mock
    private QName name;
@Mock
    private JXPathBasicBeanInfo beanInfo;
@Mock
    private DOMNodePointer parent;
@Mock
    private Object bean;
@InjectMocks
    private BeanPointer beanPointer;
@Mock
    private Locale locale;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentParent() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        DOMNodePointer differentParent = mock(DOMNodePointer.class);
        BeanPointer other = new BeanPointer(differentParent, name, bean, beanInfo);
        when(parent.equals(differentParent)).thenReturn(false);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        QName differentName = mock(QName.class);
        BeanPointer other = new BeanPointer(parent, differentName, bean, beanInfo);
        when(name.equals(differentName)).thenReturn(false);
        assertFalse(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameFields() {
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        BeanPointer other = new BeanPointer(parent, name, bean, beanInfo);
        when(parent.equals(parent)).thenReturn(true);
        when(name.equals(name)).thenReturn(true);
        assertTrue(beanPointer.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_1() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath(), "Path should return 'false()' for Boolean true.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        // Mock the necessary method on QName
        when(name.hashCode()).thenReturn(123);
        // Initialize BeanPointer with mocked QName
        beanPointer = new BeanPointer(parent, name, bean, beanInfo);
        // Set the expected hash code based on the mocked QName's hash code
        int expectedHashCode = name.hashCode();
        // Assert that the BeanPointer's hashCode method returns the expected value
        assertEquals(expectedHashCode, beanPointer.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_WhenNodeIsAtomic_ShouldReturnTrue_Bkvc0() throws Exception {
    Object bean = mock(Object.class);
    QName name = new QName("test");
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    when(JXPathIntrospector.getBeanInfo(any(Class.class))).thenReturn(beanInfo);
    when(beanInfo.isAtomic()).thenReturn(true);
    boolean result = beanPointer.isLeaf();
    assertTrue(result, "Expected isLeaf to return true when node is atomic");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_WhenNodeIsNotAtomic_ShouldReturnFalse_bAaq0() throws Exception {
    Object bean = mock(Object.class);
    BeanPointer beanPointer = mock(BeanPointer.class);
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    when(beanPointer.getNode()).thenReturn(bean);
    when(JXPathIntrospector.getBeanInfo(bean.getClass())).thenReturn(beanInfo);
    when(beanInfo.isAtomic()).thenReturn(false);
    boolean result = beanPointer.isLeaf();
    assertFalse(result, "Expected isLeaf to return false when node is not atomic");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNumberBean_1() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, 123.0, beanInfo, locale);
        beanPointer = new BeanPointer(name, 123.45, beanInfo, locale);
        assertEquals("123", beanPointer.asPath(), "Path should handle Number objects, trimming '.0'.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithBooleanBean_1_fid1() {
        name = new QName("testName");
        beanInfo = new JXPathBasicBeanInfo(Object.class);
        locale = Locale.getDefault();
        beanPointer = new BeanPointer(name, true, beanInfo, locale);
        beanPointer = new BeanPointer(name, false, beanInfo, locale);
        assertEquals("true()", beanPointer.asPath(), "Path should return 'true()' for Boolean true.");}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_WhenNodeIsNull_ShouldReturnTrue_MxvV0_fid1() throws Exception {
    Object bean = mock(Object.class);
    BeanPointer beanPointer = mock(BeanPointer.class);
    when(beanPointer.getNode()).thenReturn(null);
    boolean result = beanPointer.isLeaf();
    assertTrue(result, "Expected isLeaf to return true when node is null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_WhenNodeIsAtomic_ShouldReturnTrue_Bkvc0_fid1() throws Exception {
    Object bean = mock(Object.class);
    QName name = new QName("test");
    JXPathBasicBeanInfo beanInfo = mock(JXPathBasicBeanInfo.class);
    Locale locale = Locale.getDefault();
    BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
    when(JXPathIntrospector.getBeanInfo(any())).thenReturn(beanInfo);
    when(beanInfo.isAtomic()).thenReturn(true);
    boolean result = beanPointer.isLeaf();
    assertTrue(result, "Expected isLeaf to return true when node is atomic");
}
}