/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.BasicNodeSet;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeSetContext_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ReturnsNull_Akxk0() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        when(context.setPosition(1)).thenReturn(false);
        NodePointer result = context.getCurrentNodePointer();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ReturnsNodePointer_xrBz1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(expectedNodePointer);
        when(context.setPosition(1)).thenReturn(true);
        when(nodeSet.getPointers()).thenReturn(pointers);
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(expectedNodePointer, result);
    }
}