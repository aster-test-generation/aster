/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
@Mock
    private NodePointer nodePointer;
@InjectMocks
    private InitialContext initialContext;
@Mock
    private NamespaceContext namespaceContext;
    private boolean collection;
    private boolean started = false;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer() throws Exception {
        // Setup the InitialContext with a mocked NamespaceContext
        initialContext = new InitialContext(namespaceContext);
        // Assuming there's a setter or some method to set nodePointer in InitialContext
        // Since it's private and no setter is shown, we assume it might be set through some internal logic or constructor
        // For this example, we'll assume there's a way to set it directly or indirectly
        when(initialContext.getSingleNodePointer()).thenReturn(nodePointer);
        // Act
        Pointer result = initialContext.getSingleNodePointer();
        // Assert
        assertEquals(nodePointer, result, "The returned NodePointer should match the mocked NodePointer instance.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() throws Exception {
        // Mock setup if necessary, currently not needed as we are directly injecting mocks
        // Setup the behavior of the mock if needed
        when(initialContext.getCurrentNodePointer()).thenReturn(nodePointer);
        // Execute the method to be tested
        NodePointer result = initialContext.getCurrentNodePointer();
        // Verify the result
        assertEquals(nodePointer, result, "The returned NodePointer should match the mock");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleNodePointer_lKJR0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    Pointer result = initialContext.getSingleNodePointer();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_IncrementsPositionSuccessfully() throws Exception {
        namespaceContext = mock(NamespaceContext.class); // Mocking NamespaceContext
        initialContext = new InitialContext(namespaceContext); // Injecting the mocked NamespaceContext
        // Arrange
        when(initialContext.setPosition(anyInt())).thenReturn(true); // Mock setPosition to always return true
        // Act
        boolean result = initialContext.nextNode();
        // Assert
        assertTrue(result, "nextNode should return true when setPosition is successful");
        verify(initialContext).setPosition(1); // Verify setPosition was called with incremented position
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_FailsToIncrementPosition() throws Exception {
        namespaceContext = mock(NamespaceContext.class); // Mocking NamespaceContext
        initialContext = new InitialContext(namespaceContext); // Injecting the mocked NamespaceContext
        // Arrange
        when(initialContext.setPosition(anyInt())).thenReturn(false); // Mock setPosition to return false
        // Act
        boolean result = initialContext.nextNode();
        // Assert
        assertFalse(result, "nextNode should return false when setPosition fails");
        verify(initialContext).setPosition(1); // Verify setPosition was called with incremented position
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_cKJJ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        NodePointer expected = initialContext.getCurrentNodePointer();
        NodePointer actual = initialContext.getCurrentNodePointer();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        // Setup the InitialContext with a mocked NamespaceContext
        initialContext = new InitialContext(namespaceContext);
        // Arrange
        Object expectedValue = "expectedValue";
        when(nodePointer.getValue()).thenReturn(expectedValue);
        // Act
        Object actualValue = initialContext.getValue();
        // Assert
        assertEquals(expectedValue, actualValue, "The value returned by getValue should match the expected value.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_HTji0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextNode();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_FirstCall_ReturnsTrue() throws Exception {
        // Assuming that the InitialContext requires a NamespaceContext in its constructor
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        initialContext = new InitialContext(namespaceContext);
        // Test the behavior of nextSet when called the first time
        boolean result = initialContext.nextSet();
        assertTrue(result, "Expected nextSet to return true on first call");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_SecondCall_ReturnsFalse() throws Exception {
        // Assuming that the InitialContext requires a NamespaceContext in its constructor
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        initialContext = new InitialContext(namespaceContext);
        // Call nextSet once to set 'started' to true
        initialContext.nextSet();
        // Test the behavior of nextSet when called the second time
        boolean result = initialContext.nextSet();
        assertFalse(result, "Expected nextSet to return false on subsequent calls");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_fdGf0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
    Object result = initialContext.getValue();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetFirstCall_UqBK0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextSet();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetSecondCall_VKSL1() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialContext.nextSet(); // first call to set started to true
        boolean result = initialContext.nextSet(); // second call should return false
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionTrueNotInCollection_Umoy0() {
    InitialContext initialContext = new InitialContext(null); // Assuming the constructor does not use the parameter for now
    boolean collection = false; // Assuming this is meant to simulate the collection state
    boolean result = initialContext.setPosition(1);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionFalseNotInCollection_ltjs0() {
    InitialContext initialContext = new InitialContext(null); // Assuming the constructor does not use the parameter for now
    boolean collection = false; // Assuming this should be set to false to simulate not being in a collection
    boolean result = initialContext.setPosition(2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPositionTrueWhenNotCollection_XokA4_fdqi0() {
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    SelfContext selfContext = new SelfContext(null, nodeTypeTest);
    NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
    InitialContext initialContext = new InitialContext(namespaceContext);
}
}