/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TokenMgrError_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithSpecialCharacters_prdv0() {
        String input = "\b\t\n\f\r\"\'\\";
        String expected = "\\b\\t\\n\\f\\r\\\"\\\'\\\\";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithAlphanumeric_Plzx1() {
        String input = "abc123";
        String expected = "abc123";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithNonPrintableCharacters_RMED2() {
        String input = String.valueOf((char) 1) + (char) 127;
        String expected = "\\u0001\\u007f";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesWithMixedContent_uSmr3() {
        String input = "Hello, World!\nJava\b";
        String expected = "Hello, World!\\nJava\\b";
        assertEquals(expected, TokenMgrError.addEscapes(input));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLexicalErrorWithEOF_WQnQ0() {
        boolean EOFSeen = true;
        int lexState = 0;
        int errorLine = 1;
        int errorColumn = 5;
        String errorAfter = "some text";
        char curChar = 'a';
        String expected = "Lexical error at line 1, column 5.  Encountered: <EOF> after : \"some text\"";
        String result = TokenMgrError.LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLexicalErrorWithoutEOF_cvkp1() {
        boolean EOFSeen = false;
        int lexState = 0;
        int errorLine = 1;
        int errorColumn = 5;
        String errorAfter = "some text";
        char curChar = 'a';
        String expected = "Lexical error at line 1, column 5.  Encountered: \"a\" (97), after : \"some text\"";
        String result = TokenMgrError.LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLexicalError_xnSh0() {
    String expected = "Lexical error at line 1, column 1.  Encountered: \"a\" (97), after : \"\"";
    String actual = TokenMgrError.LexicalError(false, 0, 1, 1, "", 'a');
    assertEquals(expected, actual);
}
}