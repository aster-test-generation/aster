/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SimplePathInterpreter_Coverage_Test_Passing {
    private NodePointer expectedPointer;
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_StepLengthEqualsCurrentStep_avpw0() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        Step[] steps = new Step[1];
        int currentStep = 1;
        NodePointer result = SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        assertEquals(parent, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_ValuePointerCalled_eKoN1() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        Step[] steps = new Step[2];
        steps[0] = mock(Step.class);
        int currentStep = 0;
        when(parent.getValuePointer()).thenReturn(valuePointer);
        SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        verify(parent).getValuePointer();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_StepRetrieved_eioC2() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        Step[] steps = new Step[2];
        steps[0] = mock(Step.class);
        int currentStep = 0;
        when(parent.getValuePointer()).thenReturn(valuePointer);
        SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        verify(steps[0]).getAxis();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_AxisChild_GDIv3() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        Step step = mock(Step.class);
        Step[] steps = new Step[1];
        steps[0] = step;
        int currentStep = 0;
        when(parent.getValuePointer()).thenReturn(valuePointer);
        when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        verify(step).getNodeTest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_AxisAttribute_vWeR4() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        Step step = mock(Step.class);
        Step[] steps = new Step[1];
        steps[0] = step;
        int currentStep = 0;
        when(parent.getValuePointer()).thenReturn(valuePointer);
        when(step.getAxis()).thenReturn(Compiler.AXIS_ATTRIBUTE);
        SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        verify(step).getNodeTest();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNullPointer_NullPropertyPointerCreated_ioAx5() {
        EvalContext context = mock(EvalContext.class);
        NodePointer parent = mock(NodePointer.class);
        NodePointer valuePointer = mock(NodePointer.class);
        Step step = mock(Step.class);
        NodeNameTest nodeNameTest = mock(NodeNameTest.class);
        QName qName = new QName("test");
        Step[] steps = new Step[1];
        steps[0] = step;
        int currentStep = 0;
        when(parent.getValuePointer()).thenReturn(valuePointer);
        when(step.getAxis()).thenReturn(Compiler.AXIS_CHILD);
        when(step.getNodeTest()).thenReturn(nodeNameTest);
        when(nodeNameTest.getNodeName()).thenReturn(qName);
        SimplePathInterpreter.createNullPointer(context, parent, steps, currentStep);
        verify(nodeNameTest).getNodeName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInterpretSimpleExpressionPathWithNullPredicates_Qile0_MrLb0() {
    EvalContext context = mock(EvalContext.class);
    NodePointer root = mock(NodePointer.class);
    Expression[] predicates = null;
    Step[] steps = new Step[0];
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps);
    assertNotNull(result, "Result should not be null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInterpretSimpleExpressionPathWithEmptySteps_GWnS1_PDWj0() {
    EvalContext context = mock(EvalContext.class);
    NodePointer root = mock(NodePointer.class);
    Expression[] predicates = new Expression[0];
    Step[] steps = new Step[0];
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps);
    assertNotNull(result, "Result should not be null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInterpretSimpleLocationPath_WithValidSteps_lwBw1_uWAR0() throws Exception {
    NodePointer expectedPointer = mock(NodePointer.class);
    EvalContext context = mock(EvalContext.class);
    NodePointer root = mock(NodePointer.class);
    Expression[] predicates = new Expression[]{mock(Expression.class)};
    Step[] steps = new Step[]{mock(Step.class)};
    when(SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps)).thenReturn(expectedPointer);
    NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps);
    assertEquals(expectedPointer, result);
}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testInterpretSimpleExpressionPathWithValidInput_iCTe2_ZeFY0() {
        EvalContext context = mock(EvalContext.class);
        NodePointer root = mock(NodePointer.class);
        Expression[] predicates = new Expression[1];
        Step[] steps = new Step[1];
        NodePointer result = SimplePathInterpreter.interpretSimpleExpressionPath(context, root, predicates, steps);
        assertNotNull(result, "Result should not be null");
    }
}