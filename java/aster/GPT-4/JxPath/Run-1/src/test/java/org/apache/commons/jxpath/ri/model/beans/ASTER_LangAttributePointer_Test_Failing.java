/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Failing {
@Mock
    private DOMNodePointer mockParent;
@InjectMocks
    private LangAttributePointer langAttributePointer;
private DOMNodePointer domNodePointer;
@Mock
    private DOMNodePointer domNodePointerMock;
@Mock
    private DOMNodePointer mockDomNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode() throws Exception {
        // Initialize LangAttributePointer with a mocked DOMNodePointer
        langAttributePointer = new LangAttributePointer(domNodePointerMock);
        // Arrange
        Object expectedNode = new Object();
        when(domNodePointerMock.getBaseValue()).thenReturn(expectedNode);
        // Act
        Object result = langAttributePointer.getImmediateNode();
        // Assert
        assertEquals(expectedNode, result, "The returned node should match the expected node.");
        verify(domNodePointerMock).getBaseValue(); // Verify getBaseValue was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() throws Exception {
        when(domNodePointer.getLocale()).thenReturn(new Locale("en", "US"));
        langAttributePointer = new LangAttributePointer(domNodePointer);
        String expected = "en-US";
        String actual = langAttributePointer.getBaseValue().toString();
        assertEquals(expected, actual, "The base value should be correctly formatted locale string.");
    }
}