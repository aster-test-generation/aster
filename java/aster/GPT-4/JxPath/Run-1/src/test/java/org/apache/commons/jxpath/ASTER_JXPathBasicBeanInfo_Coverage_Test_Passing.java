/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDynamicPropertyHandlerClass_bdJR0() {
        Class expectedClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, expectedClass);
        Class resultClass = beanInfo.getDynamicPropertyHandlerClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyDescriptorsWithObjectClass_Qaht1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        assertEquals(0, beanInfo.getPropertyDescriptors().length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringBasic_mEgu0() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithProperties_bEqd3() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertTrue(result.contains(", properties = "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamicPropertyHandler_QPaV4() {
        Class<?> testClass = String.class;
        Class<?> handlerClass = Object.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, handlerClass);
        String result = beanInfo.toString();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithMultipleProperties_lkSK5() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertTrue(result.contains(": "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoProperties_fcmU6() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertFalse(result.contains(": null"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullClass_BiRK7() {
        Class<?> testClass = null;
        try {
            JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
            beanInfo.toString();
            fail("Expected an exception to be thrown");
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyProperties_NIhM8() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertTrue(result.endsWith("]"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringCheckReturnType_kmEo9() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        assertTrue(beanInfo.toString() instanceof String);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamicPropertyHandlerAndProperties_evaE12() {
        Class<?> testClass = String.class;
        Class<?> handlerClass = Object.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, handlerClass);
        String result = beanInfo.toString();
        assertTrue(result.contains(", properties = "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPropertyDetails_CZEr13() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertTrue(result.contains("\n    "));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringComplete_cMYf15() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertNotNull(result);
        assertTrue(result.length() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamic_yqxB1_fid1() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithAtomic_ocat2_fid1() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, false);
        String result = beanInfo.toString();
        assertFalse(result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDynamicAndAtomic_SFfE11_fid1() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
        String result = beanInfo.toString();
        assertFalse(result.contains(", dynamic") && result.contains(", atomic"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringComplete_cMYf15_1() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringComplete_cMYf15_2() {
        Class<?> testClass = String.class;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
        String result = beanInfo.toString();
        assertTrue(result.length() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptor_InitialNullMap_KOyM0_dRlP0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    PropertyDescriptor result = beanInfo.getPropertyDescriptor("someProperty");
    assertNull(result, "Expected null since no descriptors are set");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyDescriptor_RetrievePropertyDescriptors_aPde2_OqyG0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
    PropertyDescriptor[] result = beanInfo.getPropertyDescriptors();
    assertNotNull(result, "Expected getPropertyDescriptors to be called");
}
}