/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Passing {
    private Node node;
    private DOMNodePointer domNodePointer;
    private DOMNodePointer parentNode;
    private JXPathContext context;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersBothAttributes_pJhu0() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        Node parentNode = mock(Node.class);
        NamedNodeMap attributes = mock(NamedNodeMap.class);
        when(node1.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(node2.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(parentNode.getAttributes()).thenReturn(attributes);
        when(attributes.getLength()).thenReturn(2);
        when(attributes.item(0)).thenReturn(node1);
        when(attributes.item(1)).thenReturn(node2);
        DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, Locale.getDefault());
        NodePointer pointer1 = new DOMNodePointer(domNodePointer, node1);
        NodePointer pointer2 = new DOMNodePointer(domNodePointer, node2);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersSecondNodeFirst_OqdL1() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        Node parentNode = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parentNode.getFirstChild()).thenReturn(node2);
        when(node2.getNextSibling()).thenReturn(node1);
        DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, Locale.getDefault());
        NodePointer pointer1 = new DOMNodePointer(domNodePointer, node1);
        NodePointer pointer2 = new DOMNodePointer(domNodePointer, node2);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersTraverseSiblings_smhO2() {
        Node node1 = mock(Node.class);
        Node node2 = mock(Node.class);
        Node parentNode = mock(Node.class);
        Node siblingNode = mock(Node.class);
        when(node1.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node2.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(parentNode.getFirstChild()).thenReturn(siblingNode);
        when(siblingNode.getNextSibling()).thenReturn(node1);
        when(node1.getNextSibling()).thenReturn(node2);
        DOMNodePointer domNodePointer = new DOMNodePointer(parentNode, Locale.getDefault());
        NodePointer pointer1 = new DOMNodePointer(domNodePointer, node1);
        NodePointer pointer2 = new DOMNodePointer(domNodePointer, node2);
        int result = domNodePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_Nvju0() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_woae00() {
        node = mock(Node.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NullNodeTest_ReturnsTrue_JyTP1() {
        assertTrue(DOMNodePointer.testNode(node, null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTestWithNodeTypeNode_ReturnsTrue_OIkB7() {
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTestWithNodeTypeText_ReturnsTrue_OcEo8() {
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_TEXT);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTestWithNodeTypePI_ReturnsTrue_EXko9() {
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_PI);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        assertTrue(DOMNodePointer.testNode(node, nodeTypeTest));
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_TIoG01() {
        node = mock(Node.class);
        parentNode = mock(DOMNodePointer.class);
        domNodePointer = new DOMNodePointer(parentNode, node);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParentNonNull_gmNG2() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        String result = domNodePointer.asPath();
        assertTrue(result.startsWith("/parent/path"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathTextNode_qJaS10() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        String result = domNodePointer.asPath();
        assertTrue(result.contains("/text()[1]")); // Assuming getRelativePositionOfTextNode() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathCDataSectionNode_lpib11() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
        String result = domNodePointer.asPath();
        assertTrue(result.contains("/text()[1]")); // Assuming getRelativePositionOfTextNode() returns 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathDocumentNode_TUbB13() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        String result = domNodePointer.asPath();
        assertEquals("/parent/path", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathDefaultNode_Nhqx14() {
        when(parentNode.asPath()).thenReturn("/parent/path");
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE); // Assuming ATTRIBUTE_NODE is not handled
        String result = domNodePointer.asPath();
        assertEquals("/parent/path", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValueWithTextNodeAndNonEmptyString_KwUr0_Znsp0() {
    Node textNode = mock(Node.class); // Using Mockito to mock the Node interface
    when(textNode.getNodeType()).thenReturn(Node.TEXT_NODE);
    DOMNodePointer pointer = new DOMNodePointer(textNode, Locale.getDefault());
    pointer.setValue("New content");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNamespaceResolver_WhenLocalNamespaceResolverIsNull_xRrj0_vjrx0() {
    Node mockNode = mock(Node.class);
    Locale mockLocale = Locale.getDefault();
    DOMNodePointer domNodePointer = new DOMNodePointer(mockNode, mockLocale);
    NamespaceResolver result = domNodePointer.getNamespaceResolver();
    assertNotNull(result, "NamespaceResolver should not be null");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNode_UnhandledNodeTest_ReturnsFalse_cFOx12_LsxO0() {
    Node node = mock(Node.class);
    NodeTest nodeTest = mock(NodeTest.class);
    DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.getDefault());
    assertFalse(domNodePointer.testNode(nodeTest));
}
}