/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;
import java.beans.PropertyDescriptor;
import java.util.HashMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JXPathBasicBeanInfo_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtomicTrue_FHnN0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(JXPathBasicBeanInfo.class, true);
    assertTrue(beanInfo.isAtomic());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDynamicPropertyHandlerClass_hUOy0() {
    Class expectedClass = String.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, expectedClass);
    Class resultClass = beanInfo.getDynamicPropertyHandlerClass();
    assertEquals(expectedClass, resultClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicWhenDynamicPropertyHandlerClassIsNull_YFDt0() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
    assertFalse(beanInfo.isDynamic());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDynamicWhenDynamicPropertyHandlerClassIsNotNull_mUPm1() {
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class, Object.class);
    assertTrue(beanInfo.isDynamic());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithObjectClass_HVkT0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertEquals(0, descriptors.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithNormalClass_wOiF1() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(String.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertTrue(descriptors.length > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithInterface_HzIF2() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(CharSequence.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertTrue(descriptors.length > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithAtomicBoolean_bQov3() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(java.util.concurrent.atomic.AtomicBoolean.class, true);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertTrue(descriptors.length > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithDynamicPropertyHandler_Gpkx4() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(java.util.ArrayList.class, java.util.HashMap.class);
        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        assertTrue(descriptors.length > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAtomicTrue_WPlp0_1() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
    String result = beanInfo.toString();
    assertTrue(result.contains("atomic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAtomicTrue_WPlp0_2() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
    String result = beanInfo.toString();
    assertTrue(result.contains(testClass.getName()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoAdditionalParameters_VcpJ1_1() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
    String result = beanInfo.toString();
    assertFalse(result.contains(", dynamic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoAdditionalParameters_VcpJ1_2() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
    String result = beanInfo.toString();
    assertFalse(result.contains(", atomic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoAdditionalParameters_VcpJ1_3() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
    String result = beanInfo.toString();
    assertTrue(result.contains(testClass.getName()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDynamicPropertyHandler_UFAw2_1() {
    Class testClass = JXPathBasicBeanInfo.class;
    Class dynamicPropertyHandlerClass = PropertyDescriptor.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, dynamicPropertyHandlerClass);
    String result = beanInfo.toString();
    assertTrue(result.contains("dynamic"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDynamicPropertyHandler_UFAw2_2() {
    Class testClass = JXPathBasicBeanInfo.class;
    Class dynamicPropertyHandlerClass = PropertyDescriptor.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, dynamicPropertyHandlerClass);
    String result = beanInfo.toString();
    assertTrue(result.contains(testClass.getName()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAtomicTrue_WPlp0() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, true);
    String result = beanInfo.toString();
    assertTrue(result.contains("atomic"));
    assertTrue(result.contains(testClass.getName()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoAdditionalParameters_VcpJ1() {
    Class testClass = JXPathBasicBeanInfo.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass);
    String result = beanInfo.toString();
    assertFalse(result.contains(", dynamic"));
    assertFalse(result.contains(", atomic"));
    assertTrue(result.contains(testClass.getName()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithDynamicPropertyHandler_UFAw2() {
    Class testClass = JXPathBasicBeanInfo.class;
    Class dynamicPropertyHandlerClass = PropertyDescriptor.class;
    JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(testClass, dynamicPropertyHandlerClass);
    String result = beanInfo.toString();
    assertTrue(result.contains("dynamic"));
    assertTrue(result.contains(testClass.getName()));
}
}