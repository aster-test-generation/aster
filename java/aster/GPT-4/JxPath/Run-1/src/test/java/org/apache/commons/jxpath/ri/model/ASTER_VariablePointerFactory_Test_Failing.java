/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointerFactory_Test_Failing {
@InjectMocks
    private VariablePointerFactory variablePointerFactory;
@Mock
    private NodePointer mockParentNodePointer;
@Mock
    private QName mockQName;
@Mock
    private NodePointer mockNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointer_IxKq0_1() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testNamespace", "testName");
    Object testObject = new Object();
    NodePointer parentNode = new DOMNodePointer(null, Locale.getDefault());
    NodePointer result = factory.createNodePointer(parentNode, qName, testObject);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointer_IxKq0_2() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testNamespace", "testName");
    Object testObject = new Object();
    NodePointer parentNode = new DOMNodePointer(null, Locale.getDefault());
    NodePointer result = factory.createNodePointer(parentNode, qName, testObject);
    assertEquals(qName, result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointer_IxKq0_3() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testNamespace", "testName");
    Object testObject = new Object();
    NodePointer parentNode = new DOMNodePointer(null, Locale.getDefault());
    NodePointer result = factory.createNodePointer(parentNode, qName, testObject);
    assertEquals(testObject, result.getBaseValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateNodePointer_IxKq0() {
    VariablePointerFactory factory = new VariablePointerFactory();
    QName qName = new QName("testNamespace", "testName");
    Object testObject = new Object();
    NodePointer parentNode = new DOMNodePointer(null, Locale.getDefault());
    NodePointer result = factory.createNodePointer(parentNode, qName, testObject);
    assertNotNull(result);
    assertEquals(qName, result.getName());
    assertEquals(testObject, result.getBaseValue());
}
}