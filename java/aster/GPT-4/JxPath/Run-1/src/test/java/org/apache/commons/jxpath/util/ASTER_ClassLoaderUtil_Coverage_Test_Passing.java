/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassLoaderUtil_Coverage_Test_Passing {
    private static Map<String, String> abbreviationMap = new HashMap<>();
    static {
        abbreviationMap.put("int", "I");
        abbreviationMap.put("boolean", "Z");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullAndFindsClass_nehS0() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        when(contextClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullButDoesNotFindClass_TZtf1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(contextClassLoader.loadClass(className)).thenThrow(new ClassNotFoundException());
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderIsNull_GMHj2() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        Thread.currentThread().setContextClassLoader(null);
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_CurrentClassLoaderFindsClass_iBbJ5() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(null);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);
        assertEquals(String.class, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithArrayNotation_QbYH1() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "int[]", true);
        assertEquals(int[].class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithMultiDimensionalArray_YKnZ2() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "int[][]", true);
        assertEquals(int[][].class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonPrimitiveArray_ybCe3() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "java.lang.String[]", true);
        assertEquals(String[].class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithMultiDimensionalNonPrimitiveArray_GMYd4() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "java.lang.String[][]", true);
        assertEquals(String[][].class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithPrimitiveType_tbUp5() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "int", true);
        assertEquals(int.class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonPrimitiveType_bRYp6() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "java.lang.String", true);
        assertEquals(String.class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithPrimitiveAbbreviation_CBwJ7() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "Z", true);
        assertEquals(boolean.class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonExistingClass_qljy8() throws java.lang.ClassNotFoundException {
        try {
            ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "com.nonexistent.FakeClass", true);
            fail("ClassNotFoundException expected");
        } catch (ClassNotFoundException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithNonExistingPrimitiveAbbreviation_XoVx9() throws java.lang.ClassNotFoundException {
        try {
            ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "Q", true);
            fail("ClassNotFoundException expected");
        } catch (ClassNotFoundException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithEmptyClassName_SRXe10() throws java.lang.ClassNotFoundException {
        try {
            ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "", true);
            fail("ClassNotFoundException expected");
        } catch (ClassNotFoundException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithArrayOfClassNotInAbbreviationMap_oNDL11() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass(ClassLoader.getSystemClassLoader(), "java.util.List[]", true);
        assertEquals(java.util.List[].class, clazz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullAndFindsClass_nehS0_1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        when(contextClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullAndFindsClass_nehS0_2() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        when(contextClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertEquals(String.class, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullButDoesNotFindClass_TZtf1_1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(contextClassLoader.loadClass(className)).thenThrow(new ClassNotFoundException());
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderNotNullButDoesNotFindClass_TZtf1_2() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader contextClassLoader = mock(ClassLoader.class);
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(contextClassLoader.loadClass(className)).thenThrow(new ClassNotFoundException());
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(contextClassLoader);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertEquals(String.class, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderIsNull_GMHj2_1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        Thread.currentThread().setContextClassLoader(null);
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ContextClassLoaderIsNull_GMHj2_2() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        Thread.currentThread().setContextClassLoader(null);
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertEquals(String.class, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_CurrentClassLoaderFindsClass_iBbJ5_1() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(null);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_CurrentClassLoaderFindsClass_iBbJ5_2() throws ClassNotFoundException {
        String className = "java.lang.String";
        ClassLoader currentClassLoader = ClassLoaderUtil.class.getClassLoader();
        when(currentClassLoader.loadClass(className)).thenReturn((Class) String.class);
        Thread.currentThread().setContextClassLoader(null);
        Class result = ClassLoaderUtil.getClass(className, true);
        assertEquals(String.class, result);}
}