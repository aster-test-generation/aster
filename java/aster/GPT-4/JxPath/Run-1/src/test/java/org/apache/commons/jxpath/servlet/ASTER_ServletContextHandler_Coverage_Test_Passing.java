/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;
import java.util.Enumeration;
import java.util.HashSet;
import javax.servlet.ServletContext;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServletContextHandler_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_SGNF0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockContext = mock(ServletContext.class);
        when(mockContext.getAttribute("someProperty")).thenReturn("someValue");
        Object result = handler.getProperty(mockContext, "someProperty");
        assertEquals("someValue", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithValidInputs_xgob0() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockContext = mock(ServletContext.class);
        String property = "exampleProperty";
        String value = "exampleValue";
        handler.setProperty(mockContext, property, value);
        verify(mockContext).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyWithNullValue_ahfS1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockContext = mock(ServletContext.class);
        String property = "anotherProperty";
        Object value = null;
        handler.setProperty(mockContext, property, value);
        verify(mockContext).setAttribute(property, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithHttpSessionAndServletContext_vSZN0() {
        ServletContextHandler handler = new ServletContextHandler();
        HttpSessionAndServletContext mockHttpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        ServletContext mockServletContext = mock(ServletContext.class);
        when(mockHttpSessionAndServletContext.getServletContext()).thenReturn(mockServletContext);
        Enumeration<String> attributes = new Vector<String>().elements();
        when(mockServletContext.getAttributeNames()).thenReturn(attributes);
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, mockHttpSessionAndServletContext);
        verify(mockHttpSessionAndServletContext).getServletContext();
        verify(mockServletContext).getAttributeNames();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithServletContext_nuYI1() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockServletContext = mock(ServletContext.class);
        Enumeration<String> attributes = new Vector<String>().elements();
        when(mockServletContext.getAttributeNames()).thenReturn(attributes);
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, mockServletContext);
        verify(mockServletContext).getAttributeNames();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_WithAttributes_JxvO2() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockServletContext = mock(ServletContext.class);
        Vector<String> attributeNames = new Vector<>();
        attributeNames.add("attribute1");
        attributeNames.add("attribute2");
        Enumeration<String> attributes = attributeNames.elements();
        when(mockServletContext.getAttributeNames()).thenReturn(attributes);
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, mockServletContext);
        assert(set.contains("attribute1"));
        assert(set.contains("attribute2"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_EmptyAttributes_axtb3() {
        ServletContextHandler handler = new ServletContextHandler();
        ServletContext mockServletContext = mock(ServletContext.class);
        Enumeration<String> attributes = new Vector<String>().elements();
        when(mockServletContext.getAttributeNames()).thenReturn(attributes);
        HashSet<String> set = new HashSet<>();
        handler.collectPropertyNames(set, mockServletContext);
        assert(set.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_NullBean_woyq4() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        try {
            handler.collectPropertyNames(set, null);
            fail("Should have thrown NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollectPropertyNames_InvalidBeanType_OMXf5() {
        ServletContextHandler handler = new ServletContextHandler();
        HashSet<String> set = new HashSet<>();
        try {
            handler.collectPropertyNames(set, new Object());
            fail("Should have thrown ClassCastException");
        } catch (ClassCastException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNamesInitialHashSetSize_eVIQ0_LwjH0() {
    ServletContextHandler handler = new ServletContextHandler();
    HashSet<String> set = new HashSet<>();
    Object context = new Object(); // Assuming context is just an Object for this test
    handler.collectPropertyNames(set, context);
    int expectedSize = 10; // Example size, replace with actual DEFAULT_PROPERTY_COUNT if known
    assertEquals(expectedSize, set.size(), "HashSet should be initialized with default capacity");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNamesArrayConversion_hOSx2_aFPE0() {
    ServletContextHandler handler = new ServletContextHandler();
    Object context = new Object(); // Assuming context is just an Object for this test
    HashSet<String> propertiesSet = new HashSet<>();
    handler.collectPropertyNames(propertiesSet, context);
    String[] properties = propertiesSet.toArray(new String[0]);
    assertTrue(properties instanceof String[]);
}
}