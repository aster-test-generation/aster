/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.BasicNodeSet;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NodeSetContext_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeSet_ffVZ0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(null, nodeTypeTest);
        BasicNodeSet basicNodeSet = new BasicNodeSet();
        NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, basicNodeSet);
        NodeSet result = nodeSetContext.getNodeSet();
        assertEquals(basicNodeSet, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNextNode_yKsI0() {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        BasicNodeSet mockNodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(mockNamespaceContext, mockNodeSet);
        when(context.setPosition(anyInt())).thenReturn(true);
        boolean result = context.nextNode();
        verify(context).setPosition(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionNotZero_SWfh2() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        BasicNodeSet nodeSet = mock(BasicNodeSet.class);
        NodeSetContext context = new NodeSetContext(parentContext, nodeSet);
        NodePointer expectedNodePointer = mock(NodePointer.class);
        List<NodePointer> pointers = new ArrayList<>();
        pointers.add(null); // Adding a null to simulate no pointer at position 0
        pointers.add(expectedNodePointer); // Expected pointer at position 1
        when(context.setPosition(2)).thenReturn(true);
        when(nodeSet.getPointers()).thenReturn(pointers);
        context.setPosition(1);
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(expectedNodePointer, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSet_FirstCall_ReturnsTrue_njQL0_LWao0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    BasicNodeSet nodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, nodeSet);
    boolean result = nodeSetContext.nextSet();
    assertEquals(true, result, "First call to nextSet should return true");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSet_StartedSetIsTrue_AfterFirstCall_eXJb2_xuuN0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    BasicNodeSet nodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, nodeSet);
    boolean result = nodeSetContext.nextSet(); // first call
    assertTrue(result, "startedSet should be true after first call");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSet_SecondCall_ReturnsFalse_VAXY1_GiqI0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    BasicNodeSet nodeSet = new BasicNodeSet();
    NodeSetContext nodeSetContext = new NodeSetContext(namespaceContext, nodeSet);
    nodeSetContext.nextSet(); // first call
    boolean result = nodeSetContext.nextSet(); // second call
    assertFalse(result);
}
}