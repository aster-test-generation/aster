/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.w3c.dom.Attr;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
@Mock
    private DOMNodePointer mockParent;
@Mock
    private Attr mockAttr;
@Mock
    private NodePointer mockPointer1;
@Mock
    private NodePointer mockPointer2;
@InjectMocks
    private DOMAttributePointer domAttributePointer;
@Mock
    private Attr attr;
@Mock
    private DOMNodePointer parent;
private DOMAttributePointer anotherDomAttributePointer;
@Mock
    private DOMNodePointer mockDOMNodePointer;
@Mock
    private DOMNodePointer domNodePointer;
@Mock
    private DOMAttributePointer domattributepointer;
@Mock
    private DOMNodePointer parentMock;
@Mock
    private Attr attrMock;
DOMNodePointer mockDomNodePointer;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        domAttributePointer = new DOMAttributePointer(mockParent, mockAttr);
        // Mocking the behavior of NodePointer if needed
        when(mockPointer1.getIndex()).thenReturn(1);
        when(mockPointer2.getIndex()).thenReturn(2);
        int result = domAttributePointer.compareChildNodePointers(mockPointer1, mockPointer2);
        // Since the method always returns 0, we assert that
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_sameObject() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        anotherDomAttributePointer = new DOMAttributePointer(parent, attr);
        assertTrue(domAttributePointer.equals(domAttributePointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_equalAttributes() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        anotherDomAttributePointer = new DOMAttributePointer(parent, attr);
        assertTrue(domAttributePointer.equals(anotherDomAttributePointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentAttributes() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        anotherDomAttributePointer = new DOMAttributePointer(parent, attr);
        Attr differentAttr = org.mockito.Mockito.mock(Attr.class);
        DOMAttributePointer differentDomAttributePointer = new DOMAttributePointer(parent, differentAttr);
        assertFalse(domAttributePointer.equals(differentDomAttributePointer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_nullObject() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        anotherDomAttributePointer = new DOMAttributePointer(parent, attr);
        assertFalse(domAttributePointer.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_differentClass() {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        anotherDomAttributePointer = new DOMAttributePointer(parent, attr);
        assertFalse(domAttributePointer.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_withNullNodeTest() {
        domAttributePointer = new DOMAttributePointer(mockParent, mockAttr);
        assertTrue(domAttributePointer.testNode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_withNodeTypeTestMatchingNodeType() {
        domAttributePointer = new DOMAttributePointer(mockParent, mockAttr);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        when(mockNodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(domAttributePointer.testNode(mockNodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_withNodeTypeTestNonMatchingNodeType() {
        domAttributePointer = new DOMAttributePointer(mockParent, mockAttr);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        when(mockNodeTypeTest.getNodeType()).thenReturn(999); // Some non-matching node type
        assertFalse(domAttributePointer.testNode(mockNodeTypeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_withNonNodeTypeTest() {
        domAttributePointer = new DOMAttributePointer(mockParent, mockAttr);
        NodeTest mockNodeTest = mock(NodeTest.class);
        assertFalse(domAttributePointer.testNode(mockNodeTest));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        String newValue = "newValue";
        domAttributePointer.setValue(newValue);
        verify(attr).setValue(newValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Test when attr.getValue() returns a non-empty string
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is false
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        // Test when attr.getValue() returns null
        when(attr.getValue()).thenReturn(null);
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is true
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("", domAttributePointer.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_4() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Test when attr.getValue() returns a non-empty string
        when(attr.getValue()).thenReturn("someValue");
        when(attr.getSpecified()).thenReturn(true);
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is false
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        // Test when attr.getValue() returns null
        when(attr.getValue()).thenReturn(null);
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is true
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("", domAttributePointer.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_1() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        QName expectedQName = new QName("prefix", "localName");
        QName actualQName = domAttributePointer.getName();
        assertEquals(expectedQName.getName(), actualQName.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_2() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        QName expectedQName = new QName("prefix", "localName");
        QName actualQName = domAttributePointer.getName();
        assertEquals(expectedQName.getPrefix(), actualQName.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        domAttributePointer = new DOMAttributePointer(parent, attr);
        String prefix = "testPrefix";
        String expectedNamespaceURI = "http://example.com/test";
        when(attr.getPrefix()).thenReturn(prefix);
        when(parent.getNamespaceURI(prefix)).thenReturn(expectedNamespaceURI);
        String actualNamespaceURI = domAttributePointer.getNamespaceURI();
        assertEquals(expectedNamespaceURI, actualNamespaceURI);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        mockAttr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(mockDOMNodePointer, mockAttr);
        int length = domAttributePointer.getLength();
        assertEquals(1, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        attr = mock(Attr.class);
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        assertEquals(attr, domAttributePointer.getBaseValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        mockDomNodePointer = mock(DOMNodePointer.class);
        mockAttr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(mockDomNodePointer, mockAttr);
        assertTrue(domAttributePointer.isActual());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        mockDOMNodePointer = mock(DOMNodePointer.class);
        mockAttr = mock(Attr.class);
        domAttributePointer = new DOMAttributePointer(mockDOMNodePointer, mockAttr);
        assertTrue(domAttributePointer.isLeaf());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNodeWithNullNodeTest_MDTg0_ehxg0() {
    DOMNodePointer parent = new DOMNodePointer(null, Locale.getDefault(), "id");
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    assertTrue(domAttributePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCollection_iiVX0_LxRc0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    assertFalse(domAttributePointer.isCollection());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImmediateNode_bZDs0_kBQr0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    Object result = domAttributePointer.getImmediateNode();
    assertEquals(attr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_PWyt0_HAoP0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.getDefault();
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    int expectedHashCode = System.identityHashCode(attr);
    int actualHashCode = domAttributePointer.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonEmptyValue_TPoO0_dpQV0() throws Exception {
        javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        org.w3c.dom.Document doc = builder.newDocument();
        org.w3c.dom.Element element = doc.createElement("testElement");
        org.w3c.dom.Attr attr = doc.createAttribute("testAttr");
        attr.setValue("testValue");
        element.setAttributeNode(attr);
        DOMNodePointer parent = new DOMNodePointer((org.w3c.dom.Node) element, null, null);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertEquals("testValue", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_zPmx0_xsRX0_1() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    org.mockito.Mockito.when(attr.getPrefix()).thenReturn("prefix");
    org.mockito.Mockito.when(attr.getLocalName()).thenReturn("localName");
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    QName result = domAttributePointer.getName();
    assertEquals("prefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_zPmx0_xsRX0_2() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    org.mockito.Mockito.when(attr.getPrefix()).thenReturn("prefix");
    org.mockito.Mockito.when(attr.getLocalName()).thenReturn("localName");
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    QName result = domAttributePointer.getName();
    assertEquals("localName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyValueAndSpecified_zteb1_bjrc0() throws Exception {
        javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
        org.w3c.dom.Document doc = builder.newDocument();
        org.w3c.dom.Element element = doc.createElement("testElement");
        org.w3c.dom.Attr attr = doc.createAttribute("testAttr");
        attr.setValue("");
        element.setAttributeNode(attr);
        DOMNodePointer parent = new DOMNodePointer((org.w3c.dom.Node) element, null, null);
        DOMAttributePointer pointer = new DOMAttributePointer(parent, attr);
        assertEquals("", pointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_zitk0_yjus0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    int length = domAttributePointer.getLength();
    assertEquals(1, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBaseValue_RpGM0_akNa0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    Object result = domAttributePointer.getBaseValue();
    assertEquals(attr, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsActual_gjSY0_XohO0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    assertTrue(domAttributePointer.isActual());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsLeaf_MbTG0_lupL0() {
    org.w3c.dom.Node node = org.mockito.Mockito.mock(org.w3c.dom.Node.class);
    Locale locale = Locale.ENGLISH;
    DOMNodePointer parent = new DOMNodePointer(node, locale);
    org.w3c.dom.Attr attr = org.mockito.Mockito.mock(org.w3c.dom.Attr.class);
    DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
    assertTrue(domAttributePointer.isLeaf());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Test when attr.getValue() returns a non-empty string
        when(attr.getValue()).thenReturn("someValue");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("someValue", domAttributePointer.getValue());
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is false
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(false);
        assertNull(domAttributePointer.getValue());
        // Test when attr.getValue() returns null
        when(attr.getValue()).thenReturn(null);
        assertNull(domAttributePointer.getValue());
        // Test when attr.getValue() returns an empty string and attr.getSpecified() is true
        when(attr.getValue()).thenReturn("");
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("", domAttributePointer.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        DOMNodePointer parent = mock(DOMNodePointer.class);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getPrefix()).thenReturn("prefix");
        when(attr.getLocalName()).thenReturn("localName");
        QName expectedQName = new QName("prefix", "localName");
        QName actualQName = domAttributePointer.getName();
        assertEquals(expectedQName.getName(), actualQName.getName());
        assertEquals(expectedQName.getPrefix(), actualQName.getPrefix());
    }
}