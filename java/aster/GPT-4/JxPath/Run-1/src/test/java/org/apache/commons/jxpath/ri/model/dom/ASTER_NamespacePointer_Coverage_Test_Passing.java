/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.apache.commons.jxpath.ri.QName;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NamespacePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeWithNullNodeTest_JUuX0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NamespacePointer namespacePointer = new NamespacePointer(domNodePointer, "prefix");
        boolean result = namespacePointer.testNode(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Mmve0_1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "testId");
        String prefix = "testPrefix";
        NamespacePointer namespacePointer = new NamespacePointer(domNodePointer, prefix);
        QName result = namespacePointer.getName();
        assertEquals("testPrefix", result.getPrefix());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Mmve0_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "testId");
        String prefix = "testPrefix";
        NamespacePointer namespacePointer = new NamespacePointer(domNodePointer, prefix);
        QName result = namespacePointer.getName();
        assertEquals("testPrefix", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNamespaceURIIsNull_QleI0() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        String prefix = "testPrefix";
        when(mockParent.getNamespaceURI(prefix)).thenReturn("http://example.com");
        NamespacePointer namespacePointer = new NamespacePointer(mockParent, prefix);
        String result = namespacePointer.getNamespaceURI();
        assertEquals("http://example.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_WhenNamespaceURIIsNotNull_cevo1() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        String prefix = "testPrefix";
        String initialURI = "http://initial.com";
        when(mockParent.getNamespaceURI(prefix)).thenReturn("http://example.com");
        NamespacePointer namespacePointer = new NamespacePointer(mockParent, prefix, initialURI);
        String result = namespacePointer.getNamespaceURI();
        assertEquals("http://initial.com", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_EnsureParentGetNamespaceURICalled_hdCM2() {
        DOMNodePointer mockParent = mock(DOMNodePointer.class);
        String prefix = "testPrefix";
        when(mockParent.getNamespaceURI(prefix)).thenReturn("http://example.com");
        NamespacePointer namespacePointer = new NamespacePointer(mockParent, prefix);
        namespacePointer.getNamespaceURI();
        verify(mockParent).getNamespaceURI(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_Jkot0() {
        NamespacePointer np = new NamespacePointer(null, "testPrefix");
        String result = np.asPath();
        assertEquals("namespace::testPrefix", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Mmve0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "testId");
        String prefix = "testPrefix";
        NamespacePointer namespacePointer = new NamespacePointer(domNodePointer, prefix);
        QName result = namespacePointer.getName();
        assertEquals("testPrefix", result.getPrefix());
        assertEquals("testPrefix", result.getName());
    }
}