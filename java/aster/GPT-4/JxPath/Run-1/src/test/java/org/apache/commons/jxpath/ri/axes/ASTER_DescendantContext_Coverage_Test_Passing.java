/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;
import java.util.Stack;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Stack;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DescendantContext_Coverage_Test_Passing {
    private NodeIterator nodeIterator;
    private DescendantContext descendantContext;
    private NodeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
    private Stack<NodeIterator> stack;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_SuperResetCalled_ZACQ0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
        descendantContext.reset();
    }
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_StackNotEmptyAndIteratorHasNoNext_KjVP5() {
        stack.push(nodeIterator);
        when(nodeIterator.setPosition(anyInt())).thenReturn(false);
        assertFalse(descendantContext.nextNode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_ReturnsNull_hHGM0_PQgb0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(parentContext, false, nodeTest);
    descendantContext.setPosition(0);
    when(descendantContext.setPosition(1)).thenReturn(false);
    NodePointer result = descendantContext.getCurrentNodePointer();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChildOrderingRequired_rmrs0_XqHh0() {
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    NamespaceContext namespaceContext = new NamespaceContext(null, nodeTest);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTest);
    assertEquals(true, descendantContext.isChildOrderingRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_ReturnsCurrentNodePointer_aiGU1_Svqm0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(parentContext, false, nodeTest);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    when(descendantContext.getCurrentNodePointer()).thenReturn(expectedNodePointer);
    NodePointer result = descendantContext.getCurrentNodePointer();
    assertEquals(expectedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_CompletesWithoutException_flwe2_GiBl0() {
    NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(1));
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(1));
    try {
        descendantContext.reset();
    } catch (Exception e) {
        fail("Reset method should not throw any exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentNodePointer_PositionZeroAndSetPositionTrue_aeEA2_sQwf0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(parentContext, false, nodeTest);
    NodePointer expectedNodePointer = mock(NodePointer.class);
    when(descendantContext.getCurrentNodePointer()).thenReturn(expectedNodePointer);
    when(descendantContext.setPosition(1)).thenReturn(true);
    NodePointer result = descendantContext.getCurrentNodePointer();
    assertEquals(expectedNodePointer, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_NextNodeReturnsFalse_spnj2_SZtg0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    doReturn(false).when(descendantContext).nextNode();
    boolean result = descendantContext.setPosition(4);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ResetCalled_vbiS0_EYuP0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    descendantContext.setPosition(5);
    boolean result = descendantContext.setPosition(3);
    assertFalse(result); // Assuming reset() sets position to a state where nextNode() will fail
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_NoResetNeeded_nqhm1_PGRx0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    when(descendantContext.setPosition(3)).thenReturn(true);
    doReturn(true).when(descendantContext).nextNode();
    boolean result = descendantContext.setPosition(4);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setup_WEaO0_nnBt0() {
    Stack<NamespaceContext> stack = new Stack<>();
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    NamespaceContext parentContext = new NamespaceContext(null, nodeTest);
    SelfContext selfContext = new SelfContext(parentContext, nodeTest);
    DescendantContext descendantContext = new DescendantContext(parentContext, true, nodeTest);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_NextNodeReturnsTrue_Ulcj3_rZYN0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    doReturn(true).when(descendantContext).nextNode();
    boolean result = descendantContext.setPosition(5);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_ExactPositionMatch_bsFu4_KcBz0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    descendantContext.setPosition(5);
    boolean result = descendantContext.setPosition(5);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPosition_PositionGreaterThanCurrent_dIBv5_sHOW0() {
    NamespaceContext namespaceContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
    doReturn(true).when(descendantContext).nextNode();
    boolean result = descendantContext.setPosition(7);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextNode_InitialStartWithNullStack_Wjyn1_dfEC0() {
    NamespaceContext parentContext = mock(NamespaceContext.class);
    NodeTypeTest nodeTest = new NodeTypeTest(1);
    DescendantContext descendantContext = new DescendantContext(parentContext, false, nodeTest);
    when(parentContext.getCurrentNodePointer()).thenReturn(null);
    assertFalse(descendantContext.nextNode());
}
}