/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_pMmy0() throws DecoderException {
        QCodec codec = new QCodec("UTF-8");
        String input = "=?UTF-8?Q?This_is_a_test_string?=";
        String expected = "This is a test string";
        String result = codec.decode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithoutUnderscores_cCbW1() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello World".getBytes();
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(QuotedPrintableCodec.decodeQuotedPrintable(input), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithUnderscores_rehD2() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello_World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(QuotedPrintableCodec.decodeQuotedPrintable(expected), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithOnlyUnderscores_oXSf3() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "____".getBytes();
        byte[] expected = "    ".getBytes();
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(QuotedPrintableCodec.decodeQuotedPrintable(expected), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithMixedCharacters_FzZU4() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "He_llo_Wo_rld".getBytes();
        byte[] expected = "He llo Wo rld".getBytes();
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(QuotedPrintableCodec.decodeQuotedPrintable(expected), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithSpecialCharacters_gcvg5() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello_World_%21".getBytes();
        byte[] expected = "Hello World %21".getBytes();
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(QuotedPrintableCodec.decodeQuotedPrintable(expected), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_eUzg0() {
        QCodec codec = new QCodec();
        String encoding = codec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObjectType_ryEw2() {
        QCodec codec = new QCodec(StandardCharsets.UTF_8);
        Object input = new Integer(123);
        try {
            codec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullInput_SezL0() {
        QCodec codec = new QCodec();
        byte[] result = codec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyArray_AgLC1() {
        QCodec codec = new QCodec();
        byte[] input = new byte[0];
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyArray_vHRv2_1() {
        QCodec codec = new QCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.doEncoding(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyArray_vHRv2_2() {
        QCodec codec = new QCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.doEncoding(input);
        assertNotEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_jGjq1() throws EncoderException {
        QCodec codec = new QCodec("UTF-8");
        String input = "Hello";
        String expected = codec.encode(input); // Assumingnew QCodec().encode(String) is correctly implemented
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedObject_ZUVf2() {
        QCodec codec = new QCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_milZ0() {
        QCodec codec = new QCodec();
        assertFalse(codec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidInput_lLtx0() throws EncoderException {
        QCodec codec = new QCodec("UTF-8");
        String result = codec.encode("Hello World", "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_GFNK0() {
        QCodec codec = new QCodec();
        Charset expectedCharset = Charset.defaultCharset();
        Charset actualCharset = codec.getCharset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullInput_WRnA0() throws EncoderException {
        QCodec codec = new QCodec();
        String result = codec.encodeText(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_xgIG0() {
        QCodec codec = new QCodec();
        String expectedCharset = Charset.defaultCharset().name();
        assertEquals(expectedCharset, codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_NullInput_ReturnsNull_FIrc0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        String result = codec.decodeText(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullInput_fnHH0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String result = qCodec.encodeText(null, StandardCharsets.UTF_8);
        assertNull(result);
    }

    @Test
    public void testDecodeText_MissingPrefixAndPostfix_ThrowsDecoderException_zEpg1_cteg0() {
        QCodec codec = new QCodec();
        assertThrows(DecoderException.class, () -> codec.decodeText("InvalidString"));
    }

    @Test
    public void testDecodeText_MissingEncodingToken_ThrowsDecoderException_bqMT4_IGXE0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec();
        assertThrows(DecoderException.class, () -> {
            codec.decodeText("=?UTF-8?Q?");
        });
    }

    @Test
    public void testDecodeText_IncompleteEncodedContent_ThrowsDecoderException_uZKu7_fKwj0() {
        QCodec codec = new QCodec();
        assertThrows(DecoderException.class, () -> {
            codec.decodeText("=?UTF-8?Q?SGVsbG8gV29ybGQ=");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithSpacesAndEncodeBlanksTrue_TCmw3_mmyn0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(true);
        byte[] input = "hello world".getBytes();
        byte[] result = codec.doEncoding(input);
        for (byte b : result) {
            assertNotEquals(' ', b);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithSpacesAndEncodeBlanksFalse_rmdY4_VjMl0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(false);
        byte[] input = "hello world".getBytes();
        byte[] result = codec.doEncoding(input);
        boolean spaceFound = false;
        for (byte b : result) {
            if (b == ' ') {
                spaceFound = true;
                break;
            }
        }
        assertTrue(spaceFound);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanksTrue_jJnZ0_xvXD0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(true);
        assertTrue(codec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullInput_gFeB0_Bqzp0() {
        QCodec codec = new QCodec();
        byte[] result = null;
        try {
            result = codec.doDecoding(null);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_pQsg0_XvDd0() {
        QCodec codec = new QCodec();
        try {
            assertNull(codec.decode(null));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_jlTI0_wOxV0() {
        QCodec codec = new QCodec();
        try {
            assertNull(codec.encodeText(null, StandardCharsets.UTF_8));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_VFQm0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String input = "Hello World!";
        Charset charset = Charset.forName("UTF-8");
        String expected = "=?UTF-8?Q?Hello_World!?=";
        String result = qCodec.encode(input, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_fvRk0_fid1() throws EncoderException {
        QCodec codec = new QCodec();
        String sourceStr = "Hello World!";
        String expected = "EncodedString"; // Replace "EncodedString" with the expected encoded result
        String result = codec.encode(sourceStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithValidInput_WqcV1_fid1() throws EncoderException {
        QCodec codec = new QCodec("UTF-8");
        String input = "Hello World";
        String expected = "=?UTF-8?Q?Hello World?=";
        String result = codec.encodeText(input, "UTF-8");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithUTF8_XmeJ1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        String expected = "=?" + StandardCharsets.UTF_8 + "?Q?" + StringUtils.newStringUsAscii(qCodec.doEncoding(input.getBytes(StandardCharsets.UTF_8))) + "?=";
        String result = qCodec.encodeText(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyArray_vHRv2() {
        QCodec codec = new QCodec();
        byte[] input = "hello world".getBytes();
        byte[] result = codec.doEncoding(input);
        assertNotNull(result);
        assertNotEquals(input, result);
    }
}