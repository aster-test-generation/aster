/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_XxUN1_3() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x74, 0x65, 0x73, 0x74});
        Object result = hex.encode(buffer);
        assertArrayEquals(new char[]{'7', '4', '6', '5', '7', '3', '7', '4'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_hBmu2_3() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x74, 0x65, 0x73, 0x74};
        Object result = hex.encode(input);
        assertArrayEquals(new char[]{'7', '4', '6', '5', '7', '3', '7', '4'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInputAndOffset_vFbK3_1_fid1() throws DecoderException {
        char[] data = {'1', 'A', '2', 'F', '3', 'C'};
        byte[] out = new byte[4];
        int outOffset = 2;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInputAndOffset_vFbK3_2_fid1() throws DecoderException {
        char[] data = {'1', 'A', '2', 'F', '3', 'C'};
        byte[] out = new byte[4];
        int outOffset = 2;
        int result = Hex.decodeHex(data, out, outOffset);
        assertArrayEquals(new byte[]{0, 0, (byte) 0x1A, (byte) 0x2F}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNonEmptyByteArray_ilDo0_fid1() {
        byte[] data = new byte[]{0x01, 0x0A, 0x1F, 0x7F};
        char[] expected = new char[]{'0', '1', '0', 'A', '1', 'F', '7', 'F'};
        char[] result = Hex.encodeHex(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_XxUN1_2_fid1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x74, 0x65, 0x73, 0x74});
        Object result = hex.encode(buffer);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_hBmu2_2_fid1() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x74, 0x65, 0x73, 0x74};
        Object result = hex.encode(input);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithDirectBuffer_RKxw0_fid1() throws DecoderException {
        Charset charset = StandardCharsets.UTF_8;
        Hex hex = new Hex(charset);
        String hexString = "48656C6C6F"; // Hexadecimal for "Hello"
        ByteBuffer buffer = ByteBuffer.allocateDirect(hexString.length() / 2);
        for (int i = 0; i < hexString.length(); i += 2) {
            int byteValue = Integer.parseInt(hexString.substring(i, i + 2), 16);
            buffer.put((byte) byteValue);
        }
        buffer.flip();
        byte[] decoded = hex.decode(buffer);
        String decodedString = new String(decoded, charset);
        assertEquals("Hello", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDefaultCharset_xPZh0_fid1() {
        Hex hex = new Hex();
        String expected = hex.toString() + "[charsetName=" + Charset.defaultCharset() + "]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_vBqS1_Ggst0() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x48, 0x65, 0x6c, 0x6c, 0x6f}; // Hexadecimal bytes for "Hello"
        String expected = "Hello";
        try {
            String result = new String(hex.decode(input), StandardCharsets.UTF_8);
            assertEquals(expected, result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithValidInputAndOffset_vFbK3() throws DecoderException {
        char[] data = {'1', 'A', '2', 'F', '3', 'C'};
        byte[] out = new byte[4];
        int outOffset = 2;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(3, result);
        assertArrayEquals(new byte[]{0, 0, (byte) 0x1A, (byte) 0x2F}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_XxUN1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x74, 0x65, 0x73, 0x74});
        Object result = hex.encode(buffer);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
        assertArrayEquals(new char[]{'7', '4', '6', '5', '7', '3', '7', '4'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_hBmu2() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x74, 0x65, 0x73, 0x74};
        Object result = hex.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
        assertArrayEquals(new char[]{'7', '4', '6', '5', '7', '3', '7', '4'}, (char[]) result);
    }
}