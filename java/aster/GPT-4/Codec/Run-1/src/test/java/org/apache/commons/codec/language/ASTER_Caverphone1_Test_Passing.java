/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone1_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_kdEG1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("");
        assertEquals("111111", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_UNPT0() throws EncoderException {
        Caverphone1 caverphone = new Caverphone1();
        String input = "example";
        String result = (String) caverphone.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_lynn1() throws EncoderException {
        Caverphone1 caverphone = new Caverphone1();
        try {
            caverphone.encode(new Object());
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to Caverphone encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithRegularInput_kAjO0_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("Coughing");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_HpzZ2_fid1() {
        Caverphone1 caverphone1 = new Caverphone1();
        String result = caverphone1.encode("Rough#123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualWithSimilarStrings_SZxM0_fid1() throws EncoderException {
        Caverphone1 caverphone = new Caverphone1();
        assertFalse(caverphone.isEncodeEqual("example", "exampel"));
    }
}