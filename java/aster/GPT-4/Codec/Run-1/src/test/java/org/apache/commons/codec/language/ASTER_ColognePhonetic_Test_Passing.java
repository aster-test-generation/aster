/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_NullInput_OmRt0() {
        ColognePhonetic cp = new ColognePhonetic();
        assertNull(cp.colognePhonetic(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_EmptyString_vKRf1() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("", cp.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_UpperCaseLetters_SUjJ2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_LowerCaseLetters_THbf3() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_Numbers_suaQ4() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("", cp.colognePhonetic("123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_SpecialCharacters_tLhD5() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("", cp.colognePhonetic("@#$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_MixedCharacters_MnAd6() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("aN"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ConsecutiveDuplicates_kvpS10() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("AAA"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_DifferentCases_ckTa11() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("An"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_SingleCharacter_QqOg17() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("6", cp.colognePhonetic("N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_IgnoreH_oYEK22() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("", cp.colognePhonetic("H"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyE_cNPX3() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("E"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyI_JjqH4() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("I"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyO_dRgq5() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("O"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyU_oVdj6() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("U"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyY_CIFd7() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic("Y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyB_ABvB8() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("1", cp.colognePhonetic("B"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyP_JeCM9() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("1", cp.colognePhonetic("P"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyD_pkJN10() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("2", cp.colognePhonetic("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyT_HdBE11() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("2", cp.colognePhonetic("T"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyF_RbvP12() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("3", cp.colognePhonetic("F"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyV_nUMV13() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("3", cp.colognePhonetic("V"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyW_xiRR14() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("3", cp.colognePhonetic("W"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyG_zeuI15() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("4", cp.colognePhonetic("G"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyK_hgVo16() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("4", cp.colognePhonetic("K"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyQ_RjNq17() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("4", cp.colognePhonetic("Q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyX_MFor18() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("48", cp.colognePhonetic("X"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyS_Fhls19() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("8", cp.colognePhonetic("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyZ_DxdP20() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("8", cp.colognePhonetic("Z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyC_sSvF21() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("8", cp.colognePhonetic("C"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyR_KKqR22() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("7", cp.colognePhonetic("R"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyL_FlRH23() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("5", cp.colognePhonetic("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_OnlyM_EEZw24() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("6", cp.colognePhonetic("M"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualWithSimilarSounds_UYcs0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertTrue(colognePhonetic.isEncodeEqual("Meyer", "Meier"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_FZVc0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Test";
        String expected = "282"; // Assuming the correct phonetic encoding of "Test" is "282"
        String result = (String) colognePhonetic.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_rLaW0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String result = colognePhonetic.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ComplexString_EGGu8_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_PhoneticSimilarity_HSIJ12_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("735", cp.colognePhonetic("Raphael"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_MultipleWords_XnRq15_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("66", cp.colognePhonetic("Na Ne"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_SpecialAndAlphabetic_GztJ20_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("6", cp.colognePhonetic("N#N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_CombinationOfRules_wZtR23_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("UM"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ComplexNames_TpLe24_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("657", cp.colognePhonetic("Mller"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_uiKn1_Geib0_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        Object input = "123"; // Changed from new Integer(123) to "123" to match the expected input type String
        String result = colognePhonetic.encode((String) input); // Explicitly cast input to String
        assertEquals("", result); // Expecting an empty string for non-letter inputs
    }
}