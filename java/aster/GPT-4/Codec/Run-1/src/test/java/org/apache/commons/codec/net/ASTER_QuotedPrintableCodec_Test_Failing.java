/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithSimpleInput_mzzM0() {
        BitSet printable = new BitSet();
        printable.set('a');
        printable.set('b');
        byte[] input = new byte[]{'a', 'b', 'c', '1', '2', '3'};
        byte[] expected = new byte[]{'a', 'b', '=', '6', '3', '1', '2', '3'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input);
        assertArrayEquals(expected, new byte[]{'a', 'b', '=', '3', 'D', '=', '3', '1', '=', '3', '2', '=', '3', '3'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEmptyBytes_Ephs1_1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEmptyBytes_Ephs1_2() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_qGDv2_1() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {100}; // 'd' is not printable as per BitSet setup
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithSimpleInput_mzzM0_fid1() {
        BitSet printable = new BitSet();
        printable.set('a');
        printable.set('b');
        byte[] input = new byte[]{'a', 'b', 'c', '1', '2', '3'};
        byte[] expected = new byte[]{'a', 'b', '=', '6', '3', '1', '2', '3'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyString_bLkF1_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello=2C=20World=21";
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEmptyBytes_Ephs1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertNotNull(result);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_qGDv2() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {100}; // 'd' is not printable as per BitSet setup
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 0); // Should encode 'd' to =64
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintablePrintableStrict_KzDo3() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {'a'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(1, result.length); // Should not encode 'a'
        assertEquals('a', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithSpaceStrict_RSwd6() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = {' '};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(1, result.length); // Space should not be encoded if it's marked as printable
        assertEquals(' ', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNewLineStrict_rCFl8() {
        BitSet printable = new BitSet();
        printable.set('\n');
        byte[] bytes = {'\n'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 0); // New line should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCarriageReturnStrict_UIWu10() {
        BitSet printable = new BitSet();
        printable.set('\r');
        byte[] bytes = {'\r'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 0); // Carriage return should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceStrict_WXxy12() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(100, result.length); // Long sequence of 'a' should not be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBoundaryConditionStrict_BYJm16() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(76, result.length); // Boundary condition check for line length
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNegativeByteValueStrict_qrST18() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 0x85}; // Negative in signed byte representation
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 1); // Should encode negative byte value
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintableStrict_Ilqx2() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {66}; // 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintableStrict_JLtR3() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65}; // 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesAllPrintableStrict_TdoE4() {
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesMixedPrintableStrict_CZNd5() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequencePrintableStrict_TyjH6() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 65); // Fill with 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(100, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NewlineHandlingStrict_XzjI9() {
        BitSet printable = new BitSet();
        printable.set(10); // LF is printable
        byte[] bytes = {10, 10, 10}; // Newlines
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CarriageReturnHandlingStrict_dFdX10() {
        BitSet printable = new BitSet();
        printable.set(13); // CR is printable
        byte[] bytes = {13, 13, 13}; // Carriage returns
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_lqcY8() {
        byte[] input = "test ".getBytes();
        BitSet printable = new BitSet();
        printable.set('t');
        printable.set('e');
        printable.set('s');
        printable.set(' ');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeLongInput_jAMs10() {
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 'a');
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_ReturnsEmpty_mzOX1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleSpace_StrictTrue_dSQz2() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{' '}, true);
        assertArrayEquals(new byte[]{' '}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableCharacter_StrictTrue_BcBd5() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{(byte) 128}, true);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequence_StrictTrue_ThNt6() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_StrictFalse_dUOL9() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'a', ' ', '\t'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(new byte[]{'a', ' ', '\t'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_TabCharacter_StrictTrue_ORka10() {
        BitSet printable = new BitSet();
        printable.set('\t');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{'\t'}, true);
        assertArrayEquals(new byte[]{'\t'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CRLFSequence_StrictFalse_dQlU13() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'C', 'R', '\r', '\n', 'L', 'F'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialChars_StrictTrue_GqVu14() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'%', '=', '?'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContent_StrictFalse_gipD17() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Hello, World!\n".getBytes(StandardCharsets.US_ASCII);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonAsciiCharacters_StrictFalse_Xhtm19() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Caf ".getBytes(StandardCharsets.UTF_8);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeLongInput_jKUC8() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeEndWhitespace_FCvZ13() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = {'a', ' '};
        byte[] expected = {'a', '=', '2', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeEndTab_EGKM14() {
        BitSet printable = new BitSet();
        printable.set('\t');
        byte[] bytes = {'a', '\t'};
        byte[] expected = {'a', '=', '0', '9'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeNewLine_RFhi16() {
        BitSet printable = new BitSet();
        printable.set('\n');
        byte[] bytes = {'a', '\n'};
        byte[] expected = {'a', '=', '0', 'A'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeCarriageReturn_jfTJ18() {
        BitSet printable = new BitSet();
        printable.set('\r');
        byte[] bytes = {'a', '\r'};
        byte[] expected = {'a', '=', '0', 'D'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyByteArray_LZJO0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = "Hello World!".getBytes(StandardCharsets.UTF_8);
        byte[] encoded = codec.encode(input);
        assertNotNull(encoded);
        assertNotEquals(new String(input, StandardCharsets.UTF_8), new String(encoded, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_Xada0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World!";
        String expected = "Hello=20World!";
        String result = codec.encode(sourceStr);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUtf8Charset_FWqh0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        String input = "Hello, world!";
        String expectedOutput = "Hello=2C world=21"; // Assuming the correct output for the sake of example
        String result = codec.encode(input, "UTF-8");
        assertEquals(expectedOutput, result);
    }
}