/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_NjOL0() {
        byte[] keyBytes = "password".getBytes();
        String result = Crypt.crypt(keyBytes, null);
        assertEquals(Sha2Crypt.sha512Crypt(keyBytes), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSHA512Salt_yGiV1() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$6$saltvalue";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Sha2Crypt.sha512Crypt(keyBytes, salt), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSHA256Salt_rwrK2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$saltvalue";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Sha2Crypt.sha256Crypt(keyBytes, salt), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMD5Salt_YJjA3() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$1$saltvalue";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(Md5Crypt.md5Crypt(keyBytes, salt), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithUnknownSalt_kdFt4() {
        byte[] keyBytes = "password".getBytes();
        String salt = "some_unknown_salt";
        String result = Crypt.crypt(keyBytes, salt);
        assertEquals(UnixCrypt.crypt(keyBytes, salt), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKeyBytes_wimB0() {
        String key = null;
        String result = Crypt.crypt(key);
        assertNull("Expected null result when key is null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullKeyBytes_wimB0_fid2() {
        byte[] keyBytes = null;
        String result = Crypt.crypt(keyBytes);
        assertNull("Expected null result when keyBytes is null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNull_FJGy0_OxAC0_fid2() {
        String result = Crypt.crypt((String) null);
        assertNull(result);
    }
}