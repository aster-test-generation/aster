/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullInput_IsUh0() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        byte[] input = null;
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithValidInput_jTuB1() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] input = "SGVsbG8gV29ybGQ=".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "Hello World".getBytes(StandardCharsets.UTF_8);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_NCAp0() {
        BCodec codec = new BCodec();
        String encoding = codec.getEncoding();
        assertEquals("B", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingTrue_YuLE0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingFalse_TcJC1() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedType_SctH2() {
        BCodec codec = new BCodec();
        try {
            codec.decode(new Integer(123));
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be decoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonNullInput_tfFQ0() {
        BCodec codec = new BCodec();
        byte[] input = "test string".getBytes();
        byte[] expected = Base64.encodeBase64(input);
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullInput_WsHy1() {
        BCodec codec = new BCodec();
        byte[] result = codec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_CJFI2() {
        BCodec codec = new BCodec();
        Object input = new Object();
        assertThrows(EncoderException.class, () -> codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_kuJJ0() throws EncoderException {
        Charset charset = StandardCharsets.UTF_8;
        BCodec codec = new BCodec(charset);
        String input = "Hello World";
        String expectedOutput = "SGVsbG8gV29ybGQ="; // Assuming Base64 encoding for demonstration
        String result = codec.encode(input, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_HAaT0() {
        BCodec codec = new BCodec();
        Charset expectedCharset = Charset.defaultCharset();
        Charset actualCharset = codec.getCharset();
        assertEquals(expectedCharset, actualCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullInput_Qqot0() throws EncoderException {
        BCodec codec = new BCodec();
        String result = codec.encodeText(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithValidInput_JOYG1() throws EncoderException {
        BCodec codec = new BCodec();
        String input = "Hello World";
        String charsetName = "UTF-8";
        String expected = new String(input.getBytes(Charset.forName(charsetName)), Charset.forName(charsetName));
        String result = codec.encodeText(input, charsetName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetUsingDefaultConstructor_iAuW0() {
        BCodec codec = new BCodec();
        String expectedCharset = Charset.defaultCharset().name();
        String actualCharset = codec.getDefaultCharset();
        assertEquals(expectedCharset, actualCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithNullInput_exrz0() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec();
        String result = codec.decodeText(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithValidInput_FAYG6() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec();
        String encodedText = "=?UTF-8?Q?SGVsbG8=?=";
        String expected = "This codec cannot decode Q encoded content";
        try {
            codec.decodeText(encodedText);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals(expected, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullInput_RAUq0() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String input = "Hello World";
        String expected = "=?UTF-8?B?SGVsbG8gV29ybGQ=?=";
        String result = codec.encodeText(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullInput_sdKd1() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String result = codec.encodeText(null, StandardCharsets.UTF_8);
        assertNull(result);
    }

    @Test
    public void testDecodeTextWithoutCharsetToken_NEMn2_xQCZ0() throws DecoderException, UnsupportedEncodingException {
        BCodec codec = new BCodec();
        assertThrows(DecoderException.class, () -> {
            codec.decodeText("=?=Encoding?Q?EncodedText?=");
        });
    }

    @Test
    public void testDecodeTextWithEmptyCharset_EqOp3_Heoj0() {
        BCodec codec = new BCodec();
        assertThrows(DecoderException.class, () -> {
            codec.decodeText("=?=?Q?EncodedText?=");
        });
    }

    @Test
    public void testDecodeTextWithoutEncodingToken_XGto4_UWyH0() {
        BCodec codec = new BCodec();
        assertThrows(DecoderException.class, () -> {
            codec.decodeText("=?UTF-8?=EncodedText?=");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullValue_tnes0_bFVl0() {
        BCodec codec = new BCodec();
        Object result = null;
        try {
            result = codec.decode(null);
        } catch (DecoderException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_IpzQ0_rKCi0() {
        BCodec codec = new BCodec();
        try {
            Object result = codec.encodeText(null, StandardCharsets.UTF_8);
            assertNull(result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_EAzy1_MCRf0() {
        BCodec codec = new BCodec();
        String input = "testString";
        try {
            String result = codec.encodeText(input, StandardCharsets.UTF_8);
            assertEquals("=?UTF-8?B?dGVzdFN0cmluZw==?=", result); // Replace "=?UTF-8?B?dGVzdFN0cmluZw==?=" with the actual expected encoded string
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_SOkZ0_vDBz0() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String input = "Hello World";
        String expected = "=?UTF-8?B?SGVsbG8gV29ybGQ=?="; // Assuming base64 encoding for demonstration
        try {
            String result = codec.encodeText(input, StandardCharsets.UTF_8);
            assertEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }
}