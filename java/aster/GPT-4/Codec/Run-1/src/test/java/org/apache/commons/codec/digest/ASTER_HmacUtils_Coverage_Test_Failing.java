/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Failing {
    private HmacUtils hmacUtils;
    private static final int STREAM_BUFFER_LENGTH = 1024;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_DmEt0_KBmC0_fid2() throws IOException, DecoderException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        byte[] expectedOutput = new byte[]{ /* precomputed HMAC SHA-1 result bytes here */ };
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String resultHex = hmacUtils.hmacHex(buffer);
        byte[] result = Hex.decodeHex(resultHex);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ZmxX0_DKyZ0_fid2() throws IOException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String expectedOutputHex = "/* some expected HMAC hex string here */";
        String resultHex = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutputHex, resultHex);
    }
}