/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguages_Xqkj2_1() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>(Arrays.asList("French", "Spanish"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguages_Xqkj2_2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>(Arrays.asList("French", "Spanish"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithComplexLanguageSet_VMKs9_1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English", "French", "Spanish", "German"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithComplexLanguageSet_VMKs9_2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English", "French", "Spanish", "German"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapInvalidData_qBGs1_1() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.RULES, "unknown");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguages_Xqkj2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>(Arrays.asList("French", "Spanish"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithComplexLanguageSet_VMKs9() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English", "French", "Spanish", "German"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapInvalidData_qBGs1() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.RULES, "unknown");
        });
        assertTrue(exception.getMessage().contains("No rules found for"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyLanguageSet_cdfc0_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(Collections.emptySet());
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNullLanguageSet_Uwzb4_fid2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = null;
        try {
            Rule.getInstanceMap(nameType, ruleType, languageSet);
            fail("Expected a NullPointerException to be thrown");
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAllNullParameters_mYBG7_fid2() {
        NameType nameType = null;
        RuleType ruleType = null;
        LanguageSet languageSet = null;
        try {
            Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, ruleType, languageSet);
            fail("Expected an exception to be thrown");
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }
}