/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_uyfs1() throws EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String testString = "Hello";
        Object result = colognePhonetic.encode(testString);
        assertNotNull(result);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_uyfs1_1() throws EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String testString = "Hello";
        Object result = colognePhonetic.encode(testString);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_uyfs1_2() throws EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String testString = "Hello";
        Object result = colognePhonetic.encode(testString);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautA_doKB0_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("pfel"); //  -> A
        assertEquals("APFEL", "APFEL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautU_LKSY1_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("ber"); //  -> U
        assertEquals("UBER", "UBER", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautO_AFTX2_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("l"); //  -> O
        assertEquals("OL", "OL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithMultipleUmlauts_OQdO3_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("Fe l ber"); //  -> A,  -> O,  -> U
        assertEquals("FASSE OL UBER", "FASSE OL UBER", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautAInSentence_AeZd4_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("Das groe rgernis"); //  -> A
        assertEquals("DAS GROSE ARGERNIS", "DAS GROSE ARGERNIS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautUInMixedText_kpMb5_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("Blten und Grn"); //  -> U
        assertEquals("BLUTEN UND GRUN", "BLUTEN UND GRUN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithUmlautOInComplexWords_Fkhy6_fid2() {
        ColognePhonetic cp = new ColognePhonetic();
        String result = cp.colognePhonetic("Knig dipus"); //  -> O
        assertEquals("KONIG ODIPUS", "KONIG ODIPUS", result);
    }
}