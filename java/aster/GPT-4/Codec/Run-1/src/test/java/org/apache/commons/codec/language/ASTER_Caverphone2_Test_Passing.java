/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualWithSimilarStrings_zTgH0() throws EncoderException {
        Caverphone2 caverphone2 = new Caverphone2();
        assertTrue(caverphone2.isEncodeEqual("encode", "encode"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_gotu0() throws EncoderException {
        Caverphone2 caverphone2 = new Caverphone2();
        String input = "example";
        Object result = caverphone2.encode(input);
        assertTrue(result instanceof String);
    }

    @Test
    public void testEncodeWithInvalidType_iMxN1_stSe0() {
        Caverphone2 caverphone2 = new Caverphone2();
        Object input = new Object();
        assertThrows(EncoderException.class, () -> caverphone2.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithRegularInput_gAjG0_fid1() {
        Caverphone2 caverphone2 = new Caverphone2();
        String result = caverphone2.encode("Wellington");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEdgeCaseInput_GyBY1_fid1() {
        Caverphone2 caverphone2 = new Caverphone2();
        String result = caverphone2.encode("Cqciough");
        assertEquals("KSA1111111", result);
    }
}