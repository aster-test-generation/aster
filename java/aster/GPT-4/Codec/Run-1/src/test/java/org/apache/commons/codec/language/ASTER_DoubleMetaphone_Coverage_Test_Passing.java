/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_EDjU1() throws EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "example";
        String expectedOutput = "AKSM"; // This should be the expected encoded string
        assertEquals(expectedOutput, doubleMetaphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverUncoveredLine_rZFz0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "ACQK";
        String expected = "AKK"; // Expected primary encoding result
        assertEquals(expected, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCNotIEFollowingACH_XxEk0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Bachm";
        String expected = "PKM";  // Assuming 'P' and 'K' encoding for 'B' and 'C', 'M' for 'M'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCIEFollowingBacher_rout1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Bacherie";
        String expected = "PKR";  // Assuming 'P' for 'B', 'K' for 'C', 'R' for 'R'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverUncoveredLine_EzIa0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Acq";
        String expected = "AK";  // Assuming 'C' followed by 'q' should result in 'K' and 'q' is ignored
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverUncoveredLine_TnJi0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "AcL";
        String expected = "AKL";  // Assuming the logic appends 'K' for 'C' and then just increments index
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVANPrefix_ehPn0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "VAN Helsing";
        String expected = "FNLS"; // Assuming 'VAN ' is treated as silent or special case
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSCHPrefix_Ayun1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SCHmidt";
        String expected = "XMT"; // Assuming 'SCH' is treated as 'X'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHFollowedByT_BXYF2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Orchestra";
        String expected = "ARKS"; // Assuming 'CH' followed by 'T' is treated as 'K'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAccident_mcCk0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Accident", false);
        assertEquals("AKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSucceed_XyLt1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Succeed", false);
        assertEquals("SKST", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverUncoveredLine_rVdK0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "ACB";
        String expected = "AKP"; // Assuming the rest of the code appends 'P' after 'C' handling
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_CQ_NotFollowedByCEorCI_BcOe0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Acq";
        String expected = "AK";  // Expect 'K' after 'CQ' and not followed by 'CE' or 'CI'
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionC0WithCNotIE_veKA0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Baccher";
        String expected = "PXR";  // 'B' -> 'P', 'C' -> 'K' (from conditionC0), 'H' skipped, 'ER' -> 'R'
        String result = dm.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConditionC0WithMacher_ZFMA1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Macher";
        String expected = "MKR";  // 'M' -> 'M', 'C' -> 'K' (from conditionC0), 'H' skipped, 'ER' -> 'R'
        String result = dm.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneConditionM0Coverage_qZXx0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Columb";
        String expected = "KLM";  // Assuming the rest of the methods like handleL, handleM etc., are implemented correctly
        input = "Columber";
        expected = "KLMR";  // Assuming the rest of the methods like handleL, handleM, handleR etc., are implemented correctly
        assertEquals(expected, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionNotContainsCEorCI_fUin0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Acq", false);
        assertEquals("AK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMC_ufzX0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHale";
        String expected = "MKL"; // Assuming 'K' is appended for 'MC' and 'L' for 'L'
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCH_eGil1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Michael";
        String expected = "MKL"; // Assuming 'K' is appended for 'CH' and 'L' for 'L'
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMCAtStart_kCtf0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHale";
        String expected = "MKL";  // Assuming the logic for 'H' and 'L' is handled correctly in the respective methods
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHAtStart_vjef1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Charis";
        String expected = "KRS";  // Assuming the logic for 'A', 'R', 'I', 'S' is handled correctly in the respective methods
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleR_NotSlavoGermanic_IE_Not_ME_MA_RVLD0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "BRIE";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("PR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVANPrefix_vDyU0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "VAN Thomason";
        String expected = "FNTM";  // Assuming 'VAN ' triggers special handling for 'TH'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSCHPrefix_unMJ1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SCHmidt";
        String expected = "XMT";  // Assuming 'SCH' triggers special handling for 'S'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithXEndingInAUOrOU_iOIA0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("Breaux", false);
        assertEquals("PR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_WithNonVowelAndNotW_csDE0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Schb"; // 'b' is not a vowel and not 'W'
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("XP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_WithFollowingIEY_RklN1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Scia"; // 'I' follows SC
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_WithSKAppend_jiPE2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Scl"; // No specific conditions met for 'H' or 'I', 'E', 'Y' after SC
        boolean alternate = false;
        String result = dm.doubleMetaphone(value, alternate);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCZAndWITZ_yGzr0_1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String inputCZ = "CZech";
        String inputWITZ = "WITZman";
        String resultCZ = dm.doubleMetaphone(inputCZ, false);
        String resultWITZ = dm.doubleMetaphone(inputWITZ, false);
        assertNotNull("Result should not be null when processing 'CZ'", resultCZ);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCZAndWITZ_yGzr0_2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String inputCZ = "CZech";
        String inputWITZ = "WITZman";
        String resultCZ = dm.doubleMetaphone(inputCZ, false);
        String resultWITZ = dm.doubleMetaphone(inputWITZ, false);
        assertNotNull("Result should not be null when processing 'WITZ'", resultWITZ);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZFollowedByZOZIZA_nDCT0_1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String resultZo = dm.doubleMetaphone("Zo", false);
        String resultZi = dm.doubleMetaphone("Zi", false);
        String resultZa = dm.doubleMetaphone("Za", false);
        assertEquals("S", resultZo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZFollowedByZOZIZA_nDCT0_2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String resultZo = dm.doubleMetaphone("Zo", false);
        String resultZi = dm.doubleMetaphone("Zi", false);
        String resultZa = dm.doubleMetaphone("Za", false);
        assertEquals("S", resultZi);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZFollowedByZOZIZA_nDCT0_3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String resultZo = dm.doubleMetaphone("Zo", false);
        String resultZi = dm.doubleMetaphone("Zi", false);
        String resultZa = dm.doubleMetaphone("Za", false);
        assertEquals("S", resultZa);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithWR_pkVP0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "wrestle";
        String expected = "RSTL"; // Assuming 'R' is appended and 'W' is skipped
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithWH_TpZn1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "whale";
        String expected = "AL"; // Assuming 'A' is appended and 'W' is skipped
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_EndOfWordWithVowelBefore_rJyc2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "craw";
        String expected = "KR"; // Assuming 'F' is appended as an alternate at the end
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_NotAtStartOrSpecialCondition_ySAs3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "answer";
        String expected = "ANSR"; // Assuming normal processing without special 'W' handling
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithEWSKI_qhin4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Kaprewski";
        String expected = "KPRS"; // Assuming 'F' is appended as an alternate for 'EWSKI'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithXAppend_JWPY1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Shack";
        assertEquals("XK", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSioSia_TCQd2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sio";
        assertEquals("S", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSioSiaSlavoGermanic_uxyn3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sio";
        assertEquals("X", dm.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSian_Wfdn4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sian";
        assertEquals("SN", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithFrenchEnding_rTkY6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Artrois";
        assertEquals("ARTR", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithFrenchEndingAlternate_otcr7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Artrois";
        assertEquals("ARTR", dm.doubleMetaphone(value, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithNormalS_UndK8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Smith";
        assertEquals("SM0", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_NotVowelBeforeGH_hmpv0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Bgh", false);
        assertEquals("PK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHAtStart_Yqvs1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Ghi", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHNotAtStart_eMCY2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("AGH", false);
        assertEquals("AK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithBHD_cwnn3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("ABHGH", false);
        assertEquals("APK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithUAndCGLRT_ftvu5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Cough", false);
        assertEquals("KF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithI_gInm7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("GHI", false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithBD_DwTW8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("BDGH", false);
        assertEquals("PTK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithB_aZFm9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("BGH", false);
        assertEquals("PK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_WithD_yOzS10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("DGH", false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_ShWithoutGermanic_trgs1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Shash";
        assertEquals("XX", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_RegularCase_pSLH8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Sister";
        assertEquals("SSTR", dm.doubleMetaphone(value, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JoseNotAtStart_YvZA1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Maria Jose", false);
        assertEquals("MRJS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_VowelBeforeJNotSlavoGermanic_EdYD2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Tajo", false);
        assertEquals("TJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JAtEnd_jUnt3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Marj", false);
        assertEquals("MRJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_NotFollowingSpecialChars_jxOi4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Taj Mahal", false);
        assertEquals("TJMH", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_NotPrecededBySpecialChars_Dpyg5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Ajay", false);
        assertEquals("AJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_DoubleJ_qzEb6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Ajjay", false);
        assertEquals("AJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JoseAtStart_CVKM7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Jose", false);
        assertEquals("HS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JoseNotAtStartAndNotSlavoGermanic_iclk8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Tajose", false);
        assertEquals("TJS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JAtEndOfInput_oqpI9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Raj", false);
        assertEquals("RJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJ_JFollowedByJ_yZrV10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Rajj", false);
        assertEquals("RJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_KN_N_Case_QTqJ0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Kna", false);
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_N_KN_Case_yQbM1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gnome", false);
        assertEquals("NM", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_KL_L_Case_OmjJ2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Glider", false);
        assertEquals("KLTR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_GY_Case_adeq3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gyro", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Germanic_K_Case_TYTc4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Vanger", false);
        assertEquals("FNKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_IER_J_Case_xZjc5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Pier", false);
        assertEquals("P", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_ET_K_Case_EYQN6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Budget", false);
        assertEquals("PJT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_VAN_K_Case_vnWx7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Vanget", false);
        assertEquals("FNKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_SCH_K_Case_aVsi8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Schmidt", false);
        assertEquals("XMT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Y_J_Case_UauL9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gypsy", false);
        assertEquals("KPS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_E_I_Case_BNIz10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gel", false);
        assertEquals("KL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_RGY_OGY_Case_AhIS11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Borgy", false);
        assertEquals("PRJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_EY_Case_qgNU12() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Grey", false);
        assertEquals("KR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Y_NotSlavoGermanic_Case_eglx13() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gyrate", false);
        assertEquals("KRT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_LI_NotSlavoGermanic_Case_OiQR14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gelignite", false);
        assertEquals("KLNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_GN_VowelAtStart_NotSlavoGermanic_QVuF0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Agnostic", false);
        assertEquals("AKNS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_GLI_NotSlavoGermanic_uzDl2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Agli", false);
        assertEquals("AKL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_GY_NotDangerRangerManger_NotEI_NotRGYOGY_CaKH3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Margy", false);
        assertEquals("MRJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Germanic_VAN_Vzkw4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Vangetti", false);
        assertEquals("FNKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Germanic_VON_AAGh5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Vongetti", false);
        assertEquals("FNKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Germanic_SCH_gQur6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Schgetti", false);
        assertEquals("XKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_ET_LDLr7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Getto", false);
        assertEquals("KT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_IER_XZXB8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gier", false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_NotE_NotI_NotRGY_NotOGY_WBLb9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Magy", false);
        assertEquals("MK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Germanic_NotIER_xkdV10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Vang", false);
        assertEquals("FNK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_NotGermanic_NotIER_VeOd11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Ging", false);
        assertEquals("KNK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_NotGermanic_NotIER_ET_Vbzi14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Get", false);
        assertEquals("KT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneConditionM0Coverage_qZXx0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Columb";
        String expected = "KLM";  // Assuming the rest of the methods like handleL, handleM etc., are implemented correctly
        assertEquals(expected, doubleMetaphone.doubleMetaphone(input, false));
        input = "Columber";
        expected = "KLMR";  // Assuming the rest of the methods like handleL, handleM, handleR etc., are implemented correctly
        assertEquals(expected, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCZAndWITZ_yGzr0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String inputCZ = "CZech";
        String inputWITZ = "WITZman";
        String resultCZ = dm.doubleMetaphone(inputCZ, false);
        String resultWITZ = dm.doubleMetaphone(inputWITZ, false);
        assertNotNull("Result should not be null when processing 'CZ'", resultCZ);
        assertNotNull("Result should not be null when processing 'WITZ'", resultWITZ);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithZFollowedByZOZIZA_nDCT0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String resultZo = dm.doubleMetaphone("Zo", false);
        assertEquals("S", resultZo);
        String resultZi = dm.doubleMetaphone("Zi", false);
        assertEquals("S", resultZi);
        String resultZa = dm.doubleMetaphone("Za", false);
        assertEquals("S", resultZa);
    }
}