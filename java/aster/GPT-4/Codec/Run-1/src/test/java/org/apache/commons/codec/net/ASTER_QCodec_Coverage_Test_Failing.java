/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_DbZG0() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        assertNull("Decoding null should return null", codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringInput_wWdU1() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        try {
            String testString = "Hello, World!";
            assertEquals("Decoding string should return decoded string", testString, codec.decode(testString));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown for String input");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullStringInput_zDIA3() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        try {
            String testString = null;
            assertNull("Decoding null String should return null", codec.decode(testString));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown for null String input");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHandlesUnsupportedEncodingException_yaRd1_zyFS0() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec("UnsupportedEncoding");
        try {
            codec.decode("test input");
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Unsupported Encoding", e.getMessage());
            assertTrue(e.getCause() instanceof UnsupportedEncodingException);
        }
    }
}