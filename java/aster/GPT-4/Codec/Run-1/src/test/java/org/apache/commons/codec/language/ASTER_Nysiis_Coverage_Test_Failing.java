/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Nysiis_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToG_vcDR0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("G", nysiis.nysiis("Quincy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKNToNN_aEND2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NN", nysiis.nysiis("Kn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSSS_NIGR3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSS", nysiis.nysiis("Sch"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodePToFF_SZov4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FF", nysiis.nysiis("Ph"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWithNonVowelNext_pyjU6() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Hc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeZToS_qCYh8() {
        Nysiis nysiis = new Nysiis();
        assertEquals("S", nysiis.nysiis("Z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeMToN_gHrP9() {
        Nysiis nysiis = new Nysiis();
        assertEquals("N", nysiis.nysiis("M"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKtoNN_tFWj1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NN", nysiis.nysiis("Knack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKtoC_hSXi2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Kite"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHtoSSS_lbYC3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSS", nysiis.nysiis("School"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodePHtoFF_kYNG4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FF", nysiis.nysiis("Phantom"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWithNonVowelPrev_Fofv5() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Char"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWithNonVowelNext_tdQt6() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Ache"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeWWithVowelPrev_BBIL7() {
        Nysiis nysiis = new Nysiis();
        assertEquals("A", nysiis.nysiis("Caw"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeWWithNonVowelPrev_erdg8() {
        Nysiis nysiis = new Nysiis();
        assertEquals("W", nysiis.nysiis("Tweak"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeRemainingWithMultipleRules_PIBM9_fid2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSSFF", nysiis.nysiis("SchwartzPh"));
    }
}