/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case1_mYXu0() {
        byte[] data = new byte[16]; // exactly one block, no tail
        data[15] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 16, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case2_QUVG1() {
        byte[] data = new byte[17]; // one block plus one extra byte
        data[16] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 17, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 17, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case3_FySJ2() {
        byte[] data = new byte[18]; // one block plus two extra bytes
        data[17] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 18, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 18, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case4_kAje3() {
        byte[] data = new byte[19]; // one block plus three extra bytes
        data[18] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 19, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 19, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case5_ORPt4() {
        byte[] data = new byte[20]; // one block plus four extra bytes
        data[19] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 20, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 20, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case6_rEKa5() {
        byte[] data = new byte[21]; // one block plus five extra bytes
        data[20] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 21, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 21, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case7_TeSL6() {
        byte[] data = new byte[22]; // one block plus six extra bytes
        data[21] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 22, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 22, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case8_yJHC7() {
        byte[] data = new byte[23]; // one block plus seven extra bytes
        data[22] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 23, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 23, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case9_BTsR8() {
        byte[] data = new byte[24]; // one block plus eight extra bytes
        data[23] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 24, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 24, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case10_aNpo9() {
        byte[] data = new byte[25]; // one block plus nine extra bytes
        data[24] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 25, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 25, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case11_KHpx10() {
        byte[] data = new byte[26]; // one block plus ten extra bytes
        data[25] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 26, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 26, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case12_ZhiO11() {
        byte[] data = new byte[27]; // one block plus eleven extra bytes
        data[26] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 27, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 27, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case13_LCon12() {
        byte[] data = new byte[28]; // one block plus twelve extra bytes
        data[27] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 28, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 28, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case14_pbLv13() {
        byte[] data = new byte[29]; // one block plus thirteen extra bytes
        data[28] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 29, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 29, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case15_XkMv14() {
        byte[] data = new byte[30]; // one block plus fourteen extra bytes
        data[29] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 30, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 30, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case16_uVHH15() {
        byte[] data = new byte[31]; // one block plus fifteen extra bytes
        data[30] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 31, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 31, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case17_NiNs16() {
        byte[] data = new byte[32]; // two full blocks, no tail
        data[31] = (byte) 0xFF;
        long[] expected = MurmurHash3.hash128x64(data, 0, 32, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, 32, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case1_rAJR0() {
        byte[] data = new byte[9];
        data[8] = 1; // to cover k2 ^= data[index + 8] & 0xff;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case2_oKgO1() {
        byte[] data = new byte[10];
        data[9] = 1; // to cover k2 ^= ((long) data[index + 9] & 0xff) << 8;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case3_BTLW2() {
        byte[] data = new byte[11];
        data[10] = 1; // to cover k2 ^= ((long) data[index + 10] & 0xff) << 16;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case4_BIPF3() {
        byte[] data = new byte[12];
        data[11] = 1; // to cover k2 ^= ((long) data[index + 11] & 0xff) << 24;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case5_Hchs4() {
        byte[] data = new byte[13];
        data[12] = 1; // to cover k2 ^= ((long) data[index + 12] & 0xff) << 32;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case6_gOEB5() {
        byte[] data = new byte[14];
        data[13] = 1; // to cover k2 ^= ((long) data[index + 13] & 0xff) << 40;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case7_itpH6() {
        byte[] data = new byte[15];
        data[14] = 1; // to cover k2 ^= ((long) data[index + 14] & 0xff) << 48;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case8_WQRJ7() {
        byte[] data = new byte[16];
        data[15] = 1; // to cover k2 *= C2; k2 = Long.rotateLeft(k2, R3); k2 *= C1; h2 ^= k2;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case9_TQnq8() {
        byte[] data = new byte[1];
        data[0] = 1; // to cover k1 ^= data[index] & 0xff;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case10_bjet9() {
        byte[] data = new byte[2];
        data[1] = 1; // to cover k1 ^= ((long) data[index + 1] & 0xff) << 8;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case11_hozX10() {
        byte[] data = new byte[3];
        data[2] = 1; // to cover k1 ^= ((long) data[index + 2] & 0xff) << 16;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case12_bWWb11() {
        byte[] data = new byte[4];
        data[3] = 1; // to cover k1 ^= ((long) data[index + 3] & 0xff) << 24;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case13_lFXT12() {
        byte[] data = new byte[5];
        data[4] = 1; // to cover k1 ^= ((long) data[index + 4] & 0xff) << 32;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case14_VKHC13() {
        byte[] data = new byte[6];
        data[5] = 1; // to cover k1 ^= ((long) data[index + 5] & 0xff) << 40;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case15_CjVv14() {
        byte[] data = new byte[7];
        data[6] = 1; // to cover k1 ^= ((long) data[index + 6] & 0xff) << 48;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case16_iVRm15() {
        byte[] data = new byte[8];
        data[7] = 1; // to cover k1 ^= ((long) data[index + 7] & 0xff) << 56;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case17_mmDX16() {
        byte[] data = new byte[17];
        data[16] = 1; // to cover k1 *= C1; k1 = Long.rotateLeft(k1, R1); k1 *= C2; h1 ^= k1;
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_case18_Hydb17() {
        byte[] data = new byte[18];
        data[17] = 1; // to cover the switch statement and all cases within it
        long[] expected = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertArrayEquals(expected, MurmurHash3.hash128x64(data, 0, data.length, 0));
    }
}