/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_kwsK1_2_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "testString".getBytes();
        Object result = codec.encode(input);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_eFVw5_2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        Object result = codec.encode(input);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNonNullUrlSafe_jfwr1() {
        BitSet urlSafe = new BitSet(256);
        urlSafe.set((int) ' ');
        byte[] inputBytes = "test input".getBytes();
        byte[] encodedBytes = URLCodec.encodeUrl(urlSafe, inputBytes);
        String expectedOutput = "test input"; // Space is not encoded because it's set as safe in urlSafe
        byte[] expectedBytes = expectedOutput.getBytes();
        assertArrayEquals(expectedBytes, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_XPNW0_IKzc0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = null;
        try {
            result = codec.encode(null, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown for null input.");
        }
        assertNull("Encoding a null should return null.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_kwsK1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "testString".getBytes();
        Object result = codec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_eFVw5() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        Object result = codec.encode(input);
        assertNotNull(result);
        assertEquals("", result);
    }
}