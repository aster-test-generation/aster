/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_BKhO1() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = {65, 61, 50, 49}; // A=21
        try {
            byte[] output = (byte[]) codec.decode(input);
            assertEquals("Decoding byte array should work", "A!", new String(output));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_RMst0_ZIXU0_fid2() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull("Decoding null should return null", codec.decode((String) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithCarriageReturnAfterEscape_KdYI1_pMqZ0_fid2() throws DecoderException {
        byte[] input = new byte[]{'=', '\r', 'n'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(new byte[]{}, output, "Output should skip carriage return after escape");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithLineFeedNotAfterEscape_QEIa4_kFIc0_fid2() throws DecoderException {
        byte[] input = new byte[]{'W', 'o', 'r', 'l', 'd', '=', '\n', '=', '6', '5'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("World".getBytes(), output, "Output should process normally when LF is not directly after escape");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithCarriageReturnNotAfterEscape_XEoP3_ZOkY0_fid2() throws DecoderException {
        byte[] input = new byte[]{'H', 'e', '=', '\r', '=', '6', '5', 'l', 'l', 'o'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("Heallo".getBytes(), output, "Output should process normally when CR is not directly after escape");
    }
}