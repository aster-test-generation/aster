/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Nysiis_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_MacPrefix_RQKC2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("MCCARTY", nysiis.nysiis("MacCarthy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_KnPrefix_KjhF3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NNIGHT", nysiis.nysiis("Knight"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_KPrefix_FQiG4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("CING", nysiis.nysiis("King"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_PhPfPrefix_FvNN5() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FFILIP", nysiis.nysiis("Philip"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_SchPrefix_RvHZ6() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSSULTAN", nysiis.nysiis("Schultz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_EvToAf_Omij7() {
        Nysiis nysiis = new Nysiis();
        assertEquals("STAFN", nysiis.nysiis("Steven"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_VowelsToA_sRhp8() {
        Nysiis nysiis = new Nysiis();
        assertEquals("ALAN", nysiis.nysiis("Ellen"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_QToG_PPKe9() {
        Nysiis nysiis = new Nysiis();
        assertEquals("GACK", nysiis.nysiis("Quack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_ZToS_eNbr10() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SUSAN", nysiis.nysiis("Zuzan"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_MToN_eCVK11() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NANCY", nysiis.nysiis("Mancy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_HHandling_rzQl12() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SMITH", nysiis.nysiis("Smith"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_WHandling_jkxc13() {
        Nysiis nysiis = new Nysiis();
        assertEquals("CRAW", nysiis.nysiis("Crew"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_MacPrefix_sBHR2() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("MacDonald");
        assertEquals("MCCDNLD", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_KnPrefix_RBuZ3() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Knight");
        assertEquals("NNYT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_PhPfPrefix_wSGw4() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Pfister");
        assertEquals("FFSTR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_SchPrefix_GfFx5() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Schmidt");
        assertEquals("SSSMTD", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_EeIeSuffix_afBi6() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Rosie");
        assertEquals("RSY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_QToG_EiQl9() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Quincy");
        assertEquals("GNCY", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_ZToS_rbbw10() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Zoo");
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_MToN_tPmW11() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Moo");
        assertEquals("N", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_KToC_aIkO12() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Kite");
        assertEquals("CT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNysiis_KnToNn_IvBW13() {
        Nysiis nysiis = new Nysiis();
        String result = nysiis.nysiis("Knack");
        assertEquals("NNAC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBasic_lFqZ0() {
        Nysiis nysiis = new Nysiis();
        String input = "encoding";
        String expected = "ENKADNK"; // Assuming "ENKADNK" is the expected NYSIIS code for "encoding"
        String result = nysiis.encode(input);
        assertEquals(expected, result);
    }
}