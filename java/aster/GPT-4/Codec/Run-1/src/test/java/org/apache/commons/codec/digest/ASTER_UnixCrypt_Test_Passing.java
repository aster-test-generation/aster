/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidInput_wwnM0() {
        String original = "hello";
        String salt = "xy";
        String expectedOutput = "xyJ5nqog.skwc"; // Expected output should be precomputed or known valid output
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_uMXe0() {
        byte[] original = "testString".getBytes();
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Aztj0_1() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Aztj0_2() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_LgRH1_1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_LgRH1_2() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertTrue(result.length() > 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_SlSd2_1() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_SlSd2_2() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_sBZG4_1() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_sBZG4_2() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_CARg5_1() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_CARg5_2() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_Mygk6_1() {
        byte[] original = new byte[8];
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_Mygk6_2() {
        byte[] original = new byte[8];
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericPassword_FRpv7_1() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericPassword_FRpv7_2() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInPassword_WUYe8_1() {
        byte[] original = "!@#$%^&*".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInPassword_WUYe8_2() {
        byte[] original = "!@#$%^&*".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltGeneratesSalt_HIKg1_2() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_apBC4_1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65); // A, B, C, D, E, F, G, H
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_apBC4_2() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65); // A, B, C, D, E, F, G, H
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_nkug5_1() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_nkug5_2() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_eWHI6_1() {
        byte[] original = new byte[]{(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode smiley face
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_eWHI6_2() {
        byte[] original = new byte[]{(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode smiley face
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_refo7_1() {
        byte[] original = new byte[8]; // All zeros
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_refo7_2() {
        byte[] original = new byte[8]; // All zeros
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAll255Original_Urgt8_1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) 255; // All 255
        }
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAll255Original_Urgt8_2() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) 255; // All 255
        }
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_agsr4_1() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_agsr4_2() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_uMTn5_1() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_uMTn5_2() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_pLHi6_1() {
        byte[] original = "psswrd".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_pLHi6_2() {
        byte[] original = "psswrd".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_URoF7_1() {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_URoF7_2() {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_asTM8_1() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_asTM8_2() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_fkxh4_1() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_fkxh4_2() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Qbpp5_1() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Qbpp5_2() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaxByteValuesOriginal_Evjm7_1() {
        byte[] original = {127, 127, 127, 127, 127, 127, 127, 127};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaxByteValuesOriginal_Evjm7_2() {
        byte[] original = {127, 127, 127, 127, 127, 127, 127, 127};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMinByteValuesOriginal_PTXx8_1() {
        byte[] original = {-128, -128, -128, -128, -128, -128, -128, -128};
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMinByteValuesOriginal_PTXx8_2() {
        byte[] original = {-128, -128, -128, -128, -128, -128, -128, -128};
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_YuOO4_1() {
        byte[] original = new byte[8]; // all zeros
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_YuOO4_2() {
        byte[] original = new byte[8]; // all zeros
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_rstG5_1() {
        byte[] original = "thisisaverylongpasswordthatexceedsnormal".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_rstG5_2() {
        byte[] original = "thisisaverylongpasswordthatexceedsnormal".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_iIGU6_1() {
        byte[] original = {(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode characters
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_iIGU6_2() {
        byte[] original = {(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode characters
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_uDWL7_1() {
        byte[] original = "a".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_uDWL7_2() {
        byte[] original = "a".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_EFlH8_1() {
        byte[] original = "12345678".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_EFlH8_2() {
        byte[] original = "12345678".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_DhTG2_1() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_DhTG2_2() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_yXrh4_1() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalusage".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_yXrh4_2() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalusage".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_ZyKg6_1() {
        byte[] original = "12345678".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_ZyKg6_2() {
        byte[] original = "12345678".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValues_GKAL7_1() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValues_GKAL7_2() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_tmDV8_1() {
        byte[] original = new byte[]{(byte) 0xC3, (byte) 0xA9}; //  in UTF-8
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_tmDV8_2() {
        byte[] original = new byte[]{(byte) 0xC3, (byte) 0xA9}; //  in UTF-8
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_qHyM4_1() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65);
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_qHyM4_2() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65);
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_NxsI5_1() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_NxsI5_2() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_VRXI7_1() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalbounds".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_VRXI7_2() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalbounds".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_sMQN8_1() {
        byte[] original = new byte[8];
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_sMQN8_2() {
        byte[] original = new byte[8];
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_dJWI1_2() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_ucEL3_2() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_jshA4_2() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_EWhi5_1() {
        byte[] original = "longpasswordthatexceedsnormal".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_EWhi5_2() {
        byte[] original = "longpasswordthatexceedsnormal".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_YXtZ6_2() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_jabH7_2() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_jabH7_2_fid1() {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllMaxByteOriginal_aQUj8_1() {
        byte[] original = new byte[]{(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllMaxByteOriginal_aQUj8_2() {
        byte[] original = new byte[]{(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_fvIV0_1() {
        String original = "hello";
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_fvIV0_2() {
        String original = "hello";
        String result = UnixCrypt.crypt(original);
        assertNotEquals(original, result);
    }

    @Test
    public void testCryptWithInvalidSalt_AqBR3_BkEs0() {
        byte[] original = "password".getBytes();
        String salt = "1";
        assertThrows(IllegalArgumentException.class, () -> UnixCrypt.crypt(original, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Aztj0() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_LgRH1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertTrue(result.length() > 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_SlSd2() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_sBZG4() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_CARg5() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_Mygk6() {
        byte[] original = new byte[8];
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericPassword_FRpv7() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInPassword_WUYe8() {
        byte[] original = "!@#$%^&*".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltGeneratesSalt_HIKg1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_apBC4() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65); // A, B, C, D, E, F, G, H
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_nkug5() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_eWHI6() {
        byte[] original = new byte[]{(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode smiley face
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_refo7() {
        byte[] original = new byte[8]; // All zeros
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAll255Original_Urgt8() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) 255; // All 255
        }
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_agsr4() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_uMTn5() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_pLHi6() {
        byte[] original = "psswrd".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_URoF7() {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_asTM8() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_fkxh4() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Qbpp5() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaxByteValuesOriginal_Evjm7() {
        byte[] original = {127, 127, 127, 127, 127, 127, 127, 127};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMinByteValuesOriginal_PTXx8() {
        byte[] original = {-128, -128, -128, -128, -128, -128, -128, -128};
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_YuOO4() {
        byte[] original = new byte[8]; // all zeros
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_rstG5() {
        byte[] original = "thisisaverylongpasswordthatexceedsnormal".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_iIGU6() {
        byte[] original = {(byte) 0xE2, (byte) 0x98, (byte) 0x83}; // Unicode characters
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_uDWL7() {
        byte[] original = "a".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_EFlH8() {
        byte[] original = "12345678".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_DhTG2() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_yXrh4() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalusage".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_ZyKg6() {
        byte[] original = "12345678".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValues_GKAL7() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_tmDV8() {
        byte[] original = new byte[]{(byte) 0xC3, (byte) 0xA9}; //  in UTF-8
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_qHyM4() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65);
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_NxsI5() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_VRXI7() {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalbounds".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_sMQN8() {
        byte[] original = new byte[8];
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleSingleCharOriginal_mtXu7() {
        for (int i = 0; i < 256; i++) {
            byte[] original = new byte[]{(byte) i};
            String salt = "gh";
            String result = UnixCrypt.crypt(original, salt);
            assertNotNull(result);
            assertTrue(result.startsWith("gh"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleDoubleCharSalt_CcpS8() {
        byte[] original = "user".getBytes();
        for (char i = 'a'; i <= 'z'; i++) {
            for (char j = 'a'; j <= 'z'; j++) {
                String salt = "" + i + j;
                String result = UnixCrypt.crypt(original, salt);
                assertNotNull(result);
                assertTrue(result.startsWith(salt));
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_dJWI1() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_ucEL3() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_jshA4() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_EWhi5() {
        byte[] original = "longpasswordthatexceedsnormal".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_YXtZ6() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_jabH7() {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllMaxByteOriginal_aQUj8() {
        byte[] original = new byte[]{(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_fvIV0() {
        String original = "hello";
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
        assertNotEquals(original, result);
    }
}