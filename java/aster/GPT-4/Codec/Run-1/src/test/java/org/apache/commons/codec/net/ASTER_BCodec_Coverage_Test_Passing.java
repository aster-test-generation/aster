/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Passing {
    private static final String PREFIX = "=?";
    private static final String POSTFIX = "?=";
    private static final char SEP = '?';

    private String getEncoding() {
        return "Q"; // Assuming "Q" is the encoding this codec supports
    }

    private byte[] doDecoding(byte[] data) {
        return java.util.Arrays.copyOf(data, data.length); // No actual decoding performed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_uegM0() throws EncoderException {
        BCodec codec = new BCodec();
        String result = codec.encodeText(null, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullValue_hXDV0() throws DecoderException {
        BCodec codec = new BCodec(Charset.defaultCharset());
        assertNull(codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_aLha0() {
        BCodec codec = new BCodec();
        Charset expectedCharset = Charset.defaultCharset(); // Assuming default charset is used in the default constructor
        Charset actualCharset = codec.getCharset();
        assertEquals(expectedCharset, actualCharset);
    }

    @Test
    public void testDecodeWithUnsupportedEncodingException_KjkD0_oTfM0() {
        assertThrows(UnsupportedCharsetException.class, () -> {
            BCodec codec = new BCodec(Charset.forName("unsupported-charset-name"));
            codec.decode("test input");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_TFnU0_Cmwg0() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String result = codec.encodeText(null, Charset.defaultCharset());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_OlUn1_gjDB0_1() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String testString = "Hello, World!";
        String result = codec.encodeText(testString, Charset.defaultCharset());
        assertNotNull(result, "Encoding a string should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_OlUn1_gjDB0_2() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String testString = "Hello, World!";
        String result = codec.encodeText(testString, Charset.defaultCharset());
        assertTrue(result instanceof String, "Result should be a String");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_EDaC3_MrlN0_1() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String testString = "";
        String result = codec.encodeText(testString, Charset.defaultCharset());
        assertNotNull(result, "Encoding an empty string should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_EDaC3_MrlN0_2() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset(), CodecPolicy.STRICT);
        String testString = "";
        String result = codec.encodeText(testString, Charset.defaultCharset());
        assertTrue(result instanceof String, "Result should be a String");
    }
}