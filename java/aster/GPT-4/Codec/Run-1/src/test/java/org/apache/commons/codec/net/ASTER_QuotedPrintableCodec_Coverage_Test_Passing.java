/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_JVaX0() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInputAndDifferentCharset_Eldm1() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, "ISO-8859-1");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_gwyq0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, StandardCharsets.UTF_8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithWhitespace_ktCp0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        BitSet printable = new BitSet(256);
        printable.set(0, 256);
        printable.clear(' '); // ASCII space
        printable.clear('\t'); // ASCII tab
        byte[] input = new byte[]{'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\t', '!'};
        byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        System.out.println(new String(encoded, Charset.forName("UTF-8")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_NiYi4() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Hello=3DWorld".getBytes();
        byte[] expected = "Hello=World".getBytes();
        byte[] result = (byte[]) codec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_UKcq5() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello=3DWorld";
        String expected = "Hello=World";
        String result = (String) codec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_gWUm1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = {65, 66, 67}; // equivalent to "ABC"
        byte[] expected = {65, 66, 67}; // This is a stub, actual implementation ofnew QuotedPrintableCodec().encode(byte[]) needed
        assertArrayEquals(expected, (byte[]) codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_veql2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello";
        String expected = "Hello"; // This is a stub, actual implementation ofnew QuotedPrintableCodec().encode(String) needed
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_PuOr4() throws EncoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String input = "Hello";
        String expected = "Hello"; // This is a stub, actual implementation ofnew QuotedPrintableCodec().encode(String) needed
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrict_Yehi5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] input = {65, 66, 67}; // equivalent to "ABC"
        byte[] expected = {65, 66, 67}; // This is a stub, actual implementation ofnew QuotedPrintableCodec().encode(byte[]) needed
        assertArrayEquals(expected, (byte[]) codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_LBeb6() throws EncoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "Hello";
        String expected = "Hello"; // This is a stub, actual implementation ofnew QuotedPrintableCodec().encode(String) needed
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_BKhO1_fid1() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = {65, 61, 50, 49}; // A=21
        try {
            byte[] output = (byte[]) codec.decode(input);
            assertEquals("A!", "A!", new String(output));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    public void testDecodeWithUnsupportedObject_KUID3_Byhs0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected an exception to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testEncodeWithUnsupportedObject_IjRx3_hvah0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithNullInput_ndrJ0_KsKy0() throws DecoderException {
        byte[] input = null;
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertNull(output, "Output should be null when input is null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_RMst0_ZIXU0() throws org.apache.commons.codec.DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithCarriageReturnAfterEscape_KdYI1_pMqZ0() throws DecoderException {
        byte[] input = new byte[]{'=', '\r', 'n'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_NGmY0_noUB0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode((String) null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithLineFeedNotAfterEscape_QEIa4_kFIc0() throws DecoderException {
        byte[] input = new byte[]{'W', 'o', 'r', 'l', 'd', '=', '6', '5'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("Worlde".getBytes(), output, "Output should process normally when LF is not directly after escape");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithCarriageReturnNotAfterEscape_XEoP3_ZOkY0() throws DecoderException {
        byte[] input = new byte[]{'H', 'e', '=', '\r', '=', '6', '5', 'l', 'l', 'o'};
        byte[] output = QuotedPrintableCodec.decodeQuotedPrintable(input);
    }
}