/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Lang_Test {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInstanceReturnsCorrectLangForAshkenazi_OXyH0() {
        Lang expectedLang = Lang.instance(NameType.ASHKENAZI);
        Lang resultLang = Lang.instance(NameType.ASHKENAZI);
        assertEquals(expectedLang, resultLang);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResourceWithMalformedLines_NcKc4() {
        Languages languages = Languages.getInstance("dummyResource");
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Lang.loadFromResource("malformedLinesResource.txt", languages);
        });
        assertTrue(exception.getMessage().contains("Malformed line"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoadFromResourceWithNonExistentFile_KXFu6() {
        Languages languages = Languages.getInstance("dummyResource");
        Exception exception = assertThrows(RuntimeException.class, () -> {
            Lang.loadFromResource("nonExistentResource.txt", languages);
        });
        assertTrue(exception.getMessage().contains("File not found"));
    }
}