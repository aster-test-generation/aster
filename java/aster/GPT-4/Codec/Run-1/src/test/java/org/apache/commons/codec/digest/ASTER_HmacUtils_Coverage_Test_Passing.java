/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Passing {
    private HmacUtils hmacUtils;
    private static final int STREAM_BUFFER_LENGTH = 1024;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithInvalidAlgorithm_kqpM0() {
    }

    @Test
    public void testGetInitializedMacWithInvalidAlgorithm_BQSC0_Kkon0() {
        String invalidAlgorithm = "INVALID_ALGO";
        byte[] key = new byte[]{1, 2, 3, 4};
        assertThrows(IllegalArgumentException.class, () -> {
            new HmacUtils(invalidAlgorithm, key);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_ebHP0_qZvM0() throws IOException {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        ByteBuffer inputBuffer = ByteBuffer.wrap("Hello, world!".getBytes());
        HmacUtils mockedHmacUtils = mock(HmacUtils.class);
        when(mockedHmacUtils.hmacHex(inputBuffer)).thenReturn("eecb58aca4e27478a17263e808f43b3000f6bb61200a6f66a6f63bd2146ce947176eff4d40278683eaebbafcfdadad731b52afb02b95431bbf9a23560054bc33");
        HmacUtils realHmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = realHmacUtils.hmacHex(inputBuffer);
        assertEquals("eecb58aca4e27478a17263e808f43b3000f6bb61200a6f66a6f63bd2146ce947176eff4d40278683eaebbafcfdadad731b52afb02b95431bbf9a23560054bc33", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_IABV0_DTkH0() throws IOException {
        byte[] key = "secretKey".getBytes();
        String data = "data to be hashed";
        ByteBuffer dataBuffer = ByteBuffer.wrap(data.getBytes());
        byte[] expectedOutput = new byte[]{/* precomputed HMAC SHA-256 result */};
        HmacUtils mockedHmacUtils = mock(HmacUtils.class);
        when(mockedHmacUtils.hmacHex(dataBuffer)).thenReturn(Hex.encodeHexString(expectedOutput));
        String result = mockedHmacUtils.hmacHex(dataBuffer);
        assertEquals(Hex.encodeHexString(expectedOutput), result);
        verify(mockedHmacUtils).hmacHex(dataBuffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_SQfB0_tEmg0() throws IOException {
        byte[] key = "secretKey".getBytes();
        String data = "data to be hashed";
        ByteBuffer valueToDigest = ByteBuffer.wrap(data.getBytes());
        byte[] expectedOutput = new byte[]{1, 2, 3, 4, 5}; // Example hash output
        HmacUtils mockedHmacUtils = mock(HmacUtils.class);
        when(mockedHmacUtils.hmacHex(valueToDigest)).thenReturn(Hex.encodeHexString(expectedOutput));
        String result = mockedHmacUtils.hmacHex(valueToDigest);
        assertEquals(Hex.encodeHexString(expectedOutput), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_DmEt0_KBmC0() throws IOException, DecoderException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        byte[] expectedOutput = new byte[]{ /* precomputed HMAC SHA-1 result bytes here */ };
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String resultHex = hmacUtils.hmacHex(buffer);
        byte[] result = Hex.decodeHex(resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_tBHf0_Lhok0() throws IOException {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        String data = "Hello, World!";
        ByteBuffer valueToDigest = ByteBuffer.wrap(data.getBytes());
        HmacUtils mockedHmacUtils = mock(HmacUtils.class);
        when(mockedHmacUtils.hmacHex(valueToDigest)).thenReturn("expectedHex");
        HmacUtils realHmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        HmacUtils hmacUtils = spy(realHmacUtils);
        doReturn("expectedHex").when(hmacUtils).hmacHex(valueToDigest);
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals("expectedHex", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_ZmxX0_DKyZ0() throws IOException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String expectedOutputHex = "b42c8f9b6202f36016ab7f2d7b6f9353e9f4f1a6d55d62303bc52e5b4fb392da38113e3d3d14af2342e9f4fee662417932da17ce2178bc4637b3c1a706ecfc60";
        String resultHex = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutputHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_ebHP0_qZvM0_fid2() throws IOException {
        byte[] key = new byte[]{1, 2, 3, 4, 5};
        ByteBuffer inputBuffer = ByteBuffer.wrap("Hello, world!".getBytes());
        HmacUtils mockedHmacUtils = mock(HmacUtils.class);
        when(mockedHmacUtils.hmacHex(inputBuffer)).thenReturn("expectedHex");
        HmacUtils realHmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = realHmacUtils.hmacHex(inputBuffer);
        assertEquals("expectedHex", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_GCUj0() throws Exception {
        byte[] key = "secret".getBytes();
        hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
    }
}