/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBufferUsingArrayDirectly_Dhyp0() throws EncoderException {
        Hex hex = new Hex();
        byte[] content = "test".getBytes(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.wrap(content);
        String expectedHex = "74657374"; // This is the hex representation of "test"
        Object result = hex.encode(buffer);
        assertArrayEquals(expectedHex.getBytes(), (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_jlly3_1() throws DecoderException {
        Hex hex = new Hex();
        String input = "616263"; // Hex string for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_jlly3_2() throws DecoderException {
        Hex hex = new Hex();
        String input = "616263"; // Hex string for "abc"
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_jlly3_3() throws DecoderException {
        Hex hex = new Hex();
        String input = "616263"; // Hex string for "abc"
        Object result = hex.decode(input);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithChar_cNUs4_1() throws DecoderException {
        Hex hex = new Hex();
        char[] input = new char[]{'6', '1', '6', '2', '6', '3'}; // Hex chars for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithChar_cNUs4_2() throws DecoderException {
        Hex hex = new Hex();
        char[] input = new char[]{'6', '1', '6', '2', '6', '3'}; // Hex chars for "abc"
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithChar_cNUs4_3() throws DecoderException {
        Hex hex = new Hex();
        char[] input = new char[]{'6', '1', '6', '2', '6', '3'}; // Hex chars for "abc"
        Object result = hex.decode(input);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    public void testDecodeWithInvalidCharInput_XcPj5_auPl0() {
        Hex hex = new Hex();
        byte[] input = new byte[]{'G', 'H'}; // Invalid hex chars
        assertThrows(DecoderException.class, () -> hex.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_jlly3() throws DecoderException {
        Hex hex = new Hex();
        String input = "616263"; // Hex string for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithChar_cNUs4() throws DecoderException {
        Hex hex = new Hex();
        char[] input = new char[]{'6', '1', '6', '2', '6', '3'}; // Hex chars for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }
}