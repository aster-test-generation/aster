/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameType_Ashkenazi_uXRO0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setNameType(NameType.ASHKENAZI);
        assertEquals(NameType.ASHKENAZI, encoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_DWix0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        RuleType expectedRuleType = RuleType.APPROX;
        encoder.setRuleType(expectedRuleType);
        assertEquals(expectedRuleType, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_htoo0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType expected = NameType.GENERIC;
        NameType actual = encoder.getNameType();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConcatTrue_bJEc0_tKVk0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setConcat(true);
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_AzLc0_iwcY0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String result = null;
        try {
            result = encoder.encode(null);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_dVGw0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_kYBm0_zmLf0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "test";
        String expected = "tYst|ti|tis|tist|tit"; // Assuming the new BeiderMorseEncoder().encode(String) method returns a modified string
        try {
            String result = encoder.encode(input);
            assertEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_IPyB1_ySrF0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            String result = encoder.encode("example");
            assertNotNull(result);
            assertEquals("YgzYmpli|Ygzampli|Ygzompli|YksYmpli|Yksampli|Yksompli|igzYmpli|igzabli|igzampil|igzampli|igzobli|igzompil|igzompli|iksYmpli|iksabli|iksampil|iksampli|iksobli|iksompil|iksompli|isampli|isompli|izampli|izompli", result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }
}