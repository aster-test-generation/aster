/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyLanguageSet_cdfc0() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(Collections.emptySet());
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_cDPd1_1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_cDPd1_2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNonExistingLanguage_sVVo3() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("Klingon"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNullLanguageSet_Uwzb4() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = null;
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyRuleType_dOhj5() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = null;
        Set<String> languages = new HashSet<>(Arrays.asList("English", "German"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyNameType_syUx6() {
        NameType nameType = null;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>(Arrays.asList("Italian", "Portuguese"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAllNullParameters_mYBG7() {
        NameType nameType = null;
        RuleType ruleType = null;
        LanguageSet languageSet = null;
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_Sltf8_1() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_Sltf8_2() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_EfWC0_1() {
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, "English");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_EfWC0_2() {
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, "English");
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapValidData_yjBt0_1() {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, "en");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapValidData_yjBt0_2() {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, "en");
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_cDPd1() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_Sltf8() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_EfWC0() {
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, "English");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapValidData_yjBt0() {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, "en");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_cDPd1_1_fid2() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNonExistingLanguage_sVVo3_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("Klingon"));
        LanguageSet languageSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyRuleType_dOhj5_fid2() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = null;
        Set<String> languages = new HashSet<>(Arrays.asList("English", "German"));
        LanguageSet languageSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyNameType_syUx6_fid2() {
        NameType nameType = null;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>(Arrays.asList("Italian", "Portuguese"));
        LanguageSet languageSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, ruleType, languageSet);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_Sltf8_1_fid2() {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>(Arrays.asList("English"));
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithValidParameters_EfWC0_1_fid2() {
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, "English");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapValidData_yjBt0_1_fid2() {
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, "en");
        assertTrue(result.isEmpty());
    }
}