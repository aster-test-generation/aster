/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8WithValidBytes_aBEE0() {
        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_8);
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16WithNonNullString_RYiy0() {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_16);
        byte[] resultBytes = StringUtils.getBytesUtf16(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_withNonNullString_UyXh0() {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.ISO_8859_1);
        byte[] resultBytes = StringUtils.getBytesIso8859_1(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_withNonNullString_MvfI0() {
        String testString = "Hello World";
        byte[] expected = testString.getBytes(StandardCharsets.UTF_16LE);
        byte[] actual = StringUtils.getBytesUtf16Le(testString);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_withValidBytes_XMTt0() {
        byte[] bytes = new byte[]{(byte) 0xFF, (byte) 0xFE, 0x41, 0x00, 0x42, 0x00}; // UTF-16LE encoded string "﻿AB"
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("﻿AB", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16WithNonNullBytes_MBDM0() {
        byte[] bytes = new byte[]{0, 65, 0, 66}; // UTF-16 encoding of 'AB'
        String result = StringUtils.newStringUtf16(bytes);
        assertEquals("AB", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothNull_irJx0() {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FirstNullSecondNotNull_RjbG1() {
        assertFalse(StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FirstNotNullSecondNull_byLX2() {
        assertFalse(StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_JspJ3() {
        String sameObject = "test";
        assertTrue(StringUtils.equals(sameObject, sameObject));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentStrings_YQZn4() {
        assertFalse(StringUtils.equals("test", "best"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameStrings_PsjN5() {
        assertTrue(StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLengthStrings_AQwN6() {
        assertFalse(StringUtils.equals("test", "testing"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCaseStrings_dkGZ7() {
        assertFalse(StringUtils.equals("Test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8WithNonNullString_Ujio0_1() {
        String testString = "Hello, world!";
        ByteBuffer expected = ByteBuffer.wrap(testString.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(testString);
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8WithNonNullString_Ujio0_2() {
        String testString = "Hello, world!";
        ByteBuffer expected = ByteBuffer.wrap(testString.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(testString);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_withNonNullString_nmNX0() {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_16BE);
        byte[] resultBytes = StringUtils.getBytesUtf16Be(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_withValidBytes_eONG0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.ISO_8859_1);
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_NullInput_eIPW0() {
        assertNull(StringUtils.getBytesUsAscii(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithValidCharset_XeBc0() {
        byte[] bytes = "example".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("example", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithInvalidCharset_LUWu1() {
        byte[] bytes = "example".getBytes();
        String charsetName = "InvalidCharset";
        try {
            StringUtils.newString(bytes, charsetName);
            fail("Expected an IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("InvalidCharset: java.io.UnsupportedEncodingException: InvalidCharset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_NullInput_oxGm0() {
        assertNull(StringUtils.getBytesUnchecked(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_UnsupportedEncoding_asGE1() {
        try {
            StringUtils.getBytesUnchecked("test", "invalid-charset");
            fail("Expected an IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("invalid-charset: java.io.UnsupportedEncodingException: invalid-charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_NullInput_ITko0() {
        assertNull(StringUtils.getBytesUtf8(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_withValidBytes_isax0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.UTF_16BE);
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_withNonNullBytes_rzLh0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.US_ASCII);
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("hello", result);
    }
}