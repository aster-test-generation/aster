/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_mxfX0_1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_mxfX0_2() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_mxfX0_3() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        Object result = hex.decode(input);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_RaHI1_1() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // ASCII for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_RaHI1_2() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // ASCII for "abc"
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_RaHI1_3() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // ASCII for "abc"
        Object result = hex.decode(input);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_mxfX0() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_RaHI1() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // ASCII for "abc"
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
        assertArrayEquals(new byte[]{0x61, 0x62, 0x63}, (byte[]) result);
    }
}