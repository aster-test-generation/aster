/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CharSequenceUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseSensitiveMatch_lHrr0() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "World";
        assertTrue(CharSequenceUtils.regionMatches(cs, false, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseInsensitiveMatch_XwNm1() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "world";
        assertTrue(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseSensitiveNoMatch_PhnG2() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "world";
        assertFalse(CharSequenceUtils.regionMatches(cs, false, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_caseInsensitiveNoMatch_EauH3() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "planet";
        assertFalse(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 6));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_outOfBounds_JmaD4() {
        CharSequence cs = "Hello";
        CharSequence substring = "Hello";
        assertFalse(CharSequenceUtils.regionMatches(cs, false, 1, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_exactMatch_dobb5() {
        CharSequence cs = "ExactMatch";
        CharSequence substring = "ExactMatch";
        assertTrue(CharSequenceUtils.regionMatches(cs, false, 0, substring, 0, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_partialMatchStart_IAmn6() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "Hell";
        assertTrue(CharSequenceUtils.regionMatches(cs, false, 0, substring, 0, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_partialMatchEnd_PaII7() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "rld";
        assertTrue(CharSequenceUtils.regionMatches(cs, false, 7, substring, 0, 3));
    }
}