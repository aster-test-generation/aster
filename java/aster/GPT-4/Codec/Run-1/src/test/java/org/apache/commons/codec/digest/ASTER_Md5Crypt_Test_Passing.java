/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_Clcb0_1() {
        byte[] keyBytes = "password".getBytes();
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_Clcb0_2() {
        byte[] keyBytes = "password".getBytes();
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertTrue(result.startsWith(Md5Crypt.APR1_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithValidSalt_ISLs0() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$1$salt1234";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullSalt_aJBW1() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, null, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithLongSalt_EyJL4() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$1$123456789";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithSpecialCharacterSalt_RzQh5() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$1$./@*#&";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNumericSalt_FUBT6() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$1$12345678";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithAlphaNumericSalt_Gaom7() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$1$abc12345";
        String prefix = "$1$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithDifferentPrefix_FNbJ9() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "$2$usesalt";
        String prefix = "$2$";
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidInput_jjeC0() {
        String input = "password";
        String result = Md5Crypt.apr1Crypt(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomBytes_LWSa0_1() {
        byte[] keyBytes = new byte[16];
        new Random().nextBytes(keyBytes);
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomBytes_LWSa0_2() {
        byte[] keyBytes = new byte[16];
        new Random().nextBytes(keyBytes);
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_BtRT1_1() {
        String salt = "salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_BtRT1_2() {
        String salt = "salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertTrue(result.startsWith("$apr1$salt123$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithPrefixSalt_fkUI2_1() {
        String salt = "$apr1$salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithPrefixSalt_fkUI2_2() {
        String salt = "$apr1$salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertTrue(result.startsWith("$apr1$salt123$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomSalt_UZeR0_1() {
        byte[] keyBytes = "testKey".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomSalt_UZeR0_2() {
        byte[] keyBytes = "testKey".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_aCYI0_1() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_aCYI0_2() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assertTrue(result.startsWith(Md5Crypt.APR1_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidInput_JsVF0() {
        String keyBytes = "password";
        String salt = "salt123";
        String expectedOutput = Md5Crypt.apr1Crypt(keyBytes, salt);
        String actualOutput = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testMd5CryptWithInvalidSalt_JMaJ2_cQKx0() {
        byte[] keyBytes = "password".getBytes(StandardCharsets.UTF_8);
        String salt = "invalidsalt";
        String prefix = "$1$";
        Random random = new Random();
        assertThrows(IllegalArgumentException.class, () -> {
            Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_HcGy0_eXaa0_1() {
        String result = Md5Crypt.apr1Crypt("password", null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithNullSalt_HcGy0_eXaa0_2() {
        String result = Md5Crypt.apr1Crypt("password", null);
        assertTrue(result.startsWith("$apr1$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_Clcb0() {
        byte[] keyBytes = "password".getBytes();
        String result = Md5Crypt.apr1Crypt(keyBytes);
        assertNotNull(result);
        assertTrue(result.startsWith(Md5Crypt.APR1_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomBytes_LWSa0() {
        byte[] keyBytes = new byte[16];
        new Random().nextBytes(keyBytes);
        String result = Md5Crypt.md5Crypt(keyBytes);
        assertNotNull(result);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithValidSalt_BtRT1() {
        String salt = "salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertNotNull(result);
        assertTrue(result.startsWith("$apr1$salt123$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithPrefixSalt_fkUI2() {
        String salt = "$apr1$salt123";
        String result = Md5Crypt.apr1Crypt("password".getBytes(), salt);
        assertNotNull(result);
        assertTrue(result.startsWith("$apr1$salt123$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithRandomSalt_UZeR0() {
        byte[] keyBytes = "testKey".getBytes();
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertNotNull(result);
        assertTrue(result.startsWith(Md5Crypt.MD5_PREFIX));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1CryptWithRandomSalt_aCYI0() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Md5Crypt.apr1Crypt(keyBytes, random);
        assertNotNull(result);
        assertTrue(result.startsWith(Md5Crypt.APR1_PREFIX));
    }
}