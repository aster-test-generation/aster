/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSubstring_SzIi0() {
        String input = "hello world";
        int from = 6;
        int length = 5;
        int result = MurmurHash2.hash32(input, from, length);
        int expected = MurmurHash2.hash32("world");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_vnjG0() {
        byte[] data = new byte[0];
        int seed = 123;
        int result = MurmurHash2.hash32(data, data.length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonEmptyData_uylQ1() {
        byte[] data = {1, 2, 3, 4};
        int seed = 123;
        int result = MurmurHash2.hash32(data, data.length, seed);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSubstring_TYsj0() {
        String input = "Hello, world!";
        int from = 7;
        int length = 5;
        long expectedHash = MurmurHash2.hash64("world");
        long resultHash = MurmurHash2.hash64(input, from, length);
        assertEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyString_exLm0() {
        String input = "";
        long expectedHash = -7207201254813729732L; // Expected hash for an empty string, assuming hash64 would return-7207201254813729732 for empty input
        long resultHash = MurmurHash2.hash64(input);
        assertEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyString_bKnq0() {
        String input = "";
        int expectedHash = MurmurHash2.hash32(input);
        assertEquals(expectedHash, MurmurHash2.hash32(input));
    }
}