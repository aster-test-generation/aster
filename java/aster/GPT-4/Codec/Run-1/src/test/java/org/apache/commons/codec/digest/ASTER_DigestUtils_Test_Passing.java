/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_UtYD0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNonNullValues_dYwh0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, world!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(digest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_qSTz0() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertNotNull(sha384Digest);
        assertEquals("SHA-384", sha384Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_ReturnsCorrectHash_wipi0() {
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        byte[] data = new byte[0]; // empty array
        String result = DigestUtils.sha256Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithChangingFile_NGqg4() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile file = new RandomAccessFile("changingFile.txt", "rw");
        file.writeBytes("Initial content");
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] firstResult = DigestUtils.digest(md, file);
        file.writeBytes("Additional content");
        byte[] secondResult = DigestUtils.digest(md, file);
        assertNotEquals(new String(firstResult), new String(secondResult));
        file.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithFileNotFound_pxlO7() {
        try {
            RandomAccessFile file = new RandomAccessFile("nonExistentFile.txt", "r");
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            DigestUtils.digest(md, file);
            fail("Expected IOException");
        } catch (IOException | NoSuchAlgorithmException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_zPge0() {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertNotNull(md2Digest);
        assertEquals("MD2", md2Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithValidData_xPVI0() {
        String testData = "Hello, World!";
        byte[] result = DigestUtils.sha(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNonNullData_LOpc0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha256(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_AQDO0() {
        MessageDigest sha3_512Digest = DigestUtils.getSha3_512Digest();
        assertNotNull(sha3_512Digest);
        assertEquals("SHA3-512", sha3_512Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithValidString_SwGI0() {
        String input = "hello world";
        String expectedOutput = "2aae6c35c94fcfb415dbe95f408b9ce91ee846ed";
        String result = DigestUtils.sha1Hex(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithLargeFile_VbCA2() throws IOException, NoSuchAlgorithmException {
        Path tempFile = Files.createTempFile("test", ".tmp");
        byte[] largeContent = new byte[1024 * 1024]; // 1MB
        Files.write(tempFile, largeContent);
        RandomAccessFile file = new RandomAccessFile(tempFile.toFile(), "r");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, file);
        assertNotNull(updatedDigest);
        assertNotEquals(new byte[32], updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithBinaryFile_LrCM3() throws IOException, NoSuchAlgorithmException {
        Path tempFile = Files.createTempFile("test", ".tmp");
        byte[] binaryContent = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        Files.write(tempFile, binaryContent);
        RandomAccessFile file = new RandomAccessFile(tempFile.toFile(), "r");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, file);
        assertNotNull(updatedDigest);
        assertNotEquals(new byte[32], updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithClosedFile_gigD8() throws IOException, NoSuchAlgorithmException {
        Path tempFile = Files.createTempFile("test", ".tmp");
        RandomAccessFile file = new RandomAccessFile(tempFile.toFile(), "r");
        file.close();
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        try {
            DigestUtils.updateDigest(digest, file);
            fail("Should have thrown IOException");
        } catch (IOException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_vtaP0() {
        MessageDigest sha1Digest = DigestUtils.getSha1Digest();
        assertNotNull(sha1Digest);
        assertEquals("SHA-1", sha1Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithByteBuffer_hgqS0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        byte[] result = digestUtils.digest(buffer);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_ValidAlgorithm_voUi0() {
        String algorithm = "SHA-256";
        MessageDigest digest = DigestUtils.getDigest(algorithm);
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_jsnX0() {
        MessageDigest expected = DigestUtils.getSha1Digest();
        MessageDigest actual = DigestUtils.getShaDigest();
        assertEquals(expected.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_utyD0() {
        MessageDigest digest = DigestUtils.getSha3_384Digest();
        assertNotNull(digest);
        assertEquals("SHA3-384", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNonNullInput_uvtC0() {
        String input = "Hello, World!";
        byte[] result = DigestUtils.sha3_224(input);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithValidString_aSpO0() {
        String input = "Hello, world!";
        byte[] expectedOutput = DigestUtils.sha3_256(input);
        byte[] actualOutput = DigestUtils.sha3_256(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_lKul0() {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] data = "test data".getBytes();
            byte[] result = DigestUtils.digest(md, data);
            byte[] expected = md.digest(data);
            assertArrayEquals(expected, result);
        } catch (NoSuchAlgorithmException e) {
            fail("SHA-256 should be a valid message digest algorithm");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNonNullInput_FpaY0() {
        String input = "Hello, world!";
        byte[] result = DigestUtils.sha512_224(input);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA-512/224 produces a 224-bit hash, which is 28 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_iRxf0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
        assertEquals("SHA3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithByteBuffer_vSTY0() {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            ByteBuffer buffer = ByteBuffer.wrap("test string".getBytes());
            byte[] expectedDigest = md.digest("test string".getBytes());
            byte[] actualDigest = DigestUtils.digest(md, buffer);
            assertArrayEquals(expectedDigest, actualDigest);
        } catch (NoSuchAlgorithmException e) {
            fail("No such algorithm exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNonNullInput_dhxv0() {
        String input = "Hello, world!";
        byte[] result = DigestUtils.sha3_384(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithNonNullData_xFhm0() {
        byte[] testData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = DigestUtils.sha(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithNonNullData_ymlO0() {
        byte[] testData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = DigestUtils.sha3_512(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithNonNullInput_gpvO0() {
        String input = "Hello, World!";
        byte[] result = DigestUtils.sha3_512(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithValidInput_gSLp0() {
        String input = "Hello, world!";
        String expectedOutput = DigestUtils.sha1Hex(input);
        String actualOutput = DigestUtils.shaHex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyByteArray_HlBx0() {
        byte[] data = new byte[0];
        String result = DigestUtils.md2Hex(data);
        assertEquals("8350e5a3e24c153df2275c9f80692773", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_Xlub0() {
        MessageDigest sha512Digest = DigestUtils.getSha512Digest();
        assertNotNull(sha512Digest);
        assertEquals("SHA-512", sha512Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNonNullData_ImaO0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha512_224(testData);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA-512/224 produces a 28-byte hash
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithByteBuffer_YUPm0() {
        MessageDigest digest = DigestUtils.getDigest("SHA-256");
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, buffer);
        byte[] digestResult = updatedDigest.digest();
        assertArrayEquals(digest.digest(new byte[]{1, 2, 3, 4}), digestResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNonNullData_BpBR0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha512(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithValidAlgorithm_soYU0() {
        assertTrue(DigestUtils.isAvailable("SHA-256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithInvalidAlgorithm_rObe1() {
        assertFalse(DigestUtils.isAvailable("Invalid-Algorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNonNullData_RfXw0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha3_384(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyData_bnYG0() {
        byte[] testData = new byte[0];
        byte[] result = DigestUtils.sha3_224(testData);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA3-224 produces a 28-byte hash (224 bits)
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithNonNullData_YIMK0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha3_256(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithNonNullData_AiGJ0() {
        byte[] testData = "sample data".getBytes();
        byte[] result = DigestUtils.md2(testData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256WithNonNullInput_Gair0() {
        String input = "test input";
        byte[] result = DigestUtils.sha512_256(input);
        assertNotNull(result);
        assertEquals(32, result.length); // SHA-512/256 produces a 256-bit hash, i.e., 32 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_withValidInput_KHBQ0() {
        byte[] input = "test input".getBytes();
        byte[] result = DigestUtils.sha512_256(input);
        assertNotNull(result);
        assertEquals(32, result.length); // SHA-512/256 produces a 256-bit hash, i.e., 32 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithKnownValue_glEE0() {
        String expected = "d41d8cd98f00b204e9800998ecf8427e";
        byte[] data = new byte[0];
        String result = DigestUtils.md5Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_mWDM0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
        assertEquals("SHA-512/224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithByteBuffer_bdiK0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer buffer = ByteBuffer.wrap("test string".getBytes());
        String result = digestUtils.digestAsHex(buffer);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithValidAlgorithm_aYQA0() {
        MessageDigest defaultMessageDigest = null;
        MessageDigest result = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertNotNull(result);
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithValidInput_lTtc0() {
        String input = "Hello, World!";
        byte[] expectedOutput = DigestUtils.sha384(input);
        byte[] actualOutput = DigestUtils.sha384(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithValidInput_wsgB0() {
        String input = "test";
        byte[] expectedOutput = DigestUtils.md2(input);
        byte[] actualOutput = DigestUtils.md2(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_tIZq0() throws IOException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(md);
        Path path = Files.createTempFile("test-file", ".txt");
        Files.write(path, "Test content".getBytes());
        byte[] actualDigest = digestUtils.digest(path);
        md.update(Files.readAllBytes(path));
        byte[] expectedDigest = md.digest();
        assertArrayEquals(expectedDigest, actualDigest);
        Files.delete(path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNonNullData_KGbY0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.md5(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_XfHF0() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
        assertEquals("SHA3-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithValidData_rsyO0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "test data".getBytes();
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_EDFI0() {
        MessageDigest sha256Digest = DigestUtils.getSha256Digest();
        assertNotNull(sha256Digest);
        assertEquals("SHA-256", sha256Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNonNullData_jLLi0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha1(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_mbyk0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String testData = "Hello, World!";
        byte[] result = digestUtils.digest(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_gVnl0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] inputData = "test input".getBytes();
        byte[] result = digestUtils.digest(inputData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_KKvx0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_VZox0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_UtYD0_1() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_UtYD0_2() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_qSTz0_1() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertNotNull(sha384Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_qSTz0_2() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", sha384Digest.getAlgorithm());
    }
}