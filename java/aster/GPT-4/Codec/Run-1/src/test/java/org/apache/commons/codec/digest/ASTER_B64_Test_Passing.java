/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_B64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltLength_UkIC0() {
        int length = 16;
        String result = B64.getRandomSalt(length);
        assertEquals(length, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltLength_PtXS0() {
        int length = 10;
        Random random = new Random();
        String result = B64.getRandomSalt(length, random);
        assertEquals(length, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSaltConsistency_SSnf1() {
        int length = 5;
        Random random = new Random(0);
        String result1 = B64.getRandomSalt(length, random);
        random = new Random(0);
        String result2 = B64.getRandomSalt(length, random);
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_AllZeros_eZOx0() {
        byte b2 = 0;
        byte b1 = 0;
        byte b0 = 0;
        int outLen = 4;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("....", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_MaxValues_aBjZ1() {
        byte b2 = (byte) 0xFF;
        byte b1 = (byte) 0xFF;
        byte b0 = (byte) 0xFF;
        int outLen = 4;
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit(b2, b1, b0, outLen, buffer);
        assertEquals("zzzz", buffer.toString());
    }
}