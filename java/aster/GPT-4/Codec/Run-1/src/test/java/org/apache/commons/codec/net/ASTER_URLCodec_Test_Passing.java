/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_ipyb0() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String encodedString = "Hello%20World";
        String expected = "Hello World";
        String result = codec.decode(encodedString, "UTF-8");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_LCKk1() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = codec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEncodedString_QFHM1() {
        URLCodec codec = new URLCodec("UTF-8");
        String encodedString = "Hello%20World";
        try {
            String result = codec.decode(encodedString);
            assertEquals("Hello World", result);
        } catch (DecoderException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_DefaultConstructor_gVkv0() {
        URLCodec codec = new URLCodec();
        assertEquals("UTF-8", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_ZEDb0() {
        URLCodec codec = new URLCodec("UTF-8");
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_DfRw1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "hello%20world".getBytes();
        byte[] expected = "hello world".getBytes();
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_LFDw2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "hello%20world";
        String expected = "hello world";
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_OujJ1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test".getBytes();
        byte[] expected = "test".getBytes(); // Assumingnew URLCodec().encode(byte[]) is correctly implemented
        assertArrayEquals(expected, (byte[]) codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_IOYP2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "test";
        String expected = "test"; // Assumingnew URLCodec().encode(String) is correctly implemented
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NullBytes_ReturnsNull_pTWk0() {
        byte[] result = URLCodec.encodeUrl(null, null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_EmptyBytes_ReturnsEmpty_RRcr1() {
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, new byte[]{});
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_AllSafeCharacters_SWHc2() {
        BitSet urlsafe = new BitSet(256);
        urlsafe.set(0, 256); // Assume all characters are safe
        byte[] input = "abc".getBytes();
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NonAsciiCharacters_Encoded_GNbl5() {
        BitSet urlsafe = new BitSet(256);
        byte[] input = {(byte) 0xC3, (byte) 0xA9}; //  in UTF-8
        byte[] expected = {'%', 'C', '3', '%', 'A', '9'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_MixedSafeAndUnsafeCharacters_ptHD6() {
        BitSet urlsafe = new BitSet(256);
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] input = "abc?".getBytes();
        byte[] expected = {'a', 'b', 'c', '%', '3', 'F'}; // Assuming '?' is encoded as '%3F'
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStandardString_ogfU1() {
        URLCodec codec = new URLCodec("UTF-8");
        String input = "hello world";
        String expected = "hello%20world";
        try {
            String result = codec.encode(input);
        } catch (EncoderException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUtf8_hAEM0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String original = "hello world";
        String expected = "hello%20world";
        String result = codec.encode(original, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_swgD1() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String original = null;
        String result = codec.encode(original, "UTF-8");
        assertNull(result);
    }

    @Test
    public void testDecodeWithUnsupportedType_xrPJ3_Cchv0() {
        URLCodec codec = new URLCodec();
        try {
            codec.decode(new Object());
            fail("Expected an exception to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_PclN0_MBBW0() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertNull(codec.decode((String) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_cYlH0_QPoG0() throws EncoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull(codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNullInput_Afep0_fSjj0() {
        byte[] input = null;
        byte[] result = null;
        try {
            result = URLCodec.decodeUrl(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }
}