/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSingleReplacement_dKPp0() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("Smith");
        assertEquals("463000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_QPFa0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "Example";
        String result = (String) soundex.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_VWkU1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        Object input = new Object();
        try {
            soundex.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_vuND0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_SkWW0() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSimpleInput_TWaR0_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Miller");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithComplexInput_nZEA1_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Schmidt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithMultipleBranches_HhEV1_fid1() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("Schmidt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSpecialCharacters_UIDS2_fid1() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("O'Conner");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonBranching_NZmG1_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String source = "Mller";
        String expected = "689000"; // Assuming "689000" is the correct encoding for "Mller"
        String result = dms.encode(source);
        assertEquals(expected, result);
    }
}