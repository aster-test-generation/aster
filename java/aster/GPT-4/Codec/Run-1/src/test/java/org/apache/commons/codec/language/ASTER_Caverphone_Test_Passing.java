/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_SameCaverphoneCode_ikrX0() {
        Caverphone caverphone = new Caverphone();
        assertTrue(caverphone.isCaverphoneEqual("Peter", "Pita"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithBasicInput_wwLJ0() {
        Caverphone caverphone = new Caverphone();
        String input = "David";
        String expected = "TFT1111111"; // Assuming expected Caverphone encoding for "David"
        String result = caverphone.caverphone(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_mAtX0_fid2() {
        Caverphone caverphone = new Caverphone();
        String input = "example";
        String expected = "AKMPA11111"; // Assuming caverphone method returns this transformed string
        String result = (String) caverphone.encode(input);
        assertEquals(expected, result);
    }
}