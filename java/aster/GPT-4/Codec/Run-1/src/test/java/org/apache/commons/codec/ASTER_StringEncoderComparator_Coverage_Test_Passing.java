/**
 * Generated by Aster
 */
package org.apache.commons.codec;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.Nysiis;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringEncoderComparator_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareWithEncoderException_FEpA0() {
        Nysiis mockEncoder = mock(Nysiis.class);
        when(mockEncoder.encode("test1")).thenThrow(new EncoderException());
        when(mockEncoder.encode("test2")).thenThrow(new EncoderException());
        StringEncoderComparator comparator = new StringEncoderComparator(mockEncoder);
        int result = comparator.compare("test1", "test2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareWithEncoderExceptionOnOneObject_aZHS1() {
        Nysiis mockEncoder = mock(Nysiis.class);
        when(mockEncoder.encode("test1")).thenThrow(new EncoderException());
        when(mockEncoder.encode("test2")).thenReturn("encodedTest2");
        StringEncoderComparator comparator = new StringEncoderComparator(mockEncoder);
        int result = comparator.compare("test1", "test2");
        assertEquals(0, result);
    }
}