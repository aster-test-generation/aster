/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceMapWithSingletonLanguageSet_XQXk0() {
        LanguageSet mockLangs = mock(LanguageSet.class);
        when(mockLangs.isSingleton()).thenReturn(true);
        when(mockLangs.getAny()).thenReturn("English");
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Map<String, List<Rule>> result = Rule.getInstanceMap(nameType, ruleType, mockLangs);
        verify(mockLangs).isSingleton();
        verify(mockLangs).getAny();
        assertNotNull(result); // This line can be adjusted based on the actual implementation details.
    }
}