/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_ycea1() throws UnsupportedEncodingException, DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encodedString = "=48=65=6C=6C=6F"; // "Hello" in quoted-printable encoding
        String result = codec.decode(encodedString, "UTF-8");
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_WXSV0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encoded = "=48=65=6C=6C=6F"; // "Hello" in quoted-printable encoding
        String expected = "Hello";
        String result = codec.decode(encoded);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharsetWithDefaultConstructor_zYka0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_sqdL1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello=3Dworld".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "hello=world".getBytes(StandardCharsets.UTF_8);
        byte[] result = (byte[]) codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_yLJB2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello=3Dworld";
        String expected = "hello=world";
        String result = (String) codec.decode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObject_keSL3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        assertThrows(DecoderException.class, () -> codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_yWJk1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = {65, 66, 67}; // ABC
        byte[] expected = {65, 66, 67}; // ABC in quoted-printable is still ABC since they are simple ASCII characters
        assertArrayEquals(expected, (byte[]) codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_qJLG2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "ABC";
        String expected = "ABC"; // ABC in quoted-printable is still ABC since they are simple ASCII characters
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_Gaaa0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, StandardCharsets.UTF_8);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyString_bLkF1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_zYqR0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Charset expectedCharset = Charset.defaultCharset();
        Charset actualCharset = codec.getCharset();
        assertEquals(expectedCharset, actualCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNullBytes_iDMz0() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, null, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableNonStrict_LCSl4() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {100}; // 'd' is not printable as per BitSet setup
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 0); // Should encode 'd' to =64
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintablePrintableNonStrict_FSVz5() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {'a'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(1, result.length); // Should not encode 'a'
        assertEquals('a', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithSpaceNonStrict_gsfd7() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = {' '};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(1, result.length); // Space should not be encoded if it's marked as printable
        assertEquals(' ', result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNewLineNonStrict_iajq9() {
        BitSet printable = new BitSet();
        printable.set('\n');
        byte[] bytes = {'\n'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 0); // New line should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithCarriageReturnNonStrict_chvo11() {
        BitSet printable = new BitSet();
        printable.set('\r');
        byte[] bytes = {'\r'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 0); // Carriage return should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceNonStrict_URVF13() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(100, result.length); // Long sequence of 'a' should not be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSpecialCharsStrict_hvqo14() {
        BitSet printable = new BitSet();
        printable.set('!');
        byte[] bytes = {'!', '=', '?'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3); // Special chars should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSpecialCharsNonStrict_fpfa15() {
        BitSet printable = new BitSet();
        printable.set('!');
        byte[] bytes = {'!', '=', '?'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 3); // Special chars should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableBoundaryConditionNonStrict_XYBd17() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(76, result.length); // Boundary condition check for line length
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNegativeByteValueNonStrict_FrfX19() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 0x85}; // Negative in signed byte representation
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 1); // Should encode negative byte value
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceNonPrintableStrict_FofH7() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // Fill with 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceHandlingStrict_fIVi8() {
        BitSet printable = new BitSet();
        printable.set(32); // Space is printable
        byte[] bytes = {32, 32, 32}; // Spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContentStrict_xDym11() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65, 13, 10, 66}; // 'A', CR, LF, 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintableNonStrict_Ruyh12() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {66}; // 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintableNonStrict_Mtoc13() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65}; // 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesAllPrintableNonStrict_eGbw14() {
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesMixedPrintableNonStrict_llih15() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequencePrintableNonStrict_XSjX16() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 65); // Fill with 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(100, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceNonPrintableNonStrict_lzNM17() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // Fill with 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceHandlingNonStrict_IhOs18() {
        BitSet printable = new BitSet();
        printable.set(32); // Space is printable
        byte[] bytes = {32, 32, 32}; // Spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NewlineHandlingNonStrict_XKjS19() {
        BitSet printable = new BitSet();
        printable.set(10); // LF is printable
        byte[] bytes = {10, 10, 10}; // Newlines
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleCharacter_tGFo2() {
        byte[] input = {'a'};
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableCharacter_dFKQ3() {
        byte[] input = {(byte) 128};
        BitSet printable = new BitSet();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotEquals(input, result);
        assertTrue(result.length > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleCharacters_hoQx4() {
        byte[] input = "hello".getBytes();
        BitSet printable = new BitSet();
        for (byte b : input) {
            printable.set(b);
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharacters_XXzc5() {
        byte[] input = {'@', '#', '$'};
        BitSet printable = new BitSet();
        printable.set('@');
        printable.set('#');
        printable.set('$');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_IncludeNonPrintable_rRXQ6() {
        byte[] input = {'@', 0x01, '$'};
        BitSet printable = new BitSet();
        printable.set('@');
        printable.set('$');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotEquals(input, result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AllNonPrintable_WqKd7() {
        byte[] input = {0x01, 0x02, 0x03};
        BitSet printable = new BitSet();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeShortInput_HuTF9() {
        byte[] input = {'a'};
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LineBreaksInStrictMode_pbbu11() {
        byte[] input = new byte[80];
        Arrays.fill(input, (byte) 'a');
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(new String(result).contains("\r\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableAtEnd_McJY12() {
        byte[] input = "test\u0001".getBytes();
        BitSet printable = new BitSet();
        printable.set('t');
        printable.set('e');
        printable.set('s');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContent_BliY13() {
        byte[] input = "Hello, world!\n".getBytes();
        BitSet printable = new BitSet();
        for (byte b : input) {
            printable.set(b);
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ExtendedAscii_KRSg14() {
        byte[] input = {(byte) 0x80, (byte) 0x81, (byte) 0x82};
        BitSet printable = new BitSet();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ControlCharacters_UMrg15() {
        byte[] input = {0x07, 0x08, 0x09};
        BitSet printable = new BitSet();
        printable.set(0x09); // Tab is often allowed
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_HighAscii_KTbh16() {
        byte[] input = {(byte) 0xE0, (byte) 0xE1, (byte) 0xE2};
        BitSet printable = new BitSet();
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_FullRange_pWGe17() {
        byte[] input = new byte[256];
        for (int i = 0; i < 256; i++) {
            input[i] = (byte) i;
        }
        BitSet printable = new BitSet();
        for (int i = 32; i < 127; i++) {
            printable.set(i);
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleSpace_StrictFalse_BEvg3() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{' '}, false);
        assertArrayEquals(new byte[]{' '}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableCharacter_StrictFalse_BAmB4() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{(byte) 128}, false);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequence_StrictFalse_Uzbn7() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_StrictTrue_onOY8() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'a', ' ', '\t'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_TabCharacter_StrictFalse_VwsD11() {
        BitSet printable = new BitSet();
        printable.set('\t');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, new byte[]{'\t'}, false);
        assertArrayEquals(new byte[]{'\t'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CRLFSequence_StrictTrue_jaLE12() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'C', 'R', '\r', '\n', 'L', 'F'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialChars_StrictFalse_qNKV15() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = new byte[]{'%', '=', '?'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContent_StrictTrue_wiAN16() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Hello, World!\n".getBytes(StandardCharsets.US_ASCII);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonAsciiCharacters_StrictTrue_FQUQ18() {
        BitSet printable = new BitSet();
        printable.set(32, 127);
        byte[] bytes = "Caf ".getBytes(StandardCharsets.UTF_8);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_kAfz1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, new byte[0], true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_FTlT2() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 128};
        byte[] expected = {'=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintable_RgSG3() {
        BitSet printable = new BitSet();
        printable.set(97);
        byte[] bytes = {'a'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleNonPrintable_cmai4() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 150, (byte) 160};
        byte[] expected = {'=', '9', '6', '=', 'A', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedPrintableNonPrintable_YKUS5() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = {'a', (byte) 150};
        byte[] expected = {'a', '=', '9', '6'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AllPrintable_KaKF6() {
        BitSet printable = new BitSet();
        printable.set('a');
        printable.set('b');
        byte[] bytes = {'a', 'b'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeShortInput_Mckk7() {
        BitSet printable = new BitSet();
        byte[] bytes = {'a', 'b'}; // less than MIN_BYTES
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeNonPrintable_UYig9() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 150);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeMixedContent_Lppk10() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        bytes[50] = (byte) 150;
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > bytes.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonStrictWhitespace_GTNJ11() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = {' '};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonStrictTab_uPTA12() {
        BitSet printable = new BitSet();
        printable.set('\t');
        byte[] bytes = {'\t'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonStrictNewLine_qUXi15() {
        BitSet printable = new BitSet();
        printable.set('\n');
        byte[] bytes = {'\n'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonStrictCarriageReturn_VAhB17() {
        BitSet printable = new BitSet();
        printable.set('\r');
        byte[] bytes = {'\r'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonStrictMultipleSpecialChars_asjG19() {
        BitSet printable = new BitSet();
        byte[] bytes = {'=', '\n', '\r'};
        byte[] expected = {'=', '3', 'D', '=', '0', 'A', '=', '0', 'D'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeMultipleSpecialChars_hHru20() {
        BitSet printable = new BitSet();
        byte[] bytes = {'=', '\n', '\r'};
        byte[] expected = {'=', '3', 'D', '=', '0', 'A', '=', '0', 'D'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithInvalidEncodedChars_nLPM3() {
        byte[] input = "invalid=ZZencoding".getBytes(StandardCharsets.US_ASCII);
        assertThrows(DecoderException.class, () -> {
            QuotedPrintableCodec.decodeQuotedPrintable(input);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableWithEndOfArrayIssue_NTBp6() {
        byte[] input = "unexpected_end=".getBytes(StandardCharsets.US_ASCII);
        assertThrows(DecoderException.class, () -> {
            QuotedPrintableCodec.decodeQuotedPrintable(input);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_rbWb0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello=20world".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "hello world".getBytes(StandardCharsets.UTF_8);
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_paFy1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = null;
        String result = codec.encode(input, "UTF-8");
        assertEquals(null, result);
    }
}