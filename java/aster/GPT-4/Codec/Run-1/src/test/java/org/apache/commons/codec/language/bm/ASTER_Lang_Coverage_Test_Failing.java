/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Lang_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_ReturnAnyLanguage_vYQf2_JhiL0() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languages/LangRules.txt", languages);
        Languages.LanguageSet result = lang.guessLanguages("This text could be in any language.");
        assertTrue(result.isSingleton());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguage_SingletonLanguageSet_MerS0_VxPU0() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("correctResourceName", languages); // Corrected resource name
        String testText = "This is a test text in English.";
        Languages.LanguageSet mockLanguageSet = mock(Languages.LanguageSet.class);
        when(mockLanguageSet.isSingleton()).thenReturn(true);
        when(mockLanguageSet.getAny()).thenReturn("English");
        Lang spyLang = spy(lang);
        doReturn(mockLanguageSet).when(spyLang).guessLanguages(testText);
        String result = spyLang.guessLanguage(testText);
        assertEquals("English", result); // Corrected expected value
        verify(mockLanguageSet).isSingleton();
        verify(mockLanguageSet).getAny();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_RetainLanguages_HBdN0_YEYa0_2() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languages/LangRules.txt", languages); // Assuming correct resource name
        Languages.LanguageSet result = lang.guessLanguages("This is a test sentence in English and Spanish.");
        assertTrue(result.isSingleton() && result.getAny().contains("spanish"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_RetainLanguages_HBdN0_YEYa0_3() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("correctResourceName", languages);
        Languages.LanguageSet result = lang.guessLanguages("This is a test sentence in English and Spanish.");
        assertTrue(result.getAny().contains("english") || result.getAny().contains("spanish"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_ReturnAnyLanguage_vYQf2_JhiL0_fid3() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languageRulesResourceName", languages);
        Languages.LanguageSet result = lang.guessLanguages("This text could be in any language.");
        assertEquals(Languages.ANY_LANGUAGE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguage_SingletonLanguageSet_MerS0_VxPU0_fid3() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languageRulesResourceName", languages);
        String testText = "This is a test text in English.";
        Languages.LanguageSet mockLanguageSet = mock(Languages.LanguageSet.class);
        when(mockLanguageSet.isSingleton()).thenReturn(true);
        when(mockLanguageSet.getAny()).thenReturn("English");
        Lang spyLang = spy(lang);
        doReturn(mockLanguageSet).when(spyLang).guessLanguages(testText);
        String result = spyLang.guessLanguage(testText);
        assertEquals("English", result);
        verify(mockLanguageSet).isSingleton();
        verify(mockLanguageSet).getAny();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_RetainLanguages_HBdN0_YEYa0_1() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languageRulesResourceName", languages);
        Languages.LanguageSet result = lang.guessLanguages("This is a test sentence in English and Spanish.");
        assertTrue(result.getAny().contains("english"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_RetainLanguages_HBdN0_YEYa0_2_fid3() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languageRulesResourceName", languages);
        Languages.LanguageSet result = lang.guessLanguages("This is a test sentence in English and Spanish.");
        assertTrue(result.getAny().contains("spanish"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGuessLanguages_RetainLanguages_HBdN0_YEYa0_3_fid3() {
        Languages languages = Languages.getInstance(NameType.GENERIC);
        Lang lang = Lang.loadFromResource("languageRulesResourceName", languages);
        Languages.LanguageSet result = lang.guessLanguages("This is a test sentence in English and Spanish.");
        assertFalse(result.getAny().contains("french"));
    }
}