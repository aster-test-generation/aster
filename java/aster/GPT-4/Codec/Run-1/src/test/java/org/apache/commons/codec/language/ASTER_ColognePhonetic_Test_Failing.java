/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_GermanUmlauts_tnfT7() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0", cp.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ComplexString_EGGu8() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("486", cp.colognePhonetic("Schmidt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_IgnoreNonAlphabetic_BIsu9() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("M3N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_PhoneticSimilarity_HSIJ12() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("178", cp.colognePhonetic("Raphael"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ExtendedCharacters_LvXb13() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("486", cp.colognePhonetic("Schn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_LeadingTrailingSpaces_NQqR14() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic(" N "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_MultipleWords_XnRq15() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("0606", cp.colognePhonetic("Na Ne"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_LongString_KqDf16() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("068486", cp.colognePhonetic("Nachname"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_MixedUmlauts_NvyU19() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("084", cp.colognePhonetic(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_SpecialAndAlphabetic_GztJ20() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("N#N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_DigitsAndLetters_hTIn21() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("06", cp.colognePhonetic("N2N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_CombinationOfRules_wZtR23() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("08406", cp.colognePhonetic("UM"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_ComplexNames_TpLe24() {
        ColognePhonetic cp = new ColognePhonetic();
        assertEquals("064", cp.colognePhonetic("Mller"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_uiKn1_Geib0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        Object input = "123"; // Changed from new Integer(123) to "123" to match the expected input type String
        assertThrows(EncoderException.class, () -> {
            colognePhonetic.encode((String) input); // Explicitly cast input to String
        });
    }
}