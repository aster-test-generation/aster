/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_QWpI0() throws DecoderException {
        byte[] input = "hello+world".getBytes();
        byte[] expected = "hello world".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNullInput_PNDU1() throws DecoderException {
        assertNull(URLCodec.decodeUrl(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Petv1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test%20string".getBytes();
        byte[] expected = "test string".getBytes(); // Assuming URL decoding is implemented correctly
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_MMRb2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "test%20string";
        String expected = "test string"; // Assuming URL decoding is implemented correctly
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_kzNK4() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertEquals("", codec.decode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_rMbe5() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        assertArrayEquals(new byte[0], (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_kwsK1_1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "testString".getBytes();
        Object result = codec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_kwsK1_2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "testString".getBytes();
        Object result = codec.encode(input);
        assertFalse(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_xPsQ2_1() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "testString";
        Object result = codec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_xPsQ2_2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "testString";
        Object result = codec.encode(input);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_Fuzp4_1() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        Object result = codec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_Fuzp4_2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        Object result = codec.encode(input);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_eFVw5_1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        Object result = codec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNullUrlSafe_tfSf0() {
        byte[] inputBytes = "test input".getBytes();
        byte[] encodedBytes = URLCodec.encodeUrl(null, inputBytes);
        String expectedOutput = "test+input"; // This is a simplified assumption
        byte[] expectedBytes = expectedOutput.getBytes();
        assertArrayEquals(expectedBytes, encodedBytes);
    }

    @Test
    public void testDecodeWithUnsupportedObject_QryT3_ekMk0() {
        URLCodec codec = new URLCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testDecodeUrlWithIncompleteEscapeSequence_QoIM2_mUjc0() {
        byte[] input = "hello%".getBytes();
        assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(input));
    }

    @Test
    public void testDecodeWithUnsupportedEncoding_gCnC0_zYku0() {
        URLCodec codec = new URLCodec("unsupported-charset");
        try {
            codec.decode("test%20string");
            fail("Expected DecoderException was not thrown.");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testDecodeUrlWithInvalidHexInEscapeSequence_lPAm3_KHod0() {
        byte[] input = "hello%2Gworld".getBytes();
        try {
            URLCodec.decodeUrl(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_oQUX0_PLWP0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = codec.encode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    public void testEncode_UnsupportedEncoding_ThrowsEncoderException_XBQe1_pcYt0() {
        URLCodec codec = new URLCodec("unsupported-charset");
        try {
            codec.encode("test string", "unsupported-charset");
            fail("Expected an UnsupportedEncodingException to be thrown");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_XiGY1_oXVJ0() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertNull(codec.decode((String) null));
    }

    @Test
    public void testEncodeWithUnsupportedObject_eYpi3_vGUQ0() {
        URLCodec codec = new URLCodec();
        String input = "test";
        try {
            codec.encode(input, "unsupported-charset");
            fail("Expected UnsupportedEncodingException to be thrown");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_xPsQ2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "testString";
        Object result = codec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_Fuzp4() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        Object result = codec.encode(input);
        assertNotNull(result);
        assertEquals("", result);
    }
}