/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_AeDB0() {
        Soundex soundex = new Soundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_gKqK0() {
        Soundex soundex = new Soundex();
        String input = "example";
        String expectedOutput = "E251"; // Assuming soundex method works correctly and this is the expected output for "example"
        String result = soundex.encode(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthPositive_AONn0() {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(10);
        assertEquals(10, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxLengthZero_dRtN1() {
        Soundex soundex = new Soundex();
        soundex.setMaxLength(0);
        assertEquals(0, soundex.getMaxLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_dUop1() throws EncoderException {
        Soundex soundex = new Soundex();
        String input = "Example";
        String expected = "E251"; // Assuming soundex method works correctly and returns "E251" for "Example"
        assertEquals(expected, soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexCalculation_hRyC0() {
        Soundex soundex = new Soundex("01230120022455012623010202");
        String result = soundex.soundex("A");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharacterMappedSuccessfully_HPLm4() {
        Soundex soundex = new Soundex("01230120022455012623010202");
        String result = soundex.soundex("B");
        assertEquals("B000", result);
    }

    @Test
    public void testIndexBelowRange_wjQZ1_MCTl0() {
        Soundex soundex = new Soundex("01230120022455012623010202");
        String result = soundex.encode("@"); // '@' is before 'A' in ASCII, so index will be negative
        assertEquals("", result); // Assuming the method handles non-alphabetic characters by returning an empty string
    }
}