/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    public void testEncodeWithUnsupportedType_fUUh2_ADOB0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = "This is a string".getBytes();
        byte[] output = codec.encode(input);
        assertNotNull(output);
    }

    @Test
    public void testEncodeWithInteger_NlmY3_qUUG0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = {123};
        byte[] expected = {123};
        assertArrayEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_SGuW0_dyIR0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        assertNull(codec.decode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Ecnk1_kKeZ0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = {65, 66, 67}; // Corresponds to "ABC"
        byte[] expected = {65, 66, 67}; // Expected output, assuming decode method correctly handles byte arrays
        Assertions.assertArrayEquals(expected, (byte[]) codec.decode(input), "Decoding byte array should return the same byte array");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_ntSB3_YmcT0() throws DecoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[0]; // Empty byte array
        byte[] expected = new byte[0]; // Expected output, should also be an empty byte array
        Assertions.assertArrayEquals(expected, (byte[]) codec.decode(input), "Decoding empty byte array should return an empty byte array");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_uoWQ0_mgAz0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_uEUA1_xpew0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = {'a', 'b', 'c'};
        byte[] expectedOutput = {'a', 'b', 'c'};
        byte[] result = codec.encode(input);
        assertArrayEquals(expectedOutput, result, "Encoding byte array should return encoded byte array");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_kMqH0_ZLNq0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = null;
        byte[] result = codec.encode(input);
        assertNull(result, "Encoding null should return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoSpaceInBytes_ReturnsSameArray_mnPa1_fgsP0() throws EncoderException {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{'a', 'b', 'c'}; // No space character
        byte[] result = codec.encode(input);
        assertArrayEquals(input, result, "Encoding array without space should return the same array");
    }
}