/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqualWithSimilarPhoneticStrings_ImQN0() throws Exception {
        Caverphone caverphone = new Caverphone();
        assertTrue(caverphone.isCaverphoneEqual("Peter", "Piter"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphoneWithValidInput_mVBE0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String input = "example";
        String expected = "example"; // Expected should be the encoded form of "example"
        String result = caverphone.caverphone(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_rElJ0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String input = "example";
        String expected = "example"; // Assuming caverphone method returns the same string for simplicity
        String result = (String) caverphone.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSimpleWord_dPdX0() throws Exception {
        Caverphone caverphone = new Caverphone();
        String input = "Alexander";
        String expected = "ALKLNTR111";
        String result = caverphone.encode(input);
        assertEquals(expected, result);
    }
}