/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_BaseNCodecInputStream_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadReturnsPositiveByte_Zrol0() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(1);
        when(mockInputStream.read()).thenReturn(100); // A positive byte value
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(100, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadReturnsNegativeByteConverted_Lnth1() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(1);
        when(mockInputStream.read()).thenReturn(-100); // A negative byte value
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(156, result); // 256 - 100
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadReturnsEOF_Oaib2() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithZeroBytesReadInitially_emjg3() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(0).thenReturn(1);
        when(mockInputStream.read()).thenReturn(50);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(50, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithMultipleZeroBytesRead_sMac4() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(0).thenReturn(0).thenReturn(1);
        when(mockInputStream.read()).thenReturn(50);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(50, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithImmediateZeroByteRead_HwLF5() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(0).thenReturn(1);
        when(mockInputStream.read()).thenReturn(0);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithImmediateEOFAfterZeroRead_qJGL6() throws IOException {
        InputStream mockInputStream = mock(InputStream.class);
        Base32 mockBase32 = mock(Base32.class);
        when(mockInputStream.read(any(byte[].class), eq(0), eq(1))).thenReturn(0).thenReturn(-1);
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(mockInputStream, mockBase32, false);
        int result = baseNCodecInputStream.read();
        assertEquals(-1, result);
    }
}