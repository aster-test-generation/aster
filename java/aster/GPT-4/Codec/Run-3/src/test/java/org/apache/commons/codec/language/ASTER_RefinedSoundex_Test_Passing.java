/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NullInput_DwSA0() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_EmptyString_sqsF1() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SingleCharacter_RenS2() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex("A");
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SameCharacters_mgtL3() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex("AAAA");
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_DifferentCharacters_Dtws4() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex("ABCD");
        assertEquals("ABCD", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_ComplexString_RAye5() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String result = rs.soundex("Cabbage");
        assertEquals("CBG", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithSameStrings_PxIU0() throws EncoderException {
        RefinedSoundex rs = new RefinedSoundex();
        String s1 = "hello";
        String s2 = "hello";
        int result = rs.difference(s1, s2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_KOlN0() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String input = "Example";
        String expected = "E251"; // Assuming soundex method works correctly and returns this value for "Example"
        String result = (String) rs.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBasic_sKmA0() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        String input = "Example";
        String expected = "E251"; // Assuming 'E251' is the correct encoding for "Example" based on the soundex algorithm
        String result = rs.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_NonLetter_xbje0() throws Exception {
        RefinedSoundex rs = new RefinedSoundex();
        char result = rs.getMappingCode('1');
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_UppercaseLetter_LhPq1() throws Exception {
        RefinedSoundex rs = new RefinedSoundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        char result = rs.getMappingCode('A');
        assertEquals('A', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_LowercaseLetter_rhuJ2() throws Exception {
        RefinedSoundex rs = new RefinedSoundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        char result = rs.getMappingCode('a');
        assertEquals('A', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_OutOfRangeLetter_QbYU3() throws Exception {
        RefinedSoundex rs = new RefinedSoundex(new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'});
        char result = rs.getMappingCode('@');
        assertEquals(0, result);
    }
}