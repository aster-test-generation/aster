/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8WithNonNullBytes_OeTz0() throws Exception {
        byte[] bytes = "hello".getBytes(StandardCharsets.UTF_8);
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16WithNonNullString_EmsY0() throws Exception {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_16);
        byte[] resultBytes = StringUtils.getBytesUtf16(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_lMjQ0() throws Exception {
        String input = "Hello World";
        byte[] expected = input.getBytes(StandardCharsets.ISO_8859_1);
        byte[] result = StringUtils.getBytesIso8859_1(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_withSimpleString_swhG0() throws Exception {
        String testString = "Hello";
        byte[] expected = new byte[]{72, 0, 101, 0, 108, 0, 108, 0, 111, 0};
        byte[] result = StringUtils.getBytesUtf16Le(testString);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_FAQv0() throws Exception {
        byte[] bytes = new byte[]{0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00}; // "Hello" in UTF-16LE
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_withValidBytes_kKIX0() throws Exception {
        byte[] bytes = new byte[]{0, 72, 0, 101, 0, 108, 0, 108, 0, 111}; // UTF-16 encoding for "Hello"
        String result = StringUtils.newStringUtf16(bytes);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBothNull_rHZV0() throws Exception {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirstNullSecondNotNull_zOIe1() throws Exception {
        assertFalse(StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirstNotNullSecondNull_vTCM2() throws Exception {
        assertFalse(StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBothEmpty_Bkrp3() throws Exception {
        assertTrue(StringUtils.equals("", ""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSameString_QaNU4() throws Exception {
        assertTrue(StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferentStrings_zCsZ5() throws Exception {
        assertFalse(StringUtils.equals("test", "best"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSameLengthDifferentChars_Wfih6() throws Exception {
        assertFalse(StringUtils.equals("test", "tost"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferentObjectsSameContent_sxLF7() throws Exception {
        StringBuilder sb1 = new StringBuilder("test");
        StringBuilder sb2 = new StringBuilder("test");
        assertTrue(StringUtils.equals(sb1, sb2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_withNonNullString_YhkL0_1() throws Exception {
        String testString = "Hello, world!";
        ByteBuffer expected = ByteBuffer.wrap(testString.getBytes(StandardCharsets.UTF_8));
        ByteBuffer result = StringUtils.getByteBufferUtf8(testString);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_withNonNullString_YhkL0_2() throws Exception {
        String testString = "Hello, world!";
        ByteBuffer expected = ByteBuffer.wrap(testString.getBytes(StandardCharsets.UTF_8));
        ByteBuffer result = StringUtils.getByteBufferUtf8(testString);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_Jxyj0() throws Exception {
        String testString = "Hello World";
        byte[] expectedBytes = new byte[]{(byte) 0x00, (byte) 0x48, (byte) 0x00, (byte) 0x65, (byte) 0x00, (byte) 0x6C, (byte) 0x00, (byte) 0x6C, (byte) 0x00, (byte) 0x6F, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x57, (byte) 0x00, (byte) 0x6F, (byte) 0x00, (byte) 0x72, (byte) 0x00, (byte) 0x6C, (byte) 0x00, (byte) 0x64};
        byte[] resultBytes = StringUtils.getBytesUtf16Be(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_ValidBytes_IyYw0() throws Exception {
        byte[] bytes = {104, 101, 108, 108, 111}; // byte representation of "hello"
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_iRAn0() throws Exception {
        String testString = "Hello";
        byte[] expected = new byte[]{72, 101, 108, 108, 111};
        byte[] result = StringUtils.getBytesUsAscii(testString);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithValidCharset_IQHb0() throws Exception {
        byte[] bytes = "Hello World".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUncheckedWithValidCharset_mTsZ0() throws Exception {
        String testString = "Hello World";
        String charsetName = "UTF-8";
        byte[] result = StringUtils.getBytesUnchecked(testString, charsetName);
        assertArrayEquals(testString.getBytes(charsetName), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_withSimpleString_srdg0() throws Exception {
        String input = "Hello, World!";
        byte[] expected = input.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_withValidBytes_XkPm0() throws Exception {
        byte[] bytes = new byte[]{(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x62}; // UTF-16BE encoding for "ab"
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("ab", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_withValidAsciiBytes_xAgM0() throws Exception {
        byte[] asciiBytes = "Hello, ASCII!".getBytes(StandardCharsets.US_ASCII);
        String result = StringUtils.newStringUsAscii(asciiBytes);
        assertEquals("Hello, ASCII!", result);
    }
}