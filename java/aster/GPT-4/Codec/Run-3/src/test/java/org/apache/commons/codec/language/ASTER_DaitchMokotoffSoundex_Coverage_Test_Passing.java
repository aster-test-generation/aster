/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithWhitespace_zewW0_1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("John Smith");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithWhitespace_zewW0() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("John Smith");
        assertNotNull(result);
        assertTrue(result.contains("|")); // Assuming '|' separates multiple branches
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexBranchingTrue_kuhu2() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Wojciech");
        assertNotNull(result);
        assertTrue(result.contains("|")); // Assuming branching occurs with multiple soundex codes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoBranchingWithSingleReplacement_XIoz5() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(false);
        String result = dms.soundex("Smith");
        assertNotNull(result);
        assertFalse(result.contains("|")); // Assuming no branching with single replacement
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexForceConditionNotMet_hFNP7() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Smith");
        assertNotNull(result);
        assertFalse(result.contains("|")); // Assuming force condition not met does not cause branching
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexBranchingRequired_YidC8() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Schwarz");
        assertNotNull(result);
        assertTrue(result.contains("|")); // Assuming branching required due to multiple replacements
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexBranchingNotRequired_dOOa9() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Smith");
        assertNotNull(result);
        assertFalse(result.contains("|")); // Assuming branching not required due to single replacement
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexNoBranchingWithEmptyList_xnhF12() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(false);
        String result = dms.soundex("Smith");
        assertNotNull(result);
        assertFalse(result.contains("|")); // Assuming no branching with empty list
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithWhitespace_XXPt0() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex(" John ");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexBranchingTrue_ezps2() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("Branching");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithBranchingRequired_SqGv4() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("Mnemonics");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithoutBranchingRequired_bigc5() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("Mnemonic");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexForceConditionTrue_zrWX6() {
        DaitchMokotoffSoundex dmSoundex = new DaitchMokotoffSoundex();
        String result = dmSoundex.soundex("mnemonic");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_ONpV1() throws EncoderException {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "Example";
        assertNotNull(soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_goQb0() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode(null);
        assertNull(result, "Encoding null should return null.");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyString_WpNx2() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode("example");
        assertNotNull(result, "Encoding a non-empty string should not return null.");
    }
}