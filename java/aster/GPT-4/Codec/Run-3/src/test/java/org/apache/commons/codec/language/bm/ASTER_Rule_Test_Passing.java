/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyLanguageSet_OMDG0() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        LanguageSet languageSet = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_EPOs1() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>();
        languages.add("English");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguages_ldoN2() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>();
        languages.add("French");
        languages.add("Spanish");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNonEmptyRules_OEQI3() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>();
        languages.add("German");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyRules_TlNa4() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        LanguageSet languageSet = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingletonLanguageSet_ZSAv5_1() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>();
        languages.add("Italian");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingletonLanguageSet_ZSAv5_2() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>();
        languages.add("Italian");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertEquals(1, languageSet.getAny().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguagesAndEmptyRules_fBZZ6() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>();
        languages.add("Russian");
        languages.add("Chinese");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNoMatchingRules_AMxO7() throws Exception {
        NameType nameType = NameType.ASHKENAZI;
        RuleType ruleType = RuleType.APPROX;
        Set<String> languages = new HashSet<>();
        languages.add("Korean");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguagesIncludingEmpty_uqsc8() throws Exception {
        NameType nameType = NameType.SEPHARDIC;
        RuleType ruleType = RuleType.RULES;
        Set<String> languages = new HashSet<>();
        languages.add("Japanese");
        languages.add("");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAllTypes_XYyv9() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        Set<String> languages = new HashSet<>();
        languages.add("English");
        languages.add("French");
        languages.add("German");
        LanguageSet languageSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(nameType, ruleType, languageSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_zqLn0() throws Exception {
        NameType nameType = NameType.GENERIC;
        RuleType ruleType = RuleType.EXACT;
        String language = "English";
        List<Rule> result = Rule.getInstance(nameType, ruleType, language);
    }
}