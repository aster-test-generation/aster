/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidInputs_ndLB0() throws Exception {
        String original = "password";
        String salt = "salt";
        String expectedOutput = "someExpectedHash"; // Replace with the expected hash output for the given inputs
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullInput_tnQw0() throws Exception {
        byte[] input = null;
        String result = UnixCrypt.crypt(input);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_NFnn0_1() throws Exception {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_NFnn0_2() throws Exception {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_mIxA1_1() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_mIxA1_2() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_nEtl2_1() throws Exception {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_nEtl2_2() throws Exception {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_JNgg4_1() throws Exception {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_JNgg4_2() throws Exception {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_abks5_1() throws Exception {
        byte[] original = "psswrd".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_abks5_2() throws Exception {
        byte[] original = "psswrd".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_CLOt6_1() throws Exception {
        byte[] original = new byte[8];
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_CLOt6_2() throws Exception {
        byte[] original = new byte[8];
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_uSoG7_1() throws Exception {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_uSoG7_2() throws Exception {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_WiBI8_1() throws Exception {
        byte[] original = "12345678".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_WiBI8_2() throws Exception {
        byte[] original = "12345678".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_UaLb3_1() throws Exception {
        byte[] original = "".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_UaLb3_2() throws Exception {
        byte[] original = "".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_EizK4_1() throws Exception {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_EizK4_2() throws Exception {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_dwYR5_1() throws Exception {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_dwYR5_2() throws Exception {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_XLgX6_1() throws Exception {
        byte[] original = "psswrd".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_XLgX6_2() throws Exception {
        byte[] original = "psswrd".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_VLke7_1() throws Exception {
        byte[] original = "pass1234".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_VLke7_2() throws Exception {
        byte[] original = "pass1234".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_usbh8_1() throws Exception {
        byte[] original = "p@ss#w0rd!".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_usbh8_2() throws Exception {
        byte[] original = "p@ss#w0rd!".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_eidm3_1() throws Exception {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_eidm3_2() throws Exception {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_SKnX5_1() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalusage".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_SKnX5_2() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalusage".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroBytesOriginal_uhsH6_1() throws Exception {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroBytesOriginal_uhsH6_2() throws Exception {
        byte[] original = new byte[8];
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllOneBytesOriginal_xrYw7_1() throws Exception {
        byte[] original = {1, 1, 1, 1, 1, 1, 1, 1};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllOneBytesOriginal_xrYw7_2() throws Exception {
        byte[] original = {1, 1, 1, 1, 1, 1, 1, 1};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_KmDy8_1() throws Exception {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_KmDy8_2() throws Exception {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_Tilf4_1() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalbounds".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_Tilf4_2() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedstypicalbounds".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericPassword_TvIl6_1() throws Exception {
        byte[] original = "12345678".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericPassword_TvIl6_2() throws Exception {
        byte[] original = "12345678".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterPassword_klFw8_1() throws Exception {
        byte[] original = "a".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterPassword_klFw8_2() throws Exception {
        byte[] original = "a".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_bRxX4_1() throws Exception {
        byte[] original = "verylongpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_bRxX4_2() throws Exception {
        byte[] original = "verylongpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_zcLW5_1() throws Exception {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_zcLW5_2() throws Exception {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_AGea4_1() throws Exception {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_AGea4_2() throws Exception {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_ZTUH5_1() throws Exception {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_ZTUH5_2() throws Exception {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_pNja1_2() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertTrue(result.length() > 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_TpTV4_1() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_TpTV4_2() throws Exception {
        byte[] original = "thisisaverylongpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_PTHl5_1() throws Exception {
        byte[] original = "p@ssw0rd$".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_PTHl5_2() throws Exception {
        byte[] original = "p@ssw0rd$".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltBoundaryCharacters_mEsP7_1() throws Exception {
        byte[] original = "boundary".getBytes();
        String salt = "./";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSaltBoundaryCharacters_mEsP7_2() throws Exception {
        byte[] original = "boundary".getBytes();
        String salt = "./";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("./"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthSalt_vCoP8_1() throws Exception {
        byte[] original = "maxsalt".getBytes();
        String salt = "zZ";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthSalt_vCoP8_2() throws Exception {
        byte[] original = "maxsalt".getBytes();
        String salt = "zZ";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("zZ"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_nOnZ1_1() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_nOnZ1_2() throws Exception {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, "ab");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_pqnN3_1() throws Exception {
        byte[] original = "".getBytes();
        String result = UnixCrypt.crypt(original, "xy");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_pqnN3_2() throws Exception {
        byte[] original = "".getBytes();
        String result = UnixCrypt.crypt(original, "xy");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharOriginal_iRwK4_1() throws Exception {
        byte[] original = "a".getBytes();
        String result = UnixCrypt.crypt(original, "st");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharOriginal_iRwK4_2() throws Exception {
        byte[] original = "a".getBytes();
        String result = UnixCrypt.crypt(original, "st");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_PtzJ5_1() throws Exception {
        byte[] original = "longpasswordthatexceeds".getBytes();
        String result = UnixCrypt.crypt(original, "mn");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_PtzJ5_2() throws Exception {
        byte[] original = "longpasswordthatexceeds".getBytes();
        String result = UnixCrypt.crypt(original, "mn");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOutputFormat_DYtN6_1() throws Exception {
        byte[] original = "format".getBytes();
        String result = UnixCrypt.crypt(original, "cd");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOutputFormat_DYtN6_2() throws Exception {
        byte[] original = "format".getBytes();
        String result = UnixCrypt.crypt(original, "cd");
        assertTrue(result.matches("^[a-zA-Z0-9./]{13}$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_QcNT7_1() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ef");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_QcNT7_2() throws Exception {
        byte[] original = new byte[8];
        String result = UnixCrypt.crypt(original, "ef");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_yYgP8_1() throws Exception {
        byte[] original = new byte[]{(byte) 0xE2, (byte) 0x98, (byte) 0xA0};
        String result = UnixCrypt.crypt(original, "gh");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_yYgP8_2() throws Exception {
        byte[] original = new byte[]{(byte) 0xE2, (byte) 0x98, (byte) 0xA0};
        String result = UnixCrypt.crypt(original, "gh");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_TRll0_1() throws Exception {
        String original = "hello";
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_TRll0_2() throws Exception {
        String original = "hello";
        String result = UnixCrypt.crypt(original);
        assertNotEquals(original, result);
    }
}