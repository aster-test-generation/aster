/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLang_fADk0() throws Exception {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true);
        Lang result = phoneticEngine.getLang();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleTypeReturnsExact_trTw0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true);
        assertEquals(RuleType.EXACT, engine.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes_pIuv0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 5);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(5, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcatTrue_OiNz0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        assertTrue(engine.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameTypeReturnsAshkenazi_oRmz0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        assertEquals(NameType.ASHKENAZI, engine.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_qqUg0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true);
        String input = "example";
        String expected = "example"; // Assuming encode method returns the input for demonstration
        String result = engine.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAshkenaziExactConcatenate_QQYd0() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("English")));
        String result = engine.encode("Schmidt", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAshkenaziApproxNonConcatenate_uYgv1() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("German")));
        String result = engine.encode("Mller", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSephardicRulesConcatenate_vWkn2() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.RULES, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Spanish")));
        String result = engine.encode("Garca", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithGenericExactNonConcatenate_PiOr3() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, false);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("English")));
        String result = engine.encode("Smith", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithGenericApproxConcatenate_BPPk4() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("French")));
        String result = engine.encode("Chteau", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSephardicExactNonConcatenate_YtbB5() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.EXACT, false);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Hebrew")));
        String result = engine.encode("Cohen", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAshkenaziRulesConcatenate_oqYF6() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Yiddish")));
        String result = engine.encode("Klein", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithGenericRulesNonConcatenate_DbGT7() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.RULES, false);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Italian")));
        String result = engine.encode("Ricci", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSephardicApproxConcatenate_tzFd8() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.SEPHARDIC, RuleType.APPROX, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Portuguese")));
        String result = engine.encode("Mendes", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAshkenaziApproxConcatenate_EoEI9() throws Exception {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("Polish")));
        String result = engine.encode("Wjcik", languageSet);
        assertEquals("ExpectedEncodedResult", result);
    }
}