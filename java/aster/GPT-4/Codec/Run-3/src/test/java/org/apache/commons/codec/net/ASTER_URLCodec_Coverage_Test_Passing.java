/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_dFKK1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test%20string".getBytes();
        byte[] expected = "test string".getBytes(); // Assumingnew URLCodec().decode(byte[]) method correctly decodes URL encoded bytes
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_UeNi2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "test%20string";
        String expected = "test string"; // Assumingnew URLCodec().decode(String) method correctly decodes URL encoded strings
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_iwqp4() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_LRVs5() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        String expected = "";
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNonNullUrlSafe_hkKq1() {
        BitSet urlSafe = new BitSet(256);
        for (int i = 'a'; i <= 'z'; i++) {
            urlSafe.set(i);
        }
        for (int i = 'A'; i <= 'Z'; i++) {
            urlSafe.set(i);
        }
        for (int i = '0'; i <= '9'; i++) {
            urlSafe.set(i);
        }
        urlSafe.set(' ');
        urlSafe.set('-');
        urlSafe.set('_');
        urlSafe.set('.');
        urlSafe.set('*');
        byte[] input = "hello world".getBytes();
        byte[] expectedOutput = URLCodec.encodeUrl(urlSafe, input);
        byte[] result = URLCodec.encodeUrl(urlSafe, input);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    public void testDecodeWithUnsupportedEncoding_Litr1_DTWd0() {
        URLCodec codec = new URLCodec("unsupported-charset");
        try {
            codec.decode("test%20string");
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testDecodeUrlWithSingleEscapeCharAtEnd_ozfA1_mHbp0() {
        byte[] input = "Example%".getBytes(); // '%' at the end with no hex digits following
        assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_FXie0_fTlp0() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertNull(codec.decode((String) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ELqv2_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "test";
        String expected = codec.encode(input);
        assertEquals("test", expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_icLn4_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        String expected = codec.encode(input);
        assertEquals("", expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_Psmo5_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        byte[] expected = codec.encode(input);
        assertEquals("", new String(expected), new String(codec.encode(input)));
    }

    @Test
    public void testDecodeWithUnsupportedTypeInteger_MWCq6_uSyr0_fid2() {
        URLCodec codec = new URLCodec();
        String input = "123";
        try {
            String result = codec.decode(input);
            assertNotNull(result, "Decoding should not return null");
        } catch (DecoderException e) {
            fail("No DecoderException should be thrown");
        }
    }
}