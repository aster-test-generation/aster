/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Failing {
    private static final int STREAM_BUFFER_LENGTH = 1024; // Assuming this is defined somewhere in your actual class

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_FdSG0_bvJd0() throws IOException {
        byte[] key = "test-key".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String expectedOutput = "precomputed HMAC SHA-384 result for \"Hello, World!\" with key \"test-key\"";
        String result = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_xQab0_OkHn0() throws IOException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, HMAC!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String expectedOutput = "a1b2c3d4"; // Mocked HMAC output in hex
        String result = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutput, result);
    }
}