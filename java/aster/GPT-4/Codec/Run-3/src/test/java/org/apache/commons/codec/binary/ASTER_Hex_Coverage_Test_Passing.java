/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharArray_FRjY4() throws DecoderException {
        Hex hex = new Hex();
        char[] input = {'6', '1', '6', '2', '6', '3'};
        byte[] expected = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        assertArrayEquals(expected, (byte[]) hex.decode(input));
    }

    @Test
    public void testToDigitWithNonHexCharacter_SPfQ0_FhiG0() {
        try {
            Hex.toDigit('g', 0);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testToDigitWithSpecialCharacter_tGwR1_cGgo0() {
        assertThrows(DecoderException.class, () -> Hex.toDigit('*', 1));
    }

    @Test
    public void testDecodeWithInvalidObject_bMWs2_JMUU0() {
        Hex hex = new Hex();
        Object invalidObject = new Object(); // Not a byte[], ByteBuffer, String, or char[]
        try {
            hex.decode(invalidObject);
            fail("Expected an exception to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withDirectByteBuffer_sExY0_Cifg0_1() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.allocateDirect(10);
        buffer.put("1234567890".getBytes());
        buffer.flip();
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'});
        String result = new String(encodedChars);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withDirectByteBuffer_sExY0_Cifg0_2() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.allocateDirect(10);
        buffer.put("1234567890".getBytes());
        buffer.flip();
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'});
        String result = new String(encodedChars);
        assertEquals("31323334353637383930", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withArrayBackedByteBufferFullUse_AqbO1_bjmO0_1() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("1234567890".getBytes());
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'});
        String result = new String(encodedChars);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withArrayBackedByteBufferFullUse_AqbO1_bjmO0_2() throws EncoderException {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap("1234567890".getBytes());
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'});
        String result = new String(encodedChars);
        assertEquals("31323334353637383930", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withArrayBackedByteBufferPartialUse_HacU2_Ybmu0_1() throws EncoderException {
        Hex hex = new Hex();
        byte[] data = "1234567890".getBytes();
        ByteBuffer buffer = ByteBuffer.wrap(data, 2, 5); // "34567"
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'});
        String result = new String(encodedChars);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withArrayBackedByteBufferPartialUse_HacU2_Ybmu0_2() throws EncoderException {
        Hex hex = new Hex();
        byte[] data = "1234567890".getBytes();
        ByteBuffer buffer = ByteBuffer.wrap(data, 2, 5); // "34567"
        char[] encodedChars = Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'});
        String result = new String(encodedChars);
        assertEquals("3334353637", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withByteArray_nKFS4_Dwpc0_1() throws EncoderException {
        Hex hex = new Hex();
        byte[] input = "hello".getBytes();
        char[] encodedChars = hex.encodeHex(input);
        String result = new String(encodedChars);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withByteArray_nKFS4_Dwpc0_2() throws EncoderException {
        Hex hex = new Hex();
        byte[] input = "hello".getBytes();
        char[] encodedChars = hex.encodeHex(input);
        String result = new String(encodedChars);
        assertEquals("68656c6c6f", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_zZmc0_HKMq0() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        char[] expected = {'6', '1', '6', '2', '6', '3'}; // Hex representation of "abc"
        assertArrayEquals(expected, Hex.encodeHex(ByteBuffer.wrap(input), new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_JaXT1_HPcj0() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // ASCII for "abc"
        char[] expected = {'6', '1', '6', '2', '6', '3'}; // Hex representation of "abc"
        assertArrayEquals(expected, Hex.encodeHex(buffer, new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayExpectingDifferentOutput_Csql5_nkmk0() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x61, 0x62, 0x63}; // ASCII for "abc"
        char[] expected = {'6', '1', '6', '2', '6', '3'}; // Correct hex representation
        assertArrayEquals(expected, Hex.encodeHex(ByteBuffer.wrap(input), new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}));
    }
}