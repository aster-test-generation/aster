/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_RXgT4() throws EncoderException {
        BCodec codec = new BCodec();
        Integer testInteger = 123;
        try {
            codec.encode(testInteger);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCustomObject_kVPJ3_Ujmp0() throws org.apache.commons.codec.DecoderException {
        BCodec codec = new BCodec();
        String customObject = "CustomObjectAsString"; // Changed from Object to String to match expected type
        try {
            codec.decode(customObject);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeValidInput_Agjt0_fid2() throws EncoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String source = "Hello, World!";
        String charsetName = "UTF-8";
        String expectedResult = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?="; // This is a hypothetical expected result for the sake of example
        String result = codec.encode(source, charsetName);
        assertEquals(expectedResult, result);
    }
}