/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Nysiis_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToQAC_CwEI0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("QAC", nysiis.nysiis("Quack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKToNACWhenNextIsN_pwDi1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NAC", nysiis.nysiis("Knack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSALAR_iSNp2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SALAR", nysiis.nysiis("Scholar"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodePToFANTANWhenNextIsH_jcfo3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FANTAN", nysiis.nysiis("Phantom"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToGInComplexString_Wzyc6() {
        Nysiis nysiis = new Nysiis();
        assertEquals("QALAFY", nysiis.nysiis("Qualify"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSSSInComplexString_EovH8() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SALARS", nysiis.nysiis("Scholarship"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToQANCY_gZxK0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("QANCY", nysiis.nysiis("Quincy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSNAD_NyDj2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SNAD", nysiis.nysiis("Schmidt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_qcqZ1() throws EncoderException {
        Nysiis nysiis = new Nysiis();
        String input = "John";
        String expected = "JAN"; // Assuming 'nysiis' method processes "John" to "JAN"
        assertEquals(expected, nysiis.encode(input));
    }
}