/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullInput_ReturnsNull_DsYk0() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyString_ReturnsEmpty_JcAP1() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode("", "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ValidString_CorrectDecoding_qZLR2() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "=48=65=6C=6C=6F"; // "Hello" in quoted-printable encoding
        String expected = "Hello";
        String result = codec.decode(input, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_psFH0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        String encodedString = "=48=65=6C=6C=6F=20=57=6F=72=6C=64"; // "Hello World" in quoted-printable encoding
        String expectedDecodedString = "Hello World";
        String decodedString = codec.decode(encodedString);
        assertEquals(expectedDecodedString, decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_HSUs1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Sample".getBytes();
        assertArrayEquals(codec.decode(input), codec.decode(input)); // Assumingnew QuotedPrintableCodec().decode(byte[]) is correctly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_fmUY2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Sample";
        assertEquals(codec.decode(input), codec.decode(input)); // Assumingnew QuotedPrintableCodec().decode(String) is correctly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_iQvf4() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String input = "Sample";
        assertEquals(codec.decode(input), codec.decode(input)); // Assumingnew QuotedPrintableCodec().decode(String) is correctly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_QNAT5() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] input = "Sample".getBytes();
        assertArrayEquals(codec.decode(input), codec.decode(input)); // Assumingnew QuotedPrintableCodec().decode(byte[]) is correctly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_Pejw6() throws DecoderException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "Sample";
        assertEquals(codec.decode(input), codec.decode(input)); // Assumingnew QuotedPrintableCodec().decode(String) is correctly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_roNd1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello".getBytes();
        assertNotNull(codec.encode(input)); // Assumingnew QuotedPrintableCodec().encode(byte[]) is properly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_DRiY2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello";
        assertNotNull(codec.encode(input)); // Assumingnew QuotedPrintableCodec().encode(String) is properly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetConstructor_BgnL4() throws EncoderException {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset);
        String input = "hello";
        assertNotNull(codec.encode(input)); // Assumingnew QuotedPrintableCodec().encode(String) is properly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictConstructor_BGdv5() throws EncoderException {
        Charset charset = Charset.forName("UTF-8");
        QuotedPrintableCodec codec = new QuotedPrintableCodec(charset, true);
        byte[] input = "hello".getBytes();
        assertNotNull(codec.encode(input)); // Assumingnew QuotedPrintableCodec().encode(byte[]) is properly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetNameConstructor_iNHa6() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "hello";
        assertNotNull(codec.encode(input)); // Assumingnew QuotedPrintableCodec().encode(String) is properly implemented
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_ReturnsEmptyString_ULif1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("", StandardCharsets.UTF_8);
        assertEquals("", "", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyString_CorrectEncoding_MsEw2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello=2C World=21"; // Assuming the encode method encodes spaces and special characters correctly
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals("Hello=2C World=21", expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CoverLine1_DmnX0() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear('A'); // Make 'A' non-printable to trigger encoding
        byte[] input = new byte[]{'A'};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("=41");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CoverLine2And3_IRSk1() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear(0x12); // Make 0x12 non-printable to trigger encoding
        byte[] input = new byte[]{0x12};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("=12");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CoverLine4And5_UdAa2() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear(0xAB); // Make 0xAB non-printable to trigger encoding
        byte[] input = new byte[]{(byte) 0xAB};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("=AB");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_CoverLine6_zSoe3() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear(0xCD); // Make 0xCD non-printable to trigger encoding
        byte[] input = new byte[]{(byte) 0xCD};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("=CD");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytes_MRBl4() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear('A'); // Make 'A' non-printable to trigger encoding
        printable.clear('B'); // Make 'B' non-printable to trigger encoding
        byte[] input = new byte[]{'A', 'B', 'C'};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("=41=42C");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_uqLX5() {
        BitSet printable = new BitSet();
        printable.set(0, 256); // Set all to printable
        printable.clear(' '); // Make space non-printable to trigger encoding
        byte[] input = new byte[]{'A', ' ', 'B', ' '};
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assert new String(output).equals("A=20B=20");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithNegativeByte_zbCZ0() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 200}; // 200 as a signed byte is -56
        boolean strict = false;
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), strict);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithPositiveByte_HpRi1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{65}; // ASCII for 'A'
        boolean strict = false;
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), strict);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithZeroByte_GvmA2() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{0};
        boolean strict = false;
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), strict);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithBoundaryNegativeByte_gMEE3() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 128}; // 128 as a signed byte is -128
        boolean strict = false;
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), strict);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithWhitespace_aFPL0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        BitSet printable = new BitSet(256);
        for (int i = 33; i <= 126; i++) { // Typically printable characters in ASCII
            printable.set(i);
        }
        printable.set(' ');
        printable.set('\t');
        byte[] inputBytes = new byte[]{'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\t', '!'};
        byte[] encodedBytes = QuotedPrintableCodec.encodeQuotedPrintable(printable, inputBytes, true);
        String encodedString = new String(encodedBytes, Charset.forName("US-ASCII"));
        System.out.println("Encoded output: " + encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Chyh0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String inputString = "Hello, World!";
        byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);
        byte[] expectedOutput = inputBytes;
        byte[] result = codec.encode(inputBytes);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_NullInput_UtDJ0() throws DecoderException {
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_NoEscapeChar_rypH1() throws DecoderException {
        byte[] input = "Hello World".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_EscapeCharWithoutCR_srap2() throws DecoderException {
        byte[] input = "Hello=20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_EscapeCharWithCR_qgSd3() throws DecoderException {
        byte[] input = "Hello=\r\nWorld".getBytes();
        byte[] expected = "HelloWorld".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_ValidHex_LFek4() throws DecoderException {
        byte[] input = "Color=20=46=75=6C=6C".getBytes();
        byte[] expected = "Color Full".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_IgnoreCR_jHAk6() throws DecoderException {
        byte[] input = "Ignore\rCarriage".getBytes();
        byte[] expected = "IgnoreCarriage".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_IgnoreLF_HbGT7() throws DecoderException {
        byte[] input = "Ignore\nLineFeed".getBytes();
        byte[] expected = "IgnoreLineFeed".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_OnlyCR_lguf10() throws DecoderException {
        byte[] input = "\r".getBytes();
        byte[] expected = "".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_OnlyLF_fbbo11() throws DecoderException {
        byte[] input = "\n".getBytes();
        byte[] expected = "".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ZorC0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello=20world".getBytes();
        byte[] expectedOutput = "hello world".getBytes();
        byte[] actualOutput = codec.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_hTxr0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String encoded = codec.encode(input);
        String expected = "Hello, World!";
        assertEquals(expected, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonNullSourceString_CorrectEncoding_CHnH1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = StringUtils.newStringUsAscii(codec.encode(sourceStr.getBytes(sourceCharset)));
        String result = codec.encode(sourceStr, sourceCharset);
        assertEquals("Hello, World!", expected, result);
    }

    @Test
    public void testEncodeWithUnsupportedObject_PUfd3_BAaO0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
        }
    }

    @Test
    public void testDecodeQuotedPrintable_InvalidHex_SXjp5_Sbid0() {
        byte[] input = "Invalid=2G".getBytes();
        assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(input));
    }

    @Test
    public void testDecodeQuotedPrintable_OutOfBounds_dNKJ8_jPKH0() {
        byte[] input = "Out=of=bounds=".getBytes();
        assertThrows(DecoderException.class, () -> {
            QuotedPrintableCodec.decodeQuotedPrintable(input);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_pfPN0_xZZd0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull(codec.decode((String) null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_vNhp0_wwxM0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull(codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteIntegrationWithEncodeQuotedPrintable_ashV3_FWQZ0_1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        BitSet printable = new BitSet(256);
        printable.set(65, false); // Set 'A' as non-printable
        byte[] bytes = new byte[]{65}; // 'A'
        byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(encoded, "Encoded output should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteIntegrationWithEncodeQuotedPrintable_ashV3_FWQZ0_2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        BitSet printable = new BitSet(256);
        printable.set(65, false); // Set 'A' as non-printable
        byte[] bytes = new byte[]{65}; // 'A'
        byte[] encoded = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals("=41", new String(encoded), "Encoded string should be '=41'");
    }
}