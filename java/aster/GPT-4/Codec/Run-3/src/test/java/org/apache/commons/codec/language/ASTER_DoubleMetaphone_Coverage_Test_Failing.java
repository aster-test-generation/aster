/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_Yxkt1() throws EncoderException {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "example";
        String expected = "AXMPL"; // Assuming doubleMetaphone method returns "AXMPL" for "example"
        assertEquals(expected, doubleMetaphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_CoverBranchWithIE_Bykv0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "ABACHER";
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals("AKR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionC0_CoverBranchWithBACHER_VVdN1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "ABACHIE";
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals("AK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneConditionCH0_fsbq0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "CHharm";
        String expected = "X"; // Expected metaphone result based on the logic provided
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithOrchestra_Drii2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "ORCHESTRA";
        String expected = "ARKSTR"; // Assuming 'CH' in 'ORCH' translates to 'K'
        assertEquals(expected, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionL0_Case1_gOEc0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "CABELLO";
        String expected = "KL"; // Assuming the output based on the logic provided
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionL0_Case4_tjYS3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "BALLAS";
        String expected = "BLS"; // Assuming the output based on the logic provided
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverConditionM0_upQQ0_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input1 = "Columb";
        String input2 = "Columber";
        String expected1 = "KLMP";
        String expected2 = "KLMR";
        assertEquals(expected1, doubleMetaphone.doubleMetaphone(input1, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_C_ConditionNotCECI_Shbw0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("ACD", false);
        assertEquals("AKD", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC_NotHu_PHjD0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "bacchio"; // This should trigger the !contains(value, index + 2, 2, "HU") condition
        String expected = "BX"; // 'X' for the "CC" followed by "I" not followed by "HU"
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC_Accident_eMSi1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "accident"; // This should trigger the (index == 1 && charAt(value, index - 1) == 'A') condition
        String expected = "AKS"; // "KS" for "CC" followed by "I" in "accident"
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleCC_Ucces_BekB2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "success"; // This should trigger the contains(value, index - 1, 5, "UCCEE", "UCCES") condition
        String expected = "SKS"; // "KS" for "CC" followed by "E" in "success"
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMCAtStart_Jigt0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHale";
        String expectedOutput = "K";  // Assuming the primary result is desired and 'K' is the expected output for 'Mc'
        assertEquals(expectedOutput, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHAtStart_wccK1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Chaim";
        String expectedOutput = "K";  // Assuming the primary result is desired and 'K' is the expected output for 'Ch'
        assertEquals(expectedOutput, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCH_lMvU1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Chaim";
        String expected = "KM"; // Assuming 'K' is appended for 'CH' and 'M' for 'M'
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMCAtStart_FAxA0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHenry";
        String expected = "K"; // Assuming the logic appends 'K' for 'MC' at the start
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result.substring(0, 1)); // Check if the first character is 'K'
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHAtStart_VluV1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Chaim";
        String expected = "K"; // Assuming the logic appends 'K' for 'CH' at the start
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result.substring(0, 1)); // Check if the first character is 'K'
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case1_dKPj0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KN", dm.doubleMetaphone("Akner", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case2_WhpJ1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KN", dm.doubleMetaphone("Akner", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case3_DUnb2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("NKN", dm.doubleMetaphone("Anger", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case4_pjyi3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("NKN", dm.doubleMetaphone("Anger", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case6_DjEM5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KL", dm.doubleMetaphone("Gli", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case7_UaRZ6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KJ", dm.doubleMetaphone("Gyes", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case8_PTtK7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KJ", dm.doubleMetaphone("Gyes", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case9_LjMn8() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KJ", dm.doubleMetaphone("Gy", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case10_bvnx9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("KJ", dm.doubleMetaphone("Gy", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case11_SMFV10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("JK", dm.doubleMetaphone("Aggio", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case12_tDwc11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("JK", dm.doubleMetaphone("Aggio", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case13_Zebf12() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("K", dm.doubleMetaphone("Vanger", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case14_PLYQ13() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("K", dm.doubleMetaphone("Vanger", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case15_HnMG14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("J", dm.doubleMetaphone("Gier", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case16_dgVa15() {
        DoubleMetaphone dm = new DoubleMetaphone();
        assertEquals("J", dm.doubleMetaphone("Gier", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case1_YBKI0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Agnostic", false);
        assertEquals("KNSTK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case2_jWqI1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Agnostic", true);
        assertEquals("NSTK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case4_osTA3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Align", true);
        assertEquals("KLN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case5_Vhyq4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gelignite", false);
        assertEquals("KLJNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case6_lDhW5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gelignite", true);
        assertEquals("JNT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case7_KwgG6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gyrate", false);
        assertEquals("JRT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case8_IDRR7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gyrate", true);
        assertEquals("KRT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case11_yQMJ10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Von Biaggi", false);
        assertEquals("PNPJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case12_uMsO11() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Von Biaggi", true);
        assertEquals("PNPK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case13_Marz12() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Sch Biaggi", false);
        assertEquals("XBPJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case14_peZC13() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Sch Biaggi", true);
        assertEquals("XBPK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case15_sWkb14() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Biaggiet", false);
        assertEquals("PJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case16_BELA15() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Biaggiet", true);
        assertEquals("PK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case18_VaSN17() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Biaggier", true);
        assertEquals("PJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case21_bCsa20() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gigantic", false);
        assertEquals("JKNTK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleG_Case22_Mfss21() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("Gigantic", true);
        assertEquals("KKNTK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_NotVowelBeforeGH_xJnS0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Bgh";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("K", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithBDHBefore_TLwd4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "BDGH";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithBDHBefore2_oiOa5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "BDHGH";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithBDHBefore3_yfJG6() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "BHDGH";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("TK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithUAndCGLRTBefore_SvVc7() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "CUGHLIN";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("KFLN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithVowelBefore_fVrU9() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "OUGH";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("F", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleGH_GHWithNonIAndNonVowelBefore_KCCZ10() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "BAGH";
        String result = dm.doubleMetaphone(value, false);
        assertEquals("PK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneConditionL0True_jKQM0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "All";
        String expected = "L"; // Expected result if conditionL0 is true and appendPrimary is called
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneConditionL0False_dKwe1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Loyal";
        String expected = "L"; // Expected result if conditionL0 is false and append is called
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ConditionL0_False_VAPv1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "LABEL";  // This should not trigger conditionL0, thus it should use append('L')
        String expected = "LBL";  // Assuming the rest of the logic in DoubleMetaphone handles other characters correctly
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleR_NotContainsMEorMA_Svcs0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "BRIE";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("BR", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSHAndGermanicSuffix_jgqJ0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Ashheim";
        String expected = "AS";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSHButNonGermanicSuffix_EEym1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Shall";
        String expected = "XAL";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSIOAndSlavoGermanic_nylS2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SioSlavic";
        String expected = "S";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSIOAndNonSlavoGermanic_pgCI3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SioItalian";
        String expected = "SX";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSIAAndNonSlavoGermanic_Fzan4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SiaItalian";
        String expected = "SX";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_WithSIANAndNonSlavoGermanic_FGrd5() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "SianItalian";
        String expected = "SX";
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_SH_WithGermanicSuffix_KlOy0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sholm";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_SH_WithoutGermanicSuffix_pWrG1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "shack";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("X", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_SIO_SlavoGermanic_pqcK3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sio";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("SX", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_SIAN_JtAj4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sian";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("S", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleS_S_FollowedByS_hMNK5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "sisters";
        boolean alternate = false;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals("SSTRS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_WithSch_OpQg0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Schlesinger";
        String expected = "XLSNSR"; // Assuming 'X' for 'Sch' and 'LSNSR' for 'lesinger'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_WithSch_NotVowelNotW_AWEI1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Schtsch";
        String expected = "XTS"; // Assuming 'X' for 'Sch' and 'TS' for 'tsch'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSC_AppendSK_hEWH4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Sculpt";
        String expected = "SKLPT"; // Assuming 'SK' for 'Sc' and 'LPT' for 'ulpt'
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVonPrefix_lwom0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Von Thoma";
        String expected = "T"; // Assuming 'Von ' is recognized and 'Thoma' processes as 'T' due to special case
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithWR_JGRQ0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("wrap", false);
        assertEquals("RAP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_AtEndOfWordFollowingVowel_YuIw2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("craw", false);
        assertEquals("KRF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithEWSKI_TMBD3() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("andrewski", false);
        assertEquals("ANTRFSK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleW_WithOWSKY_KvSP4() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String result = dm.doubleMetaphone("borowsky", false);
        assertEquals("PRFSK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleX_EndsWithIAU_NZgO0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Tiaux";
        String expected = "T";
        String result = dm.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleX_EndsWithOU_nPOt1() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Breaux";
        String expected = "BR";
        String result = dm.doubleMetaphone(input, false);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testEncodeWithNullInput_wdAW2_yPza0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertThrows(EncoderException.class, () -> doubleMetaphone.encode(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithJose_DAKP0_DnPO0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Jose";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("H", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithNonJoseStart_VIEi2_Bhcl0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "MJose";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("JA", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithVowelBeforeAndSlavoGermanicFalse_kkKz3_mfEM0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "AJose";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("JH", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithAOrOAfter_oVsV4_uEQg0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "JA";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("JH", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithNoFollowingSpecialChars_MByE5_Fspa0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "Jx";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJWithNoPrecedingSpecialChars_ENYw6_ifOu0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "xJx";
        dm.setMaxCodeLen(10);
        boolean slavoGermanic = false;
        String result = dm.doubleMetaphone(value, false);
        assertEquals("J", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_CoverConditionM0_upQQ0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input1 = "Columb";
        String input2 = "Columber";
        String expected1 = "KLMP";
        String expected2 = "KLMR";
        assertEquals(expected1, doubleMetaphone.doubleMetaphone(input1, false));
        assertEquals(expected2, doubleMetaphone.doubleMetaphone(input2, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMCAtStart_Jigt0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHale";
        String expectedOutput = "K";  // Assuming the primary result is desired and 'MKL' is the expected output for 'Mc'
        assertEquals(expectedOutput, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHAtStart_wccK1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Chaim";
        String expectedOutput = "K";  // Assuming the primary result is desired and 'XM' is the expected output for 'Ch'
        assertEquals(expectedOutput, doubleMetaphone.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithMCAtStart_FAxA0_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "McHenry";
        String expected = "K"; // Assuming the logic appends 'M' for 'MC' at the start
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result.substring(0, 1)); // Check if the first character is 'M'
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCHAtStart_VluV1_fid2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Chaim";
        String expected = "K"; // Assuming the logic appends 'X' for 'CH' at the start
        String result = doubleMetaphone.doubleMetaphone(input, false);
        assertEquals(expected, result.substring(0, 1)); // Check if the first character is 'X'
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithVonPrefix_lwom0_fid2() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String input = "Von Thoma";
        String expected = "T"; // Assuming 'Von ' is recognized and 'Thoma' processes as 'FNTM' due to special case
        assertEquals(expected, dm.doubleMetaphone(input, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleJKSWithNoFollowingSpecialChars_MByE5_Fspa0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "JKSx";
        dm.setMaxCodeLen(10);
        String result = dm.doubleMetaphone(value, false);
        assertEquals("JKS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleSJKSWithNoPrecedingSpecialChars_ENYw6_ifOu0() {
        DoubleMetaphone dm = new DoubleMetaphone();
        String value = "xSJKSx";
        dm.setMaxCodeLen(10);
        boolean slavoGermanic = false;
        String result = dm.doubleMetaphone(value, false);
        assertEquals("SJKS", result);
    }
}