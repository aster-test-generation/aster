/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_IeZL0() throws Exception {
        byte[] data = new byte[0];
        int seed = 123;
        int expected = MurmurHash3.hash32(data, data.length, seed);
        assertEquals(expected, MurmurHash3.hash32(data, data.length, seed));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_EmptyArray_DpAr0() throws Exception {
        byte[] data = new byte[0];
        int expectedHash = 0;
        int result = MurmurHash3.hash32x86(data);
        assertEquals(expectedHash, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_xpln0() throws Exception {
        int data = 0x12345678;
        long expected = MurmurHash3.hash64(data);
        long actual = MurmurHash3.hash64(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyString_Mznk0() throws Exception {
        String input = "";
        long[] expected = new long[2]; // Assuming default seed and empty input leads to zeroed array
        long[] result = MurmurHash3.hash128(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyArray_uCDg0() throws Exception {
        byte[] data = new byte[0];
        long result = MurmurHash3.hash64(data);
        assertEquals(0L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyArray_WYPm0() throws Exception {
        byte[] data = new byte[0];
        int result = MurmurHash3.hash32(data);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZero_hzae0_1() throws Exception {
        long input = 0L;
        long result = MurmurHash3.hash64(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZero_hzae0_2() throws Exception {
        long input = 0L;
        long result = MurmurHash3.hash64(input);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_nOto0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{ /* expected hash values based on the seed and data */ };
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_svXl0() throws Exception {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        int offset = 0;
        int length = data.length;
        int seed = 123456789;
        long[] expected = new long[]{-4964420948893066024L, -4964420948893066024L}; // Expected values should be precomputed or mocked
        long[] result = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_tqVL0() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long[] expected = new long[2]; // Assuming hash128x64Internal returns {0L, 0L} for empty data
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EmptyData_bFmk0() throws Exception {
        byte[] data = new byte[0];
        int seed = 123;
        long expectedHash = 0x629942693e10f867L; // Expected hash for empty data with seed 123
        long result = MurmurHash3.hash64(data, 0, data.length, seed);
        assertEquals(expectedHash, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_NonEmptyData_bzYX1() throws Exception {
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int seed = 987;
        long expectedHash = 0x6e340b9cffb37a99L; // Expected hash for this data and seed
        long result = MurmurHash3.hash64(data, 0, data.length, seed);
        assertEquals(expectedHash, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_WUwZ0() throws Exception {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        long expected = MurmurHash3.hash64(data, offset, length);
        long result = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithZeroInput_XSpN0() throws Exception {
        short input = 0;
        long result = MurmurHash3.hash64(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_wZoV0() throws Exception {
        byte[] data = new byte[0];
        int seed = 123;
        int result = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonEmptyData_KgNF1() throws Exception {
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8};
        int seed = 123;
        int result = MurmurHash3.hash32(data, 0, 8, seed);
        assertNotEquals(seed, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_fhXE0() throws Exception {
        byte[] data = new byte[0];
        int seed = 1234;
        int result = MurmurHash3.hash32(data, 0, data.length, seed);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonEmptyData_aJuo1() throws Exception {
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8};
        int seed = 5678;
        int result = MurmurHash3.hash32(data, 0, data.length, seed);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_EmptyData_uJyc0() throws Exception {
        byte[] data = new byte[0];
        int seed = 123;
        int result = MurmurHash3.hash32(data, 0, 0, seed);
        assertEquals(0x85ebca6b, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NonEmptyData_stJd1() throws Exception {
        byte[] data = {1, 2, 3, 4, 5};
        int seed = 123;
        int result = MurmurHash3.hash32(data, 0, 5, seed);
        assertNotEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyArray_XPnD0() throws Exception {
        byte[] data = new byte[0];
        long[] expected = new long[2]; // Assuming the hash of an empty array is {0L, 0L}
        long[] result = MurmurHash3.hash128(data);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZero_xxwY0_1() throws Exception {
        int result = MurmurHash3.hash32(0L);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZero_xxwY0_2() throws Exception {
        int result = MurmurHash3.hash32(0L);
        assertEquals(result, MurmurHash3.hash32(0L, MurmurHash3.DEFAULT_SEED));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithZeroData_hLwM0_1() throws Exception {
        int seed = 123;
        long data = 0L;
        int result = MurmurHash3.hash32(data, seed);
        assertNotNull(result);
    }
}