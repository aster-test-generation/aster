/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Metaphone_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_uKEV1() throws EncoderException {
        Metaphone metaphone = new Metaphone();
        String input = "example";
        String expected = "AMPL"; // Assuming 'metaphone' method would return "AMPL" for "example"
        assertEquals(expected, metaphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_NAhF2() throws EncoderException {
        Metaphone metaphone = new Metaphone();
        assertNull(metaphone.encode(null));
    }

    @Test
    public void testEncodeWithNonStringInput_fgWI0_aooj0() {
        Metaphone metaphone = new Metaphone();
        assertThrows(IllegalArgumentException.class, () -> metaphone.encode(new Object()));
    }
}