/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Nysiis_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToG_CwEI0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("G", nysiis.nysiis("Quack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKToNNWhenNextIsN_pwDi1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("NN", nysiis.nysiis("Knack"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSSS_iSNp2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSS", nysiis.nysiis("Scholar"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodePToFFWhenNextIsH_jcfo3() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FF", nysiis.nysiis("Phantom"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWhenPrevAndNextAreNonVowels_USmZ4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Charm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeWWhenPrevIsVowel_sDJv5() {
        Nysiis nysiis = new Nysiis();
        assertEquals("A", nysiis.nysiis("Caw"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToGInComplexString_Wzyc6_fid1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("GALF", nysiis.nysiis("Qualify"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeKToCWhenNextIsNotN_MHQA7() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Kite"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSSSInComplexString_EovH8_fid1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSSOLAR", nysiis.nysiis("Scholarship"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodePToFFWhenNextIsHInComplexString_fKis9_fid1() {
        Nysiis nysiis = new Nysiis();
        assertEquals("FFANTOM", nysiis.nysiis("Phantom"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeQToG_gZxK0() {
        Nysiis nysiis = new Nysiis();
        assertEquals("G", nysiis.nysiis("Quincy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeSCHToSSS_NyDj2() {
        Nysiis nysiis = new Nysiis();
        assertEquals("SSS", nysiis.nysiis("Schmidt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWithNonVowelPrev_ZmrM4() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Charh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeHWithNonVowelNext_sRlm5() {
        Nysiis nysiis = new Nysiis();
        assertEquals("C", nysiis.nysiis("Hatch"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeZToS_tVVF8() {
        Nysiis nysiis = new Nysiis();
        assertEquals("S", nysiis.nysiis("Zebra"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranscodeMToN_tTDc9() {
        Nysiis nysiis = new Nysiis();
        assertEquals("N", nysiis.nysiis("Mint"));
    }
}