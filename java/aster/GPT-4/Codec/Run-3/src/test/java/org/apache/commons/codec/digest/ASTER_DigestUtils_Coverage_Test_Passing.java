/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DigestUtils_Coverage_Test_Passing {
    private static final int BUFFER_SIZE = 2048; // Assuming BUFFER_SIZE is 2048

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithIOException_QXcB3() throws IOException {
        MessageDigest mockDigest = mock(MessageDigest.class);
        InputStream mockStream = mock(InputStream.class);
        when(mockStream.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        try {
            DigestUtils.updateDigest(mockDigest, mockStream);
        } catch (IOException e) {
        }
        verify(mockStream, times(1)).read(any(byte[].class), eq(0), eq(BUFFER_SIZE));
        verify(mockDigest, never()).update(any(byte[].class), anyInt(), anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaMethod_iqBN0() {
        String testData = "Hello World";
        byte[] expectedOutput = DigestUtils.sha1(testData);
        byte[] actualOutput = DigestUtils.sha(testData);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_cVzw0() {
        MessageDigest shaDigest = DigestUtils.getShaDigest();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_gORY0() {
        byte[] testData = "hello world".getBytes();
        String expected = DigestUtils.sha1Hex(testData);
        String actual = DigestUtils.shaHex(testData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaMethod_WmWD0() {
        byte[] testData = "test data".getBytes();
        byte[] expectedOutput = DigestUtils.sha1(testData);
        byte[] actualOutput = DigestUtils.sha(testData);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_tabj0() {
        String input = "test";
        String expectedOutput = DigestUtils.sha1Hex(input);
        assertEquals(expectedOutput, DigestUtils.shaHex(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithValidAlgorithm_uoKo0() {
        boolean result = DigestUtils.isAvailable("SHA-256");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_ValidAlgorithm_JWJE0() {
        String algorithm = "SHA-256";
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance(algorithm);
        } catch (NoSuchAlgorithmException e) {
        }
        MessageDigest result = DigestUtils.getDigest(algorithm, defaultMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_InvalidAlgorithm_VTPj1() {
        String invalidAlgorithm = "Invalid-Algorithm";
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
        }
        MessageDigest result = DigestUtils.getDigest(invalidAlgorithm, defaultMessageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_NullDefaultMessageDigest_odgL2() {
        String invalidAlgorithm = "Invalid-Algorithm";
        MessageDigest result = DigestUtils.getDigest(invalidAlgorithm, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithRandomAccessFile_AmVI0_jioe0() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile tempFile = new RandomAccessFile("tempfile.dat", "rw");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        tempFile.write("Sample data for testing".getBytes());
        tempFile.seek(0); // Reset file pointer to the beginning for reading
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, tempFile);
        assertNotNull(updatedDigest, "Digest should not be null after update");
        tempFile.close();
    }
}