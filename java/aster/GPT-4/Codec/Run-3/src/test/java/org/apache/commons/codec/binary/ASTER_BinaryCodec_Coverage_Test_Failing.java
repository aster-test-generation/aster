/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_hOqB1() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArray = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArray);
        assertNotNull(result); // Check that the result is not null
        assertTrue(result instanceof char[]); // Check that the result is of type char[]
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_lyJD2() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] emptyByteArray = new byte[]{};
        Object result = codec.encode(emptyByteArray);
        assertNotNull(result); // Check that the result is not null
        assertTrue(result instanceof char[]); // Check that the result is of type char[]
        assertEquals(0, ((char[]) result).length); // Check that the result is an empty char array
    }
}