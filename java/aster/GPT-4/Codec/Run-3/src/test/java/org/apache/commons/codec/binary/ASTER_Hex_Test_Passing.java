/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenNumberOfCharacters_ivmH0_1() throws DecoderException {
        char[] data = {'a', '1', 'b', '2', 'c', '3'};
        byte[] out = new byte[3];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithEvenNumberOfCharacters_ivmH0_2() throws DecoderException {
        char[] data = {'a', '1', 'b', '2', 'c', '3'};
        byte[] out = new byte[3];
        int outOffset = 0;
        int result = Hex.decodeHex(data, out, outOffset);
        assertArrayEquals(new byte[]{(byte) 0xa1, (byte) 0xb2, (byte) 0xc3}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOddNumberOfCharacters_SnYx1() throws Exception {
        char[] data = {'a', '1', 'b', '2', 'c'};
        byte[] out = new byte[2];
        int outOffset = 0;
        assertThrows(DecoderException.class, () -> Hex.decodeHex(data, out, outOffset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithInsufficientOutputSpace_ulIh2() throws Exception {
        char[] data = {'a', '1', 'b', '2', 'c', '3'};
        byte[] out = new byte[2]; // not enough space
        int outOffset = 0;
        assertThrows(DecoderException.class, () -> Hex.decodeHex(data, out, outOffset));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOutputOffset_kfwY3_1() throws DecoderException {
        char[] data = {'a', '1', 'b', '2', 'c', '3'};
        byte[] out = new byte[5];
        int outOffset = 2;
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHexWithOutputOffset_kfwY3_2() throws DecoderException {
        char[] data = {'a', '1', 'b', '2', 'c', '3'};
        byte[] out = new byte[5];
        int outOffset = 2;
        int result = Hex.decodeHex(data, out, outOffset);
        assertArrayEquals(new byte[]{0, 0, (byte) 0xa1, (byte) 0xb2, (byte) 0xc3}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithSimpleInput_KxcC0() throws Exception {
        byte[] inputData = "hello".getBytes();
        char[] expectedOutput = {'6', '8', '6', '5', '6', 'c', '6', 'c', '6', 'f'};
        char[] result = Hex.encodeHex(inputData);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_Ygia0() throws Exception {
        byte[] data = {0x0f, 0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f};
        int dataOffset = 0;
        int dataLen = data.length;
        boolean toLowerCase = true;
        char[] expected = {'0', 'f', '1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e', '6', 'f'};
        char[] result = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_fYAD0() throws Exception {
        byte[] data = {0x1a, 0x2f, 0x3c};
        int dataOffset = 0;
        int dataLen = 3;
        boolean toLowerCase = true;
        char[] expected = {'1', 'a', '2', 'f', '3', 'c'};
        char[] result = Hex.encodeHex(data, dataOffset, dataLen, toLowerCase);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithValidInput_fzkj0() throws Exception {
        byte[] inputData = {0x0f, 0x1a};
        char[] toDigits = "0123456789abcdef".toCharArray();
        char[] expectedOutput = {'0', 'f', '1', 'a'};
        char[] result = Hex.encodeHex(inputData, toDigits);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_ITvr0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x01, 0x02, 0x03});
        byte[] expected = "010203".getBytes(StandardCharsets.UTF_8);
        byte[] actual = hex.encode(buffer);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_WwCh0_1() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        String input = "Hello";
        Object result = hex.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_WwCh0_2() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        String input = "Hello";
        Object result = hex.encode(input);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_WwCh0_3() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        String input = "Hello";
        Object result = hex.encode(input);
        assertArrayEquals(new char[]{'4', '8', '6', '5', '6', 'C', '6', 'C', '6', 'F'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_iTzA1_1() throws Exception {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{(byte) 0xCA, (byte) 0xFE});
        Object result = hex.encode(buffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_iTzA1_2() throws Exception {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{(byte) 0xCA, (byte) 0xFE});
        Object result = hex.encode(buffer);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_iTzA1_3() throws Exception {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{(byte) 0xCA, (byte) 0xFE});
        Object result = hex.encode(buffer);
        assertArrayEquals(new char[]{'C', 'A', 'F', 'E'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_Oieo2_1() throws Exception {
        Hex hex = new Hex();
        byte[] input = new byte[]{(byte) 0xBE, (byte) 0xEF};
        Object result = hex.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_Oieo2_2() throws Exception {
        Hex hex = new Hex();
        byte[] input = new byte[]{(byte) 0xBE, (byte) 0xEF};
        Object result = hex.encode(input);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_Oieo2_3() throws Exception {
        Hex hex = new Hex();
        byte[] input = new byte[]{(byte) 0xBE, (byte) 0xEF};
        Object result = hex.encode(input);
        assertArrayEquals(new char[]{'B', 'E', 'E', 'F'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_ODVQ0() throws Exception {
        byte[] data = {0x0f, 0x1a};
        char[] expected = {'0', 'f', '1', 'a'};
        char[] result = Hex.encodeHex(data, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_ValidHexCharacter_aEtH0() throws Exception {
        int result = Hex.toDigit('A', 0);
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithUpperCase_TrhM0() throws Exception {
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x1a, 0x2f, 0x3e});
        String result = Hex.encodeHexString(buffer, false);
        assertEquals("1A2F3E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_ValidInput_HKiB0() throws DecoderException {
        char[] inputData = {'6', '1', '6', '2', '6', '3', '6', '4'};
        byte[] expectedOutput = {97, 98, 99, 100}; // corresponding ASCII values for 'abcd'
        byte[] result = Hex.decodeHex(inputData);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_AcxN0() throws Exception {
        Hex hex = new Hex();
        byte[] input = new byte[0];
        byte[] result = hex.encode(input);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_qCHM0() throws Exception {
        ByteBuffer data = ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c});
        char[] expected = {'1', 'a', '2', 'b', '3', 'c'};
        char[] result = Hex.encodeHex(data, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_EoEy0() throws DecoderException {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x61, 0x62, 0x63}); // "abc" in hex
        byte[] expected = new byte[]{(byte) 0xab, (byte) 0xc}; // Expected output after decoding "abc"
        byte[] result = hex.decode(buffer);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_DefaultConstructor_ivAV0() throws Exception {
        Hex hex = new Hex();
        String expectedCharsetName = Charset.defaultCharset().name();
        String actualCharsetName = hex.getCharsetName();
        assertEquals(expectedCharsetName, actualCharsetName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithSimpleInput_ALEN0() throws Exception {
        byte[] inputData = "hello".getBytes();
        String expectedOutput = "68656c6c6f";
        String actualOutput = Hex.encodeHexString(inputData);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithNonEmptyBuffer_VHAI0() throws Exception {
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x4d});
        String result = Hex.encodeHexString(buffer);
        assertEquals("1a2b3c4d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DefaultConstructor_phfJ0() throws Exception {
        Hex hex = new Hex();
        String expected = hex.toString() + "[charsetName=" + Charset.defaultCharset() + "]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithLowerCaseTrue_Czlv0() throws Exception {
        byte[] data = {0x1a, 0x2f, 0x3b};
        String result = Hex.encodeHexString(data, true);
        assertEquals("1a2f3b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_SrVN0() throws DecoderException {
        Hex hex = new Hex();
        String input = "48656c6c6f"; // Hexadecimal for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_ILPM1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x48, 0x65, 0x6c, 0x6c, 0x6f}; // Hexadecimal bytes for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_DvGg2() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x48, 0x65, 0x6c, 0x6c, 0x6f}); // Hexadecimal bytes for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithChar_ffZf3() throws DecoderException {
        Hex hex = new Hex();
        char[] input = "48656c6c6f".toCharArray(); // Hexadecimal for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_AwRC0() throws Exception {
        byte[] data = {0x01, 0x02, 0x03, 0x04};
        int dataOffset = 0;
        int dataLen = data.length;
        boolean toLowerCase = true;
        char[] out = new char[dataLen * 2];
        int outOffset = 0;
        Hex.encodeHex(data, dataOffset, dataLen, toLowerCase, out, outOffset);
        char[] expectedOutput = {'0', '1', '0', '2', '0', '3', '0', '4'};
        assertArrayEquals(expectedOutput, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_ValidHexInput_ShouldDecodeSuccessfully_weCy0() throws DecoderException {
        String hexString = "68656c6c6f"; // hex for "hello"
        byte[] expected = new byte[]{104, 101, 108, 108, 111}; // ASCII values for "hello"
        byte[] result = Hex.decodeHex(hexString);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNonEmptyBuffer_hwFg0() throws Exception {
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x4d});
        char[] expected = {'1', 'a', '2', 'b', '3', 'c', '4', 'd'};
        char[] result = Hex.encodeHex(buffer);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidHexInput_ufjb0() throws DecoderException {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        byte[] input = "68656c6c6f".getBytes(StandardCharsets.UTF_8); // hex for "hello"
        byte[] expected = "hello".getBytes(StandardCharsets.UTF_8);
        byte[] result = hex.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_dAKe0() throws Exception {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        ByteBuffer buffer = ByteBuffer.wrap("hello".getBytes(StandardCharsets.UTF_8));
        char[] expected = new char[]{'6', '8', '6', '5', '6', 'C', '6', 'C', '6', 'F'};
        char[] toDigits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] result = Hex.encodeHex(buffer, toDigits);
        assertArrayEquals(expected, result);
    }
}