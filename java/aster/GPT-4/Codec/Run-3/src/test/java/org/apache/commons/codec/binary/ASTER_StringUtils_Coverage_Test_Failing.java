/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Coverage_Test_Failing {
    @Test
    public void testNewStringWithUnsupportedEncoding_STih0_rsFE0() {
        byte[] bytes = {65, 66, 67}; // ABC in ASCII
        try {
            StringUtils.newStringUsAscii(bytes);
            fail("Expected an IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("Unsupported charset: unsupported_charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothStrings_kgBO0_Oazm0() {
        String cs1 = "hello";
        String cs2 = "hello";
        assertEquals("Both strings are equal and instances of String", cs1, cs2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_NonStringCharSequences_LrLS1_Mxcb0() {
        StringBuilder cs1 = new StringBuilder("hello");
        StringBuilder cs2 = new StringBuilder("hello");
        assertEquals("Both CharSequences are equal but not instances of String", cs1.toString(), cs2.toString());
    }
}