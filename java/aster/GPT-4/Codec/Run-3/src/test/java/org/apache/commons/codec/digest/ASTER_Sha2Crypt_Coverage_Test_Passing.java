/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithInvalidSaltNoDollarSign_dVFo1_1() {
        byte[] keyBytes = "password".getBytes();
        String salt = "invalidsalt";
        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            Sha2Crypt.sha256Crypt(keyBytes, salt);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithValidSaltNoRounds_PzrH2() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsSpecified_cnKE3() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=1000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsBelowMinimum_qnlG4() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=100$saltstring"; // Assuming ROUNDS_MIN is greater than 100
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsAboveMaximum_EcYr5() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=999999$saltstring"; // Assuming ROUNDS_MAX is less than 999999
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithLongKey_NVDw6() {
        byte[] keyBytes = new byte[1024]; // Large key size
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithShortKey_FodM7() {
        byte[] keyBytes = new byte[1]; // Very short key
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithLongSalt_ADAj8() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$verylongsaltstringthatexceeds16chars";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithShortSalt_xGdp9() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$short";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsCustomFlagTrue_iAhO10() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithMaximumBlocksize_GYLr12() {
        byte[] keyBytes = new byte[64]; // Blocksize for SHA-256
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithMinimumBlocksize_qDkT13() {
        byte[] keyBytes = new byte[1]; // Smaller than typical blocksize
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithKeyLengthMultipleOfBlocksize_IJXb14() {
        byte[] keyBytes = new byte[32]; // Exactly one blocksize for SHA-256
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithKeyLengthNotMultipleOfBlocksize_HLBE15() {
        byte[] keyBytes = new byte[35]; // Not a multiple of blocksize
        String salt = "$5$rounds=5000$saltstring";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltLengthMultipleOfBlocksize_Xgdc16() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$exactlysixteench";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithSaltLengthNotMultipleOfBlocksize_IZIh17() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$seventeencharsxx";
        assertNotNull(Sha2Crypt.sha256Crypt(keyBytes, salt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRoundsCustomInOutput_lRoC18() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$rounds=5000$saltstring";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertTrue(result.contains("rounds=5000$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithoutRoundsCustomInOutput_NHbw19() {
        byte[] keyBytes = "password".getBytes();
        String salt = "$5$saltstring";
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertFalse(result.contains("rounds="));
    }
}