/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Failing {
    private String decodeText(String str) throws UnsupportedEncodingException {
        if (!Charset.isSupported("Unsupported-Charset")) {
            throw new UnsupportedEncodingException("Unsupported charset");
        }
        return new String(str.getBytes("Unsupported-Charset"), Charset.defaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringObject_eYVg1() throws DecoderException {
        QCodec codec = new QCodec();
        String input = "Hello World";
        String expected = codec.decode(input);
        assertEquals("Decoding a String should return the decoded String", expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_bXxb3() throws DecoderException {
        QCodec codec = new QCodec();
        String input = "";
        String expected = codec.decode(input);
        assertEquals("Decoding an empty string should return an empty string", expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonEmptyString_qPEz4() throws DecoderException {
        QCodec codec = new QCodec();
        String input = "Test String";
        String expected = codec.decode(input);
        assertEquals("Decoding a non-empty string should return the decoded string", expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_yVIo3_ThlS0_fid3() throws EncoderException {
        QCodec codec = new QCodec();
        String testString = "";
        String expected = codec.encode(testString, "UTF-8");
        String result = codec.encode(testString, "UTF-8");
        assertEquals("Encoding an empty string should return the encoded string", expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_DSVO4_KPvK0_fid3() throws EncoderException {
        QCodec codec = new QCodec();
        Integer testInteger = 123;
        try {
            codec.encode(testInteger.toString(), "UTF-8");
            fail("Should have thrown EncoderException for non-string object");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type java.lang.Integer cannot be encoded using Q codec"), "Exception message should mention inability to encode the object type");
        }
    }
}