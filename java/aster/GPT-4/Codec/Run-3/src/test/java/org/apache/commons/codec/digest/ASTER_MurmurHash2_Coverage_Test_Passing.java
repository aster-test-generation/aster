/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithThreeRemainingBytes_aWIV0() {
        byte[] data = {1, 2, 3, 4, 5, 6, 7}; // 7 bytes, 1 full block (4 bytes) + 3 remaining bytes
        int seed = 123;
        int result = MurmurHash2.hash32(data, data.length, seed);
        System.out.println("Result with 3 remaining bytes: " + result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithTwoRemainingBytes_DGfl1() {
        byte[] data = {1, 2, 3, 4, 5, 6}; // 6 bytes, 1 full block (4 bytes) + 2 remaining bytes
        int seed = 123;
        int result = MurmurHash2.hash32(data, data.length, seed);
        System.out.println("Result with 2 remaining bytes: " + result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOneRemainingByte_GjuK2() {
        byte[] data = {1, 2, 3, 4, 5}; // 5 bytes, 1 full block (4 bytes) + 1 remaining byte
        int seed = 123;
        int result = MurmurHash2.hash32(data, data.length, seed);
        System.out.println("Result with 1 remaining byte: " + result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSevenBytes_ZpYA0() {
        byte[] data = {1, 2, 3, 4, 5, 6, 7};
        int length = 7;
        int seed = 123456;
        long result = MurmurHash2.hash64(data, length, seed);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSixBytes_NuZB1() {
        byte[] data = {1, 2, 3, 4, 5, 6};
        int length = 6;
        int seed = 123456;
        long result = MurmurHash2.hash64(data, length, seed);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithFiveBytes_amcY2() {
        byte[] data = {1, 2, 3, 4, 5};
        int length = 5;
        int seed = 123456;
        long result = MurmurHash2.hash64(data, length, seed);
        assertNotNull(result);
    }
}