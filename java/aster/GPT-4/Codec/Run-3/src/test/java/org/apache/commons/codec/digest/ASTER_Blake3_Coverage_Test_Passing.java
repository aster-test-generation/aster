/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashCoversUnpackInt_Vige0() {
        byte[] key = new byte[32];
        for (int i = 0; i < key.length; i++) {
            key[i] = (byte) i; // Fill the key with values 0, 1, 2, ..., 31
        }
        Blake3 blake3Instance = Blake3.initKeyedHash(key);
        assertNotNull(blake3Instance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKey_nGLw0() {
        byte[] key = new byte[32];
        for (int i = 0; i < key.length; i++) {
            key[i] = (byte) i;
        }
        Blake3 blake3 = Blake3.initKeyedHash(key);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_gHYM1() {
        assertThrows(NullPointerException.class, () -> {
            Blake3.initKeyedHash(null);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithShortKey_DNVz2() {
        byte[] key = new byte[16]; // shorter than required 32 bytes
        assertThrows(IllegalArgumentException.class, () -> {
            Blake3.initKeyedHash(key);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithLongKey_MBNP3() {
        byte[] key = new byte[64]; // longer than required 32 bytes
        assertThrows(IllegalArgumentException.class, () -> {
            Blake3.initKeyedHash(key);
        });
    }
}