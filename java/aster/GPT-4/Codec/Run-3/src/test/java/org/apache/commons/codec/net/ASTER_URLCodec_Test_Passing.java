/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_KufS0() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = codec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_bzQE1() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String encodedString = "Hello%20World";
        String result = codec.decode(encodedString, "UTF-8");
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEncodedString_aYDj1() throws Exception {
        URLCodec codec = new URLCodec("UTF-8");
        String encodedString = "Hello%20World";
        String expected = "Hello World";
        try {
            String result = codec.decode(encodedString);
            assertEquals(expected, result);
        } catch (DecoderException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_DefaultConstructor_vEIr0() throws Exception {
        URLCodec codec = new URLCodec();
        assertNull(codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_TEUQ0() throws Exception {
        URLCodec codec = new URLCodec("UTF-8");
        String expected = "UTF-8";
        String actual = codec.getDefaultCharset();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNullInput_zkxx0() throws Exception {
        byte[] input = null;
        byte[] result = URLCodec.decodeUrl(input);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_GhvJ1() throws Exception {
        byte[] input = "hello+world".getBytes();
        byte[] expected = "hello world".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithHexEncoding_FbEH2() throws Exception {
        byte[] input = "hello%20world".getBytes();
        byte[] expected = "hello world".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithMultipleEncodings_PgEE3() throws Exception {
        byte[] input = "hello%20world%21".getBytes();
        byte[] expected = "hello world!".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidHex_Vlwj4() throws Exception {
        byte[] input = "hello%2Gworld".getBytes();
        try {
            URLCodec.decodeUrl(input);
        } catch (DecoderException e) {
            assertEquals("Invalid URL encoding: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_zQHM1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "hello%20world".getBytes();
        byte[] expected = "hello world".getBytes();
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_jiHe2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "hello%20world";
        String expected = "hello world";
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_qbZN1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "testString".getBytes();
        assertNotNull(codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_Cjne2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "testString";
        assertNotNull(codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NullBytes_ReturnsNull_usHq0() throws Exception {
        byte[] result = URLCodec.encodeUrl(null, null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_EmptyBytes_ReturnsEmpty_lvHl1() throws Exception {
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_SafeCharacters_ReturnsSame_clpg2() throws Exception {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] input = new byte[]{'a', 'b', 'c'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_SpaceCharacter_EncodesToPlus_rsGu3() throws Exception {
        BitSet urlsafe = new BitSet();
        urlsafe.set(' ');
        byte[] input = new byte[]{' '};
        byte[] expected = new byte[]{'+'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UnsafeCharacter_EncodesWithEscape_owdN4() throws Exception {
        BitSet urlsafe = new BitSet();
        byte[] input = new byte[]{'#'};
        byte[] expected = new byte[]{'%', '2', '3'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_MixedCharacters_EncodesCorrectly_VBqi5() throws Exception {
        BitSet urlsafe = new BitSet();
        urlsafe.set('a');
        urlsafe.set(' ');
        byte[] input = new byte[]{'a', ' ', '#'};
        byte[] expected = new byte[]{'a', '+', '%', '2', '3'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_AllCharacters_EncodesAll_GSCH6() throws Exception {
        BitSet urlsafe = new BitSet();
        for (int i = 0; i < 256; i++) {
            urlsafe.set(i);
        }
        byte[] input = new byte[]{(byte) 0, (byte) 255, 'a', '#', ' '};
        byte[] expected = new byte[]{(byte) 0, (byte) 255, 'a', '#', ' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_qsyq1() throws Exception {
        URLCodec codec = new URLCodec("UTF-8");
        String input = "hello world! @#&";
        String expected = "hello%20world%21%20%40%23%26";
        try {
            String result = codec.encode(input);
            assertEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_SNct0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String original = "hello world";
        String charsetName = "UTF-8";
        String encoded = codec.encode(original, charsetName);
        assertEquals("hello%20world", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_zzXL1() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String original = null;
        String charsetName = "UTF-8";
        String encoded = codec.encode(original, charsetName);
        assertNull(encoded);
    }
}