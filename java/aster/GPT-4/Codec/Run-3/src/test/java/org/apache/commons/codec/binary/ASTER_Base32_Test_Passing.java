/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithCustomLineSeparator_MqMA0() throws Exception {
        byte[] expectedSeparator = new byte[]{10, 13}; // LF, CR
        Base32 base32 = new Base32(76, expectedSeparator);
        assertArrayEquals(expectedSeparator, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithCustomLineSeparatorAndHex_mTVM1() throws Exception {
        byte[] expectedSeparator = new byte[]{0, 1, 2};
        Base32 base32 = new Base32(50, expectedSeparator, true);
        assertArrayEquals(expectedSeparator, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithCustomLineSeparatorHexAndPadding_bauN2() throws Exception {
        byte[] expectedSeparator = new byte[]{7, 8};
        Base32 base32 = new Base32(64, expectedSeparator, true, (byte) '=');
        assertArrayEquals(expectedSeparator, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithCustomLineSeparatorHexPaddingAndPolicy_Bckl3() throws Exception {
        byte[] expectedSeparator = new byte[]{3, 4, 5};
        Base32 base32 = new Base32(32, expectedSeparator, false, (byte) '.', CodecPolicy.STRICT);
        assertArrayEquals(expectedSeparator, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithCustomLineSeparatorHexAndNoPadding_PzOT4() throws Exception {
        byte[] expectedSeparator = new byte[]{9, 10};
        Base32 base32 = new Base32(48, expectedSeparator, false, (byte) '_');
        assertArrayEquals(expectedSeparator, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorDefault_BReN5() throws Exception {
        Base32 base32 = new Base32();
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthOnly_ujVQ6() throws Exception {
        Base32 base32 = new Base32(72);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithHexOnly_IYDl7() throws Exception {
        Base32 base32 = new Base32(true);
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithPaddingOnly_wZSu8() throws Exception {
        Base32 base32 = new Base32((byte) '%');
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithHexAndPadding_Ftlq9() throws Exception {
        Base32 base32 = new Base32(false, (byte) '&');
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidInput_ReturnsTrue_yDnc0() throws Exception {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidInput_ReturnsFalse_jWCD1() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '!'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_BoundaryInput_ReturnsTrue_jsvl2() throws Exception {
        Base32 base32 = new Base32(true);
        assertTrue(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NegativeInput_ReturnsFalse_OCyK3() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) -1));
    }
}