/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_HmacUtils_Coverage_Test_Passing {
    private static final int STREAM_BUFFER_LENGTH = 1024; // Assuming this is defined somewhere in your actual class

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithInvalidAlgorithm_YivE0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithNoSuchAlgorithmException_czUz0() {
        HmacAlgorithms mockAlgorithm = mock(HmacAlgorithms.class);
        when(mockAlgorithm.getName()).thenReturn("INVALID_ALGORITHM");
        assertFalse(HmacUtils.isAvailable(mockAlgorithm));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_MFmR0() {
        String key = "testKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = { /* This should be the expected HMAC SHA-256 output for the given key and string, 
                                     assuming it's precomputed or mocked. Example output is just a placeholder. */
        (byte) 0x8f, (byte) 0x14, (byte) 0xe4, (byte) 0x5f, (byte) 0x67, (byte) 0x8a, (byte) 0x1b, (byte) 0x8c,
        (byte) 0x2b, (byte) 0xf2, (byte) 0xb9, (byte) 0x3b, (byte) 0x5e, (byte) 0xc6, (byte) 0xf9, (byte) 0xbf,
        (byte) 0x7b, (byte) 0xd9, (byte) 0xc8, (byte) 0xbc, (byte) 0x9a, (byte) 0x6d, (byte) 0x6c, (byte) 0x1b,
        (byte) 0xcb, (byte) 0x02, (byte) 0x79, (byte) 0x67, (byte) 0xed, (byte) 0x48, (byte) 0x2e, (byte) 0x6c};
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
    }

    @Test
    public void testGetInitializedMacWithInvalidAlgorithm_agxe0_yIqP0() {
        String invalidAlgorithm = "INVALID_ALGO";
        byte[] key = new byte[]{1, 2, 3, 4};
        assertThrows(IllegalArgumentException.class, () -> {
            new HmacUtils(invalidAlgorithm, key);
        });
    }

    @Test
    public void testGetInitializedMacWithInvalidKey_bLCR1_TMJO0() {
        assertThrows(IllegalArgumentException.class, () -> {
            String validAlgorithm = "HmacSHA256";
            byte[] invalidKey = null; // Null key to trigger the null key check
            new HmacUtils(validAlgorithm, invalidKey);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_QQfA0_Hfhi0() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer buffer = ByteBuffer.wrap("data to be hashed".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String result = hmacUtils.hmacHex(buffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_FTdH0_XjOM0() throws IOException {
        byte[] key = "secretKey".getBytes();
        String data = "Data to be hashed using HMAC MD5";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, key);
        String result = hmacUtils.hmacHex(buffer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_NGOM0_IGah0() throws IOException {
        byte[] key = "secretKey".getBytes();
        ByteBuffer data = ByteBuffer.wrap("data to be hashed".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String result = hmacUtils.hmacHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyStream_GYWY0_klQl0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer emptyBuffer = ByteBuffer.allocate(0);
        String result = hmacUtils.hmacHex(emptyBuffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyStream_GYWY0_klQl0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer emptyBuffer = ByteBuffer.allocate(0);
        String result = hmacUtils.hmacHex(emptyBuffer);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithNonEmptyStream_wGbs1_nwCC0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer dataBuffer = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = hmacUtils.hmacHex(dataBuffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithNonEmptyStream_wGbs1_nwCC0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        ByteBuffer dataBuffer = ByteBuffer.wrap("Hello, World!".getBytes());
        String result = hmacUtils.hmacHex(dataBuffer);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithLargeStream_WbPg2_xorP0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] largeData = new byte[STREAM_BUFFER_LENGTH * 10]; // 10 times the buffer size
        for (int i = 0; i < largeData.length; i++) {
            largeData[i] = (byte) (i % 256);
        }
        ByteBuffer largeDataBuffer = ByteBuffer.wrap(largeData);
        String result = hmacUtils.hmacHex(largeDataBuffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithLargeStream_WbPg2_xorP0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] largeData = new byte[STREAM_BUFFER_LENGTH * 10]; // 10 times the buffer size
        for (int i = 0; i < largeData.length; i++) {
            largeData[i] = (byte) (i % 256);
        }
        ByteBuffer largeDataBuffer = ByteBuffer.wrap(largeData);
        String result = hmacUtils.hmacHex(largeDataBuffer);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithPartialBufferReads_LvEs3_tOYk0_1() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] data = new byte[STREAM_BUFFER_LENGTH / 2]; // Half the buffer size
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) (i % 256);
        }
        ByteBuffer buffer = ByteBuffer.wrap(data);
        String result = hmacUtils.hmacHex(buffer);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithPartialBufferReads_LvEs3_tOYk0_2() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] data = new byte[STREAM_BUFFER_LENGTH / 2]; // Half the buffer size
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) (i % 256);
        }
        ByteBuffer buffer = ByteBuffer.wrap(data);
        String result = hmacUtils.hmacHex(buffer);
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_FdSG0_bvJd0_fid1() throws IOException {
        byte[] key = "test-key".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key);
        String expectedOutput = "1db8910982aaf1937e51f69d134d4c910810184f1f490f3c6824f0a278f3c0824bc606643d1c4d7765e4250071bbd59a";
        String result = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_xQab0_OkHn0_fid1() throws IOException {
        byte[] key = "testKey".getBytes();
        String data = "Hello, HMAC!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String expectedOutput = "a1b2c3d4"; // Mocked HMAC output in hex
        String result = hmacUtils.hmacHex(buffer);
    }
}