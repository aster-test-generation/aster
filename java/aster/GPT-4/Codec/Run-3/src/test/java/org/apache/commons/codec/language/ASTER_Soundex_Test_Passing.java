/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NullInput_Bogc0() throws Exception {
        Soundex soundex = new Soundex();
        String result = soundex.soundex(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_EmptyString_ljWJ1() throws Exception {
        Soundex soundex = new Soundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_AllSilentMarkers_EbCR2() throws Exception {
        Soundex soundex = new Soundex("00000000000000000000000000");
        String result = soundex.soundex("AEIOU");
        assertEquals("A000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NormalCase_ytAq3() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456");
        String result = soundex.soundex("ABC");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_SpecialCaseHW_dlDw4() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456", true);
        String result = soundex.soundex("AHWBC");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_NoSpecialCaseHW_Puwt5() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456", false);
        String result = soundex.soundex("AHWBC");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_RepeatedCharacters_RYqX6() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456");
        String result = soundex.soundex("AABBCC");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_IgnoreNonMappedChars_lTsl7() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456");
        String result = soundex.soundex("A!@#B$%^C&*()");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_CharArrayMapping_rIiW8() throws Exception {
        Soundex soundex = new Soundex(new char[]{'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6'});
        String result = soundex.soundex("XYZ");
        assertEquals("X123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_LongInput_Lbnu9() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456");
        String result = soundex.soundex("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_DigitsInInput_CWnH10() throws Exception {
        Soundex soundex = new Soundex("12345678901234567890123456");
        String result = soundex.soundex("A1B2C3");
        assertEquals("A123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_FdPy0() throws EncoderException {
        Soundex soundex = new Soundex();
        String s1 = "Robert";
        String s2 = "Rupert";
        int result = soundex.difference(s1, s2);
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_OzJo0() throws Exception {
        Soundex soundex = new Soundex();
        String input = "Example";
        String expected = "E251"; // Assuming soundex method implementation for "Example" returns "E251"
        assertEquals(expected, soundex.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBasic_IoaS0() throws Exception {
        Soundex soundex = new Soundex();
        String input = "Example";
        String expected = "E251"; // Assuming 'E251' is the correct Soundex code for "Example"
        String result = soundex.encode(input);
        assertEquals(expected, result);
    }
}