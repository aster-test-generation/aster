/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Passing {
    private String decodeText(String str) throws UnsupportedEncodingException {
        if (!Charset.isSupported("Unsupported-Charset")) {
            throw new UnsupportedEncodingException("Unsupported charset");
        }
        return new String(str.getBytes("Unsupported-Charset"), Charset.defaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullObject_ADGz0_CBac0() throws DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_NullInput_rZwF0_dsbR0() {
        QCodec codec = new QCodec();
        byte[] result = codec.doEncoding(null);
        assertNull(result, "Expected null for null input");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_EncodeBlanksFalse_Zjer1_KDfp0() {
        QCodec codec = new QCodec();
        byte[] input = "Hello World".getBytes();
        byte[] expected = QuotedPrintableCodec.encodeQuotedPrintable(null, input);
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(expected, result, "Expected encoded bytes without converting spaces");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ZdII1_uNVP0() throws EncoderException {
        QCodec codec = new QCodec();
        String testString = "Hello, World!";
        String expected = codec.encode(testString, "UTF-8");
        String result = codec.encode(testString, "UTF-8");
        assertEquals(expected, result, "Encoding a String should return the encoded string");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_yVIo3_ThlS0() throws EncoderException {
        QCodec codec = new QCodec();
        String testString = "";
        String expected = codec.encode(testString, "UTF-8");
        String result = codec.encode(testString, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_DSVO4_KPvK0() throws EncoderException {
        QCodec codec = new QCodec();
        Integer testInteger = 123;
        try {
            codec.encode(testInteger.toString(), "UTF-8");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type java.lang.Integer cannot be encoded using Q codec"), "Exception message should mention inability to encode the object type");
        }
    }
}