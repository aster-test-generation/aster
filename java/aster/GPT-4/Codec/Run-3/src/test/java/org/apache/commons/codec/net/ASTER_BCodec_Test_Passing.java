/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_MrrZ0() throws Exception {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String input = "SGVsbG8gV29ybGQ="; // Base64 encoded string of "Hello World"
        String expected = "Hello World";
        String result = codec.decode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullInput_UkaI0() throws Exception {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        byte[] input = null;
        byte[] result = codec.doDecoding(input);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithValidInput_pMwD1() throws Exception {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] input = "SGVsbG8gV29ybGQ=".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "Hello World".getBytes(StandardCharsets.UTF_8);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_JuTM0() throws Exception {
        BCodec bCodec = new BCodec();
        String encoding = bCodec.getEncoding();
        assertEquals("B", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingTrue_cItf0() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingFalse_djXv1() throws Exception {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullValue_Akql0() throws Exception {
        BCodec codec = new BCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullInput_rcye1() throws Exception {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        byte[] result = codec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_vfkC0() throws Exception {
        BCodec codec = new BCodec();
        Object result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_iPdM1() throws Exception {
        BCodec codec = new BCodec();
        String testString = "Hello, World!";
        Object result = codec.encode(testString);
        assertEquals(testString, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_TIRE0() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String input = "Hello World";
        String expected = "SGVsbG8gV29ybGQ="; // Assuming encodeText performs Base64 encoding
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullString_yotv0() throws EncoderException {
        BCodec codec = new BCodec(StandardCharsets.UTF_8);
        String input = "Hello World";
        String expected = "SGVsbG8gV29ybGQ="; // Assuming Base64 encoding for example
        String result = codec.encode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_Izub0() throws Exception {
        BCodec codec = new BCodec();
        String inputString = "Hello World!";
        String unsupportedCharset = "unsupported_charset";
        try {
            codec.encode(inputString, unsupportedCharset);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertNotNull(e.getMessage());
            assertTrue(e.getCause() instanceof UnsupportedCharsetException);
        }
    }
}