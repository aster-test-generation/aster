/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ELqv2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "test";
        String expected = codec.encode(input);
        assertEquals("Encoding string should return encoded string", expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_icLn4() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        String expected = codec.encode(input);
        assertEquals("Encoding empty string should return empty string", expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_Psmo5() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        byte[] expected = codec.encode(input);
        assertEquals("Encoding empty byte array should return empty byte array", new String(expected), new String(codec.encode(input)));
    }

    @Test
    public void testDecodeWithUnsupportedTypeInteger_MWCq6_uSyr0() {
        URLCodec codec = new URLCodec();
        String input = "123";
        try {
            codec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_oBpV0_IxQz0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull("Encoding a null should return null", codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_hQpC0_XzPp0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = codec.encode(null, "UTF-8");
        assertNull("Encoding a null should return null", result);
    }
}