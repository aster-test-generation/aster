/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_ComplexInput_quDS9() throws DecoderException {
        byte[] input = "Complex=20Input=20with=3D=20equals=20and=20=C3=A9".getBytes();
        byte[] expected = "Complex Input with= equals and ".getBytes();
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NullInput_ReturnsNull_SKIg0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, StandardCharsets.UTF_8);
        assertNull("Expected output to be null for null input", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_EmptyString_ReturnsEmptyString_loiQ1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode("", StandardCharsets.UTF_8);
        assertEquals("Expected empty string for empty input", "", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NonEmptyString_ReturnsDecodedString_lxkJ2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encodedString = "=48=65=6C=6C=6F"; // "Hello" encoded in quoted-printable
        String result = codec.decode(encodedString, StandardCharsets.UTF_8);
        assertEquals("Expected decoded string to be 'Hello'", "Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_JXZF0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, StandardCharsets.UTF_8);
        assertNull("Encoding a null string should return null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyString_ReturnsEmptyString_ULif1_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode("", StandardCharsets.UTF_8);
        assertEquals("Encoding an empty string should return an empty string", "", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonEmptyString_CorrectEncoding_MsEw2_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello=2C World=21"; // Assuming the encode method encodes spaces and special characters correctly
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals("Encoding a non-empty string should return the encoded string", expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullSourceString_ReturnsNull_rrCI0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, "UTF-8");
        assertNull("Encoding a null string should return null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonNullSourceString_CorrectEncoding_CHnH1_fid1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = StringUtils.newStringUsAscii(codec.encode(sourceStr.getBytes(sourceCharset)));
        String result = codec.encode(sourceStr, sourceCharset);
        assertEquals("Encoding a non-null string should return the encoded string", expected, result);
    }
}