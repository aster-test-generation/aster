/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitHash_xPQb0() {
        Blake3 result = Blake3.initHash();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKey_qsnt0() {
        byte[] validKey = new byte[32];
        Arrays.fill(validKey, (byte) 1);
        Blake3 result = Blake3.initKeyedHash(validKey);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_CADV1() {
        byte[] invalidKey = new byte[31];
        Arrays.fill(invalidKey, (byte) 1);
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(invalidKey));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_OnPM1() {
        byte[] invalidKey = new byte[31];
        Arrays.fill(invalidKey, (byte) 1);
        assertThrows(IllegalArgumentException.class, () -> {
            Blake3.initKeyedHash(invalidKey);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashWithEmptyData_OIOL0_1() {
        byte[] data = new byte[0];
        byte[] result = Blake3.hash(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashWithEmptyData_OIOL0() {
        byte[] data = new byte[0];
        byte[] result = Blake3.hash(data);
        assertNotNull(result);
        assertEquals(32, result.length); // Assuming OUT_LEN is 32
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKey_BYxA0() {
        byte[] validKey = new byte[32];
        for (int i = 0; i < 32; i++) {
            validKey[i] = (byte) i;
        }
        Blake3 result = Blake3.initKeyedHash(validKey);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_RDAX1() {
        byte[] invalidKey = new byte[31]; // Length is not 32 bytes
        try {
            Blake3.initKeyedHash(invalidKey);
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Blake3 keys must be 32 bytes", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunctionWithNonNullContext_Ybrv0() {
        byte[] kdfContext = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_YxPY0() {
        byte[] kdfContext = new byte[]{1, 2, 3, 4}; // Example context
        Blake3 result = Blake3.initKeyDerivationFunction(kdfContext);
        byte[] expectedHash = Blake3.hash(kdfContext);
        byte[] resultHash = Blake3.hash(result.hash(new byte[0])); // Assuming a method to get hash from Blake3 instance
    }
}