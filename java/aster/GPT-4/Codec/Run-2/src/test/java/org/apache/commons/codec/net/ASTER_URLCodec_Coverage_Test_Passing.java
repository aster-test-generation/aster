/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_IrRY2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "test";
        assertNotNull("Encoding string should not return null", codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_YcOI4() throws EncoderException {
        URLCodec codec = new URLCodec();
        assertEquals("", "", codec.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNullUrlSafe_oAiI0() {
        final byte[] inputBytes = "hello world".getBytes();
        final byte[] expectedOutput = "hello+world".getBytes(); // Assuming space is replaced by '+', and other characters are safe
        byte[] result = URLCodec.encodeUrl(null, inputBytes);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNonNullUrlSafe_AMSP1() {
        BitSet urlSafe = new BitSet(256);
        for (int i = 'a'; i <= 'z'; i++) {
            urlSafe.set(i);
        }
        for (int i = 'A'; i <= 'Z'; i++) {
            urlSafe.set(i);
        }
        urlSafe.set('+'); // '+' itself is considered safe here
        final byte[] inputBytes = "hello world".getBytes();
        final byte[] expectedOutput = "hello%20world".getBytes(); // Assuming space is encoded as "%20"
        byte[] result = URLCodec.encodeUrl(urlSafe, inputBytes);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_kdIP1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test%20string".getBytes();
        byte[] expected = "test string".getBytes(); // Assumingnew URLCodec().decode(byte[]) is implemented correctly
        byte[] result = (byte[]) codec.decode(input);
        assertEquals(new String(expected), new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_bulJ2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "test%20string";
        String expected = "test string"; // Assumingnew URLCodec().decode(String) is implemented correctly
        String result = (String) codec.decode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_joxC4() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "";
        String expected = ""; // Assumingnew URLCodec().decode(String) handles empty strings correctly
        String result = (String) codec.decode(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_ZIgk5() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        byte[] expected = new byte[0]; // Assumingnew URLCodec().decode(byte[]) handles empty arrays correctly
        byte[] result = (byte[]) codec.decode(input);
        assertEquals(new String(expected), new String(result));
    }

    @Test
    public void testDecodeWithUnsupportedEncoding_BMCD1_HriK0() {
        URLCodec codec = new URLCodec("unsupported-charset");
        try {
            codec.decode("test%20string");
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    public void testDecodeUrlWithIncompleteEscapeSequence_nUtR0_tYAj0() {
        byte[] input = "Hello%2".getBytes();
        assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(input));
    }

    @Test
    public void testDecodeUrlWithSingleEscapeCharacter_YHbO1_XQri0() {
        byte[] input = "Hello%".getBytes();
        assertThrows(DecoderException.class, () -> URLCodec.decodeUrl(input));
    }

    @Test
    public void testDecodeWithUnsupportedObject_bxDS3_IwrH0() {
        URLCodec codec = new URLCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_kTfp1_BVkv0() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test".getBytes();
        byte[] result = codec.encode(input);
        assertNotNull(result, "Encoding byte array should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyByteArray_IYfz5_BSLf0() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[0];
        assertArrayEquals((byte[]) codec.encode(input), input, "Encoding empty byte array should return empty byte array");
    }
}