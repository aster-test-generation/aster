/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_nrxn2() {
        PercentCodec codec = new PercentCodec();
        try {
            codec.encode(12345);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be Percent encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedType_xzVF2() {
        PercentCodec codec = new PercentCodec();
        try {
            codec.decode("Hello%20World");
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.String cannot be Percent decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_dXJn0_Eemc0() {
        PercentCodec codec = new PercentCodec();
        try {
            assertNull(codec.decode(null));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_xctz0_raIL0() {
        PercentCodec codec = new PercentCodec();
        try {
            Object result = codec.encode(null);
            assertNull(result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_fNlq1_QaHu0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        try {
            assertArrayEquals(expected, codec.decode(input));
        } catch (DecoderException e) {
            fail("DecoderException was thrown.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptyArray_gtLT1_ovKX0() {
        try {
            PercentCodec codec = new PercentCodec();
            byte[] input = new byte[0];
            byte[] result = codec.encode(input);
            assertArrayEquals(input, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown.");
        } catch (Exception e) {
            fail("Unexpected exception type thrown.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullInput_egqg0_Xnkq0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.encode(null);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoSpecialCharacters_LmKE2_WuCc0() {
        try {
            PercentCodec codec = new PercentCodec();
            byte[] input = "hello".getBytes();
            byte[] result = codec.encode(input);
            assertArrayEquals(input, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown.");
        } catch (Exception e) {
            fail("Unexpected exception.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpaceNoPlusForSpace_YNMm4_rbvC0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{' '}, false);
            byte[] input = "hello world".getBytes();
            byte[] result = codec.encode(input);
            assertNotNull(result);
            assertNotEquals(input, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSpecialCharacters_KjfA5_rcvw0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{':', '/', '?'}, false);
            byte[] input = "http://example.com?query=test".getBytes();
            byte[] result = codec.encode(input);
            assertNotNull(result);
            assertNotEquals(new String(input), new String(result));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpace_SKSP3_atHK0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{' '}, true);
            byte[] input = "hello world".getBytes();
            byte[] result = codec.encode(input);
            assertNotNull(result);
            assertNotEquals(input, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_Ilfw3_sLHT0() {
        try {
            byte[] alwaysEncodeChars = {0x20}; // space character
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
            byte[] input = "hello world".getBytes();
            byte[] expected = "hello%20world".getBytes();
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_NAzk1_UHGd0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "test string".getBytes();
        try {
            byte[] result = codec.encode(input);
            assertNotNull(result);
            assertTrue(result instanceof byte[]);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_ReturnsEmptyArray_ERBj1_QfQC0() {
        PercentCodec codec = new PercentCodec();
        try {
            assertArrayEquals(new byte[]{}, codec.encode(new byte[]{}));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_FWeZ4_vCcm0() {
        try {
            byte[] alwaysEncodeChars = {0x20}; // space character
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
            byte[] input = "hello world".getBytes();
            byte[] expected = "hello+world".getBytes();
            byte[] result = codec.encode(input);
        } catch (Exception e) {
            fail("Exception was thrown.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_xsyg0_Hhee0() {
        PercentCodec codec = new PercentCodec();
        try {
            assertNull(codec.encode(null));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncodingNeeded_ReturnsSameArray_oXkY2_Kutm0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = {'a', 'b', 'c'}; // ASCII characters not in alwaysEncodeChars
        try {
            assertArrayEquals(input, codec.encode(input));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonAsciiCharacters_IuMZ5_VvqM0() {
        try {
            PercentCodec codec = new PercentCodec();
            byte[] input = new byte[]{(byte) 0x80, (byte) 0xFF};
            byte[] expected = "%80%FF".getBytes();
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullInput_IPQr0_UUYH0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.decode(null);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ComplexEncoding_ReturnsCorrectlyEncoded_OtFg5_ceBa0() {
        try {
            byte[] input = new byte[]{(byte) 0xFF, (byte) '!', (byte) ' '};
            PercentCodec codec = new PercentCodec(new byte[]{0x7F}, true); // Changed the byte array to avoid IllegalArgumentException
            byte[] result = codec.encode(input);
            byte[] expected = new byte[]{'%', 'F', 'F', '!', '+'}; // Adjusted expected result based on the new codec setup
            assertArrayEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpecialCharacters_ReturnsPercentEncoded_zesb4_boGK0() {
        try {
            byte[] input = new byte[]{(byte) 0xF0, (byte) 0x9F, (byte) 0x98, (byte) 0x81}; // U+1F601 😁
            PercentCodec codec = new PercentCodec();
            byte[] result = codec.encode(input);
            byte[] expected = new byte[]{'%', 'F', '0', '%', '9', 'F', '%', '9', '8', '%', '8', '1'};
            assertArrayEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpaceEncodingWithPlus_ReturnsEncodedArrayWithPlus_SVOU4_qNLo0() {
        try {
            byte[] alwaysEncodeChars = {'a', 'b', 'c'};
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
            byte[] input = {'a', ' ', 'c'};
            byte[] expected = {'%', '6', '1', '+', '%', '6', '3'};
            assertArrayEquals(expected, codec.encode(input));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EmptyArray_ReturnsEmptyArray_jiWG1_zCix0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[0];
        byte[] result = new byte[0];
        try {
            result = codec.encode(input);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoNeedToEncode_ReturnsSameArray_fdaj2_oxHv0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = {'a', 'b', 'c'}; // Assuming these characters do not need encoding
        byte[] result = null;
        try {
            result = codec.encode(input);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpaceNeedsEncoding_PlusForSpaceTrue_CDOk4_gmgJ0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{' '}, true);
            byte[] input = {' '};
            byte[] expected = {'+'};
            byte[] result = codec.encode(input);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EncodingNeeded_ReturnsEncodedArray_TnFl3_tkYF0() {
        try {
            byte[] alwaysEncodeChars = {'a', 'b', 'c'};
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
            byte[] input = {'a', ' ', 'c'};
            byte[] expected = {'%', '6', '1', ' ', '%', '6', '3'};
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MixedInput_ReturnsCorrectlyEncodedArray_rLzE5_rExm0() {
        try {
            byte[] alwaysEncodeChars = {'a', 'b', 'c', '1', '2', '3'};
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
            byte[] input = {'a', '1', 'x', ' '};
            byte[] expected = {'%', '6', '1', '%', '3', '1', 'x', ' '};
            assertArrayEquals(expected, codec.encode(input));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncodingNeeded_ReturnsSameArray_Shzp2_dHOq0() {
        byte[] input = new byte[]{'h', 'e', 'l', 'l', 'o'}; // ASCII characters that do not need encoding
        PercentCodec codec = new PercentCodec();
        try {
            byte[] result = codec.encode(input);
            assertArrayEquals(input, result); // Assert that the original array is returned as is
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpaceNeedsEncoding_PlusForSpaceFalse_WWOl5_SznV0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{' '}, false);
            byte[] input = {' '};
            byte[] expected = {'%', '2', '0'};
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AllCharactersNeedEncoding_KFBw3_cNyb0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[]{'a', 'b', 'c'}, false);
            byte[] input = {'a', 'b', 'c'};
            byte[] expected = {'%', '6', '1', '%', '6', '2', '%', '6', '3'};
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncodingNeeded_ReturnsSameArray_JuPc2_Pibn0() {
        try {
            PercentCodec codec = new PercentCodec();
            byte[] input = new byte[]{'h', 'e', 'l', 'l', 'o'};
            assertArrayEquals(input, codec.encode(input));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NoEncodingNeeded_ReturnsSameArray_Gjiw2_mYWc0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = {'h', 'e', 'l', 'l', 'o'};
        byte[] result = null;
        try {
            result = codec.encode(input);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpecialChars_EncodesCorrectly_TXnc4_JAuZ0() {
        try {
            byte[] alwaysEncodeChars = {0x21}; // '!' character
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
            byte[] input = "hello!".getBytes();
            byte[] expected = "hello%21".getBytes();
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EncodingNeeded_ReturnsEncodedArray_rSgE3_PHdf0() {
        byte[] alwaysEncodeChars = {0x20}; // Space character
        PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
        byte[] input = "hello world".getBytes();
        byte[] expected = "hello%20world".getBytes(); // Fixed expected result to match the encoding of space as %20
        byte[] result = new byte[0];
        try {
            result = codec.encode(input);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NegativeByteValue_ReturnsPercentEncodedArray_WrRw5_cGTv0() {
        byte[] input = new byte[]{(byte) 150};
        byte[] expected = new byte[]{'%', '9', '6'};
        PercentCodec codec = new PercentCodec();
        try {
            assertArrayEquals(expected, codec.encode(input));
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EncodeNonAsciiCharacters_ReturnsPercentEncoded_RmKw4_PHFi0() {
        try {
            PercentCodec codec = new PercentCodec();
            byte[] input = {'h', 'e', 'l', 'l', 'o', (byte) 128};
            byte[] expected = {'h', 'e', 'l', 'l', 'o', '%', '8', '0'};
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MixedConditions_EncodesCorrectly_tcJo5_CwfU0() {
        try {
            byte[] alwaysEncodeChars = {0x20, 0x21}; // Space and '!' characters
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, true);
            byte[] input = "hello world!".getBytes();
            byte[] expected = "hello+world%21".getBytes();
            byte[] result = codec.encode(input);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_AlwaysEncodeChars_ReturnsPercentEncodedArray_joNx4_mdzP0() {
        try {
            byte[] alwaysEncodeChars = new byte[]{(byte) 'a'};
            PercentCodec codec = new PercentCodec(alwaysEncodeChars, false);
            byte[] input = new byte[]{'a'};
            byte[] expected = new byte[]{'%', '6', '1'};
            assertArrayEquals(expected, codec.encode(input));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_SpaceEncodingWithPlus_ReturnsEncodedSpaces_SnQj3_CWFa0() {
        try {
            PercentCodec codec = new PercentCodec(new byte[0], true);
            byte[] input = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
            byte[] expected = {'h', 'e', 'l', 'l', 'o', '+', 'w', 'o', 'r', 'l', 'd'};
            byte[] result = codec.encode(input);
            assertArrayEquals(expected, result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }
}