/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_bwpQ1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSimpleInput_dese0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Miller");
        assertEquals("645000|546000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithComplexInput_xyty1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Schmidt");
        assertEquals("486000|463000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmptyInput_btJw2() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonBranching_deMf1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String source = "Mller";
        String expected = "645"; // Assuming "645" is the expected soundex code for "Mller" with non-branching logic
        String result = dms.encode(source);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSimpleInput_zOiM0() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Muller");
        assertEquals("645700|647000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithComplexInput_WAII1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        String result = dms.soundex("Schwarz");
        assertEquals("474600|479400", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmptyInput_OYuI2() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("");
        assertEquals("", result);
    }
}