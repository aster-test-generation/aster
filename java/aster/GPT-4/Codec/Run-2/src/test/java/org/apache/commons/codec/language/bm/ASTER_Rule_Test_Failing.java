/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAshkenaziAndExactRulesForEnglish_FFAs0_1() {
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, "English");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAshkenaziAndExactRulesForEnglish_FFAs0_2() {
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, "English");
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyLanguageSet_cJRO0() {
        LanguageSet emptyLangSet = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, emptyLangSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_UMGh1() {
        Set<String> languages = new HashSet<>();
        languages.add("English");
        LanguageSet singleLangSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.RULES, singleLangSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNonExistingLanguage_LuOr3() {
        Set<String> languages = new HashSet<>(Arrays.asList("Klingon"));
        LanguageSet nonExistingLangSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, nonExistingLangSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceReturnsConsistentResults_pSNS6() {
        Set<String> languages = new HashSet<>(Arrays.asList("Spanish"));
        LanguageSet langSet = LanguageSet.from(languages);
        List<Rule> result1 = Rule.getInstance(NameType.SEPHARDIC, RuleType.APPROX, langSet);
        List<Rule> result2 = Rule.getInstance(NameType.SEPHARDIC, RuleType.APPROX, langSet);
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyRules_yFsC7() {
        Set<String> languages = new HashSet<>();
        LanguageSet langSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, langSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingletonLanguageSet_mGmR8() {
        Set<String> languages = new HashSet<>(Collections.singleton("Italian"));
        LanguageSet singletonLangSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.RULES, singletonLangSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAshkenaziAndExactRulesForEnglish_FFAs0() {
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, "English");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAshkenaziAndExactRulesForEnglish_FFAs0_1_fid2() {
        try {
            List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, "English");
            fail("Expected IllegalArgumentException was not thrown.");
        } catch (IllegalArgumentException e) {
            assertEquals("No rules found for ash, exact, English", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAshkenaziAndExactRulesForEnglish_FFAs0_2_fid2() {
        List<Rule> result = Rule.getInstance(NameType.ASHKENAZI, RuleType.EXACT, "English");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingleLanguage_UMGh1_fid2() {
        Set<String> languages = new HashSet<>();
        languages.add("English");
        LanguageSet singleLangSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.RULES, singleLangSet);
        assertTrue(result.containsKey("English") && !result.get("English").isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithNonExistingLanguage_LuOr3_fid2() {
        Set<String> languages = new HashSet<>(Arrays.asList("Klingon"));
        LanguageSet nonExistingLangSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.GENERIC, RuleType.EXACT, nonExistingLangSet);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceReturnsConsistentResults_pSNS6_fid2() {
        Set<String> languages = new HashSet<>(Arrays.asList("Spanish"));
        LanguageSet langSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result1 = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.APPROX, langSet);
        Map<String, List<Rule>> result2 = Rule.getInstanceMap(NameType.SEPHARDIC, RuleType.APPROX, langSet);
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithSingletonLanguageSet_mGmR8_fid2() {
        Set<String> languages = new HashSet<>(Collections.singleton("Italian"));
        LanguageSet singletonLangSet = LanguageSet.from(languages);
        Map<String, List<Rule>> result = Rule.getInstanceMap(NameType.ASHKENAZI, RuleType.RULES, singletonLangSet);
        assertTrue(result.isEmpty());
    }
}