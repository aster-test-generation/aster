/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_BothStringInstances_utvO0() {
        CharSequence cs = "HelloWorld";
        CharSequence substring = "World";
        assertTrue(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharactersMatch_Kuzf1() {
        CharSequence cs = new StringBuilder("HelloWorld");
        CharSequence substring = new StringBuilder("World");
        assertTrue(CharSequenceUtils.regionMatches(cs, false, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_IgnoreCaseFalseCharactersDiffer_gSFc2() {
        CharSequence cs = new StringBuilder("HelloWorld");
        CharSequence substring = new StringBuilder("world");
        assertFalse(CharSequenceUtils.regionMatches(cs, false, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_CharactersMatchIgnoreCase_FkfQ5() {
        CharSequence cs = new StringBuilder("HelloWorld");
        CharSequence substring = new StringBuilder("world");
        assertTrue(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_EmptySubstring_szEI6() {
        CharSequence cs = new StringBuilder("HelloWorld");
        CharSequence substring = new StringBuilder("");
        assertTrue(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_UpperCaseNotEqual_AqcG3_fid1() {
        CharSequence cs = new StringBuilder("HelloWorld");
        CharSequence substring = new StringBuilder("WORLD");
        assertTrue(CharSequenceUtils.regionMatches(cs, true, 5, substring, 0, 5));
    }
}