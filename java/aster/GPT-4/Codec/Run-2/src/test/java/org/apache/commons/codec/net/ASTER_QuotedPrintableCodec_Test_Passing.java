/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_mnKz0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(StandardCharsets.UTF_8);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_HRSt0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encodedString = "=48=65=6C=6C=6F"; // "Hello" in quoted-printable encoding
        String expectedResult = "Hello";
        String result = codec.decode(encodedString);
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_mHYw1() throws UnsupportedEncodingException, DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "=48=65=6C=6C=6F"; // "Hello" in quoted-printable encoding
        String expected = "Hello";
        String result = codec.decode(input, "UTF-8");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DefaultConstructor_TCRS0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Charset expectedCharset = Charset.defaultCharset();
        Charset actualCharset = codec.getCharset();
        assertEquals(expectedCharset, actualCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithSimpleInput_cOCy0() {
        BitSet printable = new BitSet();
        printable.set('a');
        printable.set('b');
        printable.set('c');
        byte[] inputBytes = "abc".getBytes(StandardCharsets.UTF_8);
        byte[] expectedOutput = "abc".getBytes(StandardCharsets.UTF_8);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, inputBytes);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_GEZC0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.encode(null, StandardCharsets.UTF_8);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonNullInput_ReturnsEncodedString_XNMH1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_hjuP1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello=3Dworld".getBytes();
        byte[] expected = "hello=world".getBytes();
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_QMLV2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello=3Dworld";
        String expected = "hello=world";
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_ODih1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello".getBytes();
        byte[] expected = codec.encode(input);
        assertArrayEquals(expected, (byte[]) codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_Ctjl2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "hello";
        String expected = (String) codec.encode(input);
        assertEquals(expected, codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSimpleInput_kKEY0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = "hello world".getBytes(StandardCharsets.UTF_8);
        byte[] encoded = codec.encode(input);
        assertArrayEquals(new byte[]{104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100}, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_CNAJ0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World!";
        String expected = "Hello World!";
        String result = codec.encode(sourceStr);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSimpleInput_nLZd0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello=3Dworld".getBytes(StandardCharsets.UTF_8);
        byte[] expected = "hello=world".getBytes(StandardCharsets.UTF_8);
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUtf8Charset_PNDJ0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String result = codec.encode(input, "UTF-8");
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_fvRQ1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = null;
        String result = codec.encode(input, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNullBytes_fUgs0() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, null, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEmptyBytes_BRfk1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, new byte[0], true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNullPrintableStrict_oNDc2() {
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_BVEH3_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAllPrintableNonStrict_zVXC4() {
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        printable.set(67);
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableNonStrict_RxtR5_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSingleNonPrintableNonStrict_OMMy6() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66}; // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSinglePrintableNonStrict_CftX7() {
        BitSet printable = new BitSet();
        printable.set(66); // B
        byte[] bytes = {66}; // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(new byte[]{66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableMultipleNonPrintableNonStrict_YTII8() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 67, 68}; // BCD
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(9, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWhitespaceStrict_wkgC9_1() {
        BitSet printable = new BitSet();
        printable.set(32); // space
        byte[] bytes = {32, 32, 32}; // three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWhitespaceStrict_wkgC5_2() {
        BitSet printable = new BitSet();
        printable.set(32); // space
        byte[] bytes = {32, 32, 32}; // three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEndsWithWhitespaceStrict_VUpZ10_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 65, 32}; // AA(space)
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEndsWithWhitespaceStrict_VUpZ10_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 65, 32}; // AA(space)
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableStartsWithNonPrintableStrict_msYo11_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 65}; // BAA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableStartsWithNonPrintableStrict_msYo11_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 65}; // BAA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableMixedContentStrict_gVPJ12_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 66, 65}; // BABA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableMixedContentStrict_gVPJ12_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 66, 65}; // BABA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(8, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceStrict_xGPt13_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceStrict_xGPt13_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertTrue(result.length > 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceNonStrict_Hyck14() {
        BitSet printable = new BitSet();
        printable.set(66); // B
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSingleCharacterStrict_ZsYB15() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65}; // A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableSingleCharacterNonStrict_EQPl16() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65}; // A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(new byte[]{65}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonAsciiCharacterNonStrict_rZYe18() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 200}; // non-ASCII
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedStrict_CivO19_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedStrict_CivO19_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedNonStrict_teVq20_1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedNonStrict_teVq20_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SmallInputStrict_rfPL2() {
        byte[] input = new byte[]{65, 66}; // "AB"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SimpleInputNonStrict_Pidl3() {
        byte[] input = new byte[]{65, 66, 67}; // "ABC"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableNonStrict_QivN4() {
        byte[] input = new byte[]{10, 13}; // New line and carriage return
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{(byte) '=', (byte) '0', (byte) 'A', (byte) '=', (byte) '0', (byte) 'D'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEndStrict_QpsU5() {
        byte[] input = new byte[]{32, 32, 32}; // Three spaces
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(new byte[]{(byte) ' ', (byte) ' ', (byte) '=', (byte) '2', (byte) '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LineBreakInMiddleStrict_BtKV6() {
        byte[] input = new byte[]{65, 13, 10, 66}; // "A\r\nB"
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(new byte[]{65, (byte) '=', (byte) '0', (byte) 'D', (byte) '=', (byte) '0', (byte) 'A', 66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongLineStrict_GXgo7() {
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 'A');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableAtEndStrict_ZuWK10() {
        byte[] input = new byte[]{65, 66, 10}; // "AB\n"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertArrayEquals(new byte[]{65, 66, (byte) '=', (byte) '0', (byte) 'A'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContentStrict_ezmt11() {
        byte[] input = "Hello, World!\nThis is a test.".getBytes(StandardCharsets.US_ASCII);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_FullRangeNonStrict_Utth12() {
        byte[] input = new byte[256];
        for (int i = 0; i < 256; i++) {
            input[i] = (byte) i;
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_FullRangeStrict_RpiG13() {
        byte[] input = new byte[256];
        for (int i = 0; i < 256; i++) {
            input[i] = (byte) i;
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_OnlyNonPrintableNonStrict_hXUL14() {
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_OnlyNonPrintableStrict_EALL15() {
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleCharNonStrict_MJEX17() {
        byte[] input = new byte[]{65}; // "A"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{65}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceNonStrict_GTcc18() {
        byte[] input = new byte[]{32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{32, 32, 32}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceStrict_oqHl19() {
        byte[] input = new byte[]{32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertArrayEquals(new byte[]{32, 32, (byte) '=', (byte) '2', (byte) '0'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleLinesStrict_gxkz20() {
        byte[] input = "Line 1\nLine 2\nLine 3".getBytes(StandardCharsets.US_ASCII);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_ReturnsEmpty_POCp1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], false);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintable_StrictFalse_YPfq3() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = {65};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesAllPrintable_StrictFalse_VjHC4() {
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        byte[] input = {65, 66}; // ASCII for AB
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_StrictTrue_rsJI6_1() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = {32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_StrictTrue_rsJI6_2() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = {32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceWithoutNewline_StrictTrue_iEjd7_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceWithoutNewline_StrictTrue_iEjd7_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharacters_StrictFalse_pxYf8() {
        BitSet printable = new BitSet();
        printable.set(33); // ASCII for !
        byte[] input = {33, 33, 33}; // Three exclamation marks
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableNearEnd_StrictTrue_XzwW9_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = {65, 65, 66, 65}; // AAAB
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableNearEnd_StrictTrue_XzwW9_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = {65, 65, 66, 65}; // AAAB
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ExactSafeLengthLimit_StrictTrue_TqGx10_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ExactSafeLengthLimit_StrictTrue_TqGx10_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_JustBelowSafeLengthLimit_StrictTrue_kuwl11_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtExactPosition_StrictTrue_dlup12_1() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtExactPosition_StrictTrue_dlup12_2() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NegativeByteValues_StrictFalse_YwSq13_1() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NegativeByteValues_StrictFalse_YwSq13_2() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteAtBoundary_StrictTrue_nYxP15_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        input[75] = 66; // ASCII for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteAtBoundary_StrictTrue_nYxP15_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        input[75] = 66; // ASCII for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleNonPrintableAtEnd_StrictTrue_kGIJ16_1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 65);
        input[76] = 66; // ASCII for B
        input[77] = 67; // ASCII for C
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleNonPrintableAtEnd_StrictTrue_kGIJ16_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 65);
        input[76] = 66; // ASCII for B
        input[77] = 67; // ASCII for C
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintable_StrictFalse_hnEZ17_1() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201, (byte) 202};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintable_StrictFalse_hnEZ17_2() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201, (byte) 202};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousPrintable_StrictFalse_eaAS18() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        printable.set(66); // ASCII for B
        printable.set(67); // ASCII for C
        byte[] input = {65, 66, 67};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousPrintableWithSpace_StrictTrue_wJhq19_1() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousPrintableWithSpace_StrictTrue_wJhq19_2() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintableWithNewline_StrictTrue_NYqv20_1() {
        BitSet printable = new BitSet();
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 200);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintableWithNewline_StrictTrue_NYqv20_2() {
        BitSet printable = new BitSet();
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 200);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_dXrX2() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 128};
        byte[] expected = new byte[]{'=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintable_qXPF3() {
        BitSet printable = new BitSet();
        printable.set(97);
        byte[] bytes = new byte[]{(byte) 97};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesNonPrintable_woQc4() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 128, (byte) 129};
        byte[] expected = new byte[]{'=', '8', '0', '=', '8', '1'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedBytes_VEPZ5() {
        BitSet printable = new BitSet();
        printable.set(97);
        byte[] bytes = new byte[]{(byte) 97, (byte) 128};
        byte[] expected = new byte[]{97, '=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AllPrintable_hQwC6() {
        BitSet printable = new BitSet();
        printable.set(0, 256);
        byte[] bytes = new byte[]{(byte) 97, (byte) 98, (byte) 99};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharactersNonPrintable_hvtu9() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) '\n', (byte) '\r', (byte) '\t'};
        byte[] expected = new byte[]{'=', '0', 'A', '=', '0', 'D', '=', '0', '9'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharactersPrintable_yXyy10() {
        BitSet printable = new BitSet();
        printable.set('\n');
        printable.set('\r');
        printable.set('\t');
        byte[] bytes = new byte[]{(byte) '\n', (byte) '\r', (byte) '\t'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_UnicodeCharacters_LvtY11() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 0xC3, (byte) 0xA9}; //  in UTF-8
        byte[] expected = new byte[]{'=', 'C', '3', '=', 'A', '9'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ExtendedAscii_pdfy12() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 0x80, (byte) 0xFF};
        byte[] expected = new byte[]{'=', '8', '0', '=', 'F', 'F'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeShortInput_ubkD13() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 'b'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeLongInput_JLal14() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_FullRangeNonPrintable_bCdU18() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[256];
        for (int i = 0; i < 256; i++) {
            bytes[i] = (byte) i;
        }
        ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
        for (int i = 0; i < 256; i++) {
            if (i < 128) {
                expectedOutput.write('=');
                expectedOutput.write(Utils.hexDigit(i >> 4));
                expectedOutput.write(Utils.hexDigit(i));
            } else {
                expectedOutput.write('=');
                expectedOutput.write(Utils.hexDigit(i >> 4));
                expectedOutput.write(Utils.hexDigit(i));
            }
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expectedOutput.toByteArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_OnlyNonPrintable_TeVA19() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 128, (byte) 129, (byte) 130};
        byte[] expected = new byte[]{'=', '8', '0', '=', '8', '1', '=', '8', '2'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_nwxT2_1() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {66}; // 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableEndsWithWhitespaceStrict_VUpZ10() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 65, 32}; // AA(space)
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableStartsWithNonPrintableStrict_msYo11() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 65}; // BAA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableLongSequenceStrict_xGPt13() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 66); // B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_StrictTrue_rsJI6() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = {32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceWithoutNewline_StrictTrue_iEjd7() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableNearEnd_StrictTrue_XzwW9() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = {65, 65, 66, 65}; // AAAB
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ExactSafeLengthLimit_StrictTrue_TqGx10() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtExactPosition_StrictTrue_dlup12() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NegativeByteValues_StrictFalse_YwSq13() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteAtBoundary_StrictTrue_nYxP15() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[76];
        Arrays.fill(input, (byte) 65);
        input[75] = 66; // ASCII for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleNonPrintableAtEnd_StrictTrue_kGIJ16() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 65);
        input[76] = 66; // ASCII for B
        input[77] = 67; // ASCII for C
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintable_StrictFalse_hnEZ17() {
        BitSet printable = new BitSet();
        byte[] input = {(byte) 200, (byte) 201, (byte) 202};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousPrintableWithSpace_StrictTrue_wJhq19() {
        BitSet printable = new BitSet();
        printable.set(32); // ASCII for space
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintableWithNewline_StrictTrue_NYqv20() {
        BitSet printable = new BitSet();
        byte[] input = new byte[100];
        Arrays.fill(input, (byte) 200);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertTrue(result.length > input.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_nwxT2() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {66}; // 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 1); // Encoded form should be longer
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleBytePrintable_HqCz3() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65}; // 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesAllPrintable_Thor4() {
        BitSet printable = new BitSet();
        printable.set(65);
        printable.set(66);
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(2, result.length);
        assertArrayEquals(new byte[]{65, 66}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesMixed_ouIU5() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65, 66}; // 'A', 'B'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeLongInput_uJKS8() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 65); // 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 100); // Should be longer due to line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableAtEndStrict_KRMq9() {
        BitSet printable = new BitSet();
        byte[] bytes = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91}; // Up to '['
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result[result.length - 1] != 91); // Last character should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_OnlyNonPrintable_ddUw10() {
        BitSet printable = new BitSet();
        byte[] bytes = {91, 92, 93}; // '[', '\', ']'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 3); // Each character should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_AllPrintable_xJwR11() {
        BitSet printable = new BitSet();
        printable.set(32, 127); // Setting printable for all ASCII
        byte[] bytes = new byte[95];
        for (int i = 0; i < 95; i++) {
            bytes[i] = (byte) (32 + i);
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(95, result.length);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LineBreaksInStrict_IyqT12() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 'A');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 76); // Should contain line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableWithLineBreaks_eAkz13() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 128); // Non-ASCII value
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 76); // Should be encoded and contain line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharacters_ioha14() {
        BitSet printable = new BitSet();
        byte[] bytes = {10, 13, 32}; // LF, CR, Space
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 3); // Should encode LF and CR
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_HighByteValues_hJxd15() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 255, (byte) 254};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 2); // Should encode high byte values
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MixedContent_mwJj16() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = {65, 66, 10, 13}; // 'A', 'B', LF, CR
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertTrue(result.length > 4); // 'B', LF, CR should be encoded
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousNonPrintable_mPFp17() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[300];
        Arrays.fill(bytes, (byte) 128); // Non-ASCII value
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 300); // Should be encoded and possibly contain line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_ContinuousPrintable_QQbK18() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] bytes = new byte[300];
        Arrays.fill(bytes, (byte) 65); // 'A'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 300); // Should contain line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_VeryLongInput_JWyZ19() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10000];
        Arrays.fill(bytes, (byte) 'A');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 10000); // Should contain multiple line breaks
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteEdgeCase_AtwA20() {
        BitSet printable = new BitSet();
        printable.set(255); // Highest possible byte value set as printable
        byte[] bytes = {(byte) 255};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals((byte) 255, result[0]);
    }
}