/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DefaultConstructor_iZkW0_fid1() {
        Hex hex = new Hex();
        String expected = "Hex@" + Integer.toHexString(hex.hashCode()) + "[charsetName=null]";
        assertEquals(expected, hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_ZnuW1_2_fid1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x01, 0x02, 0x03, 0x04});
        Object result = hex.encode(buffer);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_YMns2_2() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x05, 0x06, 0x07, 0x08};
        Object result = hex.encode(input);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringWithLowerCaseTrue_fXNm0() {
        byte[] data = "Hello World".getBytes();
        String result = Hex.encodeHexString(data, true);
        assertEquals("68656c6c6f20776f726c64", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_pIyB1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x48, 0x65, 0x6c, 0x6c, 0x6f}; // Hexadecimal bytes for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), Charset.defaultCharset());
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_gYsW2() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x48, 0x65, 0x6c, 0x6c, 0x6f}); // Hexadecimal bytes for "Hello"
        String expected = "Hello";
        String result = new String((byte[]) hex.decode(input), Charset.defaultCharset());
        assertEquals(expected, result);
    }

    @Test
    public void testDecodeHex_OutputArrayTooSmall_UlcH2_cqtp0() {
        char[] data = {'a', '1', 'b', '2'};
        byte[] out = new byte[1];
        try {
            new Hex().decodeHex(data, out, 0);
            fail("Expected an DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Output array is too small to hold the decoded data", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_ZnuW1() {
        Hex hex = new Hex();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{0x01, 0x02, 0x03, 0x04});
        Object result = hex.encode(buffer);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_YMns2() {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x05, 0x06, 0x07, 0x08};
        Object result = hex.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
    }
}