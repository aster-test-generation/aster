/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_vpvq0() {
        QCodec codec = new QCodec();
        assertEquals("Q", codec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_SOhY0() {
        QCodec codec = new QCodec();
        assertFalse(codec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_BcPy0() throws EncoderException {
        QCodec codec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello World";
        Charset sourceCharset = Charset.forName("UTF-8");
        String result = codec.encode(sourceStr, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_BRAq0() throws EncoderException {
        QCodec codec = new QCodec("UTF-8");
        String result = codec.encode("Hello World", "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedObject_SwlI2() {
        QCodec codec = new QCodec();
        Object input = new Integer(123);
        try {
            codec.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObjectType_tJwy2() {
        QCodec qCodec = new QCodec();
        Object input = new Integer(123);
        try {
            qCodec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullInput_Pmst0() {
        QCodec codec = new QCodec();
        byte[] result = codec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyArray_mSRO1() {
        QCodec codec = new QCodec();
        byte[] input = new byte[0];
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyArrayNoBlanks_mhnv2() {
        QCodec codec = new QCodec();
        byte[] input = {'T', 'e', 's', 't'};
        byte[] expected = {'T', 'e', 's', 't'}; // Assuming encodeQuotedPrintable does not modify these characters
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullInput_mswd0() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] result = codec.doDecoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNoUnderscores_Uzel1() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello World".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(input);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithUnderscores_RmvU2() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello_World".getBytes();
        byte[] modifiedInput = "Hello World".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(modifiedInput);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithOnlyUnderscores_ldoh3() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "_____".getBytes();
        byte[] modifiedInput = "     ".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(modifiedInput);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithMixedContent_xxKD4() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello_World_2023".getBytes();
        byte[] modifiedInput = "Hello World 2023".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(modifiedInput);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithAllSpaces_uxXs5() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "     ".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(input);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithSpecialCharacters_nkKQ6() throws DecoderException {
        QCodec codec = new QCodec();
        byte[] input = "Hello_World!_#_$_%_&_".getBytes();
        byte[] modifiedInput = "Hello World! # $ % & ".getBytes();
        byte[] expected = QuotedPrintableCodec.decodeQuotedPrintable(modifiedInput);
        byte[] result = codec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEncodeBlanks_jezu0_BIEV0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(true);
        assertTrue(codec.isEncodeBlanks());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_cUIb0_gpuR0() {
        QCodec codec = new QCodec();
        Object result = null;
        try {
            result = codec.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanksAndEncodeBlanksTrue_Zddm3_gqKW0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(true);
        byte[] input = {'T', 'e', 's', 't', ' '};
        byte[] expected = {'T', 'e', 's', 't', '_'}; // Assuming SPACE is replaced by UNDERSCORE
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_ReFe0_whtQ0() {
        QCodec qCodec = new QCodec();
        try {
            byte[] result = qCodec.doDecoding(null);
            assertNull(result);
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithBlanksAndEncodeBlanksFalse_qCfi4_cKPi0() {
        QCodec codec = new QCodec();
        codec.setEncodeBlanks(false);
        byte[] input = {'T', 'e', 's', 't', ' '};
        byte[] expected = {'T', 'e', 's', 't', ' '}; // Assuming SPACE is not replaced
        byte[] result = codec.doEncoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_hybN1_Cvdy0() {
        QCodec codec = new QCodec("UTF-8");
        String input = "Hello World";
        try {
            Object result = codec.encode(input);
            assertNotNull(result);
            assertTrue(result instanceof String);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_LukJ0_fid1() throws EncoderException {
        QCodec codec = new QCodec();
        String sourceStr = "Hello World!";
        String expected = "=?UTF-8?Q?Hello World!?=";
        String result = codec.encode(sourceStr);
        assertEquals(expected, result);
    }
}