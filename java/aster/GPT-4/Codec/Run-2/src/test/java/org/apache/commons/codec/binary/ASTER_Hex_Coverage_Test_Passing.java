/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_RyJr0_1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x30, 0x31, 0x32, 0x33}; // example byte array
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_RyJr0_2() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x30, 0x31, 0x32, 0x33}; // example byte array
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_aDUL1_1() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x30, 0x31, 0x32, 0x33}); // example ByteBuffer
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_aDUL1_2() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x30, 0x31, 0x32, 0x33}); // example ByteBuffer
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteArray_eLZz3_1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = "0123".getBytes(Charset.forName("UTF-8"));
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteArray_eLZz3_2() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = "0123".getBytes(Charset.forName("UTF-8"));
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteBuffer_EEDS4_1() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("0123".getBytes(Charset.forName("UTF-8")));
        Object result = hex.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteBuffer_EEDS4_2() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("0123".getBytes(Charset.forName("UTF-8")));
        Object result = hex.decode(input);
        assertTrue(result instanceof byte[]);
    }

    @Test
    public void testDecodeWithInvalidType_vcSY2_vAFH0() {
        Hex hex = new Hex();
        byte[] input = new byte[]{(byte) 0xFF, (byte) 0xFF}; // Invalid hex input
        assertThrows(DecoderException.class, () -> hex.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBufferFullArray_Tqmh0_bVxg0_fid1() throws EncoderException {
        Hex hexEncoder = new Hex(StandardCharsets.UTF_8);
        byte[] expected = {0x01, 0x02, 0x03, 0x04};
        ByteBuffer buffer = ByteBuffer.wrap(expected);
        Object result = hexEncoder.encode(buffer);
        byte[] expectedHex = "01020304".getBytes(StandardCharsets.UTF_8);
        assertArrayEquals(expectedHex, (byte[]) result, "Expected hexadecimal encoding of the full array");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_RyJr0() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = new byte[]{0x30, 0x31, 0x32, 0x33}; // example byte array
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_aDUL1() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x30, 0x31, 0x32, 0x33}); // example ByteBuffer
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteArray_eLZz3() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = "0123".getBytes(Charset.forName("UTF-8"));
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidByteBuffer_EEDS4() throws DecoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap("0123".getBytes(Charset.forName("UTF-8")));
        Object result = hex.decode(input);
        assertNotNull(result);
        assertTrue(result instanceof byte[]);
    }
}