/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiStringWithSimpleInput_QUEe0() {
        byte[] input = new byte[]{72, 101, 108, 108, 111}; // ASCII for "Hello"
        String expected = "Hello";
        String result = BinaryCodec.toAsciiString(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithNullInput_Xazy0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray(null);
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_NullArray_JbsK0() {
        assertTrue(BinaryCodec.isEmpty(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_EmptyArray_oQqr1() {
        byte[] emptyArray = new byte[0];
        assertTrue(BinaryCodec.isEmpty(emptyArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmpty_NonEmptyArray_TXYP2() {
        byte[] nonEmptyArray = new byte[]{1, 2, 3};
        assertFalse(BinaryCodec.isEmpty(nonEmptyArray));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidByteArray_nbor0_1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidByteArray_nbor0_2() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(input);
        assertFalse(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_NRCw1() {
        BinaryCodec codec = new BinaryCodec();
        try {
            codec.encode("Invalid input");
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyInput_wzKg0() {
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiAllZeros_yPfB1() {
        byte[] input = "00000000".getBytes();
        byte[] expected = {0};
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiAllOnes_Htox2() {
        byte[] input = "11111111".getBytes();
        byte[] expected = {-1}; // 0xFF in decimal is 255 which is -1 in a signed byte
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMixedBits_djpl3() {
        byte[] input = "11001010".getBytes();
        byte[] expected = {-54}; // 0xCA in decimal is 202 which is -54 in a signed byte
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_zRvl0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = (byte[]) codec.decode(null);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsEmptyInput_fWeb0() {
        byte[] input = new byte[0];
        char[] expected = new char[0];
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsSingleByteAllZeros_mVeF1() {
        byte[] input = {0x00};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsSingleByteAllOnes_VOrM2() {
        byte[] input = {(byte) 0xFF};
        char[] expected = {'1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_EmptyArray_uRWi1() {
        assertArrayEquals(new byte[0], BinaryCodec.fromAscii(new char[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllZeros_AKEL2() {
        char[] input = {'0', '0', '0', '0', '0', '0', '0', '0'};
        byte[] expected = {0};
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_AllOnes_sbmE3() {
        char[] input = {'1', '1', '1', '1', '1', '1', '1', '1'};
        byte[] expected = {(byte) 255};
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_MixedValues_WlOT4() {
        char[] input = {'1', '0', '1', '0', '1', '0', '1', '0'};
        byte[] expected = {(byte) 170};
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithEmptyArray_lcbI0() {
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithSingleZero_KGqg1() {
        byte[] input = {0};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithSingleOne_OlxW2() {
        byte[] input = {1};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithAllOnes_ogzT4() {
        byte[] input = {(byte) 255};
        byte[] expected = {'1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_NullInput_CBqd0_ftdC0() {
        assertArrayEquals(new byte[0], BinaryCodec.toAsciiBytes(null));
    }

    @Test
    public void testDecodeWithInvalidType_kPBb4_NPfo0() {
        BinaryCodec codec = new BinaryCodec();
        try {
            codec.decode(new Object());
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }
}