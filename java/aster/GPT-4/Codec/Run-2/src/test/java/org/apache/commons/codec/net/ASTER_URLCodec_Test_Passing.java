/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_DefaultConstructor_YWqh0() {
        URLCodec codec = new URLCodec();
        String expected = null; // Assuming default constructor sets charset to null
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_qHSK0() {
        URLCodec codec = new URLCodec("UTF-8");
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidInput_KGDj1() {
        URLCodec codec = new URLCodec();
        String input = "Hello%20World";
        String expected = "Hello World";
        try {
            String result = codec.decode(input);
            assertEquals(expected, result);
        } catch (DecoderException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNullInput_pLNH0() throws Exception {
        URLCodec codec = new URLCodec();
        String result = codec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValidInput_xNKh1() throws Exception {
        URLCodec codec = new URLCodec();
        String encodedString = "Hello%20World";
        String expected = "Hello World";
        String result = codec.decode(encodedString, "UTF-8");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_NpDb1() {
        URLCodec codec = new URLCodec("UTF-8");
        String input = "hello world!";
        String expected = "hello%20world%21";
        try {
            String result = codec.encode(input);
        } catch (EncoderException e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNullInput_ofRM0() throws DecoderException {
        byte[] input = null;
        byte[] result = URLCodec.decodeUrl(input);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_Wskx1() throws DecoderException {
        byte[] input = "hello+world".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals("hello world".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithHexEncoding_ZHds2() throws DecoderException {
        byte[] input = "hello%20world".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals("hello world".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithMultipleEncodings_bsFq3() throws DecoderException {
        byte[] input = "hello%20world%21".getBytes();
        byte[] result = URLCodec.decodeUrl(input);
        assertArrayEquals("hello world!".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidHex_PpLB4() {
        byte[] input = "hello%2Gworld".getBytes();
        assertThrows(DecoderException.class, () -> {
            URLCodec.decodeUrl(input);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_cdvd1() throws DecoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "hello%20world".getBytes();
        byte[] expected = "hello world".getBytes();
        assertArrayEquals(expected, (byte[]) codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_mWgr2() throws DecoderException {
        URLCodec codec = new URLCodec();
        String input = "hello%20world";
        String expected = "hello world";
        assertEquals(expected, codec.decode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUTF8_OYwM0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String original = "Hello World!";
        String encoded = codec.encode(original, "UTF-8");
        assertEquals("Hello+World%21", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_tOcv1() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec("UTF-8");
        String original = null;
        String encoded = codec.encode(original, "UTF-8");
        assertNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_wNaR1() throws EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = "test".getBytes();
        assertNotNull(codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_oKxR2() throws EncoderException {
        URLCodec codec = new URLCodec();
        String input = "test";
        assertNotNull(codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NullBytes_ReturnsNull_EZsf0() {
        byte[] result = URLCodec.encodeUrl(null, null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_EmptyBytes_ReturnsEmpty_qFRa1() {
        BitSet urlsafe = new BitSet();
        byte[] result = URLCodec.encodeUrl(urlsafe, new byte[]{});
        assertArrayEquals(new byte[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_AllSafeCharacters_GMgE2() {
        BitSet urlsafe = new BitSet(256);
        urlsafe.set('a');
        urlsafe.set('b');
        urlsafe.set('c');
        byte[] input = new byte[]{'a', 'b', 'c'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(new byte[]{'a', 'b', 'c'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_SpaceCharacter_EncodesToPlus_nehe3() {
        BitSet urlsafe = new BitSet(256);
        urlsafe.set(' ');
        byte[] input = new byte[]{' '};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(new byte[]{'+'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UnsafeCharacter_EncodesWithEscape_BHyy4() {
        BitSet urlsafe = new BitSet(256);
        byte[] input = new byte[]{'#'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(new byte[]{'%', '2', '3'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_MixedCharacters_zrNa5() {
        BitSet urlsafe = new BitSet(256);
        urlsafe.set('a');
        urlsafe.set(' ');
        byte[] input = new byte[]{'a', ' ', '#'};
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(new byte[]{'a', '+', '%', '2', '3'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NegativeByte_EncodesCorrectly_gqNx6() {
        BitSet urlsafe = new BitSet(256);
        byte[] input = new byte[]{(byte) 0x8F}; // Negative in two's complement
        byte[] result = URLCodec.encodeUrl(urlsafe, input);
        assertArrayEquals(new byte[]{'%', '8', 'F'}, result);
    }

    @Test
    public void testEncodeWithUnsupportedType_jDGZ3_rOkG0() {
        URLCodec codec = new URLCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_zWHD0_iiXC0() throws DecoderException {
        URLCodec codec = new URLCodec();
        assertNull(codec.decode((byte[]) null));
    }

    @Test
    public void testDecodeWithUnsupportedType_fblT3_FPwL0() {
        URLCodec codec = new URLCodec();
        try {
            codec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_VKdP0_INJv0() {
        URLCodec codec = new URLCodec();
        byte[] result = URLCodec.encodeUrl(null, null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_ZHTT0_pXue0() throws EncoderException {
        URLCodec codec = new URLCodec();
        assertNull(codec.encodeUrl(null, null));
    }
}