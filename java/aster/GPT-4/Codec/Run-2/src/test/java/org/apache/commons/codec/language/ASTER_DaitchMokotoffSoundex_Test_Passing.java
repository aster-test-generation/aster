/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_BvMA0() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_EcRU0() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String input = "Example";
        Object result = soundex.encode(input);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_eqTA1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        Object input = new Object();
        try {
            soundex.encode(input);
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSimpleInput_dese0_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Miller");
        assertEquals("689000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithComplexInput_xyty1_fid1() {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Schmidt");
        assertEquals("463000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonBranching_deMf1_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String source = "Mller";
        String expected = "689000"; // Assuming "689000" is the expected soundex code for "Mller" with non-branching logic
        String result = dms.encode(source);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithSimpleInput_zOiM0_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.soundex("Muller");
        assertEquals("689000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithComplexInput_WAII1_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        String result = dms.soundex("Schwarz");
        assertEquals("474000|479400", result);
    }
}