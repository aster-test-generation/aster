/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_olZG1_2() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArrayInput = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArrayInput);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_olZG1_3() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArrayInput = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArrayInput);
        assertArrayEquals(new char[]{'0', '0', '0', '0', '0', '0', '0', '1',
        '0', '0', '0', '0', '0', '0', '1', '0',
        '0', '0', '0', '0', '0', '1', '1'}, (char[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonEmptyByteArray_xpyW2_xGEb0() throws org.apache.commons.codec.DecoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = {'0', '1'};
        byte[] expected = {'0', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonEmptyByteArray_xpyW2_xGEb0_fid1() throws org.apache.commons.codec.DecoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = {'0', '1'};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_olZG1() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArrayInput = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArrayInput);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
        assertArrayEquals(new char[]{'0', '0', '0', '0', '0', '0', '0', '1',
        '0', '0', '0', '0', '0', '0', '1', '0',
        '0', '0', '0', '0', '0', '1', '1'}, (char[]) result);
    }
}