/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_ConditionOneCovered_ALpR0() {
        BigInteger bigInt = new BigInteger("127"); // 127 in binary is 01111111, bit length is 7
        byte[] expected = {127}; // Expected output should be the same as input byte array
        byte[] result = Base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes_ConditionTwoCovered_nvqm1() {
        BigInteger bigInt = new BigInteger("256"); // 256 in binary is 100000000, bit length is 9
        byte[] expected = {1, 0}; // Expected output should be {1, 0}, removing the leading zero byte
        byte[] result = Base64.toIntegerBytes(bigInt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLineLengthBoundary_XBWy6_XQrJ0() {
        Base64 base64 = new Base64(4, new byte[]{'\n'}, false);
        Base64.Context context = new Base64.Context();
        byte[] input = new byte[]{'a', 'b', 'c', 'd'};
        base64.encode(input, 0, 4, context);
        assertTrue(context.currentLinePos == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64Octet_bKIY0_xIfO0_1() {
        final byte PAD_DEFAULT = '=';
        final byte[] DECODE_TABLE = new byte[128];
        DECODE_TABLE['A'] = 0; // 'A' is a valid Base64 character.
        Assertions.assertTrue(Base64.isBase64(PAD_DEFAULT), "Padding character should be considered as Base64");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64Octet_bKIY0_xIfO0_2() {
        final byte PAD_DEFAULT = '=';
        final byte[] DECODE_TABLE = new byte[128];
        DECODE_TABLE['A'] = 0; // 'A' is a valid Base64 character.
        Assertions.assertTrue(Base64.isBase64((byte) 'A'), "Character 'A' should be considered as Base64");
    }
}