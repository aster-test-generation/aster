/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8WithNonNullBytes_crbx0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.UTF_8);
        String result = StringUtils.newStringUtf8(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16WithNonNullString_DgBD0() {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_16);
        byte[] resultBytes = StringUtils.getBytesUtf16(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_withNonNullString_adHU0() {
        String testString = "Hello, World!";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_16LE);
        byte[] resultBytes = StringUtils.getBytesUtf16Le(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_withNonNullString_qchU0() {
        String testString = "Hello World";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.ISO_8859_1);
        byte[] resultBytes = StringUtils.getBytesIso8859_1(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16WithNonNullBytes_wQTr0() {
        byte[] bytes = new byte[]{0, 65, 0, 66}; // UTF-16 encoding for "AB"
        String result = StringUtils.newStringUtf16(bytes);
        assertEquals("AB", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8WithNonNullString_dYck0() {
        String testString = "Hello, World!";
        ByteBuffer expected = ByteBuffer.wrap(testString.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(testString);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_withValidBytes_ceqe0() {
        byte[] bytes = new byte[]{0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00}; // "Hello" in UTF-16LE
        String result = StringUtils.newStringUtf16Le(bytes);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_NullInput_mesa0() {
        assertNull(StringUtils.getBytesUsAscii(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_withNonNullString_sQph0() {
        String testString = "Hello";
        byte[] expected = testString.getBytes(StandardCharsets.UTF_16BE);
        byte[] result = StringUtils.getBytesUtf16Be(testString);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_withValidBytes_qWXt0() {
        byte[] bytes = "Hello".getBytes(StandardCharsets.ISO_8859_1);
        String result = StringUtils.newStringIso8859_1(bytes);
        assertEquals("Hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16BeWithNonNullBytes_NkVy0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.UTF_16BE);
        String result = StringUtils.newStringUtf16Be(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8WithNonNullString_azUM0() {
        String testString = "Hello, World!";
        byte[] expectedBytes = testString.getBytes(StandardCharsets.UTF_8);
        byte[] resultBytes = StringUtils.getBytesUtf8(testString);
        assertArrayEquals(expectedBytes, resultBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_withValidBytes_KDaD0() {
        byte[] bytes = "hello".getBytes(StandardCharsets.US_ASCII);
        String result = StringUtils.newStringUsAscii(bytes);
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithValidCharset_BlAH0() {
        byte[] bytes = "Hello World".getBytes();
        String charsetName = "UTF-8";
        String result = StringUtils.newString(bytes, charsetName);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithInvalidCharset_apoF1() {
        byte[] bytes = "Hello World".getBytes();
        String charsetName = "Invalid-Charset";
        try {
            StringUtils.newString(bytes, charsetName);
            fail("Expected an IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            assertEquals("Invalid-Charset: java.io.UnsupportedEncodingException: Invalid-Charset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothNull_hlJi0() {
        assertTrue(StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FirstNullSecondNotNull_dJxz1() {
        assertFalse(StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FirstNotNullSecondNull_FMad2() {
        assertFalse(StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameStringObject_BIlh3() {
        String testStr = "test";
        assertTrue(StringUtils.equals(testStr, testStr));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_TwoIdenticalStrings_pLoC4() {
        assertTrue(StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_TwoDifferentStrings_Gmxq5() {
        assertFalse(StringUtils.equals("test", "best"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameLengthDifferentChars_YLXk6() {
        assertFalse(StringUtils.equals("test", "tost"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_ValidInput_PQNj0_qqGu0() {
        String input = "Hello World";
        String charsetName = "UTF-8";
        byte[] expected = input.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUnchecked(input, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentTypes_Rdxh7_fid1() {
        StringBuffer sb = new StringBuffer("test");
        assertTrue(StringUtils.equals("test", sb));
    }
}