/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_YcOI4_fid2() throws EncoderException {
        URLCodec codec = new URLCodec();
        assertEquals("Encoding empty string should return empty string", "", codec.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_gCHK0_WqnJ0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull("Encoding null should return null", codec.encode(null, "UTF-8"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NullInput_ReturnsNull_PnsH0_jzoR0() throws UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        String result = null;
        try {
            result = codec.encode(null, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            fail("UnsupportedEncodingException should not be thrown for null input.");
        }
        assertNull("Encoding a null should return null.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_cdCD0_nlzY0() throws DecoderException, UnsupportedEncodingException {
        URLCodec codec = new URLCodec();
        assertNull("Decoding null should return null", codec.decode(null, "UTF-8"));
    }
}