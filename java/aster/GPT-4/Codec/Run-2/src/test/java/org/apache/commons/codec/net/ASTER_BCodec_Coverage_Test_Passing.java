/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullBytes_FELm0() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] result = codec.doDecoding(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNonNullBytes_HPCa1() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        byte[] inputBytes = "Hello World".getBytes(StandardCharsets.UTF_8);
        byte[] expectedOutput = new Base64(0, BaseNCodec.getChunkSeparator(), false, CodecPolicy.LENIENT).decode(inputBytes);
        byte[] result = codec.doDecoding(inputBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullValue_DaAS0() throws DecoderException {
        BCodec codec = new BCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_LpmL0_wCNP0() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset());
        String result = codec.encode(null, Charset.defaultCharset().name());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_FwcY3_RLmP0_1() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset());
        String testString = "";
        String result = codec.encode(testString, Charset.defaultCharset().name());
        assertNotNull(result, "Encoding an empty string should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_ZGts1_PPwM0_1() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset());
        String testString = "testString";
        String result = codec.encode(testString, Charset.defaultCharset().name());
        assertNotNull(result, "Encoding a string should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_ZGts1_PPwM0_2() throws EncoderException {
        BCodec codec = new BCodec(Charset.defaultCharset());
        String testString = "testString";
        String result = codec.encode(testString, Charset.defaultCharset().name());
        assertTrue(result instanceof String, "Result should be a string");
    }
}