/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSubstring_GqUY0() {
        String input = "HelloWorld";
        int expectedHash = MurmurHash2.hash32(input.substring(0, 5));
        assertEquals(expectedHash, MurmurHash2.hash32(input, 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSubstring_Duwj0() {
        String input = "hello world";
        int from = 6;
        int length = 5;
        long result = MurmurHash2.hash64(input, from, length);
        long expected = MurmurHash2.hash64("world");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyString_LgEU0() {
        String input = "";
        long expected = -7207201254813729732L; // Assuming hash64 should return-7207201254813729732 for empty input based on hash function behavior
        long result = MurmurHash2.hash64(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyString_Egrl0() {
        String input = "";
        int expectedHash = MurmurHash2.hash32(input);
        assertEquals(expectedHash, MurmurHash2.hash32(input));
    }
}