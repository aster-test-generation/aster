/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_ObSk0() {
        byte[] data = new byte[0];
        int length = 0;
        long expectedHash = 0xe17a1465L; // Expected hash for empty data with seed 0xe17a1465
        long result = MurmurHash2.hash64(data, length);
        assertEquals(expectedHash, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_mtuB0() {
        byte[] data = new byte[0];
        int length = 0;
        int expectedHash = 0x9747b28c;
        int result = MurmurHash2.hash32(data, length);
        assertEquals(expectedHash, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_yitT0() {
        byte[] data = new byte[0];
        int seed = 123456;
        long result = MurmurHash2.hash64(data, data.length, seed);
        assertEquals(0x8f16c14300000000L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonEmptyData_wnZF1() {
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8};
        int seed = 123456;
        long result = MurmurHash2.hash64(data, data.length, seed);
        assertEquals(0xb1d4025bae1c6c41L, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_EmptyData_WHmS0() {
        byte[] data = new byte[0];
        int length = 0;
        int seed = 1234;
        long expected = 0xe17a1465;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SimpleData_VKbB1() {
        byte[] data = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
        int length = data.length;
        int seed = 5678;
        long expected = 0x5f7b9d7ca4a5f853L;
        long result = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyString_LgEU0_fid2() {
        String input = "";
        long expected = 0L; // Assuming hash64 should return 0 for empty input based on hash function behavior
        long result = MurmurHash2.hash64(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_yitT0_fid2() {
        byte[] data = new byte[0];
        int seed = 123456;
        int result = MurmurHash2.hash32(data, data.length, seed);
        assertEquals(0x7c3c6cd1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonEmptyData_wnZF1_fid2() {
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8};
        int seed = 123456;
        int result = MurmurHash2.hash32(data, data.length, seed);
        assertEquals(0x5f579ca8, result);
    }
}