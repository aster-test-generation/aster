/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Failing {
    private static final int STREAM_BUFFER_LENGTH = 1024; // Assuming this is defined somewhere in your class

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_mTDm0_WbhI0_fid2() throws IOException {
        byte[] key = "test-key".getBytes();
        String data = "Hello, World!";
        ByteBuffer buffer = ByteBuffer.wrap(data.getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key);
        String expectedOutput = "actual HMAC SHA-512 hex output here";
        String result = hmacUtils.hmacHex(buffer);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_blrZ0_BnGo0_fid2() throws IOException {
        byte[] key = "testKey".getBytes();
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        String expectedHexOutput = "a3b3cea719cf707b4b54a3d3b5f7501b1b0ab5cd8ca48f7eaed9d0a0695a2a6d";
        String result = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHexOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_TyLm0_QuXn0_fid2() throws IOException {
        byte[] key = "testKey".getBytes();
        ByteBuffer buffer = ByteBuffer.wrap("Hello, HMAC!".getBytes());
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key);
        String expectedHmacOutput = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b";
        String actualHmacOutput = hmacUtils.hmacHex(buffer);
        assertEquals(expectedHmacOutput, actualHmacOutput);
    }
}