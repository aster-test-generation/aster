/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Coverage_Test_Passing {
    private static final byte ESCAPE_CHAR = '=';
    private static final byte CR = '\r';
    private static final byte LF = '\n';

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_uthO0() throws DecoderException, UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, "UTF-8");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_tTNS0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode(null, Charset.defaultCharset());
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInputAndSpecificCharset_BQaL1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String result = codec.decode(null, Charset.forName("UTF-8"));
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayInput_mQIV1() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Sample".getBytes();
        assertArrayEquals(codec.decode(input), codec.decode((byte[]) input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringInput_vzcb2() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Sample";
        assertEquals(codec.decode(input), codec.decode((String) input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_MMhJ4() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[0];
        assertArrayEquals(codec.decode(input), codec.decode((byte[]) input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_Bamn5() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "";
        assertEquals(codec.decode(input), codec.decode((String) input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWithWhitespace_duxV0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = new byte[]{'H', 'e', 'l', 'l', 'o', ' ', '\t', 'W', 'o', 'r', 'l', 'd'};
        byte[] expectedOutput = new byte[]{
        'H', 'e', 'l', 'l', 'o', '=', '2', '0', '=', '0', '9', 'W', 'o', 'r', 'l', 'd'
        };
        BitSet printable = new BitSet(256);
        for (int i = 0; i < 256; i++) {
            if (i != 32 && i != 9) { // Exclude space (32) and tab (9)
                printable.set(i);
            }
        }
        byte[] output = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(expectedOutput, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_syyY2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "test";
        assertNotNull("Encoding a string should not return null", codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_URyl5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "";
        assertNotNull("Encoding an empty string should not return null", codec.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_NullInput_QJow0() throws org.apache.commons.codec.DecoderException {
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(null);
    }

    @Test
    public void testDecodeWithUnsupportedObject_zJIB3_VsKe0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            codec.decode(new Object());
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_QmmS0_Ugpj0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertNull(codec.decode((String) null));
    }

    @Test
    public void testDecodeWithUnsupportedType_nKwN6_ppQW0() throws DecoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String result = codec.decode("12345");
        assertEquals("12345", result);
    }

    @Test
    public void testDecodeQuotedPrintable_InvalidEscapeSequence_srpZ2_Urlc0() {
        byte[] input = {ESCAPE_CHAR}; // No following characters
        assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_ubEL1_IsCJ0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = {'t', 'e', 's', 't'};
        byte[] encoded = codec.encode(input);
        assertNotNull(encoded, "Encoding a byte array should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyByteArray_zoeH6_cDvR0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "hello".getBytes(Charset.forName("UTF-8"));
        byte[] encoded = codec.encode(input);
        assertNotNull(encoded, "Encoding a non-empty byte array should not return null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_CarriageReturnAfterEscape_ptKR1_MkRK0() throws DecoderException {
        byte[] input = {ESCAPE_CHAR, CR};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(new byte[]{}, result, "Carriage return after escape should be ignored");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_NormalCharacters_XREX3_WjxL0() throws DecoderException {
        byte[] input = {'H', 'e', 'l', 'l', 'o'};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("Hello".getBytes(), result, "Normal characters should be returned as is");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_IgnoreLF_cugi5_uanS0() throws DecoderException {
        byte[] input = {'H', 'e', LF, 'l', 'l', 'o'};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("Hello".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_IgnoreCR_COvm4_Ckve0() throws DecoderException {
        byte[] input = {'H', 'e', CR, 'l', 'l', 'o'};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals("Hello".getBytes(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_EscapeSequence_UKgb6_orpU0() throws DecoderException {
        byte[] input = {ESCAPE_CHAR, '4', '1'};
        byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(input);
        assertArrayEquals(new byte[]{'A'}, result, "Escape sequence should be decoded");
    }
}