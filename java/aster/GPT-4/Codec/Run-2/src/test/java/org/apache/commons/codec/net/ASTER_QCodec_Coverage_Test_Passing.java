/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_zxiD0() throws DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInputUsingCharsetConstructor_mloG3() throws DecoderException {
        QCodec codec = new QCodec("UTF-8");
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_nQHU0() throws EncoderException {
        QCodec codec = new QCodec();
        Object result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeValidInput_NNpl0() throws Exception {
        QCodec codec = new QCodec("UTF-8");
        String input = "=?UTF-8?Q?This_is_encoded_text?= ";
        String expectedOutput = "This is encoded text";
        QCodec spyCodec = org.mockito.Mockito.spy(codec);
        when(spyCodec.decodeText(input)).thenReturn(expectedOutput);
        String result = spyCodec.decode(input);
        assertEquals("Decoding should return the correct output", expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeThrowsEncoderException_fMru1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        try {
            codec.encode("Hello", "UnsupportedCharset");
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertNotNull(e.getMessage());
            assertTrue(e.getCause() instanceof UnsupportedCharsetException);
        }
    }

    @Test
    public void testEncodeWithUnsupportedObject_IhCt2_oPgb0() {
        QCodec codec = new QCodec();
        String unsupportedCharset = "unsupported_charset";
        assertThrows(EncoderException.class, () -> codec.encode("Test string", unsupportedCharset));
    }

    @Test
    public void testEncodeWithUnsupportedCharset_TyJx0_BNbc0() {
        QCodec codec = new QCodec();
        try {
            codec.encode("Hello", "UnsupportedCharset");
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertNotNull(e);
        }
    }
}