/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithValidInput_BsSA1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toAsciiBytes("Hello".getBytes());
        byte[] expected = new byte[]{'0', '1', '0', '0', '1', '0', '0', '0',
        '0', '1', '1', '0', '0', '0', '1', '0',
        '0', '1', '1', '0', '0', '1', '1', '0',
        '0', '1', '1', '0', '0', '1', '1', '0',
        '0', '1', '1', '0', '1', '1', '1', '1'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSimpleInput_PTdM0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F}; // ASCII for "Hello"
        byte[] expected = new byte[]{
        '0', '1', '0', '0', '1', '0', '0', '0',
        '0', '1', '1', '0', '0', '1', '0', '1',
        '0', '1', '1', '0', '0', '1', '1', '0',
        '0', '1', '1', '0', '0', '1', '1', '0',
        '0', '1', '1', '0', '0', '1', '1', '1'
        };
        byte[] result = codec.toAsciiBytes(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidAscii_naGf0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = "01001000 01100101 01101100 01101100 01101111".getBytes();
        byte[] expected = {111, 101, 108, 108, 111}; // ASCII values for "Hello"
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Ttut1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = "010101".getBytes();
        byte[] result = BinaryCodec.toAsciiBytes(input);
        assertArrayEquals(new byte[]{'0', '1', '0', '1', '0', '1'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBytes_okid3() {
        byte[] input = {0x01, (byte) 0x80};
        char[] expected = {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsComplexInput_Rnmw4() {
        byte[] input = {0x0F, (byte) 0xA0};
        char[] expected = {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAscii_LongerSequence_vZUr5() {
        char[] input = {'1', '1', '0', '0', '1', '1', '0', '0', '1', '0', '1', '0', '1', '0', '1', '0'};
        byte[] expected = {(byte) 204, (byte) 170};
        assertArrayEquals(expected, BinaryCodec.fromAscii(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytesWithMultipleBytes_WXsh3() {
        byte[] input = {1, 2, 3};
        byte[] expected = {'0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBytes_AmCI4_NDyd0() {
        byte[] input = "1100101011110000".getBytes();
        byte[] expected = new byte[]{49, 49, 48, 48, 49, 48, 49, 48, 49, 49, 49, 49, 48, 48, 48, 48}; // ASCII values of "1100101011110000"
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiStringWithSimpleInput_QUEe0_fid1() {
        byte[] input = new byte[]{72, 101, 108, 108, 111}; // ASCII for "Hello"
        String expected = "Hello";
        String result = BinaryCodec.toAsciiString(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithValidInput_BsSA1_fid1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] result = codec.toByteArray("Hello");
        byte[] expected = new byte[]{(byte) 'H', (byte) 'e', (byte) 'l', (byte) 'l', (byte) 'o'};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSimpleInput_PTdM0_fid1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F}; // ASCII for "Hello"
        byte[] expected = new byte[]{'H', 'e', 'l', 'l', 'o'};
        byte[] result = codec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidAscii_naGf0_fid1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = "01001000 01100101 01101100 01101100 01101111".getBytes();
        byte[] expected = {72, 101, 108, 108, 111}; // ASCII values for "Hello"
        byte[] result = codec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidByteArray_nbor0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(input);
        assertNotNull(result);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_Ttut1_fid1() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = "010101".getBytes();
        byte[] result = (byte[]) codec.decode(input);
        assertArrayEquals(new byte[]{1, 0, 1, 0, 1}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBytes_okid3_fid1() {
        byte[] input = {0x01, (byte) 0x80};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsComplexInput_Rnmw4_fid1() {
        byte[] input = {0x0F, (byte) 0xA0};
        char[] expected = {'0', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidByteArray_nbor0_2_fid3() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(input);
        assertTrue(result instanceof char[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBytes_AmCI4_NDyd0_fid3() {
        byte[] input = "1100101011110000".getBytes();
        byte[] expected = {-54, -16}; // 0xCA and 0xF0 in decimal are 202 and 240 which are -54 and -16 in signed bytes
        assertArrayEquals(expected, BinaryCodec.toAsciiBytes(input));
    }
}