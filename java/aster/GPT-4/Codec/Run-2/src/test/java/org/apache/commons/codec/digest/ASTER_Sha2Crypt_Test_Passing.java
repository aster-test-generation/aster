/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Sha2Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_iulj0() {
        String expected = "someExpectedHashValue"; // Replace with the actual expected hash value for the test input
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithProvidedSalt_qNxH0_1() {
        String salt = "$5$somesalt";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithProvidedSalt_qNxH0_2() {
        String salt = "$5$somesalt";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertTrue(result.startsWith("$5$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_jYGY1_1() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_jYGY1_2() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null);
        assertTrue(result.startsWith("$5$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_naUN0() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithProvidedSalt_zRyA0_1() {
        String salt = "$6$saltsalt$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithProvidedSalt_zRyA0_2() {
        String salt = "$6$saltsalt$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertTrue(result.startsWith("$6$saltsalt$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithRandomSalt_BFBF1_1() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null, random);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithRandomSalt_BFBF1_2() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null, random);
        assertTrue(result.startsWith("$6$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithCustomSalt_rbtx0_1() {
        String customSalt = "$6$saltstring";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, customSalt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithCustomSalt_rbtx0_2() {
        String customSalt = "$6$saltstring";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, customSalt);
        assertTrue(result.startsWith("$6$saltstring$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_bzpk1_1() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_bzpk1_2() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null);
        assertTrue(result.startsWith("$6$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRandomSalt_Ghfs1_CIwk0_1() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
        assertNotNull(result, "Result should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithRandomSalt_Ghfs1_CIwk0_2() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null, random);
        assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX), "Result should start with the salt prefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithProvidedSalt_KVvL0_itTH0_1() {
        String salt = "$5$somesalt";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        assertNotNull(result, "Result should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithProvidedSalt_KVvL0_itTH0_2() {
        String salt = "$5$somesalt";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt, random);
        assertTrue(result.startsWith(Sha2Crypt.SHA256_PREFIX), "Result should start with the salt prefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithProvidedSalt_qNxH0() {
        String salt = "$5$somesalt";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("$5$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256CryptWithNullSalt_jYGY1() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha256Crypt(keyBytes, null);
        assertNotNull(result);
        assertTrue(result.startsWith("$5$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithProvidedSalt_zRyA0() {
        String salt = "$6$saltsalt$";
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, salt, random);
        assertNotNull(result);
        assertTrue(result.startsWith("$6$saltsalt$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithRandomSalt_BFBF1() {
        byte[] keyBytes = "password".getBytes();
        Random random = new Random();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null, random);
        assertNotNull(result);
        assertTrue(result.startsWith("$6$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithCustomSalt_rbtx0() {
        String customSalt = "$6$saltstring";
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, customSalt);
        assertNotNull(result);
        assertTrue(result.startsWith("$6$saltstring$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512CryptWithNullSalt_bzpk1() {
        byte[] keyBytes = "password".getBytes();
        String result = Sha2Crypt.sha512Crypt(keyBytes, null);
        assertNotNull(result);
        assertTrue(result.startsWith("$6$"));
    }
}