/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_ValidKeyAndValue_ShouldReturnExpectedHash_bOxP0() {
        String key = "secretKey";
        String valueToDigest = "Hello, HMAC!";
        byte[] expectedHash = {-89, 11, 50, -76, 76, -120, -13, -38, -106, -121, -51, 41, 116, 116, 64, -121, -75, 90, -47, 20};
        byte[] resultHash = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_jBMH0() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[]{ /* expected byte array output based on a known key and value */ };
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        // Assuming hmacSha512 method correctly computes the HMAC and returns a 64-byte array
        // Update the expectedOutput to match the correct expected HMAC result for the given key and value
        expectedOutput = new byte[]{ /* correct expected HMAC result bytes here */ };
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SgKU0() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[48]; // Adjust the expected output to match the expected length of HMAC-SHA-384 output
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_xUNM0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHex = "expectedHexValue"; // Replace 'a64ef3fe3204bd17843d245774f66750bd0648a5aa6a6228ba49aa0e7e7e34d2134790ba6b8e987bbcdc9101db42fc67' with the actual expected hex string from a reliable source or previous calculation.
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_ValidKeyAndValue_ShouldReturnExpectedDigest_vaIS0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        byte[] expectedDigest = new byte[]{
        (byte) 0xde, (byte) 0x7c, (byte) 0x9b, (byte) 0x85, (byte) 0xb8, (byte) 0xb7, (byte) 0x8a, (byte) 0xa6, (byte) 0xbc, (byte) 0x8a,
        (byte) 0x7a, (byte) 0x36, (byte) 0xf7, (byte) 0x0a, (byte) 0x90, (byte) 0x70, (byte) 0x1c, (byte) 0x9d, (byte) 0xb4, (byte) 0xd9
        };
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_ValidKeyAndValue_ShouldReturnExpectedHash_bOxP0_fid1() {
        String key = "secretKey";
        String valueToDigest = "Hello, HMAC!";
        byte[] expectedHash = {-89, 11, 50, -76, 76, -120, -13, -38, -106, -121, -51, 41, 116, 116, 64, -121, -89, 90, -47, 20};
        byte[] resultHash = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_jBMH0_fid1() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[]{ /* expected byte array output based on a known key and value */ };
        byte[] result = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_LwkJ0_fid1() {
        String key = "testKey";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "EXPECTED_HEX_DIGEST"; // Replace with the expected hex digest
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidData_HrIE0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] testData = "Hello, World!".getBytes();
        String expectedHex = "a591a6d40bf420404a011733cfbfd90e738e6d76a8a3b8f12ad6fdf2d8463f10";
        String resultHex = hmacUtils.hmacHex(testData);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SgKU0_fid1() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[]{/* expected byte array output */};
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_ValidKeyAndValue_GaME0_fid1() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "expected hex output based on HMAC SHA-384 algorithm"; // This should be the expected hex string output from a known correct implementation or source.
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacWithValidInput_nqmZ0() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] keyBytes = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, HMAC!".getBytes();
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "HmacSHA256");
        mac.init(keySpec);
        Mac updatedMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertArrayEquals(mac.doFinal(), updatedMac.doFinal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_CJbW0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        String expectedHex = "de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3"; // Expected output should be precomputed or mocked
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sWEZ0_fid1() {
        String key = "secretKey";
        String valueToDigest = "HelloWorld";
        String expectedHex = "2ef7bde608ce5404e97d5f042f95f89f1c232871"; // Expected HMAC SHA-1 output for the given key and value
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_HIgR0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        String expectedHex = "fa4b1f3c65a9a7e2b3c0d2e81a964c2a"; // Expected MD5 hex result for the given key and value
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_xUNM0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHex = "expectedHexValue"; // Replace 'expectedHexValue' with the actual expected hex string from a reliable source or previous calculation.
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_ValidInput_ReturnsExpectedHash_Fwvp0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHash = "a591a6d40bf420404a011733cfb7b190d62c65bf0c73063228b2d4bf892bdd78"; // Expected hash for given inputs
        String resultHash = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_ValidKeyAndValue_ShouldReturnExpectedDigest_vaIS0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        byte[] expectedDigest = { /* precomputed HMAC-SHA1 result for "HelloWorld" with "secretKey" */ };
        byte[] result = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expectedDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wPDp0_fid1() {
        String key = "secretKey";
        String valueToDigest = "HelloWorld";
        String expectedHex = "someExpectedHexValue"; // This should be the expected HMAC SHA-256 output in hex for the given key and value.
        String actualHex = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_quZM0_fid1() {
        String key = "secret";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "b7f783baed9f7d9b8aae9c21377f5c5d2c190e5e2b997f62c2d8b3a0be4f8b0e6b6f1f97b5b8e2277f5c5d2c190e5e2b997f62c2d8b3a0be4f8b0e6b6f1f97b5b"; // Expected output needs to be generated or mocked appropriately
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithValidInputs_xdOh0_fid1() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[]{(byte) 0x90, (byte) 0x01, (byte) 0x50, (byte) 0x98, (byte) 0x3c, (byte) 0xd2, (byte) 0x4f, (byte) 0xb0, (byte) 0xd6, (byte) 0x96, (byte) 0x3f, (byte) 0x7d, (byte) 0x28, (byte) 0xe1, (byte) 0x7f, (byte) 0x72};
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidInput_yybQ0_fid1() {
        String key = "secretKey";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key.getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        String expectedHex = "a591a6d40bf420404a011733cfbfd90e738e6d76e177a93c7203e77a2c6f3e86"; // Expected hex for the given input and key
        String resultHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_JakG0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHex = "b7f783baed9c9d0c3a89bfdf8a739b35d4032b1e7e803f5d6dfabd670a0d3fba6cf3b05a5c273a1b8c9e82a256044d3e76dba77a9584716d9fb7a7a2555aefef";
        String resultHex = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithValidInput_pwmg0_fid1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expectedOutput = new byte[]{ // Example expected output, assuming HMAC_MD5 of "Hello, World!" with "secretKey"
        (byte) 0x86, (byte) 0x8d, (byte) 0x34, (byte) 0xf6, (byte) 0x2a, (byte) 0xc3, (byte) 0x17, (byte) 0x6d,
        (byte) 0x5d, (byte) 0x16, (byte) 0xc1, (byte) 0x92, (byte) 0x2f, (byte) 0x8b, (byte) 0x0e, (byte) 0xef
        };
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_berU0_fid1() {
        String key = "secret";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = { // This should be the expected HMAC SHA-256 output for the given key and string
        (byte) 0x7f, (byte) 0x83, (byte) 0xb1, (byte) 0x65, (byte) 0x7f, (byte) 0xf1, (byte) 0xfc, (byte) 0x53,
        (byte) 0xb9, (byte) 0x6d, (byte) 0xc7, (byte) 0x23, (byte) 0x42, (byte) 0xdf, (byte) 0x88, (byte) 0x74,
        (byte) 0x9c, (byte) 0xac, (byte) 0x39, (byte) 0x2a, (byte) 0xab, (byte) 0x62, (byte) 0x2f, (byte) 0x6c,
        (byte) 0x6a, (byte) 0xe8, (byte) 0x5a, (byte) 0x97, (byte) 0xd5, (byte) 0x48, (byte) 0xd3, (byte) 0x1e
        };
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }
}