/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidType_DKhS1() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        try {
            encoder.encode(new Object());
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("BeiderMorseEncoder encode parameter is not of type String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRuleType_sSqp0_brFV0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setRuleType(RuleType.APPROX);
        assertEquals(RuleType.APPROX, encoder.getRuleType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConcatTrue_EVWu0_IsCo0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        encoder.setConcat(true);
        assertTrue(encoder.isConcat());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameType_Ashkenazi_zWZN0_XZIy0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType nameType = NameType.ASHKENAZI;
        encoder.setNameType(nameType);
        assertEquals(nameType, encoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_sKqy0_Oaqt0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String result = null;
        try {
            result = encoder.encode(null);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_LdQl0_QAgG0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        NameType expected = NameType.GENERIC; // Assuming GENERIC is a valid enum constant in NameType
        NameType actual = encoder.getNameType();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_vqCQ0_GhpN0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "test";
        try {
            Object result = encoder.encode(input);
            assertTrue(result instanceof String);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_lyLc0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_gIvV1_ugkd0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "example";
        String expected = "YgzYmpli|Ygzampli|Ygzompli|YksYmpli|Yksampli|Yksompli|igzYmpli|igzabli|igzampil|igzampli|igzobli|igzompil|igzompli|iksYmpli|iksabli|iksampil|iksampli|iksobli|iksompil|iksompli|isampli|isompli|izampli|izompli"; // Assuming "YgzYmpli|Ygzampli|Ygzompli|YksYmpli|Yksampli|Yksompli|igzYmpli|igzabli|igzampil|igzampli|igzobli|igzompil|igzompli|iksYmpli|iksabli|iksampil|iksampli|iksobli|iksompil|iksompli|isampli|isompli|izampli|izompli" is the expected encoded result for "example"
        try {
            String result = encoder.encode(input);
            assertEquals(expected, result);
        } catch (EncoderException e) {
            fail("EncoderException was thrown");
        }
    }
}