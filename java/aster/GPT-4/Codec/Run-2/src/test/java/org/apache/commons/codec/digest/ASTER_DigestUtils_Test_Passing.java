/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_nMri0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNonNullValues_bBEG0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, valueToDigest);
        assertNotEquals(digest.digest(), updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_wTvw0() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertNotNull(sha384Digest);
        assertEquals("SHA-384", sha384Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithValidString_EZpp0() {
        String testString = "Hello, World!";
        byte[] result = DigestUtils.sha1(testString);
        assertNotNull(result);
        assertEquals(20, result.length); // SHA-1 should return a 160-bit digest (20 bytes)
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithValidString_ujWO0() {
        String testString = "Hello, world!";
        byte[] expectedOutput = DigestUtils.md5(testString);
        byte[] actualOutput = DigestUtils.md5(testString);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_zYZL0() {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertNotNull(md2Digest);
        assertEquals("MD2", md2Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256HexWithValidInput_lcmW0() {
        String expected = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
        byte[] inputData = new byte[0];
        String result = DigestUtils.sha256Hex(inputData);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithValidString_DCTo0() {
        String testData = "Hello, World!";
        byte[] expectedOutput = DigestUtils.sha1(testData);
        byte[] actualOutput = DigestUtils.sha(testData);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256WithNonNullData_iGSh0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha256(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_RKwx0() {
        MessageDigest sha3_512Digest = DigestUtils.getSha3_512Digest();
        assertNotNull(sha3_512Digest);
        assertEquals("SHA3-512", sha3_512Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_withEmptyByteArray_GxFl0() {
        byte[] data = new byte[0];
        String result = DigestUtils.sha3_512Hex(data);
        assertEquals("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1HexWithSimpleString_yiQl0() {
        String input = "hello";
        String expectedOutput = "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d";
        String result = DigestUtils.sha1Hex(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224HexWithEmptyData_ORZf0() {
        byte[] testData = new byte[0];
        String result = DigestUtils.sha512_224Hex(testData);
        assertEquals("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_ZmMZ0() {
        MessageDigest sha1Digest = DigestUtils.getSha1Digest();
        assertNotNull(sha1Digest);
        assertEquals("SHA-1", sha1Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_ValidAlgorithm_gnvy0() {
        String algorithm = "SHA-256";
        MessageDigest digest = DigestUtils.getDigest(algorithm);
        assertNotNull(digest);
        assertEquals("SHA-256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithByteBuffer_Rngn0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        byte[] result = digestUtils.digest(buffer);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_xqoB0() {
        MessageDigest expectedDigest = null;
        DigestUtils digestUtils = new DigestUtils(expectedDigest);
        MessageDigest actualDigest = digestUtils.getMessageDigest();
        assertEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_CtTg0() {
        MessageDigest expected = DigestUtils.getSha1Digest();
        MessageDigest actual = DigestUtils.getShaDigest();
        assertEquals(expected.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_ohvu0() {
        MessageDigest sha3_384Digest = DigestUtils.getSha3_384Digest();
        assertNotNull(sha3_384Digest);
        assertEquals("SHA3-384", sha3_384Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNonNullInput_ybMo0() {
        String input = "Hello, World!";
        byte[] result = DigestUtils.sha3_224(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithNonNullInput_DHCW0() {
        String input = "test input";
        byte[] result = DigestUtils.sha3_256(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNonNullInput_Wfwm0() {
        String input = "test input";
        byte[] result = DigestUtils.sha512_224(input);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA-512/224 produces a 224-bit hash, which is 28 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_VGmf0() {
        MessageDigest digest = DigestUtils.getSha3_224Digest();
        assertNotNull(digest);
        assertEquals("SHA3-224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaWithEmptyByteArray_HvVk0() {
        byte[] testData = new byte[0];
        byte[] result = DigestUtils.sha(testData);
        assertNotNull(result);
        assertArrayEquals(DigestUtils.sha1(testData), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithSimpleString_Imcr0() {
        String input = "Hello, world!";
        byte[] result = DigestUtils.sha3_384(input);
        assertNotNull(result);
        assertEquals(48, result.length); // SHA3-384 produces a 48 byte hash
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithNonNullData_Jdar0() {
        byte[] testData = "sample data".getBytes();
        byte[] result = DigestUtils.sha3_512(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512WithValidString_tvpD0() {
        String testString = "Hello, World!";
        byte[] result = DigestUtils.sha3_512(testString);
        assertNotNull(result);
        assertEquals(64, result.length); // SHA3-512 should return a 512-bit hash (64 bytes)
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHexWithValidInput_BGki0() {
        String input = "hello";
        String expectedOutput = DigestUtils.sha1Hex(input);
        String actualOutput = DigestUtils.shaHex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithByteBuffer_LyRe0() {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            fail("Algorithm SHA-256 should be available.");
        }
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        byte[] expectedDigest = md.digest(new byte[]{1, 2, 3, 4});
        byte[] actualDigest = DigestUtils.digest(md, buffer);
        assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2HexWithEmptyArray_YzSc0() {
        byte[] data = new byte[0];
        String result = DigestUtils.md2Hex(data);
        assertEquals("8350e5a3e24c153df2275c9f80692773", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_fHLD0() {
        MessageDigest sha512Digest = DigestUtils.getSha512Digest();
        assertNotNull(sha512Digest);
        assertEquals("SHA-512", sha512Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224WithNonNullData_CPCP0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha512_224(testData);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA-512/224 produces a 28-byte hash
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNonNullData_TVfA0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha512(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNonNullData_wfJw0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha3_384(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNonExistentFile_aPgS3() {
        try {
            RandomAccessFile file = new RandomAccessFile("nonExistentFile.txt", "r");
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            DigestUtils.digest(md, file);
            fail("Expected an IOException to be thrown");
        } catch (IOException | NoSuchAlgorithmException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithNullMessageDigest_kbox4() {
        try {
            RandomAccessFile file = new RandomAccessFile("someFile.txt", "r");
            DigestUtils.digest(null, file);
            fail("Expected a NullPointerException to be thrown");
        } catch (IOException | NullPointerException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithChangingFileContents_mvnt6() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile file = new RandomAccessFile("changeFile.txt", "rw");
        file.writeBytes("Initial content");
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] firstResult = DigestUtils.digest(md, file);
        file.setLength(0); // Clear the file
        file.writeBytes("Modified content");
        byte[] secondResult = DigestUtils.digest(md, file);
        assertNotEquals(new String(firstResult), new String(secondResult));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_ValidAlgorithm_bzQm0() {
        assertTrue(DigestUtils.isAvailable("SHA-256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_InvalidAlgorithm_iKxl1() {
        assertFalse(DigestUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithWriteOnlyFile_tWLa8() throws IOException, NoSuchAlgorithmException {
        RandomAccessFile file = new RandomAccessFile("writeonlyfile.txt", "rw");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, file);
        assertNotNull(updatedDigest);
        assertNotEquals(new byte[32], updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNonNullData_xfPM0() {
        byte[] testData = "sample data".getBytes();
        byte[] result = DigestUtils.sha3_224(testData);
        assertNotNull(result);
        assertEquals(28, result.length); // SHA3-224 produces a 224-bit hash, which is 28 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithNonNullData_Zrah0() {
        byte[] testData = new byte[]{1, 2, 3, 4, 5};
        byte[] result = DigestUtils.sha3_256(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_ValidInput_ReturnsCorrectMd5Hash_xiUv0() {
        String input = "Hello, world!";
        String expectedOutput = "6cd3556deb0da54bca060b4c39479839";
        String result = DigestUtils.md5Hex(input);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithValidPath_yIiZ0() throws IOException, NoSuchAlgorithmException {
        Path testPath = Files.createTempFile("testFile", ".txt");
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        MessageDigest updatedDigest = DigestUtils.updateDigest(digest, testPath);
        assertNotNull(updatedDigest);
        byte[] digestBytes = updatedDigest.digest();
        assertNotNull(digestBytes);
        assertTrue(digestBytes.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256WithNonNullInput_MrgC0() {
        String input = "test input";
        byte[] result = DigestUtils.sha512_256(input);
        assertNotNull(result);
        assertEquals(32, result.length); // SHA-512/256 produces a 256-bit hash (32 bytes)
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_withNonNullData_jjaj0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha512_256(testData);
        assertNotNull(result);
        assertEquals(32, result.length); // SHA-512/256 produces a 256-bit hash, i.e., 32 bytes
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5HexWithValidData_rsSL0() {
        String expected = "d41d8cd98f00b204e9800998ecf8427e"; // MD5 hash of empty string
        byte[] data = new byte[0];
        String result = DigestUtils.md5Hex(data);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_MrXE0() {
        MessageDigest digest = DigestUtils.getSha512_224Digest();
        assertNotNull(digest);
        assertEquals("SHA-512/224", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexWithValidData_YilS0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        ByteBuffer data = ByteBuffer.wrap("test data".getBytes());
        String result = digestUtils.digestAsHex(data);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigestWithValidAlgorithm_sXbU0() {
        MessageDigest defaultMessageDigest = null;
        try {
            defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        MessageDigest result = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertNotNull(result);
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithValidString_xKxk0() {
        String testString = "Hello, world!";
        byte[] expectedOutput = DigestUtils.sha384(testString);
        byte[] actualOutput = DigestUtils.sha384(testString);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512HexWithValidInput_IHeo0() {
        String input = "Hello World";
        String expectedOutput = "2c74fd17edafd80e8447b0d46741ee243b7eb74dd2149a0ab1b9246fb30382f27e853d8585719e0e67cbda0daa8f51671064615d645ae27acb15bfb1447f459b";
        String actualOutput = DigestUtils.sha512Hex(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2WithValidString_LkSy0() {
        String input = "test";
        byte[] result = DigestUtils.md2(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5WithNonNullData_RnKt0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.md5(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_Dneb0() {
        MessageDigest sha3_256Digest = DigestUtils.getSha3_256Digest();
        assertNotNull(sha3_256Digest);
        assertEquals("SHA3-256", sha3_256Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_withNonNullData_ZjQt0() {
        byte[] testData = "test input".getBytes();
        String result = DigestUtils.sha512_256Hex(testData);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithNonNullData_oTvq0() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha1(testData);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha256Digest_Crpg0() {
        MessageDigest sha256Digest = DigestUtils.getSha256Digest();
        assertNotNull(sha256Digest);
        assertEquals("SHA-256", sha256Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_mcLr0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        String data = "Hello World";
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithValidData_fDRC0() {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = "test data".getBytes();
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_CtQt0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_clFv0() {
        MessageDigest digest = DigestUtils.getSha512_256Digest();
        assertNotNull(digest);
        assertEquals("SHA-512/256", digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512WithNonNullInput_YVjI0() {
        String input = "Hello, World!";
        byte[] result = DigestUtils.sha512(input);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_nMri0_1() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384WithNonNullData_nMri0_2() {
        byte[] testData = "test data".getBytes();
        byte[] result = DigestUtils.sha384(testData);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_wTvw0_1() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertNotNull(sha384Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_wTvw0_2() {
        MessageDigest sha384Digest = DigestUtils.getSha384Digest();
        assertEquals("SHA-384", sha384Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1WithValidString_EZpp0_1() {
        String testString = "Hello, World!";
        byte[] result = DigestUtils.sha1(testString);
        assertNotNull(result);
    }
}