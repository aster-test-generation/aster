/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PureJavaCrc32_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithEightBytes_uTQl0() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8};
        crc32.update(data, 0, 8);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithXCalculation_zFTM1() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {10, 20, 30, 40, 50, 60, 70, 80};
        crc32.update(data, 0, 8);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithTableLookup_uSXa2() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {9, 8, 7, 6, 5, 4, 3, 2};
        crc32.update(data, 0, 8);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderSeven_rJGF3() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8};
        crc32.update(data, 0, 9);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderSix_QXxN4() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7};
        crc32.update(data, 0, 8);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderFive_qwXH5() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4, 5, 6};
        crc32.update(data, 0, 7);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderFour_eNkf6() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4, 5};
        crc32.update(data, 0, 6);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderThree_ucQg7() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4};
        crc32.update(data, 0, 5);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderTwo_HXue8() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3};
        crc32.update(data, 0, 4);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithRemainderOne_QpEl9() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2};
        crc32.update(data, 0, 3);
        assertNotNull(crc32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateWithNoRemainder_PdIX10() {
        PureJavaCrc32 crc32 = new PureJavaCrc32();
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        crc32.update(data, 0, 16);
        assertNotNull(crc32);
    }
}