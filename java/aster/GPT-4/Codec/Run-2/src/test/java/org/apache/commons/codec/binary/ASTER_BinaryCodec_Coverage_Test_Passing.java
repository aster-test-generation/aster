/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_olZG1_1() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArrayInput = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArrayInput);
        assertNotNull(result);
    }

    @Test
    public void testDecodeWithInvalidType_UEEh7_NWaU0() {
        BinaryCodec codec = new BinaryCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected an exception to be thrown");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithEmptyArray_wrFH1_VOaW0() {
        assertArrayEquals(new byte[0], BinaryCodec.toAsciiBytes(new byte[0]), "Expected empty byte array for empty char array");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyByteArray_WWVK1_NFUF0() throws org.apache.commons.codec.DecoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[0];
        assertArrayEquals(new byte[0], codec.toAsciiBytes(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_tbHM5_Olmz0() throws org.apache.commons.codec.DecoderException {
        BinaryCodec codec = new BinaryCodec();
        String input = "";
        assertArrayEquals(new byte[0], codec.toAsciiBytes(input.getBytes()));
    }

    @Test
    public void testEncodeWithNonByteArray_PmvF0_iDqX0_1() {
        BinaryCodec codec = new BinaryCodec();
        String nonByteArrayInput = "This is a string, not a byte array";
        byte[] result = codec.toAsciiBytes(nonByteArrayInput.getBytes());
        assertNotNull(result);
    }

    @Test
    public void testEncodeWithNonByteArray_PmvF0_iDqX0_2() {
        BinaryCodec codec = new BinaryCodec();
        String nonByteArrayInput = "This is a string, not a byte array";
        byte[] result = codec.toAsciiBytes(nonByteArrayInput.getBytes());
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_olZG1_2_fid1() throws EncoderException {
        BinaryCodec codec = new BinaryCodec();
        byte[] byteArrayInput = new byte[]{0x01, 0x02, 0x03};
        Object result = codec.encode(byteArrayInput);
        assertFalse(result instanceof char[]);
    }
}