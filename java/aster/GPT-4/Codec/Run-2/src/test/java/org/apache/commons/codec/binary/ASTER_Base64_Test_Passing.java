/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeTrue_sfXm0() {
        Base64 base64 = new Base64(true);
        assertTrue(base64.isUrlSafe());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_ValidInput_vuQW0() {
        String encodedString = "SGVsbG8gV29ybGQ=";
        byte[] expectedOutput = "Hello World".getBytes();
        byte[] actualOutput = Base64.decodeBase64(encodedString);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithSimpleInput_MQkb0() {
        byte[] input = "Hello, World!".getBytes();
        String result = Base64.encodeBase64String(input);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithSimpleData_zkWd0() {
        byte[] input = "Hello World".getBytes();
        byte[] expectedOutput = Base64.encodeBase64(input);
        byte[] actualOutput = Base64.encodeBase64(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_yXXf0() {
        byte[] input = new byte[]{(byte) 0xe4, (byte) 0xb8, (byte) 0xad};
        byte[] expectedOutput = Base64.encodeBase64(input, true);
        byte[] actualOutput = Base64.encodeBase64Chunked(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderReturnsNonNullBuilderInstance_VVkc0() {
        assertNotNull(Base64.builder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_RcEf0() {
        byte[] input = "Hello, World!".getBytes();
        byte[] expectedOutput = Base64.encodeBase64(input, true, false);
        byte[] actualOutput = Base64.encodeBase64(input, true);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64String_ReturnsTrue_YVzV0() {
        String validBase64 = "SGVsbG8gV29ybGQ="; // "Hello World" in Base64
        assertTrue(Base64.isBase64(validBase64));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_withValidBase64Input_rgOh0() {
        byte[] validBase64Input = "TWFu".getBytes(); // "Man" in Base64
        assertTrue(Base64.isArrayByteBase64(validBase64Input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithPositiveNumber_Vire1() {
        BigInteger bigInt = new BigInteger("123456");
        byte[] expected = {0x01, (byte) 0xe2, 0x40};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithNegativeNumber_zzEq2() {
        BigInteger bigInt = new BigInteger("-123456");
        byte[] expected = {(byte) 0xfe, (byte) 0x1d, (byte) 0xc0};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytesWithPowerOfTwo_CTFj3() {
        BigInteger bigInt = BigInteger.valueOf(2).pow(8);
        byte[] expected = {0x01, 0x00};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_BCGd0() {
        byte[] input = "Hello World".getBytes();
        byte[] expectedOutput = Base64.encodeBase64URLSafe(input);
        byte[] actualOutput = Base64.encodeBase64(input, false, true);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidPaddingCharacter_HPxt0() {
        assertTrue(Base64.isBase64((byte) '='));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64Character_Qbkr1() {
        assertTrue(Base64.isBase64((byte) 'A')); // 'A' is a valid Base64 character
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NonBase64Character_eCZb2() {
        assertFalse(Base64.isBase64((byte) '#')); // '#' is not a valid Base64 character
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NegativeByteValue_fcxb3() {
        assertFalse(Base64.isBase64((byte) -1)); // Negative values are not valid Base64 characters
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_HighByteValue_jBML4() {
        assertFalse(Base64.isBase64((byte) 128)); // Values above 127 are not valid Base64 characters
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidInput_cmBL0() {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 'A')); // 'A' is typically in the Base64 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidInput_ZZeq1() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet((byte) '@')); // '@' is not in the Base64 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_BoundaryCheckLower_kAdC2() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet((byte) 0)); // Check boundary at the start of the ASCII table
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_BoundaryCheckUpper_iUms3() {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet((byte) 127)); // Check boundary at the end of the ASCII table
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_EmptyData_hjch0() {
        byte[] emptyData = new byte[0];
        byte[] result = Base64.encodeBase64(emptyData, false, false, 10);
        assertArrayEquals(emptyData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_DefaultConstructor_qOaa0() {
        Base64 base64 = new Base64();
        byte[] result = base64.getLineSeparator();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLength_PXHF1() {
        Base64 base64 = new Base64(76);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(new byte[]{13, 10}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithUrlSafe_sAoL2() {
        Base64 base64 = new Base64(true);
        byte[] result = base64.getLineSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparator_ULpD3() {
        byte[] lineSeparator = new byte[]{'\r', '\n'};
        Base64 base64 = new Base64(76, lineSeparator);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndUrlSafe_pulP4() {
        byte[] lineSeparator = new byte[]{'\n'};
        Base64 base64 = new Base64(76, lineSeparator, true);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndUrlSafeAndCodecPolicy_QLTG5() {
        byte[] lineSeparator = new byte[]{'\r'};
        Base64 base64 = new Base64(76, lineSeparator, true, CodecPolicy.STRICT);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndCodecPolicy_SIVO6() {
        byte[] lineSeparator = new byte[]{0x0A};
        Base64 base64 = new Base64(76, lineSeparator, false, CodecPolicy.LENIENT);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndUrlSafe_False_wrDe7() {
        byte[] lineSeparator = new byte[]{'\r', '\n'};
        Base64 base64 = new Base64(76, lineSeparator, false);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndUrlSafe_True_WltJ8() {
        byte[] lineSeparator = new byte[]{'\n', '\r'};
        Base64 base64 = new Base64(76, lineSeparator, true);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithLineLengthAndLineSeparatorAndCodecPolicy_STRICT_BXzL9() {
        byte[] lineSeparator = new byte[]{0x0D, 0x0A};
        Base64 base64 = new Base64(76, lineSeparator, false, CodecPolicy.STRICT);
        byte[] result = base64.getLineSeparator();
        assertArrayEquals(lineSeparator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64_ziqL0() {
        byte[] input = "TWFu".getBytes(); // "Man" in Base64
        assertTrue(Base64.isBase64(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64_JSQS1() {
        byte[] input = "TWFu$".getBytes(); // "Man$" not valid Base64
        assertFalse(Base64.isBase64(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_EmptyArray_UHka2() {
        byte[] input = new byte[0]; // Empty array
        assertTrue(Base64.isBase64(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_WithWhitespace_Hlkv3() {
        byte[] input = "TW Fu".getBytes(); // "TW Fu" with whitespace, valid if whitespace ignored
        assertTrue(Base64.isBase64(input));
    }

    @Test
    public void testEncodeBase64_ExceedsMaxResultSize_tVNM3_iNLV0() {
        byte[] largeData = new byte[1024 * 1024]; // 1MB of data
        assertThrows(IllegalArgumentException.class, () -> {
            Base64.encodeBase64(largeData, true, false, 1000);
        });
    }
}