/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithMultipleLanguages_NOBH2() {
        Set<String> languages = new HashSet<>(Arrays.asList("English", "French"));
        LanguageSet multiLangSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.SEPHARDIC, RuleType.APPROX, multiLangSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithAllNameTypesAndRuleTypes_kRsq5() {
        Set<String> languages = new HashSet<>(Arrays.asList("English", "German"));
        LanguageSet langSet = LanguageSet.from(languages);
        for (NameType nameType : NameType.values()) {
            for (RuleType ruleType : RuleType.values()) {
                List<Rule> result = Rule.getInstance(nameType, ruleType, langSet);
                assertNotNull(result);
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithComplexLanguageSet_lFun9() {
        Set<String> languages = new HashSet<>(Arrays.asList("English", "French", "German", "Spanish"));
        LanguageSet complexLangSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.APPROX, complexLangSet);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyLanguageSet_cJRO0_fid2() {
        LanguageSet emptyLangSet = LanguageSet.from(new HashSet<>());
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, emptyLangSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstanceWithEmptyRules_yFsC7_fid2() {
        Set<String> languages = new HashSet<>();
        LanguageSet langSet = LanguageSet.from(languages);
        List<Rule> result = Rule.getInstance(NameType.GENERIC, RuleType.EXACT, langSet);
        assertFalse(result.isEmpty());
    }
}