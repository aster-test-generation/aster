/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctet_aOoe0() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'A')); // Assuming 'A' is within the valid Base32 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidOctet_hcEM1() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '@')); // Assuming '@' is not within the Base32 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_BoundaryValidOctet_vxLL2() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'Z')); // Assuming 'Z' is the last valid character in the Base32 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_BoundaryInvalidOctet_rTZU3() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '[')); // Assuming '[' is just outside the valid Base32 alphabet
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_NullSeparator_VdJE0() {
        Base32 base32 = new Base32();
        assertNull(base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_EmptySeparator_QhqW1() {
        Base32 base32 = new Base32(10, new byte[]{});
        assertArrayEquals(new byte[]{}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_SingleByteSeparator_bsFu2() {
        Base32 base32 = new Base32(10, new byte[]{0x0A});
        assertArrayEquals(new byte[]{0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_MultipleByteSeparator_ldDJ3() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A});
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithHexTrue_ABvj4() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, true);
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithHexFalse_CNOl5() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, false);
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithPadding_hlVd6() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, false, (byte) '=');
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithHexAndPadding_CDvE7() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, true, (byte) '=');
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithAllParams_kKoV8() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, true, (byte) '=', CodecPolicy.STRICT);
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_WithAllParamsAndLenientPolicy_mQzM9() {
        Base32 base32 = new Base32(10, new byte[]{0x0D, 0x0A}, true, (byte) '=', CodecPolicy.LENIENT);
        assertArrayEquals(new byte[]{0x0D, 0x0A}, base32.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_eGkf0_bLip0_1() {
        Base32 result = new Base32();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_eGkf0_bLip0_2() {
        Base32 result = new Base32();
        assertTrue(result instanceof Base32);
    }
}