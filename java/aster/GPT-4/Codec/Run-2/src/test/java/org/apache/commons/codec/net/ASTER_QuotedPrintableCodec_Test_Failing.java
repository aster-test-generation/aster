/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintable_InvalidEncoding_GxPj5() {
        byte[] input = "hello=2Gworld".getBytes();
        try {
            QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
            assertArrayEquals("Invalid quoted-printable encoding".getBytes(), e.getMessage().getBytes());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_BVEH3_2() {
        BitSet printable = new BitSet();
        printable.set(67); // A
        byte[] bytes = {67, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableNonStrict_RxtR7_2() {
        BitSet printable = new BitSet();
        printable.set(67); // A
        byte[] bytes = {67, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonAsciiCharacterStrict_ldoj17_1() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 200}; // non-ASCII
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonAsciiCharacterStrict_ldoj17_2() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 200}; // non-ASCII
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharsNonStrict_Nckd8() {
        byte[] input = new byte[]{(byte) '=', (byte) '?', (byte) '_'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{(byte) '=', (byte) '3', (byte) 'D', (byte) '=', (byte) '3', (byte) 'F', (byte) '_', (byte) '5', (byte) 'F'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_StrictFalse_EFqT2() {
        BitSet printable = new BitSet();
        printable.set(65);
        byte[] input = {66}; // ASCII for B
        byte[] expected = {61, 66}; // Quoted-printable encoding for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesMixedPrintable_StrictFalse_NCWq5() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A' is printable
        byte[] input = {65, 66}; // ASCII for 'AB'
        byte[] expected = {65, 61, 42, 42}; // Quoted-printable encoding for 'B' should be "=42" but seems to be wrongly expected as 61, 42
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_JustBelowSafeLengthLimit_StrictTrue_kuwl11_2() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[78];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEndStrict_BtiI7() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = new byte[]{(byte) 'a', (byte) ' ', (byte) ' '};
        byte[] expected = new byte[]{'=', '6', '1', '=', '2', '0', '=', '2', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LineBreakInStrictMode_iWKO15() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 'a');
        bytes[75] = (byte) ' ';
        ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
        for (int i = 0; i < 75; i++) {
            expectedOutput.write('a');
        }
        expectedOutput.write('=');
        expectedOutput.write('2');
        expectedOutput.write('0');
        expectedOutput.write('=');
        expectedOutput.write('0');
        expectedOutput.write('D');
        expectedOutput.write('=');
        expectedOutput.write('0');
        expectedOutput.write('A');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expectedOutput.toByteArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableAtEnd_vNxL16() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 128};
        byte[] expected = new byte[]{'a', '=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, Arrays.copyOf(result, expected.length));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_PrintableSetBoundary_IKDq17() {
        BitSet printable = new BitSet();
        printable.set(0, 128); // Assuming ASCII printable
        byte[] bytes = new byte[]{(byte) 127, (byte) 128};
        byte[] expected = new byte[]{'=', '7', 'F', '=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_xeZJ1_1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_xeZJ1_2() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_NonNullInput_ReturnsEncodedString_XNMH1_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello=2C=20World=21";
        String result = codec.encode(input, StandardCharsets.UTF_8);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithDefaultCharset_CNAJ0_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World!";
        String expected = "Hello=20World!";
        String result = codec.encode(sourceStr);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUtf8Charset_PNDJ0_fid1() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String input = "Hello, World!";
        String expectedOutput = "Hello=2C=20World=21";
        String result = codec.encode(input, "UTF-8");
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNullPrintableStrict_oNDc2_fid1() {
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, true);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_BVEH3_2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableNonStrict_RxtR5_2() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWhitespaceStrict_wkgC9_2() {
        BitSet printable = new BitSet();
        printable.set(32); // space
        byte[] bytes = {32, 32, 32}; // three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(9, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableMixedContentStrict_gVPJ12_2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 66, 65}; // BABA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedStrict_CivO19_2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedNonStrict_teVq20_2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEndStrict_QpsU5_fid1() {
        byte[] input = new byte[]{32, 32, 32}; // Three spaces
        BitSet printable = new BitSet();
        printable.set(32);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(new byte[]{(byte) ' ', (byte) ' ', (byte) '='}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SpecialCharsNonStrict_Nckd8_fid1() {
        byte[] input = new byte[]{(byte) '=', (byte) '?', (byte) '_'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertArrayEquals(new byte[]{(byte) '=', (byte) '3', (byte) 'D', (byte) '=', (byte) '3', (byte) 'F', (byte) '=', (byte) '5', (byte) 'F'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_PrintableSetStrict_Asse9() {
        BitSet printable = new BitSet();
        printable.set(65); // 'A'
        byte[] input = new byte[]{65, 66}; // "AB"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertArrayEquals(new byte[]{65, (byte) '=', (byte) '4', (byte) '2'}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleCharStrict_Wdhl16() {
        byte[] input = new byte[]{65}; // "A"
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertArrayEquals(new byte[]{65}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceStrict_oqHl19_fid1() {
        byte[] input = new byte[]{32, 32, 32}; // Three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertArrayEquals(new byte[]{32, 32, (byte) '='}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_SingleByteNonPrintable_StrictFalse_EFqT2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65);
        byte[] input = {66}; // ASCII for B
        byte[] expected = {61, 42}; // Quoted-printable encoding for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_MultipleBytesMixedPrintable_StrictFalse_NCWq5_fid1() {
        BitSet printable = new BitSet();
        printable.set(65);
        byte[] input = {65, 66}; // ASCII for AB
        byte[] expected = {65, 61, 42}; // Quoted-printable encoding for B
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_JustBelowSafeLengthLimit_StrictTrue_kuwl11_2_fid1() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_qvAZ1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, new byte[0], true);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEndStrict_BtiI7_fid1() {
        BitSet printable = new BitSet();
        printable.set(' ');
        byte[] bytes = new byte[]{(byte) 'a', (byte) ' ', (byte) ' '};
        byte[] expected = new byte[]{'a', '=', '2', '0', '=', '2', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LongSequenceStrict_xfAw8() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[100];
        Arrays.fill(bytes, (byte) 'a');
        ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
        for (int i = 0; i < bytes.length; i++) {
            expectedOutput.write('a');
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expectedOutput.toByteArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_LineBreakInStrictMode_iWKO15_fid1() {
        BitSet printable = new BitSet();
        printable.set('a');
        byte[] bytes = new byte[76];
        Arrays.fill(bytes, (byte) 'a');
        bytes[75] = (byte) ' ';
        ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
        for (int i = 0; i < 75; i++) {
            expectedOutput.write('a');
        }
        expectedOutput.write('=');
        expectedOutput.write('2');
        expectedOutput.write('0');
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertArrayEquals(expectedOutput.toByteArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NonPrintableAtEnd_vNxL16_fid1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[]{(byte) 'a', (byte) 128};
        byte[] expected = new byte[]{'a', '=', '8', '0'};
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_FullRangeNonPrintable_bCdU18_fid1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[256];
        for (int i = 0; i < 256; i++) {
            bytes[i] = (byte) i;
        }
        ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
        for (int i = 0; i < 256; i++) {
            if (i < 128) {
                expectedOutput.write('=');
                expectedOutput.write(Utils.hexDigit(i >> 4));
                expectedOutput.write(Utils.hexDigit(i));
            } else {
                expectedOutput.write(i);
            }
        }
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertArrayEquals(expectedOutput.toByteArray(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableStrict_BVEH3() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonPrintableNonStrict_RxtR5() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, 66, 67}; // ABC
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotEquals(bytes, result);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableWhitespaceStrict_wkgC9() {
        BitSet printable = new BitSet();
        printable.set(32); // space
        byte[] bytes = {32, 32, 32}; // three spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(9, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableMixedContentStrict_gVPJ12() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {66, 65, 66, 65}; // BABA
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableNonAsciiCharacterStrict_ldoj17() {
        BitSet printable = new BitSet();
        byte[] bytes = {(byte) 200}; // non-ASCII
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedStrict_CivO19() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintableAsciiAndNonAsciiMixedNonStrict_teVq20() {
        BitSet printable = new BitSet();
        printable.set(65); // A
        byte[] bytes = {65, (byte) 200, 65}; // A-nonASCII-A
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, false);
        assertNotNull(result);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_JustBelowSafeLengthLimit_StrictTrue_kuwl11() {
        BitSet printable = new BitSet();
        printable.set(65); // ASCII for A
        byte[] input = new byte[75];
        Arrays.fill(input, (byte) 65);
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, input, true);
        assertNotNull(result);
        assertEquals(input.length, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_EmptyBytes_xeZJ1() {
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), new byte[0], true);
        assertNotNull(result);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_WhitespaceAtEnd_GwDs6() {
        BitSet printable = new BitSet();
        printable.set(32); // Space is printable
        byte[] bytes = {32, 32}; // Two spaces
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNotNull(result);
        assertTrue(result.length > 2); // Should encode the whitespace at the end
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_StrictModeShortInput_NCYQ7() {
        BitSet printable = new BitSet();
        byte[] bytes = {65, 66, 67}; // 'A', 'B', 'C'
        byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, true);
        assertNull(result); // Should return null due to short input in strict mode
    }
}