/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_BEYa0() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidInputs_iRIV0() {
        String original = "password";
        String salt = "salt";
        String expected = UnixCrypt.crypt(original, salt);
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_JQjv0_1() {
        String original = "hello";
        String encrypted = UnixCrypt.crypt(original);
        assertNotNull(encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_JQjv0_2() {
        String original = "hello";
        String encrypted = UnixCrypt.crypt(original);
        assertNotEquals(original, encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_JOol0_1() {
        String result = UnixCrypt.crypt("hello".getBytes(), "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_JOol0_2() {
        String result = UnixCrypt.crypt("hello".getBytes(), "ab");
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltGeneratesSalt_dVDf1_1() {
        String result = UnixCrypt.crypt("hello".getBytes(), null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltGeneratesSalt_dVDf1_2() {
        String result = UnixCrypt.crypt("hello".getBytes(), null);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_RnQE3_1() {
        String result = UnixCrypt.crypt(new byte[0], "ab");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_RnQE3_2() {
        String result = UnixCrypt.crypt(new byte[0], "ab");
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_ifNG4_1() {
        String result = UnixCrypt.crypt("longpasswordthatexceedsblocksize".getBytes(), "xy");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_ifNG4_2() {
        String result = UnixCrypt.crypt("longpasswordthatexceedsblocksize".getBytes(), "xy");
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOutputLength_JPGp5() {
        String result = UnixCrypt.crypt("hello".getBytes(), "cd");
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptConsistency_DgXd6() {
        String result1 = UnixCrypt.crypt("consistent".getBytes(), "mn");
        String result2 = UnixCrypt.crypt("consistent".getBytes(), "mn");
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_IGJW7_1() {
        String result = UnixCrypt.crypt("a".getBytes(), "pq");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_IGJW7_2() {
        String result = UnixCrypt.crypt("a".getBytes(), "pq");
        assertTrue(result.startsWith("pq"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Bflg8_1() {
        String result = UnixCrypt.crypt("".getBytes(), "st");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Bflg8_2() {
        String result = UnixCrypt.crypt("".getBytes(), "st");
        assertTrue(result.startsWith("st"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_dtAe0_1() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_dtAe0_2() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_EQCy1_1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_EQCy1_2() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_IOCK2_1() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_IOCK2_2() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_Jgvc3_1() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_Jgvc3_2() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_TBPO4_1() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_TBPO4_2() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_fMNL5_1() {
        byte[] original = "1234567890".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_fMNL5_2() {
        byte[] original = "1234567890".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithInvalidSalt_UKqZ6() {
        byte[] original = "password".getBytes();
        String salt = "1*"; // Invalid salt as per typical DES-based crypt implementations
        try {
            UnixCrypt.crypt(original, salt);
            fail("Should have thrown IllegalArgumentException for invalid salt");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: 1*", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterSalt_ytsO7() {
        byte[] original = "password".getBytes();
        String salt = "g"; // Normally crypt requires 2 characters for salt
        try {
            UnixCrypt.crypt(original, salt);
            fail("Should have thrown IllegalArgumentException for single character salt");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid salt value: g", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_TtoF8_1() {
        byte[] original = "psswrd".getBytes();
        String salt = "hi";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_TtoF8_2() {
        byte[] original = "psswrd".getBytes();
        String salt = "hi";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("hi"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_kRtL3_1() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_kRtL3_2() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_FhdD4_1() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_FhdD4_2() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_FdCt5_1() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_FdCt5_2() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_SUnq6_1() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_SUnq6_2() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_YwcH7_1() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_YwcH7_2() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_WkKd8_1() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_WkKd8_2() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumOriginalLength_Nkxj4_1() {
        byte[] original = "passwordpassword".getBytes(); // longer than 8 bytes
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumOriginalLength_Nkxj4_2() {
        byte[] original = "passwordpassword".getBytes(); // longer than 8 bytes
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_YlLp5_1() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_YlLp5_2() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValuesInOriginal_HwyL7_1() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValuesInOriginal_HwyL7_2() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharactersInOriginal_kdsT8_1() {
        byte[] original = "".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharactersInOriginal_kdsT8_2() {
        byte[] original = "".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_dmjp0_1() {
        byte[] original = "test".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_dmjp0_2() {
        byte[] original = "test".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertTrue(result.matches("^[./0-9A-Za-z]{2}.*$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Kdcn1_1() {
        byte[] original = "hello".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals('a', result.charAt(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Kdcn1_2() {
        byte[] original = "hello".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals('b', result.charAt(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptOutputLength_cZWV3() {
        byte[] original = "password".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_fLOW4_1() {
        byte[] original = new byte[0];
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_fLOW4_2() {
        byte[] original = new byte[0];
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharOriginal_YDik5_1() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharOriginal_YDik5_2() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_BPTO6_1() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_BPTO6_2() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_ZPOV7_1() {
        byte[] original = "and".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_ZPOV7_2() {
        byte[] original = "and".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_ERRP8_1() {
        byte[] original = "1234".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_ERRP8_2() {
        byte[] original = "1234".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSimpleString_JQjv0() {
        String original = "hello";
        String encrypted = UnixCrypt.crypt(original);
        assertNotNull(encrypted);
        assertNotEquals(original, encrypted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_JOol0() {
        String result = UnixCrypt.crypt("hello".getBytes(), "ab");
        assertNotNull(result);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSaltGeneratesSalt_dVDf1() {
        String result = UnixCrypt.crypt("hello".getBytes(), null);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_RnQE3() {
        String result = UnixCrypt.crypt(new byte[0], "ab");
        assertNotNull(result);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_ifNG4() {
        String result = UnixCrypt.crypt("longpasswordthatexceedsblocksize".getBytes(), "xy");
        assertNotNull(result);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_IGJW7() {
        String result = UnixCrypt.crypt("a".getBytes(), "pq");
        assertNotNull(result);
        assertTrue(result.startsWith("pq"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_Bflg8() {
        String result = UnixCrypt.crypt("".getBytes(), "st");
        assertNotNull(result);
        assertTrue(result.startsWith("st"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_dtAe0() {
        byte[] original = "password".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ab"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_EQCy1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertEquals(13, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_IOCK2() {
        byte[] original = new byte[0];
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_Jgvc3() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_TBPO4() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_fMNL5() {
        byte[] original = "1234567890".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_TtoF8() {
        byte[] original = "psswrd".getBytes();
        String salt = "hi";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("hi"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_kRtL3() {
        byte[] original = "".getBytes();
        String salt = "xy";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("xy"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_FhdD4() {
        byte[] original = "a".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_FdCt5() {
        byte[] original = "aVeryLongPasswordThatExceedsEightChars".getBytes();
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_SUnq6() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_YwcH7() {
        byte[] original = "12345678".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_WkKd8() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumOriginalLength_Nkxj4() {
        byte[] original = "passwordpassword".getBytes(); // longer than 8 bytes
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_YlLp5() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllPossibleByteValuesInOriginal_HwyL7() {
        byte[] original = new byte[256];
        for (int i = 0; i < 256; i++) {
            original[i] = (byte) i;
        }
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharactersInOriginal_kdsT8() {
        byte[] original = "".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_dmjp0() {
        byte[] original = "test".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertTrue(result.matches("^[./0-9A-Za-z]{2}.*$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_Kdcn1() {
        byte[] original = "hello".getBytes();
        String salt = "ab";
        String result = UnixCrypt.crypt(original, salt);
        assertEquals('a', result.charAt(0));
        assertEquals('b', result.charAt(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithEmptyOriginal_fLOW4() {
        byte[] original = new byte[0];
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharOriginal_YDik5() {
        byte[] original = "a".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_BPTO6() {
        byte[] original = "longpasswordthatexceedsblocksize".getBytes();
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_ZPOV7() {
        byte[] original = "and".getBytes();
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumbersInOriginal_ERRP8() {
        byte[] original = "1234".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_HRep1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertTrue(result.length() > 2); // Check if salt was automatically generated
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_ijXv4() {
        byte[] original = "a very long password that exceeds the typical length".getBytes();
        String salt = "mn";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("mn"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_KhYB5() {
        byte[] original = "p@ssw0rd!".getBytes();
        String salt = "st";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("st"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_nbqV6() {
        byte[] original = "12345678".getBytes();
        String salt = "uv";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("uv"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_TuTd7() {
        byte[] original = new byte[8]; // all zeros
        String salt = "wx";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("wx"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_WQJK8() {
        byte[] original = "".getBytes();
        String salt = "yz";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("yz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNullSalt_gcvB1() {
        byte[] original = "password".getBytes();
        String result = UnixCrypt.crypt(original, null);
        assertNotNull(result);
        assertTrue(result.trim().length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_qtSm4() {
        byte[] original = new byte[8];
        for (int i = 0; i < original.length; i++) {
            original[i] = (byte) (i + 65);
        }
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithLongOriginal_QCKJ5() {
        byte[] original = "longpasswordthatexceeds8chars".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_hnKM6() {
        byte[] original = {(byte) 0xE2, (byte) 0x82, (byte) 0xAC}; // Euro symbol in bytes
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_JUOr7() {
        byte[] original = new byte[8]; // all zeros
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_OeLn8() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_bkAv5() {
        byte[] original = "psswrd".getBytes();
        String salt = "no";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("no"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroOriginal_IJda6() {
        byte[] original = new byte[8];
        String salt = "pq";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("pq"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSpecialCharactersInOriginal_MQhc7() {
        byte[] original = "!@#$%^&*()".getBytes();
        String salt = "rs";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("rs"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNumericOriginal_wgJm8() {
        byte[] original = "12345678".getBytes();
        String salt = "st";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("st"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithMaximumLengthOriginal_KZpK4() {
        byte[] original = "passwordpasswordpassword".getBytes(); // longer than 8 bytes
        String salt = "cd";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("cd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithNonAsciiCharacters_xwvs5() {
        byte[] original = "psswrd".getBytes();
        String salt = "ef";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ef"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllZeroBytesOriginal_CrhE6() {
        byte[] original = new byte[8]; // all zeros
        String salt = "gh";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("gh"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithAllOneBitsOriginal_ldVE7() {
        byte[] original = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
        String salt = "ij";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("ij"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSingleCharacterOriginal_uPgi8() {
        byte[] original = "a".getBytes();
        String salt = "kl";
        String result = UnixCrypt.crypt(original, salt);
        assertNotNull(result);
        assertTrue(result.startsWith("kl"));
    }
}