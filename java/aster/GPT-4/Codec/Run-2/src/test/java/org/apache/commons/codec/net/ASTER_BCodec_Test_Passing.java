/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_XFPz0() {
        BCodec codec = new BCodec();
        String encoding = codec.getEncoding();
        assertEquals("B", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingTrue_LKfF0() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.STRICT);
        assertTrue(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingFalse_knOP1() {
        BCodec codec = new BCodec(StandardCharsets.UTF_8, CodecPolicy.LENIENT);
        assertFalse(codec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullInput_CGxl1() {
        BCodec codec = new BCodec();
        byte[] input = null;
        byte[] actual = codec.doEncoding(input);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullInput_kDjq0() {
        BCodec codec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        byte[] result = codec.doDecoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_LyfZ2() {
        BCodec codec = new BCodec();
        try {
            codec.encode(new Object());
            fail("Expected an EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_vbBI0_1() throws EncoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String originalString = "Hello World!";
        String encodedString = codec.encode(originalString, "UTF-8");
        assertNotNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidInput_vbBI0_2() throws EncoderException {
        BCodec codec = new BCodec(Charset.forName("UTF-8"));
        String originalString = "Hello World!";
        String encodedString = codec.encode(originalString, "UTF-8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObject_IKLq2() {
        BCodec codec = new BCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("Expected a DecoderException to be thrown");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.Object cannot be decoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_KQyV0_XxHr0() {
        BCodec codec = new BCodec();
        try {
            assertNull(codec.decode(null));
        } catch (DecoderException e) {
            fail("DecoderException should not be thrown for null input.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_epZq0_HSEC0() {
        BCodec codec = new BCodec();
        Object result = null;
        try {
            result = codec.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringValue_jWPu1_xbEB0() {
        BCodec codec = new BCodec();
        String testString = "Hello World";
        Object result = null;
        try {
            result = codec.encode(testString);
        } catch (EncoderException e) {
            fail("EncoderException should not be thrown");
        }
        assertNotNull(result);
        assertTrue(result instanceof String);
    }
}