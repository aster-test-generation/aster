/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithValidKey_EKRE0_1() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithValidKey_EKRE0_2() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithValidAlgorithm_KDLY0() {
        assertTrue(HmacUtils.isAvailable("HmacSHA256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithValidInput_NJEl0_1() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithValidInput_NJEl0_2() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithByteBuffer_BixS0_1() {
        String key = "secretKey";
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        HmacUtils hmacUtils = new HmacUtils(algorithm, key.getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("TestString".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithByteBuffer_BixS0_2() {
        String key = "secretKey";
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        HmacUtils hmacUtils = new HmacUtils(algorithm, key.getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("TestString".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_xBBC0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expectedOutput = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);
        byte[] actualOutput = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidInput_FGeY0_1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidInput_FGeY0_2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_HMAC_SHA_256_ZYzU0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_XFve0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expectedOutput = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);
        byte[] actualOutput = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384WithValidKey_LCem0_1() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384WithValidKey_LCem0_2() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha384(key);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithValidInput_Gdfn0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey");
        String testString = "Hello, World!";
        byte[] expectedOutput = hmacUtils.hmac(testString);
        assertArrayEquals(expectedOutput, hmacUtils.hmac(testString));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_LwkJ0() {
        String key = "testKey";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "9d301bda572ccce1c2e6eb87872405f9"; // Replace with the expected hex digest
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidData_HrIE0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey".getBytes());
        byte[] testData = "Hello, World!".getBytes();
        String expectedHex = "63ca238a8b32dec511209c7e04c7a522f7b0b1806afbedc430e37cd7ed27db69";
        String resultHex = hmacUtils.hmacHex(testData);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_Vmdf0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expectedOutput = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1WithValidKey_arMu0_1() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1WithValidKey_arMu0_2() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_ValidKeyAndValue_GaME0() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "a64ef3fe3204bd17843d245774f66750bd0648a5aa6a6228ba49aa0e7e7e34d2134790ba6b8e987bbcdc9101db42fc67"; // This should be the expected hex string output from a known correct implementation or source.
        String result = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithValidKey_Fxyg0_1() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithValidKey_Fxyg0_2() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha512(key);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_CJbW0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        String expectedHex = "bf7f163d35a553c29822abbfce6baba4bda0eb80"; // Expected output should be precomputed or mocked
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sWEZ0() {
        String key = "secretKey";
        String valueToDigest = "HelloWorld";
        String expectedHex = "bf7f163d35a553c29822abbfce6baba4bda0eb80"; // Expected HMAC SHA-1 output for the given key and value
        String result = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_HIgR0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "HelloWorld".getBytes();
        String expectedHex = "7d8eed840d7f1d4d90f9c76c1364825d"; // Expected MD5 hex result for the given key and value
        String result = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expectedHex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_ValidInput_ReturnsExpectedHash_Fwvp0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHash = "63ca238a8b32dec511209c7e04c7a522f7b0b1806afbedc430e37cd7ed27db69"; // Expected hash for given inputs
        String resultHash = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedHash, resultHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMacWithValidAlgorithmAndKey_iJTk0() throws NoSuchAlgorithmException, InvalidKeyException {
        byte[] key = "testKey".getBytes();
        Mac expectedMac = Mac.getInstance("HmacSHA256");
        expectedMac.init(new SecretKeySpec(key, "HmacSHA256"));
        Mac resultMac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertArrayEquals(expectedMac.doFinal(), resultMac.doFinal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_ValidKey_ReturnsInitializedMac_wloJ0_1() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_ValidKey_ReturnsInitializedMac_wloJ0_2() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacMd5(key);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_wPDp0() {
        String key = "secretKey";
        String valueToDigest = "HelloWorld";
        String expectedHex = "a3dc0bc29f5a152e524f16350aa92b8fd8c3940990b5a85fcec042562251faad"; // This should be the expected HMAC SHA-256 output in hex for the given key and value.
        String actualHex = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedHex, actualHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_quZM0() {
        String key = "secret";
        String valueToDigest = "Hello, World!";
        String expectedOutput = "851caed63934ad1c9a03aef23ba2b84f224bdff4f5148efc57d95f9ae80ca9db2e98bc4c709a529eb1b7234a1ac2e381d28e0eb1efa090bb19613f5c124b6d5b"; // Expected output needs to be generated or mocked appropriately
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedOutput, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithValidInputs_xdOh0() {
        String key = "secretKey";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = new byte[]{(byte) 0x90, (byte) 0x01, (byte) 0x50, (byte) 0x98, (byte) 0x3c, (byte) 0xd2, (byte) 0x4f, (byte) 0xb0, (byte) 0xd6, (byte) 0x96, (byte) 0x3f, (byte) 0x7d, (byte) 0x28, (byte) 0xe1, (byte) 0x7f, (byte) 0x72};
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_ValidHmacSha256_oCPW0_1() {
        String algorithm = "HmacSHA256";
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_ValidHmacSha256_oCPW0_2() {
        String algorithm = "HmacSHA256";
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertEquals(algorithm, mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_NullKeyThrowsException_Jwqo1() {
        String algorithm = "HmacSHA256";
        byte[] key = null;
        assertThrows(IllegalArgumentException.class, () -> {
            HmacUtils.getInitializedMac(algorithm, key);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidInput_yybQ0() {
        String key = "secretKey";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key.getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        String expectedHex = "63ca238a8b32dec511209c7e04c7a522f7b0b1806afbedc430e37cd7ed27db69"; // Expected hex for the given input and key
        String resultHex = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_JakG0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        String expectedHex = "42ece77c391999d38e4be30dbfb7a2118a9a449f2566732490c1699f6191f0455690e31787476d6dc93958744f7f7862ce2e50b70344b539dd589953b1fd9eff";
        String resultHex = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedHex, resultHex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5WithValidInput_pwmg0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        byte[] expectedOutput = new byte[]{ // Example expected output, assuming HMAC_MD5 of "Hello, World!" with "secretKey"
        (byte) 0x86, (byte) 0x8d, (byte) 0x34, (byte) 0xf6, (byte) 0x2a, (byte) 0xc3, (byte) 0x17, (byte) 0x6d,
        (byte) 0x5d, (byte) 0x16, (byte) 0xc1, (byte) 0x92, (byte) 0x2f, (byte) 0x8b, (byte) 0x0e, (byte) 0xef
        };
        byte[] result = HmacUtils.hmacMd5(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_berU0() {
        String key = "secret";
        String valueToDigest = "Hello, World!";
        byte[] expectedOutput = { // This should be the expected HMAC SHA-256 output for the given key and string
        (byte) 0x7f, (byte) 0x83, (byte) 0xb1, (byte) 0x65, (byte) 0x7f, (byte) 0xf1, (byte) 0xfc, (byte) 0x53,
        (byte) 0xb9, (byte) 0x6d, (byte) 0xc7, (byte) 0x23, (byte) 0x42, (byte) 0xdf, (byte) 0x88, (byte) 0x74,
        (byte) 0x9c, (byte) 0xac, (byte) 0x39, (byte) 0x2a, (byte) 0xab, (byte) 0x62, (byte) 0x2f, (byte) 0x6c,
        (byte) 0x6a, (byte) 0xe8, (byte) 0x5a, (byte) 0x97, (byte) 0xd5, (byte) 0x48, (byte) 0xd3, (byte) 0x1e
        };
        byte[] actualOutput = HmacUtils.hmacSha256(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha256WithValidKey_EKRE0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithValidInput_NJEl0() {
        byte[] key = "secretKey".getBytes();
        byte[] valueToDigest = "Hello, World!".getBytes();
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key);
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
        assertNotEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithByteBuffer_BixS0() {
        String key = "secretKey";
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        HmacUtils hmacUtils = new HmacUtils(algorithm, key.getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("TestString".getBytes());
        byte[] result = hmacUtils.hmac(valueToDigest);
        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithValidInput_FGeY0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "secretKey");
        String result = hmacUtils.hmacHex("Hello, World!");
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha384WithValidKey_LCem0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha1WithValidKey_arMu0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacSha512WithValidKey_Fxyg0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHmacMd5_ValidKey_ReturnsInitializedMac_wloJ0() {
        byte[] key = new byte[]{1, 2, 3, 4, 5}; // Example key
        Mac mac = HmacUtils.getHmacMd5(key);
        assertNotNull(mac);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInitializedMac_ValidHmacSha256_oCPW0() {
        String algorithm = "HmacSHA256";
        byte[] key = "secretKey".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
        assertEquals(algorithm, mac.getAlgorithm());
    }
}