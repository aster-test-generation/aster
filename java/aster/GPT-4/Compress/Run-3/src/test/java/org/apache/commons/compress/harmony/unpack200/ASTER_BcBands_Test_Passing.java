/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BcBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcSuperField_lgbn0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected value based on your logic
    int[] actual = bcBands.getBcSuperField();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcCaseCount_AjMm0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcCaseCount = {/* initialize with expected values */};
    int[] actualBcCaseCount = bcBands.getBcCaseCount();
    assertArrayEquals(expectedBcCaseCount, actualBcCaseCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcSuperMethod_IkEp0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */}; // Replace with actual expected values
    int[] actual = bcBands.getBcSuperMethod();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcFieldRef_TKcS0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected value based on your implementation
    int[] actual = bcBands.getBcFieldRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcInitRef_TggK0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected array values
    int[] actual = bcBands.getBcInitRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethodByteCodePacked_YgRV0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    byte[][][] expected = new byte[1][1][1]; // Replace with actual expected value
    byte[][][] actual = bcBands.getMethodByteCodePacked();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithValidSegment_dxJe0() throws Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    bcBands.unpack();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcLabel_UuXJ0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcLabel = {/* expected values */};
    int[] actualBcLabel = bcBands.getBcLabel();
    assertArrayEquals(expectedBcLabel, actualBcLabel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcMethodRef_IEyh0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */}; // Replace with actual expected values
    int[] actual = bcBands.getBcMethodRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcIMethodRef_lngQ0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */};
    int[] actual = bcBands.getBcIMethodRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcThisMethod_cnLj0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */};
    int[] actual = bcBands.getBcThisMethod();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcIntRef_qBmC0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = new int[] {}; // Replace with the expected array values
    int[] actual = bcBands.getBcIntRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcLongRef_XxUM0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */};
    int[] actual = bcBands.getBcLongRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcShort_xYwf0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcShort = {}; // replace with the expected array values
    int[] actualBcShort = bcBands.getBcShort();
    assertArrayEquals(expectedBcShort, actualBcShort);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcStringRef_svpo0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected array values
    int[] actual = bcBands.getBcStringRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcLocal_vRBA0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcLocal = {}; // Replace with the expected array values
    int[] actualBcLocal = bcBands.getBcLocal();
    assertArrayEquals(expectedBcLocal, actualBcLocal);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcCaseValue_VMep0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcCaseValue = {/* expected values */};
    int[] actualBcCaseValue = bcBands.getBcCaseValue();
    assertArrayEquals(expectedBcCaseValue, actualBcCaseValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_CQkT0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 20, 21, 22, 23, 24, 25});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEmptyInput_qMtV1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSingleByte_jaGn2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleByteCodes_lEhL3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{188, 17, 18, 19, 20});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLoadInstructions_LvwR4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{132, 196, 169});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscapedBytes_mLUB5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{253, 254});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithTableSwitch_xeva6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{170, 171});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBranchInstructions_ihcZ7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{167, 168});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidByteCode_mUQG8() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{255});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMixedByteCodes_gtBE9() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 188, 253, 254, 132});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLongInputStream_faxV10() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 188, 253, 254});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBoundaryValues_kCkF11() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{21, 22, 23, 24, 25});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidSequence_UynX12() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{170, 255, 171});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithAllLoadInstructions_iqlL13() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{21, 22, 23, 24, 25, 132});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscapedAndLoad_OBRB14() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{253, 132, 254});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidMethodFlags_dNeD16() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 255});
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcThisField_BkPX0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {/* expected values */};
    int[] actual = bcBands.getBcThisField();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_tiJn0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 54}); // Example byte array
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEmptyInput_zgZI1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{}); // Empty input
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithOnlyByteCodes_KBsW2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 188, 197}); // Only byte codes
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMixedByteCodes_Prmw3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 54, 239, 132}); // Mixed byte codes
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithStoreCode_WTbb4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{54}); // Store code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLoadCode_hJrk5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{169}); // Load code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscCode_nuus6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{254}); // Esc code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidCode_hyHv7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{300}); // Invalid code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleCases_ehMH8() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{170, 171, 172}); // Multiple cases
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLongRefCode_fCNl9() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{20}); // Long reference code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMethodRefCode_OdDj10() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{182}); // Method reference code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithFieldRefCode_moTs11() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{178}); // Field reference code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithClassRefCode_ubdd12() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{192}); // Class reference code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleLoadStoreCodes_Vlcx13() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{169, 54, 132}); // Multiple load/store codes
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithTableSwitch_NxvH14() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{170}); // Table switch code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBranchCode_tKOs15() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{167}); // Branch code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithWideCode_GwwV16() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{196, 132}); // Wide code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscRefCode_Tnby17() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{253}); // Esc reference code
    bcBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcFloatRef_DWon0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected array based on your logic
    int[] actual = bcBands.getBcFloatRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcByte_OHae0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expectedBcByte = {/* expected values */}; // Replace with actual expected values
    int[] actualBcByte = bcBands.getBcByte();
    assertArrayEquals(expectedBcByte, actualBcByte);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_ROdd0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 188, 234, 235, 239});
    bcBands.read(in);
    assertEquals(expectedBcByteCount, bcBands.getBcByteCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_ROdd0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 188, 234, 235, 239});
    bcBands.read(in);
    assertEquals(expectedBcShortCount, bcBands.getBcShortCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_ROdd0_3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 18, 19, 188, 234, 235, 239});
    bcBands.read(in);
    assertEquals(expectedBcStringRefCount, bcBands.getBcStringRefCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEmptyInput_DkHv1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{});
    bcBands.read(in);
    assertEquals(0, bcBands.getBcByteCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEmptyInput_DkHv1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{});
    bcBands.read(in);
    assertEquals(0, bcBands.getBcShortCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscapedBytes_aDbn2_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{254, 253});
    bcBands.read(in);
    assertEquals(1, bcBands.getBcEscCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscapedBytes_aDbn2_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{254, 253});
    bcBands.read(in);
    assertEquals(1, bcBands.getBcEscRefCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithWideByteCodes_MMcH3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{196, 132});
    bcBands.read(in);
    assertTrue(bcBands.getWideByteCodes().contains(132));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithLabelCount_KGde4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{167, 168, 200});
    bcBands.read(in);
    assertEquals(3, bcBands.getBcLabelCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidByteCode_jnAa5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{255}); // Invalid byte code
    bcBands.read(in);
    assertEquals(0, bcBands.getBcByteCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleMethodFlags_Qwso6_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 188, 239});
    bcBands.read(in);
    assertEquals(expectedBcByteCount, bcBands.getBcByteCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleMethodFlags_Qwso6_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 188, 239});
    bcBands.read(in);
    assertEquals(expectedBcShortCount, bcBands.getBcShortCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithCaseCount_tHjA7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{170, 171});
    bcBands.read(in);
    assertEquals(2, bcBands.getBcCaseCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithClassReferenceCount_OBWp8() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{187, 192, 193});
    bcBands.read(in);
    assertEquals(3, bcBands.getBcClassRefCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMethodReferenceCount_UMZd9() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{182, 183, 184});
    bcBands.read(in);
    assertEquals(3, bcBands.getBcMethodRefCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithThisFieldCount_oNsc10() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{202, 203, 204});
    bcBands.read(in);
    assertEquals(3, bcBands.getBcThisFieldCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSuperMethodCount_Acaz11() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{220, 221, 222});
    bcBands.read(in);
    assertEquals(3, bcBands.getBcSuperMethodCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEscapedByteCount_YoQO12() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{254, 253});
    bcBands.read(in);
    assertEquals(1, bcBands.getBcEscByteCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidWideByteCode_nAkH13() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{196, 255}); // Invalid wide byte code
    bcBands.read(in);
    assertEquals(0, bcBands.getBcLocalCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBoundaryByteCodes_vVAa14() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{153, 166, 198, 199});
    bcBands.read(in);
    assertEquals(4, bcBands.getBcLabelCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMixedByteCodes_ZUWB15_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 188, 239, 196, 132});
    bcBands.read(in);
    assertEquals(expectedBcByteCount, bcBands.getBcByteCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMixedByteCodes_ZUWB15_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{16, 17, 188, 239, 196, 132});
    bcBands.read(in);
    assertEquals(expectedBcShortCount, bcBands.getBcShortCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithAllByteCodes_xmDW16_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
    bcBands.read(in);
    assertEquals(expectedBcByteCount, bcBands.getBcByteCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithAllByteCodes_xmDW16_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
    bcBands.read(in);
    assertEquals(expectedBcShortCount, bcBands.getBcShortCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcDoubleRef_SIbd0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected array values
    int[] actual = bcBands.getBcDoubleRef();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBcClassRef_XUHR0() {
    Segment segment = new Segment();
    BcBands bcBands = new BcBands(segment);
    int[] expected = {}; // Replace with the expected array values
    int[] actual = bcBands.getBcClassRef();
    assertArrayEquals(expected, actual);
}
}