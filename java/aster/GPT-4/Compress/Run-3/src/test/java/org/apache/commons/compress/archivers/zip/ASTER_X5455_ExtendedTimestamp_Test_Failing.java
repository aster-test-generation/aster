/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.Serializable;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.Objects;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Failing {
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_InvalidTime_MXjH1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime invalidFileTime = FileTime.fromMillis(Long.MAX_VALUE);
    timestamp.setAccessFileTime(invalidFileTime);
}
@Test(expected = ZipException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_TooShortData_nAJy3() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 0 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_CzNI0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertEquals(0, modifyTime.getValue()); // Assuming default value is 0, adjust as necessary}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_withValidFileTime_GypR0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipLong expectedZipLong = unixTimeToZipLong(TimeUtils.toUnixTime(fileTime)); // Assuming this is the expected result
    timestamp.setAccessFileTime(fileTime);
    assertEquals(expectedZipLong, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTime_ValidTime_NpvF0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    ZipLong expectedZipLong = new ZipLong(TimeUtils.toUnixTime(fileTime));
    timestamp.setAccessFileTime(fileTime);
    assertEquals(expectedZipLong, timestamp.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlags_SPtN0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte expectedFlags = 0; // Assuming default flags value is 0
    assertEquals(expectedFlags, timestamp.getFlags());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_NullValue_PZhk0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = null;
    timestamp.setCreateTime(zipLong);
    assertFalse(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_NullValue_PZhk0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = null;
    timestamp.setCreateTime(zipLong);
    assertEquals(0, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_NullValue_PZhk0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = null;
    timestamp.setCreateTime(zipLong);
    assertNull(timestamp.createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ValidValue_qJVr1_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setCreateTime(zipLong);
    assertTrue(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ValidValue_qJVr1_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setCreateTime(zipLong);
    assertEquals(CREATE_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ValidValue_qJVr1_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setCreateTime(zipLong);
    assertEquals(zipLong, timestamp.createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ChangeFromNullToValue_LfjD2_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setCreateTime(zipLong);
    assertFalse(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ChangeFromNullToValue_LfjD2_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setCreateTime(zipLong);
    assertEquals(0, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ChangeFromNullToValue_LfjD2_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setCreateTime(zipLong);
    assertTrue(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ChangeFromNullToValue_LfjD2_4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setCreateTime(zipLong);
    assertEquals(CREATE_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateTime_ChangeFromNullToValue_LfjD2_5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setCreateTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setCreateTime(zipLong);
    assertEquals(zipLong, timestamp.createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_NoTimestamps_WqHU0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(1, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_ModifyTimePresent_YQsF1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit0_modifyTimePresent = true; // Assuming there's a way to set this
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_AccessTimePresent_NqNT2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit1_accessTimePresent = true; // Assuming there's a way to set this
    timestamp.accessTime = new Date(); // Assuming accessTime is a Date object
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_CreateTimePresent_mQEr3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit2_createTimePresent = true; // Assuming there's a way to set this
    timestamp.createTime = new Date(); // Assuming createTime is a Date object
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_AllTimestampsPresent_ZpWK4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit0_modifyTimePresent = true;
    timestamp.bit1_accessTimePresent = true;
    timestamp.accessTime = new Date();
    timestamp.bit2_createTimePresent = true;
    timestamp.createTime = new Date();
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(9, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_AccessTimeNull_AOqN5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit1_accessTimePresent = true;
    timestamp.accessTime = null; // Access time is null
    ZipShort result = timestamp.getLocalFileDataLength();
    assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_withModifyTimePresent_kYmT0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit0_modifyTimePresent = true; // Assuming bit0_modifyTimePresent is accessible
    ZipShort result = timestamp.getCentralDirectoryLength();
    assertEquals(5, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_withoutModifyTimePresent_InrW1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit0_modifyTimePresent = false; // Assuming bit0_modifyTimePresent is accessible
    ZipShort result = timestamp.getCentralDirectoryLength();
    assertEquals(1, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithOnlyFlags_WNkU0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 3; // Example flag value
    int expectedHashCode = -123 * (timestamp.flags & 0x07);
    assertEquals(expectedHashCode, timestamp.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithModifyTime_HMMg1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag value
    timestamp.modifyTime = new Date(123456789); // Example modify time
    int expectedHashCode = -123 * (timestamp.flags & 0x07) ^ timestamp.modifyTime.hashCode();
    assertEquals(expectedHashCode, timestamp.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithAccessTime_gGuE2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 2; // Example flag value
    timestamp.accessTime = new Date(987654321); // Example access time
    int expectedHashCode = -123 * (timestamp.flags & 0x07) ^ Integer.rotateLeft(timestamp.accessTime.hashCode(), 11);
    assertEquals(expectedHashCode, timestamp.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithAllFields_ymQe3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 5; // Example flag value
    timestamp.modifyTime = new Date(123456789);
    timestamp.accessTime = new Date(987654321);
    timestamp.createTime = new Date(111111111); // Example create time
    int expectedHashCode = -123 * (timestamp.flags & 0x07) 
                           ^ timestamp.modifyTime.hashCode() 
                           ^ Integer.rotateLeft(timestamp.accessTime.hashCode(), 11) 
                           ^ Integer.rotateLeft(timestamp.createTime.hashCode(), 22);
    assertEquals(expectedHashCode, timestamp.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTime_oPjt0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT);
    assertTrue(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTime_oPjt0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT);
    assertFalse(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithModifyTime_oPjt0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT);
    assertFalse(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTime_FCkU1_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(ACCESS_TIME_BIT);
    assertFalse(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTime_FCkU1_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(ACCESS_TIME_BIT);
    assertTrue(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAccessTime_FCkU1_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(ACCESS_TIME_BIT);
    assertFalse(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTime_heAh2_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(CREATE_TIME_BIT);
    assertFalse(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTime_heAh2_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(CREATE_TIME_BIT);
    assertFalse(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithCreateTime_heAh2_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(CREATE_TIME_BIT);
    assertTrue(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllFlags_KSaR3_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT | ACCESS_TIME_BIT | CREATE_TIME_BIT);
    assertTrue(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllFlags_KSaR3_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT | ACCESS_TIME_BIT | CREATE_TIME_BIT);
    assertTrue(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFlagsWithAllFlags_KSaR3_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setFlags(MODIFY_TIME_BIT | ACCESS_TIME_BIT | CREATE_TIME_BIT);
    assertTrue(timestamp.bit2_createTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateFileTime_ValidUnixTime_azWp0() {
    ZipLong createTime = new ZipLong(1622548800L); // Example Unix time for June 1, 2021
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp(createTime);
    FileTime expectedFileTime = TimeUtils.unixTimeToFileTime(createTime.getIntValue());
    FileTime actualFileTime = timestamp.getCreateFileTime();
    assertEquals(expectedFileTime, actualFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_modifyTimePresent_Cdoy0_1() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertEquals(1, result[0]); // Check if the modify time bit is set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_modifyTimePresent_Cdoy0_2() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 1, 5)); // Check if modify time bytes are correct}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_accessTimePresent_Ftgu1_1() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit1_accessTimePresent = true;
    instance.accessTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertEquals(2, result[0]); // Check if the access time bit is set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_accessTimePresent_Ftgu1_2() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit1_accessTimePresent = true;
    instance.accessTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 5, 9)); // Check if access time bytes are correct}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_createTimePresent_kysG2_1() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit2_createTimePresent = true;
    instance.createTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertEquals(4, result[0]); // Check if the create time bit is set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_createTimePresent_kysG2_2() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit2_createTimePresent = true;
    instance.createTime = new Timestamp(1234567890L); // Assuming Timestamp has a constructor that takes long
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 9, 13)); // Check if create time bytes are correct}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimestampsPresent_phLZ3_1() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.bit1_accessTimePresent = true;
    instance.bit2_createTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L);
    instance.accessTime = new Timestamp(1234567890L);
    instance.createTime = new Timestamp(1234567890L);
    byte[] result = instance.getLocalFileDataData();
    assertEquals(7, result[0]); // Check if all bits are set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimestampsPresent_phLZ3_2() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.bit1_accessTimePresent = true;
    instance.bit2_createTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L);
    instance.accessTime = new Timestamp(1234567890L);
    instance.createTime = new Timestamp(1234567890L);
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 1, 5)); // Check modify time bytes}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimestampsPresent_phLZ3_3() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.bit1_accessTimePresent = true;
    instance.bit2_createTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L);
    instance.accessTime = new Timestamp(1234567890L);
    instance.createTime = new Timestamp(1234567890L);
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 5, 9)); // Check access time bytes}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_allTimestampsPresent_phLZ3_4() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    instance.bit0_modifyTimePresent = true;
    instance.bit1_accessTimePresent = true;
    instance.bit2_createTimePresent = true;
    instance.modifyTime = new Timestamp(1234567890L);
    instance.accessTime = new Timestamp(1234567890L);
    instance.createTime = new Timestamp(1234567890L);
    byte[] result = instance.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0}, Arrays.copyOfRange(result, 9, 13)); // Check create time bytes}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_noTimestampsPresent_cPJo4_1() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    byte[] result = instance.getLocalFileDataData();
    assertEquals(0, result[0]); // Check if no bits are set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_noTimestampsPresent_cPJo4_2() {
    X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
    byte[] result = instance.getLocalFileDataData();
    assertEquals(0, result.length); // Check if the length is zero}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_dBaZ0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.modifyTime = 1633072800; // Set the modifyTime to a specific value
    FileTime expectedFileTime = FileTime.fromMillis(1633072800000L); // Convert to milliseconds for FileTime
    FileTime actualFileTime = timestamp.getModifyFileTime();
    assertEquals(expectedFileTime, actualFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_DQHi0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime expectedFileTime = unixTimeToFileTime(accessTime); // Assuming accessTime is set appropriately
    FileTime actualFileTime = timestamp.getAccessFileTime();
    assertEquals(expectedFileTime, actualFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_foDr0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertTrue(timestamp.equals(timestamp));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_NycA1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    assertFalse(timestamp.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_yTpr2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    String differentClassObject = "Not a timestamp";
    assertFalse(timestamp.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameValues_vzaH3() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    assertTrue(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentFlags_XVSr4() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    timestamp1.flags = 0x01;
    timestamp2.flags = 0x02;
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentModifyTime_LOpv5() {
    X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
    timestamp1.modifyTime = new Date();
    timestamp2.modifyTime = new Date(System.currentTimeMillis() + 1000);
    assertFalse(timestamp1.equals(timestamp2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_withValidDate_XVKx0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date testDate = new Date(1633072800000L); // Represents 2021-10-01 00:00:00 GMT
    ZipLong expectedZipLong = new ZipLong(1633072800L); // Expected ZipLong value
    timestamp.setCreateJavaTime(testDate);
    assertEquals(expectedZipLong, timestamp.getCreateTime()); // Replace with actual method to retrieve the value
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_ANbq0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date testDate = new Date(); // Current date
    long expectedTime = timestamp.dateToZipLong(testDate); // Assuming dateToZipLong is accessible
    timestamp.setModifyJavaTime(testDate);
    long actualTime = timestamp.getModifyTime(); // Assuming getModifyTime is accessible
    assertEquals(expectedTime, actualTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_WhenBit1AccessTimePresentIsTrue_hHNi0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit1_accessTimePresent = true; // Assuming there's a way to set this for testing
    assertTrue(timestamp.isBit1_accessTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_WhenBit1AccessTimePresentIsFalse_VjZo1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit1_accessTimePresent = false; // Assuming there's a way to set this for testing
    assertFalse(timestamp.isBit1_accessTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithModifyTime_jyhc0_1() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithModifyTime_jyhc0_2() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(1, timestamp.modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithAccessTime_nSmx1_1() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithAccessTime_nSmx1_2() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(2, timestamp.accessTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithCreateTime_kanN2_1() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 4, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidDataWithCreateTime_kanN2_2() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 4, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(3, timestamp.createTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_NoModifyTimePresent_Hfdc4() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 0, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNull(timestamp.modifyTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_NoAccessTimePresent_sUpM5() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 1, 0, 0, 0, 0, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNull(timestamp.accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_NoCreateTimePresent_qWnd6() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 1, 0, 0, 0, 1, 0, 0, 0, 0 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNull(timestamp.createTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_1() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_2() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_3() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertNotNull(timestamp.createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_4() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(1, timestamp.modifyTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_5() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(2, timestamp.accessTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_AllTimesPresent_VoMv7_6() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] data = new byte[] { 7, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3 };
    timestamp.parseFromLocalFileData(data, 0, data.length);
    assertEquals(3, timestamp.createTime.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_uLPg0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = extendedTimestamp.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_uLPg0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipShort headerId = extendedTimestamp.getHeaderId();
    assertEquals(HEADER_ID, headerId); // Assuming HEADER_ID is defined and accessible}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateFileTime_qpRx0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setCreateFileTime(fileTime);
    long expectedTime = fileTimeToZipLong(fileTime);
    long actualTime = timestamp.getCreateTime(); // Hypothetical method to retrieve the created time
    assertEquals(expectedTime, actualTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_EJwG0() throws ZipException {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[]{/* initialize with valid data */};
    int offset = 0; // set to a valid offset
    int length = buffer.length; // set to a valid length
    timestamp.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithModifyTimePresent_WGJd0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit0_modifyTimePresent = true;
    timestamp.modifyTime = new Date(); // Current date
    String result = timestamp.toString();
    assertTrue(result.contains("Modify:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAccessTimePresent_NFnk1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit1_accessTimePresent = true;
    timestamp.accessTime = new Date(); // Current date
    String result = timestamp.toString();
    assertTrue(result.contains("Access:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithCreateTimePresent_YXqU2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit2_createTimePresent = true;
    timestamp.createTime = new Date(); // Current date
    String result = timestamp.toString();
    assertTrue(result.contains("Create:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithAllTimesPresent_bgEg3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit0_modifyTimePresent = true;
    timestamp.modifyTime = new Date(); // Current date
    timestamp.bit1_accessTimePresent = true;
    timestamp.accessTime = new Date(); // Current date
    timestamp.bit2_createTimePresent = true;
    timestamp.createTime = new Date(); // Current date
    String result = timestamp.toString();
    assertTrue(result.contains("Modify:") && result.contains("Access:") && result.contains("Create:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoTimesPresent_CQUQ4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    String result = timestamp.toString();
    assertFalse(result.contains("Modify:") || result.contains("Access:") || result.contains("Create:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithOnlyModifyTime_MnVc5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit0_modifyTimePresent = true;
    timestamp.modifyTime = new Date(); // Current date
    timestamp.bit1_accessTimePresent = false;
    timestamp.bit2_createTimePresent = false;
    String result = timestamp.toString();
    assertTrue(result.contains("Modify:") && !result.contains("Access:") && !result.contains("Create:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithOnlyAccessTime_vxiE6() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.flags = 1; // Example flag
    timestamp.bit0_modifyTimePresent = false;
    timestamp.bit1_accessTimePresent = true;
    timestamp.accessTime = new Date(); // Current date
    timestamp.bit2_createTimePresent = false;
    String result = timestamp.toString();
    assertTrue(result.contains("Access:") && !result.contains("Modify:") && !result.contains("Create:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessJavaTime_ValidAccessTime_GNmV0() {
    ZipLong accessTime = new ZipLong(1633036800L); // Example Unix timestamp
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expectedDate = new Date(1633036800L * 1000L);
    assertEquals(expectedDate, timestamp.getAccessJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_YRCs0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertNotNull(createTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateTime_YRCs0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong createTime = extendedTimestamp.getCreateTime();
    assertTrue(createTime.getValue() >= 0); // Assuming createTime should be a non-negative value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_cRCN0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expectedDate = zipLongToDate(createTime); // Assuming createTime is defined and accessible
    Date actualDate = timestamp.getCreateJavaTime();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_KhNf0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = extendedTimestamp.getAccessTime();
    assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_KhNf0_2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong accessTime = extendedTimestamp.getAccessTime();
    assertEquals(0, accessTime.getValue()); // Assuming default value is 0, adjust as necessary}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_VqWl0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date expectedDate = zipLongToDate(modifyTime); // Assuming modifyTime is set appropriately
    Date actualDate = timestamp.getModifyJavaTime();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_miBq0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    timestamp.setModifyFileTime(fileTime);
    long expectedTime = fileTimeToZipLong(fileTime);
    long actualTime = timestamp.getModifyTime(); // Hypothetical method to retrieve the modified time
    assertEquals(expectedTime, actualTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_WhenBit0IsTrue_ShouldReturnTrue_ZNpy0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setBit0_modifyTimePresent(true); // Hypothetical setter for test
    assertTrue(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_WhenBit0IsFalse_ShouldReturnFalse_YzXD1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setBit0_modifyTimePresent(false); // Hypothetical setter for test
    assertFalse(timestamp.isBit0_modifyTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_NullValue_RLvr0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    assertFalse(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_NullValue_RLvr0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    assertEquals(0, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_NullValue_RLvr0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    assertNull(timestamp.modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ValidValue_NzJX1_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setModifyTime(zipLong);
    assertTrue(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ValidValue_NzJX1_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setModifyTime(zipLong);
    assertEquals(MODIFY_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ValidValue_NzJX1_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setModifyTime(zipLong);
    assertEquals(zipLong, timestamp.modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ChangeFromNullToValue_qHiv2_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setModifyTime(zipLong);
    assertFalse(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ChangeFromNullToValue_qHiv2_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setModifyTime(zipLong);
    assertEquals(0, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ChangeFromNullToValue_qHiv2_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setModifyTime(zipLong);
    assertTrue(timestamp.bit0_modifyTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ChangeFromNullToValue_qHiv2_4() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setModifyTime(zipLong);
    assertEquals(MODIFY_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyTime_ChangeFromNullToValue_qHiv2_5() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setModifyTime(null);
    ZipLong zipLong = new ZipLong(987654321L);
    timestamp.setModifyTime(zipLong);
    assertEquals(zipLong, timestamp.modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_WhenBit2IsTrue_ShouldReturnTrue_Cklz0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit2_createTimePresent = true; // Assuming bit2_createTimePresent is accessible
    assertTrue(timestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_WhenBit2IsFalse_ShouldReturnFalse_mUtj1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.bit2_createTimePresent = false; // Assuming bit2_createTimePresent is accessible
    assertFalse(timestamp.isBit2_createTimePresent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NullValue_HjLd0_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessTime(null);
    assertFalse(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NullValue_HjLd0_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessTime(null);
    assertEquals(0, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NullValue_HjLd0_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    timestamp.setAccessTime(null);
    assertNull(timestamp.accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_ValidZipLong_DWRq1_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setAccessTime(zipLong);
    assertTrue(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_ValidZipLong_DWRq1_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setAccessTime(zipLong);
    assertEquals(ACCESS_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_ValidZipLong_DWRq1_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(123456789L);
    timestamp.setAccessTime(zipLong);
    assertEquals(zipLong, timestamp.accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_AnotherValidZipLong_iWEY2_1() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1});
    timestamp.setAccessTime(zipLong);
    assertTrue(timestamp.bit1_accessTimePresent);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_AnotherValidZipLong_iWEY2_2() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1});
    timestamp.setAccessTime(zipLong);
    assertEquals(ACCESS_TIME_BIT, timestamp.flags);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_AnotherValidZipLong_iWEY2_3() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1});
    timestamp.setAccessTime(zipLong);
    assertEquals(zipLong, timestamp.accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ZxAy0_1() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ZxAy0_2() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
    assertNotSame(original, cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_ZxAy0_3() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
    assertEquals(original.getClass(), cloned.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessJavaTime_YWiF0() {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    Date testDate = new Date(); // Current date
    timestamp.setAccessJavaTime(testDate);
    long expectedAccessTime = dateToZipLong(testDate); // This method should match the conversion logic
    assertEquals(expectedAccessTime, timestamp.getAccessTime());
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_CzNI0_1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_CzNI0_1_fid1() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_CzNI0_1_fid2() {
    X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong modifyTime = extendedTimestamp.getModifyTime();
    assertNotNull(modifyTime);
}