/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition;
import org.apache.commons.compress.harmony.pack200.IcBands.IcTuple;
import org.objectweb.asm.Label;
import org.objectweb.asm.Opcodes;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ClassBands_Test_Failing {
private int index;
private CPClass[] class_this;
private Map<CPClass, Set<CPClass>> classReferencesInnerClass = new HashMap<>();
ClassBands classbands;
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_InvalidAttribute_dkgK1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("invalidType", "layout", 0);
    classBands.addFieldAttribute(attribute);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_InvalidAttribute_TRdi1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("InvalidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_InvalidAttribute_mvDP1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("invalidType", "layout", 0);
    classBands.addMethodAttribute(attribute);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_InvalidAttribute_hqri1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("invalidType", "layout", 0);
    classBands.addClassAttribute(attribute);
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenNoSyntheticClasses_ReturnsFalse_NJjU0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    assertFalse(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenSyntheticClassesExist_ReturnsTrue_qWRm1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true); // Assuming this creates synthetic classes
    assertTrue(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_ValidAttribute_gZbb0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addFieldAttribute(attribute);
    assertTrue(classBands.getFieldAttributes().contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(10, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(3, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(15, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(2, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationDefault_qwfi0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    List<String> nameRU = Arrays.asList("Annotation1", "Annotation2");
    List<String> tags = Arrays.asList("Tag1", "Tag2");
    List<Object> values = Arrays.asList("Value1", "Value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("NestType1", "NestType2");
    List<String> nestNameRU = Arrays.asList("NestName1", "NestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    classBands.addAnnotationDefault(nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(true); // Replace with actual assertions based on the expected behavior
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_xGfF0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassFields_sylq1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_xQwy3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldAttributeBands_gQMO4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 3, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodAttributeBands_AEEh5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 3, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAttributeBands_aaSo6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 4, 4, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_dsTh7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 6, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassArrays_siFR1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClass_XdWt2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    classBands.class_method_count = new int[]{1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_DAJS3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    classBands.class_this = new int[]{1, 2};
    classBands.class_super = new int[]{0, 1};
    classBands.class_interface_count = new int[]{1, 1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}, {new CPClass(2)}};
    classBands.class_field_count = new int[]{1, 1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    classBands.class_method_count = new int[]{1, 1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithEmptyArray_CRbq4() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{});
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithPositiveNumbers_iDep5() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{1, 2, 3, 4});
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithNegativeAndPositiveNumbers_Ylsl6() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{-1, 2, -3, 4});
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullFieldDescr_cInx7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{0};
    classBands.class_interface = new CPClass[0][];
    classBands.class_field_count = new int[]{0};
    classBands.field_descr = null;
    classBands.class_method_count = new int[]{0};
    classBands.method_descr = null;
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_NstQ3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithDifferentEffort_EfUN5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 10, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_Rukk6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullOutputStream_AMPY7() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    assertThrows(NullPointerException.class, () -> {
        classBands.pack(null);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_eGjP3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAndMethodCounts_CuZf7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClassField_WBTz2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_MfZL3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[]{2};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1), new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_vBqF4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_jBcF5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeHeaders = new int[]{1};
    classBands.codeMaxStack = new ArrayList<>(Arrays.asList(1));
    classBands.codeMaxLocals = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCount = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerStartP = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerEndPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCatchPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerClass = new ArrayList<>(Arrays.asList(1));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_tIPi6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{0};
    classBands.class_method_count = new int[]{0};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithLargeData_myKq7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[1000];
    Arrays.fill(classBands.class_field_count, 1);
    classBands.field_descr = new CPNameAndType[1000][];
    for (int i = 0; i < 1000; i++) {
        classBands.field_descr[i] = new CPNameAndType[]{new CPNameAndType(i + 1)};
    }
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleField_sEer2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setFieldDescr(new CPNameAndType[] { new CPNameAndType(1, "field1") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_UcPI3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setMethodDescr(new CPNameAndType[] { new CPNameAndType(1, "method1"), new CPNameAndType(2, "method2") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_CgxY4() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeHeaders(new int[] { 1, 2, 3 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeAttributeBands_KxSd5() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeLineNumberTableN(new ArrayList<>(Arrays.asList(1, 2, 3)));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_MGSi6() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setClassInterfaceCount(new int[] { 1 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_kVMk7() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertTrue((classBands.codeFlags.get(0) & 1) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertTrue((classBands.codeFlags.get(0) & 3) != 0); // 3 = 11 in binary}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(1, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTypeTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTypeTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(signature, classBands.cpBands.getCPSignature(signature));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(0, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(desc, classBands.cpBands.getCPSignature(desc));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(2, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start1, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end1, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name1, classBands.cpBands.getCPUtf8(name1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature1, classBands.cpBands.getCPSignature(signature1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx1, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start2, classBands.codeLocalVariableTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end2, classBands.codeLocalVariableTableSpanO.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name2, classBands.cpBands.getCPUtf8(name2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature2, classBands.cpBands.getCPSignature(signature2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx2, classBands.codeLocalVariableTableSlot.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPNameAndType(name, desc), classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertNull(classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_ValidAttribute_Ncxn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    assertTrue(classBands.methodAttributeBands.get(0).contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_UpdateFlags_APME2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    Long updatedFlags = classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1);
    assertTrue((updatedFlags & (1 << classBands.methodAttributeBands.get(0).getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_ValidAttribute_dgxx0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addClassAttribute(attribute);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[1].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 19) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithDeprecatedFlag_papX3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(Opcodes.ACC_DEPRECATED, "testMethod", "()V", null, null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSyntheticAttributes_YOHq4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    segment.getCurrentClassReader().setHasSyntheticAttributes(true); // Assuming a method to set this
    classBands.addMethod(1 << 12, "testMethod", "()V", null, null);
    assertTrue(classBands.anySyntheticMethods);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullName_dzse6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, null, "()V", null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullDesc_vJSA7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", null, null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(Long.valueOf(4), classBands.codeFlags.get(0)); // 1 << 2 = 4}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeLocalVariableTableN.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeFlags.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeLocalVariableTableN.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_1() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.containsKey(class_this[index]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_2() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.get(class_this[index]).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withSameClass_vCto1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass sameClass = new CPClass(new CPUTF8("SameClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(sameClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNonInnerClass_UkZC3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(outerClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(nestedInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case1_BZJe0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertNotNull(classBands.class_flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case2_aAnR1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case3_rQEY2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMajor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case4_Behc3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.codeHeaders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case5_ZHAw4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case6_ObaL5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_N);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case7_IyhI6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new CPClass[0], classBands.class_InnerClasses_RC);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case8_DTFv7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_F);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case9_nUwm8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesOuterRCN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case10_JBwX9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesNameRUN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case11_cJsa10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case12_Kkzp11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.field_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case13_DpRW12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.method_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case14_GGTb13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.code_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case15_hDtq14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case16_efPa15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMinor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case17_CzeT16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.codeHeaders.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case18_PmpC17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeHandlerCount.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case19_eLep18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxLocals.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case20_rMQM19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxStack.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case22_LSOZ21() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case23_Byry22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.methodAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case24_AVGN23() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.fieldAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case25_UhNH24() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithSameClass_VEbz1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass sameClass = new CPClass(new CPUTF8("SomeClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithNonInnerClass_MxVW3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(innerClass).contains(innerInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithEmptyBciRenumbering_tjAh0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertTrue(classBands.codeLineNumberTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithSingleLabel_dPDk1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(1), classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithNonExistentLabel_QquI3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label(); // This label will not be in the map
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithClearBciRenumbering_DdRC4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0); // Empty list
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNoArguments_fuWX0() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("()"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSinglePrimitiveArgument_Pvxw1() {
    assertEquals(1, ClassBands.countArgs("(I)")); // Integer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultiplePrimitiveArguments_NrGh2() {
    assertEquals(3, ClassBands.countArgs("(IJD)")); // Integer, Double, Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSingleObjectArgument_zxgG3() {
    assertEquals(1, ClassBands.countArgs("(Lcom/example/MyClass;)")); // Object
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleObjectArguments_CrQC4() {
    assertEquals(2, ClassBands.countArgs("(Lcom/example/MyClass;Lcom/example/AnotherClass;)")); // Two Objects
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithArrayArgument_WicM5() {
    assertEquals(1, ClassBands.countArgs("([I)")); // Array of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMixedArguments_NtKy6() {
    assertEquals(4, ClassBands.countArgs("(ILjava/lang/String;[D[Lcom/example/MyClass;)")); // Mixed types
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNestedArrayArgument_qoML7() {
    assertEquals(1, ClassBands.countArgs("([[I)")); // Array of Arrays of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithEmptyDescriptor_iVqq8() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("")); // Empty descriptor
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidDescriptor_JiLr9() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("(I")); // Missing closing parenthesis
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidOrder_iuqi10() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs(")I(")); // Invalid order
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithLongAndDouble_qeQm11() {
    assertEquals(4, ClassBands.countArgs("(DJ)")); // Double and Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleArrays_hvHo12() {
    assertEquals(3, ClassBands.countArgs("([[I[Ljava/lang/String;[D)")); // Multiple arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithComplexDescriptor_OnlQ13() {
    assertEquals(5, ClassBands.countArgs("(ILjava/lang/String;[D[[I)")); // Mixed types with arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumClassesProcessed_mojD0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    int expectedNumClasses = 5; // Assuming index is set to numClasses in the constructor
    assertEquals(expectedNumClasses, classBands.numClassesProcessed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithValidInputs_ONsi0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        bciRenumbering.add(2);
        labelsToOffsets.put(new Label(), 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLabels_Xinf1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertTrue(bciRenumbering.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_uAma2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 2);
        labelsToOffsets.put(label2, 3);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, 1, label1, label2));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNegativeOffsets_vcfF3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, -1);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, label));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoRenumberingNeeded_OmDX4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLists_yCtz0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 0, 0, false);
        IntList bciRenumbering = new IntList();
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(2, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(15, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(25, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(3, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(150, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithDeprecatedFlag_zDAN2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_DEPRECATED, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullValue_IVGI4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", null);
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_PUBLIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_STATIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_this[index], cpBands.getCPClass(className));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_super[index], cpBands.getCPClass(superName));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.major_versions[index], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_flags[index], 1 << 19);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithSyntheticFlag_swNy1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "SyntheticClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 1 << 12, className, null, superName, interfaces);
    assertTrue(classBands.anySyntheticClasses);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithNullSignature_ONps2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_flags[index], 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface[index].length, interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(type, classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertNull(classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenNoSyntheticMethods_ReturnsFalse_zKnP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenSyntheticMethodsExist_ReturnsTrue_PMKY1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RVPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RIPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsEmpty_MkAu2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>();
    classBands.codeLocalVariableTableN = new ArrayList<>();
    classBands.endOfMethod();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_MatchingSource_NSWp0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_NonMatchingSource_rEzD1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertFalse(classBands.classSourceFile.contains("DifferentSource.java"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_ImplicitSourceFileName_mFSq2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Implicit$Class.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(classBands.cpBands.getCPUtf8(source)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(1, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(100, classBands.codeLineNumberTableLine.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(start, classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(2, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(101, classBands.codeLineNumberTableLine.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(start2, classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag17_pRXP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSourceFile.add("sourceFile");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSourceFile.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodClass.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag19_GDZO2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSignature.add("signature");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag21_XSev3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag22_KuQS4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag17_KDqf5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17); // Set field flag 17
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag19_VcCp6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 19); // Set field flag 19
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag21_RqDe7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 21); // Set field flag 21
    classBands.field_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag22_ICdH8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 22); // Set field flag 22
    classBands.field_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxLocals.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxStack.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag18_UCJD10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 18); // Set method flag 18
    classBands.methodExceptionNumber.add(1);
    classBands.methodExceptionClasses.add("exceptionClass");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodExceptionClasses.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag19_LlVT11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 19); // Set method flag 19
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag21_BEZh12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 21); // Set method flag 21
    classBands.method_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag22_PJCc13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 22); // Set method flag 22
    classBands.method_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag23_EiDG14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 23); // Set method flag 23
    classBands.method_RVPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag24_lONI15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 24); // Set method flag 24
    classBands.method_RIPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag25_fAqM16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 25); // Set method flag 25
    classBands.method_AD_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_AD_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithIndexDecrement_qQbP17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.index = 1; // Set index to 1
    classBands.removeCurrentClass();
    assertEquals(0, classBands.index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugFalse_Tjlh18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags.add(1L << 3); // Set codeFlags
    classBands.codeLocalVariableTableN.add(1); // Set local variable count
    classBands.codeLocalVariableTableBciP.add(1);
    classBands.codeLocalVariableTableSpanO.add(1);
    classBands.codeLocalVariableTableNameRU.add("name");
    classBands.codeLocalVariableTableTypeRS.add("type");
    classBands.codeLocalVariableTableSlot.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeLocalVariableTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugTrue_OoIz19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    classBands.removeCurrentClass();
    assertNull(classBands.class_this[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithEmptyTempFlags_nfao20() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.clear(); // Ensure tempFieldFlags is empty
    classBands.tempMethodFlags.clear(); // Ensure tempMethodFlags is empty
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_interface_count[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleMethodFlags_VgVe22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17);
    classBands.tempMethodFlags.add(1 << 19);
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassVisible_jpBn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassNotVisible_tTtm1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldVisible_gYom2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldNotVisible_PbcP3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodVisible_RUWe4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodNotVisible_GqQl5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNullValues_cLbc7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, null, true, null, null, null, null, null, null, null);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenSyntheticFieldsPresent_ReturnsTrue_OqGZ0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenNoSyntheticFields_ReturnsFalse_TCXL1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("fieldName", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("methodName", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field1", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field2", classBands.field_descr[0][1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method1", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method2", classBands.method_descr[0][1].getName());}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenNoSyntheticClasses_ReturnsFalse_NJjU0_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    assertFalse(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenSyntheticClassesExist_ReturnsTrue_qWRm1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true); // Assuming this creates synthetic classes
    assertTrue(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_ValidAttribute_gZbb0_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addFieldAttribute(attribute);
    assertTrue(classBands.getFieldAttributes().contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_2_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(10, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_2_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_3_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(3, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(15, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_2_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_3_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(2, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationDefault_qwfi0_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    List<String> nameRU = Arrays.asList("Annotation1", "Annotation2");
    List<String> tags = Arrays.asList("Tag1", "Tag2");
    List<Object> values = Arrays.asList("Value1", "Value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("NestType1", "NestType2");
    List<String> nestNameRU = Arrays.asList("NestName1", "NestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    classBands.addAnnotationDefault(nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(true); // Replace with actual assertions based on the expected behavior
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_xGfF0_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassFields_sylq1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_xQwy3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldAttributeBands_gQMO4_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 3, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodAttributeBands_AEEh5_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 3, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAttributeBands_aaSo6_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 4, 4, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_dsTh7_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 6, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassArrays_siFR1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClass_XdWt2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    classBands.class_method_count = new int[]{1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_DAJS3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    classBands.class_this = new int[]{1, 2};
    classBands.class_super = new int[]{0, 1};
    classBands.class_interface_count = new int[]{1, 1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}, {new CPClass(2)}};
    classBands.class_field_count = new int[]{1, 1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    classBands.class_method_count = new int[]{1, 1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithEmptyArray_CRbq4_fid1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{});
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithPositiveNumbers_iDep5_fid1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{1, 2, 3, 4});
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithNegativeAndPositiveNumbers_Ylsl6_fid1() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{-1, 2, -3, 4});
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullFieldDescr_cInx7_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{0};
    classBands.class_interface = new CPClass[0][];
    classBands.class_field_count = new int[]{0};
    classBands.field_descr = null;
    classBands.class_method_count = new int[]{0};
    classBands.method_descr = null;
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_NstQ3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithDifferentEffort_EfUN5_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 10, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_Rukk6_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullOutputStream_AMPY7_fid1() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    assertThrows(NullPointerException.class, () -> {
        classBands.pack(null);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_1_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_eGjP3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAndMethodCounts_CuZf7_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClassField_WBTz2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_MfZL3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[]{2};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1), new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_vBqF4_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_jBcF5_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeHeaders = new int[]{1};
    classBands.codeMaxStack = new ArrayList<>(Arrays.asList(1));
    classBands.codeMaxLocals = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCount = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerStartP = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerEndPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCatchPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerClass = new ArrayList<>(Arrays.asList(1));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_tIPi6_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{0};
    classBands.class_method_count = new int[]{0};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithLargeData_myKq7_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[1000];
    Arrays.fill(classBands.class_field_count, 1);
    classBands.field_descr = new CPNameAndType[1000][];
    for (int i = 0; i < 1000; i++) {
        classBands.field_descr[i] = new CPNameAndType[]{new CPNameAndType(i + 1)};
    }
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleField_sEer2_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setFieldDescr(new CPNameAndType[] { new CPNameAndType(1, "field1") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_UcPI3_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setMethodDescr(new CPNameAndType[] { new CPNameAndType(1, "method1"), new CPNameAndType(2, "method2") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_CgxY4_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeHeaders(new int[] { 1, 2, 3 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeAttributeBands_KxSd5_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeLineNumberTableN(new ArrayList<>(Arrays.asList(1, 2, 3)));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_MGSi6_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setClassInterfaceCount(new int[] { 1 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_kVMk7_fid1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_2_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertTrue((classBands.codeFlags.get(0) & 1) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_1_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_2_fid1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertTrue((classBands.codeFlags.get(0) & 3) != 0); // 3 = 11 in binary}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(1, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTypeTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTypeTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(signature, classBands.cpBands.getCPSignature(signature));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(0, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(desc, classBands.cpBands.getCPSignature(desc));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(2, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start1, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end1, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name1, classBands.cpBands.getCPUtf8(name1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature1, classBands.cpBands.getCPSignature(signature1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx1, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start2, classBands.codeLocalVariableTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end2, classBands.codeLocalVariableTableSpanO.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name2, classBands.cpBands.getCPUtf8(name2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature2, classBands.cpBands.getCPSignature(signature2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx2, classBands.codeLocalVariableTableSlot.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPNameAndType(name, desc), classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertNull(classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_ValidAttribute_Ncxn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    assertTrue(classBands.methodAttributeBands.get(0).contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_UpdateFlags_APME2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    Long updatedFlags = classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1);
    assertTrue((updatedFlags & (1 << classBands.methodAttributeBands.get(0).getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_ValidAttribute_dgxx0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addClassAttribute(attribute);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[1].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 19) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithDeprecatedFlag_papX3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(Opcodes.ACC_DEPRECATED, "testMethod", "()V", null, null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSyntheticAttributes_YOHq4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    segment.getCurrentClassReader().setHasSyntheticAttributes(true); // Assuming a method to set this
    classBands.addMethod(1 << 12, "testMethod", "()V", null, null);
    assertTrue(classBands.anySyntheticMethods);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullName_dzse6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, null, "()V", null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullDesc_vJSA7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", null, null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(Long.valueOf(4), classBands.codeFlags.get(0)); // 1 << 2 = 4}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeLocalVariableTableN.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeFlags.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeLocalVariableTableN.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_1() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.containsKey(class_this[index]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_2() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.get(class_this[index]).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withSameClass_vCto1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass sameClass = new CPClass(new CPUTF8("SameClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(sameClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNonInnerClass_UkZC3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(outerClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(nestedInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case1_BZJe0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertNotNull(classBands.class_flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case2_aAnR1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case3_rQEY2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMajor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case4_Behc3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.codeHeaders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case5_ZHAw4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case6_ObaL5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_N);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case7_IyhI6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new CPClass[0], classBands.class_InnerClasses_RC);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case8_DTFv7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_F);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case9_nUwm8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesOuterRCN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case10_JBwX9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesNameRUN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case11_cJsa10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case12_Kkzp11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.field_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case13_DpRW12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.method_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case14_GGTb13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.code_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case15_hDtq14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case16_efPa15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMinor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case17_CzeT16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.codeHeaders.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case18_PmpC17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeHandlerCount.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case19_eLep18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxLocals.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case20_rMQM19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxStack.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case22_LSOZ21() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case23_Byry22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.methodAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case24_AVGN23() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.fieldAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case25_UhNH24() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithSameClass_VEbz1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass sameClass = new CPClass(new CPUTF8("SomeClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithNonInnerClass_MxVW3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(innerClass).contains(innerInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithEmptyBciRenumbering_tjAh0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertTrue(classBands.codeLineNumberTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithSingleLabel_dPDk1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(1), classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithNonExistentLabel_QquI3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label(); // This label will not be in the map
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithClearBciRenumbering_DdRC4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0); // Empty list
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNoArguments_fuWX0() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("()"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSinglePrimitiveArgument_Pvxw1() {
    assertEquals(1, ClassBands.countArgs("(I)")); // Integer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultiplePrimitiveArguments_NrGh2() {
    assertEquals(3, ClassBands.countArgs("(IJD)")); // Integer, Double, Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSingleObjectArgument_zxgG3() {
    assertEquals(1, ClassBands.countArgs("(Lcom/example/MyClass;)")); // Object
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleObjectArguments_CrQC4() {
    assertEquals(2, ClassBands.countArgs("(Lcom/example/MyClass;Lcom/example/AnotherClass;)")); // Two Objects
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithArrayArgument_WicM5() {
    assertEquals(1, ClassBands.countArgs("([I)")); // Array of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMixedArguments_NtKy6() {
    assertEquals(4, ClassBands.countArgs("(ILjava/lang/String;[D[Lcom/example/MyClass;)")); // Mixed types
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNestedArrayArgument_qoML7() {
    assertEquals(1, ClassBands.countArgs("([[I)")); // Array of Arrays of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithEmptyDescriptor_iVqq8() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("")); // Empty descriptor
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidDescriptor_JiLr9() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("(I")); // Missing closing parenthesis
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidOrder_iuqi10() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs(")I(")); // Invalid order
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithLongAndDouble_qeQm11() {
    assertEquals(4, ClassBands.countArgs("(DJ)")); // Double and Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleArrays_hvHo12() {
    assertEquals(3, ClassBands.countArgs("([[I[Ljava/lang/String;[D)")); // Multiple arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithComplexDescriptor_OnlQ13() {
    assertEquals(5, ClassBands.countArgs("(ILjava/lang/String;[D[[I)")); // Mixed types with arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumClassesProcessed_mojD0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    int expectedNumClasses = 5; // Assuming index is set to numClasses in the constructor
    assertEquals(expectedNumClasses, classBands.numClassesProcessed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithValidInputs_ONsi0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        bciRenumbering.add(2);
        labelsToOffsets.put(new Label(), 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLabels_Xinf1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertTrue(bciRenumbering.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_uAma2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 2);
        labelsToOffsets.put(label2, 3);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, 1, label1, label2));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNegativeOffsets_vcfF3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, -1);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, label));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoRenumberingNeeded_OmDX4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLists_yCtz0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 0, 0, false);
        IntList bciRenumbering = new IntList();
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(2, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(15, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(25, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(3, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(150, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithDeprecatedFlag_zDAN2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_DEPRECATED, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullValue_IVGI4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", null);
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_PUBLIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_STATIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_this[index], cpBands.getCPClass(className));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_super[index], cpBands.getCPClass(superName));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.major_versions[index], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_flags[index], 1 << 19);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithSyntheticFlag_swNy1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "SyntheticClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 1 << 12, className, null, superName, interfaces);
    assertTrue(classBands.anySyntheticClasses);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithNullSignature_ONps2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_flags[index], 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface[index].length, interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(type, classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertNull(classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenNoSyntheticMethods_ReturnsFalse_zKnP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenSyntheticMethodsExist_ReturnsTrue_PMKY1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RVPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RIPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsEmpty_MkAu2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>();
    classBands.codeLocalVariableTableN = new ArrayList<>();
    classBands.endOfMethod();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_MatchingSource_NSWp0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_NonMatchingSource_rEzD1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertFalse(classBands.classSourceFile.contains("DifferentSource.java"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_ImplicitSourceFileName_mFSq2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Implicit$Class.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(classBands.cpBands.getCPUtf8(source)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(1, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(100, classBands.codeLineNumberTableLine.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(start, classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(2, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(101, classBands.codeLineNumberTableLine.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(start2, classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag17_pRXP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSourceFile.add("sourceFile");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSourceFile.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodClass.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag19_GDZO2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSignature.add("signature");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag21_XSev3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag22_KuQS4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag17_KDqf5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17); // Set field flag 17
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag19_VcCp6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 19); // Set field flag 19
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag21_RqDe7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 21); // Set field flag 21
    classBands.field_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag22_ICdH8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 22); // Set field flag 22
    classBands.field_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxLocals.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxStack.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag18_UCJD10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 18); // Set method flag 18
    classBands.methodExceptionNumber.add(1);
    classBands.methodExceptionClasses.add("exceptionClass");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodExceptionClasses.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag19_LlVT11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 19); // Set method flag 19
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag21_BEZh12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 21); // Set method flag 21
    classBands.method_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag22_PJCc13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 22); // Set method flag 22
    classBands.method_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag23_EiDG14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 23); // Set method flag 23
    classBands.method_RVPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag24_lONI15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 24); // Set method flag 24
    classBands.method_RIPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag25_fAqM16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 25); // Set method flag 25
    classBands.method_AD_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_AD_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithIndexDecrement_qQbP17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.index = 1; // Set index to 1
    classBands.removeCurrentClass();
    assertEquals(0, classBands.index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugFalse_Tjlh18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags.add(1L << 3); // Set codeFlags
    classBands.codeLocalVariableTableN.add(1); // Set local variable count
    classBands.codeLocalVariableTableBciP.add(1);
    classBands.codeLocalVariableTableSpanO.add(1);
    classBands.codeLocalVariableTableNameRU.add("name");
    classBands.codeLocalVariableTableTypeRS.add("type");
    classBands.codeLocalVariableTableSlot.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeLocalVariableTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugTrue_OoIz19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    classBands.removeCurrentClass();
    assertNull(classBands.class_this[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithEmptyTempFlags_nfao20() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.clear(); // Ensure tempFieldFlags is empty
    classBands.tempMethodFlags.clear(); // Ensure tempMethodFlags is empty
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_interface_count[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleMethodFlags_VgVe22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17);
    classBands.tempMethodFlags.add(1 << 19);
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassVisible_jpBn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassNotVisible_tTtm1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldVisible_gYom2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldNotVisible_PbcP3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodVisible_RUWe4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodNotVisible_GqQl5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNullValues_cLbc7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, null, true, null, null, null, null, null, null, null);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenSyntheticFieldsPresent_ReturnsTrue_OqGZ0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenNoSyntheticFields_ReturnsFalse_TCXL1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("fieldName", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("methodName", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field1", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field2", classBands.field_descr[0][1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method1", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method2", classBands.method_descr[0][1].getName());}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenNoSyntheticClasses_ReturnsFalse_NJjU0_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    assertFalse(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticClasses_WhenSyntheticClassesExist_ReturnsTrue_qWRm1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true); // Assuming this creates synthetic classes
    assertTrue(classBands.isAnySyntheticClasses());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_ValidAttribute_gZbb0_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addFieldAttribute(attribute);
    assertTrue(classBands.getFieldAttributes().contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldAttribute_MultipleAttributes_zihh2_2_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addFieldAttribute(attribute1);
    classBands.addFieldAttribute(attribute2);
    assertTrue(classBands.getFieldAttributes().contains(attribute2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(10, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_2_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithDebugFlag_psqN0_3_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, true);
    classBands.addMaxStack(10, 3);
    assertEquals(3, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(15, classBands.codeMaxStack.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_2_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(1, classBands.tempMethodFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMaxStackWithoutDebugFlag_GgPB1_3_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    classBands.addMaxStack(15, 4);
    assertEquals(2, classBands.codeMaxLocals.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationDefault_qwfi0_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    List<String> nameRU = Arrays.asList("Annotation1", "Annotation2");
    List<String> tags = Arrays.asList("Tag1", "Tag2");
    List<Object> values = Arrays.asList("Value1", "Value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("NestType1", "NestType2");
    List<String> nestNameRU = Arrays.asList("NestName1", "NestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    classBands.addAnnotationDefault(nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(true); // Replace with actual assertions based on the expected behavior
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_xGfF0_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassFields_sylq1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_xQwy3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldAttributeBands_gQMO4_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 3, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodAttributeBands_AEEh5_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 3, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAttributeBands_aaSo6_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 4, 4, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_dsTh7_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 6, 5, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassArrays_siFR1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClass_XdWt2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    classBands.class_method_count = new int[]{1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_DAJS3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    classBands.class_this = new int[]{1, 2};
    classBands.class_super = new int[]{0, 1};
    classBands.class_interface_count = new int[]{1, 1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}, {new CPClass(2)}};
    classBands.class_field_count = new int[]{1, 1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    classBands.class_method_count = new int[]{1, 1};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1)}, {new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithEmptyArray_CRbq4_fid2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{});
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithPositiveNumbers_iDep5_fid2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{1, 2, 3, 4});
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSumWithNegativeAndPositiveNumbers_Ylsl6_fid2() {
    ClassBands classBands = new ClassBands(new Segment(), 1, 1, false);
    int result = classBands.sum(new int[]{-1, 2, -3, 4});
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullFieldDescr_cInx7_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new int[]{1};
    classBands.class_super = new int[]{0};
    classBands.class_interface_count = new int[]{0};
    classBands.class_interface = new CPClass[0][];
    classBands.class_field_count = new int[]{0};
    classBands.field_descr = null;
    classBands.class_method_count = new int[]{0};
    classBands.method_descr = null;
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_NstQ3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithDifferentEffort_EfUN5_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 10, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_Rukk6_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullOutputStream_AMPY7_fid2() {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    assertThrows(NullPointerException.class, () -> {
        classBands.pack(null);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_zfxa0_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyClassThis_xdPH1_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 0, 0, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNullCPClass_bVjm2_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { null };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleClasses_mSWo3_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1), new CPClass(2) };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_QJOg4_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldCount_bRII5_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodCount_ICaw6_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(1) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_1_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllData_aXvZ7_2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_this = new CPClass[] { new CPClass(1) };
    classBands.class_super = new CPClass[] { new CPClass(2) };
    classBands.class_interface_count = new int[] { 1 };
    classBands.class_interface = new CPClass[][] { { new CPClass(3) } };
    classBands.class_field_count = new int[] { 1 };
    classBands.field_descr = new CPNameAndType[][] { { new CPNameAndType(4) } };
    classBands.class_method_count = new int[] { 1 };
    classBands.method_descr = new CPNameAndType[][] { { new CPNameAndType(5) } };
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFields_eGjP3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 5, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassAndMethodCounts_CuZf7_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 2, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleClassField_WBTz2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{1};
    classBands.field_descr = new CPNameAndType[][]{{new CPNameAndType(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_MfZL3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_method_count = new int[]{2};
    classBands.method_descr = new CPNameAndType[][]{{new CPNameAndType(1), new CPNameAndType(2)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_vBqF4_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_interface_count = new int[]{1};
    classBands.class_interface = new CPClass[][]{{new CPClass(1)}};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_jBcF5_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeHeaders = new int[]{1};
    classBands.codeMaxStack = new ArrayList<>(Arrays.asList(1));
    classBands.codeMaxLocals = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCount = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerStartP = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerEndPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerCatchPO = new ArrayList<>(Arrays.asList(1));
    classBands.codeHandlerClass = new ArrayList<>(Arrays.asList(1));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_tIPi6_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[]{0};
    classBands.class_method_count = new int[]{0};
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithLargeData_myKq7_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_field_count = new int[1000];
    Arrays.fill(classBands.class_field_count, 1);
    classBands.field_descr = new CPNameAndType[1000][];
    for (int i = 0; i < 1000; i++) {
        classBands.field_descr[i] = new CPNameAndType[]{new CPNameAndType(i + 1)};
    }
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleField_sEer2_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setFieldDescr(new CPNameAndType[] { new CPNameAndType(1, "field1") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleMethods_UcPI3_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setMethodDescr(new CPNameAndType[] { new CPNameAndType(1, "method1"), new CPNameAndType(2, "method2") });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeBands_CgxY4_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeHeaders(new int[] { 1, 2, 3 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithCodeAttributeBands_KxSd5_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setCodeLineNumberTableN(new ArrayList<>(Arrays.asList(1, 2, 3)));
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInterfaceCount_MGSi6_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.setClassInterfaceCount(new int[] { 1 });
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertTrue(out.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributes_kVMk7_fid2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    classBands.pack(out);
    assertEquals(0, out.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_ValidAttribute_xrgE0_2_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("ValidAttributeType", "layout", 0);
    classBands.addCodeAttribute(attribute);
    assertTrue((classBands.codeFlags.get(0) & 1) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_1_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeAttribute_MultipleAttributes_Iyqk2_2_fid2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute1 = new NewAttribute("AttributeType1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("AttributeType1", "layout2", 0);
    classBands.addCodeAttribute(attribute1);
    classBands.addCodeAttribute(attribute2);
    assertTrue((classBands.codeFlags.get(0) & 3) != 0); // 3 = 11 in binary}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(1, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTypeTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTypeTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(signature, classBands.cpBands.getCPSignature(signature));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithSignature_oCfE0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = "Ljava/lang/String;";
    int indx = 0;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(0, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(start, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(end, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(name, classBands.cpBands.getCPUtf8(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(desc, classBands.cpBands.getCPSignature(desc));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithoutSignature_TUMW1_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start = new Label();
    Label end = new Label();
    String name = "testVar";
    String desc = "I";
    String signature = null;
    int indx = 1;
    classBands.addLocalVariable(name, desc, signature, start, end, indx);
    assertEquals(indx, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(2, classBands.codeLocalVariableTypeTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start1, classBands.codeLocalVariableTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end1, classBands.codeLocalVariableTableSpanO.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name1, classBands.cpBands.getCPUtf8(name1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature1, classBands.cpBands.getCPSignature(signature1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx1, classBands.codeLocalVariableTableSlot.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(start2, classBands.codeLocalVariableTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(end2, classBands.codeLocalVariableTableSpanO.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(name2, classBands.cpBands.getCPUtf8(name2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(signature2, classBands.cpBands.getCPSignature(signature2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLocalVariableWithMultipleCalls_nQHN2_11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    Label start1 = new Label();
    Label end1 = new Label();
    Label start2 = new Label();
    Label end2 = new Label();
    String name1 = "var1";
    String desc1 = "I";
    String signature1 = "Ljava/lang/String;";
    int indx1 = 0;
    classBands.addLocalVariable(name1, desc1, signature1, start1, end1, indx1);
    String name2 = "var2";
    String desc2 = "I";
    String signature2 = "Ljava/lang/Integer;";
    int indx2 = 1;
    classBands.addLocalVariable(name2, desc2, signature2, start2, end2, indx2);
    assertEquals(indx2, classBands.codeLocalVariableTableSlot.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithValidParameters_fzEv0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPNameAndType(name, desc), classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertTrue(classBands.class_flags[index] & (1 << 18) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertEquals(cpBands.getCPClass(owner), classBands.classEnclosingMethodClass.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddEnclosingMethodWithNullName_dmdn1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String owner = "OwnerClass";
    String name = null;
    String desc = "(I)V";
    classBands.addEnclosingMethod(owner, name, desc);
    assertNull(classBands.classEnclosingMethodDesc.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_ValidAttribute_Ncxn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    assertTrue(classBands.methodAttributeBands.get(0).contains(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodAttribute_UpdateFlags_APME2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addMethodAttribute(attribute);
    Long updatedFlags = classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1);
    assertTrue((updatedFlags & (1 << classBands.methodAttributeBands.get(0).getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_ValidAttribute_dgxx0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    NewAttribute attribute = new NewAttribute("validType", "layout", 0);
    classBands.addClassAttribute(attribute);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[0].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassAttribute_MultipleAttributes_ilJg2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 1, false);
    NewAttribute attribute1 = new NewAttribute("type1", "layout1", 0);
    NewAttribute attribute2 = new NewAttribute("type2", "layout2", 0);
    classBands.addClassAttribute(attribute1);
    classBands.addClassAttribute(attribute2);
    assertTrue((classBands.class_flags[0] & (1 << classBands.classAttributeBands[1].getFlagIndex())) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNoSignatureAndNoExceptions_CsGR0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", null, null);
    assertEquals(0, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertEquals(1, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSignature_InVp1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", "()V", "LTest;", null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 19) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.tempMethodDesc.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(0, classBands.methodSignature.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithExceptions_QFkH2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(1, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithDeprecatedFlag_papX3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(Opcodes.ACC_DEPRECATED, "testMethod", "()V", null, null);
    assertTrue(classBands.tempMethodFlags.get(0).longValue() & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithSyntheticAttributes_YOHq4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    segment.getCurrentClassReader().setHasSyntheticAttributes(true); // Assuming a method to set this
    classBands.addMethod(1 << 12, "testMethod", "()V", null, null);
    assertTrue(classBands.anySyntheticMethods);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionNumber.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithMultipleExceptions_lFLJ5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String[] exceptions = {"java/lang/Exception", "java/lang/Throwable"};
    classBands.addMethod(0, "testMethod", "()V", null, exceptions);
    assertEquals(2, classBands.methodExceptionClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullName_dzse6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, null, "()V", null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMethodWithNullDesc_vJSA7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addMethod(0, "testMethod", null, null, null);
    assertEquals(0, classBands.tempMethodDesc.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(Long.valueOf(4), classBands.codeFlags.get(0)); // 1 << 2 = 4}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithoutStripDebug_LVPj0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    classBands.addCode();
    assertEquals(1, classBands.codeLocalVariableTableN.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertEquals(1, classBands.codeHandlerCount.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeFlags.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCodeWithStripDebug_Ceju1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    classBands.addCode();
    assertTrue(classBands.codeLocalVariableTableN.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_1() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.containsKey(class_this[index]));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcurrentClassReferencesInnerClass_2() throws Exception {
        Segment segment = new Segment();
        index = 0;
        class_this = new CPClass[] {
            Mockito.mock(CPClass.class),
            Mockito.mock(CPClass.class)
        };
        classbands = new ClassBands(segment, class_this.length, 0, false);
        ReflectionTestUtils.setField(classbands, "index", index);
        ReflectionTestUtils.setField(classbands, "class_this", class_this);
        ReflectionTestUtils.setField(classbands, "classReferencesInnerClass", classReferencesInnerClass);
        CPClass innerClass = Mockito.mock(CPClass.class);
        Mockito.when(class_this[index].equals(innerClass)).thenReturn(false);
        Mockito.when(class_this[index].isInnerClass()).thenReturn(false);
        Mockito.when(class_this[index].toString()).thenReturn("OuterClass");
        classbands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classReferencesInnerClass.get(class_this[index]).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationVisible_tcad0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationNotVisible_HwTQ1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsVisible_Arbc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 23), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertNotNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationMultipleCallsNotVisible_oyGC3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 2, 5, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addParameterAnnotation(0, "description1", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addParameterAnnotation(1, "description2", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(Long.valueOf(1 << 24), classBands.tempMethodFlags.get(classBands.tempMethodFlags.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withDifferentClasses_sNHu0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withSameClass_vCto1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass sameClass = new CPClass(new CPUTF8("SameClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(sameClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNonInnerClass_UkZC3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(outerClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_withNestedInnerClass_XSVE4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass nestedInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$NestedInnerClass"));
        classBands.currentClassReferencesInnerClass(nestedInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(nestedInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case1_BZJe0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertNotNull(classBands.class_flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case2_aAnR1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case3_rQEY2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMajor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case4_Behc3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.codeHeaders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case5_ZHAw4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case6_ObaL5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_N);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case7_IyhI6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new CPClass[0], classBands.class_InnerClasses_RC);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case8_DTFv7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_InnerClasses_F);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case9_nUwm8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesOuterRCN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case10_JBwX9() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classInnerClassesNameRUN.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case11_cJsa10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.class_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case12_Kkzp11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.field_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case13_DpRW12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.method_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case14_GGTb13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertArrayEquals(new int[0], classBands.code_attr_calls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case15_hDtq14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.class_flags[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case16_efPa15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classFileVersionMinor.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case17_CzeT16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertEquals(0, classBands.codeHeaders.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case18_PmpC17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeHandlerCount.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case19_eLep18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxLocals.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case20_rMQM19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeMaxStack.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case22_LSOZ21() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.classAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case23_Byry22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.methodAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case24_AVGN23() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.fieldAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_case25_UhNH24() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.finaliseBands();
    assertTrue(classBands.codeAttributeBands.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(outerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithDifferentClasses_kbnv0_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        classBands.currentClassReferencesInnerClass(innerClass);
        assertTrue(classBands.classReferencesInnerClass.get(outerClass).contains(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithSameClass_VEbz1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass sameClass = new CPClass(new CPUTF8("SomeClass"));
        classBands.currentClassReferencesInnerClass(sameClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithNonInnerClass_MxVW3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass currentClass = new CPClass(new CPUTF8("SomeClass"));
        CPClass unrelatedClass = new CPClass(new CPUTF8("UnrelatedClass"));
        classBands.currentClassReferencesInnerClass(unrelatedClass);
        assertFalse(classBands.classReferencesInnerClass.containsKey(currentClass));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.containsKey(innerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCurrentClassReferencesInnerClass_WithInnerClassHierarchy_qgpc4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 10, 1, false);
        CPClass outerClass = new CPClass(new CPUTF8("OuterClass"));
        CPClass innerClass = new CPClass(new CPUTF8("OuterClass$InnerClass"));
        CPClass innerInnerClass = new CPClass(new CPUTF8("OuterClass$InnerClass$InnerInnerClass"));
        classBands.currentClassReferencesInnerClass(innerInnerClass);
        assertTrue(classBands.classReferencesInnerClass.get(innerClass).contains(innerInnerClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithEmptyBciRenumbering_tjAh0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertTrue(classBands.codeLineNumberTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithSingleLabel_dPDk1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(0), classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithMultipleLabels_qcdc2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label1 = new Label();
    Label label2 = new Label();
    labelsToOffsets.put(label1, 0);
    labelsToOffsets.put(label2, 1);
    classBands.codeLineNumberTableBciP.add(label1);
    classBands.codeLineNumberTableBciP.add(label2);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(Integer.valueOf(1), classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithNonExistentLabel_QquI3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label(); // This label will not be in the map
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoBciRenumberingWithClearBciRenumbering_DdRC4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    IntList bciRenumbering = new IntList(0); // Empty list
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    Label label = new Label();
    labelsToOffsets.put(label, 0);
    classBands.codeLineNumberTableBciP.add(label);
    classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
    assertEquals(label, classBands.codeLineNumberTableBciP.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNoArguments_fuWX0() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("()"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSinglePrimitiveArgument_Pvxw1() {
    assertEquals(1, ClassBands.countArgs("(I)")); // Integer
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultiplePrimitiveArguments_NrGh2() {
    assertEquals(3, ClassBands.countArgs("(IJD)")); // Integer, Double, Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithSingleObjectArgument_zxgG3() {
    assertEquals(1, ClassBands.countArgs("(Lcom/example/MyClass;)")); // Object
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleObjectArguments_CrQC4() {
    assertEquals(2, ClassBands.countArgs("(Lcom/example/MyClass;Lcom/example/AnotherClass;)")); // Two Objects
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithArrayArgument_WicM5() {
    assertEquals(1, ClassBands.countArgs("([I)")); // Array of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMixedArguments_NtKy6() {
    assertEquals(4, ClassBands.countArgs("(ILjava/lang/String;[D[Lcom/example/MyClass;)")); // Mixed types
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithNestedArrayArgument_qoML7() {
    assertEquals(1, ClassBands.countArgs("([[I)")); // Array of Arrays of Integers
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithEmptyDescriptor_iVqq8() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("")); // Empty descriptor
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidDescriptor_JiLr9() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs("(I")); // Missing closing parenthesis
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithInvalidOrder_iuqi10() {
    assertThrows(IllegalArgumentException.class, () -> ClassBands.countArgs(")I(")); // Invalid order
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithLongAndDouble_qeQm11() {
    assertEquals(4, ClassBands.countArgs("(DJ)")); // Double and Long
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithMultipleArrays_hvHo12() {
    assertEquals(3, ClassBands.countArgs("([[I[Ljava/lang/String;[D)")); // Multiple arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgsWithComplexDescriptor_OnlQ13() {
    assertEquals(5, ClassBands.countArgs("(ILjava/lang/String;[D[[I)")); // Mixed types with arrays
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumClassesProcessed_mojD0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    int expectedNumClasses = 5; // Assuming index is set to numClasses in the constructor
    assertEquals(expectedNumClasses, classBands.numClassesProcessed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithValidInputs_ONsi0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        bciRenumbering.add(2);
        labelsToOffsets.put(new Label(), 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLabels_Xinf1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertTrue(bciRenumbering.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_uAma2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 2);
        labelsToOffsets.put(label2, 3);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, 1, label1, label2));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNegativeOffsets_vcfF3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, -1);
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        List<Integer> codeLocalVariableTableP = new ArrayList<>(Arrays.asList(0, label));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.get(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoRenumberingNeeded_OmDX4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 5, 10, false);
        IntList bciRenumbering = new IntList(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithEmptyLists_yCtz0() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 0, 0, false);
        IntList bciRenumbering = new IntList();
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(0, bciRenumbering.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithSingleLabel_SlPq1_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(10);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label = new Label();
        labelsToOffsets.put(label, 5);
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(label));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(2, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(15, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithMultipleLabels_kyoc2_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 2, 2, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(20);
        bciRenumbering.add(30);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 15);
        labelsToOffsets.put(label2, 25);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(25, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithNoLabels_SXRb3_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 1, 1, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(5);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        List<Integer> codeLineNumberTableBciP = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerStartP = new ArrayList<>(Collections.singletonList(0));
        List<Object> codeHandlerCatchPO = new ArrayList<>(Collections.singletonList(0));
        List<Integer> codeHandlerEndPO = new ArrayList<>(Collections.singletonList(0));
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(5, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_1() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(3, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_2() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_3() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(150, (int) bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoBciRenumberingWithComplexRenumbering_UNOe4_4() throws IOException {
        Segment segment = new Segment();
        ClassBands classBands = new ClassBands(segment, 3, 3, false);
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(100);
        bciRenumbering.add(200);
        bciRenumbering.add(300);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        Label label1 = new Label();
        Label label2 = new Label();
        labelsToOffsets.put(label1, 50);
        labelsToOffsets.put(label2, 150);
        List<Integer> codeLineNumberTableBciP = Arrays.asList(0, 1, 2);
        List<Integer> codeHandlerStartP = Arrays.asList(0, 1, 2);
        List<Object> codeHandlerCatchPO = Arrays.asList(label1, label2, label1);
        List<Integer> codeHandlerEndPO = Arrays.asList(0, 1, 2);
        classBands.doBciRenumbering(bciRenumbering, labelsToOffsets);
        assertEquals(50, (int) bciRenumbering.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertFalse(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithValidParameters_qrBP0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertFalse(classBands.tempFieldDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullSignature_mKwa1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", null, "fieldValue");
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithDeprecatedFlag_zDAN2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_DEPRECATED, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & (1 << 20) != 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithNullValue_IVGI4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(0, "fieldName", "fieldDesc", "fieldSignature", null);
    assertEquals(1 << 17, (long) classBands.tempFieldFlags.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_PUBLIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddFieldWithMultipleFlags_CWzh5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "fieldName", "fieldDesc", "fieldSignature", "fieldValue");
    assertTrue(classBands.tempFieldFlags.get(0) & Opcodes.ACC_STATIC != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_this[index], cpBands.getCPClass(className));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_super[index], cpBands.getCPClass(superName));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.major_versions[index], 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithValidParameters_kVMo0_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String signature = "LMyClass;";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, signature, superName, interfaces);
    assertEquals(classBands.class_flags[index], 1 << 19);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithSyntheticFlag_swNy1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "SyntheticClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 1 << 12, className, null, superName, interfaces);
    assertTrue(classBands.anySyntheticClasses);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithNullSignature_ONps2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_flags[index], 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithEmptyInterfaces_kRNB3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertNotNull(classBands.class_interface[index]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface_count[index], interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddClassWithMultipleInterfaces_WKzL4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 10, 5, false);
    String className = "MyClass";
    String superName = "java/lang/Object";
    String[] interfaces = new String[]{"java/io/Serializable", "java/lang/Runnable"};
    classBands.addClass(1, 0, className, null, superName, interfaces);
    assertEquals(classBands.class_interface[index].length, interfaces.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithValidParameters_tUXC0_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = "SomeType";
    classBands.addHandler(start, end, handler, type);
    assertEquals(type, classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(1, classBands.codeHandlerCount.get(classBands.codeHandlerCount.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(start, classBands.codeHandlerStartP.get(classBands.codeHandlerStartP.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(end, classBands.codeHandlerEndPO.get(classBands.codeHandlerEndPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertEquals(handler, classBands.codeHandlerCatchPO.get(classBands.codeHandlerCatchPO.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddHandlerWithNullType_yxCK1_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label();
    Label end = new Label();
    Label handler = new Label();
    String type = null;
    classBands.addHandler(start, end, handler, type);
    assertNull(classBands.codeHandlerClass.get(classBands.codeHandlerClass.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenNoSyntheticMethods_ReturnsFalse_zKnP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticMethods_WhenSyntheticMethodsExist_ReturnsTrue_PMKY1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RVPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRVPANotNull_PWJp0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRVPA = new TempMethodRVPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RVPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRVPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertEquals(1, classBands.method_RIPA_bands.getParameterCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithTempMethodRIPANotNull_JIaB1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodRIPA = new TempMethodRIPA(1, "anno", "pair", "type", "name", new String[]{"tag"}, new String[]{"value"}, new String[]{"case"}, "nestType", "nestName", "nestPair");
    classBands.method_RIPA_bands = new MethodBands();
    classBands.endOfMethod();
    assertNull(classBands.tempMethodRIPA);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsEmpty_MkAu2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>();
    classBands.codeLocalVariableTableN = new ArrayList<>();
    classBands.endOfMethod();
    assertTrue(classBands.codeFlags.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsAndLocalVariableTable_ySde3_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L)); // 1 << 2
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0));
    classBands.endOfMethod();
    assertEquals(0, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithCodeFlagsNotMatching_UOAM4_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(2L)); // Not matching
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeFlags.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfMethodWithMultipleCodeFlags_NaqC5_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags = new ArrayList<>(Arrays.asList(4L, 2L)); // 1 << 2 and another flag
    classBands.codeLocalVariableTableN = new ArrayList<>(Arrays.asList(0, 1));
    classBands.endOfMethod();
    assertEquals(1, classBands.codeLocalVariableTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_MatchingSource_NSWp0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_NonMatchingSource_rEzD1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Test.java";
    classBands.addSourceFile(source);
    assertFalse(classBands.classSourceFile.contains("DifferentSource.java"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddSourceFile_ImplicitSourceFileName_mFSq2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    String source = "Implicit$Class.java";
    classBands.addSourceFile(source);
    assertTrue(classBands.classSourceFile.contains(classBands.cpBands.getCPUtf8(source)));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(1, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(100, classBands.codeLineNumberTableLine.get(0).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsZero_KqHu0_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start = new Label(0); // Assuming Label has a constructor that takes an int
    classBands.addLineNumber(100, start);
    assertEquals(start, classBands.codeLineNumberTableBciP.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(2, classBands.codeLineNumberTableN.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(101, classBands.codeLineNumberTableLine.get(1).intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddLineNumberWhenCodeFlagIsOne_phWl1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    Label start1 = new Label(0);
    Label start2 = new Label(1);
    classBands.addLineNumber(100, start1);
    classBands.addLineNumber(101, start2);
    assertEquals(start2, classBands.codeLineNumberTableBciP.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag17_pRXP0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSourceFile.add("sourceFile");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSourceFile.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodClass.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag18_Cswg1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classEnclosingMethodClass.add("methodClass");
    classBands.classEnclosingMethodDesc.add("methodDesc");
    classBands.removeCurrentClass();
    assertTrue(classBands.classEnclosingMethodDesc.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag19_GDZO2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.classSignature.add("signature");
    classBands.removeCurrentClass();
    assertTrue(classBands.classSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag21_XSev3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithClassFlag22_KuQS4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.class_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag17_KDqf5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17); // Set field flag 17
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag19_VcCp6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 19); // Set field flag 19
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag21_RqDe7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 21); // Set field flag 21
    classBands.field_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithFieldFlag22_ICdH8() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 22); // Set field flag 22
    classBands.field_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.field_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxLocals.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag17_wWEX9_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17); // Set method flag 17
    classBands.codeMaxLocals.add(1);
    classBands.codeMaxStack.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeMaxStack.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag18_UCJD10() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 18); // Set method flag 18
    classBands.methodExceptionNumber.add(1);
    classBands.methodExceptionClasses.add("exceptionClass");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodExceptionClasses.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag19_LlVT11() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 19); // Set method flag 19
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag21_BEZh12() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 21); // Set method flag 21
    classBands.method_RVA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag22_PJCc13() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 22); // Set method flag 22
    classBands.method_RIA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag23_EiDG14() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 23); // Set method flag 23
    classBands.method_RVPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RVPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag24_lONI15() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 24); // Set method flag 24
    classBands.method_RIPA_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_RIPA_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMethodFlag25_fAqM16() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 25); // Set method flag 25
    classBands.method_AD_bands.add(new Object()); // Assuming removeLatest() removes the last element
    classBands.removeCurrentClass();
    assertEquals(0, classBands.method_AD_bands.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithIndexDecrement_qQbP17() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.index = 1; // Set index to 1
    classBands.removeCurrentClass();
    assertEquals(0, classBands.index);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugFalse_Tjlh18() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.codeFlags.add(1L << 3); // Set codeFlags
    classBands.codeLocalVariableTableN.add(1); // Set local variable count
    classBands.codeLocalVariableTableBciP.add(1);
    classBands.codeLocalVariableTableSpanO.add(1);
    classBands.codeLocalVariableTableNameRU.add("name");
    classBands.codeLocalVariableTableTypeRS.add("type");
    classBands.codeLocalVariableTableSlot.add(1);
    classBands.removeCurrentClass();
    assertTrue(classBands.codeLocalVariableTableBciP.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithStripDebugTrue_OoIz19() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, true);
    classBands.removeCurrentClass();
    assertNull(classBands.class_this[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithEmptyTempFlags_nfao20() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.clear(); // Ensure tempFieldFlags is empty
    classBands.tempMethodFlags.clear(); // Ensure tempMethodFlags is empty
    classBands.removeCurrentClass();
    assertEquals(0, classBands.class_interface_count[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldConstantValueKQ.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleFieldFlags_zpPG21_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldFlags.add(1 << 17);
    classBands.tempFieldFlags.add(1 << 19);
    classBands.fieldConstantValueKQ.add("constantValue");
    classBands.fieldSignature.add("fieldSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.fieldSignature.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveCurrentClassWithMultipleMethodFlags_VgVe22() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempMethodFlags.add(1 << 17);
    classBands.tempMethodFlags.add(1 << 19);
    classBands.methodSignature.add("methodSignature");
    classBands.removeCurrentClass();
    assertTrue(classBands.methodSignature.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassVisible_jpBn0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationClassNotVisible_tTtm1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldVisible_gYom2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationFieldNotVisible_PbcP3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodVisible_RUWe4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationMethodNotVisible_GqQl5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", false, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRiaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNullValues_cLbc7() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, null, true, null, null, null, null, null, null, null);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getClassRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getFieldRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentContexts_vPOi8_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_CLASS, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_FIELD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    classBands.addAnnotation(MetadataBandGroup.CONTEXT_METHOD, "desc", true, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(expectedValue, classBands.getMethodRvaBands().getAnnotationCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenSyntheticFieldsPresent_ReturnsTrue_OqGZ0() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, true);
    assertTrue(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnySyntheticFields_WhenNoSyntheticFields_ReturnsFalse_TCXL1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 5, 10, false);
    assertFalse(classBands.isAnySyntheticFields());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithEmptyFieldsAndMethods_qLqm0_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.endOfClass();
    assertEquals(0, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals(1, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("fieldName", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithSingleFieldAndMethod_ZTdx1_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("fieldName", "fieldType"));
    classBands.tempFieldFlags.add(1);
    classBands.tempMethodDesc.add(new CPNameAndType("methodName", "methodType"));
    classBands.tempMethodFlags.add(1);
    classBands.endOfClass();
    assertEquals("methodName", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_1() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_field_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_2() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals(2, classBands.class_method_count[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_3() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field1", classBands.field_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_4() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("field2", classBands.field_descr[0][1].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_5() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method1", classBands.method_descr[0][0].getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEndOfClassWithMultipleFieldsAndMethods_RLqO2_6() throws IOException {
    Segment segment = new Segment();
    ClassBands classBands = new ClassBands(segment, 1, 1, false);
    classBands.tempFieldDesc.add(new CPNameAndType("field1", "type1"));
    classBands.tempFieldDesc.add(new CPNameAndType("field2", "type2"));
    classBands.tempFieldFlags.add(1);
    classBands.tempFieldFlags.add(2);
    classBands.tempMethodDesc.add(new CPNameAndType("method1", "returnType1"));
    classBands.tempMethodDesc.add(new CPNameAndType("method2", "returnType2"));
    classBands.tempMethodFlags.add(1);
    classBands.tempMethodFlags.add(2);
    classBands.endOfClass();
    assertEquals("method2", classBands.method_descr[0][1].getName());}
}
}