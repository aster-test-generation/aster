/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringReader;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition;
import org.apache.commons.compress.utils.ParsingUtils;
import org.objectweb.asm.Label;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NewAttributeBands_Test_Passing {
private AttributeDefinition def;
private CPUTF8 name;
private CpBands cpBands;
private SegmentHeader header;
private NewAttributeBands newattributebands;
private NewAttributeBands newAttributeBands;
private NewAttribute mockNewAttribute;
private AttributeLayoutElement mockAttributeLayoutElement;
private List<AttributeLayoutElement> attributeLayoutElements;
IntList bciRenumbering;
Map<Label, Integer> labelsToOffsets;
OutputStream outputStream;
AttributeDefinition attributeDefinition;
private SegmentHeader segmentHeader;
private int[] backwardsCallCounts;
    private boolean usedAtLeastOnce;
    private boolean usedAtLeastOnce;
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithInvalidOutputStream_Zzol1() throws IOException, Pack200Exception {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    OutputStream outputStream = new OutputStream() {
    };
    newAttributeBands.pack(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeName() throws Exception {
        name = Mockito.mock(CPUTF8.class);
        Mockito.when(name.getUnderlyingString()).thenReturn("TestAttributeName");
        def = new AttributeDefinition(0, 0, name, null);
        cpBands = Mockito.mock(CpBands.class);
        header = new SegmentHeader();
        newattributebands = new NewAttributeBands(1, cpBands, header, def);
        String attributeName = newattributebands.getAttributeName();
        Assertions.assertEquals("TestAttributeName", attributeName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAttribute() throws Exception {
        Segment mockSegment = Mockito.mock(Segment.class);
        SegmentHeader mockSegmentHeader = Mockito.mock(SegmentHeader.class);
        AttributeDefinition mockAttributeDefinition = Mockito.mock(AttributeDefinition.class);
        CpBands mockCpBands = Mockito.mock(CpBands.class);
        newAttributeBands = new NewAttributeBands(1, mockCpBands, mockSegmentHeader, mockAttributeDefinition);
        mockNewAttribute = Mockito.mock(NewAttribute.class);
        mockAttributeLayoutElement = Mockito.mock(AttributeLayoutElement.class);
        attributeLayoutElements = new ArrayList<>();
        attributeLayoutElements.add(mockAttributeLayoutElement);
        // Assuming there's a way to set the attributeLayoutElements in NewAttributeBands
        // This part may need to be adjusted based on the actual implementation
        ReflectionTestUtils.setField(newAttributeBands, "attributeLayoutElements", attributeLayoutElements);
        byte[] mockBytes = new byte[]{1, 2, 3};
        Mockito.when(mockNewAttribute.getBytes()).thenReturn(mockBytes);
        newAttributeBands.addAttribute(mockNewAttribute);
        assertTrue(usedAtLeastOnce);
        Mockito.verify(mockAttributeLayoutElement).addAttributeToBand(mockNewAttribute, new ByteArrayInputStream(mockBytes));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeName_vHHs0() throws IOException {
    CPUTF8 name = new CPUTF8("testAttribute");
    CPUTF8 layout = new CPUTF8("testLayout");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    String result = newAttributeBands.getAttributeName();
    assertEquals("testAttribute", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testrenumberBci() throws Exception {
        Segment segment = new Segment();
        SegmentHeader header = new SegmentHeader();
        AttributeDefinition def = new AttributeDefinition(0, 0, new CPUTF8("name"), new CPUTF8("layout"));
        CpBands cpBands = new CpBands(segment, 0);
        newAttributeBands = new NewAttributeBands(0, cpBands, header, def);
        bciRenumbering = new IntList();
        labelsToOffsets = new HashMap<>();
        attributeLayoutElements = new ArrayList<>();
        // Mocking the attributeLayoutElements
        for (int i = 0; i < 5; i++) {
            AttributeLayoutElement element = Mockito.mock(AttributeLayoutElement.class);
            attributeLayoutElements.add(element);
        }
        // Assuming NewAttributeBands has a way to set or inject attributeLayoutElements
        ReflectionTestUtils.setField(newAttributeBands, "attributeLayoutElements", attributeLayoutElements);
        // Arrange
        IntList bciRenumbering = new IntList();
        bciRenumbering.add(1);
        bciRenumbering.add(2);
        Map<Label, Integer> labelsToOffsets = new HashMap<>();
        labelsToOffsets.put(Mockito.mock(Label.class), 10);
        // Act
        newAttributeBands.renumberBci(bciRenumbering, labelsToOffsets);
        // Assert
        for (AttributeLayoutElement element : attributeLayoutElements) {
            Mockito.verify(element).renumberBci(bciRenumbering, labelsToOffsets);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAttributeWithValidAttribute_oWcy0() throws IOException {
    CPUTF8 name = new CPUTF8("testAttribute");
    CPUTF8 layout = new CPUTF8("testLayout");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    SegmentHeader header = new SegmentHeader();
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    NewAttribute attribute = new NewAttribute("testType", "testLayout", 1);
    newAttributeBands.addAttribute(attribute);
    assertTrue(newAttributeBands.usedAtLeastOnce);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack() throws Exception {
        outputStream = Mockito.mock(OutputStream.class);
        cpBands = Mockito.mock(CpBands.class);
        header = Mockito.mock(SegmentHeader.class);
        attributeDefinition = Mockito.mock(AttributeDefinition.class);
        attributeLayoutElements = new ArrayList<>();
        // Mocking AttributeLayoutElement and adding it to the list
        AttributeLayoutElement attributeLayoutElement = Mockito.mock(AttributeLayoutElement.class);
        attributeLayoutElements.add(attributeLayoutElement);
        // Assuming NewAttributeBands has a way to set attributeLayoutElements
        newAttributeBands = new NewAttributeBands(5, cpBands, header, attributeDefinition);
        ReflectionTestUtils.setField(newAttributeBands, "attributeLayoutElements", attributeLayoutElements);
        newAttributeBands.pack(outputStream);
        for (AttributeLayoutElement attributeLayoutElement : attributeLayoutElements) {
            Mockito.verify(attributeLayoutElement).pack(outputStream);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumberBciWithValidInputs_vQiY0_1() throws IOException {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    bciRenumbering.add(2);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    labelsToOffsets.put(new Label("label1"), 10);
    newAttributeBands.renumberBci(bciRenumbering, labelsToOffsets);
    assertFalse(bciRenumbering.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumberBciWithValidInputs_vQiY0_2() throws IOException {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    IntList bciRenumbering = new IntList(10);
    bciRenumbering.add(0);
    bciRenumbering.add(1);
    bciRenumbering.add(2);
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    labelsToOffsets.put(new Label("label1"), 10);
    newAttributeBands.renumberBci(bciRenumbering, labelsToOffsets);
    assertEquals(10, bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumberBciWithEmptyBciRenumbering_hilg1() throws IOException {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    IntList bciRenumbering = new IntList();
    Map<Label, Integer> labelsToOffsets = new HashMap<>();
    newAttributeBands.renumberBci(bciRenumbering, labelsToOffsets);
    assertTrue(bciRenumbering.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUsedAtLeastOnce() throws Exception {
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        attributeDefinition = Mockito.mock(AttributeDefinition.class);
        newAttributeBands = new NewAttributeBands(1, cpBands, segmentHeader, attributeDefinition);
        assertFalse(newAttributeBands.isUsedAtLeastOnce());
        // Assuming there's a way to set usedAtLeastOnce to true in the actual implementation
        // This part would depend on the actual logic of the NewAttributeBands class
        // For demonstration, we will assume a method setUsedAtLeastOnce exists
        // newAttributeBands.setUsedAtLeastOnce(true); 
        // assertTrue(newAttributeBands.isUsedAtLeastOnce());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_VEsM0_1() throws IOException, Pack200Exception {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    newAttributeBands.pack(outputStream);
    assertNotNull(outputStream.toByteArray());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_VEsM0_2() throws IOException, Pack200Exception {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    NewAttributeBands newAttributeBands = new NewAttributeBands(1, cpBands, header, def);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    newAttributeBands.pack(outputStream);
    assertTrue(outputStream.size() > 0);}
@Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void write(int b) throws IOException {
            throw new IOException("Simulated IOException");
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFlagIndex() throws Exception {
        def = new AttributeDefinition(5, 1, new CPUTF8("testName"), new CPUTF8("testLayout"));
        cpBands = new CpBands(new Segment(), 10);
        header = new SegmentHeader();
        newattributebands = new NewAttributeBands(10, cpBands, header, def);
        int expectedIndex = 5;
        int actualIndex = newattributebands.getFlagIndex();
        assertEquals(expectedIndex, actualIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsUsedAtLeastOnce_jYmD0() throws IOException {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition attributeDefinition = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    NewAttributeBands newAttributeBands = new NewAttributeBands(5, cpBands, header, attributeDefinition);
    assertFalse(newAttributeBands.isUsedAtLeastOnce());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnumBackwardsCalls() throws Exception {
        CPUTF8 name = new CPUTF8("TestName");
        CPUTF8 layout = new CPUTF8("TestLayout");
        AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
        Segment segment = new Segment();
        SegmentHeader header = new SegmentHeader();
        CpBands cpBands = new CpBands(segment, 1);
        newattributebands = new NewAttributeBands(1, cpBands, header, def);
        // Initialize backwardsCallCounts for testing
        backwardsCallCounts = new int[]{1, 2, 3};
        // Assuming there's a way to set this in the constructor or through a method
        // This part is hypothetical as the original code does not provide a setter
        // newattributebands.setBackwardsCallCounts(backwardsCallCounts);
        int[] expected = {1, 2, 3};
        // Assuming there's a way to set the backwardsCallCounts in the NewAttributeBands class
        // This part is hypothetical as the original code does not provide a setter
        // newattributebands.setBackwardsCallCounts(expected);
        int[] actual = newattributebands.numBackwardsCalls();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlagIndex_iQCM0() throws IOException {
    CPUTF8 name = new CPUTF8("testName");
    CPUTF8 layout = new CPUTF8("testLayout");
    AttributeDefinition def = new AttributeDefinition(5, 1, name, layout);
    Segment segment = new Segment();
    SegmentHeader header = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 10);
    NewAttributeBands newAttributeBands = new NewAttributeBands(10, cpBands, header, def);
    int flagIndex = newAttributeBands.getFlagIndex();
    assertEquals(5, flagIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCalls_vOwk0() throws IOException {
    CPUTF8 name = new CPUTF8("attributeName");
    CPUTF8 layout = new CPUTF8("layoutName");
    AttributeDefinition def = new AttributeDefinition(0, 1, name, layout);
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader header = new SegmentHeader();
    NewAttributeBands newAttributeBands = new NewAttributeBands(5, cpBands, header, def);
    int[] result = newAttributeBands.numBackwardsCalls();
    int[] expected = {0, 0, 0}; // Replace with the expected values based on your logic
    assertArrayEquals(expected, result);
}
}