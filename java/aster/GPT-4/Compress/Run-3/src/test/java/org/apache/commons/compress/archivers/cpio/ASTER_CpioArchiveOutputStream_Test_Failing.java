/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.HashMap;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveOutputStream_Test_Failing {
@Test(expected = IndexOutOfBoundsException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithNegativeOffset_nfWr1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    byte[] data = new byte[]{1, 2, 3};
    cpioOut.write(data, -1, 2);
}
@Test(expected = IndexOutOfBoundsException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithNegativeLength_dxns2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    byte[] data = new byte[]{1, 2, 3};
    cpioOut.write(data, 0, -1);
}
@Test(expected = IndexOutOfBoundsException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithOffsetGreaterThanLength_KtBZ3() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    byte[] data = new byte[]{1, 2, 3};
    cpioOut.write(data, 4, 1);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWhenNoCurrentEntry_NSFr4() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    byte[] data = new byte[]{1, 2, 3};
    cpioOut.write(data, 0, 3);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWritePastEndOfStoredEntry_Cmww5() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    cpioOut.entry = new CpioEntry("test", 10);
    cpioOut.entry.setSize(5);
    byte[] data = new byte[]{1, 2, 3, 4, 5, 6};
    cpioOut.write(data, 0, 6);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_StreamFinished_PLNI1() throws IOException {
    File inputFile = new File("test.txt");
    String entryName = "testEntry";
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Simulating that the stream has been finished
    outputStream.createArchiveEntry(inputFile, entryName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_OmyR2_1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish(); // Finish the archive
    assertTrue(outputStream.finished); // Check if finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_OmyR2_2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish(); // Finish the archive
    assertEquals(baos.size(), outputStream.getBytesWritten()); // Check if bytes written matches}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_GSeM3_1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.write(new byte[300]); // Write some data
    outputStream.finish(); // Finish the archive
    assertTrue(outputStream.finished); // Check if finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_GSeM3_2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.write(new byte[300]); // Write some data
    outputStream.finish(); // Finish the archive
    assertEquals(512, baos.size() % 512); // Check if the last block is padded to 512 bytes}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_Hhez1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the first time
    assertThrows(IOException.class, outputStream::finish); // Should throw IOException on second finish
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_EIOT2_1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.entry = null; // No open entry
    outputStream.finish(); // Should complete without exceptions
    assertTrue(outputStream.finished); // Ensure finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_EIOT2_2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.entry = null; // No open entry
    outputStream.finish(); // Should complete without exceptions
    assertTrue(baos.size() > 0); // Ensure some data was written}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_bNwf3_1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.entry = null; // No open entry
    outputStream.finish(); // Should complete without exceptions
    assertTrue(outputStream.finished); // Ensure finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_bNwf3_2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.entry = null; // No open entry
    outputStream.finish(); // Should complete without exceptions
    assertEquals(0, baos.size() % 512); // Ensure the output is padded to block size}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithValidData_mwFi0() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    cpioOut.entry = new CpioEntry("test", 10); // Assuming CpioEntry has a constructor
    cpioOut.entry.setSize(10); // Assuming setSize method exists
    byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    cpioOut.write(data, 0, 10);
    assertEquals(10, cpioOut.written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithZeroLength_IvQs6() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    cpioOut.entry = new CpioEntry("test", 10);
    cpioOut.entry.setSize(10);
    byte[] data = new byte[]{1, 2, 3};
    cpioOut.write(data, 0, 0);
    assertEquals(0, cpioOut.written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithNewCrcFormat_tsVN7() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos, FORMAT_NEW_CRC);
    cpioOut.entry = new CpioEntry("test", 10);
    cpioOut.entry.setSize(10);
    byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    cpioOut.write(data, 0, 10);
    assertEquals(55, cpioOut.crc); // Sum of 1 to 10
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteMultipleCalls_VPvM8() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOut = new CpioArchiveOutputStream(baos);
    cpioOut.entry = new CpioEntry("test", 20);
    cpioOut.entry.setSize(20);
    byte[] data1 = new byte[]{1, 2, 3, 4, 5};
    byte[] data2 = new byte[]{6, 7, 8, 9, 10};
    cpioOut.write(data1, 0, 5);
    cpioOut.write(data2, 0, 5);
    assertEquals(10, cpioOut.written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_uqrs1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // First call to finish
    assertThrows(IOException.class, outputStream::finish); // Second call should throw
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_yvIy2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos);
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.entry.setName("test.txt");
    outputStream.entry.setSize(1024);
    outputStream.finish();
    assertTrue(baos.size() > 0); // Ensure something was written to the stream
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_WoVf3() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.entry.setName("test.txt");
    outputStream.entry.setSize(300); // Less than blockSize to require padding
    outputStream.finish();
    assertEquals(512, baos.size() % 512); // Ensure the output is padded to the block size
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_rpgn0_1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW);
    Exception exception = assertThrows(IOException.class, outputStream::finish);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_rpgn0_2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW);
    assertEquals("This archive contains unclosed entries.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_rUBd1_1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish();
    Exception exception = assertThrows(IOException.class, outputStream::finish);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_rUBd1_2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish();
    assertEquals("This archive has already been finished", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_jRJO2_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish();
    assertTrue(outputStream.finished);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_jRJO2_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish();
    assertTrue(byteArrayOutputStream.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_LmUk3() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.entry.setName(CpioArchiveOutputStream.CPIO_TRAILER);
    outputStream.entry.setNumberOfLinks(1);
    outputStream.writeHeader(outputStream.entry);
    outputStream.closeArchiveEntry();
    outputStream.finish();
    int lengthOfLastBlock = (int) (outputStream.getBytesWritten() % 512);
    assertEquals(0, lengthOfLastBlock);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WhenArchiveIsNotFinished_ShouldFinishSuccessfully_SXws0() throws IOException {
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpioOutputStream.finish();
    assertTrue(cpioOutputStream.isFinished());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WhenArchiveIsAlreadyFinished_ShouldThrowIOException_AoNi1() throws IOException {
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpioOutputStream.finish();
    assertThrows(IOException.class, cpioOutputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_WhenEntryIsNotClosed_ShouldThrowIOException_gMYv2() throws IOException {
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpioOutputStream.startNewEntry("test.txt"); // Assuming this method exists to start a new entry
    assertThrows(IOException.class, cpioOutputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ShouldWriteTrailerEntryCorrectly_KTle3() throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(outputStream);
    cpioOutputStream.finish();
    byte[] outputBytes = outputStream.toByteArray();
    assertTrue(outputBytes.length > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithAlreadyFinishedArchive_pFuh1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the archive first
    assertThrows(IOException.class, outputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSuccessfully_oWSu2_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_ASCII);
    outputStream.finish();
    assertTrue(outputStream.finished);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSuccessfully_oWSu2_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_ASCII);
    outputStream.finish();
    assertEquals(0, outputStream.getBytesWritten() % outputStream.blockSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_GAle3_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_ASCII, 512);
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_OLD_ASCII);
    outputStream.entry.setSize(100); // Set size to trigger padding
    outputStream.finish();
    assertTrue(outputStream.finished);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_GAle3_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_ASCII, 512);
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_OLD_ASCII);
    outputStream.entry.setSize(100); // Set size to trigger padding
    outputStream.finish();
    assertTrue(byteArrayOutputStream.size() % 512 == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_hoVw0() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW); // Simulate an unclosed entry
    assertThrows(IOException.class, outputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishAlreadyFinished_wEXu1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the first time
    assertThrows(IOException.class, outputStream::finish); // Attempt to finish again
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_IBBa2_1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish(); // Finish the archive
    assertTrue(outputStream.finished); // Check that finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_IBBa2_2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW);
    outputStream.finish(); // Finish the archive
    assertEquals(baos.size(), CpioUtil.long2byteArray(CpioArchiveOutputStream.MAGIC_NEW, 6, false).length); // Check the size of the output}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithPadding_JLJB3() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(baos, CpioArchiveOutputStream.FORMAT_NEW, 512);
    outputStream.write(new byte[300]); // Write some data
    outputStream.finish(); // Finish the archive
    assertEquals(512, baos.size() % 512); // Check that the output is padded to the block size
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_nXaT2_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    outputStream.entry = null; // No unclosed entries
    outputStream.finish(); // Call finish
    assertTrue(outputStream.finished); // Check if finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithValidEntry_nXaT2_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    outputStream.entry = null; // No unclosed entries
    outputStream.finish(); // Call finish
    assertTrue(byteArrayOutputStream.size() > 0); // Check if some data was written}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithOldBinaryEntry_IYKC3_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_BINARY);
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_OLD_BINARY);
    entry.setName("testFile");
    entry.setInode(1);
    entry.setDevice(1);
    entry.setMode(0);
    entry.setUID(0);
    entry.setGID(0);
    entry.setNumberOfLinks(1);
    entry.setRemoteDevice(0);
    entry.setTime(System.currentTimeMillis());
    entry.setSize(10);
    outputStream.entry = entry; // Set the entry
    outputStream.finish(); // Call finish
    assertTrue(outputStream.finished); // Check if finished is true}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithOldBinaryEntry_IYKC3_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(byteArrayOutputStream, CpioArchiveOutputStream.FORMAT_OLD_BINARY);
    CpioArchiveEntry entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_OLD_BINARY);
    entry.setName("testFile");
    entry.setInode(1);
    entry.setDevice(1);
    entry.setMode(0);
    entry.setUID(0);
    entry.setGID(0);
    entry.setNumberOfLinks(1);
    entry.setRemoteDevice(0);
    entry.setTime(System.currentTimeMillis());
    entry.setSize(10);
    outputStream.entry = entry; // Set the entry
    outputStream.finish(); // Call finish
    assertTrue(byteArrayOutputStream.size() > 0); // Check if some data was written}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWhenStreamIsFinished_QeoR0() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Simulate finishing the stream
    CpioArchiveEntry entry = new CpioArchiveEntry("test.txt", 100);
    assertThrows(IOException.class, () -> outputStream.putArchiveEntry(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWhenEntryIsNull_Nviy1_1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    outputStream.putArchiveEntry(entry);
    assertNotNull(outputStream.entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWhenEntryIsNull_Nviy1_2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    outputStream.putArchiveEntry(entry);
    assertEquals("test.txt", outputStream.entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithDuplicateEntry_cOBL2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test.txt", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test.txt", 200);
    outputStream.putArchiveEntry(entry1);
    assertThrows(IOException.class, () -> outputStream.putArchiveEntry(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntryWithDifferentFormat_WgGM3() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream(), (short) 1);
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "test.txt", 100);
    assertThrows(IOException.class, () -> outputStream.putArchiveEntry(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntrySetsTimeWhenNotSet_QmKY4() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    entry.setTime(-1); // Simulate unset time
    outputStream.putArchiveEntry(entry);
    assertTrue(entry.getTime() > 0); // Time should be set to current time
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntrySuccessfullyAddsEntry_YtCm5_1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    outputStream.putArchiveEntry(entry);
    assertEquals(entry, outputStream.entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntrySuccessfullyAddsEntry_YtCm5_2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    outputStream.putArchiveEntry(entry);
    assertEquals(0, outputStream.written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_hvub0_1() throws IOException {
    File inputFile = new File("test.txt");
    String entryName = "testEntry";
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputFile, entryName);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_hvub0_2() throws IOException {
    File inputFile = new File("test.txt");
    String entryName = "testEntry";
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputFile, entryName);
    assertEquals(entryName, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_hvub0_3() throws IOException {
    File inputFile = new File("test.txt");
    String entryName = "testEntry";
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputFile, entryName);
    assertEquals(inputFile.length(), entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenNotFinished_ShouldFinishAndClose_Syaf0_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.close();
    assertTrue(cpioOutputStream.isClosed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenNotFinished_ShouldFinishAndClose_Syaf0_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.close();
    assertTrue(byteArrayOutputStream.size() > 0); // Assuming finish writes to the stream}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenAlreadyClosed_ShouldNotThrowException_lyBo1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.close();
    cpioOutputStream.close(); // Closing again
    assertTrue(cpioOutputStream.isClosed());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenFinished_ShouldOnlyClose_eDgb2_1() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.finish(); // Manually finish
    cpioOutputStream.close();
    assertTrue(cpioOutputStream.isClosed());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenFinished_ShouldOnlyClose_eDgb2_2() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.finish(); // Manually finish
    cpioOutputStream.close();
    assertEquals(0, byteArrayOutputStream.size()); // Assuming no data is written after finish}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_ShouldCloseUnderlyingOutputStream_Pjct3() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    CpioArchiveOutputStream cpioOutputStream = new CpioArchiveOutputStream(byteArrayOutputStream);
    cpioOutputStream.close();
    assertTrue(byteArrayOutputStream.toString().isEmpty()); // Assuming nothing was written before close
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertEquals(entryName, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_StreamFinished_yqBn1() {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Assuming there's a finish method to mark the stream as finished
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    assertThrows(IOException.class, () -> {
        outputStream.createArchiveEntry(inputPath, entryName);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    assertEquals("Stream has already been finished", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    assertEquals("Stream closed", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertEquals("Trying to close non-existent entry", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    assertEquals("Invalid entry size (expected 100 but got 50 bytes)", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    assertEquals("CRC Error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertNull(cpio.entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_3() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.crc);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_lDoz0() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.closeArchiveEntry(); // Close first entry
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_tcHv1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_xFXB2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 50; // Simulate written bytes
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_BAHY3() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 100; // Simulate written bytes
    stream.crc = 54321; // Simulate incorrect CRC
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_SuccessfulClose_TfJo4() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 100; // Simulate written bytes
    stream.closeArchiveEntry(); // Should not throw an exception
    assertNull(stream.entry); // Entry should be null after closing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_PadCalled_XTBc5() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(baos);
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 90; // Simulate written bytes
    stream.closeArchiveEntry(); // Should call pad method
    assertEquals(10, baos.size()); // Check if padding was written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_RXzg0() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW); // Simulate an open entry
    assertThrows(IOException.class, outputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithAlreadyFinishedArchive_uEpl1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the archive
    assertThrows(IOException.class, outputStream::finish); // Should throw IOException
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_1_fid1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_2_fid1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertEquals(entryName, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_StreamFinished_yqBn1_fid1() {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Assuming there's a finish method to mark the stream as finished
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    assertThrows(IOException.class, () -> {
        outputStream.createArchiveEntry(inputPath, entryName);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    assertEquals("Stream has already been finished", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    assertEquals("Stream closed", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertEquals("Trying to close non-existent entry", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    assertEquals("Invalid entry size (expected 100 but got 50 bytes)", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    assertEquals("CRC Error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_1_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertNull(cpio.entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_2_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_3_fid1() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.crc);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_lDoz0_fid1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.closeArchiveEntry(); // Close first entry
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_tcHv1_fid1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_xFXB2_fid1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 50; // Simulate written bytes
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_BAHY3_fid1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 100; // Simulate written bytes
    stream.crc = 54321; // Simulate incorrect CRC
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_SuccessfulClose_TfJo4_fid1() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 100; // Simulate written bytes
    stream.closeArchiveEntry(); // Should not throw an exception
    assertNull(stream.entry); // Entry should be null after closing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_PadCalled_XTBc5_fid1() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(baos);
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 90; // Simulate written bytes
    stream.closeArchiveEntry(); // Should call pad method
    assertEquals(10, baos.size()); // Check if padding was written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_RXzg0_fid1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW); // Simulate an open entry
    assertThrows(IOException.class, outputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithAlreadyFinishedArchive_uEpl1_fid1() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the archive
    assertThrows(IOException.class, outputStream::finish); // Should throw IOException
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_1_fid2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_ValidInput_kmnV0_2_fid2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    CpioArchiveEntry entry = outputStream.createArchiveEntry(inputPath, entryName);
    assertEquals(entryName, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveEntry_StreamFinished_yqBn1_fid2() {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Assuming there's a finish method to mark the stream as finished
    Path inputPath = Paths.get("valid/path/to/file.txt");
    String entryName = "file.txt";
    assertThrows(IOException.class, () -> {
        outputStream.createArchiveEntry(inputPath, entryName);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_mUDC0_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.finished = true;
    assertEquals("Stream has already been finished", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_StreamClosed_vjaq1_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.closed = true;
    assertEquals("Stream closed", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_Ghxs2_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertEquals("Trying to close non-existent entry", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_sgFf3_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100); // Assuming ArchiveEntry has a constructor that sets size
    cpio.written = 50; // Simulating written bytes
    assertEquals("Invalid entry size (expected 100 but got 50 bytes)", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    Exception exception = assertThrows(IOException.class, () -> cpio.closeArchiveEntry());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_uFao4_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.crc = 54321; // Simulating incorrect CRC
    assertEquals("CRC Error", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_1_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertNull(cpio.entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_2_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.written);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_Success_QibM5_3_fid2() throws IOException {
    CpioArchiveOutputStream cpio = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    cpio.entry = new ArchiveEntry(100, FORMAT_NEW_CRC, 12345); // Assuming ArchiveEntry has a constructor that sets size and checksum
    cpio.written = 100; // Simulating written bytes
    cpio.closeArchiveEntry(); // Should not throw an exception
    assertEquals(0, cpio.crc);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_AlreadyFinished_lDoz0_fid2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.closeArchiveEntry(); // Close first entry
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_NonExistentEntry_tcHv1_fid2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_InvalidEntrySize_xFXB2_fid2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 50; // Simulate written bytes
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_CRCError_BAHY3_fid2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 100; // Simulate written bytes
    stream.crc = 54321; // Simulate incorrect CRC
    assertThrows(IOException.class, () -> stream.closeArchiveEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_SuccessfulClose_TfJo4_fid2() throws IOException {
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    stream.entry = new CpioEntry(100); // Assuming CpioEntry has a constructor that sets size
    stream.written = 100; // Simulate written bytes
    stream.closeArchiveEntry(); // Should not throw an exception
    assertNull(stream.entry); // Entry should be null after closing
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntry_PadCalled_XTBc5_fid2() throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    CpioArchiveOutputStream stream = new CpioArchiveOutputStream(baos);
    stream.entry = new CpioEntry(100, FORMAT_NEW_CRC, 12345); // Assuming CpioEntry has a constructor that sets size and checksum
    stream.written = 90; // Simulate written bytes
    stream.closeArchiveEntry(); // Should call pad method
    assertEquals(10, baos.size()); // Check if padding was written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithUnclosedEntry_RXzg0_fid2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.entry = new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_NEW); // Simulate an open entry
    assertThrows(IOException.class, outputStream::finish);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithAlreadyFinishedArchive_uEpl1_fid2() throws IOException {
    CpioArchiveOutputStream outputStream = new CpioArchiveOutputStream(new ByteArrayOutputStream());
    outputStream.finish(); // Finish the archive
    assertThrows(IOException.class, outputStream::finish); // Should throw IOException
}