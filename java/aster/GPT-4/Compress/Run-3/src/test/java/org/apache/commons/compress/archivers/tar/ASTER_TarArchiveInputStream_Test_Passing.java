/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
private TarArchiveEntry currEntry;
private TarArchiveInputStream tararchiveinputstream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWhenEntryIsDirectory_xxAF0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("testDir/");
    assertEquals(0, tarInputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWhenEntryHasNoRemainingData_MKsY1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("testFile.txt");
    tarInputStream.currEntry.setRealSize(0);
    assertEquals(0, tarInputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAvailableWhenEntryHasRemainingData_amQV2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("testFile.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 50;
    assertEquals(50, tarInputStream.available());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAtEOFTrue_XPwc0() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    tarInputStream.setAtEOF(true);
    assertTrue(tarInputStream.atEof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAtEOFFalse_srKo1() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    tarInputStream.setAtEOF(false);
    assertFalse(tarInputStream.atEof);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMarkSupported_rGVW0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertFalse(tarInputStream.markSupported());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_PosixMagicAndVersion_hsIt0() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX.getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuMagicAndVersionSpace_EQmw1() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_GNU.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_SPACE.getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_GnuMagicAndVersionZero_yUIG2() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_GNU.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_GNU_ZERO.getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_AntMagicAndVersion_bgnX3() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_ANT.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_ANT.getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertTrue(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InsufficientLength_tocH4() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN - 1];
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidMagic_gKAD5() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy("INVALID_MAGIC".getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy(TarConstants.VERSION_POSIX.getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidVersion_GjCF6() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    System.arraycopy("INVALID_VERSION".getBytes(), 0, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_MagicOnly_oMtJ7() {
    byte[] signature = new byte[TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN];
    System.arraycopy(TarConstants.MAGIC_POSIX.getBytes(), 0, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN);
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_EmptySignature_hIiW8() {
    byte[] signature = new byte[0];
    assertFalse(TarArchiveInputStream.matches(signature, signature.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithValidData_srfj0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithValidData_srfj0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithTrailingZeros_ROSP1_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithTrailingZeros_ROSP1_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertArrayEquals(new byte[]{1, 2, 3}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithEmptyInput_wuMT2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithOnlyZeros_SJjU3_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{0, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithOnlyZeros_SJjU3_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{0, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result = tarInputStream.getLongNameData();
    assertArrayEquals(new byte[]{}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithMultipleReads_dyPM4_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result1 = tarInputStream.getLongNameData();
    byte[] result2 = tarInputStream.getLongNameData();
    assertNotNull(result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithMultipleReads_dyPM4_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5, 0, 0});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    byte[] result1 = tarInputStream.getLongNameData();
    byte[] result2 = tarInputStream.getLongNameData();
    assertNull(result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongNameDataWithNullEntry_cfbX5() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.getNextEntry(); // Simulate no entry
    byte[] result = tarInputStream.getLongNameData();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentEntry_EZee0_1() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry expectedEntry = new TarArchiveEntry();
    tarInputStream.setCurrentEntry(expectedEntry); // Hypothetical method for setting the current entry
    TarArchiveEntry actualEntry = tarInputStream.getCurrentEntry();
    assertNotNull(actualEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentEntry_EZee0_2() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry expectedEntry = new TarArchiveEntry();
    tarInputStream.setCurrentEntry(expectedEntry); // Hypothetical method for setting the current entry
    TarArchiveEntry actualEntry = tarInputStream.getCurrentEntry();
    assertEquals(expectedEntry, actualEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_ITcU0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_ITcU0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextEntry();
    assertEquals(0, entry.getSize()); // Assuming the mock input stream has no data}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOFWhenNotAtEOF_WGPV0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertFalse(tarInputStream.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAtEOFWhenAtEOF_UHbk1() {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertTrue(tarInputStream.isAtEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithPositiveValue_PYza0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(50);
    assertEquals(50, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithPositiveValue_PYza0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(50);
    assertEquals(50, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithZeroValue_LEHi1_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(0);
    assertEquals(0, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithZeroValue_LEHi1_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(0);
    assertEquals(0, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipBeyondAvailableData_QyUm2_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 90;
    long skipped = tarInputStream.skip(20);
    assertEquals(10, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipBeyondAvailableData_QyUm2_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("test.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.entryOffset = 90;
    long skipped = tarInputStream.skip(20);
    assertEquals(100, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithSparseEntry_qGxL3_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("sparse.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.currEntry.setSparse(true);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(50);
    assertEquals(50, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithSparseEntry_qGxL3_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry("sparse.txt");
    tarInputStream.currEntry.setRealSize(100);
    tarInputStream.currEntry.setSparse(true);
    tarInputStream.entryOffset = 0;
    long skipped = tarInputStream.skip(50);
    assertEquals(50, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadRecord_ReturnsNull_WhenReadCountIsLessThanRecordSize_kLGF0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[10]); // less than record size
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream, 20, 20);
    byte[] result = tarInputStream.readRecord();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadRecord_ReturnsRecordBuffer_WhenReadCountEqualsRecordSize_ouNN1_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[20]); // exactly record size
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream, 20, 20);
    byte[] result = tarInputStream.readRecord();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadRecord_ReturnsRecordBuffer_WhenReadCountEqualsRecordSize_ouNN1_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[20]); // exactly record size
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream, 20, 20);
    byte[] result = tarInputStream.readRecord();
    assertEquals(20, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithPositiveNAndNonSparseEntry_HAdi0_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100); // Assuming TarEntry has a constructor
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(50);
        assertEquals(50, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithPositiveNAndNonSparseEntry_HAdi0_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100); // Assuming TarEntry has a constructor
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(50);
        assertEquals(50, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithZeroN_FIDA1_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100);
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(0);
        assertEquals(0, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithZeroN_FIDA1_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100);
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(0);
        assertEquals(0, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithNGreaterThanAvailable_gjtg2_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100);
        tarInputStream.entryOffset = 90;
        long skipped = tarInputStream.skip(20);
        assertEquals(10, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithNGreaterThanAvailable_gjtg2_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("test.txt", 100);
        tarInputStream.entryOffset = 90;
        long skipped = tarInputStream.skip(20);
        assertEquals(100, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithSparseEntry_XPAb3_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("sparse.txt", 100);
        tarInputStream.currEntry.setSparse(true); // Assuming a method to set sparse
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(50);
        assertEquals(50, skipped);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithSparseEntry_XPAb3_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[100]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.currEntry = new TarEntry("sparse.txt", 100);
        tarInputStream.currEntry.setSparse(true); // Assuming a method to set sparse
        tarInputStream.entryOffset = 0;
        long skipped = tarInputStream.skip(50);
        assertEquals(50, tarInputStream.entryOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRecordSize_lUET0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[100]); // Example input stream
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream, 512);
    int expectedRecordSize = 100; // Assuming recordBuffer is initialized with 100 bytes
    assertEquals(expectedRecordSize, tarInputStream.getRecordSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithSparseInputStreams_DLGM0() throws IOException {
    InputStream mockInputStream1 = Mockito.mock(InputStream.class);
    InputStream mockInputStream2 = Mockito.mock(InputStream.class);
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    tarArchiveInputStream.sparseInputStreams = new InputStream[]{mockInputStream1, mockInputStream2};
    tarArchiveInputStream.close();
    Mockito.verify(mockInputStream1).close();
    Mockito.verify(mockInputStream2).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithoutSparseInputStreams_MoGw1() throws IOException {
    InputStream mockInputStream = Mockito.mock(InputStream.class);
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(mockInputStream);
    tarArchiveInputStream.close();
    Mockito.verify(mockInputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseHandlesIOException_QnGg2() throws IOException {
    InputStream mockInputStream = Mockito.mock(InputStream.class);
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(mockInputStream);
    Mockito.doThrow(new IOException()).when(mockInputStream).close();
    try {
        tarArchiveInputStream.close();
        Assertions.fail("Expected IOException to be thrown");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMark_QOHR0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.mark(1024);
    assertTrue(tarInputStream.isMarked()); // Hypothetical method to check if marked
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEOFRecordWithNullRecord_prNT0() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    boolean result = tarInputStream.isEOFRecord(null);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEOFRecordWithZeroArray_PnSs1() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]), 512);
    byte[] zeroArray = new byte[512];
    boolean result = tarInputStream.isEOFRecord(zeroArray);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEOFRecordWithNonZeroArray_ARra2() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]), 512);
    byte[] nonZeroArray = new byte[]{1, 2, 3, 4, 5};
    boolean result = tarInputStream.isEOFRecord(nonZeroArray);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataWithTarArchiveEntry_Pirz0() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    assertTrue(tarInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCanReadEntryDataWithNonTarArchiveEntry_Qymy1() {
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ArchiveEntry archiveEntry = new ArchiveEntry(); // Non-TarArchiveEntry
    assertFalse(tarInputStream.canReadEntryData(archiveEntry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroBytes_ArWn0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    int result = tarInputStream.read(new byte[10], 0, 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadAtEOF_BtRY1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.setAtEOF(true);
    int result = tarInputStream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWhenCurrentEntryIsNull_hzLy2() {
    InputStream inputStream = new ByteArrayInputStream(new byte[10]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IllegalStateException.class, () -> {
        tarInputStream.read(new byte[10], 0, 10);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadBeyondEntryOffset_TDpj3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[10]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.entryOffset = 10; // Set offset beyond the size
    int result = tarInputStream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSparseEntry_fmzi4() throws IOException {
    byte[] sparseData = new byte[20];
    InputStream inputStream = new ByteArrayInputStream(sparseData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.currEntry.setSparse(true);
    tarInputStream.currEntry.setRealSize(20);
    int result = tarInputStream.read(new byte[10], 0, 10);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSparseEntryEOF_GfIB5() throws IOException {
    byte[] sparseData = new byte[10];
    InputStream inputStream = new ByteArrayInputStream(sparseData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.currEntry.setSparse(true);
    tarInputStream.currEntry.setRealSize(10);
    tarInputStream.entryOffset = 10; // Set offset to EOF
    int result = tarInputStream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadTruncatedArchive_COFV6() throws IOException {
    byte[] data = new byte[5];
    InputStream inputStream = new ByteArrayInputStream(data);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.currEntry.setRealSize(10); // Set real size greater than available data
    int result = tarInputStream.read(new byte[10], 0, 10);
    assertThrows(IOException.class, () -> {
        if (result != -1) {
            throw new IOException("Truncated TAR archive");
        }
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidData_KvVB7() throws IOException {
    byte[] data = new byte[]{1, 2, 3, 4, 5};
    InputStream inputStream = new ByteArrayInputStream(data);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.currEntry.setRealSize(5);
    int result = tarInputStream.read(new byte[5], 0, 5);
    assertEquals(5, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithPartialData_iORV8() throws IOException {
    byte[] data = new byte[]{1, 2, 3};
    InputStream inputStream = new ByteArrayInputStream(data);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.currEntry = new TarEntry(); // Assuming TarEntry is a valid class
    tarInputStream.currEntry.setRealSize(5);
    int result = tarInputStream.read(new byte[5], 0, 5);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EOF_GLQC0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithValidEntry_YMJM1_1() throws IOException {
    byte[] tarData = {/* valid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithValidEntry_YMJM1_2() throws IOException {
    byte[] tarData = {/* valid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithLongLinkEntry_XSmJ2_1() throws IOException {
    byte[] tarData = {/* valid tar entry with long link */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithLongLinkEntry_XSmJ2_2() throws IOException {
    byte[] tarData = {/* valid tar entry with long link */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongLinkName", entry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithLongNameEntry_FIkY3_1() throws IOException {
    byte[] tarData = {/* valid tar entry with long name */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithLongNameEntry_FIkY3_2() throws IOException {
    byte[] tarData = {/* valid tar entry with long name */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGlobalPaxHeader_iOvR4_1() throws IOException {
    byte[] tarData = {/* valid tar entry with global PAX header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGlobalPaxHeader_iOvR4_2() throws IOException {
    byte[] tarData = {/* valid tar entry with global PAX header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeader_VKEm5_1() throws IOException {
    byte[] tarData = {/* valid tar entry with PAX header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeader_VKEm5_2() throws IOException {
    byte[] tarData = {/* valid tar entry with PAX header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithOldGNUSparse_ByjA6_1() throws IOException {
    byte[] tarData = {/* valid tar entry with old GNU sparse */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithOldGNUSparse_ByjA6_2() throws IOException {
    byte[] tarData = {/* valid tar entry with old GNU sparse */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isOldGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithInvalidHeader_wolN7() {
    byte[] tarData = {/* invalid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithSparseHeaders_LGlu8_1() throws IOException {
    byte[] tarData = {/* valid tar entry with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithSparseHeaders_LGlu8_2() throws IOException {
    byte[] tarData = {/* valid tar entry with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getSparseHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithEmptyTar_tzzJ9() throws IOException {
    byte[] tarData = {/* empty tar */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_tSKf10_1() throws IOException {
    byte[] tarData = {/* valid tar with multiple entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_tSKf10_2() throws IOException {
    byte[] tarData = {/* valid tar with multiple entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_tSKf10_3() throws IOException {
    byte[] tarData = {/* valid tar with multiple entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotEquals(entry1.getName(), entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithCorruptedData_mkmg11() {
    byte[] tarData = {/* corrupted tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithValidEntry_tXiQ1_1() throws IOException {
    byte[] tarData = createValidTarEntryData(); // Assume this method creates valid tar entry data
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithValidEntry_tXiQ1_2() throws IOException {
    byte[] tarData = createValidTarEntryData(); // Assume this method creates valid tar entry data
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileName.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGNULongLinkEntry_lIFn2_1() throws IOException {
    byte[] tarData = createTarWithGNULongLinkEntry(); // Assume this method creates tar data with a long link entry
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGNULongLinkEntry_lIFn2_2() throws IOException {
    byte[] tarData = createTarWithGNULongLinkEntry(); // Assume this method creates tar data with a long link entry
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLinkName", entry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGNULongNameEntry_VQmE3_1() throws IOException {
    byte[] tarData = createTarWithGNULongNameEntry(); // Assume this method creates tar data with a long name entry
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGNULongNameEntry_VQmE3_2() throws IOException {
    byte[] tarData = createTarWithGNULongNameEntry(); // Assume this method creates tar data with a long name entry
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongFileName.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGlobalPaxHeader_jYOO4_1() throws IOException {
    byte[] tarData = createTarWithGlobalPaxHeader(); // Assume this method creates tar data with a global PAX header
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithGlobalPaxHeader_jYOO4_2() throws IOException {
    byte[] tarData = createTarWithGlobalPaxHeader(); // Assume this method creates tar data with a global PAX header
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeader_iqYx5_1() throws IOException {
    byte[] tarData = createTarWithPaxHeader(); // Assume this method creates tar data with a PAX header
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeader_iqYx5_2() throws IOException {
    byte[] tarData = createTarWithPaxHeader(); // Assume this method creates tar data with a PAX header
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithOldGNUSparse_Lxxs6_1() throws IOException {
    byte[] tarData = createTarWithOldGNUSparse(); // Assume this method creates tar data with old GNU sparse
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithOldGNUSparse_Lxxs6_2() throws IOException {
    byte[] tarData = createTarWithOldGNUSparse(); // Assume this method creates tar data with old GNU sparse
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isOldGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithInvalidHeader_eZdG7() throws IOException {
    byte[] tarData = createTarWithInvalidHeader(); // Assume this method creates tar data with an invalid header
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> {
        tarInputStream.getNextTarEntry();
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeadersApplied_hlQo8_1() throws IOException {
    byte[] tarData = createTarWithPaxHeadersApplied(); // Assume this method creates tar data with PAX headers applied
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithPaxHeadersApplied_hlQo8_2() throws IOException {
    byte[] tarData = createTarWithPaxHeadersApplied(); // Assume this method creates tar data with PAX headers applied
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileNameWithPaxHeaders.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithSparseHeaders_bzMR9_1() throws IOException {
    byte[] tarData = createTarWithSparseHeaders(); // Assume this method creates tar data with sparse headers
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithSparseHeaders_bzMR9_2() throws IOException {
    byte[] tarData = createTarWithSparseHeaders(); // Assume this method creates tar data with sparse headers
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getSparseHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithEmptyTarFile_JCBU10() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{});
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_ulAV11_1() throws IOException {
    byte[] tarData = createTarWithMultipleEntries(); // Assume this method creates tar data with multiple entries
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_ulAV11_2() throws IOException {
    byte[] tarData = createTarWithMultipleEntries(); // Assume this method creates tar data with multiple entries
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_WithMultipleEntries_ulAV11_3() throws IOException {
    byte[] tarData = createTarWithMultipleEntries(); // Assume this method creates tar data with multiple entries
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotEquals(entry1.getName(), entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EOF_RXms0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertNull(tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntry_yLvY1_1() throws IOException {
    byte[] headerBuf = createValidHeader(); // Assume this method creates a valid header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntry_yLvY1_2() throws IOException {
    byte[] headerBuf = createValidHeader(); // Assume this method creates a valid header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongLinkEntry_RDhK2_1() throws IOException {
    byte[] headerBuf = createGNUHeaderWithLongLink(); // Assume this method creates a valid GNU header with long link
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongLinkEntry_RDhK2_2() throws IOException {
    byte[] headerBuf = createGNUHeaderWithLongLink(); // Assume this method creates a valid GNU header with long link
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongLinkName", entry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongNameEntry_RDQK3_1() throws IOException {
    byte[] headerBuf = createGNUHeaderWithLongName(); // Assume this method creates a valid GNU header with long name
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongNameEntry_RDQK3_2() throws IOException {
    byte[] headerBuf = createGNUHeaderWithLongName(); // Assume this method creates a valid GNU header with long name
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GlobalPaxHeader_ejTe4_1() throws IOException {
    byte[] headerBuf = createHeaderWithGlobalPax(); // Assume this method creates a valid header with global PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GlobalPaxHeader_ejTe4_2() throws IOException {
    byte[] headerBuf = createHeaderWithGlobalPax(); // Assume this method creates a valid header with global PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_PaxHeader_wVDL5_1() throws IOException {
    byte[] headerBuf = createHeaderWithPax(); // Assume this method creates a valid header with PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_PaxHeader_wVDL5_2() throws IOException {
    byte[] headerBuf = createHeaderWithPax(); // Assume this method creates a valid header with PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_OldGNUSparse_JYAl6_1() throws IOException {
    byte[] headerBuf = createOldGNUSparseHeader(); // Assume this method creates a valid old GNU sparse header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_OldGNUSparse_JYAl6_2() throws IOException {
    byte[] headerBuf = createOldGNUSparseHeader(); // Assume this method creates a valid old GNU sparse header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isOldGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_CorruptedSparse_WRZw7() throws IOException {
    byte[] headerBuf = createCorruptedSparseHeader(); // Assume this method creates a corrupted sparse header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EmptyHeader_JKVc8() throws IOException {
    byte[] headerBuf = new byte[0]; // Empty header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidSparseHeaders_bWKY9_1() throws IOException {
    byte[] headerBuf = createHeaderWithSparse(); // Assume this method creates a valid header with sparse
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidSparseHeaders_bWKY9_2() throws IOException {
    byte[] headerBuf = createHeaderWithSparse(); // Assume this method creates a valid header with sparse
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getOrderedSparseHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithPadding_KtCV10_1() throws IOException {
    byte[] headerBuf = createHeaderWithPadding(); // Assume this method creates a valid header with padding
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithPadding_KtCV10_2() throws IOException {
    byte[] headerBuf = createHeaderWithPadding(); // Assume this method creates a valid header with padding
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedNameWithPadding", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_InvalidHeader_sUOa11() throws IOException {
    byte[] headerBuf = createInvalidHeader(); // Assume this method creates an invalid header
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithExtraPaxHeaders_fKBA12_1() throws IOException {
    byte[] headerBuf = createHeaderWithExtraPax(); // Assume this method creates a valid header with extra PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithExtraPaxHeaders_fKBA12_2() throws IOException {
    byte[] headerBuf = createHeaderWithExtraPax(); // Assume this method creates a valid header with extra PAX
    InputStream inputStream = new ByteArrayInputStream(headerBuf);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getExtraPaxHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithValidEntry_AztG1_1() throws IOException {
        byte[] tarData = {/* valid tar entry data */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithValidEntry_AztG1_2() throws IOException {
        byte[] tarData = {/* valid tar entry data */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertEquals("expectedName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithNullHeader_AZQX2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[0]);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.getNextTarEntry(); // Move to EOF
        assertNull(tarInputStream.getNextTarEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithLongLinkEntry_cDXb3_1() throws IOException {
        byte[] tarData = {/* tar data with long link entry */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithLongLinkEntry_cDXb3_2() throws IOException {
        byte[] tarData = {/* tar data with long link entry */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertEquals("expectedLongLinkName", entry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithLongNameEntry_tOHV4_1() throws IOException {
        byte[] tarData = {/* tar data with long name entry */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithLongNameEntry_tOHV4_2() throws IOException {
        byte[] tarData = {/* tar data with long name entry */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertEquals("expectedLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithGlobalPaxHeader_gMpt5() throws IOException {
        byte[] tarData = {/* tar data with global pax header */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithPaxHeader_dTTu6() throws IOException {
        byte[] tarData = {/* tar data with pax header */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithOldGNUSparse_BzyR7() throws IOException {
        byte[] tarData = {/* tar data with old GNU sparse */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithSkipRecordPadding_Axwu8() throws IOException {
        byte[] tarData = {/* tar data that requires padding */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarInputStream.getNextTarEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithInvalidHeader_wbaN9() throws IOException {
        byte[] tarData = {/* invalid tar header data */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        try {
            tarInputStream.getNextTarEntry();
            fail("Expected IOException due to invalid header");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithMultipleEntries_EFwf10_1() throws IOException {
        byte[] tarData = {/* tar data with multiple entries */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
        TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
        assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithMultipleEntries_EFwf10_2() throws IOException {
        byte[] tarData = {/* tar data with multiple entries */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
        TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
        assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryWithEmptyTar_htkT11() throws IOException {
        byte[] tarData = {};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        assertNull(tarInputStream.getNextTarEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntryAfterEOF_fsrm12() throws IOException {
        byte[] tarData = {/* valid tar entry data */};
        InputStream inputStream = new ByteArrayInputStream(tarData);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
        tarInputStream.getNextTarEntry(); // Read the entry
        tarInputStream.getNextTarEntry(); // Move to EOF
        assertNull(tarInputStream.getNextTarEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithValidEntry_DICd1_2() throws IOException {
    byte[] tarData = {/* valid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithGNULongNameEntry_MlND3_2() throws IOException {
    byte[] tarData = {/* valid tar entry with long name */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithGlobalPaxHeader_QYiP4_1() throws IOException {
    byte[] tarData = {/* valid tar entry with global pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithGlobalPaxHeader_QYiP4_2() throws IOException {
    byte[] tarData = {/* valid tar entry with global pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithPaxHeader_fWdG5_1() throws IOException {
    byte[] tarData = {/* valid tar entry with pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithPaxHeader_fWdG5_2() throws IOException {
    byte[] tarData = {/* valid tar entry with pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithInvalidHeader_VbAQ7() throws IOException {
    byte[] tarData = {/* invalid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    try {
        tarInputStream.getNextTarEntry();
        fail("Expected IOException due to invalid header");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithMultipleEntries_DLOf9_1() throws IOException {
    byte[] tarData = {/* valid tar entries bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithMultipleEntries_DLOf9_2() throws IOException {
    byte[] tarData = {/* valid tar entries bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithSkippedRecords_PPya10_1() throws IOException {
    byte[] tarData = {/* valid tar entry with padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithSkippedRecords_PPya10_2() throws IOException {
    byte[] tarData = {/* valid tar entry with padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithNullEntry_VRMt11() throws IOException {
    byte[] tarData = {/* valid tar entry followed by EOF */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.getNextTarEntry();
    assertNull(tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithMalformedEntry_uAoG12() throws IOException {
    byte[] tarData = {/* malformed tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    try {
        tarInputStream.getNextTarEntry();
        fail("Expected IOException due to malformed entry");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithValidEntry_sUiq1_2() throws IOException {
    byte[] tarData = {/* valid tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithGlobalPaxHeader_EwTL4_2() throws IOException {
    byte[] tarData = {/* tar data with global pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithPaxHeader_xrEL5_2() throws IOException {
    byte[] tarData = {/* tar data with pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithOldGNUSparse_DeUa6_2() throws IOException {
    byte[] tarData = {/* tar data with old GNU sparse */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isOldGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryAfterEOF_KHAh8() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.getNextTarEntry(); // Should be at EOF
    assertNull(tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithMultipleEntries_ogId9_3() throws IOException {
    byte[] tarData = {/* tar data with multiple entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry1 = tarInputStream.getNextTarEntry();
    TarArchiveEntry entry2 = tarInputStream.getNextTarEntry();
    assertNotEquals(entry1.getName(), entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithRecordSkipping_MvYs10_1() throws IOException {
    byte[] tarData = {/* tar data that requires skipping */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithRecordSkipping_MvYs10_2() throws IOException {
    byte[] tarData = {/* tar data that requires skipping */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedNameAfterSkip", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithMalformedEntry_Woak12() throws IOException {
    byte[] tarData = {/* malformed tar entry bytes */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, () -> tarInputStream.getNextTarEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReset_aQdj0() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.reset();
    assertEquals(0, tarInputStream.getCurrentPosition());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCurrentEntry() throws Exception {
        currEntry = new TarArchiveEntry("test.txt");
        tararchiveinputstream = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        tararchiveinputstream.setCurrentEntry(currEntry);
        Field field = TarArchiveInputStream.class.getDeclaredField("currEntry");
        field.setAccessible(true);
        TarArchiveEntry actualEntry = (TarArchiveEntry) field.get(tararchiveinputstream);
        assertEquals(currEntry, actualEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithRecordPadding_cWHm10_1() throws IOException {
    byte[] tarData = {/* tar data with record padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryWithRecordPadding_cWHm10_2() throws IOException {
    byte[] tarData = {/* tar data with record padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedNameWithPadding", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryAfterSkipping_csfH11_1() throws IOException {
    byte[] tarData = {/* tar data with entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.getNextTarEntry(); // Skip first entry
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntryAfterSkipping_csfH11_2() throws IOException {
    byte[] tarData = {/* tar data with entries */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    tarInputStream.getNextTarEntry(); // Skip first entry
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedSecondEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentEntry_UPqG0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = new TarArchiveEntry("testFile.txt");
    tarInputStream.setCurrentEntry(entry);
    assertNotNull(tarInputStream.currEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentEntry_UPqG0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = new TarArchiveEntry("testFile.txt");
    tarInputStream.setCurrentEntry(entry);
    assertEquals("testFile.txt", tarInputStream.currEntry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_InvalidHeader_BDxW7() {
    byte[] tarData = {/* invalid tar header data */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    assertThrows(IOException.class, tarInputStream::getNextTarEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_PrematureEnd_QLOM8() {
    byte[] tarData = {/* tar data that ends prematurely */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_SkipRecordPadding_iQMC9() throws IOException {
    byte[] tarData = {/* tar data that requires skipping padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EntryWithSparseHeaders_BtWV10_1() throws IOException {
    byte[] tarData = {/* tar data with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EntryWithSparseHeaders_BtWV10_2() throws IOException {
    byte[] tarData = {/* tar data with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getSparseHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EntryWithExtraPaxHeaders_sGgw11_1() throws IOException {
    byte[] tarData = {/* tar data with extra pax headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EntryWithExtraPaxHeaders_sGgw11_2() throws IOException {
    byte[] tarData = {/* tar data with extra pax headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getExtraPaxHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntry_hzEl1_2() throws IOException {
    byte[] tarData = {/* valid tar entry data */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_SkipPadding_yJYe2_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_SkipPadding_yJYe2_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with padding */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongLinkEntry_knit3_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with long link */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongLinkEntry_knit3_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with long link */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongLinkName", entry.getLinkName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongNameEntry_bwsZ4_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with long name */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GNULongNameEntry_bwsZ4_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with long name */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedLongFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GlobalPaxHeader_SDPX5_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with global pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_GlobalPaxHeader_SDPX5_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with global pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isGlobalPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_PaxHeader_bGbX6_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_PaxHeader_bGbX6_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with pax header */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isPaxHeader());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_OldGNUSparse_IkND7_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with old GNU sparse */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_OldGNUSparse_IkND7_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with old GNU sparse */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertTrue(entry.isOldGNUSparse());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_EmptyHeaderBuffer_SwlQ8() throws IOException {
    byte[] tarData = {/* empty header buffer */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_InvalidHeader_cqUK9() throws IOException {
    byte[] tarData = {/* invalid header data */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    try {
        tarInputStream.getNextTarEntry();
        fail("Expected IOException due to invalid header");
    } catch (IOException e) {
        assertEquals("Error detected parsing the header", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithPaxHeaders_fjEA10_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with pax headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithPaxHeaders_fjEA10_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with pax headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertEquals("expectedFileNameWithPax", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithSparseHeaders_nUzy11_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithSparseHeaders_nUzy11_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with sparse headers */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertFalse(entry.getSparseHeaders().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithCreationTime_fTJk12_1() throws IOException {
    byte[] tarData = {/* valid tar entry data with creation time */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextTarEntry_ValidEntryWithCreationTime_fTJk12_2() throws IOException {
    byte[] tarData = {/* valid tar entry data with creation time */};
    InputStream inputStream = new ByteArrayInputStream(tarData);
    TarArchiveInputStream tarInputStream = new TarArchiveInputStream(inputStream);
    TarArchiveEntry entry = tarInputStream.getNextTarEntry();
    assertNotNull(entry.getCreationTime());}
}