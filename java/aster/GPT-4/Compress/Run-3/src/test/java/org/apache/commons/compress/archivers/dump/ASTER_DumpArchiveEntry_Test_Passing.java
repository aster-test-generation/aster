/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Collections;
import java.util.Date;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_pCct0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    long expectedOffset = 0; // Assuming the default offset is 0, adjust if necessary
    assertEquals(expectedOffset, entry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_bzsm0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    Date date = new Date();
    entry.setAccessTime(date);
    assertEquals(date.getTime(), entry.atime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_SyRP0_1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setMode(0755);
    assertEquals(0755 & 07777, entry.mode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_SyRP0_2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setMode(0755);
    assertEquals(PERMISSION.find(0755), entry.permissions);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeleted_ReturnsFalse_WhenNotDeleted_SMNX0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertFalse(entry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_LTBk0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_GHnC0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    Date testDate = new Date(1633072800000L); // Example date: 2021-10-01 00:00:00 GMT
    entry.setCreationTime(testDate);
    assertEquals(testDate.getTime(), entry.ctime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_ReturnsTrue_WhenTypeIsDirectory_zyNq0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testDir", "testDir", 1, TYPE.DIRECTORY);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_ReturnsFalse_WhenTypeIsFile_EiKg1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "testFile", 2, TYPE.FILE);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_eqtB0() {
    long currentTimeMillis = System.currentTimeMillis();
    DumpArchiveEntry entry = new DumpArchiveEntry("test.txt", "test", 1, TYPE.FILE);
    Date expectedDate = new Date(currentTimeMillis);
    assertEquals(expectedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_UnpS0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_xhEp1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_SDPK2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
    String differentClassObject = "Not a DumpArchiveEntry";
    assertFalse(entry.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentIno_KqFt3() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 2, TYPE.FILE);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameIno_DifferentSummary_qDzy4() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry1.summary = "Summary1";
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry2.summary = "Summary2";
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameIno_NullSummary_dpEN5() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry1.summary = null;
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry2.summary = "Summary";
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameIno_SameSummary_IDTk6() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry1.summary = "Summary";
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry2.summary = "Summary";
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameIno_BothNullSummary_jKIt7() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry1.summary = null;
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    entry2.summary = null;
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentObjectsWithSameAttributes_UmXC8() {
    DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, TYPE.FILE);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFifo_ReturnsTrue_WhenTypeIsFifo_Njiw0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("fifoEntry", "fifoEntrySimpleName", 1, TYPE.FIFO);
    assertTrue(entry.isFifo());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFifo_ReturnsFalse_WhenTypeIsNotFifo_ezMM1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("regularFile", "regularFileSimpleName", 2, TYPE.FILE);
    assertFalse(entry.isFifo());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_SNol0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    assertEquals("testName", entry.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOffset_ZZkz0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    long expectedOffset = 100L;
    entry.setOffset(expectedOffset);
    assertEquals(expectedOffset, entry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneration_rqNa0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    int expectedGeneration = 0; // Assuming default generation is 0, adjust if necessary
    assertEquals(expectedGeneration, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_KMob0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setVolume(5);
    assertEquals(5, entry.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSimpleName_SxuI0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "initialName");
    entry.setSimpleName("newSimpleName");
    assertEquals("newSimpleName", entry.getSimpleName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetType_cZZh0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    TYPE expectedType = TYPE.FILE;
    entry.setType(expectedType);
    assertEquals(expectedType, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_rNCk0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 12345, TYPE.FILE);
    assertEquals(12345, entry.getIno());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSimpleName_jUlv0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    String result = entry.getSimpleName();
    assertEquals("testSimpleName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlkDev_ReturnsTrue_WhenTypeIsBlkDev_kXvG0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.BLKDEV);
    assertTrue(entry.isBlkDev());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlkDev_ReturnsFalse_WhenTypeIsNotBlkDev_reDV1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertFalse(entry.isBlkDev());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNlink_IcfU0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "simpleTest", 1, TYPE.FILE);
    assertEquals(5, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGeneration_QMrb0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    entry.setGeneration(5);
    assertEquals(5, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_xMad0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    int expectedMode = 0; // Replace with the expected mode value based on your logic
    assertEquals(expectedMode, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChrDev_ReturnsTrue_WhenTypeIsChrDev_WNxW0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.CHRDEV);
    assertTrue(entry.isChrDev());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsChrDev_ReturnsFalse_WhenTypeIsNotChrDev_hoMU1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertFalse(entry.isChrDev());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntrySize_VnRX0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "simpleName", 1, TYPE.FILE);
    long expectedSize = 0; // Assuming size is initialized to 0 by default
    assertEquals(expectedSize, entry.getEntrySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_iViC0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertEquals(1, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithAllDataPresent_MJnZ0_1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = 1; // No holes
    }
    entry.update(buffer);
    assertEquals(0, entry.header.holes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithAllDataPresent_MJnZ0_2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = 1; // No holes
    }
    entry.update(buffer);
    assertEquals(0, entry.header.volume);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithAllDataPresent_MJnZ0_3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = 1; // No holes
    }
    entry.update(buffer);
    assertEquals(0, entry.header.count);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithHoles_dfwR1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = (i % 2 == 0) ? 0 : 1; // Every even index is a hole
    }
    entry.update(buffer);
    assertEquals(256, entry.header.holes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithPartialData_OBaB2_1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 300; i++) {
        buffer[164 + i] = 1; // No holes in first 300
    }
    entry.update(buffer);
    assertEquals(0, entry.header.holes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithPartialData_OBaB2_2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 300; i++) {
        buffer[164 + i] = 1; // No holes in first 300
    }
    entry.update(buffer);
    assertEquals(0, entry.header.volume);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithPartialData_OBaB2_3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 300; i++) {
        buffer[164 + i] = 1; // No holes in first 300
    }
    entry.update(buffer);
    assertEquals(0, entry.header.count);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithEmptyBuffer_hTtN3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    entry.update(buffer);
    assertEquals(512, entry.header.holes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithMaxHoles_eKCL4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = 0; // All holes
    }
    entry.update(buffer);
    assertEquals(512, entry.header.holes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithMixedData_WIur5() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = (i < 256) ? 0 : 1; // First half holes, second half data
    }
    entry.update(buffer);
    assertEquals(256, entry.header.holes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithCountSet_iIuj6_1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    buffer[160] = 10; // Set count to 10
    for (int i = 0; i < 10; i++) {
        buffer[164 + i] = 1; // No holes in first 10
    }
    entry.update(buffer);
    assertEquals(0, entry.header.holes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithCountSet_iIuj6_2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    buffer[160] = 10; // Set count to 10
    for (int i = 0; i < 10; i++) {
        buffer[164 + i] = 1; // No holes in first 10
    }
    entry.update(buffer);
    assertEquals(10, entry.header.count);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithVolumeSet_LdDi7() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[676]; // 512 + 164
    buffer[16] = 5; // Set volume to 5
    entry.update(buffer);
    assertEquals(5, entry.header.volume);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateWithBufferLessThan512_nExT8() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test", "simpleTest");
    byte[] buffer = new byte[164]; // Less than 512
    entry.update(buffer);
    assertEquals(0, entry.header.holes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithNull_jrSM0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    entry.setName(null);
    assertNull(entry.name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDirectoryWithoutSlash_wzOQ1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    entry.setName("directoryName");
    assertEquals("directoryName/", entry.name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithDirectoryWithSlash_xpQG2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    entry.setName("directoryName/");
    assertEquals("directoryName/", entry.name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithRelativePath_ABHH3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    entry.setName("./relativePath");
    assertEquals("relativePath", entry.name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameWithRegularName_EsVW4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName");
    entry.setName("regularFileName");
    assertEquals("regularFileName", entry.name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPermissions_hMRK0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "testFileSimpleName", 1, TYPE.FILE);
    Set<PERMISSION> expectedPermissions = new HashSet<>(Arrays.asList(PERMISSION.READ, PERMISSION.WRITE));
    entry.setPermissions(expectedPermissions); // Assuming there's a method to set permissions for testing
    Set<PERMISSION> actualPermissions = entry.getPermissions();
    assertEquals(expectedPermissions, actualPermissions);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_oKij0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "testFileSimpleName");
    entry.setSize(1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNlink_IwBR0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setNlink(5);
    assertEquals(5, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_ReturnsTrue_WhenTypeIsSocket_lQYU0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("socketEntry", "socketEntrySimpleName", 1, TYPE.SOCKET);
    assertTrue(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocket_ReturnsFalse_WhenTypeIsNotSocket_rhLt1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("fileEntry", "fileEntrySimpleName", 2, TYPE.FILE);
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSparseRecord_ReturnsTrue_WhenCdataIsEven_TorJ0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    header = mock(Header.class);
    when(header.getCdata(0)).thenReturn(0);
    assertTrue(entry.isSparseRecord(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSparseRecord_ReturnsFalse_WhenCdataIsOdd_TWwV1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    header = mock(Header.class);
    when(header.getCdata(1)).thenReturn(1);
    assertFalse(entry.isSparseRecord(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_SXcr0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    int expectedUid = 0; // Assuming default uid is 0, adjust as necessary based on actual implementation
    assertEquals(expectedUid, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_auAc0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 123, TYPE.FILE);
    assertEquals(123, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_jkWC0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setUserId(1001);
    assertEquals(1001, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderCount_SpUc0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    int expectedCount = 0; // Assuming the initial count is 0; adjust based on actual implementation
    assertEquals(expectedCount, entry.getHeaderCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_bbsl0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setGroupId(1001);
    assertEquals(1001, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_CtYx0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("test.txt", "test", 1, TYPE.FILE);
    Date date = new Date(1633072800000L); // Example date: 2021-10-01 00:00:00 GMT
    entry.setLastModifiedDate(date);
    assertEquals(1633072800000L, entry.getLastModifiedDate()); // Assuming a getter for mtime exists
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeWhiteout_DIeG0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.WHITEOUT);
    assertEquals(TYPE.WHITEOUT, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeSocket_TJJm1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 2, TYPE.SOCKET);
    assertEquals(TYPE.SOCKET, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeLink_mTyW2() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 3, TYPE.LINK);
    assertEquals(TYPE.LINK, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeFile_EYoG3() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 4, TYPE.FILE);
    assertEquals(TYPE.FILE, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeBlkdev_sVZM4() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 5, TYPE.BLKDEV);
    assertEquals(TYPE.BLKDEV, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeDirectory_gmdS5() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 6, TYPE.DIRECTORY);
    assertEquals(TYPE.DIRECTORY, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeChrdev_Tlcf6() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 7, TYPE.CHRDEV);
    assertEquals(TYPE.CHRDEV, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeFifo_SCaN7() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 8, TYPE.FIFO);
    assertEquals(TYPE.FIFO, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTypeUnknown_BfZK8() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 9, TYPE.UNKNOWN);
    assertEquals(TYPE.UNKNOWN, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeletedTrue_mDyB0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setDeleted(true);
    assertTrue(entry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeletedFalse_maEu1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setDeleted(false);
    assertFalse(entry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderType_yWcy0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertEquals(DumpArchiveConstants.SEGMENT_TYPE.EXPECTED_TYPE, entry.getHeaderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOriginalName_qBEN0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleName", 1, TYPE.FILE);
    String result = entry.getOriginalName();
    assertEquals("testName", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderHoles_rjqk0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    int expectedHoles = 0; // Assuming the expected value is known
    assertEquals(expectedHoles, entry.getHeaderHoles());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_cYWr0() {
    long expectedTime = System.currentTimeMillis();
    DumpArchiveEntry entry = new DumpArchiveEntry("test.txt", "test", 1, TYPE.FILE);
    entry.setCtime(expectedTime); // Assuming there's a method to set ctime for testing
    Date creationTime = entry.getCreationTime();
    assertEquals(expectedTime, creationTime.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_1() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(12345, entry.getIno());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_2() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(TYPE.DATA, entry.getType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_3() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0x1234, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_4() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(2, entry.getNlink());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_5() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(1024, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_6() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertNotNull(entry.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_7() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertNotNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseValidEntry_qmVG0_8() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000); // Access time
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000); // Last modified date
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000); // Creation time
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertNotNull(entry.getCreationTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEntryWithHoles_NUuA1() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000);
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000);
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000);
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 512);
    for (int i = 0; i < 512; i++) {
        buffer[164 + i] = (i % 2 == 0) ? 0 : 1; // Create holes
    }
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(1, entry.getHeaderHoles());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEntryWithInvalidType_GYiq2() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, -1); // Invalid segment type
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 1024);
    DumpArchiveUtil.convert32(buffer, 48, 1620000000);
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000);
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000);
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(TYPE.UNKNOWN, entry.getType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseEntryWithZeroSize_IvMY3() {
    byte[] buffer = new byte[512];
    DumpArchiveUtil.convert32(buffer, 0, DumpArchiveConstants.SEGMENT_TYPE.DATA.ordinal());
    DumpArchiveUtil.convert32(buffer, 12, 1);
    DumpArchiveUtil.convert32(buffer, 20, 12345);
    DumpArchiveUtil.convert16(buffer, 32, 0x1234);
    DumpArchiveUtil.convert16(buffer, 34, 2);
    DumpArchiveUtil.convert64(buffer, 40, 0); // Size is zero
    DumpArchiveUtil.convert32(buffer, 48, 1620000000);
    DumpArchiveUtil.convert32(buffer, 52, 0);
    DumpArchiveUtil.convert32(buffer, 56, 1620000000);
    DumpArchiveUtil.convert32(buffer, 60, 0);
    DumpArchiveUtil.convert32(buffer, 64, 1620000000);
    DumpArchiveUtil.convert32(buffer, 68, 0);
    DumpArchiveUtil.convert32(buffer, 140, 1);
    DumpArchiveUtil.convert32(buffer, 144, 1000);
    DumpArchiveUtil.convert32(buffer, 148, 1000);
    DumpArchiveUtil.convert32(buffer, 160, 1);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWhenDirectory_oJbp0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testDir", "testDirSimpleName", 1, TYPE.DIRECTORY);
    long size = entry.getSize();
    assertEquals(SIZE_UNKNOWN, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWhenFile_vDgZ1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "testFileSimpleName", 2, TYPE.FILE);
    entry.size = 1024; // Assuming size is a field in the class
    long size = entry.getSize();
    assertEquals(1024, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_ReturnsTrue_WhenTypeIsFile_ZGxF0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testFile", "simpleName", 1, TYPE.FILE);
    assertTrue(entry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFile_ReturnsFalse_WhenTypeIsNotFile_ylUM1() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testDir", "simpleName", 2, TYPE.DIRECTORY);
    assertFalse(entry.isFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_POFF0() {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    assertEquals(0, entry.getVolume()); // Assuming default volume is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTime_lhzN0() {
    long currentTimeMillis = System.currentTimeMillis();
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName", 1, TYPE.FILE);
    Date accessTime = entry.getAccessTime();
    assertEquals(new Date(currentTimeMillis), accessTime);
}
}