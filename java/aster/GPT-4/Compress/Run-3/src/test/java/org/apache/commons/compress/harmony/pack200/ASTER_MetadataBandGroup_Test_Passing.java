/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_MetadataBandGroup_Test_Passing {
MetadataBandGroup metadatabandgroup;
Segment segment;
SegmentHeader segmentHeader;
CpBands cpBands;
MetadataBandGroup metadataBandGroup;
int effort = 1;
List<MockedAnno> anno_N;
private int numBackwardsCalls;
private String type;
private int context;
private OutputStream outputStream;
    private int numBackwardsCalls;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnewEntryInAnnoN_1() throws Exception {
        segment = new Segment();
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(segment, 1);
        metadatabandgroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 1);
        metadatabandgroup.newEntryInAnnoN();
        assertEquals(1, metadatabandgroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnewEntryInAnnoN_2() throws Exception {
        segment = new Segment();
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(segment, 1);
        metadatabandgroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 1);
        metadatabandgroup.newEntryInAnnoN();
        assertEquals(1, metadatabandgroup.anno_N.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewEntryInAnnoN_DpJG0() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 5);
    metadataBandGroup.newEntryInAnnoN();
    assertTrue(metadataBandGroup.anno_N.contains(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLatest_1() throws Exception {
        segmentHeader = mock(SegmentHeader.class);
        segment = mock(Segment.class);
        cpBands = mock(CpBands.class);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        // Mocking the internal lists
        metadataBandGroup.anno_N = new ArrayList<>(Arrays.asList(2)); // Assuming anno_N is a List<Integer>
        metadataBandGroup.type_RS = new ArrayList<>(Arrays.asList("type1", "type2")); // Assuming type_RS is a List<String>
        metadataBandGroup.pair_N = new ArrayList<>(Arrays.asList(1, 1)); // Assuming pair_N is a List<Integer>
        metadataBandGroup.removeLatest();
        assertEquals(0, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLatest_2() throws Exception {
        segmentHeader = mock(SegmentHeader.class);
        segment = mock(Segment.class);
        cpBands = mock(CpBands.class);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        // Mocking the internal lists
        metadataBandGroup.anno_N = new ArrayList<>(Arrays.asList(2)); // Assuming anno_N is a List<Integer>
        metadataBandGroup.type_RS = new ArrayList<>(Arrays.asList("type1", "type2")); // Assuming type_RS is a List<String>
        metadataBandGroup.pair_N = new ArrayList<>(Arrays.asList(1, 1)); // Assuming pair_N is a List<Integer>
        metadataBandGroup.removeLatest();
        assertEquals(0, metadataBandGroup.type_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLatest_3() throws Exception {
        segmentHeader = mock(SegmentHeader.class);
        segment = mock(Segment.class);
        cpBands = mock(CpBands.class);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        // Mocking the internal lists
        metadataBandGroup.anno_N = new ArrayList<>(Arrays.asList(2)); // Assuming anno_N is a List<Integer>
        metadataBandGroup.type_RS = new ArrayList<>(Arrays.asList("type1", "type2")); // Assuming type_RS is a List<String>
        metadataBandGroup.pair_N = new ArrayList<>(Arrays.asList(1, 1)); // Assuming pair_N is a List<Integer>
        metadataBandGroup.removeLatest();
        assertEquals(0, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testincrementAnnoN() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, effort);
        segmentHeader = new SegmentHeader();
        anno_N = Mockito.mock(List.class);
        metadatabandgroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, effort);
        ReflectionTestUtils.setField(metadatabandgroup, "anno_N", anno_N);
        Mockito.when(anno_N.size()).thenReturn(3);
        Mockito.doNothing().when(anno_N).increment(2);
        metadatabandgroup.incrementAnnoN();
        Mockito.verify(anno_N).increment(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementAnnoN_Dzxm0_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 10);
    metadataBandGroup.anno_N = new ArrayList<>(Arrays.asList(1, 2, 3)); // Example initialization
    int initialSize = metadataBandGroup.anno_N.size();
    metadataBandGroup.incrementAnnoN();
    assertEquals(initialSize, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIncrementAnnoN_Dzxm0_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 10);
    metadataBandGroup.anno_N = new ArrayList<>(Arrays.asList(1, 2, 3)); // Example initialization
    int initialSize = metadataBandGroup.anno_N.size();
    metadataBandGroup.incrementAnnoN();
    assertEquals(4, metadataBandGroup.anno_N.get(initialSize - 1)); // Assuming increment adds 1 to the last element}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithSinglePair_oECm0_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type1", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeA");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.anno_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithSinglePair_oECm0_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type1", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeA");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.type_RS.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithSinglePair_oECm0_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type1", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeA");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.pair_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithNestedPairs_jVyx1_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type2", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeB");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.casearray_N.add(2); // Simulating an array case
    metadataBandGroup.caseI_KI.add("B");
    metadataBandGroup.caseI_KI.add("C");
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.anno_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithNestedPairs_jVyx1_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type2", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeB");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.casearray_N.add(2); // Simulating an array case
    metadataBandGroup.caseI_KI.add("B");
    metadataBandGroup.caseI_KI.add("C");
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.type_RS.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithNestedPairs_jVyx1_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type2", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeB");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.casearray_N.add(2); // Simulating an array case
    metadataBandGroup.caseI_KI.add("B");
    metadataBandGroup.caseI_KI.add("C");
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.pair_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithNestedPairs_jVyx1_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type2", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(1); // Simulating that there is 1 latest annotation
    metadataBandGroup.type_RS.add("typeB");
    metadataBandGroup.pair_N.add(1); // Simulating that there is 1 pair
    metadataBandGroup.casearray_N.add(2); // Simulating an array case
    metadataBandGroup.caseI_KI.add("B");
    metadataBandGroup.caseI_KI.add("C");
    metadataBandGroup.removeLatest();
    assertEquals(1, metadataBandGroup.caseI_KI.size()); // One item should be removed from caseI_KI}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithMultipleAnnotations_EfwI2_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type3", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(3); // Simulating that there are 3 latest annotations
    metadataBandGroup.type_RS.add("typeC");
    metadataBandGroup.pair_N.add(2); // Simulating that there are 2 pairs
    metadataBandGroup.removeLatest();
    assertEquals(2, metadataBandGroup.anno_N.size()); // One annotation should be removed}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithMultipleAnnotations_EfwI2_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type3", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(3); // Simulating that there are 3 latest annotations
    metadataBandGroup.type_RS.add("typeC");
    metadataBandGroup.pair_N.add(2); // Simulating that there are 2 pairs
    metadataBandGroup.removeLatest();
    assertTrue(metadataBandGroup.type_RS.isEmpty()); // All types should be removed}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRemoveLatest_WithMultipleAnnotations_EfwI2_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type3", 1, cpBands, segmentHeader, 1);
    metadataBandGroup.anno_N.add(3); // Simulating that there are 3 latest annotations
    metadataBandGroup.type_RS.add("typeC");
    metadataBandGroup.pair_N.add(2); // Simulating that there are 2 pairs
    metadataBandGroup.removeLatest();
    assertEquals(1, metadataBandGroup.pair_N.size()); // One pair should be removed}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumBackwardsCalls() throws Exception {
        segment = new Segment();
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(segment, 5);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 10);
        assertEquals(0, metadataBandGroup.numBackwardsCalls());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNumBackwardsCalls_pIWF0() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 1, cpBands, segmentHeader, 10);
    int expectedNumBackwardsCalls = 0; // Assuming the initial value is 0
    int actualNumBackwardsCalls = metadataBandGroup.numBackwardsCalls();
    assertEquals(expectedNumBackwardsCalls, actualNumBackwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_1() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(2, metadatabandgroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_2() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(2, metadatabandgroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_3() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(2, metadatabandgroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_4() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(3, metadatabandgroup.casearray_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_5() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(1, metadatabandgroup.nestpair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddParameterAnnotation_6() throws Exception {
        Segment segment = Mockito.mock(Segment.class);
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = Mockito.mock(SegmentHeader.class);
        metadatabandgroup = new MetadataBandGroup(type, numBackwardsCalls, cpBands, segmentHeader, numBackwardsCalls);
        int numParams = 2;
        int[] annoN = {1, 2};
        IntList pairN = new IntList();
        pairN.add(10);
        pairN.add(20);
        List<String> typeRS = Arrays.asList("type1", "type2");
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "C", "D");
        List<Object> values = Arrays.asList(100, 200, 300);
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(3);
        Mockito.when(cpBands.getCPSignature(Mockito.anyString())).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8(Mockito.anyString())).thenReturn("utf8");
        Mockito.when(cpBands.getConstant(Mockito.any())).thenReturn(42);
        metadatabandgroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(numBackwardsCalls);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack() throws Exception {
        type = "AD";
        context = 1; // Assuming CONTEXT_CLASS is defined as 1
        cpBands = new CpBands(new Segment(), 5);
        segmentHeader = new SegmentHeader();
        outputStream = Mockito.mock(OutputStream.class);
        metadatabandgroup = new MetadataBandGroup(type, context, cpBands, segmentHeader, 5);
        metadatabandgroup.pack(outputStream);
        Mockito.verify(outputStream, Mockito.atLeastOnce()).write(Mockito.any(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasContent_1() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        CpBands cpBands = new CpBands(segment, 1);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        // Assuming type_RS is a List or similar collection that we can manipulate for testing
        // Here we use reflection to access the private field for testing purposes
        Field field = MetadataBandGroup.class.getDeclaredField("type_RS");
        field.setAccessible(true);
        List<Object> type_RS = (List<Object>) field.get(metadataBandGroup);
        type_RS.add(new Object()); // Add an element to ensure hasContent returns true
        // Clear the list to test the false case
        Field field = MetadataBandGroup.class.getDeclaredField("type_RS");
        field.setAccessible(true);
        List<Object> type_RS = (List<Object>) field.get(metadataBandGroup);
        type_RS.clear(); // Remove the element to ensure hasContent returns false
        assertTrue(metadataBandGroup.hasContent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasContent_2() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        CpBands cpBands = new CpBands(segment, 1);
        metadataBandGroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        // Assuming type_RS is a List or similar collection that we can manipulate for testing
        // Here we use reflection to access the private field for testing purposes
        Field field = MetadataBandGroup.class.getDeclaredField("type_RS");
        field.setAccessible(true);
        List<Object> type_RS = (List<Object>) field.get(metadataBandGroup);
        type_RS.add(new Object()); // Add an element to ensure hasContent returns true
        // Clear the list to test the false case
        Field field = MetadataBandGroup.class.getDeclaredField("type_RS");
        field.setAccessible(true);
        List<Object> type_RS = (List<Object>) field.get(metadataBandGroup);
        type_RS.clear(); // Remove the element to ensure hasContent returns false
        assertFalse(metadataBandGroup.hasContent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassContextAndADType_liHB0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", CONTEXT_CLASS, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithClassContextAndADType_liHB0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", CONTEXT_CLASS, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldContextAndPType_pPTS1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("P", CONTEXT_FIELD, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithFieldContextAndPType_pPTS1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("P", CONTEXT_FIELD, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodContextAndNonADType_nfBW2_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("X", CONTEXT_METHOD, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMethodContextAndNonADType_nfBW2_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("X", CONTEXT_METHOD, cpBands, segmentHeader, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    metadataBandGroup.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTagListToArrayWithEmptyList_gpef3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", CONTEXT_CLASS, new CpBands(new Segment(), 1), new SegmentHeader(), 1);
    int[] result = metadataBandGroup.tagListToArray(Collections.emptyList());
    assertArrayEquals(new int[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTagListToArrayWithSingleCharacter_jftz4() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", CONTEXT_CLASS, new CpBands(new Segment(), 1), new SegmentHeader(), 1);
    List<String> list = Arrays.asList("A");
    int[] result = metadataBandGroup.tagListToArray(list);
    assertArrayEquals(new int[]{65}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTagListToArrayWithMultipleCharacters_puhY5() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", CONTEXT_CLASS, new CpBands(new Segment(), 1), new SegmentHeader(), 1);
    List<String> list = Arrays.asList("A", "B", "C");
    int[] result = metadataBandGroup.tagListToArray(list);
    assertArrayEquals(new int[]{65, 66, 67}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_1() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(3, metadatabandgroup.getNumBackwardsCalls());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_2() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(1, metadatabandgroup.getCasearray_N().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_3() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(1, metadatabandgroup.getNestpair_N().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_4() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals("signature", metadatabandgroup.getType_RS().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_5() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals("utf8Name1", metadatabandgroup.getName_RU().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_6() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals("utf8Name2", metadatabandgroup.getName_RU().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_7() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(100, metadatabandgroup.getCaseI_KI().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_8() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals(200.0, metadatabandgroup.getCaseD_KD().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testaddAnnotation_9() throws Exception {
        segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        segmentHeader = new SegmentHeader();
        metadatabandgroup = new MetadataBandGroup("testType", 1, cpBands, segmentHeader, 1);
        String desc = "description";
        List<String> nameRU = Arrays.asList("name1", "name2");
        List<String> tags = Arrays.asList("B", "D", "s");
        List<Object> values = Arrays.asList(100, 200.0, "valueString");
        List<Integer> caseArrayN = Arrays.asList(1, 2);
        List<String> nestTypeRS = Arrays.asList("nestType1");
        List<String> nestNameRU = Arrays.asList("nestName1");
        List<Integer> nestPairN = Arrays.asList(1);
        Mockito.when(cpBands.getCPSignature(desc)).thenReturn("signature");
        Mockito.when(cpBands.getCPUtf8("name1")).thenReturn("utf8Name1");
        Mockito.when(cpBands.getCPUtf8("name2")).thenReturn("utf8Name2");
        Mockito.when(cpBands.getConstant(100)).thenReturn(100);
        Mockito.when(cpBands.getConstant(200.0)).thenReturn(200.0);
        Mockito.when(cpBands.getCPUtf8("valueString")).thenReturn("utf8ValueString");
        metadatabandgroup.addAnnotation(desc, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
        assertEquals("utf8ValueString", metadatabandgroup.getCases_RU().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasContentWithNonEmptyTypeRS_tgwF0() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type1", 1, cpBands, segmentHeader, 5);
    metadataBandGroup.type_RS.add("content"); // Assuming type_RS is a List<String>
    assertTrue(metadataBandGroup.hasContent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasContentWithEmptyTypeRS_afIv1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 5);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type2", 2, cpBands, segmentHeader, 5);
    metadataBandGroup.type_RS.clear(); // Assuming type_RS is a List<String>
    assertFalse(metadataBandGroup.hasContent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithEmptyValues_YEZe0_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 0;
    int[] annoN = {};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(metadataBandGroup.param_NB.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithEmptyValues_YEZe0_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 0;
    int[] annoN = {};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(metadataBandGroup.anno_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithEmptyValues_YEZe0_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 0;
    int[] annoN = {};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(metadataBandGroup.pair_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithSingleTag_SRcw1_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    pairN.add(1);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Collections.singletonList("I");
    List<Object> values = Collections.singletonList(42);
    List<Integer> caseArrayN = Collections.singletonList(1);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithSingleTag_SRcw1_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    pairN.add(1);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Collections.singletonList("I");
    List<Object> values = Collections.singletonList(42);
    List<Integer> caseArrayN = Collections.singletonList(1);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithSingleTag_SRcw1_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    pairN.add(1);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Collections.singletonList("I");
    List<Object> values = Collections.singletonList(42);
    List<Integer> caseArrayN = Collections.singletonList(1);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithSingleTag_SRcw1_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    pairN.add(1);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Collections.singletonList("I");
    List<Object> values = Collections.singletonList(42);
    List<Integer> caseArrayN = Collections.singletonList(1);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(3, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(3, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_5() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseD_KD.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithMultipleTags_isfm2_6() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 3;
    int[] annoN = {1, 2, 3};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = Arrays.asList("I", "D", "F");
    List<Object> values = Arrays.asList(42, 3.14, 2.71);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseF_KF.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithComplexNesting_hweV3_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("e", "s");
    List<Object> values = Arrays.asList("value1", "value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithComplexNesting_hweV3_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("e", "s");
    List<Object> values = Arrays.asList("value1", "value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithComplexNesting_hweV3_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("e", "s");
    List<Object> values = Arrays.asList("value1", "value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithComplexNesting_hweV3_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("e", "s");
    List<Object> values = Arrays.asList("value1", "value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseet_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithComplexNesting_hweV3_5() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("e", "s");
    List<Object> values = Arrays.asList("value1", "value2");
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.cases_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(5, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(5, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(3, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_5() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseD_KD.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_6() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseF_KF.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_7() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseJ_KJ.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_8() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.casec_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_9() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.caseet_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithAllTags_BWjQ4_10() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 5;
    int[] annoN = {1, 2, 3, 4, 5};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    pairN.add(3);
    List<String> typeRS = Arrays.asList("type1", "type2", "type3");
    List<String> nameRU = Arrays.asList("name1", "name2", "name3");
    List<String> tags = Arrays.asList("B", "C", "I", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3, 4.0, 5.0, 6L, "ClassName", "EnumName", "StringValue");
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    List<String> nestTypeRS = Arrays.asList("nestType1");
    List<String> nestNameRU = Arrays.asList("nestName1");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.cases_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNoTags_Ugqs5_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNoTags_Ugqs5_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNoTags_Ugqs5_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 1;
    int[] annoN = {1};
    IntList pairN = new IntList();
    List<String> typeRS = new ArrayList<>();
    List<String> nameRU = new ArrayList<>();
    List<String> tags = new ArrayList<>();
    List<Object> values = new ArrayList<>();
    List<Integer> caseArrayN = new ArrayList<>();
    List<String> nestTypeRS = new ArrayList<>();
    List<String> nestNameRU = new ArrayList<>();
    List<Integer> nestPairN = new ArrayList<>();
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertTrue(metadataBandGroup.pair_N.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNestedPairs_Okqh6_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("B", "C");
    List<Object> values = Arrays.asList(1, 2);
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1", "nestType2");
    List<String> nestNameRU = Arrays.asList("nestName1", "nestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNestedPairs_Okqh6_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("B", "C");
    List<Object> values = Arrays.asList(1, 2);
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1", "nestType2");
    List<String> nestNameRU = Arrays.asList("nestName1", "nestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNestedPairs_Okqh6_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("B", "C");
    List<Object> values = Arrays.asList(1, 2);
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1", "nestType2");
    List<String> nestNameRU = Arrays.asList("nestName1", "nestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithNestedPairs_Okqh6_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 2;
    int[] annoN = {1, 2};
    IntList pairN = new IntList();
    pairN.add(1);
    pairN.add(2);
    List<String> typeRS = Arrays.asList("type1", "type2");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<String> tags = Arrays.asList("B", "C");
    List<Object> values = Arrays.asList(1, 2);
    List<Integer> caseArrayN = Arrays.asList(1, 2);
    List<String> nestTypeRS = Arrays.asList("nestType1", "nestType2");
    List<String> nestNameRU = Arrays.asList("nestName1", "nestName2");
    List<Integer> nestPairN = Arrays.asList(1, 2);
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, metadataBandGroup.nestpair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithLargeInputs_ilZh7_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 100;
    int[] annoN = new int[100];
    for (int i = 0; i < 100; i++) {
        annoN[i] = i + 1;
    }
    IntList pairN = new IntList();
    for (int i = 0; i < 100; i++) {
        pairN.add(i + 1);
    }
    List<String> typeRS = new ArrayList<>(Collections.nCopies(100, "type"));
    List<String> nameRU = new ArrayList<>(Collections.nCopies(100, "name"));
    List<String> tags = new ArrayList<>(Collections.nCopies(100, "I"));
    List<Object> values = new ArrayList<>(Collections.nCopies(100, 42));
    List<Integer> caseArrayN = new ArrayList<>(Collections.nCopies(100, 1));
    List<String> nestTypeRS = new ArrayList<>(Collections.nCopies(100, "nestType"));
    List<String> nestNameRU = new ArrayList<>(Collections.nCopies(100, "nestName"));
    List<Integer> nestPairN = new ArrayList<>(Collections.nCopies(100, 1));
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(100, metadataBandGroup.param_NB.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithLargeInputs_ilZh7_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 100;
    int[] annoN = new int[100];
    for (int i = 0; i < 100; i++) {
        annoN[i] = i + 1;
    }
    IntList pairN = new IntList();
    for (int i = 0; i < 100; i++) {
        pairN.add(i + 1);
    }
    List<String> typeRS = new ArrayList<>(Collections.nCopies(100, "type"));
    List<String> nameRU = new ArrayList<>(Collections.nCopies(100, "name"));
    List<String> tags = new ArrayList<>(Collections.nCopies(100, "I"));
    List<Object> values = new ArrayList<>(Collections.nCopies(100, 42));
    List<Integer> caseArrayN = new ArrayList<>(Collections.nCopies(100, 1));
    List<String> nestTypeRS = new ArrayList<>(Collections.nCopies(100, "nestType"));
    List<String> nestNameRU = new ArrayList<>(Collections.nCopies(100, "nestName"));
    List<Integer> nestPairN = new ArrayList<>(Collections.nCopies(100, 1));
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(100, metadataBandGroup.anno_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithLargeInputs_ilZh7_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 100;
    int[] annoN = new int[100];
    for (int i = 0; i < 100; i++) {
        annoN[i] = i + 1;
    }
    IntList pairN = new IntList();
    for (int i = 0; i < 100; i++) {
        pairN.add(i + 1);
    }
    List<String> typeRS = new ArrayList<>(Collections.nCopies(100, "type"));
    List<String> nameRU = new ArrayList<>(Collections.nCopies(100, "name"));
    List<String> tags = new ArrayList<>(Collections.nCopies(100, "I"));
    List<Object> values = new ArrayList<>(Collections.nCopies(100, 42));
    List<Integer> caseArrayN = new ArrayList<>(Collections.nCopies(100, 1));
    List<String> nestTypeRS = new ArrayList<>(Collections.nCopies(100, "nestType"));
    List<String> nestNameRU = new ArrayList<>(Collections.nCopies(100, "nestName"));
    List<Integer> nestPairN = new ArrayList<>(Collections.nCopies(100, 1));
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(100, metadataBandGroup.pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddParameterAnnotationWithLargeInputs_ilZh7_4() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = new SegmentHeader();
    CpBands cpBands = new CpBands(segment, 1);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, cpBands, segmentHeader, 1);
    int numParams = 100;
    int[] annoN = new int[100];
    for (int i = 0; i < 100; i++) {
        annoN[i] = i + 1;
    }
    IntList pairN = new IntList();
    for (int i = 0; i < 100; i++) {
        pairN.add(i + 1);
    }
    List<String> typeRS = new ArrayList<>(Collections.nCopies(100, "type"));
    List<String> nameRU = new ArrayList<>(Collections.nCopies(100, "name"));
    List<String> tags = new ArrayList<>(Collections.nCopies(100, "I"));
    List<Object> values = new ArrayList<>(Collections.nCopies(100, 42));
    List<Integer> caseArrayN = new ArrayList<>(Collections.nCopies(100, 1));
    List<String> nestTypeRS = new ArrayList<>(Collections.nCopies(100, "nestType"));
    List<String> nestNameRU = new ArrayList<>(Collections.nCopies(100, "nestName"));
    List<Integer> nestPairN = new ArrayList<>(Collections.nCopies(100, 1));
    metadataBandGroup.addParameterAnnotation(numParams, annoN, pairN, typeRS, nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(100, metadataBandGroup.caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithEmptyInputs_EYYr0_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    metadataBandGroup.addAnnotation("", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertTrue(type_RS.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithEmptyInputs_EYYr0_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    metadataBandGroup.addAnnotation("", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(0, pair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithSingleNameRU_loiR1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nameRU = Collections.singletonList("name");
    metadataBandGroup.addAnnotation("desc", nameRU, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, name_RU.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithMultipleTags_VFgE2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D");
    List<Object> values = Arrays.asList(1, 2, 3.0);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(3, caseI_KI.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentValueTypes_NGff3_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "F", "J");
    List<Object> values = Arrays.asList(1, 2.0, 3.0f, 4L);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentValueTypes_NGff3_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "F", "J");
    List<Object> values = Arrays.asList(1, 2.0, 3.0f, 4L);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseD_KD.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentValueTypes_NGff3_3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "F", "J");
    List<Object> values = Arrays.asList(1, 2.0, 3.0f, 4L);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseF_KF.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithDifferentValueTypes_NGff3_4() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "F", "J");
    List<Object> values = Arrays.asList(1, 2.0, 3.0f, 4L);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseJ_KJ.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedTypes_uXTu4_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Collections.singletonList("nestedType");
    List<String> nestNameRU = Collections.singletonList("nestedName");
    List<Integer> nestPairN = Collections.singletonList(1);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, nesttype_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedTypes_uXTu4_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Collections.singletonList("nestedType");
    List<String> nestNameRU = Collections.singletonList("nestedName");
    List<Integer> nestPairN = Collections.singletonList(1);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, nestname_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedTypes_uXTu4_3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Collections.singletonList("nestedType");
    List<String> nestNameRU = Collections.singletonList("nestedName");
    List<Integer> nestPairN = Collections.singletonList(1);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, nestpair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithCaseArrayN_uHoW5_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), caseArrayN, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(3, casearray_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithCaseArrayN_uHoW5_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<Integer> caseArrayN = Arrays.asList(1, 2, 3);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), caseArrayN, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(6, numBackwardsCalls);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, name_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, caseD_KD.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_4() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, caseF_KF.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_5() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, caseJ_KJ.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_6() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, casec_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_7() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, caseet_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithAllTypes_fcKX6_8() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D", "F", "J", "c", "e", "s");
    List<Object> values = Arrays.asList(1, 2, 3.0, 4.0f, 5L, "className", "enumName", "stringValue");
    List<String> nameRU = Arrays.asList("name1", "name2");
    List<Integer> caseArrayN = Arrays.asList(1);
    List<String> nestTypeRS = Arrays.asList("nestedType");
    List<String> nestNameRU = Arrays.asList("nestedName");
    List<Integer> nestPairN = Arrays.asList(1);
    metadataBandGroup.addAnnotation("desc", nameRU, tags, values, caseArrayN, nestTypeRS, nestNameRU, nestPairN);
    assertEquals(1, cases_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNullValues_CcYD7() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "C", "D");
    List<Object> values = Arrays.asList(null, null, null);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(3, caseI_KI.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithMixedTags_OHWR8_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "s", "e");
    List<Object> values = Arrays.asList(1, 2.0, "stringValue", "enumName");
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseI_KI.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithMixedTags_OHWR8_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "s", "e");
    List<Object> values = Arrays.asList(1, 2.0, "stringValue", "enumName");
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseD_KD.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithMixedTags_OHWR8_3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "s", "e");
    List<Object> values = Arrays.asList(1, 2.0, "stringValue", "enumName");
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, cases_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithMixedTags_OHWR8_4() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Arrays.asList("B", "D", "s", "e");
    List<Object> values = Arrays.asList(1, 2.0, "stringValue", "enumName");
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, caseet_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithEmptyTags_SauU9() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertTrue(T.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithLargeInput_hmOR10() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> tags = Collections.nCopies(1000, "B");
    List<Object> values = Collections.nCopies(1000, 1);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), tags, values, new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1000, caseI_KI.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedPairs_tgyC11_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Arrays.asList("nestedType1", "nestedType2");
    List<String> nestNameRU = Arrays.asList("nestedName1", "nestedName2");
    List<Integer> nestPairN = Arrays.asList(2, 3);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, nesttype_RS.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedPairs_tgyC11_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Arrays.asList("nestedType1", "nestedType2");
    List<String> nestNameRU = Arrays.asList("nestedName1", "nestedName2");
    List<Integer> nestPairN = Arrays.asList(2, 3);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, nestname_RU.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithNestedPairs_tgyC11_3() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<String> nestTypeRS = Arrays.asList("nestedType1", "nestedType2");
    List<String> nestNameRU = Arrays.asList("nestedName1", "nestedName2");
    List<Integer> nestPairN = Arrays.asList(2, 3);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), nestTypeRS, nestNameRU, nestPairN);
    assertEquals(2, nestpair_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithCaseArrayNZero_eqBS12_1() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<Integer> caseArrayN = Collections.singletonList(0);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), caseArrayN, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(1, casearray_N.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAnnotationWithCaseArrayNZero_eqBS12_2() {
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("type", 0, new CpBands(new Segment(), 0), new SegmentHeader(), 0);
    List<Integer> caseArrayN = Collections.singletonList(0);
    metadataBandGroup.addAnnotation("desc", new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), caseArrayN, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
    assertEquals(0, numBackwardsCalls);}
}