/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.objectweb.asm.Label;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BcBands_Test_Passing {
private CpBands cpBands;
private Segment segment;
private BcBands bcbands;
private List<CPClass> bcClassRef = new ArrayList<>();
private int byteCodeOffset;
private static int MULTIANEWARRAY = 197;
private IntList bcByte = new IntList();
private IntList bcCodes = new IntList();
@Mock
    private CpBands mockCpBands;
@Mock
    private CPClass mockCPClass;
private IntList bciRenumbering;
private IntList bcLabelRelativeOffsets;
private Map<Label, Integer> labelsToOffsets;
private IntList bcLabelRelativeOffsets = new IntList();
private List<Label> bcLabel = new ArrayList<>();
private Map<Label, Integer> labelsToOffsets = new HashMap<>();
private String currentNewClass;
private List<CPLong> bcLongRef = new ArrayList<>();
private List<CPString> bcStringRef = new ArrayList<>();
private List<CPFloat> bcFloatRef = new ArrayList<>();
private List<CPInt> bcIntref = new ArrayList<>();
private List<CPDouble> bcDoubleRef = new ArrayList<>();
@Mock
    private Segment mockSegment;
private IntList bcCaseValue;
private List<Label> bcLabel;
private static int TABLESWITCH = 170;
private IntList bcCaseCount;
private IntList bcCodes;
private IntList bcLocal = new IntList();
private IntList bcCaseCount = new IntList();
private List<CPMethodOrField> bcIMethodRef = new ArrayList<>();
private List bcSuperMethod = new ArrayList<>();
private List bcLabel = new ArrayList();
private List bcSuperField = new ArrayList<>();
private List<CPMethodOrField> bcMethodRef = new ArrayList<>();
private List bcThisMethod = new ArrayList<>();
private List bcInitRef = new ArrayList<>();
private List<CPMethodOrField> bcFieldRef = new ArrayList<>();
private IntList bcCaseValue = new IntList();
private List bcThisField = new ArrayList<>();
private IntList bcShort = new IntList();
OutputStream mockOutputStream;
private static int WIDE = 196;
private static int ALOAD_0 = 42;
private String currentClass = "CurrentClass";
private String currentNewClass = "CurrentNewClass";
private String superClass = "SuperClass";
private static int INVOKEINTERFACE = 185;
private String superClass;
private String currentClass;
int effort = 10;
private static final int LOOKUPSWITCH = 171;
private String currentClass = "TestOwner";
    private static final int WIDE = 196;
    private final IntList bcCodes = new IntList();
    private final IntList bcByte = new IntList();
    private static final int IINC = 132;
    private final IntList bcLocal = new IntList();
    private final IntList bcShort = new IntList();
    private int byteCodeOffset;
    private final IntList bcCodes = new IntList();
    private int renumberedOffset;
    private static final int endMarker = 255;
    private int byteCodeOffset;
@Test(expected = IllegalStateException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithIncorrectRenumbering_pTwA3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.renumberedOffset = 1;
    bcBands.bciRenumbering.add(0);
    bcBands.visitEnd();
}
    private final IntList bcCodes = new IntList();
    private int byteCodeOffset;
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitInsn_InvalidOpcode_vYIM1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitInsn(202);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithNullConstant_fvqR10() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitLdcInsn(null);
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(6, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(3, bcbands.getBcCodes().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_3() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(196, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_4() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(132, bcbands.getBcCodes().get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_5() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(256, bcbands.getBcLocal().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithLargeVarAndIncrement_6() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(256, 256);
        assertEquals(256, bcbands.getBcShort().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithSmallVarAndIncrement_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(100, 10);
        assertEquals(3, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithSmallVarAndIncrement_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(100, 10);
        assertEquals(2, bcbands.getBcCodes().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithSmallVarAndIncrement_3() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(100, 10);
        assertEquals(132, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithSmallVarAndIncrement_4() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(100, 10);
        assertEquals(10, bcbands.getBcByte().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithSmallVarAndIncrement_5() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.visitIincInsn(100, 10);
        assertEquals(100, bcbands.getBcLocal().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMultiANewArrayInsn_1() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        when(cpBands.getCPClass(anyString())).thenReturn(mockCPClass);
        String desc = "Lcom/example/MyClass;";
        int dimensions = 2;
        bcbands.visitMultiANewArrayInsn(desc, dimensions);
        assertEquals(4, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMultiANewArrayInsn_2() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        when(cpBands.getCPClass(anyString())).thenReturn(mockCPClass);
        String desc = "Lcom/example/MyClass;";
        int dimensions = 2;
        bcbands.visitMultiANewArrayInsn(desc, dimensions);
        assertEquals(MULTIANEWARRAY, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMultiANewArrayInsn_3() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        when(cpBands.getCPClass(anyString())).thenReturn(mockCPClass);
        String desc = "Lcom/example/MyClass;";
        int dimensions = 2;
        bcbands.visitMultiANewArrayInsn(desc, dimensions);
        assertEquals(mockCPClass, bcbands.getBcClassRef().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMultiANewArrayInsn_4() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        when(cpBands.getCPClass(anyString())).thenReturn(mockCPClass);
        String desc = "Lcom/example/MyClass;";
        int dimensions = 2;
        bcbands.visitMultiANewArrayInsn(desc, dimensions);
        assertEquals(dimensions & 0xFF, bcbands.getBcByte().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertEquals(6, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertTrue(bcBands.bcCodes.contains(BcBands.WIDE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertTrue(bcBands.bcCodes.contains(BcBands.IINC));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertTrue(bcBands.bcLocal.contains(256));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertTrue(bcBands.bcShort.contains(256));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_6() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertEquals(1, bcBands.bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithWideInstruction_uzsm0_7() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(256, 256);
        assertEquals(0, (int) bcBands.bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertEquals(3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertFalse(bcBands.bcCodes.contains(BcBands.WIDE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertTrue(bcBands.bcCodes.contains(BcBands.IINC));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertTrue(bcBands.bcLocal.contains(100));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertTrue(bcBands.bcByte.contains(50));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_6() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertEquals(1, bcBands.bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_WithNormalInstruction_sNdx1_7() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(100, 50);
        assertEquals(0, (int) bcBands.bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_UpdateRenumbering_Tcxt2_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(10, 20);
        bcBands.visitIincInsn(30, 40);
        assertEquals(6, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_UpdateRenumbering_Tcxt2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(10, 20);
        bcBands.visitIincInsn(30, 40);
        assertEquals(3, bcBands.bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_UpdateRenumbering_Tcxt2_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(10, 20);
        bcBands.visitIincInsn(30, 40);
        assertEquals(0, (int) bcBands.bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_UpdateRenumbering_Tcxt2_4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(10, 20);
        bcBands.visitIincInsn(30, 40);
        assertEquals(1, (int) bcBands.bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIincInsn_UpdateRenumbering_Tcxt2_5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        BcBands bcBands = new BcBands(cpBands, segment, 1);
        bcBands.visitIincInsn(10, 20);
        bcBands.visitIincInsn(30, 40);
        assertEquals(2, (int) bcBands.bciRenumbering.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMultiANewArrayInsn_aneN0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    String desc = "java/lang/String";
    int dimensions = 2;
    bcBands.visitMultiANewArrayInsn(desc, dimensions);
    assertEquals(4, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMultiANewArrayInsn_aneN0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    String desc = "java/lang/String";
    int dimensions = 2;
    bcBands.visitMultiANewArrayInsn(desc, dimensions);
    assertEquals(MULTIANEWARRAY, bcBands.bcCodes.get(bcBands.bcCodes.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMultiANewArrayInsn_aneN0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    String desc = "java/lang/String";
    int dimensions = 2;
    bcBands.visitMultiANewArrayInsn(desc, dimensions);
    assertEquals(cpBands.getCPClass(desc), bcBands.bcClassRef.get(bcBands.bcClassRef.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMultiANewArrayInsn_aneN0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    String desc = "java/lang/String";
    int dimensions = 2;
    bcBands.visitMultiANewArrayInsn(desc, dimensions);
    assertEquals(dimensions & 0xFF, (int) bcBands.bcByte.get(bcBands.bcByte.size() - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_1() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertEquals(1, bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_2() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertEquals(1, bcbands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_3() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertEquals(255, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_4() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertTrue(bbcLabel));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_5() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertTrue(bciRenumbering.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_withValidData_6() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(-1);
        bcLabelRelativeOffsets.add(0);
        labelsToOffsets.put(new Label(), 0);
        bcbands.bcLabel.add(new Label());
        bcbands.visitEnd();
        assertTrue(labelsToOffsets.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_throwsException_whenRenumberedOffsetMismatch_1() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        brenumberedOffset1; // Set to a value that will cause the exception
        Exception exception = assertThrows(IllegalStateException.class, () -> {
            bcbands.visitEnd();
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitEnd_throwsException_whenRenumberedOffsetMismatch_2() throws Exception {
        bciRenumbering = new IntList();
        bcLabelRelativeOffsets = new IntList();
        labelsToOffsets = new HashMap<>();
        segment = Mockito.mock(Segment.class);
        bcbands = new BcBands(new CpBands(segment, 0), segment, 0);
        bbciRenumberingg;
        bbcLabelRelativeOffsetss;
        blabelsToOffsetss;
        bcbands.bcLabel = new ArrayList<>();
        bcbands.bcCodes = new IntList();
        bciRenumbering.add(0);
        bciRenumbering.add(1);
        brenumberedOffset1; // Set to a value that will cause the exception
        assertEquals("Mistake made with renumbering", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(1, bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(opcode, bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(1, bcLabel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(label, bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(1, bcLabelRelativeOffsets.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitJumpInsn_6() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 10;
        Label label = new Label();
        bcbands.visitJumpInsn(opcode, label);
        assertEquals(byteCodeOffset - 3, bcLabelRelativeOffsets.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(opcode, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(1, bcBands.bcLabel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(label, bcBands.bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(1, bcBands.bcLabelRelativeOffsets.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(0, (int) bcBands.bcLabelRelativeOffsets.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitJumpInsn_NZzS0_7() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int opcode = 10;
    Label label = new Label();
    bcBands.visitJumpInsn(opcode, label);
    assertEquals(3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLabel() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        byteCodeOffset = 10; // Set a specific byteCodeOffset for testing
        Label label = Mockito.mock(Label.class);
        bcbands.visitLabel(label);
        // Assert that the label is mapped to the correct byteCodeOffset
        assertEquals(Integer.valueOf(byteCodeOffset), blabelsToOffsets));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithEmptyBciRenumbering_zYlt0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    bcBands.visitEnd();
    assertTrue(bcBands.bciRenumbering.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithSingleNegativeBci_cHwo1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(1, bcBands.bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithSingleNegativeBci_cHwo1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(1, (int) bcBands.bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithMultipleNegativeBci_cZAh2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 2);
    bcBands.bciRenumbering.add(-1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(2, bcBands.bciRenumbering.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithMultipleNegativeBci_cZAh2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 2);
    bcBands.bciRenumbering.add(-1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(1, (int) bcBands.bciRenumbering.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithMultipleNegativeBci_cZAh2_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 2);
    bcBands.bciRenumbering.add(-1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(2, (int) bcBands.bciRenumbering.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithValidRenumbering_cCtE4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 2);
    bcBands.bciRenumbering.add(-1);
    bcBands.renumberedOffset = 1;
    bcBands.visitEnd();
    assertEquals(1, bcBands.bciRenumbering.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithLabels_uvgw5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bcLabel.add(new Label());
    bcBands.labelsToOffsets.put(new Label(), 0);
    bcBands.bcLabelRelativeOffsets.add(0);
    bcBands.visitEnd();
    assertTrue(bcBands.bcLabel.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndWithEndMarker_xckm6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.endMarker = new Object();
    bcBands.visitEnd();
    assertTrue(bcBands.bcCodes.contains(bcBands.endMarker));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndResetsState_FbWU7_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(0, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndResetsState_FbWU7_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertEquals(0, bcBands.renumberedOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndResetsState_FbWU7_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertTrue(bcBands.bciRenumbering.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEndResetsState_FbWU7_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bciRenumbering.add(-1);
    bcBands.visitEnd();
    assertTrue(bcBands.labelsToOffsets.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLabel_UqPo0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label = new Label(); // Assuming Label has a default constructor
    int expectedOffset = 10; // Assuming byteCodeOffset is set to 10 for this test case
    bcBands.byteCodeOffset = expectedOffset; // Setting the byteCodeOffset for the test
    bcBands.visitLabel(label);
    assertEquals(Integer.valueOf(expectedOffset), bcBands.labelsToOffsets.get(label));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTypeInsn_1() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        int opcode = 187;
        String type = "SomeClass";
        when(cpBands.getCPClass(type)).thenReturn(mockCPClass);
        bcbands.visitTypeInsn(opcode, type);
        assertEquals(3, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTypeInsn_2() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        int opcode = 187;
        String type = "SomeClass";
        when(cpBands.getCPClass(type)).thenReturn(mockCPClass);
        bcbands.visitTypeInsn(opcode, type);
        assertEquals(opcode, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTypeInsn_3() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        int opcode = 187;
        String type = "SomeClass";
        when(cpBands.getCPClass(type)).thenReturn(mockCPClass);
        bcbands.visitTypeInsn(opcode, type);
        assertEquals(mockCPClass, bcbands.getBcClassRef().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTypeInsn_4() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, segment, 0);
        int opcode = 187;
        String type = "SomeClass";
        when(cpBands.getCPClass(type)).thenReturn(mockCPClass);
        bcbands.visitTypeInsn(opcode, type);
        assertEquals(type, bcbands.getCurrentNewClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithOpcode187_zEVB0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(187, "com/example/MyClass");
    assertEquals(3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithOpcode187_zEVB0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(187, "com/example/MyClass");
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithOpcode187_zEVB0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(187, "com/example/MyClass");
    assertEquals(187, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithOpcode187_zEVB0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(187, "com/example/MyClass");
    assertEquals("com/example/MyClass", bcBands.currentNewClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithDifferentOpcode_QnRr1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(186, "com/example/AnotherClass");
    assertEquals(3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithDifferentOpcode_QnRr1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(186, "com/example/AnotherClass");
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithDifferentOpcode_QnRr1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(186, "com/example/AnotherClass");
    assertEquals(186, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTypeInsnWithDifferentOpcode_QnRr1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTypeInsn(186, "com/example/AnotherClass");
    assertNull(bcBands.currentNewClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPInt_1() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPInt mockCPInt = mock(CPInt.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPInt);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPInt);
        assertEquals(1, bcbands.bcIntref.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPInt_2() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPInt mockCPInt = mock(CPInt.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPInt);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPInt);
        assertEquals(mockCPInt, bbcIntref));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPInt_3() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPInt mockCPInt = mock(CPInt.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPInt);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPInt);
        assertEquals(234, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPInt_4() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPInt mockCPInt = mock(CPInt.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPInt);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPInt);
        assertEquals(2, bcbands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPLong_1() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPLong mockCPLong = mock(CPLong.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPLong);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPLong);
        assertEquals(1, bcbands.bcLongRef.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPLong_2() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPLong mockCPLong = mock(CPLong.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPLong);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPLong);
        assertEquals(mockCPLong, bbcLongRef));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPLong_3() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPLong mockCPLong = mock(CPLong.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPLong);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPLong);
        assertEquals(20, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPLong_4() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPLong mockCPLong = mock(CPLong.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPLong);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPLong);
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPString_1() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPString mockCPString = mock(CPString.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPString);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPString);
        assertEquals(1, bcbands.bcStringRef.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPString_2() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPString mockCPString = mock(CPString.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPString);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPString);
        assertEquals(mockCPString, bbcStringRef));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPString_3() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPString mockCPString = mock(CPString.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPString);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPString);
        assertEquals(18, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPString_4() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPString mockCPString = mock(CPString.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPString);
        when(segment.lastConstantHadWideIndex()).thenReturn(false);
        bcbands.visitLdcInsn(mockCPString);
        assertEquals(2, bcbands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPDouble_1() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPDouble mockCPDouble = mock(CPDouble.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPDouble);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPDouble);
        assertEquals(1, bcbands.bcDoubleRef.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPDouble_2() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPDouble mockCPDouble = mock(CPDouble.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPDouble);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPDouble);
        assertEquals(mockCPDouble, bbcDoubleRef));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPDouble_3() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPDouble mockCPDouble = mock(CPDouble.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPDouble);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPDouble);
        assertEquals(239, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitLdcInsn_withCPDouble_4() throws Exception {
        cpBands = mockCpBands;
        segment = mockSegment;
        bcbands = new BcBands(cpBands, segment, 0);
        CPDouble mockCPDouble = mock(CPDouble.class);
        when(cpBands.getConstant(any())).thenReturn(mockCPDouble);
        when(segment.lastConstantHadWideIndex()).thenReturn(true);
        bcbands.visitLdcInsn(mockCPDouble);
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(1, bcCaseValue.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(1, bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(TABLESWITCH, bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(dflt, bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(0, bcLabelRelativeOffsets.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_6() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(2, bcCaseCount.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_7() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(3, bcLabel.size()); // dflt + 2 labels}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_8() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(3, bcLabelRelativeOffsets.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitTableSwitchInsn_9() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        Label label1 = mock(Label.class);
        Label label2 = mock(Label.class);
        Label[] labels = {label1, label2};
        bcbands.visitTableSwitchInsn(1, 2, dflt, labels);
        assertEquals(1, bcCaseCount.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        mockOutputStream = Mockito.mock(OutputStream.class);
        bcCodes.add(1);
        bcCaseCount.add(2);
        bcCaseValue.add(3);
        bcByte.add(4);
        bcShort.add(5);
        bcLocal.add(6);
        bcLabel.add(7);
        bcIntref.add(new CPInt());
        bcFloatRef.add(new CPFloat());
        bcLongRef.add(new CPLong());
        bcDoubleRef.add(new CPDouble());
        bcStringRef.add(new CPString());
        bcClassRef.add(new CPClass());
        bcFieldRef.add(new CPMethodOrField());
        bcMethodRef.add(new CPMethodOrField());
        bcIMethodRef.add(new CPMethodOrField());
        bcThisField.add(8);
        bcSuperField.add(9);
        bcThisMethod.add(10);
        bcSuperMethod.add(11);
        bcInitRef.add(12);
        bcbands.pack(mockOutputStream);
        Mockito.verify(mockOutputStream, Mockito.times(1)).write(Mockito.any(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithNoLabels_GuYb0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTableSwitchInsn(0, 0, new Label());
    assertEquals(1, bcBands.bcCaseCount.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithNoLabels_GuYb0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTableSwitchInsn(0, 0, new Label());
    assertEquals(0, (int) bcBands.bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithNoLabels_GuYb0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitTableSwitchInsn(0, 0, new Label());
    assertEquals(0, bcBands.bcLabelRelativeOffsets.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithMultipleLabels_ozTK1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.visitTableSwitchInsn(1, 2, new Label(), label1, label2);
    assertEquals(2, bcBands.bcCaseCount.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithMultipleLabels_ozTK1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.visitTableSwitchInsn(1, 2, new Label(), label1, label2);
    assertEquals(1, (int) bcBands.bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithMultipleLabels_ozTK1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.visitTableSwitchInsn(1, 2, new Label(), label1, label2);
    assertEquals(2, (int) bcBands.bcCaseValue.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithMultipleLabels_ozTK1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.visitTableSwitchInsn(1, 2, new Label(), label1, label2);
    assertEquals(3, bcBands.bcLabel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithPadding_ZxJu2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.byteCodeOffset = 1; // Set offset to require padding
    bcBands.visitTableSwitchInsn(0, 1, new Label(), label1, label2);
    assertTrue(bcBands.byteCodeOffset % 4 == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithPadding_ZxJu2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.byteCodeOffset = 1; // Set offset to require padding
    bcBands.visitTableSwitchInsn(0, 1, new Label(), label1, label2);
    assertEquals(2, bcBands.bcCaseCount.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithPadding_ZxJu2_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.byteCodeOffset = 1; // Set offset to require padding
    bcBands.visitTableSwitchInsn(0, 1, new Label(), label1, label2);
    assertEquals(0, (int) bcBands.bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitTableSwitchInsnWithPadding_ZxJu2_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    Label label1 = new Label();
    Label label2 = new Label();
    bcBands.byteCodeOffset = 1; // Set offset to require padding
    bcBands.visitTableSwitchInsn(0, 1, new Label(), label1, label2);
    assertEquals(1, (int) bcBands.bcCaseValue.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_BDGI0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    bcBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_BDGI0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    bcBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(4, bcbands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(2, bcbands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(WIDE, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(opcode, bcbands.bcCodes.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(1, bcbands.bcLocal.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarGreaterThan255_6() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 300;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(var, bbcLocal));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarBetween4And255_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 25;
        int var = 100;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(2, bcbands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarBetween4And255_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 25;
        int var = 100;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(2, bcbands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarBetween4And255_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 25;
        int var = 100;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(opcode, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarBetween4And255_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 25;
        int var = 100;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(var, bbcLocal));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarLessThan4_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 2;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarLessThan4_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 2;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(1, bcbands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarLessThan4_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 2;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(opcode + 5 + var, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarLessThan4_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 2;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(1, bcbands.bcLocal.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitVarInsn_WithVarLessThan4_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 21;
        int var = 2;
        bcbands.visitVarInsn(opcode, var);
        assertEquals(var, bbcLocal));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitInsn_ValidOpcode_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 100; // Valid opcode
        bcbands.visitInsn(opcode);
        assertEquals(1, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitInsn_ValidOpcode_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 100; // Valid opcode
        bcbands.visitInsn(opcode);
        assertTrue(bcbands.getBcCodes().contains(opcode));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitInsn_InvalidOpcode() {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 203; // Invalid opcode
        assertThrows(IllegalArgumentException.class, () -> {
            bcbands.visitInsn(opcode);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan255_zPhb0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 256);
    assertEquals(4, byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan255_zPhb0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 256);
    assertTrue(bcCodes.contains(WIDE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan255_zPhb0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 256);
    assertTrue(bcLocal.contains(256));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan3AndOpcodeNot169_eWdJ1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 4);
    assertEquals(2, byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan3AndOpcodeNot169_eWdJ1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 4);
    assertTrue(bcCodes.contains(22));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarGreaterThan3AndOpcodeNot169_eWdJ1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 4);
    assertTrue(bcLocal.contains(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode21_luit2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 3);
    assertEquals(1, byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode21_luit2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 3);
    assertTrue(bcCodes.contains(29)); // 21 + 5 + 3}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode21_luit2_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(21, 3);
    assertTrue(bcLocal.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode22_TCab3_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 2);
    assertEquals(1, byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode22_TCab3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 2);
    assertTrue(bcCodes.contains(32)); // 22 + 8 + 2}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitVarInsn_WithVarLessThanOrEqualTo3AndOpcode22_TCab3_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitVarInsn(22, 2);
    assertTrue(bcLocal.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitInsn_ValidOpcode_UWZj0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitInsn(200);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitInsn_ValidOpcode_UWZj0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitInsn(200);
    assertEquals(200, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMethodInsn_1() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, new Segment(), 1);
        bcurrentClasss;
        bsuperClasss;
        bcurrentNewClasss;
        String owner = "SomeOwner";
        String name = "someMethod";
        String desc = "(I)V";
        int opcode = 182;
        CPMethodOrField mockMethod = mock(CPMethodOrField.class);
        when(cpBands.getCPMethod(owner, name, desc)).thenReturn(mockMethod);
        bcbands.visitMethodInsn(opcode, owner, name, desc);
        assertEquals(1, bcbands.bcThisMethod.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMethodInsn_2() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, new Segment(), 1);
        bcurrentClasss;
        bsuperClasss;
        bcurrentNewClasss;
        String owner = "SomeOwner";
        String name = "someMethod";
        String desc = "(I)V";
        int opcode = 182;
        CPMethodOrField mockMethod = mock(CPMethodOrField.class);
        when(cpBands.getCPMethod(owner, name, desc)).thenReturn(mockMethod);
        bcbands.visitMethodInsn(opcode, owner, name, desc);
        assertTrue(bbcThisMethod));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMethodInsn_3() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, new Segment(), 1);
        bcurrentClasss;
        bsuperClasss;
        bcurrentNewClasss;
        String owner = "SomeOwner";
        String name = "someMethod";
        String desc = "(I)V";
        int opcode = 182;
        CPMethodOrField mockMethod = mock(CPMethodOrField.class);
        when(cpBands.getCPMethod(owner, name, desc)).thenReturn(mockMethod);
        bcbands.visitMethodInsn(opcode, owner, name, desc);
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMethodInsn_4() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, new Segment(), 1);
        bcurrentClasss;
        bsuperClasss;
        bcurrentNewClasss;
        String owner = "SomeOwner";
        String name = "someMethod";
        String desc = "(I)V";
        int opcode = 182;
        CPMethodOrField mockMethod = mock(CPMethodOrField.class);
        when(cpBands.getCPMethod(owner, name, desc)).thenReturn(mockMethod);
        bcbands.visitMethodInsn(opcode, owner, name, desc);
        assertEquals(1, bcbands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitMethodInsn_5() throws Exception {
        cpBands = mockCpBands;
        bcbands = new BcBands(cpBands, new Segment(), 1);
        bcurrentClasss;
        bsuperClasss;
        bcurrentNewClasss;
        String owner = "SomeOwner";
        String name = "someMethod";
        String desc = "(I)V";
        int opcode = 182;
        CPMethodOrField mockMethod = mock(CPMethodOrField.class);
        when(cpBands.getCPMethod(owner, name, desc)).thenReturn(mockMethod);
        bcbands.visitMethodInsn(opcode, owner, name, desc);
        assertEquals(opcode + 24, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntWideIndex_JOvf0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(true); // Assuming a method to set this
    bcBands.visitLdcInsn(cpInt);
    assertEquals(237, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntWideIndex_JOvf0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(true); // Assuming a method to set this
    bcBands.visitLdcInsn(cpInt);
    assertTrue(bcBands.bcIntref.contains(cpInt));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatWideIndex_MmBS1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpFloat);
    assertEquals(238, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatWideIndex_MmBS1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpFloat);
    assertTrue(bcBands.bcFloatRef.contains(cpFloat));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPLongWideIndex_IVJX2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPLong cpLong = new CPLong(); // Assuming CPLong is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpLong);
    assertEquals(20, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPLongWideIndex_IVJX2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPLong cpLong = new CPLong(); // Assuming CPLong is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpLong);
    assertTrue(bcBands.bcLongRef.contains(cpLong));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPDoubleWideIndex_IQFA3_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPDouble cpDouble = new CPDouble(); // Assuming CPDouble is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpDouble);
    assertEquals(239, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPDoubleWideIndex_IQFA3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPDouble cpDouble = new CPDouble(); // Assuming CPDouble is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpDouble);
    assertTrue(bcBands.bcDoubleRef.contains(cpDouble));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPStringWideIndex_CqQs4_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPString cpString = new CPString(); // Assuming CPString is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpString);
    assertEquals(19, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPStringWideIndex_CqQs4_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPString cpString = new CPString(); // Assuming CPString is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpString);
    assertTrue(bcBands.bcStringRef.contains(cpString));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPClassWideIndex_EuvF5_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPClass cpClass = new CPClass(); // Assuming CPClass is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpClass);
    assertEquals(236, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPClassWideIndex_EuvF5_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPClass cpClass = new CPClass(); // Assuming CPClass is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpClass);
    assertTrue(bcBands.bcClassRef.contains(cpClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntNarrowIndex_axyl6_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpInt);
    assertEquals(234, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntNarrowIndex_axyl6_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpInt);
    assertTrue(bcBands.bcIntref.contains(cpInt));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatNarrowIndex_ThFb7_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpFloat);
    assertEquals(235, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatNarrowIndex_ThFb7_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpFloat);
    assertTrue(bcBands.bcFloatRef.contains(cpFloat));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPStringNarrowIndex_oJQU8_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPString cpString = new CPString(); // Assuming CPString is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpString);
    assertEquals(18, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPStringNarrowIndex_oJQU8_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPString cpString = new CPString(); // Assuming CPString is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpString);
    assertTrue(bcBands.bcStringRef.contains(cpString));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPClassNarrowIndex_AxaF9_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPClass cpClass = new CPClass(); // Assuming CPClass is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpClass);
    assertEquals(233, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPClassNarrowIndex_AxaF9_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPClass cpClass = new CPClass(); // Assuming CPClass is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpClass);
    assertTrue(bcBands.bcClassRef.contains(cpClass));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntWideIndexUpdatesByteCodeOffset_sdxt11() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpInt);
    assertEquals(3, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatWideIndexUpdatesByteCodeOffset_ZojT12() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpFloat);
    assertEquals(3, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPLongWideIndexUpdatesByteCodeOffset_VTOf13() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPLong cpLong = new CPLong(); // Assuming CPLong is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpLong);
    assertEquals(3, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPDoubleWideIndexUpdatesByteCodeOffset_BaMO14() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPDouble cpDouble = new CPDouble(); // Assuming CPDouble is a valid class
    segment.setLastConstantHadWideIndex(true);
    bcBands.visitLdcInsn(cpDouble);
    assertEquals(3, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPIntNarrowIndexUpdatesByteCodeOffset_HeLs15() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPInt cpInt = new CPInt(); // Assuming CPInt is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpInt);
    assertEquals(2, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPFloatNarrowIndexUpdatesByteCodeOffset_fsla16() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPFloat cpFloat = new CPFloat(); // Assuming CPFloat is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpFloat);
    assertEquals(2, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPStringNarrowIndexUpdatesByteCodeOffset_xgDz17() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPString cpString = new CPString(); // Assuming CPString is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpString);
    assertEquals(2, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLdcInsnWithCPClassNarrowIndexUpdatesByteCodeOffset_oqob18() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    CPClass cpClass = new CPClass(); // Assuming CPClass is a valid class
    segment.setLastConstantHadWideIndex(false);
    bcBands.visitLdcInsn(cpClass);
    assertEquals(2, bcBands.byteCodeOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertNotNull(bcbands.bcThisField);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertNotNull(bcbands.bcThisMethod);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertNotNull(bcbands.bcSuperMethod);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertNotNull(bcbands.bcInitRef);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertTrue(bbcThisField));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_6() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertTrue(bbcThisMethod));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_7() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertTrue(bbcSuperMethod));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands_8() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        bcbands.finaliseBands();
        assertTrue(bbcInitRef));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands_hcpH0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        BcBands bcBands = new BcBands(cpBands, segment, 5);
        List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(1), new CPMethodOrField(2));
        List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(3), new CPMethodOrField(4));
        List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(5), new CPMethodOrField(6));
        List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(7), new CPMethodOrField(8));
        bcBands.setBcThisField(bcThisField);
        bcBands.setBcThisMethod(bcThisMethod);
        bcBands.setBcSuperMethod(bcSuperMethod);
        bcBands.setBcInitRef(bcInitRef);
        bcBands.finaliseBands();
        assertEquals(Arrays.asList(1, 2), bcBands.getBcThisField());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands_hcpH0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        BcBands bcBands = new BcBands(cpBands, segment, 5);
        List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(1), new CPMethodOrField(2));
        List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(3), new CPMethodOrField(4));
        List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(5), new CPMethodOrField(6));
        List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(7), new CPMethodOrField(8));
        bcBands.setBcThisField(bcThisField);
        bcBands.setBcThisMethod(bcThisMethod);
        bcBands.setBcSuperMethod(bcSuperMethod);
        bcBands.setBcInitRef(bcInitRef);
        bcBands.finaliseBands();
        assertEquals(Arrays.asList(3, 4), bcBands.getBcThisMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands_hcpH0_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        BcBands bcBands = new BcBands(cpBands, segment, 5);
        List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(1), new CPMethodOrField(2));
        List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(3), new CPMethodOrField(4));
        List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(5), new CPMethodOrField(6));
        List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(7), new CPMethodOrField(8));
        bcBands.setBcThisField(bcThisField);
        bcBands.setBcThisMethod(bcThisMethod);
        bcBands.setBcSuperMethod(bcSuperMethod);
        bcBands.setBcInitRef(bcInitRef);
        bcBands.finaliseBands();
        assertEquals(Arrays.asList(5, 6), bcBands.getBcSuperMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinaliseBands_hcpH0_4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        BcBands bcBands = new BcBands(cpBands, segment, 5);
        List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(1), new CPMethodOrField(2));
        List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(3), new CPMethodOrField(4));
        List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(5), new CPMethodOrField(6));
        List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(7), new CPMethodOrField(8));
        bcBands.setBcThisField(bcThisField);
        bcBands.setBcThisMethod(bcThisMethod);
        bcBands.setBcSuperMethod(bcSuperMethod);
        bcBands.setBcInitRef(bcInitRef);
        bcBands.finaliseBands();
        assertEquals(Arrays.asList(7, 8), bcBands.getBcInitRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case17_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 17;
        int operand = 5;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(3, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case17_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 17;
        int operand = 5;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcCodes().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case17_3() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 17;
        int operand = 5;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(opcode, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case17_4() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 17;
        int operand = 5;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcShort().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case17_5() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 17;
        int operand = 5;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(operand, bcbands.getBcShort().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case16_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 16;
        int operand = 10;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(2, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case16_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 16;
        int operand = 10;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcCodes().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case16_3() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 16;
        int operand = 10;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(opcode, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case16_4() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 16;
        int operand = 10;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcByte().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case16_5() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 16;
        int operand = 10;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(operand & 0xFF, bcbands.getBcByte().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case188_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 188;
        int operand = 20;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(2, bcbands.getByteCodeOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case188_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 188;
        int operand = 20;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcCodes().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case188_3() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 188;
        int operand = 20;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(opcode, bcbands.getBcCodes().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case188_4() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 188;
        int operand = 20;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(1, bcbands.getBcByte().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitIntInsn_case188_5() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, 1);
        bcbands = new BcBands(cpBands, segment, 1);
        int opcode = 188;
        int operand = 20;
        bcbands.visitIntInsn(opcode, operand);
        assertEquals(operand & 0xFF, bcbands.getBcByte().get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_ZuUL0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(0), new CPMethodOrField(1));
    List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(2), new CPMethodOrField(3));
    List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(4), new CPMethodOrField(5));
    List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(6), new CPMethodOrField(7));
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setBcThisField(bcThisField);
    bcBands.setBcThisMethod(bcThisMethod);
    bcBands.setBcSuperMethod(bcSuperMethod);
    bcBands.setBcInitRef(bcInitRef);
    bcBands.finaliseBands();
    assertEquals(Arrays.asList(0, 1), bcBands.getBcThisField());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_ZuUL0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(0), new CPMethodOrField(1));
    List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(2), new CPMethodOrField(3));
    List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(4), new CPMethodOrField(5));
    List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(6), new CPMethodOrField(7));
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setBcThisField(bcThisField);
    bcBands.setBcThisMethod(bcThisMethod);
    bcBands.setBcSuperMethod(bcSuperMethod);
    bcBands.setBcInitRef(bcInitRef);
    bcBands.finaliseBands();
    assertEquals(Arrays.asList(2, 3), bcBands.getBcThisMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_ZuUL0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(0), new CPMethodOrField(1));
    List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(2), new CPMethodOrField(3));
    List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(4), new CPMethodOrField(5));
    List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(6), new CPMethodOrField(7));
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setBcThisField(bcThisField);
    bcBands.setBcThisMethod(bcThisMethod);
    bcBands.setBcSuperMethod(bcSuperMethod);
    bcBands.setBcInitRef(bcInitRef);
    bcBands.finaliseBands();
    assertEquals(Arrays.asList(4, 5), bcBands.getBcSuperMethod());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_ZuUL0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    List<CPMethodOrField> bcThisField = Arrays.asList(new CPMethodOrField(0), new CPMethodOrField(1));
    List<CPMethodOrField> bcThisMethod = Arrays.asList(new CPMethodOrField(2), new CPMethodOrField(3));
    List<CPMethodOrField> bcSuperMethod = Arrays.asList(new CPMethodOrField(4), new CPMethodOrField(5));
    List<CPMethodOrField> bcInitRef = Arrays.asList(new CPMethodOrField(6), new CPMethodOrField(7));
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setBcThisField(bcThisField);
    bcBands.setBcThisMethod(bcThisMethod);
    bcBands.setBcSuperMethod(bcSuperMethod);
    bcBands.setBcInitRef(bcInitRef);
    bcBands.finaliseBands();
    assertEquals(Arrays.asList(6, 7), bcBands.getBcInitRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case182_currentClass_PJRR0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(182, "currentClass", "methodName", "()V");
    assertTrue(bcBands.bcThisMethod.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case183_superClass_lSPD1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(183, "superClass", "methodName", "()V");
    assertTrue(bcBands.bcSuperMethod.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case184_differentClass_BUNt2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(184, "differentClass", "methodName", "()V");
    assertTrue(bcBands.bcMethodRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case185_KCTY3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(185, "ownerClass", "methodName", "()V");
    assertTrue(bcBands.bcIMethodRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case182_initMethod_clDM4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(182, "currentClass", "<init>", "()V");
    assertTrue(bcBands.bcInitRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case183_initMethod_pzTs5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(183, "superClass", "<init>", "()V");
    assertTrue(bcBands.bcInitRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case184_initMethod_Lsnt6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(184, "differentClass", "<init>", "()V");
    assertTrue(bcBands.bcMethodRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case185_initMethod_EdUw7() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.visitMethodInsn(185, "ownerClass", "<init>", "()V");
    assertTrue(bcBands.bcIMethodRef.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case182_aload0_vRJo8() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitMethodInsn(182, "currentClass", "methodName", "()V");
    assertTrue(bcBands.bcCodes.contains(INVOKEINTERFACE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case183_aload0_nczq9() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitMethodInsn(183, "superClass", "methodName", "()V");
    assertTrue(bcBands.bcCodes.contains(INVOKEINTERFACE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case184_aload0_MIgE10() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitMethodInsn(184, "differentClass", "methodName", "()V");
    assertTrue(bcBands.bcCodes.contains(INVOKEINTERFACE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethodInsn_case185_aload0_CKkr11() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    BcBands bcBands = new BcBands(cpBands, segment, 1);
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitMethodInsn(185, "ownerClass", "methodName", "()V");
    assertTrue(bcBands.bcCodes.contains(INVOKEINTERFACE));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCurrentClass_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, effort);
        bcbands = new BcBands(cpBands, segment, effort);
        String expectedCurrentClass = "TestClass";
        String expectedSuperClass = "SuperTestClass";
        bcbands.setCurrentClass(expectedCurrentClass, expectedSuperClass);
        assertEquals(currentClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCurrentClass_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment, effort);
        bcbands = new BcBands(cpBands, segment, effort);
        String expectedCurrentClass = "TestClass";
        String expectedSuperClass = "SuperTestClass";
        bcbands.setCurrentClass(expectedCurrentClass, expectedSuperClass);
        assertEquals(superClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case17_ZVYf0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(17, 10);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case17_ZVYf0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(17, 10);
    assertEquals(17, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case17_ZVYf0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(17, 10);
    assertEquals(1, bcBands.bcShort.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case17_ZVYf0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(17, 10);
    assertEquals(10, (int) bcBands.bcShort.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case17_ZVYf0_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(17, 10);
    assertEquals(3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case16_kSnu1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(16, 255);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case16_kSnu1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(16, 255);
    assertEquals(16, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case16_kSnu1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(16, 255);
    assertEquals(1, bcBands.bcByte.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case16_kSnu1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(16, 255);
    assertEquals(255, (int) bcBands.bcByte.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case16_kSnu1_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(16, 255);
    assertEquals(2, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case188_zWfB2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(188, 128);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case188_zWfB2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(188, 128);
    assertEquals(188, (int) bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case188_zWfB2_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(188, 128);
    assertEquals(1, bcBands.bcByte.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case188_zWfB2_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(188, 128);
    assertEquals(128, (int) bcBands.bcByte.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitIntInsn_case188_zWfB2_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitIntInsn(188, 128);
    assertEquals(2, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentClass_Adua0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setCurrentClass("TestClass", "SuperClass");
    assertEquals("TestClass", bcBands.currentClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentClass_Adua0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.setCurrentClass("TestClass", "SuperClass");
    assertEquals("SuperClass", bcBands.superClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_1() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
        assertEquals(LOOKUPSWITCH, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_2() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
        assertEquals(dflt, bcbands.bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_3() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
        assertEquals(byteCodeOffset, bcbands.bcLabelRelativeOffsets.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_4() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
        assertEquals(keys.length, bbcCaseCount));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_5() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
            assertEquals(keys[i], bbcCaseValue));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_6() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
            assertEquals(labels[i], bbcLabel));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_7() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
            assertEquals(byteCodeOffset, bbcLabelRelativeOffsets));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testvisitLookupSwitchInsn_8() throws Exception {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 0);
        bcbands = new BcBands(cpBands, segment, 0);
        bcCaseValue = new IntList();
        bcLabelRelativeOffsets = new IntList();
        byteCodeOffset = 0;
        bcLabel = new ArrayList<>();
        bcCaseCount = new IntList();
        bcCodes = new IntList();
        Label dflt = mock(Label.class);
        int[] keys = {1, 2, 3};
        Label[] labels = {mock(Label.class), mock(Label.class), mock(Label.class)};
        bcbands.visitLookupSwitchInsn(dflt, keys, labels);
        for (int i = 0; i < keys.length; i++) {
        }
        int expectedByteCodeOffset = byteCodeOffset + 1 + (byteCodeOffset + 1) % 4 == 0 ? 0 : 4 - (byteCodeOffset + 1) % 4 + 8 + 8 * keys.length;
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitFieldInsn_1() throws Exception {
        Segment segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        bcbands = new BcBands(cpBands, segment, 0);
        bcurrentClasss;
        int opcode = 1;
        String owner = "TestOwner";
        String name = "testField";
        String desc = "I";
        CPMethodOrField mockField = Mockito.mock(CPMethodOrField.class);
        Mockito.when(cpBands.getCPField(owner, name, desc)).thenReturn(mockField);
        bcbands.visitFieldInsn(opcode, owner, name, desc);
        assertEquals(1 + 24, bcbands.bcCodes.get(bbcCodes) - 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitFieldInsn_2() throws Exception {
        Segment segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        bcbands = new BcBands(cpBands, segment, 0);
        bcurrentClasss;
        int opcode = 1;
        String owner = "TestOwner";
        String name = "testField";
        String desc = "I";
        CPMethodOrField mockField = Mockito.mock(CPMethodOrField.class);
        Mockito.when(cpBands.getCPField(owner, name, desc)).thenReturn(mockField);
        bcbands.visitFieldInsn(opcode, owner, name, desc);
        assertTrue(bbcThisField));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitFieldInsn_3() throws Exception {
        Segment segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        bcbands = new BcBands(cpBands, segment, 0);
        bcurrentClasss;
        int opcode = 1;
        String owner = "TestOwner";
        String name = "testField";
        String desc = "I";
        CPMethodOrField mockField = Mockito.mock(CPMethodOrField.class);
        Mockito.when(cpBands.getCPField(owner, name, desc)).thenReturn(mockField);
        bcbands.visitFieldInsn(opcode, owner, name, desc);
        assertEquals(byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVisitFieldInsn_4() throws Exception {
        Segment segment = new Segment();
        cpBands = Mockito.mock(CpBands.class);
        bcbands = new BcBands(cpBands, segment, 0);
        bcurrentClasss;
        int opcode = 1;
        String owner = "TestOwner";
        String name = "testField";
        String desc = "I";
        CPMethodOrField mockField = Mockito.mock(CPMethodOrField.class);
        Mockito.when(cpBands.getCPField(owner, name, desc)).thenReturn(mockField);
        bcbands.visitFieldInsn(opcode, owner, name, desc);
        assertEquals(1, bbcCodes));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithNoKeys_drrd0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = new int[0];
    Label[] labels = new Label[0];
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithNoKeys_drrd0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = new int[0];
    Label[] labels = new Label[0];
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(LOOKUPSWITCH, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithNoKeys_drrd0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = new int[0];
    Label[] labels = new Label[0];
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(dflt, bcBands.bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithNoKeys_drrd0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = new int[0];
    Label[] labels = new Label[0];
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(0, bcBands.bcCaseCount.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(LOOKUPSWITCH, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(dflt, bcBands.bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(3, bcBands.bcCaseCount.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(2, bcBands.bcCaseValue.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithMultipleKeys_zZbS1_7() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1, 2, 3};
    Label[] labels = {new Label(), new Label(), new Label()};
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(3, bcBands.bcCaseValue.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCodes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(LOOKUPSWITCH, bcBands.bcCodes.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(dflt, bcBands.bcLabel.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCaseCount.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(1, bcBands.bcCaseValue.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitLookupSwitchInsnWithPadding_EfXf2_6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 0);
    BcBands bcBands = new BcBands(cpBands, segment, 0);
    Label dflt = new Label();
    int[] keys = {1};
    Label[] labels = {new Label()};
    bcBands.byteCodeOffset = 2;
    bcBands.visitLookupSwitchInsn(dflt, keys, labels);
    assertEquals(3, bcBands.byteCodeOffset); // Check if padding was applied correctly}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithAload0_YCOM0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertEquals(initialByteCodeOffset + 3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithAload0_YCOM0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.bcCodes.add(ALOAD_0);
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertTrue(bcBands.bcCodes.contains(24));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithDifferentOwner_vcXL1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.currentClass = "differentOwner";
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertEquals(initialByteCodeOffset + 3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithDifferentOwner_vcXL1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.currentClass = "differentOwner";
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertTrue(bcBands.bcFieldRef.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithNoAload0_jcTp2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertEquals(initialByteCodeOffset + 3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithNoAload0_jcTp2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertFalse(bcBands.bcCodes.contains(ALOAD_0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithCurrentClass_FqZk3_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.currentClass = "owner";
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertEquals(initialByteCodeOffset + 3, bcBands.byteCodeOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithCurrentClass_FqZk3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.currentClass = "owner";
    int initialByteCodeOffset = bcBands.byteCodeOffset;
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertTrue(bcBands.bcThisField.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithOpcodeModification_Iopj4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    int initialOpcode = 0;
    bcBands.visitFieldInsn(initialOpcode, "owner", "name", "desc");
    assertTrue(bcBands.bcCodes.contains(initialOpcode + 24));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitFieldInsnWithMultipleCalls_nQdM5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    BcBands bcBands = new BcBands(cpBands, segment, 5);
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    bcBands.visitFieldInsn(0, "owner", "name", "desc");
    assertEquals(2, bcBands.bcCodes.size());
}
}
}