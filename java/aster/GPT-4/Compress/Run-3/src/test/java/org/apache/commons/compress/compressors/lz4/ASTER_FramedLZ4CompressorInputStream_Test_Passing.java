/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.zip.CheckedInputStream;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.io.input.CountingInputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedLZ4CompressorInputStream_Test_Passing {
private byte[] concat(byte[] first, byte[] second) {
    byte[] result = new byte[first.length + second.length];
    System.arraycopy(first, 0, result, 0, first.length);
    System.arraycopy(second, 0, result, first.length, second.length);
    return result;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithValidSignature_ReturnsTrue_gPYE0() {
    byte[] validSignature = new byte[] { 0x04, 0x22, 0x4D, 0x18 }; // Example valid LZ4 signature
    int length = validSignature.length;
    boolean result = FramedLZ4CompressorInputStream.matches(validSignature, length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithShorterLength_ReturnsFalse_LRtf1() {
    byte[] shortSignature = new byte[] { 0x04, 0x22 }; // Shorter than LZ4_SIGNATURE
    int length = shortSignature.length;
    boolean result = FramedLZ4CompressorInputStream.matches(shortSignature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithDifferentSignature_ReturnsFalse_NKLv2() {
    byte[] differentSignature = new byte[] { 0x00, 0x00, 0x00, 0x00 }; // Different from LZ4_SIGNATURE
    int length = differentSignature.length;
    boolean result = FramedLZ4CompressorInputStream.matches(differentSignature, length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadReturnsByte_CGnc0() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{(byte) 0xAB});
    FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
    int result = compressorInputStream.read();
    assertEquals(0xAB, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadReturnsNegativeOneAtEndOfStream_GJsh1() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{});
    FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
    int result = compressorInputStream.read();
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithZeroLength_UsUJ0() throws IOException {
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[10]));
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadEndReached_BzhX1() throws IOException {
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 5);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceWithUncompressedData_ePZp2_1() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 5);
        assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceWithUncompressedData_ePZp2_2() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 5);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceWithPartialRead_lBmh3_1() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 3);
        assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceWithPartialRead_lBmh3_2() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[5];
        int result = stream.read(buffer, 0, 3);
        assertArrayEquals(new byte[]{1, 2, 3, 0, 0}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithMultipleBlocks_xrVQ4_1() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[8];
        int result = stream.read(buffer, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithMultipleBlocks_xrVQ4_2() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[8];
        int result = stream.read(buffer, 0, 8);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithExpectBlockDependency_OHkr5_1() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[4];
        int result = stream.read(buffer, 0, 4);
        assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithExpectBlockDependency_OHkr5_2() throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{1, 2, 3, 4});
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
        byte[] buffer = new byte[4];
        int result = stream.read(buffer, 0, 4);
        assertArrayEquals(new byte[]{1, 2, 3, 4}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroLength_roUa0() throws IOException {
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
    int result = stream.read(new byte[10], 0, 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEndReached_Jjee1() throws IOException {
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
    stream.read(new byte[10], 0, 10); // Simulate end reached
    int result = stream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_WEHs2_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_WEHs2_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsPartialData_PKkj3_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 3);
    assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsPartialData_PKkj3_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 3);
    assertArrayEquals(new byte[]{1, 2, 3}, Arrays.copyOf(buffer, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_iiGQ4() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5, 6, 7, 8};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    stream.read(buffer, 0, 5);
    stream.nextBlock(); // Simulate moving to the next block
    int result = stream.read(buffer, 5, 5);
    assertEquals(-1, result); // Assuming no more data in the next block
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithChecksum_iXxw5_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData), true);
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithChecksum_iXxw5_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData), true);
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithZeroLength_ukIO0() throws IOException {
        InputStream in = new ByteArrayInputStream(new byte[]{});
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in);
        int result = compressorInputStream.read(new byte[10], 0, 0);
        assert(result == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadEndReached_pXoo1() throws IOException {
        InputStream in = new ByteArrayInputStream(new byte[]{});
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in);
        int result = compressorInputStream.read(new byte[10], 0, 10);
        assert(result == -1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithSingleBlock_HYDB2() throws IOException {
        byte[] inputData = {0x01, 0x02, 0x03, 0x04};
        InputStream in = new ByteArrayInputStream(inputData);
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] buffer = new byte[4];
        int result = compressorInputStream.read(buffer, 0, 4);
        assert(result == 4);
        assert(buffer[0] == 0x01);
        assert(buffer[1] == 0x02);
        assert(buffer[2] == 0x03);
        assert(buffer[3] == 0x04);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithMultipleBlocks_usWI3() throws IOException {
        byte[] inputData = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
        InputStream in = new ByteArrayInputStream(inputData);
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] buffer = new byte[6];
        int result = compressorInputStream.read(buffer, 0, 6);
        assert(result == 6);
        assert(buffer[0] == 0x01);
        assert(buffer[1] == 0x02);
        assert(buffer[2] == 0x03);
        assert(buffer[3] == 0x04);
        assert(buffer[4] == 0x05);
        assert(buffer[5] == 0x06);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithEndOfStream_KGUu4() throws IOException {
        byte[] inputData = {0x01, 0x02, 0x03};
        InputStream in = new ByteArrayInputStream(inputData);
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] buffer = new byte[5];
        int result = compressorInputStream.read(buffer, 0, 5);
        assert(result == 3);
        assert(buffer[0] == 0x01);
        assert(buffer[1] == 0x02);
        assert(buffer[2] == 0x03);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithConcatenatedBlocks_Vwql5() throws IOException {
        byte[] inputData = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
        InputStream in = new ByteArrayInputStream(inputData);
        FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(in, true);
        byte[] buffer = new byte[6];
        int result = compressorInputStream.read(buffer, 0, 6);
        assert(result == 6);
        assert(buffer[0] == 0x01);
        assert(buffer[1] == 0x02);
        assert(buffer[2] == 0x03);
        assert(buffer[3] == 0x04);
        assert(buffer[4] == 0x05);
        assert(buffer[5] == 0x06);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEndReached_XiUV1() throws IOException {
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
    stream.read(new byte[10], 0, 10);
    int result = stream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_WZpn3() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5, 0}; // 0 indicates end of block
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[5];
    stream.read(buffer, 0, 5);
    int result = stream.read(buffer, 0, 5);
    assertEquals(-1, result); // Expecting -1 since the next block is empty
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadHandlesUncompressed_VEXa5() throws IOException {
    byte[] inputData = {0, 0, 0, 0}; // Uncompressed block
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadHandlesBlockDependency_YbCa6_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Simulating block dependency
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadHandlesBlockDependency_YbCa6_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Simulating block dependency
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEndReached_fvjU1() throws IOException {
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
    stream.read(new byte[10], 0, 0); // Simulate end reached
    int result = stream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_uVud3_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int firstRead = stream.read(buffer, 0, 5);
    int secondRead = stream.read(buffer, 5, 5);
    assertEquals(5, firstRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_uVud3_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int firstRead = stream.read(buffer, 0, 5);
    int secondRead = stream.read(buffer, 5, 5);
    assertEquals(5, secondRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_uVud3_3() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int firstRead = stream.read(buffer, 0, 5);
    int secondRead = stream.read(buffer, 5, 5);
    assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBlockDependency_SSwZ4_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Simulate block dependency expectation
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBlockDependency_SSwZ4_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Simulate block dependency expectation
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_DkVc5_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectContentChecksum = true; // Simulate content checksum expectation
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_DkVc5_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectContentChecksum = true; // Simulate content checksum expectation
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUncompressedData_oKZh6_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.init(true); // Initialize with first frame
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUncompressedData_oKZh6_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.init(true); // Initialize with first frame
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadEndReached_lFKd1() throws IOException {
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
    stream.read(new byte[10], 0, 10); // Simulate end of stream
    int result = stream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_baxw2_1() throws IOException {
    byte[] data = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_baxw2_2() throws IOException {
    byte[] data = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(data, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_zcQz3_1() throws IOException {
    byte[] data = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 10);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNextBlock_zcQz3_2() throws IOException {
    byte[] data = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 10);
    assertArrayEquals(new byte[]{1, 2, 3, 4, 5}, Arrays.copyOf(buffer, 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithChecksumMismatch_VtfE4() throws IOException {
    byte[] data = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[4];
    stream.read(buffer, 0, 4);
    assertThrows(IOException.class, () -> stream.read(buffer, 0, 4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUncompressedBlock_WvpK5_1() throws IOException {
    byte[] data = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUncompressedBlock_WvpK5_2() throws IOException {
    byte[] data = {1, 2, 3, 4, 5};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(data, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithConcatenatedBlocks_ZEdB6_1() throws IOException {
    byte[] data1 = {1, 2, 3, 4};
    byte[] data2 = {5, 6, 7, 8};
    ByteArrayInputStream inputStream = new ByteArrayInputStream(concat(data1, data2));
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(inputStream, true);
    byte[] buffer = new byte[8];
    int result = stream.read(buffer, 0, 8);
    assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithConcatenatedBlocks_ZEdB6_2() throws IOException {
    byte[] data1 = {1, 2, 3, 4};
    byte[] data2 = {5, 6, 7, 8};
    ByteArrayInputStream inputStream = new ByteArrayInputStream(concat(data1, data2));
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(inputStream, true);
    byte[] buffer = new byte[8];
    int result = stream.read(buffer, 0, 8);
    assertArrayEquals(concat(data1, data2), Arrays.copyOf(buffer, 8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_ROQI2_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsData_ROQI2_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsPartialData_TtEj3_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 2);
    assertEquals(2, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsPartialData_TtEj3_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, 2);
    assertArrayEquals(new byte[]{1, 2}, Arrays.copyOf(buffer, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadTriggersNextBlock_qvTx4() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.read(new byte[4], 0, 4); // Read the first block
    stream.nextBlock(); // Manually trigger nextBlock
    int result = stream.read(new byte[4], 0, 4);
    assertEquals(-1, result); // Assuming no more data is available
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectBlockDependency_HmXe5_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Set the flag
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectBlockDependency_HmXe5_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectBlockDependency = true; // Set the flag
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEndReachedAfterNextBlock_YlIz6() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.endReached = true; // Simulate end reached
    stream.nextBlock(); // Call nextBlock
    int result = stream.read(new byte[4], 0, 4);
    assertEquals(-1, result); // Should still return -1
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_nSUk7_1() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectContentChecksum = true; // Set the flag
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_nSUk7_2() throws IOException {
    byte[] inputData = {1, 2, 3, 4};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    stream.expectContentChecksum = true; // Set the flag
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(inputData, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSingleBlock_lbFc2() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00, 0x00}; // Example LZ4 frame
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] output = new byte[10];
    int result = stream.read(output, 0, 10);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBlocks_NctK3_1() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00}; // Example LZ4 frames
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] output = new byte[10];
    int firstRead = stream.read(output, 0, 10);
    int secondRead = stream.read(output, 0, 10);
    assertTrue(firstRead > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBlocks_NctK3_2() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00}; // Example LZ4 frames
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] output = new byte[10];
    int firstRead = stream.read(output, 0, 10);
    int secondRead = stream.read(output, 0, 10);
    assertTrue(secondRead > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEndOfStream_QfJm4() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00}; // Example LZ4 frame
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] output = new byte[10];
    stream.read(output, 0, 10);
    int result = stream.read(output, 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectBlockDependency_ZRXG5() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00}; // Example LZ4 frame
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    stream.expectBlockDependency = true; // Simulate the condition
    byte[] output = new byte[10];
    int result = stream.read(output, 0, 10);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectContentChecksum_azUV6() throws IOException {
    byte[] input = {0x04, 0x00, 0x00, 0x00}; // Example LZ4 frame
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    stream.expectContentChecksum = true; // Simulate the condition
    byte[] output = new byte[10];
    int result = stream.read(output, 0, 10);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidFrame_MhoU7() throws IOException {
    byte[] input = {0x00, 0x00, 0x00, 0x00}; // Invalid LZ4 frame
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] output = new byte[10];
    try {
        stream.read(output, 0, 10);
        fail("Expected IOException due to invalid frame");
    } catch (IOException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSingleBlock_LraJ2() throws IOException {
    byte[] inputData = { /* valid LZ4 compressed data */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] outputBuffer = new byte[10];
    int result = stream.read(outputBuffer, 0, outputBuffer.length);
    assertTrue(result > 0); // Ensure some data was read
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBlocks_xlEV3() throws IOException {
    byte[] inputData = { /* valid LZ4 compressed data with multiple blocks */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] outputBuffer = new byte[10];
    int totalBytesRead = 0;
    while (true) {
        int result = stream.read(outputBuffer, 0, outputBuffer.length);
        if (result == -1) break;
        totalBytesRead += result;
    }
    assertTrue(totalBytesRead > 0); // Ensure some data was read
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithUncompressedBlock_eIaf4() throws IOException {
    byte[] inputData = { /* valid LZ4 compressed data with uncompressed block */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] outputBuffer = new byte[10];
    int result = stream.read(outputBuffer, 0, outputBuffer.length);
    assertTrue(result > 0); // Ensure some data was read
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithChecksum_gXsL5() throws IOException {
    byte[] inputData = { /* valid LZ4 compressed data with checksum */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] outputBuffer = new byte[10];
    int result = stream.read(outputBuffer, 0, outputBuffer.length);
    assertTrue(result > 0); // Ensure some data was read
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksumMismatch_kbFb6() throws IOException {
    byte[] inputData = { /* invalid LZ4 compressed data causing checksum mismatch */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    try {
        stream.read(new byte[10], 0, 10);
        fail("Expected IOException due to checksum mismatch");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Frame header checksum mismatch"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithPrematureEndOfStream_TuqC7() throws IOException {
    byte[] inputData = { /* valid LZ4 compressed data but ends prematurely */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
    byte[] outputBuffer = new byte[10];
    try {
        stream.read(outputBuffer, 0, outputBuffer.length);
        fail("Expected IOException due to premature end of stream");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Premature end of stream"));
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadOnceReturnsNegativeOne_QpEs2() throws IOException {
    ByteArrayInputStream inputStream = new ByteArrayInputStream(new byte[] { /* LZ4 frame data */ });
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(inputStream);
    stream.read(new byte[10], 0, 10); // Simulate reading
    int result = stream.read(new byte[10], 0, 10);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidData_HUIc3() throws IOException {
    byte[] data = new byte[] { /* valid LZ4 compressed data */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, buffer.length);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectBlockDependency_tgrB4() throws IOException {
    byte[] data = new byte[] { /* valid LZ4 compressed data */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    stream.expectBlockDependency = true; // Simulate expectation
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, buffer.length);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithExpectContentChecksum_oBIO5() throws IOException {
    byte[] data = new byte[] { /* valid LZ4 compressed data */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    stream.expectContentChecksum = true; // Simulate expectation
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, buffer.length);
    assertTrue(result > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadAfterNextBlockCalled_GRNK6() throws IOException {
    byte[] data = new byte[] { /* valid LZ4 compressed data */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    stream.nextBlock(); // Call nextBlock to simulate state change
    byte[] buffer = new byte[10];
    int result = stream.read(buffer, 0, buffer.length);
    assertTrue(result >= 0); // Expecting valid read or -1
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBlocks_OmMf7() throws IOException {
    byte[] data = new byte[] { /* valid LZ4 compressed data with multiple blocks */ };
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(data));
    byte[] buffer = new byte[10];
    int totalRead = 0;
    while (true) {
        int result = stream.read(buffer, 0, buffer.length);
        if (result == -1) break;
        totalRead += result;
    }
    assertTrue(totalRead > 0); // Expecting some data to be read
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCount_KEvT0() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream("Test data".getBytes());
    FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(byteArrayInputStream);
    long expectedCount = byteArrayInputStream.available(); // Assuming available bytes are the compressed count
    long actualCount = compressorInputStream.getCompressedCount();
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithCurrentBlockNotNull_enZV0() throws IOException {
    InputStream mockInputStream = Mockito.mock(InputStream.class);
    Closeable mockBlock = Mockito.mock(Closeable.class);
    FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(mockInputStream);
    compressorInputStream.currentBlock = mockBlock;
    compressorInputStream.close();
    Mockito.verify(mockBlock).close();
    Mockito.verify(mockInputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithCurrentBlockNull_Gvuk1() throws IOException {
    InputStream mockInputStream = Mockito.mock(InputStream.class);
    FramedLZ4CompressorInputStream compressorInputStream = new FramedLZ4CompressorInputStream(mockInputStream);
    compressorInputStream.currentBlock = null;
    compressorInputStream.close();
    Mockito.verify(mockInputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadZeroLength_xjxN0() throws IOException {
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[10]));
        int result = stream.read(new byte[5], 0, 0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadEndReached_jQFo1() throws IOException {
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(new byte[0]));
        int result = stream.read(new byte[5], 0, 5);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceReturnsData_CJCE2_1() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[5];
        int result = stream.read(outputData, 0, 5);
        assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnceReturnsData_CJCE2_2() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[5];
        int result = stream.read(outputData, 0, 5);
        assertArrayEquals(inputData, outputData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadPartialData_Zfbi5_1() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[3];
        int result = stream.read(outputData, 0, 3);
        assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadPartialData_Zfbi5_2() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[3];
        int result = stream.read(outputData, 0, 3);
        assertArrayEquals(new byte[]{1, 2, 3}, outputData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadMultipleBlocks_Jlje6_1() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[10];
        int result = stream.read(outputData, 0, 10);
        assertEquals(10, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadMultipleBlocks_Jlje6_2() throws IOException {
        byte[] inputData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(inputData));
        byte[] outputData = new byte[10];
        int result = stream.read(outputData, 0, 10);
        assertArrayEquals(inputData, outputData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSingleByte_VfwQ2_1() throws IOException {
    byte[] input = {0x01};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[1];
    int result = stream.read(buffer, 0, 1);
    assertEquals(1, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithSingleByte_VfwQ2_2() throws IOException {
    byte[] input = {0x01};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[1];
    int result = stream.read(buffer, 0, 1);
    assertEquals(0x01, buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBytes_MfKy3_1() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithMultipleBytes_MfKy3_2() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithPartialBuffer_kfgu4_1() throws IOException {
    byte[] input = {0x01, 0x02, 0x03};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertEquals(3, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithPartialBuffer_kfgu4_2() throws IOException {
    byte[] input = {0x01, 0x02, 0x03};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[5];
    int result = stream.read(buffer, 0, 5);
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x00, 0x00}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBlockDependency_PpBI5_1() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true);
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithBlockDependency_PpBI5_2() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input), true);
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_lJwq6_1() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    stream.expectContentChecksum = true; // Simulate content checksum expectation
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithContentChecksum_lJwq6_2() throws IOException {
    byte[] input = {0x01, 0x02, 0x03, 0x04};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    stream.expectContentChecksum = true; // Simulate content checksum expectation
    byte[] buffer = new byte[4];
    int result = stream.read(buffer, 0, 4);
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04}, buffer);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithEndOfStream_Wpsv7() throws IOException {
    byte[] input = {0x01, 0x02};
    FramedLZ4CompressorInputStream stream = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input));
    byte[] buffer = new byte[4];
    stream.read(buffer, 0, 2);
    int result = stream.read(buffer, 0, 4);
    assertEquals(-1, result);
}
}