/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
ArchiveStreamFactory archivestreamfactory;
InputStream mockInputStream;
I mockArchiveInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory(entryEncoding);
        String archiverName = "zip";
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        O result = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream);
        // Additional assertions can be added based on the expected behavior of the method
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory(entryEncoding);
        String archiverName = "zip";
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        O result = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream);
        // Additional assertions can be added based on the expected behavior of the method
        assertEquals(expectedType, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_MNQQ0_1() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream outputStream = new ByteArrayOutputStream();
    String archiverName = "zip";
    O result = factory.createArchiveOutputStream(archiverName, outputStream);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStream_MNQQ0_2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream outputStream = new ByteArrayOutputStream();
    String archiverName = "zip";
    O result = factory.createArchiveOutputStream(archiverName, outputStream);
    assertTrue(result instanceof ZipArchiveOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithValidArcherName_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "AR";
        String actualEncoding = null;
        I result = archivestreamfactory.createArchiveInputStream(archiverName, mockInputStream, actualEncoding);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithValidArcherName_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "AR";
        String actualEncoding = null;
        I result = archivestreamfactory.createArchiveInputStream(archiverName, mockInputStream, actualEncoding);
        assertTrue(result instanceof ArArchiveInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithNullArchiverName_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = null;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, mockInputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithNullArchiverName_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = null;
        assertEquals("Archiver name must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithNullInputStream_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        String archiverName = "ZIP";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, null, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithNullInputStream_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        String archiverName = "ZIP";
        assertEquals("InputStream must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithUnsupportedArchiver_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "UNKNOWN_ARCHIVER";
        ArchiveException exception = assertThrows(ArchiveException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, mockInputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithUnsupportedArchiver_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "UNKNOWN_ARCHIVER";
        assertEquals("Archiver: UNKNOWN_ARCHIVER not found.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithSevenZArchiver_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "SEVEN_Z";
        StreamingNotSupportedException exception = assertThrows(StreamingNotSupportedException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, mockInputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_WithSevenZArchiver_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        InputStream mockInputStream = Mockito.mock(InputStream.class);
        String archiverName = "SEVEN_Z";
        assertEquals("SEVEN_Z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersReturnsNonNull_ReAb0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveInputStreamProviders();
    assertNotNull("Expected non-null providers map", providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersReturnsUnmodifiableMap_mJsa1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveInputStreamProviders();
    assertThrows(UnsupportedOperationException.class, () -> providers.put("newProvider", new ArchiveStreamProvider()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_LiPa0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> expectedArchiveNames = Sets.newHashSet("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z");
    Set<String> actualArchiveNames = archiveStreamFactory.getInputStreamArchiveNames();
    assertEquals(expectedArchiveNames, actualArchiveNames);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateArchiveInputStream_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        mockInputStream = Mockito.mock(InputStream.class);
        mockArchiveInputStream = Mockito.mock(I.class);
        Mockito.when(archivestreamfactory.createArchiveInputStream(Mockito.any(), Mockito.eq(mockInputStream)))
               .thenReturn(mockArchiveInputStream);
        I result = archivestreamfactory.createArchiveInputStream(mockInputStream);
        Mockito.verify(archivestreamfactory).createArchiveInputStream(Mockito.any(), Mockito.eq(mockInputStream));
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateArchiveInputStream_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        mockInputStream = Mockito.mock(InputStream.class);
        mockArchiveInputStream = Mockito.mock(I.class);
        Mockito.when(archivestreamfactory.createArchiveInputStream(Mockito.any(), Mockito.eq(mockInputStream)))
               .thenReturn(mockArchiveInputStream);
        I result = archivestreamfactory.createArchiveInputStream(mockInputStream);
        Mockito.verify(archivestreamfactory).createArchiveInputStream(Mockito.any(), Mockito.eq(mockInputStream));
        Assertions.assertEquals(mockArchiveInputStream, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_NullArchiverName_HaqO0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        factory.createArchiveInputStream(null, new ByteArrayInputStream(new byte[0]), null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_NullArchiverName_HaqO0_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertEquals("Archiver name must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_NullInputStream_QhDB1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        factory.createArchiveInputStream("ZIP", null, null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_NullInputStream_QhDB1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertEquals("InputStream must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_AR_vBNw2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("AR", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof ArArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ARJ_WithEncoding_LOxm3() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof ArjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ARJ_WithoutEncoding_ydiR4() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("ARJ", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof ArjArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ZIP_WithEncoding_vAkf5() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("ZIP", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof ZipArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ZIP_WithoutEncoding_yGuu6() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("ZIP", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof ZipArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_TAR_WithEncoding_NDXQ7() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("TAR", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof TarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_TAR_WithoutEncoding_sgXX8() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("TAR", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof TarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_JAR_WithEncoding_UAgw9() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("JAR", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof JarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_JAR_WithoutEncoding_BtYX10() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("JAR", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof JarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_APK_WithEncoding_htuq11() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("APK", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof JarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_APK_WithoutEncoding_aMik12() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("APK", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof JarArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_CPIO_WithEncoding_DvVs13() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("CPIO", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof CpioArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_CPIO_WithoutEncoding_xmuw14() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("CPIO", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof CpioArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_DUMP_WithEncoding_mSyE15() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("DUMP", new ByteArrayInputStream(new byte[0]), "UTF-8");
    assertTrue(result instanceof DumpArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_DUMP_WithoutEncoding_hQMV16() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    I result = factory.createArchiveInputStream("DUMP", new ByteArrayInputStream(new byte[0]), null);
    assertTrue(result instanceof DumpArchiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_SevenZ_NotSupported_tbZQ17_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(StreamingNotSupportedException.class, () -> {
        factory.createArchiveInputStream("SEVEN_Z", new ByteArrayInputStream(new byte[0]), null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_SevenZ_NotSupported_tbZQ17_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertEquals("SEVEN_Z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_UnknownArchiver_ifEs18_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(ArchiveException.class, () -> {
        factory.createArchiveInputStream("UNKNOWN", new ByteArrayInputStream(new byte[0]), null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_UnknownArchiver_ifEs18_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertEquals("Archiver: UNKNOWN not found.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamWithValidInput_TsrM0() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream inputStream = new ByteArrayInputStream("valid archive data".getBytes());
    I archiveInputStream = factory.createArchiveInputStream(inputStream);
    assertNotNull(archiveInputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_ekKU0_1() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_ekKU0_2() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_ekKU0_3() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertTrue(providers.containsKey("expectedArchiveName")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        String archiverName = "zip";
        InputStream inputStream = Mockito.mock(InputStream.class);
        I result = archivestreamfactory.createArchiveInputStream(archiverName, inputStream);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        String archiverName = "zip";
        InputStream inputStream = Mockito.mock(InputStream.class);
        I result = archivestreamfactory.createArchiveInputStream(archiverName, inputStream);
        assertEquals(expectedType, result.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithValidArchiverName_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        String archiverName = "ZIP";
        String actualEncoding = "UTF-8";
        ZipArchiveOutputStream zipOutputStream = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream, actualEncoding);
        Mockito.verify(mockOutputStream).flush();
        assertNotNull(zipOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithValidArchiverName_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        String archiverName = "ZIP";
        String actualEncoding = "UTF-8";
        ZipArchiveOutputStream zipOutputStream = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream, actualEncoding);
        Mockito.verify(mockOutputStream).flush();
        assertEquals(zipOutputStream.getEncoding(), actualEncoding);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithNullArchiverName_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveOutputStream(null, mockOutputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithNullArchiverName_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        assertEquals("Archiver name must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithNullOutputStream_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveOutputStream("ZIP", null, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithNullOutputStream_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        assertEquals("OutputStream must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithUnsupportedArchiver_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        Exception exception = assertThrows(ArchiveException.class, () -> {
            archivestreamfactory.createArchiveOutputStream("UNSUPPORTED", mockOutputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithUnsupportedArchiver_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        assertEquals("Archiver: UNSUPPORTED not found.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithSevenZ_1() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        Exception exception = assertThrows(StreamingNotSupportedException.class, () -> {
            archivestreamfactory.createArchiveOutputStream("SEVEN_Z", mockOutputStream, null);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStreamWithSevenZ_2() {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        assertEquals("SEVEN_Z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStream_ValidInput_xZej0() throws ArchiveException {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some test data */});
    String archiverName = "zip"; // Example archiver name
    I result = archiveStreamFactory.createArchiveInputStream(archiverName, inputStream);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_SPxJ0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> expectedNames = Sets.newHashSet("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z");
    Set<String> actualNames = archiveStreamFactory.getOutputStreamArchiveNames();
    assertEquals(expectedNames, actualNames);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetEntryEncoding_bgXz0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    String expectedEncoding = "UTF-8";
    archiveStreamFactory.setEntryEncoding(expectedEncoding);
    assertEquals(expectedEncoding, archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithNullArchiverName_DLzQ0_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        factory.createArchiveOutputStream(null, new ByteArrayOutputStream(), null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithNullOutputStream_gObq1_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        factory.createArchiveOutputStream("ZIP", null, null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithNullOutputStream_gObq1_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertEquals("OutputStream must not be null.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithAR_DHKD2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("AR", out, null);
    assertTrue(result instanceof ArArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithZIP_cgiS3_1() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("ZIP", out, "UTF-8");
    assertTrue(result instanceof ZipArchiveOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithZIP_cgiS3_2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("ZIP", out, "UTF-8");
    assertEquals("UTF-8", ((ZipArchiveOutputStream) result).getEncoding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithTAR_IBAW4() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("TAR", out, null);
    assertTrue(result instanceof TarArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithJAR_hzid5_1() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("JAR", out, "UTF-8");
    assertTrue(result instanceof JarArchiveOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithJAR_hzid5_2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("JAR", out, "UTF-8");
    assertEquals("UTF-8", ((JarArchiveOutputStream) result).getEncoding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithCPIO_lMcM6() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("CPIO", out, null);
    assertTrue(result instanceof CpioArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithSevenZ_BSsq7_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    Exception exception = assertThrows(StreamingNotSupportedException.class, () -> {
        factory.createArchiveOutputStream("SEVEN_Z", out, null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithSevenZ_BSsq7_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    assertEquals("SEVEN_Z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithUnknownArchiver_uGty8_1() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    Exception exception = assertThrows(ArchiveException.class, () -> {
        factory.createArchiveOutputStream("UNKNOWN", out, null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithUnknownArchiver_uGty8_2() {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    assertEquals("Archiver: UNKNOWN not found.", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithZIPAndEncoding_DFQV9_1() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("ZIP", out, "ISO-8859-1");
    assertTrue(result instanceof ZipArchiveOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithZIPAndEncoding_DFQV9_2() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("ZIP", out, "ISO-8859-1");
    assertEquals("ISO-8859-1", ((ZipArchiveOutputStream) result).getEncoding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithTARAndEncoding_BdUM10() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("TAR", out, "UTF-16");
    assertTrue(result instanceof TarArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithJARAndEncoding_oprw11() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("JAR", out, "UTF-32");
    assertTrue(result instanceof JarArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveOutputStreamWithCPIOAndEncoding_eNhF12() throws ArchiveException {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    OutputStream out = new ByteArrayOutputStream();
    O result = factory.createArchiveOutputStream("CPIO", out, "UTF-8");
    assertTrue(result instanceof CpioArchiveOutputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersReturnsNonNull_hFaY0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(providers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersReturnsUnmodifiableMap_hpYa1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> providers = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertThrows(UnsupportedOperationException.class, () -> providers.put("newProvider", new ArchiveStreamProvider()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncodingWithDefaultConstructor_deGW0() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    String encoding = archiveStreamFactory.getEntryEncoding();
    assertNull(encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncodingWithEncodingConstructor_Zbav1() {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    String encoding = archiveStreamFactory.getEntryEncoding();
    assertEquals("UTF-8", encoding);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_1() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_2() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_3() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.containsKey("expectedProviderKey")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_4() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.get("expectedProviderKey") instanceof ArchiveStreamProvider); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_1() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_2() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_3() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_4() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_5() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_6() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_7() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNullInputStream_nWli0() {
    assertThrows(IllegalArgumentException.class, () -> ArchiveStreamFactory.detect(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithZipSignature_jBfB2() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("ZIP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithJarSignature_KMrb3() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("JAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArSignature_QLMY4() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x7F, 'A', 'R', 'C'});
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCpioSignature_TNbk5() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x30, 0x37, 0x30, 0x37});
    assertEquals("CPIO", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArjSignature_cFSH6() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x60, 0xEA, 0x00, 0x00});
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithSevenZSignature_TanP7() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x37, 0x7A, 0xBC, 0xAF});
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithDumpSignature_QdwZ8() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithTarSignature_MEYS9() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61});
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithEmptyStream_evrR11() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithInvalidSignature_KrIf12() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithLargeInputStream_DEox13() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[1024 * 1024]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNonArchiveData_lNpJ15() throws Exception {
    InputStream in = new ByteArrayInputStream("Non-archive data".getBytes());
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCorruptedTar_nTMS16() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_1_fid1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory(entryEncoding);
        String archiverName = "zip";
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        O result = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream);
        // Additional assertions can be added based on the expected behavior of the method
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_3_fid1() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.containsKey("expectedProviderKey")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_4() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.get("expectedProviderKey") instanceof ArchiveStreamProvider); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_1() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_2() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_3() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_4() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_5() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_6() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_7() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNullInputStream_nWli0() {
    assertThrows(IllegalArgumentException.class, () -> ArchiveStreamFactory.detect(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithZipSignature_jBfB2() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("ZIP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithJarSignature_KMrb3() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("JAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArSignature_QLMY4() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x7F, 'A', 'R', 'C'});
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCpioSignature_TNbk5() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x30, 0x37, 0x30, 0x37});
    assertEquals("CPIO", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArjSignature_cFSH6() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x60, 0xEA, 0x00, 0x00});
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithSevenZSignature_TanP7() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x37, 0x7A, 0xBC, 0xAF});
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithDumpSignature_QdwZ8() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithTarSignature_MEYS9() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61});
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithEmptyStream_evrR11() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithInvalidSignature_KrIf12() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithLargeInputStream_DEox13() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[1024 * 1024]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNonArchiveData_lNpJ15() throws Exception {
    InputStream in = new ByteArrayInputStream("Non-archive data".getBytes());
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCorruptedTar_nTMS16() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_1_fid2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory(entryEncoding);
        String archiverName = "zip";
        OutputStream mockOutputStream = Mockito.mock(OutputStream.class);
        O result = archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream);
        // Additional assertions can be added based on the expected behavior of the method
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_3_fid2() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.containsKey("expectedProviderKey")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_PnQQ0_4() {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertTrue(providers.get("expectedProviderKey") instanceof ArchiveStreamProvider); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_1() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_2() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_3() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_4() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_5() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_6() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_siWT0_7() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    ArchiveStreamProvider provider = new ArchiveStreamProvider();
    TreeMap<String, ArchiveStreamProvider> map = new TreeMap<>();
    ArchiveStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNullInputStream_nWli0() {
    assertThrows(IllegalArgumentException.class, () -> ArchiveStreamFactory.detect(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithZipSignature_jBfB2() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("ZIP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithJarSignature_KMrb3() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x50, 0x4B, 0x03, 0x04});
    assertEquals("JAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArSignature_QLMY4() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x7F, 'A', 'R', 'C'});
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCpioSignature_TNbk5() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x30, 0x37, 0x30, 0x37});
    assertEquals("CPIO", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithArjSignature_cFSH6() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x60, 0xEA, 0x00, 0x00});
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithSevenZSignature_TanP7() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x37, 0x7A, 0xBC, 0xAF});
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithDumpSignature_QdwZ8() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithTarSignature_MEYS9() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61});
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithEmptyStream_evrR11() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithInvalidSignature_KrIf12() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x00, 0x00, 0x00, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithLargeInputStream_DEox13() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[1024 * 1024]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNonArchiveData_lNpJ15() throws Exception {
    InputStream in = new ByteArrayInputStream("Non-archive data".getBytes());
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithCorruptedTar_nTMS16() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[]{0x75, 0x73, 0x74, 0x61, 0x00});
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
}
}
}