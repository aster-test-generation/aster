/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_IcBands_Test_Passing {
private Set<IcTuple> innerClasses = new TreeSet<>();
private SegmentHeader segmentHeader;
private CpBands cpBands;
private IcBands icbands;
private Map<String, List<IcTuple>> outerToInner = new HashMap<>();
private int effort = 1;
private int bit16Count;
private OutputStream outputStream;
    private final Set<IcTuple> innerClasses = new TreeSet<>();
    private int bit16Count;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfinaliseBands() throws Exception {
        segmentHeader = Mockito.mock(SegmentHeader.class);
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        innerClasses.add(Mockito.mock(IcTuple.class)); // Adding a mock IcTuple to the set
        iinnerClassess; // Set the innerClasses in icbands
        icbands.finaliseBands();
        Mockito.verify(segmentHeader).setIc_count(innerClasses.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_yylu0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    icBands.finaliseBands();
    assertEquals(0, segmentHeader.getIc_count()); // Assuming innerClasses.size() is 0 for this test
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInnerClassesForOuter_1() throws Exception {
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(new Segment(), 1);
        icbands = new IcBands(segmentHeader, cpBands, 1);
        outerToInner.put("OuterClass", new ArrayList<>(Arrays.asList(new IcTuple(), new IcTuple())));
        // Assuming there's a way to set the outerToInner map in IcBands, e.g., through a constructor or a setter
        ReflectionTestUtils.setField(icbands, "outerToInner", outerToInner);
        List<IcTuple> result = icbands.getInnerClassesForOuter("OuterClass");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInnerClassesForOuter_2() throws Exception {
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(new Segment(), 1);
        icbands = new IcBands(segmentHeader, cpBands, 1);
        outerToInner.put("OuterClass", new ArrayList<>(Arrays.asList(new IcTuple(), new IcTuple())));
        // Assuming there's a way to set the outerToInner map in IcBands, e.g., through a constructor or a setter
        ReflectionTestUtils.setField(icbands, "outerToInner", outerToInner);
        List<IcTuple> result = icbands.getInnerClassesForOuter("OuterClass");
        assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInnerClassesForOuter_isIr0_1() {
    Segment segment = new Segment();
    int effort = 5;
    CpBands cpBands = new CpBands(segment, effort);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, effort);
    List<IcTuple> result = icBands.getInnerClassesForOuter("outerClassName");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInnerClassesForOuter_isIr0_2() {
    Segment segment = new Segment();
    int effort = 5;
    CpBands cpBands = new CpBands(segment, effort);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, effort);
    List<IcTuple> result = icBands.getInnerClassesForOuter("outerClassName");
    assertTrue(result.isEmpty()); // Assuming no inner classes are associated with "outerClassName"}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithPredictableNames_1() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        String outerName = "OuterClass";
        String innerName = "InnerClassName";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        Mockito.when(cpBands.getCPClass(outerName)).thenReturn(2);
        Mockito.when(cpBands.getCPUtf8(innerName)).thenReturn(3);
        icbands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icbands.getInnerClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithPredictableNames_2() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        String outerName = "OuterClass";
        String innerName = "InnerClassName";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        Mockito.when(cpBands.getCPClass(outerName)).thenReturn(2);
        Mockito.when(cpBands.getCPUtf8(innerName)).thenReturn(3);
        icbands.addInnerClass(name, outerName, innerName, flags);
        assertTrue(icbands.getInnerClasses().stream().anyMatch(ic -> ic.getName().equals(name) && ic.getFlags() == flags));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNonPredictableNames_1() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        String outerName = "OuterClass";
        String innerName = "InnerClassName";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        Mockito.when(cpBands.getCPClass(outerName)).thenReturn(2);
        Mockito.when(cpBands.getCPUtf8(innerName)).thenReturn(3);
        icbands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icbands.getInnerClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNonPredictableNames_2() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        String outerName = "OuterClass";
        String innerName = "InnerClassName";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        Mockito.when(cpBands.getCPClass(outerName)).thenReturn(2);
        Mockito.when(cpBands.getCPUtf8(innerName)).thenReturn(3);
        icbands.addInnerClass(name, outerName, innerName, flags);
        assertTrue(icbands.getInnerClasses().stream().anyMatch(ic -> ic.getName().equals(name) && ic.getFlags() == (flags | (1 << 16))));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullOuterAndInnerNames_1() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        icbands.addInnerClass(name, null, null, flags);
        assertEquals(1, icbands.getInnerClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullOuterAndInnerNames_2() throws Exception {
        Segment segment = new Segment();
        SegmentHeader segmentHeader = new SegmentHeader();
        cpBands = Mockito.mock(CpBands.class);
        icbands = new IcBands(segmentHeader, cpBands, 0);
        String name = "InnerClass";
        int flags = 0;
        Mockito.when(cpBands.getCPClass(name)).thenReturn(1);
        icbands.addInnerClass(name, null, null, flags);
        assertTrue(icbands.getInnerClasses().stream().anyMatch(ic -> ic.getName().equals(name) && ic.getFlags() == flags));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcTuple_1() throws Exception {
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(new Segment(), effort);
        icbands = new IcBands(segmentHeader, cpBands, effort);
        CPClass innerClass = Mockito.mock(CPClass.class);
        IcTuple icTuple = Mockito.mock(IcTuple.class);
        Mockito.when(icTuple.C).thenReturn(innerClass);
        innerClasses.add(icTuple);
        // Assuming innerClasses is accessible or set in the IcBands instance
        ReflectionTestUtils.setField(icbands, "innerClasses", innerClasses);
        IcTuple result = icbands.getIcTuple(innerClass);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIcTuple_2() throws Exception {
        segmentHeader = new SegmentHeader();
        cpBands = new CpBands(new Segment(), effort);
        icbands = new IcBands(segmentHeader, cpBands, effort);
        CPClass innerClass = Mockito.mock(CPClass.class);
        IcTuple icTuple = Mockito.mock(IcTuple.class);
        Mockito.when(icTuple.C).thenReturn(innerClass);
        innerClasses.add(icTuple);
        // Assuming innerClasses is accessible or set in the IcBands instance
        ReflectionTestUtils.setField(icbands, "innerClasses", innerClasses);
        IcTuple result = icbands.getIcTuple(innerClass);
        assertEquals(icTuple, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithPredictableNames_hYfx0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "Outer$Inner";
    String outerName = "Outer";
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithNonPredictableNames_McYC1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "Outer$Inner";
    String outerName = "Outer";
    String innerName = "NotInner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithNonPredictableNames_McYC1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "Outer$Inner";
    String outerName = "Outer";
    String innerName = "NotInner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertTrue((icBands.innerClasses.iterator().next().flags & (1 << 16)) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithNullOuterName_GlLH2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "InnerOnly";
    String outerName = null;
    String innerName = "InnerOnly";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithNullInnerName_UqdF3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "Outer$Inner";
    String outerName = "Outer";
    String innerName = null;
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClass_WithBothNullOuterAndInnerNames_mFDh4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
    String name = "JustName";
    String outerName = null;
    String innerName = null;
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithPredictableNames_Wxob0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithPredictableNames_Wxob0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertNotNull(icBands.innerClasses.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithNullOuterName_XihK1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = null;
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithNullOuterName_XihK1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = null;
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertNotNull(icBands.innerClasses.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithExistingTuple_PTKw2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    icBands.addInnerClass(name, outerName, innerName, flags); // Adding again
    assertEquals(1, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithFlagsModification_wvdl3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = "Inner";
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    flags |= 1 << 16; // Modify flags
    icBands.addInnerClass(name, outerName, innerName, flags); // Should add again with modified flags
    assertEquals(2, icBands.innerClasses.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithNullInnerName_irFV4_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = null;
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddInnerClassWithNullInnerName_irFV4_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 10);
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = null;
    int flags = 0;
    icBands.addInnerClass(name, outerName, innerName, flags);
    assertNotNull(icBands.innerClasses.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithPredictableNames_ojgL0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$1";
        String outerName = "OuterClass";
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithPredictableNames_ojgL0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$1";
        String outerName = "OuterClass";
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertNotNull(icBands.getCPClass(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullOuterName_TUhI1_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$2";
        String outerName = null;
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullOuterName_TUhI1_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$2";
        String outerName = null;
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertNotNull(icBands.getCPClass(getOuter(name)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullInnerName_oIRH2_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$3";
        String outerName = "OuterClass";
        String innerName = null;
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithNullInnerName_oIRH2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$3";
        String outerName = "OuterClass";
        String innerName = null;
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertNotNull(icBands.getCPClass(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithUnpredictableNames_ikTF3_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$4";
        String outerName = "OuterClass";
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertEquals(1, icBands.innerClasses.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithUnpredictableNames_ikTF3_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name = "InnerClass$4";
        String outerName = "OuterClass";
        String innerName = "InnerClass";
        int flags = 0;
        icBands.addInnerClass(name, outerName, innerName, flags);
        assertTrue(icBands.innerClasses.get(0).flags & (1 << 16) != 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInnerClassWithMultipleCalls_KLnh4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment, 5);
        SegmentHeader segmentHeader = new SegmentHeader();
        IcBands icBands = new IcBands(segmentHeader, cpBands, 5);
        String name1 = "InnerClass$5";
        String outerName1 = "OuterClass";
        String innerName1 = "InnerClass";
        int flags1 = 0;
        icBands.addInnerClass(name1, outerName1, innerName1, flags1);
        String name2 = "InnerClass$6";
        String outerName2 = "OuterClass";
        String innerName2 = "InnerClass";
        int flags2 = 0;
        icBands.addInnerClass(name2, outerName2, innerName2, flags2);
        assertEquals(2, icBands.innerClasses.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        CpBands cpBands = new CpBands(new Segment(), 0);
        icbands = new IcBands(segmentHeader, cpBands, bit16Count);
        outputStream = Mockito.mock(OutputStream.class);
        IcTuple icTuple1 = Mockito.mock(IcTuple.class);
        IcTuple icTuple2 = Mockito.mock(IcTuple.class);
        innerClasses.add(icTuple1);
        innerClasses.add(icTuple2);
        Mockito.when(icTuple1.C.getIndex()).thenReturn(1);
        Mockito.when(icTuple1.F).thenReturn(1 << 16);
        Mockito.when(icTuple1.C2.getIndex()).thenReturn(2);
        Mockito.when(icTuple1.N.getIndex()).thenReturn(3);
        Mockito.when(icTuple2.C.getIndex()).thenReturn(4);
        Mockito.when(icTuple2.F).thenReturn(0);
        iinnerClassess;
        ibit16Count1;
        icbands.pack(outputStream);
        Mockito.verify(outputStream, Mockito.times(4)).write(Mockito.any(byte[].class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcTuple_ReturnsCorrectIcTuple_WhenInnerClassExists_wwsD0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 1);
    CPUTF8 utf8 = new CPUTF8("InnerClass");
    CPClass innerClass = new CPClass(utf8);
    IcTuple expectedIcTuple = new IcTuple();
    icBands.innerClasses.add(expectedIcTuple);
    IcTuple result = icBands.getIcTuple(innerClass);
    assertEquals(expectedIcTuple, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcTuple_ReturnsNull_WhenInnerClassDoesNotExist_ftei1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 1);
    CPUTF8 utf81 = new CPUTF8("InnerClass1");
    CPUTF8 utf2 = new CPUTF8("InnerClass2");
    CPClass innerClass1 = new CPClass(utf81);
    CPClass innerClass2 = new CPClass(utf2);
    IcTuple icTuple = new IcTuple();
    icBands.innerClasses.add(icTuple);
    IcTuple result = icBands.getIcTuple(innerClass2);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcTuple_ReturnsCorrectIcTuple_WhenMultipleInnerClassesExist_XZgK2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    SegmentHeader segmentHeader = new SegmentHeader();
    IcBands icBands = new IcBands(segmentHeader, cpBands, 1);
    CPUTF8 utf8_1 = new CPUTF8("InnerClass1");
    CPUTF8 utf8_2 = new CPUTF8("InnerClass2");
    CPClass innerClass1 = new CPClass(utf8_1);
    CPClass innerClass2 = new CPClass(utf8_2);
    IcTuple icTuple1 = new IcTuple();
    IcTuple icTuple2 = new IcTuple();
    icBands.innerClasses.add(icTuple1);
    icBands.innerClasses.add(icTuple2);
    IcTuple result = icBands.getIcTuple(innerClass2);
    assertEquals(icTuple2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyInnerClasses_VoMJ0() throws IOException, Pack200Exception {
    IcBands icBands = new IcBands(new SegmentHeader(), new CpBands(new Segment(), 0), 0);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    icBands.pack(outputStream);
    assertEquals(0, outputStream.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSingleInnerClass_LFyG1() throws IOException, Pack200Exception {
    IcTuple icTuple = new IcTuple(new CpBands(new Segment(), 1), 1, null, null);
    List<IcTuple> innerClasses = new ArrayList<>();
    innerClasses.add(icTuple);
    IcBands icBands = new IcBands(new SegmentHeader(), new CpBands(new Segment(), 1), 1);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    icBands.pack(outputStream);
    assertTrue(outputStream.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleInnerClasses_kdSB2() throws IOException, Pack200Exception {
    IcTuple icTuple1 = new IcTuple(new CpBands(new Segment(), 1), 1, null, null);
    IcTuple icTuple2 = new IcTuple(new CpBands(new Segment(), 2), 2, null, null);
    List<IcTuple> innerClasses = new ArrayList<>();
    innerClasses.add(icTuple1);
    innerClasses.add(icTuple2);
    IcBands icBands = new IcBands(new SegmentHeader(), new CpBands(new Segment(), 2), 2);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    icBands.pack(outputStream);
    assertTrue(outputStream.size() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidData_lEmQ4() throws IOException, Pack200Exception {
    IcTuple icTuple = new IcTuple(new CpBands(new Segment(), 1), 1, new CpBands(new Segment(), 2), new CpBands(new Segment(), 3));
    List<IcTuple> innerClasses = new ArrayList<>();
    innerClasses.add(icTuple);
    IcBands icBands = new IcBands(new SegmentHeader(), new CpBands(new Segment(), 1), 1);
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    icBands.pack(outputStream);
    assertTrue(outputStream.size() > 0);
}
}