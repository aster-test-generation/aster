/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
ByteCode bytecode;
CodeAttribute codeAttribute;
OperandManager operandManager;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_nDuN0() {
    ByteCode byteCode = ByteCode.getByteCode(0x00); // Assuming 0x00 is a no-operand opcode
    assertNotNull(byteCode);
    assertEquals(0x00, byteCode.getOpcode());
    assertTrue(ByteCodeForm.get(0x00).hasNoOperand());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_WithOperand_BJOk1() {
    ByteCode byteCode = ByteCode.getByteCode(0x01); // Assuming 0x01 is an operand opcode
    assertNotNull(byteCode);
    assertEquals(0x01, byteCode.getOpcode());
    assertFalse(ByteCodeForm.get(0x01).hasNoOperand());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_CachedNoArgByteCode_XfpR2() {
    ByteCode byteCode1 = ByteCode.getByteCode(0x02); // Assuming 0x02 is a no-operand opcode
    ByteCode byteCode2 = ByteCode.getByteCode(0x02); // Should return the cached instance
    assertSame(byteCode1, byteCode2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Qkah0() {
    ByteCode byteCode = new ByteCode(1);
    int expectedHashCode = byteCode.objectHashCode();
    assertEquals(expectedHashCode, byteCode.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_PIqp0() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[0]; // Assuming an empty array for this test
    ByteCode byteCode = new ByteCode(1, nestedEntries);
    String expectedName = byteCode.getByteCodeForm().getName(); // Assuming this returns a valid name
    String actualName = byteCode.getName();
    assertEquals(expectedName, actualName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNoNestedEntries_HqeE0() {
    ByteCode byteCode = new ByteCode(1); // Using the first constructor
    assertEquals(0, byteCode.getLength()); // Assuming rewrite.length is initialized to 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithNestedEntries_mpRj1() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[2]; // Assuming some nested entries
    ByteCode byteCode = new ByteCode(1, nestedEntries); // Using the second constructor
    assertEquals(2, byteCode.getLength()); // Assuming rewrite.length is equal to the length of nestedEntries
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRewrite_JEYN0() {
    ByteCode byteCode = new ByteCode(1); // Using the first constructor
    int[] expectedRewrite = {}; // Assuming the default value is an empty array
    assertArrayEquals(expectedRewrite, byteCode.getRewrite());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameInstance_JlXH0() {
    ByteCode byteCode = new ByteCode(1);
    assertTrue(byteCode.equals(byteCode));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentInstance_mgWW1() {
    ByteCode byteCode1 = new ByteCode(1);
    ByteCode byteCode2 = new ByteCode(2);
    assertFalse(byteCode1.equals(byteCode2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPositions_yAoE0() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[0]; // Assuming ClassFileEntry has a default constructor
    ByteCode byteCode = new ByteCode(0, nestedEntries);
    int[][] expectedPositions = new int[0][0]; // Expected output based on the initialization
    int[][] actualPositions = byteCode.getNestedPositions();
    assertArrayEquals(expectedPositions, actualPositions);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_Qzty0() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[0]; // Assuming an empty array for simplicity
    ByteCode byteCode = new ByteCode(1, nestedEntries);
    String expectedName = byteCode.getByteCodeForm().getName(); // Assuming this method returns a valid name
    assertEquals(expectedName, byteCode.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNoNestedEntries_vfjA0() {
    ByteCode byteCode = new ByteCode(1);
    ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
    assertNotNull(result);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeTargets_jiQi0() {
    ByteCode byteCode = new ByteCode(1); // Assuming opcode is 1
    int[] expectedTargets = {}; // Replace with expected targets if known
    assertArrayEquals(expectedTargets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeForm_yQxm0() {
    int opcode = 1; // Example opcode
    ByteCode byteCode = new ByteCode(opcode);
    ByteCodeForm expectedForm = ByteCodeForm.get(opcode);
    assertEquals(expectedForm, byteCode.getByteCodeForm());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCodeIndex_zDpX0() {
    ByteCode byteCode = new ByteCode(1); // Assuming opcode is 1
    int expectedOffset = 0; // Assuming default offset is 0, adjust as necessary
    assertEquals(expectedOffset, byteCode.getByteCodeIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpcode_pGhP0() {
    ByteCode byteCode = new ByteCode(10); // Assuming 10 is a valid opcode
    assertEquals(10, byteCode.getOpcode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasMultipleByteCodes_KfhC0() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[2]; // Assuming we need multiple entries
    ByteCode byteCode = new ByteCode(1, nestedEntries);
    assertTrue(byteCode.hasMultipleByteCodes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_nDuN0_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x00); // Assuming 0x00 is a no-operand opcode
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_nDuN0_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x00); // Assuming 0x00 is a no-operand opcode
    assertEquals(0x00, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_NoOperand_nDuN0_3() {
    ByteCode byteCode = ByteCode.getByteCode(0x00); // Assuming 0x00 is a no-operand opcode
    assertTrue(ByteCodeForm.get(0x00).hasNoOperand());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_WithOperand_BJOk1_1() {
    ByteCode byteCode = ByteCode.getByteCode(0x01); // Assuming 0x01 is an operand opcode
    assertNotNull(byteCode);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_WithOperand_BJOk1_2() {
    ByteCode byteCode = ByteCode.getByteCode(0x01); // Assuming 0x01 is an operand opcode
    assertEquals(0x01, byteCode.getOpcode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetByteCode_WithOperand_BJOk1_3() {
    ByteCode byteCode = ByteCode.getByteCode(0x01); // Assuming 0x01 is an operand opcode
    assertFalse(ByteCodeForm.get(0x01).hasNoOperand());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExtractOperands_msqG0_1() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, 
                                                       bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, 
                                                       bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, 
                                                       bcIMethodRef, bcThisField, bcSuperField, 
                                                       bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    Segment segment = new Segment();
    ByteCode byteCode = new ByteCode(0); // Using a sample opcode
    int codeLength = 5; // Sample code length
    byteCode.extractOperands(operandManager, segment, codeLength);
    assertNotNull(operandManager.globalConstantPool());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExtractOperands_msqG0_2() {
    int[] bcCaseCount = new int[10];
    int[] bcCaseValue = new int[10];
    int[] bcByte = new int[10];
    int[] bcShort = new int[10];
    int[] bcLocal = new int[10];
    int[] bcLabel = new int[10];
    int[] bcIntRef = new int[10];
    int[] bcFloatRef = new int[10];
    int[] bcLongRef = new int[10];
    int[] bcDoubleRef = new int[10];
    int[] bcStringRef = new int[10];
    int[] bcClassRef = new int[10];
    int[] bcFieldRef = new int[10];
    int[] bcMethodRef = new int[10];
    int[] bcIMethodRef = new int[10];
    int[] bcThisField = new int[10];
    int[] bcSuperField = new int[10];
    int[] bcThisMethod = new int[10];
    int[] bcSuperMethod = new int[10];
    int[] bcInitRef = new int[10];
    int[] wideByteCodes = new int[10];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, 
                                                       bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, 
                                                       bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, 
                                                       bcIMethodRef, bcThisField, bcSuperField, 
                                                       bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    Segment segment = new Segment();
    ByteCode byteCode = new ByteCode(0); // Using a sample opcode
    int codeLength = 5; // Sample code length
    byteCode.extractOperands(operandManager, segment, codeLength);
    assertEquals(5, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNoNestedEntries_vfjA0_1() {
    ByteCode byteCode = new ByteCode(1);
    ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesWithNoNestedEntries_vfjA0_2() {
    ByteCode byteCode = new ByteCode(1);
    ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_ValidInput_hSdH0_PTJK0_1() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperand2Bytes(0x1234, 0);
    int firstIndex = byteCode.getByteCodeForm().firstOperandIndex();
    assertEquals(0x12, byteCode.getRewrite()[firstIndex]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperand2Bytes_ValidInput_hSdH0_PTJK0_2() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setOperand2Bytes(0x1234, 0);
    int firstIndex = byteCode.getByteCodeForm().firstOperandIndex();
    assertEquals(0x34, byteCode.getRewrite()[firstIndex + 1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedMustStartClassPool_qblz0_sMvK0() {
    int opcode = 1; // Example opcode
    ClassFileEntry[] nested = new ClassFileEntry[0]; // Example nested array
    ByteCode byteCodeForm = new ByteCode(opcode, nested);
    boolean result = byteCodeForm.nestedMustStartClassPool();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytesWithValidOperands_LKJe0_cEbw0() {
    ByteCode byteCode = new ByteCode(1);
    int[] operands = {10, 20, 30};
    byteCode.setOperandBytes(operands);
    int[] expectedRewrite = {0, 10, 20, 30};
    assertArrayEquals(expectedRewrite, byteCode.getRewrite()); // Assuming getRewrite() is a valid method
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOperandBytesWithZeroOperands_LRXe3_lQYp0() {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setByteCodeIndex(0);
    try {
        java.lang.reflect.Field rewriteField = ByteCode.class.getDeclaredField("rewrite");
        rewriteField.setAccessible(true);
        int[] rewrite = (int[]) rewriteField.get(byteCode);
        assertArrayEquals(new int[]{0}, rewrite);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        fail("Reflection access failed: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeTargets_llFg0_VIae0() {
    ByteCode byteCode = new ByteCode(1);
    int[] targets = {1, 2, 3};
    byteCode.setByteCodeTargets(targets);
    assertArrayEquals(targets, byteCode.getByteCodeTargets());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRewrite_mbKs0_jTmL0() {
    ByteCode byteCode = new ByteCode(1);
    int[] expectedRewrite = {1, 2, 3};
    byteCode.setRewrite(expectedRewrite);
    int[] actualRewrite = byteCode.getRewrite(); // Assuming a getter method exists
    assertArrayEquals(expectedRewrite, actualRewrite);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedPosition_ValidIndex_eman0_EzYI0() {
    ClassFileEntry[] nestedEntries = new ClassFileEntry[2]; // Assuming ClassFileEntry is a valid class
    ByteCode byteCode = new ByteCode(1, nestedEntries);
    int[] expectedPositions = {0, 1}; // Assuming these are the expected positions for the test
    ByteCode spyByteCode = Mockito.spy(byteCode);
    Mockito.doReturn(expectedPositions).when(spyByteCode).getNestedPositions();
    int[] result = spyByteCode.getNestedPosition(1);
    assertArrayEquals(new int[]{1}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedPositions_Fhuc0_Ppkq0() throws Exception {
    ByteCode byteCode = new ByteCode(1);
    int[][] expectedNestedPositions = {{1, 2}, {3, 4}};
    byteCode.setNestedPositions(expectedNestedPositions);
    java.lang.reflect.Field nestedPositionsField = ByteCode.class.getDeclaredField("nestedPositions");
    nestedPositionsField.setAccessible(true);
    int[][] actualNestedPositions = (int[][]) nestedPositionsField.get(byteCode);
    assertArrayEquals(expectedNestedPositions, actualNestedPositions);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetByteCodeIndex_RBMp0_otSg0() throws NoSuchFieldException, IllegalAccessException {
    ByteCode byteCode = new ByteCode(1);
    byteCode.setByteCodeIndex(10);
    Field field = ByteCode.class.getDeclaredField("byteCodeOffset");
    field.setAccessible(true);
    assertEquals(10, field.getInt(byteCode));
}
}