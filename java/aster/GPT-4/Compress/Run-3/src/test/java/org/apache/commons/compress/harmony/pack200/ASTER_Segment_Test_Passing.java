/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Archive.PackingFile;
import org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Segment_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitSourceWithoutDebug_qxBK0() {
    Segment segment = new Segment();
    String source = "example.java";
    String debug = "debugInfo";
    segment.visitSource(source, debug);
    assertTrue(segment.classBands.containsSourceFile(source));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitSourceWithDebug_tABG1() {
    Segment segment = new Segment();
    String source = "example.java";
    String debug = "debugInfo";
    segment.visitSource(source, debug);
    assertFalse(segment.classBands.containsSourceFile(source));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentClassReader_gYPw0_1() {
    Segment segment = new Segment();
    Pack200ClassReader classReader = segment.getCurrentClassReader();
    assertNotNull(classReader);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentClassReader_gYPw0_2() {
    Segment segment = new Segment();
    Pack200ClassReader classReader = segment.getCurrentClassReader();
    assertTrue(classReader.hasSyntheticAttributes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCurrentClassReader_gYPw0_3() {
    Segment segment = new Segment();
    Pack200ClassReader classReader = segment.getCurrentClassReader();
    assertEquals("ExpectedFileName", classReader.getFileName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitEnd_yFVM0() {
    Segment segment = new Segment();
    boolean result = segment.visitEnd();
    assertTrue(result); // Assuming endOfClass() returns true on success
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_wPyv0_1() {
    Segment segment = new Segment();
    ClassBands expectedClassBands = new ClassBands(); // Assuming a default constructor initializes it properly
    ClassBands actualClassBands = segment.getClassBands();
    assertNotNull(actualClassBands);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassBands_wPyv0_2() {
    Segment segment = new Segment();
    ClassBands expectedClassBands = new ClassBands(); // Assuming a default constructor initializes it properly
    ClassBands actualClassBands = segment.getClassBands();
    assertEquals(expectedClassBands.getClass(), actualClassBands.getClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidSegmentUnit_eyfu0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(false);
    options.setEffort(1);
    options.setKeepDeflateHint(true);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.getPackedByteAmount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidSegmentUnit_eyfu0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(false);
    options.setEffort(1);
    options.setKeepDeflateHint(true);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.fileListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidSegmentUnit_eyfu0_3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(false);
    options.setEffort(1);
    options.setKeepDeflateHint(true);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.classListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_NkKi1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(true);
    options.setEffort(2);
    options.setKeepDeflateHint(false);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertTrue(segmentUnit.getPackedByteAmount() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_NkKi1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(true);
    options.setEffort(2);
    options.setKeepDeflateHint(false);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.fileListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithStripDebug_NkKi1_3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(0);
    options.setStripDebug(true);
    options.setEffort(2);
    options.setKeepDeflateHint(false);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.classListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFiles_QTzF2_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(100);
    options.setStripDebug(false);
    options.setEffort(3);
    options.addPassFile("testFile.class");
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertTrue(segmentUnit.getPackedByteAmount() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFiles_QTzF2_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(100);
    options.setStripDebug(false);
    options.setEffort(3);
    options.addPassFile("testFile.class");
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(1, segmentUnit.fileListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithMultipleFiles_QTzF2_3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    segmentUnit.addPackedByteAmount(100);
    options.setStripDebug(false);
    options.setEffort(3);
    options.addPassFile("testFile.class");
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.classListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptySegmentUnit_bDCr3_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    options.setStripDebug(false);
    options.setEffort(1);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.getPackedByteAmount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptySegmentUnit_bDCr3_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    options.setStripDebug(false);
    options.setEffort(1);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.fileListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptySegmentUnit_bDCr3_3() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    SegmentUnit segmentUnit = new SegmentUnit();
    PackingOptions options = new PackingOptions();
    options.setStripDebug(false);
    options.setEffort(1);
    segment.pack(segmentUnit, new ByteArrayOutputStream(), options);
    assertEquals(0, segmentUnit.classListSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitField_BLkJ0_1() {
    Segment segment = new Segment();
    int flags = 1;
    String name = "fieldName";
    String desc = "fieldDesc";
    String signature = "fieldSignature";
    Object value = "fieldValue";
    FieldVisitor result = segment.visitField(flags, name, desc, signature, value);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitField_BLkJ0_2() {
    Segment segment = new Segment();
    int flags = 1;
    String name = "fieldName";
    String desc = "fieldDesc";
    String signature = "fieldSignature";
    Object value = "fieldValue";
    FieldVisitor result = segment.visitField(flags, name, desc, signature, value);
    assertEquals(fieldVisitor, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitField_BLkJ0_3() {
    Segment segment = new Segment();
    int flags = 1;
    String name = "fieldName";
    String desc = "fieldDesc";
    String signature = "fieldSignature";
    Object value = "fieldValue";
    FieldVisitor result = segment.visitField(flags, name, desc, signature, value);
    assertTrue(classBands.containsField(flags, name, desc, signature, value));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLastConstantHadWideIndex_kSsn0() {
    Segment segment = new Segment();
    boolean result = segment.lastConstantHadWideIndex();
    assertTrue("Expected lastConstantHadWideIndex to return true", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_UnknownAttribute_PassAction_NeaD0() {
    Segment segment = new Segment();
    Attribute attribute = new Attribute(true); // Assuming constructor takes a boolean for isUnknown
    PackingOptions options = new PackingOptions(PackingOptions.PASS);
    segment.setOptions(options); // Assuming a method to set options
    assertThrows(PassException.class, () -> segment.visitAttribute(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_UnknownAttribute_ErrorAction_KMQH1() {
    Segment segment = new Segment();
    Attribute attribute = new Attribute(true);
    PackingOptions options = new PackingOptions(PackingOptions.ERROR);
    segment.setOptions(options);
    assertThrows(Error.class, () -> segment.visitAttribute(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_NewAttribute_UnknownContextClass_PassAction_tgfC2() {
    Segment segment = new Segment();
    NewAttribute newAttribute = new NewAttribute(true, AttributeDefinitionBands.CONTEXT_CLASS); // Assuming constructor takes boolean and context
    PackingOptions options = new PackingOptions(PackingOptions.PASS);
    segment.setOptions(options);
    assertThrows(PassException.class, () -> segment.visitAttribute(newAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_NewAttribute_UnknownContextClass_ErrorAction_giRN3() {
    Segment segment = new Segment();
    NewAttribute newAttribute = new NewAttribute(true, AttributeDefinitionBands.CONTEXT_CLASS);
    PackingOptions options = new PackingOptions(PackingOptions.ERROR);
    segment.setOptions(options);
    assertThrows(Error.class, () -> segment.visitAttribute(newAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_NewAttribute_KnownContextClass_FJBT4() {
    Segment segment = new Segment();
    NewAttribute newAttribute = new NewAttribute(false, AttributeDefinitionBands.CONTEXT_CLASS);
    PackingOptions options = new PackingOptions(PackingOptions.PASS);
    segment.setOptions(options);
    segment.visitAttribute(newAttribute);
    assertTrue(segment.classBands.contains(newAttribute)); // Assuming classBands has a method to check for the attribute
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_UnexpectedAttribute_wxOW5() {
    Segment segment = new Segment();
    Attribute unexpectedAttribute = new UnexpectedAttribute(); // Assuming this is an unexpected type
    assertThrows(IllegalArgumentException.class, () -> segment.visitAttribute(unexpectedAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_NewAttribute_UnknownClassAttribute_PassAction_SDqF6() {
    Segment segment = new Segment();
    NewAttribute newAttribute = new NewAttribute(true, AttributeDefinitionBands.UNKNOWN_CLASS); // Assuming this is an unknown class
    PackingOptions options = new PackingOptions(PackingOptions.PASS);
    segment.setOptions(options);
    assertThrows(PassException.class, () -> segment.visitAttribute(newAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAttribute_NewAttribute_UnknownClassAttribute_ErrorAction_OzjM7() {
    Segment segment = new Segment();
    NewAttribute newAttribute = new NewAttribute(true, AttributeDefinitionBands.UNKNOWN_CLASS);
    PackingOptions options = new PackingOptions(PackingOptions.ERROR);
    segment.setOptions(options);
    assertThrows(Error.class, () -> segment.visitAttribute(newAttribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisit_mWiT0_1() {
    Segment segment = new Segment();
    int version = 1;
    int access = 0;
    String name = "TestClass";
    String signature = "LTestClass;";
    String superName = "SuperClass";
    String[] interfaces = new String[]{"Interface1", "Interface2"};
    segment.visit(version, access, name, signature, superName, interfaces);
    assertEquals("TestClass", bcBands.getCurrentClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisit_mWiT0_2() {
    Segment segment = new Segment();
    int version = 1;
    int access = 0;
    String name = "TestClass";
    String signature = "LTestClass;";
    String superName = "SuperClass";
    String[] interfaces = new String[]{"Interface1", "Interface2"};
    segment.visit(version, access, name, signature, superName, interfaces);
    assertEquals("SuperClass", bcBands.getCurrentSuperName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisit_mWiT0_3() {
    Segment segment = new Segment();
    int version = 1;
    int access = 0;
    String name = "TestClass";
    String signature = "LTestClass;";
    String superName = "SuperClass";
    String[] interfaces = new String[]{"Interface1", "Interface2"};
    segment.visit(version, access, name, signature, superName, interfaces);
    assertEquals(1, segmentHeader.getMajorVersion());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisit_mWiT0_4() {
    Segment segment = new Segment();
    int version = 1;
    int access = 0;
    String name = "TestClass";
    String signature = "LTestClass;";
    String superName = "SuperClass";
    String[] interfaces = new String[]{"Interface1", "Interface2"};
    segment.visit(version, access, name, signature, superName, interfaces);
    assertTrue(classBands.containsClass(version, access, name, signature, superName, interfaces));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSegmentHeader_cebc0_1() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = segment.getSegmentHeader();
    assertNotNull(segmentHeader);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSegmentHeader_cebc0_2() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = segment.getSegmentHeader();
    assertEquals(0, segmentHeader.getDefaultMajorVersion());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSegmentHeader_cebc0_3() {
    Segment segment = new Segment();
    SegmentHeader segmentHeader = segment.getSegmentHeader();
    assertEquals(0, segmentHeader.getArchive_modtime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitOuterClass_xUbJ0() {
    Segment segment = new Segment();
    String owner = "OwnerClass";
    String name = "methodName";
    String desc = "(I)V";
    segment.visitOuterClass(owner, name, desc);
    verify(classBands).addEnclosingMethod(owner, name, desc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrBands_QqPl0_1() {
    Segment segment = new Segment();
    AttributeDefinitionBands attrBands = segment.getAttrBands();
    assertNotNull(attrBands);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrBands_QqPl0_2() {
    Segment segment = new Segment();
    AttributeDefinitionBands attrBands = segment.getAttrBands();
    assertNotNull(attrBands.getMethodAttributeLayouts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrBands_QqPl0_3() {
    Segment segment = new Segment();
    AttributeDefinitionBands attrBands = segment.getAttrBands();
    assertNotNull(attrBands.getCodeAttributeLayouts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrBands_QqPl0_4() {
    Segment segment = new Segment();
    AttributeDefinitionBands attrBands = segment.getAttrBands();
    assertNotNull(attrBands.getClassAttributeLayouts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttrBands_QqPl0_5() {
    Segment segment = new Segment();
    AttributeDefinitionBands attrBands = segment.getAttrBands();
    assertNotNull(attrBands.getFieldAttributeLayouts());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpBands_abzM0() {
    Segment segment = new Segment();
    CpBands cpBands = segment.getCpBands();
    assertNotNull(cpBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitInnerClass_emnU0() {
    Segment segment = new Segment();
    String name = "InnerClass";
    String outerName = "OuterClass";
    String innerName = "InnerClassName";
    int flags = 1;
    segment.visitInnerClass(name, outerName, innerName, flags);
    assertTrue(icBands.containsInnerClass(name, outerName, innerName, flags));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitMethod_GCvz0() {
    Segment segment = new Segment();
    int flags = 1; // Example flag
    String name = "testMethod";
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    String desc = "_kxrP1()V"; // Example descriptor for a void method
    String signature = null; // No signature
    String[] exceptions = new String[] {"java/lang/Exception"}; // Example exceptions
    MethodVisitor result = segment.visitMethod(flags, name, desc, signature, exceptions);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIcBands_TZYq0() {
    Segment segment = new Segment();
    IcBands icBands = segment.getIcBands();
    assertNotNull(icBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAnnotation_kzsr0_1() {
    Segment segment = new Segment();
    String desc = "Lcom/example/MyAnnotation;";
    boolean visible = true;
    AnnotationVisitor result = segment.visitAnnotation(desc, visible);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAnnotation_kzsr0_2() {
    Segment segment = new Segment();
    String desc = "Lcom/example/MyAnnotation;";
    boolean visible = true;
    AnnotationVisitor result = segment.visitAnnotation(desc, visible);
    assertTrue(result instanceof SegmentAnnotationVisitor);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAnnotation_kzsr0_3() {
    Segment segment = new Segment();
    String desc = "Lcom/example/MyAnnotation;";
    boolean visible = true;
    AnnotationVisitor result = segment.visitAnnotation(desc, visible);
    assertEquals(MetadataBandGroup.CONTEXT_CLASS, ((SegmentAnnotationVisitor) result).getContext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAnnotation_kzsr0_4() {
    Segment segment = new Segment();
    String desc = "Lcom/example/MyAnnotation;";
    boolean visible = true;
    AnnotationVisitor result = segment.visitAnnotation(desc, visible);
    assertEquals(desc, ((SegmentAnnotationVisitor) result).getDescription());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVisitAnnotation_kzsr0_5() {
    Segment segment = new Segment();
    String desc = "Lcom/example/MyAnnotation;";
    boolean visible = true;
    AnnotationVisitor result = segment.visitAnnotation(desc, visible);
    assertEquals(visible, ((SegmentAnnotationVisitor) result).isVisible());}
}