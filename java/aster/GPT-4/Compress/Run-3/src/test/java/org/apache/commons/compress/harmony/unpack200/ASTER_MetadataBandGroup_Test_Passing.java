/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_MetadataBandGroup_Test_Passing {
private static CPUTF8 rvpaUTF8;
MetadataBandGroup metadatabandgroup;
private static CPUTF8 riaUTF8;
private static CPUTF8 rvaUTF8;
MetadataBandGroup metadataBandGroup;
private Segment segment;
private CpBands cpBands;
private static CPUTF8 ripaUTF8;
    private int caseJ_KJ_Index;
    private List<Attribute> attributes;
    private int caseet_RS_Index;
    private int caseI_KI_Index;
    private int casec_RS_Index;
    private int caseF_KF_Index;
    private int caseec_RU_Index;
    private int cases_RU_Index;
    private int casearray_N_Index;
    private int T_index;
    private final String type;
    private Iterator<CPUTF8> nestname_RU_Iterator;
    private int pair_N_Index;
    private int nesttype_RS_Index;
    private int anno_N_Index;
    private int nestpair_N_Index;
    private int caseD_KD_Index;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRvpaAttributeName_1() throws Exception {
        metadatabandgroup = new MetadataBandGroup("testType", new CpBands(new Segment()));
        CPUTF8 cpUTF8Value = new CPUTF8("testValue");
        MetadataBandGroup.setRvpaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable rvpaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("rvpaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRvpaAttributeName_2() throws Exception {
        metadatabandgroup = new MetadataBandGroup("testType", new CpBands(new Segment()));
        CPUTF8 cpUTF8Value = new CPUTF8("testValue");
        MetadataBandGroup.setRvpaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable rvpaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("rvpaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertEquals(cpUTF8Value, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRvpaAttributeName_BIEC0() {
    CPUTF8 cpUTF8Value = new CPUTF8("TestValue");
    MetadataBandGroup.setRvpaAttributeName(cpUTF8Value);
    assertEquals(cpUTF8Value, MetadataBandGroup.rvpaUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRiaAttributeName_1() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        metadatabandgroup = new MetadataBandGroup("testType", cpBands);
        CPUTF8 cpUTF8Value = new CPUTF8("testString");
        MetadataBandGroup.setRiaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable riaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("riaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRiaAttributeName_2() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        metadatabandgroup = new MetadataBandGroup("testType", cpBands);
        CPUTF8 cpUTF8Value = new CPUTF8("testString");
        MetadataBandGroup.setRiaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable riaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("riaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertEquals(cpUTF8Value, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRiaAttributeName_EIHL0() {
    CPUTF8 cpUTF8Value = new CPUTF8("testString");
    MetadataBandGroup.setRiaAttributeName(cpUTF8Value);
    assertEquals(cpUTF8Value, MetadataBandGroup.riaUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRvaAttributeName() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        metadataBandGroup = new MetadataBandGroup("testType", cpBands);
        CPUTF8 cpUTF8Value = new CPUTF8("testString");
        MetadataBandGroup.setRvaAttributeName(cpUTF8Value);
        // Using reflection to access the private static variable
        Field field = MetadataBandGroup.class.getDeclaredField("rvaUTF8");
        field.setAccessible(true);
        CPUTF8 actualValue = (CPUTF8) field.get(null);
        assertEquals(cpUTF8Value, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRvaAttributeName_HHOH0() {
    CPUTF8 cpUTF8Value = new CPUTF8("TestName");
    MetadataBandGroup.setRvaAttributeName(cpUTF8Value);
    assertEquals(cpUTF8Value, MetadataBandGroup.rvaUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributes_1() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment);
        metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        // Assuming name_RU is set and other necessary fields are initialized
        // You would typically mock or set these fields for a complete test
        // For example, if name_RU is an array of CPUTF8, you would initialize it here
        // After setting up the necessary fields, call getAttributes again
        // attributes = metadataBandGroup.getAttributes();
        // Add assertions based on expected behavior
        // assertEquals(expectedSize, attributes.size());
        // assertTrue(attributes.get(0) instanceof ExpectedAttributeType);
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributes_2() throws Exception {
        segment = new Segment();
        cpBands = new CpBands(segment);
        metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        // Assuming name_RU is set and other necessary fields are initialized
        // You would typically mock or set these fields for a complete test
        // For example, if name_RU is an array of CPUTF8, you would initialize it here
        // After setting up the necessary fields, call getAttributes again
        // attributes = metadataBandGroup.getAttributes();
        // Add assertions based on expected behavior
        // assertEquals(expectedSize, attributes.size());
        // assertTrue(attributes.get(0) instanceof ExpectedAttributeType);
        assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRVAType_OTvJ0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRVAType_OTvJ0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRIAType_nHFj1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRIAType_nHFj1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRVPAType_ToHs2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRVPAType_ToHs2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRIPAType_huVE3_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIPA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithRIPAType_huVE3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIPA", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithADType_hZyN4_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithADType_hZyN4_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithNullNameRU_ggtF5_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = null; // Simulating null name_RU
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithNullNameRU_ggtF5_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = null; // Simulating null name_RU
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithEmptyNameRU_WIvx6_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[0]; // Simulating empty name_RU
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithEmptyNameRU_WIvx6_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[0]; // Simulating empty name_RU
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithMultipleAnnotations_wYae7_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.anno_N = new int[]{1, 2}; // Simulating multiple annotations
    metadataBandGroup.type_RS = new CPUTF8[]{new CPUTF8("type1"), new CPUTF8("type2")};
    metadataBandGroup.pair_N = new int[]{1, 1};
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithMultipleAnnotations_wYae7_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.anno_N = new int[]{1, 2}; // Simulating multiple annotations
    metadataBandGroup.type_RS = new CPUTF8[]{new CPUTF8("type1"), new CPUTF8("type2")};
    metadataBandGroup.pair_N = new int[]{1, 1};
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithParameterAttributes_BUJR8_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[]{1, 2}; // Simulating parameter attributes
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithParameterAttributes_BUJR8_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[]{1, 2}; // Simulating parameter attributes
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithAnnotationDefault_tuOo9_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    metadataBandGroup.T = new int[]{1, 2}; // Simulating annotation defaults
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithAnnotationDefault_tuOo9_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    metadataBandGroup.T = new int[]{1, 2}; // Simulating annotation defaults
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithInvalidType_NIlv10_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("INVALID", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithInvalidType_NIlv10_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("INVALID", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRipaAttributeName_1() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        metadatabandgroup = new MetadataBandGroup("testType", cpBands);
        CPUTF8 cpUTF8Value = new CPUTF8("testString");
        MetadataBandGroup.setRipaAttributeName(cpUTF8Value);
        // Using reflection to access the private static variable ripaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("ripaUTF8");
        field.setAccessible(true);
        CPUTF8 actualValue = (CPUTF8) field.get(null);
        assertNotNull(actualValue);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRipaAttributeName_2() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        metadatabandgroup = new MetadataBandGroup("testType", cpBands);
        CPUTF8 cpUTF8Value = new CPUTF8("testString");
        MetadataBandGroup.setRipaAttributeName(cpUTF8Value);
        // Using reflection to access the private static variable ripaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("ripaUTF8");
        field.setAccessible(true);
        CPUTF8 actualValue = (CPUTF8) field.get(null);
        assertEquals(cpUTF8Value, actualValue);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRipaAttributeName_ZCII0() {
    CPUTF8 cpUTF8Value = new CPUTF8("testValue");
    MetadataBandGroup.setRipaAttributeName(cpUTF8Value);
    assertEquals(cpUTF8Value, MetadataBandGroup.ripaUTF8);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPA_hcFE2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRIPA_AtaH3_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeAD_JtnJ4_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithEmptyNameRU_gDRb6_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.name_RU = new String[0]; // Simulating empty name_RU
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithEmptyNameRU_gDRb6_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.name_RU = new String[0]; // Simulating empty name_RU
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithMultipleAnnotations_hAKi7_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.anno_N = new int[]{2, 3}; // Simulating multiple annotations
        metadataBandGroup.type_RS = new String[]{"Type1", "Type2"};
        metadataBandGroup.pair_N = new int[][]{{1, 2}, {2, 1}};
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithMultipleAnnotations_hAKi7_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.anno_N = new int[]{2, 3}; // Simulating multiple annotations
        metadataBandGroup.type_RS = new String[]{"Type1", "Type2"};
        metadataBandGroup.pair_N = new int[][]{{1, 2}, {2, 1}};
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithParameterAnnotations_tmse8_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        metadataBandGroup.param_NB = new int[]{1, 2}; // Simulating parameter annotations
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithParameterAnnotations_tmse8_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        metadataBandGroup.param_NB = new int[]{1, 2}; // Simulating parameter annotations
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithInvalidType_yyTq9_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("INVALID_TYPE", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithInvalidType_yyTq9_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("INVALID_TYPE", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithNestedNameRU_XqMX10_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.nestname_RU = new String[]{"nestedName1", "nestedName2"}; // Simulating nested names
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithNestedNameRU_XqMX10_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        metadataBandGroup.nestname_RU = new String[]{"nestedName1", "nestedName2"}; // Simulating nested names
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertFalse(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeAD_xqeI0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    for (int i = 0; i < T.length; i++) {
    }
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeAD_xqeI0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    for (int i = 0; i < T.length; i++) {
    }
    assertEquals(T.length, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeAD_xqeI0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    for (int i = 0; i < T.length; i++) {
    }
        assertTrue(attributes.get(i) instanceof AnnotationDefaultAttribute);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVA_PXtu1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") };
    metadataBandGroup.anno_N = new int[] { 1, 2 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1"), new CPUTF8("type2") };
    metadataBandGroup.pair_N = new int[] { 1, 2 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVA_PXtu1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") };
    metadataBandGroup.anno_N = new int[] { 1, 2 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1"), new CPUTF8("type2") };
    metadataBandGroup.pair_N = new int[] { 1, 2 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVPA_RcVl2_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[] { 1, 2, 3 };
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1"), new CPUTF8("param2") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVPA_RcVl2_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[] { 1, 2, 3 };
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1"), new CPUTF8("param2") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(3, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRIA_VyOI3_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1") };
    metadataBandGroup.anno_N = new int[] { 1 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1") };
    metadataBandGroup.pair_N = new int[] { 1 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRIA_VyOI3_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1") };
    metadataBandGroup.anno_N = new int[] { 1 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1") };
    metadataBandGroup.pair_N = new int[] { 1 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(1, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithEmptyNameRU_mgWM4_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = null;
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithEmptyNameRU_mgWM4_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = null;
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeUnknown_anXs5_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("UNKNOWN", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeUnknown_anXs5_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("UNKNOWN", cpBands);
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithMultipleAnnotations_VdUA6_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") };
    metadataBandGroup.anno_N = new int[] { 1, 2 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1"), new CPUTF8("type2") };
    metadataBandGroup.pair_N = new int[] { 1, 2 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.get(0) instanceof Annotation);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithMultipleAnnotations_VdUA6_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1"), new CPUTF8("name2") };
    metadataBandGroup.anno_N = new int[] { 1, 2 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1"), new CPUTF8("type2") };
    metadataBandGroup.pair_N = new int[] { 1, 2 };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.get(1) instanceof Annotation);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithNestedAnnotations_kgHx7_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1") };
    metadataBandGroup.anno_N = new int[] { 1 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1") };
    metadataBandGroup.pair_N = new int[] { 1 };
    metadataBandGroup.nestname_RU = new CPUTF8[] { new CPUTF8("nestedName") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithNestedAnnotations_kgHx7_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1") };
    metadataBandGroup.anno_N = new int[] { 1 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1") };
    metadataBandGroup.pair_N = new int[] { 1 };
    metadataBandGroup.nestname_RU = new CPUTF8[] { new CPUTF8("nestedName") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(1, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithNestedAnnotations_kgHx7_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("name1") };
    metadataBandGroup.anno_N = new int[] { 1 };
    metadataBandGroup.type_RS = new CPUTF8[] { new CPUTF8("type1") };
    metadataBandGroup.pair_N = new int[] { 1 };
    metadataBandGroup.nestname_RU = new CPUTF8[] { new CPUTF8("nestedName") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.get(0) instanceof Annotation);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVPAAndEmptyParams_QUGA8_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[] {};
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRVPAAndEmptyParams_QUGA8_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
    metadataBandGroup.param_NB = new int[] {};
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRIPA_Lcvv9_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIPA", cpBands);
    metadataBandGroup.param_NB = new int[] { 1, 2 };
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1"), new CPUTF8("param2") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributesWithTypeRIPA_Lcvv9_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RIPA", cpBands);
    metadataBandGroup.param_NB = new int[] { 1, 2 };
    metadataBandGroup.name_RU = new CPUTF8[] { new CPUTF8("param1"), new CPUTF8("param2") };
    List<Attribute> attributes = metadataBandGroup.getAttributes();
    assertEquals(2, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeNotInConditions_hIsK7_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("UNKNOWN_TYPE", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeNotInConditions_hIsK7_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("UNKNOWN_TYPE", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithMultipleCalls_LGHY8() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> firstCall = metadataBandGroup.getAttributes();
        List<Attribute> secondCall = metadataBandGroup.getAttributes();
        assertSame(firstCall, secondCall); // Should return the same list on multiple calls
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeADAndCheckAttributes_TvQD9_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeADAndCheckAttributes_TvQD9_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
        assertTrue(attributes.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeADAndCheckAttributes_TvQD9_3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("AD", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
            assertTrue(attribute instanceof AnnotationDefaultAttribute);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVAAndCheckAttributeCount_BBlk10_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertEquals(expectedCount, attributes.size()); // Replace expectedCount with an actual expected value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
            assertTrue(attribute instanceof ParameterAttribute); // Assuming ParameterAttribute is a valid type}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRvpaAttributeName_1_fid1() throws Exception {
        metadatabandgroup = new MetadataBandGroup("testType", new CpBands(new Segment()));
        CPUTF8 cpUTF8Value = new CPUTF8("testValue");
        MetadataBandGroup.setRvpaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable rvpaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("rvpaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVAAndCheckAttributeCount_BBlk10_2_fid1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertEquals(expectedCount, attributes.size()); // Replace expectedCount with an actual expected value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
            assertTrue(attribute instanceof ParameterAttribute); // Assuming ParameterAttribute is a valid type}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetRvpaAttributeName_1_fid2() throws Exception {
        metadatabandgroup = new MetadataBandGroup("testType", new CpBands(new Segment()));
        CPUTF8 cpUTF8Value = new CPUTF8("testValue");
        MetadataBandGroup.setRvpaAttributeName(cpUTF8Value);
        // Use reflection to access the private static variable rvpaUTF8
        Field field = MetadataBandGroup.class.getDeclaredField("rvpaUTF8");
        field.setAccessible(true);
        CPUTF8 result = (CPUTF8) field.get(null);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVAAndCheckAttributeCount_BBlk10_2_fid2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        assertEquals(expectedCount, attributes.size()); // Replace expectedCount with an actual expected value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
        assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributesWithTypeRVPAAndCheckParameterAttributes_QNhY11_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        MetadataBandGroup metadataBandGroup = new MetadataBandGroup("RVPA", cpBands);
        List<Attribute> attributes = metadataBandGroup.getAttributes();
        for (Attribute attribute : attributes) {
        }
            assertTrue(attribute instanceof ParameterAttribute); // Assuming ParameterAttribute is a valid type}
}
}
}