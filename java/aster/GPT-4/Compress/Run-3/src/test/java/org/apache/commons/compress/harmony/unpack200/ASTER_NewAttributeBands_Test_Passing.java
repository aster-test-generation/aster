/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseAttributesWithValidInput_rLmR0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{ /* mock input data */ });
    int occurrenceCount = 2; // Example occurrence count
    List<Attribute> attributes = newAttributeBands.parseAttributes(in, occurrenceCount);
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseAttributesWithValidInput_rLmR0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{ /* mock input data */ });
    int occurrenceCount = 2; // Example occurrence count
    List<Attribute> attributes = newAttributeBands.parseAttributes(in, occurrenceCount);
    assertEquals(occurrenceCount, attributes.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseAttributesWithZeroOccurrenceCount_RwOV1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{ /* mock input data */ });
    int occurrenceCount = 0;
    List<Attribute> attributes = newAttributeBands.parseAttributes(in, occurrenceCount);
    assertNotNull(attributes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseAttributesWithZeroOccurrenceCount_RwOV1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{ /* mock input data */ });
    int occurrenceCount = 0;
    List<Attribute> attributes = newAttributeBands.parseAttributes(in, occurrenceCount);
    assertTrue(attributes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseAttributesWithInvalidInput_jSUC2() {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{ /* mock invalid input data */ });
    int occurrenceCount = 2; // Example occurrence count
    try {
        newAttributeBands.parseAttributes(in, occurrenceCount);
        fail("Expected IOException to be thrown");
    } catch (IOException e) {
    } catch (Pack200Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithValidInput_jeOX0_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithValidInput_jeOX0_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithValidInput_jeOX0_3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, ((Callable) newAttributeBands.attributeLayoutElements.get(2)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithEmptyArray_Rvow1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    for (AttributeLayoutElement element : newAttributeBands.attributeLayoutElements) {
        if (element instanceof Callable) {
            assertEquals(0, ((Callable) element).getCount());
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_XWpU2_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3, 4, 5}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_XWpU2_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3, 4, 5}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_XWpU2_3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3, 4, 5}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, ((Callable) newAttributeBands.attributeLayoutElements.get(2)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNullInput_SIVF3() {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = null;
    assertThrows(NullPointerException.class, () -> {
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithValidInput_mnRR0() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable]", 0);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {5};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(5, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithMultipleCallables_UysY1_1() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable][callable]", 0);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {3, 7};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(3, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithMultipleCallables_UysY1_2() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable][callable]", 0);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {3, 7};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(7, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithInsufficientArrayLength_oyzk2_1() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable][callable]", 0);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {4}; // Only one value for two callables
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(4, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithInsufficientArrayLength_oyzk2_2() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable][callable]", 0);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {4}; // Only one value for two callables
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertEquals(0, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount()); // Assuming default is 0}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithNoCallables_CDqN3() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[]", 0); // No callables
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        int[] backwardsCalls = {1, 2}; // Should not affect anything
        newAttributeBands.setBackwardsCalls(backwardsCalls);
        assertTrue(newAttributeBands.attributeLayoutElements.isEmpty()); // No elements should be present
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withValidBackwardsCalls_ePiV0_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withValidBackwardsCalls_ePiV0_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withInsufficientBackwardsCalls_bBqS1_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1}; // Only one call
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withInsufficientBackwardsCalls_bBqS1_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1}; // Only one call
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNoBackwardsCalls_MikM2_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {}; // No calls
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withNoBackwardsCalls_MikM2_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[callable1, callable2]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {}; // No calls
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_withEmptyLayout_UqPS3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2}; // Calls provided but no elements to assign
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.attributeLayoutElements.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNoBackwardsCalls_dNBd0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "B", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[0];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.attributeLayoutElements.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithSingleCallable_iyfv1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {5};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(5, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMultipleCallables_LNUt2_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {3, 7};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMultipleCallables_LNUt2_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {3, 7};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(7, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanCallables_Vtva3_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than callables
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanCallables_Vtva3_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than callables
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_eaOI3_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_eaOI3_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_cdym3_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than Callable elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_cdym3_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More calls than Callable elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithValidInput_Sywv0_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout1", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    Callable callable1 = (Callable) newAttributeBands.getAttributeLayoutElements().get(0);
    Callable callable2 = (Callable) newAttributeBands.getAttributeLayoutElements().get(1);
    assertEquals(2, callable1.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithValidInput_Sywv0_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout1", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    Callable callable1 = (Callable) newAttributeBands.getAttributeLayoutElements().get(0);
    Callable callable2 = (Callable) newAttributeBands.getAttributeLayoutElements().get(1);
    assertEquals(3, callable2.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithNoCallables_EzMm1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout2", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.getAttributeLayoutElements().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithInsufficientCounts_StQd2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout3", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1}; // Only one count provided
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    Callable callable = (Callable) newAttributeBands.getAttributeLayoutElements().get(0);
    assertEquals(1, callable.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithExcessCounts_JgpF3_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout4", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More counts than callables
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    Callable callable1 = (Callable) newAttributeBands.getAttributeLayoutElements().get(0);
    Callable callable2 = (Callable) newAttributeBands.getAttributeLayoutElements().get(1);
    assertEquals(1, callable1.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithExcessCounts_JgpF3_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout4", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3}; // More counts than callables
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    Callable callable1 = (Callable) newAttributeBands.getAttributeLayoutElements().get(0);
    Callable callable2 = (Callable) newAttributeBands.getAttributeLayoutElements().get(1);
    assertEquals(2, callable2.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_WithValidBackwardsCalls_INkg0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    for (AttributeLayoutElement element : newAttributeBands.attributeLayoutElements) {
        if (element instanceof Callable) {
            assertEquals(2, ((Callable) element).getCount());
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_WithMoreCallsThanElements_SLqu2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3, 4}; // More calls than callable elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    for (AttributeLayoutElement element : newAttributeBands.attributeLayoutElements) {
        if (element instanceof Callable) {
            assertTrue(((Callable) element).getCount() > 0);
        }
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_WithNoCallableElements_YfYW3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layoutString", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.attributeLayoutElements.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpack_fPUC0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    newAttributeBands.unpack();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_VElL3_1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {2, 4, 6}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(2, ((Callable) newAttributeBands.attributeLayoutElements.get(0)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCallsWithMoreCallsThanElements_VElL3_2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 0, "[B][B]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {2, 4, 6}; // More calls than elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(4, ((Callable) newAttributeBands.attributeLayoutElements.get(1)).getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithO_uUPb0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.BRANCH5, newAttributeBands.getCodec("O"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithP_eCRq1() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.BCI5, newAttributeBands.getCodec("P"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithS_Vsgl2() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.SIGNED5, newAttributeBands.getCodec("S"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithB_bPNM3() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.BYTE1, newAttributeBands.getCodec("B"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithNoSpecialChars_Uziy5() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.UNSIGNED5, newAttributeBands.getCodec("X"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodecWithMultipleCharsIncludingO_TXQT6() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    assertEquals(Codec.BRANCH5, newAttributeBands.getCodec("OPQ"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_oHWT0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    InputStream in = new ByteArrayInputStream(new byte[]{/* test data */});
    newAttributeBands.read(in);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCount_Nacu0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int expectedCount = 0; // Assuming the initial count is 0
    assertEquals(expectedCount, newAttributeBands.getBackwardsCallCount());
}
}
}