/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveClassFlagsHi_tWbQ0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_class_flags_hi();
    assertFalse(result); // Assuming the default state is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAppendBandCodingSpecifier_PNPV0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.appendBandCodingSpecifier(5);
    assertTrue(segmentHeader.band_headers.contains(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Field_count_GaEJ0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Field_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Field_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveAllCodeFlags_WyeM0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_all_code_flags();
    assertFalse(result); // Assuming the default state of have_all_code_flags is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithNoAttributesAndCounts_XiUy0() throws IOException, Pack200Exception {
    SegmentHeader segmentHeader = new SegmentHeader();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    segmentHeader.attribute_definition_count = 0;
    segmentHeader.cp_Int_count = 0;
    segmentHeader.cp_Float_count = 0;
    segmentHeader.cp_Long_count = 0;
    segmentHeader.cp_Double_count = 0;
    segmentHeader.file_count = 0;
    segmentHeader.deflate_hint = false;
    segmentHeader.have_file_modtime = false;
    segmentHeader.have_file_options = false;
    segmentHeader.have_file_size_hi = false;
    segmentHeader.have_class_flags_hi = false;
    segmentHeader.have_field_flags_hi = false;
    segmentHeader.have_method_flags_hi = false;
    segmentHeader.have_code_flags_hi = false;
    segmentHeader.pack(out);
    assertEquals(0, segmentHeader.archive_options);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithAllAttributesAndCounts_QMKb1() throws IOException, Pack200Exception {
    SegmentHeader segmentHeader = new SegmentHeader();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    segmentHeader.attribute_definition_count = 1;
    segmentHeader.cp_Int_count = 1;
    segmentHeader.cp_Float_count = 1;
    segmentHeader.cp_Long_count = 1;
    segmentHeader.cp_Double_count = 1;
    segmentHeader.file_count = 1;
    segmentHeader.deflate_hint = true;
    segmentHeader.have_file_modtime = true;
    segmentHeader.have_file_options = true;
    segmentHeader.have_file_size_hi = true;
    segmentHeader.have_class_flags_hi = true;
    segmentHeader.have_field_flags_hi = true;
    segmentHeader.have_method_flags_hi = true;
    segmentHeader.have_code_flags_hi = true;
    segmentHeader.pack(out);
    assertEquals(0b111111111111111, segmentHeader.archive_options); // Adjust the expected value based on the bit shifts
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_rpef0() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.archive_options = 16; // Setting the 5th bit to trigger writeArchiveFileCounts
    segmentHeader.archive_size_hi = 1;
    segmentHeader.archive_size_lo = 2;
    segmentHeader.archive_next_count = 3;
    segmentHeader.archive_modtime = 4;
    segmentHeader.file_count = 5;
    segmentHeader.pack(out);
    byte[] expectedOutput = new byte[] {
    };
    assertArrayEquals(expectedOutput, out.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyBandHeaders_zoAN1() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.archive_options = 16; // Setting the 5th bit to trigger writeArchiveFileCounts
    segmentHeader.archive_size_hi = 1;
    segmentHeader.archive_size_lo = 2;
    segmentHeader.archive_next_count = 3;
    segmentHeader.archive_modtime = 4;
    segmentHeader.file_count = 5;
    segmentHeader.pack(out);
    byte[] output = out.toByteArray();
    assertFalse(Arrays.asList(output).contains((byte) 0)); // Assuming band headers would be represented by 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithSpecialFormats_QqEh0() throws IOException, Pack200Exception {
    SegmentHeader segmentHeader = new SegmentHeader();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    segmentHeader.archive_options = 1; // Enable special formats
    segmentHeader.band_headers = new ArrayList<>(Arrays.asList("header1", "header2")); // Example headers
    segmentHeader.attribute_definition_count = 5; // Example count
    segmentHeader.magic = 0x1234; // Example magic number
    segmentHeader.archive_minver = 1; // Example min version
    segmentHeader.archive_majver = 1; // Example maj version
    segmentHeader.pack(out);
    byte[] expectedOutput = new byte[] {
    };
    assertArrayEquals(expectedOutput, out.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithoutSpecialFormats_qXBU1() throws IOException, Pack200Exception {
    SegmentHeader segmentHeader = new SegmentHeader();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    segmentHeader.archive_options = 0; // Disable special formats
    segmentHeader.band_headers = new ArrayList<>(); // No headers
    segmentHeader.attribute_definition_count = 0; // No attributes
    segmentHeader.magic = 0x1234; // Example magic number
    segmentHeader.archive_minver = 1; // Example min version
    segmentHeader.archive_majver = 1; // Example maj version
    segmentHeader.pack(out);
    byte[] expectedOutput = new byte[] {
    };
    assertArrayEquals(expectedOutput, out.toByteArray());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_withValidOutputStream_qcAf0() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.pack(out);
    byte[] expectedOutput = {/* expected byte array based on the logic in pack and writeCpCounts */};
    byte[] actualOutput = out.toByteArray();
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_withArchiveOptionsSet_CzSj1() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.pack(out);
    byte[] expectedOutput = {/* expected byte array based on the logic in pack and writeCpCounts with options set */};
    byte[] actualOutput = out.toByteArray();
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithValidOutputStream_ixFy0() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.pack(out);
    byte[] expectedOutput = {/* expected byte array based on the logic in pack method */};
    byte[] actualOutput = out.toByteArray();
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPackWithEmptyBandHeaders_duKs1() throws IOException, Pack200Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.pack(out);
    byte[] expectedOutput = {/* expected byte array based on the logic in pack method without band headers */};
    byte[] actualOutput = out.toByteArray();
    assertArrayEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAttributeDefinitionCount_JwrG0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setAttribute_definition_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getAttribute_definition_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Descr_count_WfcC0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setCp_Descr_count(5);
    assertEquals(5, segmentHeader.getCp_Descr_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Float_count_adnI0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Float_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Float_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIcCount_aTEu0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedIcCount = 5;
    segmentHeader.setIc_count(expectedIcCount);
    assertEquals(expectedIcCount, segmentHeader.getIc_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveAllCodeFlagsTrue_knTv0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_all_code_flags(true);
    assertTrue(segmentHeader.have_all_code_flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveAllCodeFlagsFalse_wUuU1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_all_code_flags(false);
    assertFalse(segmentHeader.have_all_code_flags);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveMethodFlagsHiTrue_LAlD0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_method_flags_hi(true);
    assertTrue(segmentHeader.have_method_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveMethodFlagsHiFalse_eSzE1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_method_flags_hi(false);
    assertFalse(segmentHeader.have_method_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileSizeHi_dBBI0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_size_hi();
    assertFalse(result); // Assuming the default value of have_file_size_hi is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddMajorVersion_WPlp0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.addMajorVersion(5);
    assertEquals(5, segmentHeader.getMajorVersion()); // Assuming getMajorVersion() returns the current major version
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Imethod_count_ORmV0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Imethod_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Imethod_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetClassCount_OqaJ0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setClass_count(5);
    assertEquals(5, segmentHeader.getClass_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Long_count_ocPT0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Long_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Long_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileOptionsReturnsFalseInitially_buRJ0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    assertFalse(segmentHeader.have_file_options());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Utf8_count_FQCJ0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Utf8_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Utf8_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Signature_count_hBft0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Signature_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Signature_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Method_count_VcvN0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Method_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Method_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveModtime_sGVp0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedModtime = 0; // Assuming default value is 0, adjust as necessary
    assertEquals(expectedModtime, segmentHeader.getArchive_modtime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFieldFlagsHi_pVfl0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_field_flags_hi();
    assertFalse(result); // Assuming the default value of have_field_flags_hi is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveFileModtime_FEmV0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_file_modtime();
    assertFalse(result); // Assuming the default value of have_file_modtime is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetFileCount_yumL0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedFileCount = 5;
    segmentHeader.setFile_count(expectedFileCount);
    assertEquals(expectedFileCount, segmentHeader.getFile_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveCodeFlagsHi_Gadw0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_code_flags_hi();
    assertFalse(result); // Assuming the default value of have_code_flags_hi is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHintTrue_qkFv0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setDeflate_hint(true);
    assertTrue(segmentHeader.deflate_hint);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeflateHintFalse_FPzN1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setDeflate_hint(false);
    assertFalse(segmentHeader.deflate_hint);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Class_count_drZm0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Class_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Class_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveCodeFlagsHiTrue_UoRS0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_code_flags_hi(true);
    assertTrue(segmentHeader.have_code_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveCodeFlagsHiFalse_qsYx1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_code_flags_hi(false);
    assertFalse(segmentHeader.have_code_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Int_count_gtlK0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    int expectedCount = 5;
    segmentHeader.setCp_Int_count(expectedCount);
    assertEquals(expectedCount, segmentHeader.getCp_Int_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_String_count_FoSN0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setCp_String_count(5);
    assertEquals(5, segmentHeader.getCp_String_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHaveMethodFlagsHi_WOCh0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    boolean result = segmentHeader.have_method_flags_hi();
    assertFalse(result); // Assuming the default value of have_method_flags_hi is false
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCp_Double_count_HlAc0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setCp_Double_count(5);
    assertEquals(5, segmentHeader.getCp_Double_count());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveClassFlagsHiTrue_ymqN0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_class_flags_hi(true);
    assertTrue(segmentHeader.have_class_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveClassFlagsHiFalse_MqiB1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_class_flags_hi(false);
    assertFalse(segmentHeader.have_class_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveFieldFlagsHiTrue_HwMm0() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(true);
    assertTrue(segmentHeader.have_field_flags_hi);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHaveFieldFlagsHiFalse_CNwF1() {
    SegmentHeader segmentHeader = new SegmentHeader();
    segmentHeader.setHave_field_flags_hi(false);
    assertFalse(segmentHeader.have_field_flags_hi);
}
}