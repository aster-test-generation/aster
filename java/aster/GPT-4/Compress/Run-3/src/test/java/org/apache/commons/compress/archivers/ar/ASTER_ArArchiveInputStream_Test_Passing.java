/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.regex.Pattern;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Passing {
@Test(expected = IllegalStateException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithoutCurrentEntry_VBJK1() throws IOException {
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[5];
    arInputStream.read(buffer, 0, 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidSignature_ReturnsTrue_neSc0() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertTrue(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_SignatureTooShort_ReturnsFalse_LMgu1() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e};
    int length = 7;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidFirstByte_ReturnsFalse_kqQF2() {
    byte[] signature = new byte[]{0x20, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSecondByte_ReturnsFalse_MMeW3() {
    byte[] signature = new byte[]{0x21, 0x3d, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidThirdByte_ReturnsFalse_jBsB4() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x60, 0x72, 0x63, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidFourthByte_ReturnsFalse_fKPE5() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x71, 0x63, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidFifthByte_ReturnsFalse_YdpQ6() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x62, 0x68, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSixthByte_ReturnsFalse_UCCF7() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x63, 0x69, 0x3e, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidSeventhByte_ReturnsFalse_cFka8() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3f, 0x0a};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidEighthByte_ReturnsFalse_qdFs9() {
    byte[] signature = new byte[]{0x21, 0x3c, 0x61, 0x72, 0x63, 0x68, 0x3e, 0x0b};
    int length = 8;
    assertFalse(ArArchiveInputStream.matches(signature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_qpED0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_qpED0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_qpED0_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedSize, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_EmptyArchive_wxrG1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_InvalidHeader_iVSs2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(invalidHeaderData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertThrows(IOException.class, arInputStream::getNextArEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_TruncatedArchive_VfkH3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(truncatedArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertThrows(IOException.class, arInputStream::getNextArEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_NegativeSize_AqcF4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(negativeSizeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertThrows(IOException.class, arInputStream::getNextArEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_Hszp5_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_Hszp5_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertTrue(isGNUStringTable(entry.getName()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_Iylb6_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_Iylb6_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedBSDLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_ZcVI7_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_ZcVI7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedGNULongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithTrailingSpaces_qcli8_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithTrailingSpacesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithTrailingSpaces_qcli8_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithTrailingSpacesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedEntryName", entry.getName().trim());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithOddOffset_Ulun9_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithOddOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithOddOffset_Ulun9_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithOddOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedSize, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithZeroSize_YtIx10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithZeroSizeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithZeroSize_YtIx10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithZeroSizeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(0, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_pNXY11_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_pNXY11_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedUserId, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_AIbo12_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_AIbo12_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedGroupId, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_hUuj13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_hUuj13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLastModifiedDate, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_qDOr14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_qDOr14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedMode, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleCalls_eTFF15_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleValidEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleCalls_eTFF15_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleValidEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleCalls_eTFF15_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleValidEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotEquals(entry1.getName(), entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_EmptyArchive_WdAw1() throws IOException {
        byte[] inputData = {};
        InputStream inputStream = new ByteArrayInputStream(inputData);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_InvalidHeader_yvYm2_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(invalidHeaderData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    IOException exception = assertThrows(IOException.class, arInputStream::getNextArEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_InvalidHeader_yvYm2_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(invalidHeaderData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertEquals("Invalid header", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_TruncatedArchive_TEbS3_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(truncatedArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    IOException exception = assertThrows(IOException.class, arInputStream::getNextArEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_TruncatedArchive_TEbS3_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(truncatedArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertEquals("Truncated ar archive", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_NegativeSize_iLzT4_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(negativeSizeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    IOException exception = assertThrows(IOException.class, arInputStream::getNextArEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_NegativeSize_iLzT4_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(negativeSizeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertEquals("broken archive, entry with negative size", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_VnVX5_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("GNUStringTable", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_yAcu6_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("BSDLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_Bcnf7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("GNULongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_SkipOddByte_cyKa8() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(oddByteData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_WntZ12_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLastModified, entry.getLastModified());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_CHzf13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_CHzf13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLength, entry.getLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_fPEF14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_fPEF14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedHashCode, entry.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_TIyz0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_Nxrm5_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("gnuFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_JsJq6_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("bsdFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_cRue7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("gnuLongFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_SkipOddOffset_ndgM8() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(oddOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLongName_hrES9_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLongName_hrES9_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("longFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_jNyV10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_jNyV10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedUserId, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_Iswv11_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_Iswv11_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedGroupId, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_DzwI12_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_DzwI12_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLastModified, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_TKCX13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_TKCX13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedMode, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_lRyN14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_lRyN14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLength, entry.getLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_bury15_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_bury15_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedHashCode, entry.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_NegativeSizeEntry_tEXt4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(negativeSizeEntryData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertThrows(IOException.class, arInputStream::getNextArEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_wycm5_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedGNUFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_DWZU6_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedBSDFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_SkipOddOffset_ZAtw7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(oddOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileNameAfterSkip", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithTrailingSpaces_VWyg8_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithTrailingSpacesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGNULongName_xAEQ9_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithGNULongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGNULongName_xAEQ9_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithGNULongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedLongFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithNegativeOffset_OWDj10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithNegativeOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithNegativeOffset_OWDj10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validEntryWithNegativeOffsetData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertEquals(0, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertEquals(0, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertEquals(0, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_5() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertEquals(0, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_6() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertEquals(0, entry.getLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_7() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertNotNull(entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_8() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertNotNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_9() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertTrue(entry.getLastModified() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntry_Kbdc0_10() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]); // Mock input stream
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arArchiveInputStream.getNextEntry();
    assertNotNull(entry.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_hIDa6_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertTrue(isBSDLongName(entry.getName()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_StrV7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedGNUFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithOddOffset_itHt8_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithOddOffset);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithOddOffset_itHt8_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithOddOffset);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithTrailingSpaces_xSFa9_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithTrailingSpaces);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithTrailingSpaces_xSFa9_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithTrailingSpaces);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedFileName", entry.getName().trim());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentUserId_DJNi10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentUserId);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentUserId_DJNi10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentUserId);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedUserId, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentGroupId_LSQc11_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentGroupId);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentGroupId_LSQc11_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentGroupId);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedGroupId, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentMode_FMOz12_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentMode);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentMode_FMOz12_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentMode);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedMode, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentLastModified_JyNH13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentLastModified);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithDifferentLastModified_JyNH13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithDifferentLastModified);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLastModified, entry.getLastModified());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithZeroSize_ZgMa14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithZeroSize);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithZeroSize_ZgMa14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithZeroSize);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(0, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLargeSize_yray15_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithLargeSize);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLargeSize_yray15_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveDataWithLargeSize);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLargeSize, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroLength_dHYo0() throws IOException {
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[5];
    int result = arInputStream.read(buffer, 0, 0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeLength_kRUl2() throws IOException {
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[5];
    int result = arInputStream.read(buffer, 0, -1);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadBeyondEntryEnd_RltH3() throws IOException {
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    byte[] buffer = new byte[5];
    arInputStream.currentEntry = new ArEntry(10); // Assuming ArEntry has a constructor that takes length
    arInputStream.offset = 10; // Set offset to the end of the entry
    int result = arInputStream.read(buffer, 0, 5);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidParameters_RnEs4_1() throws IOException {
    byte[] data = new byte[10];
    Arrays.fill(data, (byte) 1);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(data));
    arInputStream.currentEntry = new ArEntry(10); // Assuming ArEntry has a constructor that takes length
    byte[] buffer = new byte[5];
    int result = arInputStream.read(buffer, 0, 5);
    assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidParameters_RnEs4_2() throws IOException {
    byte[] data = new byte[10];
    Arrays.fill(data, (byte) 1);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(new ByteArrayInputStream(data));
    arInputStream.currentEntry = new ArEntry(10); // Assuming ArEntry has a constructor that takes length
    byte[] buffer = new byte[5];
    int result = arInputStream.read(buffer, 0, 5);
    assertArrayEquals(new byte[]{1, 1, 1, 1, 1}, Arrays.copyOf(buffer, 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_mLut0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_mLut0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntry_mLut0_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedSize, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNUStringTable_djsQ5_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuStringTableData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedGNUEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BSDLongName_hThu6() throws IOException {
    String bsdLongName = "1234567890"; // Example length
    InputStream inputStream = new ByteArrayInputStream(bsdLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    String longName = arInputStream.getBSDLongName(bsdLongName);
    assertEquals("expectedLongName", longName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_BrokenArchive_xrSf8() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(brokenArchiveData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    assertThrows(IOException.class, arInputStream::getNextArEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleEntries_FNOF15_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotNull(entry1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleEntries_FNOF15_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotNull(entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMultipleEntries_FNOF15_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(multipleEntriesData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry1 = arInputStream.getNextArEntry();
    ArArchiveEntry entry2 = arInputStream.getNextArEntry();
    assertNotEquals(entry1.getName(), entry2.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntry_MYtk0_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive byte array */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntry_MYtk0_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive byte array */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals("expectedEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntry_MYtk0_3() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive byte array */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals(expectedSize, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_InvalidHeader_kPbI2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* invalid header bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        try {
            arInputStream.getNextArEntry();
            fail("Expected IOException due to invalid header");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Failed to read header"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_TruncatedArchive_BIjy3() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* truncated archive bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        try {
            arInputStream.getNextArEntry();
            fail("Expected IOException due to truncated archive");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Truncated ar archive"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_GNUStringTable_oyVC4_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid GNU string table bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_GNUStringTable_oyVC4_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid GNU string table bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals("expectedGNUEntryName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_BSDLongName_newN5_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid BSD long name bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_BSDLongName_newN5_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid BSD long name bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals("expectedBSDLongName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_NegativeSize_cRai6() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* bytes that lead to negative size */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        try {
            arInputStream.getNextArEntry();
            fail("Expected IOException due to negative size");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("entry with negative size"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_BrokenArchive_kJsf7() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* bytes that cause broken archive */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        try {
            arInputStream.getNextArEntry();
            fail("Expected IOException due to broken archive");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("unable to parse ar_size field as a number"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithExtendedName_xpsl8_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with extended name bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithExtendedName_xpsl8_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with extended name bytes */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals("expectedExtendedName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithTrailingSlash_PiWy9_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with trailing slash */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithTrailingSlash_PiWy9_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with trailing slash */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals("expectedEntryNameWithoutSlash", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_SkipOddOffset_Idbx10() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with odd offset */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithUserId_KWxg11_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with user ID */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithUserId_KWxg11_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with user ID */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals(expectedUserId, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithGroupId_SsoR12_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with group ID */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithGroupId_SsoR12_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with group ID */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals(expectedGroupId, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithLastModified_KgNp13_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with last modified date */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithLastModified_KgNp13_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with last modified date */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals(expectedLastModified, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithMode_feXx14_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with mode */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextArEntry_ValidEntryWithMode_feXx14_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(/* valid AR archive with mode */);
        ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
        ArArchiveEntry entry = arInputStream.getNextArEntry();
        assertEquals(expectedMode, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenCalled_ClosesInputStream_XHdu0() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[10]);
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(byteArrayInputStream);
    arArchiveInputStream.close();
    assertTrue(byteArrayInputStream.available() == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_WhenCalledMultipleTimes_DoesNotThrowException_AlAG1() throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[10]);
    ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(byteArrayInputStream);
    arArchiveInputStream.close();
    arArchiveInputStream.close(); // Calling close again
    assertTrue(true); // No exception should be thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_GNULongName_CWwR7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(gnuLongNameData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals("expectedGNULongFileName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_buHA9_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithUserId_buHA9_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithUserIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedUserId, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_jMiK10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithGroupId_jMiK10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithGroupIdData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedGroupId, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_LNKX11_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLastModified_LNKX11_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithLastModifiedData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLastModified, entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_hohv12_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithMode_hohv12_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithModeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedMode, entry.getMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_zNnY13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithLength_zNnY13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithLengthData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedLength, entry.getLength());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_WNXV14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextArEntry_ValidEntryWithHashCode_WNXV14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(validArArchiveWithHashCodeData);
    ArArchiveInputStream arInputStream = new ArArchiveInputStream(inputStream);
    ArArchiveEntry entry = arInputStream.getNextArEntry();
    assertEquals(expectedHashCode, entry.hashCode());}
}