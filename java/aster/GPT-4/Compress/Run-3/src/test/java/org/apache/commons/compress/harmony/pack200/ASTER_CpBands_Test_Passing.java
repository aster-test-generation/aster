/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.objectweb.asm.Type;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CpBands_Test_Passing {
private Set<CPMethodOrField> cp_Method = new TreeSet<>();
private Map<String, CPMethodOrField> stringsToCpMethod = new HashMap<>();
private Segment segment;
private CPUTF8 utf8;
private CPClass cpClass;
private CPMethodOrField cpMethodOrField;
private CPNameAndType cpNameAndType;
CpBands cpbands;
private Set<CPMethodOrField> cp_Field = new TreeSet<>();
private Map<String, CPMethodOrField> stringsToCpField = new HashMap<>();
String methodName;
String methodDesc;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPMethod() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        utf8 = new CPUTF8("testString");
        cpClass = new CPClass(utf8);
        cpNameAndType = Mockito.mock(CPNameAndType.class);
        cpMethodOrField = Mockito.mock(CPMethodOrField.class);
        String name = "methodName";
        String desc = "methodDesc";
        String key = cpClass.toString() + ":" + name + ":" + desc;
        Mockito.when(cpMethodOrField.getClassName()).thenReturn(cpClass);
        Mockito.when(cpMethodOrField.getDesc()).thenReturn(cpNameAndType);
        Mockito.when(cpNameAndType.toString()).thenReturn(desc);
        Mockito.when(stringsToCpMethod.get(key)).thenReturn(null);
        Mockito.when(cpbands.getCPNameAndType(name, desc)).thenReturn(cpNameAndType);
        CPMethodOrField result = cpbands.getCPMethod(cpClass, name, desc);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(cpClass, result.getClassName());
        Assertions.assertEquals(cpNameAndType, result.getDesc());
        Assertions.assertTrue(ccp_Method));
        Assertions.assertEquals(result, stringsToCpMethod.get(key));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPMethod_1() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        String owner = "owner";
        String name = "methodName";
        String desc = "methodDesc";
        CPMethodOrField mockCPMethod = Mockito.mock(CPMethodOrField.class);
        Mockito.when(mockCPMethod.getClassName()).thenReturn(Mockito.mock(CPClass.class));
        Mockito.when(mockCPMethod.getIndexInClassForConstructor()).thenReturn(0);
        Mockito.when(mockCPMethod.getClassIndex()).thenReturn(1);
        Mockito.when(mockCPMethod.getDesc()).thenReturn(Mockito.mock(CPNameAndType.class));
        Mockito.when(mockCPMethod.getDescIndex()).thenReturn(2);
        Mockito.when(mockCPMethod.getIndexInClass()).thenReturn(3);
        stringsToCpMethod.put(owner + name + desc, mockCPMethod);
        cpbands.getClass().getDeclaredField("stringsToCpMethod").set(cpbands, stringsToCpMethod);
        CPMethodOrField result = cpbands.getCPMethod(owner, name, desc);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPMethod_2() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        String owner = "owner";
        String name = "methodName";
        String desc = "methodDesc";
        CPMethodOrField mockCPMethod = Mockito.mock(CPMethodOrField.class);
        Mockito.when(mockCPMethod.getClassName()).thenReturn(Mockito.mock(CPClass.class));
        Mockito.when(mockCPMethod.getIndexInClassForConstructor()).thenReturn(0);
        Mockito.when(mockCPMethod.getClassIndex()).thenReturn(1);
        Mockito.when(mockCPMethod.getDesc()).thenReturn(Mockito.mock(CPNameAndType.class));
        Mockito.when(mockCPMethod.getDescIndex()).thenReturn(2);
        Mockito.when(mockCPMethod.getIndexInClass()).thenReturn(3);
        stringsToCpMethod.put(owner + name + desc, mockCPMethod);
        cpbands.getClass().getDeclaredField("stringsToCpMethod").set(cpbands, stringsToCpMethod);
        CPMethodOrField result = cpbands.getCPMethod(owner, name, desc);
        Assertions.assertEquals(mockCPMethod, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_NewMethod_QmLu0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String methodName = "testMethod";
    String methodDesc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_NewMethod_QmLu0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String methodName = "testMethod";
    String methodDesc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    assertEquals(cpClass, result.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_NewMethod_QmLu0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String methodName = "testMethod";
    String methodDesc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    assertEquals(methodName, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_NewMethod_QmLu0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String methodName = "testMethod";
    String methodDesc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    assertEquals(methodDesc, result.getDesc().getDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_ExistingMethod_OgyO1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String methodName = "existingMethod";
    String methodDesc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    CPMethodOrField secondCall = cpBands.getCPMethod(cpClass, methodName, methodDesc);
    assertSame(firstCall, secondCall);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCPClass_vMhl0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    String className = "TestClass";
    cpBands.addCPClass(className);
    boolean result = cpBands.getCPClass(className);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_NullClassName_XvwJ0() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPClass result = cpBands.getCPClass(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_ValidClassName_xKcO1_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass";
    CPClass result = cpBands.getCPClass(className);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_ValidClassName_xKcO1_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass";
    CPClass result = cpBands.getCPClass(className);
    assertEquals(className.replace('.', '/'), result.getIndexInCpUtf8());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_InnerClass_ZSuR2_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass$InnerClass";
    CPClass result = cpBands.getCPClass(className);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_InnerClass_ZSuR2_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass$InnerClass";
    CPClass result = cpBands.getCPClass(className);
    assertTrue(result.isInnerClass());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_ClassNameAlreadyExists_DRAG3_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass";
    cpBands.getCPClass(className); // First call to add the class
    CPClass result = cpBands.getCPClass(className); // Second call to retrieve the existing class
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPClass_ClassNameAlreadyExists_DRAG3_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String className = "com/example/MyClass";
    cpBands.getCPClass(className); // First call to add the class
    CPClass result = cpBands.getCPClass(className); // Second call to retrieve the existing class
    assertEquals(className.replace('.', '/'), result.getIndexInCpUtf8());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExistsCpClass_ReturnsTrue_WhenClassNameExists_vUhd0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.stringsToCpClass.put("ExistingClassName", new Object()); // Assuming a map is initialized
    assertTrue(cpBands.existsCpClass("ExistingClassName"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testExistsCpClass_ReturnsFalse_WhenClassNameDoesNotExist_ofFm1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    assertFalse(cpBands.existsCpClass("NonExistingClassName"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_VDMl0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] output = out.toByteArray();
    assertNotNull(output);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_VDMl0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] output = out.toByteArray();
    assertTrue(output.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_GyzV0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_GyzV0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0); // Ensure that something was written to the output stream}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_FEBM0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_FEBM0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCpDouble_WWUp1_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.cp_Double = Arrays.asList(new CPDouble(1.0), new CPDouble(2.0), new CPDouble(3.0));
    Method writeCpDoubleMethod = CpBands.class.getDeclaredMethod("writeCpDouble", OutputStream.class);
    writeCpDoubleMethod.setAccessible(true);
    writeCpDoubleMethod.invoke(cpBands, out);
    byte[] output = out.toByteArray();
    assertNotNull(output);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCpDouble_WWUp1_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.cp_Double = Arrays.asList(new CPDouble(1.0), new CPDouble(2.0), new CPDouble(3.0));
    Method writeCpDoubleMethod = CpBands.class.getDeclaredMethod("writeCpDouble", OutputStream.class);
    writeCpDoubleMethod.setAccessible(true);
    writeCpDoubleMethod.invoke(cpBands, out);
    byte[] output = out.toByteArray();
    assertTrue(output.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_SdxE0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_SdxE0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] result = out.toByteArray();
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_vHcT0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] outputBytes = out.toByteArray();
    assertNotNull(outputBytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_vHcT0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] outputBytes = out.toByteArray();
    assertTrue(outputBytes.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_sMPE0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    cpBands.pack(out);
    byte[] outputData = out.toByteArray();
    assertTrue(outputData.length > 0); // Ensure some data was written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteCpDescr_bUTZ1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    List<CPNameAndType> cp_Descr = new ArrayList<>();
    cp_Descr.add(new CPNameAndType(1, 2)); // Assuming CPNameAndType constructor takes nameIndex and typeIndex
    cp_Descr.add(new CPNameAndType(3, 4));
    Method writeCpDescrMethod = CpBands.class.getDeclaredMethod("writeCpDescr", OutputStream.class);
    writeCpDescrMethod.setAccessible(true);
    writeCpDescrMethod.invoke(cpBands, out);
    byte[] outputData = out.toByteArray();
    assertTrue(outputData.length > 0); // Ensure some data was written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_afeb0_1() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    Set<CPMethodOrField> cp_Field = new HashSet<>();
    Set<CPMethodOrField> cp_Method = new HashSet<>();
    Set<CPMethodOrField> cp_Imethod = new HashSet<>();
    cp_Field.add(new CPMethodOrField(1, 2));
    cp_Method.add(new CPMethodOrField(3, 4));
    cp_Imethod.add(new CPMethodOrField(5, 6));
    cpBands.pack(out);
    byte[] outputBytes = out.toByteArray();
    assertNotNull(outputBytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPack_afeb0_2() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    Set<CPMethodOrField> cp_Field = new HashSet<>();
    Set<CPMethodOrField> cp_Method = new HashSet<>();
    Set<CPMethodOrField> cp_Imethod = new HashSet<>();
    cp_Field.add(new CPMethodOrField(1, 2));
    cp_Method.add(new CPMethodOrField(3, 4));
    cp_Imethod.add(new CPMethodOrField(5, 6));
    cpBands.pack(out);
    byte[] outputBytes = out.toByteArray();
    assertTrue(outputBytes.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(1, cpBands.segmentHeader.getCp_Utf8_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Int_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Float_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Long_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Double_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_String_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_7() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Class_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_8() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(2, cpBands.segmentHeader.getCp_Signature_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_9() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Descr_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_10() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Field_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_11() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Method_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_zCCa0_12() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("testUtf8");
    cpBands.addIndices();
    cpBands.cp_Signature.add(new Signature("sig1", new CPUTF8("utf8_1")));
    cpBands.cp_Signature.add(new Signature("sig2", new CPUTF8("utf8_2")));
    cpBands.finaliseBands();
    assertEquals(0, cpBands.segmentHeader.getCp_Imethod_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(1, segmentHeader.getCp_Utf8_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Int_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Float_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Long_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Double_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_6() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_String_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_7() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Class_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_8() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Signature_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_9() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Descr_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_10() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Field_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_11() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Method_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinaliseBands_FYaA0_12() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    cpBands.addCPUtf8("Test");
    cpBands.removeSignaturesFromCpUTF8();
    cpBands.finaliseBands();
    assertEquals(0, segmentHeader.getCp_Imethod_count());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_FxPe0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(owner, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_FxPe0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(owner, name, desc);
    assertEquals(owner, result.getClassName().toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_FxPe0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(owner, name, desc);
    assertEquals(name, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_FxPe0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(owner, name, desc);
    assertEquals(desc, result.getDesc().getDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_mNZL0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(owner, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_mNZL0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(owner, name, desc);
    assertEquals("Expected descriptor index", expectedDescIndex, result.getDescIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPMethod_mNZL0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPMethod(owner, name, desc);
    assertEquals("Expected descriptor", expectedDesc, result.getDesc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPField_1() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        utf8 = new CPUTF8("testString");
        cpClass = new CPClass(utf8);
        cpNameAndType = Mockito.mock(CPNameAndType.class);
        cpMethodOrField = new CPMethodOrField(cpClass, cpNameAndType);
        String name = "testName";
        String desc = "testDesc";
        String key = cpClass.toString() + ":" + name + ":" + desc;
        Mockito.when(cpNameAndType.toString()).thenReturn(desc);
        cpbands.getCPField(cpClass, name, desc);
        assertTrue(cpbands.stringsToCpField.containsKey(key));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPField_2() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        utf8 = new CPUTF8("testString");
        cpClass = new CPClass(utf8);
        cpNameAndType = Mockito.mock(CPNameAndType.class);
        cpMethodOrField = new CPMethodOrField(cpClass, cpNameAndType);
        String name = "testName";
        String desc = "testDesc";
        String key = cpClass.toString() + ":" + name + ":" + desc;
        Mockito.when(cpNameAndType.toString()).thenReturn(desc);
        cpbands.getCPField(cpClass, name, desc);
        assertNotNull(cstringsToCpField));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPField_3() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        utf8 = new CPUTF8("testString");
        cpClass = new CPClass(utf8);
        cpNameAndType = Mockito.mock(CPNameAndType.class);
        cpMethodOrField = new CPMethodOrField(cpClass, cpNameAndType);
        String name = "testName";
        String desc = "testDesc";
        String key = cpClass.toString() + ":" + name + ":" + desc;
        Mockito.when(cpNameAndType.toString()).thenReturn(desc);
        cpbands.getCPField(cpClass, name, desc);
        assertEquals(cpMethodOrField, cstringsToCpField));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_NewField_pgDk0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_NewField_pgDk0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(cpClass, result.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_NewField_pgDk0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(name, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_NewField_pgDk0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(desc, result.getDesc().getDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_ExistingField_nnKt1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    cpBands.getCPField(cpClass, name, desc);
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_ExistingField_nnKt1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    cpBands.getCPField(cpClass, name, desc);
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(cpClass, result.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_ExistingField_nnKt1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    cpBands.getCPField(cpClass, name, desc);
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(name, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_ExistingField_nnKt1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testField";
    String desc = "I";
    cpBands.getCPField(cpClass, name, desc);
    CPMethodOrField result = cpBands.getCPField(cpClass, name, desc);
    assertEquals(desc, result.getDesc().getDescriptor());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPUtf8WithNullInput_rWOS0() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPUTF8 result = cpBands.getCPUtf8(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPUtf8WithNewString_tyfL1_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String testString = "test";
    CPUTF8 result = cpBands.getCPUtf8(testString);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPUtf8WithNewString_tyfL1_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String testString = "test";
    CPUTF8 result = cpBands.getCPUtf8(testString);
    assertEquals(testString, result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPUtf8WithExistingString_iIiN2_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String testString = "existing";
    cpBands.getCPUtf8(testString); // First call to add it
    CPUTF8 result = cpBands.getCPUtf8(testString); // Second call to retrieve it
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPUtf8WithExistingString_iIiN2_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    String testString = "existing";
    cpBands.getCPUtf8(testString); // First call to add it
    CPUTF8 result = cpBands.getCPUtf8(testString); // Second call to retrieve it
    assertEquals(testString, result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithInteger_FPkC0_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(42);
    assertTrue(constant instanceof CPInt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithInteger_FPkC0_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(42);
    assertEquals(42, ((CPInt) constant).getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithLong_YaOa1_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(123456789L);
    assertTrue(constant instanceof CPLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithLong_YaOa1_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(123456789L);
    assertEquals(123456789L, ((CPLong) constant).getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithFloat_qvkP2_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(3.14f);
    assertTrue(constant instanceof CPFloat);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithFloat_qvkP2_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(3.14f);
    assertEquals(3.14f, ((CPFloat) constant).getValue(), 0.001);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithDouble_IDGe3_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(2.71828);
    assertTrue(constant instanceof CPDouble);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithDouble_IDGe3_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(2.71828);
    assertEquals(2.71828, ((CPDouble) constant).getValue(), 0.00001);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithString_kLlu4_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant("Hello");
    assertTrue(constant instanceof CPString);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithString_kLlu4_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant("Hello");
    assertEquals("Hello", ((CPString) constant).getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithTypeArray_cMnu5_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    Type typeArray = new Type("java.lang.String[]");
    CPConstant<?> constant = cpBands.getConstant(typeArray);
    assertTrue(constant instanceof CPClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithTypeArray_cMnu5_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    Type typeArray = new Type("java.lang.String[]");
    CPConstant<?> constant = cpBands.getConstant(typeArray);
    assertEquals("[Ljava/lang/String;", ((CPClass) constant).getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithTypeNonArray_joHz6_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    Type type = new Type("java.lang.String");
    CPConstant<?> constant = cpBands.getConstant(type);
    assertTrue(constant instanceof CPClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithTypeNonArray_joHz6_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    Type type = new Type("java.lang.String");
    CPConstant<?> constant = cpBands.getConstant(type);
    assertEquals("Ljava/lang/String;", ((CPClass) constant).getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithNull_uReU7() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    CPConstant<?> constant = cpBands.getConstant(null);
    assertNull(constant);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithRepeatedInteger_Siac8_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    cpBands.getConstant(100);
    CPConstant<?> constant = cpBands.getConstant(100);
    assertTrue(constant instanceof CPInt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithRepeatedInteger_Siac8_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    cpBands.getConstant(100);
    CPConstant<?> constant = cpBands.getConstant(100);
    assertEquals(100, ((CPInt) constant).getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithRepeatedString_IcMk9_1() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    cpBands.getConstant("World");
    CPConstant<?> constant = cpBands.getConstant("World");
    assertTrue(constant instanceof CPString);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConstantWithRepeatedString_IcMk9_2() {
    CpBands cpBands = new CpBands(new Segment(), 1);
    cpBands.getConstant("World");
    CPConstant<?> constant = cpBands.getConstant("World");
    assertEquals("World", ((CPString) constant).getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_NewEntry_avxh0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature");
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_NewEntry_avxh0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature");
    assertEquals("testName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_NewEntry_avxh0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature");
    assertEquals("testSignature", result.getSignature());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_ExistingEntry_SDNi1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    cpBands.getCPNameAndType("testName", "testSignature"); // First call to create entry
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature"); // Second call to retrieve entry
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_ExistingEntry_SDNi1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    cpBands.getCPNameAndType("testName", "testSignature"); // First call to create entry
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature"); // Second call to retrieve entry
    assertEquals("testName", result.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPNameAndType_ExistingEntry_SDNi1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    cpBands.getCPNameAndType("testName", "testSignature"); // First call to create entry
    CPNameAndType result = cpBands.getCPNameAndType("testName", "testSignature"); // Second call to retrieve entry
    assertEquals("testSignature", result.getSignature());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddCPUtf8_TIuU0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 5);
    String utf8 = "testString";
    cpBands.addCPUtf8(utf8);
    String expected = "expectedValue"; // This should be the expected output after calling addCPUtf8
    String actual = cpBands.getCPUtf8(utf8); // Assuming getCPUtf8 is a method in CpBands
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPIMethod_1() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        cpClass = Mockito.mock(CPClass.class);
        methodName = "testMethod";
        methodDesc = "testDesc";
        Mockito.when(cpClass.toString()).thenReturn("TestClass");
        CPNameAndType nAndT = Mockito.mock(CPNameAndType.class);
        Mockito.when(cpbands.getCPNameAndType(methodName, methodDesc)).thenReturn(nAndT);
        CPMethodOrField result = cpbands.getCPIMethod(cpClass, methodName, methodDesc);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPIMethod_2() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        cpClass = Mockito.mock(CPClass.class);
        methodName = "testMethod";
        methodDesc = "testDesc";
        Mockito.when(cpClass.toString()).thenReturn("TestClass");
        CPNameAndType nAndT = Mockito.mock(CPNameAndType.class);
        Mockito.when(cpbands.getCPNameAndType(methodName, methodDesc)).thenReturn(nAndT);
        CPMethodOrField result = cpbands.getCPIMethod(cpClass, methodName, methodDesc);
        Assertions.assertEquals(cpClass, result.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCPIMethod_3() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        cpClass = Mockito.mock(CPClass.class);
        methodName = "testMethod";
        methodDesc = "testDesc";
        Mockito.when(cpClass.toString()).thenReturn("TestClass");
        CPNameAndType nAndT = Mockito.mock(CPNameAndType.class);
        Mockito.when(cpbands.getCPNameAndType(methodName, methodDesc)).thenReturn(nAndT);
        CPMethodOrField result = cpbands.getCPIMethod(cpClass, methodName, methodDesc);
        Assertions.assertEquals(nAndT, result.getDesc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_NullSignature_hBWG0() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature(null);
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_EmptySignature_xviy1_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_EmptySignature_xviy1_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("");
        assertEquals("", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SingleClassSignature_JFwC2_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SingleClassSignature_JFwC2_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;");
        assertEquals("Lcom/example/MyClass;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SingleClassSignature_JFwC2_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_MultipleClassSignature_ncKQ3_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;Lcom/example/AnotherClass;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_MultipleClassSignature_ncKQ3_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;Lcom/example/AnotherClass;");
        assertEquals("Lcom/example/MyClass;Lcom/example/AnotherClass;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_MultipleClassSignature_ncKQ3_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;Lcom/example/AnotherClass;");
        assertEquals(2, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_ClassWithInnerClass_qgFq4_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$InnerClass;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_ClassWithInnerClass_qgFq4_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$InnerClass;");
        assertEquals("Lcom/example/MyClass$InnerClass;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_ClassWithInnerClass_qgFq4_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$InnerClass;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClasses_syVk5_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("V");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClasses_syVk5_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("V");
        assertEquals("V", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClasses_syVk5_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("V");
        assertTrue(result.getClasses().isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithSpecialCharacters_CNKQ6_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithSpecialCharacters_CNKQ6_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class;");
        assertEquals("Lcom/example/My-Class;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithSpecialCharacters_CNKQ6_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithDigits_sfCn7_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass123;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithDigits_sfCn7_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass123;");
        assertEquals("Lcom/example/MyClass123;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithDigits_sfCn7_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass123;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithUnderscore_EhTG8_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My_Class;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithUnderscore_EhTG8_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My_Class;");
        assertEquals("Lcom/example/My_Class;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithUnderscore_EhTG8_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My_Class;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleInnerClasses_gacB9_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$Inner1;Lcom/example/MyClass$Inner2;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleInnerClasses_gacB9_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$Inner1;Lcom/example/MyClass$Inner2;");
        assertEquals("Lcom/example/MyClass$Inner1;Lcom/example/MyClass$Inner2;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleInnerClasses_gacB9_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass$Inner1;Lcom/example/MyClass$Inner2;");
        assertEquals(2, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClassesAndSpecialChars_RVkd10_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class$Inner;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClassesAndSpecialChars_RVkd10_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class$Inner;");
        assertEquals("Lcom/example/My-Class$Inner;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithNoClassesAndSpecialChars_RVkd10_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/My-Class$Inner;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleClassesAndNoInner_AAqB12_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/Class1;Lcom/example/Class2;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleClassesAndNoInner_AAqB12_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/Class1;Lcom/example/Class2;");
        assertEquals("Lcom/example/Class1;Lcom/example/Class2;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithMultipleClassesAndNoInner_AAqB12_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/Class1;Lcom/example/Class2;");
        assertEquals(2, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndPrimitive_OgxZ13_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;I");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndPrimitive_OgxZ13_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;I");
        assertEquals("Lcom/example/MyClass;I", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndPrimitive_OgxZ13_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;I");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndVoid_xrea14_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;V");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndVoid_xrea14_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;V");
        assertEquals("Lcom/example/MyClass;V", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndVoid_xrea14_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass;V");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndArray_HHYT15_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("[Lcom/example/MyClass;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndArray_HHYT15_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("[Lcom/example/MyClass;");
        assertEquals("[Lcom/example/MyClass;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndArray_HHYT15_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("[Lcom/example/MyClass;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndGeneric_awNg16_1() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass<T>;");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndGeneric_awNg16_2() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass<T>;");
        assertEquals("Lcom/example/MyClass<T>;", result.getUnderlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPSignature_SignatureWithClassAndGeneric_awNg16_3() {
        CpBands cpBands = new CpBands(new Segment(), 1);
        CPSignature result = cpBands.getCPSignature("Lcom/example/MyClass<T>;");
        assertEquals(1, result.getClasses().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPField_1() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        String owner = "owner";
        String name = "name";
        String desc = "desc";
        CPMethodOrField mockCPMethodOrField = Mockito.mock(CPMethodOrField.class);
        stringsToCpField.put(name, mockCPMethodOrField);
        // Assuming getCPClass is a method that retrieves a class based on the owner
        Mockito.when(cpbands.getCPClass(owner)).thenReturn(mockCPMethodOrField);
        CPMethodOrField result = cpbands.getCPField(owner, name, desc);
        Assertions.assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPField_2() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        String owner = "owner";
        String name = "name";
        String desc = "desc";
        CPMethodOrField mockCPMethodOrField = Mockito.mock(CPMethodOrField.class);
        stringsToCpField.put(name, mockCPMethodOrField);
        // Assuming getCPClass is a method that retrieves a class based on the owner
        Mockito.when(cpbands.getCPClass(owner)).thenReturn(mockCPMethodOrField);
        CPMethodOrField result = cpbands.getCPField(owner, name, desc);
        Assertions.assertEquals(mockCPMethodOrField, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCPField_3() throws Exception {
        segment = new Segment();
        cpbands = new CpBands(segment, 1);
        String owner = "owner";
        String name = "name";
        String desc = "desc";
        CPMethodOrField mockCPMethodOrField = Mockito.mock(CPMethodOrField.class);
        stringsToCpField.put(name, mockCPMethodOrField);
        // Assuming getCPClass is a method that retrieves a class based on the owner
        Mockito.when(cpbands.getCPClass(owner)).thenReturn(mockCPMethodOrField);
        CPMethodOrField result = cpbands.getCPField(owner, name, desc);
        Assertions.assertTrue(stringsToCpField.containsKey(name));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_NewMethod_dqKg0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(cpClass, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_NewMethod_dqKg0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(cpClass, result.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_NewMethod_dqKg0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(name, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_NewMethod_dqKg0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "testMethod";
    String desc = "(I)V";
    CPMethodOrField result = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(desc, result.getDesc().getDesc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_ExistingMethod_ipEm1_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "existingMethod";
    String desc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPIMethod(cpClass, name, desc);
    CPMethodOrField secondCall = cpBands.getCPIMethod(cpClass, name, desc);
    assertNotNull(firstCall);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_ExistingMethod_ipEm1_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "existingMethod";
    String desc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPIMethod(cpClass, name, desc);
    CPMethodOrField secondCall = cpBands.getCPIMethod(cpClass, name, desc);
    assertSame(firstCall, secondCall);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_ExistingMethod_ipEm1_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "existingMethod";
    String desc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPIMethod(cpClass, name, desc);
    CPMethodOrField secondCall = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(cpClass, firstCall.getClassName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_ExistingMethod_ipEm1_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "existingMethod";
    String desc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPIMethod(cpClass, name, desc);
    CPMethodOrField secondCall = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(name, firstCall.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPIMethod_ExistingMethod_ipEm1_5() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass cpClass = new CPClass(utf8);
    String name = "existingMethod";
    String desc = "(Ljava/lang/String;)V";
    CPMethodOrField firstCall = cpBands.getCPIMethod(cpClass, name, desc);
    CPMethodOrField secondCall = cpBands.getCPIMethod(cpClass, name, desc);
    assertEquals(desc, firstCall.getDesc().getDesc());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_FyjR0_1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(owner, name, desc);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_FyjR0_2() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(owner, name, desc);
    assertEquals(owner, result.getClassName().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_FyjR0_3() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(owner, name, desc);
    assertEquals(name, result.getDesc().getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCPField_FyjR0_4() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment, 1);
    String owner = "com/example/MyClass";
    String name = "myField";
    String desc = "I";
    CPMethodOrField result = cpBands.getCPField(owner, name, desc);
    assertEquals(desc, result.getDesc().getDesc());}
}