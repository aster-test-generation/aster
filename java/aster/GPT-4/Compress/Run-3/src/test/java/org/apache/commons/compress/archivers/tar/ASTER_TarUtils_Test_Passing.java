/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_NegativeOffset_LWHX1() throws IOException {
    byte[] buffer = new byte[64];
    int offset = 0;
    int entries = 1;
    buffer[0] = -1; // Negative offset
    TarUtils.readSparseStructs(buffer, offset, entries);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_NegativeNumbytes_rtaq2() throws IOException {
    byte[] buffer = new byte[64];
    int offset = 0;
    int entries = 1;
    buffer[0] = 0; // Valid offset
    buffer[1] = -1; // Negative numbytes
    TarUtils.readSparseStructs(buffer, offset, entries);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_InvalidEntry_MatM3() throws IOException {
    byte[] buffer = new byte[64];
    int offset = 0;
    int entries = 1;
    buffer[0] = 0; // Valid offset
    buffer[1] = 0; // Valid numbytes
    TarUtils.readSparseStructs(buffer, offset, entries);
}
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_EmptyInput_YllB4() {
        byte[] buffer = "".getBytes();
        TarUtils.parseOctal(buffer, 0, buffer.length);
    }
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_LengthLessThanTwo_XeIB5() {
        byte[] buffer = "1".getBytes();
        TarUtils.parseOctal(buffer, 0, buffer.length);
    }
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_InvalidCharacter_thka6() {
        byte[] buffer = "12A34".getBytes();
        TarUtils.parseOctal(buffer, 0, buffer.length);
    }
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_NonOctalDigit_jvgh9() {
        byte[] buffer = "1238".getBytes();
        TarUtils.parseOctal(buffer, 0, buffer.length);
    }
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_ExceedsMaxSignedLong_rZsv3() {
        byte[] buffer = {0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}; // Exceeds length
        TarUtils.parseOctalOrBinary(buffer, 0, 10);
    }
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_BinaryExceedsLong_OjZb3() {
        byte[] buffer = {(byte) 0x80, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff}; // Exceeds max signed long
        TarUtils.parseOctalOrBinary(buffer, 0, 9);
    }
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_NegativeSparseCount_uQyF1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("-1\n".getBytes());
    int recordSize = 512;
    TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_NegativeSparseOffset_TYrI2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("1\n-1\n100\n".getBytes());
    int recordSize = 512;
    TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_NegativeSparseNumbytes_OnlF3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("1\n0\n-100\n".getBytes());
    int recordSize = 512;
    TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
}
    @Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ValueTooLargeForBinary_IFaS3() {
        byte[] buf = new byte[4];
        TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 4);
    }
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_ValueTooLarge_rziH4() {
    byte[] buffer = new byte[3];
    TarUtils.formatUnsignedOctalString(512, buffer, 0, 3);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_OddNumberOfElements_wjoW1() throws IOException {
    String sparseMap = "0,100,200";
    TarUtils.parseFromPAX01SparseHeaders(sparseMap);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeOffset_rxvv2() throws IOException {
    String sparseMap = "-1,100,200,300";
    TarUtils.parseFromPAX01SparseHeaders(sparseMap);
}
@Test(expected = IOException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_NegativeNumbytes_eZOO3() throws IOException {
    String sparseMap = "0,-100,200,300";
    TarUtils.parseFromPAX01SparseHeaders(sparseMap);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_uZot0() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* mock data */});
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    Map<String, String> expectedHeaders = new HashMap<>();
    expectedHeaders.put("key1", "value1");
    expectedHeaders.put("key2", "value2");
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders);
    assertEquals(expectedHeaders, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_ValidName_rdKh0() {
    String name = "testFile.txt";
    byte[] buf = new byte[100];
    int offset = 0;
    int length = 100;
    int result = TarUtils.formatNameBytes(name, buf, offset, length);
    assertTrue(result > 0); // Check that the result is positive, indicating bytes were written
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_ValidInput_DhOj0_1() throws IOException {
    byte[] buffer = new byte[64]; // Assuming a buffer size
    int offset = 0;
    int entries = 2;
    buffer[0] = 0; // Example offset
    buffer[1] = 10; // Example numbytes
    buffer[8] = 1; // Next entry offset
    buffer[9] = 20; // Next entry numbytes
    List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_ValidInput_DhOj0_2() throws IOException {
    byte[] buffer = new byte[64]; // Assuming a buffer size
    int offset = 0;
    int entries = 2;
    buffer[0] = 0; // Example offset
    buffer[1] = 10; // Example numbytes
    buffer[8] = 1; // Next entry offset
    buffer[9] = 20; // Next entry numbytes
    List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(0, result.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_ValidInput_DhOj0_3() throws IOException {
    byte[] buffer = new byte[64]; // Assuming a buffer size
    int offset = 0;
    int entries = 2;
    buffer[0] = 0; // Example offset
    buffer[1] = 10; // Example numbytes
    buffer[8] = 1; // Next entry offset
    buffer[9] = 20; // Next entry numbytes
    List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(10, result.get(0).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_ValidInput_DhOj0_4() throws IOException {
    byte[] buffer = new byte[64]; // Assuming a buffer size
    int offset = 0;
    int entries = 2;
    buffer[0] = 0; // Example offset
    buffer[1] = 10; // Example numbytes
    buffer[8] = 1; // Next entry offset
    buffer[9] = 20; // Next entry numbytes
    List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(1, result.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadSparseStructs_ValidInput_DhOj0_5() throws IOException {
    byte[] buffer = new byte[64]; // Assuming a buffer size
    int offset = 0;
    int entries = 2;
    buffer[0] = 0; // Example offset
    buffer[1] = 10; // Example numbytes
    buffer[8] = 1; // Next entry offset
    buffer[9] = 20; // Next entry numbytes
    List<TarArchiveStructSparse> result = TarUtils.readSparseStructs(buffer, offset, entries);
    assertEquals(20, result.get(1).getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBooleanTrue_yalI0() {
    byte[] buffer = {0, 0, 1}; // 1 at offset 2
    int offset = 2;
    boolean result = TarUtils.parseBoolean(buffer, offset);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseBooleanFalse_EYgL1() {
    byte[] buffer = {0, 0, 0}; // 0 at offset 2
    int offset = 2;
    boolean result = TarUtils.parseBoolean(buffer, offset);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_ValidInput_ReturnsList_ysnS0_1() {
    String sparseMap = "0 1000 0 0 0 0 0 0 0 0"; // Example valid sparse map
    List<TarArchiveStructSparse> result = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX01SparseHeaders_ValidInput_ReturnsList_ysnS0_2() {
    String sparseMap = "0 1000 0 0 0 0 0 0 0 0"; // Example valid sparse map
    List<TarArchiveStructSparse> result = TarUtils.parsePAX01SparseHeaders(sparseMap);
    assertFalse(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_Fdho0_1() {
    byte[] buffer = new byte[TarConstants.SPARSE_OFFSET_LEN + TarConstants.SPARSE_NUMBYTES_LEN];
    String sparseOffsetStr = "00000000001"; // Example octal value
    String sparseNumbytesStr = "00000000002"; // Example octal value
    System.arraycopy(sparseOffsetStr.getBytes(), 0, buffer, 0, TarConstants.SPARSE_OFFSET_LEN);
    System.arraycopy(sparseNumbytesStr.getBytes(), 0, buffer, TarConstants.SPARSE_OFFSET_LEN, TarConstants.SPARSE_NUMBYTES_LEN);
    TarArchiveStructSparse result = TarUtils.parseSparse(buffer, 0);
    assertEquals(1L, result.getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseSparse_Fdho0_2() {
    byte[] buffer = new byte[TarConstants.SPARSE_OFFSET_LEN + TarConstants.SPARSE_NUMBYTES_LEN];
    String sparseOffsetStr = "00000000001"; // Example octal value
    String sparseNumbytesStr = "00000000002"; // Example octal value
    System.arraycopy(sparseOffsetStr.getBytes(), 0, buffer, 0, TarConstants.SPARSE_OFFSET_LEN);
    System.arraycopy(sparseNumbytesStr.getBytes(), 0, buffer, TarConstants.SPARSE_OFFSET_LEN, TarConstants.SPARSE_NUMBYTES_LEN);
    TarArchiveStructSparse result = TarUtils.parseSparse(buffer, 0);
    assertEquals(2L, result.getNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_ValidInput_IBSt0() {
        byte[] buffer = "12345".getBytes();
        long result = TarUtils.parseOctal(buffer, 0, buffer.length);
        assertEquals(12345L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_LeadingSpaces_fvnn1() {
        byte[] buffer = "   123".getBytes();
        long result = TarUtils.parseOctal(buffer, 0, buffer.length);
        assertEquals(123L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_ZeroInput_XZeR3() {
        byte[] buffer = "0".getBytes();
        long result = TarUtils.parseOctal(buffer, 0, buffer.length);
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_MaxOctalValue_CFcx7() {
        byte[] buffer = "777".getBytes();
        long result = TarUtils.parseOctal(buffer, 0, buffer.length);
        assertEquals(511L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_MixedSpacesAndDigits_RyMC8() {
        byte[] buffer = "  7  5  ".getBytes();
        long result = TarUtils.parseOctal(buffer, 0, buffer.length);
        assertEquals(75L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_ValidInput_PcCp0() throws IOException {
    byte[] buffer = new byte[] { 't', 'e', 's', 't', 0 };
    ZipEncoding encoding = new ZipEncoding();
    String result = TarUtils.parseName(buffer, 0, buffer.length, encoding);
    assertEquals("test", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_EmptyInput_rAcH1() throws IOException {
    byte[] buffer = new byte[] { 0 };
    ZipEncoding encoding = new ZipEncoding();
    String result = TarUtils.parseName(buffer, 0, buffer.length, encoding);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_NullInput_zCPX2() throws IOException {
    byte[] buffer = null;
    ZipEncoding encoding = new ZipEncoding();
    String result = TarUtils.parseName(buffer, 0, 0, encoding);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_OffsetBeyondLength_zJaw3() throws IOException {
    byte[] buffer = new byte[] { 't', 'e', 's', 't', 0 };
    ZipEncoding encoding = new ZipEncoding();
    String result = TarUtils.parseName(buffer, 5, 0, encoding);
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_OctalValue_pBWV0() {
        byte[] buffer = {0x00, 0x01, 0x02}; // Octal representation
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 3);
        assertEquals(1, result); // Expected octal value
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_NegativeBinaryValue_mlpJ1() {
        byte[] buffer = {(byte) 0xff, 0x01}; // Negative binary representation
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 2);
        assertEquals(-1, result); // Expected negative binary value
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_PositiveBinaryValue_VzqG2() {
        byte[] buffer = {0x80, 0x01}; // Positive binary representation
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 2);
        assertEquals(1, result); // Expected positive binary value
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_Octal_PODU0() {
        byte[] buffer = {0x07, 0x00, 0x00, 0x00}; // Octal representation of 7
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 4);
        assertEquals(7L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_NegativeBinary_iFJA1() {
        byte[] buffer = {(byte) 0xff, 0x00, 0x00, 0x00}; // Negative binary representation
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 4);
        assertEquals(-1L, result); // Expecting -1 for 0x00 in 2's complement
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalOrBinary_PositiveBinary_Yjql2() {
        byte[] buffer = {(byte) 0x80, 0x00, 0x00, 0x01}; // Positive binary representation
        long result = TarUtils.parseOctalOrBinary(buffer, 0, 4);
        assertEquals(1L, result); // Expecting 1
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_ValidInput_WRJu0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("2\n0\n100\n200\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_ValidInput_WRJu0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("2\n0\n100\n200\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(0, result.get(0).getSparseOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_ValidInput_WRJu0_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("2\n0\n100\n200\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(100, result.get(0).getSparseNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_ValidInput_WRJu0_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("2\n0\n100\n200\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(200, result.get(1).getSparseNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_BytesToSkip_TFey4_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("1\n0\n100\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_BytesToSkip_TFey4_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("1\n0\n100\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(0, result.get(0).getSparseOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePAX1XSparseHeaders_BytesToSkip_TFey4_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("1\n0\n100\n".getBytes());
    int recordSize = 512;
    List<TarArchiveStructSparse> result = TarUtils.parsePAX1XSparseHeaders(inputStream, recordSize);
    assertEquals(100, result.get(0).getSparseNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_bQlj0_1() {
    byte[] buf = new byte[10];
    long value = 123;
    int offset = 0;
    int length = 8;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatOctalBytes_bQlj0_2() {
    byte[] buf = new byte[10];
    long value = 123;
    int offset = 0;
    int length = 8;
    int result = TarUtils.formatOctalBytes(value, buf, offset, length);
    assertArrayEquals(new byte[]{'1', '7', '3', ' ', 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSumWithPositiveBytes_gvHT0() {
    byte[] input = {1, 2, 3, 4, 5};
    long expected = 15; // 1 + 2 + 3 + 4 + 5
    long actual = TarUtils.computeCheckSum(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testComputeCheckSumWithNegativeBytes_icVP1() {
    byte[] input = {-1, -2, -3, -4, -5};
    long expected = 235; // 255 - 1 + 255 - 2 + 255 - 3 + 255 - 4 + 255 - 5
    long actual = TarUtils.computeCheckSum(input);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum_ValidChecksumUnsigned_bbst0() {
    byte[] header = new byte[TarConstants.HEADER_SIZE];
    assertTrue(TarUtils.verifyCheckSum(header));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testVerifyCheckSum_InvalidChecksum_ApdH2() {
    byte[] header = new byte[TarConstants.HEADER_SIZE];
    assertFalse(TarUtils.verifyCheckSum(header));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_UcHK0_1() {
    byte[] buf = new byte[10];
    long value = 12345;
    int offset = 0;
    int length = 8;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatCheckSumOctalBytes_UcHK0_2() {
    byte[] buf = new byte[10];
    long value = 12345;
    int offset = 0;
    int length = 8;
    int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
    assertArrayEquals(new byte[]{'3', '0', '0', '0', '0', '0', '0', '0', 0, ' '}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_ValidEncoding_UUyc0_1() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "testFile.txt";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_ValidEncoding_UUyc0_2() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "testFile.txt";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertArrayEquals(new byte[]{116, 101, 115, 116, 70, 105, 108, 101, 46, 116, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_EmptyName_fAhq1_1() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_EmptyName_fAhq1_2() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_ExceedingLength_SyOr2_1() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "veryLongFileNameThatExceedsBuffer";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_ExceedingLength_SyOr2_2() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = "veryLongFileNameThatExceedsBuffer";
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    int result = TarUtils.formatNameBytes(name, buf, offset, length, encoding);
    assertArrayEquals(new byte[]{118, 101, 114, 121, 76, 111, 110, 103, 70, 105, 108, 101, 78, 97, 109, 101, 84, 104, 97, 116}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatNameBytes_NullName_UEdI3() throws IOException {
    ZipEncoding encoding = new ZipEncoding();
    String name = null;
    byte[] buf = new byte[20];
    int offset = 0;
    int length = 20;
    try {
        TarUtils.formatNameBytes(name, buf, offset, length, encoding);
        fail("Expected IOException for null name");
    } catch (IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_PositiveValueWithinOctalLimit_cynC0_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(10, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_PositiveValueWithinOctalLimit_cynC0_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(10, buf, 0, 8);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 10}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeValue_zUWH1_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(-10, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeValue_zUWH1_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(-10, buf, 0, 8);
        assertArrayEquals(new byte[]{(byte) 0xff, 0, 0, 0, 0, 0, 0, 10}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ValueExceedsOctalLimit_gRcm2_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(100000, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ValueExceedsOctalLimit_gRcm2_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(100000, buf, 0, 8);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 1, 64}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ZeroValue_Jvzx4_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ZeroValue_Jvzx4_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 8);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_BinaryLengthLessThan9_utAI5_1() {
        byte[] buf = new byte[4];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 4);
        assertEquals(4, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_BinaryLengthLessThan9_utAI5_2() {
        byte[] buf = new byte[4];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 4);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 255}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_BinaryLengthGreaterThanOrEqualTo9_BFFo6_1() {
        byte[] buf = new byte[9];
        int result = TarUtils.formatLongOctalOrBinaryBytes(5000000000L, buf, 0, 9);
        assertEquals(9, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_BinaryLengthGreaterThanOrEqualTo9_BFFo6_2() {
        byte[] buf = new byte[9];
        int result = TarUtils.formatLongOctalOrBinaryBytes(5000000000L, buf, 0, 9);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseName_ValidInput_ReturnsCorrectName_uIMk0() {
    byte[] buffer = "testFileName".getBytes();
    int offset = 0;
    int length = buffer.length;
    String expected = "testFileName";
    String result = TarUtils.parseName(buffer, offset, length);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_PositiveValueWithinOctalLimit_Xumq0_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(7, buf, 0, 8);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 7}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_PositiveValueWithinOctalLimit_Xumq0_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(7, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeValue_WVAH1_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(-1, buf, 0, 8);
        assertArrayEquals(new byte[]{(byte) 0xff, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeValue_WVAH1_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(-1, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ValueExceedsOctalLimit_tXOC2_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(1000, buf, 0, 8);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 0, 0}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_ValueExceedsOctalLimit_tXOC2_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(1000, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LengthLessThan9_khcA3_1() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 8);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 0, (byte) 0xff}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LengthLessThan9_khcA3_2() {
        byte[] buf = new byte[8];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 8);
        assertEquals(8, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LengthEquals9_aSTe4_1() {
        byte[] buf = new byte[9];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 9);
        assertArrayEquals(new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 0, 0, (byte) 0xff}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LengthEquals9_aSTe4_2() {
        byte[] buf = new byte[9];
        int result = TarUtils.formatLongOctalOrBinaryBytes(255, buf, 0, 9);
        assertEquals(9, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LargeValue_pRqR5_1() {
        byte[] buf = new byte[16];
        int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 16);
        assertEquals(16, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_LargeValue_pRqR5_2() {
        byte[] buf = new byte[16];
        int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MAX_VALUE, buf, 0, 16);
        assertEquals((byte) 0x80, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeLargeValue_UGKz6_1() {
        byte[] buf = new byte[16];
        int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MIN_VALUE, buf, 0, 16);
        assertEquals(16, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_NegativeLargeValue_UGKz6_2() {
        byte[] buf = new byte[16];
        int result = TarUtils.formatLongOctalOrBinaryBytes(Long.MIN_VALUE, buf, 0, 16);
        assertEquals((byte) 0xff, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_ZeroValue_gwBU0() {
    byte[] buffer = new byte[3];
    TarUtils.formatUnsignedOctalString(0, buffer, 0, 3);
    assertArrayEquals(new byte[]{'0', '0', '0'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_SmallValue_KjQr1() {
    byte[] buffer = new byte[3];
    TarUtils.formatUnsignedOctalString(7, buffer, 0, 3);
    assertArrayEquals(new byte[]{'0', '0', '7'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_ExactFit_BWHH2() {
    byte[] buffer = new byte[4];
    TarUtils.formatUnsignedOctalString(63, buffer, 0, 4);
    assertArrayEquals(new byte[]{'0', '0', '7', '7'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_LargeValue_Imiw3() {
    byte[] buffer = new byte[6];
    TarUtils.formatUnsignedOctalString(511, buffer, 0, 6);
    assertArrayEquals(new byte[]{'0', '0', '1', '7', '7', '7'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatUnsignedOctalString_LeadingZeros_weDh5() {
    byte[] buffer = new byte[5];
    TarUtils.formatUnsignedOctalString(8, buffer, 0, 5);
    assertArrayEquals(new byte[]{'0', '0', '0', '1', '0'}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_fyIr0_1() {
    byte[] buf = new byte[12];
    long value = 123456;
    int offset = 0;
    int length = 11;
    int result = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertEquals(offset + length, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFormatLongOctalBytes_fyIr0_2() {
    byte[] buf = new byte[12];
    long value = 123456;
    int offset = 0;
    int length = 11;
    int result = TarUtils.formatLongOctalBytes(value, buf, offset, length);
    assertArrayEquals(new byte[]{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '1', '4', '0'}, buf);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_qqaD0_1() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_qqaD0_2() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, result.get(0).getSparseOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_qqaD0_3() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(100, result.get(0).getSparseNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_qqaD0_4() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(200, result.get(1).getSparseOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_ValidInput_qqaD0_5() throws IOException {
    String sparseMap = "0,100,200,300";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(300, result.get(1).getSparseNumbytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromPAX01SparseHeaders_EmptyInput_vNRA4() throws IOException {
    String sparseMap = "";
    List<TarArchiveStructSparse> result = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
    assertEquals(0, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyInputStream_RWEP0_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 0;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyInputStream_RWEP0_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 0;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleHeader_EhAS1_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 test\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleHeader_EhAS1_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 test\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("test", result.get("test"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleHeader_EhAS1_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 test\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleHeaders_rNOI2_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleHeaders_rNOI2_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleHeaders_rNOI2_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value2", result.get("key2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleHeaders_rNOI2_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyValue_Szze3_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key=\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyValue_Szze3_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key=\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_NegativeOffset_IYca4() {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=-5\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_InvalidNumberFormat_JahO5() {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=abc\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ExceedHeaderSize_Tawn6() {
    InputStream inputStream = new ByteArrayInputStream("10 key1=value1\n10 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SparseHeaders_AFoX7_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SparseHeaders_AFoX7_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SparseHeaders_AFoX7_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(1, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SparseHeaders_AFoX7_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SparseHeaders_AFoX7_5() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(50, sparseHeaders.get(0).getNumBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MissingOffset_QZor8() {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveHeaders_unFw10_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n5 key3=value3\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(3, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveHeaders_unFw10_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n5 key3=value3\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveHeaders_unFw10_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n5 key3=value3\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value2", result.get("key2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveHeaders_unFw10_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n5 key3=value3\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value3", result.get("key3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveHeaders_unFw10_5() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n5 key3=value3\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ExceedingReadLimit_sCyv11() {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 10;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_NonNumericLength_GhHC12() {
    InputStream inputStream = new ByteArrayInputStream("a key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    assertThrows(IOException.class, () -> {
        TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleSparseHeader_IrRe13_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleSparseHeader_IrRe13_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(1, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleSparseHeader_IrRe13_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleSparseHeader_IrRe13_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(50, sparseHeaders.get(0).getNumBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(2, sparseHeaders.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(100, sparseHeaders.get(0).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(50, sparseHeaders.get(0).getNumBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_5() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(200, sparseHeaders.get(1).getOffset());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_MultipleSparseHeaders_NlpA14_6() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 GNU.sparse.offset=100\n5 GNU.sparse.numbytes=50\n5 GNU.sparse.offset=200\n5 GNU.sparse.numbytes=100\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(100, sparseHeaders.get(1).getNumBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleGlobalHeader_SYEZ15_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    globalPaxHeaders.put("key2", "value2");
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleGlobalHeader_SYEZ15_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    globalPaxHeaders.put("key2", "value2");
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleGlobalHeader_SYEZ15_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    globalPaxHeaders.put("key2", "value2");
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value2", result.get("key2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_SingleGlobalHeader_SYEZ15_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    globalPaxHeaders.put("key2", "value2");
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyGlobalHeaders_zbLF16_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyGlobalHeaders_zbLF16_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_EmptyGlobalHeaders_zbLF16_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 50;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveEmptyLines_RjEJ17_1() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveEmptyLines_RjEJ17_2() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value1", result.get("key1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveEmptyLines_RjEJ17_3() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertEquals("value2", result.get("key2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParsePaxHeaders_ConsecutiveEmptyLines_RjEJ17_4() throws IOException {
    InputStream inputStream = new ByteArrayInputStream("5 key1=value1\n\n5 key2=value2\n".getBytes(StandardCharsets.UTF_8));
    List<TarArchiveStructSparse> sparseHeaders = new ArrayList<>();
    Map<String, String> globalPaxHeaders = new HashMap<>();
    long headerSize = 100;
    Map<String, String> result = TarUtils.parsePaxHeaders(inputStream, sparseHeaders, globalPaxHeaders, headerSize);
    assertTrue(sparseHeaders.isEmpty());}
}