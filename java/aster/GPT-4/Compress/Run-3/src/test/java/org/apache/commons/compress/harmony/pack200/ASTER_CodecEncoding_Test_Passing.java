/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CodecEncoding_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierForDefaultCodec_oZGU0() {
    BHSDCodec defaultCodec = new BHSDCodec(8, 16); // Using the constructor with b and h
    int specifier = CodecEncoding.getSpecifierForDefaultCodec(defaultCodec);
    assertEquals("Expected specifier value for default codec with b=8 and h=16", expectedValue, specifier);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCanonicalCodec_DbSu0_1() {
    BHSDCodec codec = CodecEncoding.getCanonicalCodec(0);
    assertNotNull(codec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCanonicalCodec_DbSu0_2() {
    BHSDCodec codec = CodecEncoding.getCanonicalCodec(0);
    assertEquals(0, codec.getB());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCanonicalCodec_DbSu0_3() {
    BHSDCodec codec = CodecEncoding.getCanonicalCodec(0);
    assertEquals(0, codec.getS());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCanonicalCodec_DbSu0_4() {
    BHSDCodec codec = CodecEncoding.getCanonicalCodec(0);
    assertEquals(0, codec.getH());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCanonicalCodec_DbSu0_5() {
    BHSDCodec codec = CodecEncoding.getCanonicalCodec(0);
    assertEquals(0, codec.getL());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueLessThanZero_aGTU0() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Codec defaultCodec = new Codec() {};
    assertThrows(IllegalArgumentException.class, () -> CodecEncoding.getCodec(-1, in, defaultCodec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueIsZero_MzCr1() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(0, in, defaultCodec);
    assertEquals(defaultCodec, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueBetween1And115_SnCG2() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Codec defaultCodec = new Codec() {};
    Codec[] canonicalCodec = new Codec[116];
    canonicalCodec[1] = new Codec() {};
    Codec result = CodecEncoding.getCodec(1, in, defaultCodec);
    assertEquals(canonicalCodec[1], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueIs116_AkVL3() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0b00001111});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(116, in, defaultCodec);
    assertTrue(result instanceof BHSDCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueBetween117And140_Gkmd4() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(117, in, defaultCodec);
    assertTrue(result instanceof RunCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueIs141_VcDi5() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(141, in, defaultCodec);
    assertTrue(result instanceof PopulationCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueIs188_gAQN6() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(188, in, defaultCodec);
    assertTrue(result instanceof PopulationCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValueGreaterThan188_oHEA7() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Codec defaultCodec = new Codec() {};
    assertThrows(Pack200Exception.class, () -> CodecEncoding.getCodec(189, in, defaultCodec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_CanonicalCodecLengthNot116_jaXn8() {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Codec defaultCodec = new Codec() {};
    Codec[] canonicalCodec = new Codec[115]; // Incorrect length
    assertThrows(Error.class, () -> CodecEncoding.getCodec(1, in, defaultCodec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ADefAndBDefBothTrue_hZHR9() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0b00011111, 0, 1});
    Codec defaultCodec = new Codec() {};
    assertThrows(Pack200Exception.class, () -> CodecEncoding.getCodec(118, in, defaultCodec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_EndOfBufferReadWhileDecodingCodec_rbNQ10() {
    InputStream in = new ByteArrayInputStream(new byte[]{});
    Codec defaultCodec = new Codec() {};
    assertThrows(EOFException.class, () -> CodecEncoding.getCodec(116, in, defaultCodec));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidPopulationCodec_ZkGm11() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2, 3});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(141, in, defaultCodec);
    assertTrue(result instanceof PopulationCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidDefaultCodec_ikCf14() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(0, in, defaultCodec);
    assertEquals(defaultCodec, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithDefaultCodec_DXPY15() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(117, in, defaultCodec);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithMultipleReads_LzWz16() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2, 3});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(141, in, defaultCodec);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithDifferentInputs_JJHP17() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2, 3});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(142, in, defaultCodec);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithEdgeValues_IUHM18() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1, 2});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(188, in, defaultCodec);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithNonCanonicalValue_sDMo20() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(119, in, defaultCodec);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCodec_ValidCodecWithDefaultAndCanonical_tYgT21() throws IOException {
    InputStream in = new ByteArrayInputStream(new byte[]{0, 1});
    Codec defaultCodec = new Codec() {};
    Codec result = CodecEncoding.getCodec(116, in, defaultCodec);
    assertTrue(result instanceof BHSDCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithCanonicalCodec_NIaR0_1() {
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithCanonicalCodec_NIaR0_2() {
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecDelta_Isra1_1() {
    BHSDCodec codec = new BHSDCodec(true, 2, 3); // Assuming constructor parameters are (isDelta, S, B)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecDelta_Isra1_2() {
    BHSDCodec codec = new BHSDCodec(true, 2, 3); // Assuming constructor parameters are (isDelta, S, B)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecDelta_Isra1_3() {
    BHSDCodec codec = new BHSDCodec(true, 2, 3); // Assuming constructor parameters are (isDelta, S, B)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(116, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecDelta_Isra1_4() {
    BHSDCodec codec = new BHSDCodec(true, 2, 3); // Assuming constructor parameters are (isDelta, S, B)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(1, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecDelta_Isra1_5() {
    BHSDCodec codec = new BHSDCodec(true, 2, 3); // Assuming constructor parameters are (isDelta, S, B)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecNoDelta_GwsF2_1() {
    BHSDCodec codec = new BHSDCodec(false, 2, 3);
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecNoDelta_GwsF2_2() {
    BHSDCodec codec = new BHSDCodec(false, 2, 3);
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(3, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecNoDelta_GwsF2_3() {
    BHSDCodec codec = new BHSDCodec(false, 2, 3);
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(116, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecNoDelta_GwsF2_4() {
    BHSDCodec codec = new BHSDCodec(false, 2, 3);
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithBHSDCodecNoDelta_GwsF2_5() {
    BHSDCodec codec = new BHSDCodec(false, 2, 3);
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(2, result[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKLessThan256_hOnu3_1() {
    RunCodec codec = new RunCodec(100, new CodecA(), new CodecB()); // Assuming constructor parameters are (K, ACodec, BCodec)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKLessThan256_hOnu3_2() {
    RunCodec codec = new RunCodec(100, new CodecA(), new CodecB()); // Assuming constructor parameters are (K, ACodec, BCodec)
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKBetween256And4096_tZlq4_1() {
    RunCodec codec = new RunCodec(3000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKBetween256And4096_tZlq4_2() {
    RunCodec codec = new RunCodec(3000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKBetween4096And65536_rguP5_1() {
    RunCodec codec = new RunCodec(50000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKBetween4096And65536_rguP5_2() {
    RunCodec codec = new RunCodec(50000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKGreaterThan65536_XYID6_1() {
    RunCodec codec = new RunCodec(70000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithRunCodecKGreaterThan65536_XYID6_2() {
    RunCodec codec = new RunCodec(70000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecFavouredDefault_EKyW7_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecFavouredDefault_EKyW7_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecUnfavouredDefault_vNVU8_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecUnfavouredDefault_vNVU8_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecTokenDefault_CDIU9_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecTokenDefault_CDIU9_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullFavoured_wunS10_1() {
    PopulationCodec codec = new PopulationCodec(null, new CodecB(), new CodecC(), null);
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullFavoured_wunS10_2() {
    PopulationCodec codec = new PopulationCodec(null, new CodecB(), new CodecC(), null);
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullUnfavoured_eHpO11_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), null, new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullUnfavoured_eHpO11_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), null, new CodecC(), new int[]{1, 2, 3});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullToken_dgDg12_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), null, new int[]{1, 2, 3});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNullToken_dgDg12_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), null, new int[]{1, 2, 3});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNoDefaults_nROD14_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecNoDefaults_nROD14_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{1, 2, 3});
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyFavoured_ZMgT15_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyFavoured_ZMgT15_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyUnfavoured_MykN16_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyUnfavoured_MykN16_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecC();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyToken_YPlD17_1() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEmptyToken_YPlD17_2() {
    PopulationCodec codec = new PopulationCodec(new CodecA(), new CodecB(), new CodecC(), new int[]{});
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithNullCodec_wkKQ18() {
    Codec defaultForBand = new CodecA();
    int[] result = CodecEncoding.getSpecifier(null, defaultForBand);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithNullDefaultForBand_HUCs19_1() {
    Codec codec = new CanonicalCodec();
    int[] result = CodecEncoding.getSpecifier(codec, null);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithNullDefaultForBand_HUCs19_2() {
    Codec codec = new CanonicalCodec();
    int[] result = CodecEncoding.getSpecifier(codec, null);
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithMultipleCodecTypes_sGoC20_1() {
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithMultipleCodecTypes_sGoC20_2() {
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithDefaultCodec_HWbL21_1() {
    Codec codec = new DefaultCodec();
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithDefaultCodec_HWbL21_2() {
    Codec codec = new DefaultCodec();
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithDifferentCodecInstances_kvLv22_1() {
    Codec codec1 = new CodecA();
    Codec codec2 = new CodecB();
    Codec defaultForBand = new CodecC();
    int[] result1 = CodecEncoding.getSpecifier(codec1, defaultForBand);
    int[] result2 = CodecEncoding.getSpecifier(codec2, defaultForBand);
    assertNotNull(result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithDifferentCodecInstances_kvLv22_2() {
    Codec codec1 = new CodecA();
    Codec codec2 = new CodecB();
    Codec defaultForBand = new CodecC();
    int[] result1 = CodecEncoding.getSpecifier(codec1, defaultForBand);
    int[] result2 = CodecEncoding.getSpecifier(codec2, defaultForBand);
    assertNotNull(result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithDifferentCodecInstances_kvLv22_3() {
    Codec codec1 = new CodecA();
    Codec codec2 = new CodecB();
    Codec defaultForBand = new CodecC();
    int[] result1 = CodecEncoding.getSpecifier(codec1, defaultForBand);
    int[] result2 = CodecEncoding.getSpecifier(codec2, defaultForBand);
    assertNotEquals(result1, result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEdgeCaseKValue_hPer23_1() {
    RunCodec codec = new RunCodec(256, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithEdgeCaseKValue_hPer23_2() {
    RunCodec codec = new RunCodec(256, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithHighKValue_fcVw24_1() {
    RunCodec codec = new RunCodec(100000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithHighKValue_fcVw24_2() {
    RunCodec codec = new RunCodec(100000, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithLowKValue_MDZf25_1() {
    RunCodec codec = new RunCodec(1, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithLowKValue_MDZf25_2() {
    RunCodec codec = new RunCodec(1, new CodecA(), new CodecB());
    Codec defaultForBand = new DefaultCodec();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithAllNulls_LHRo26() {
    int[] result = CodecEncoding.getSpecifier(null, null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecWithNullFavouredAndToken_nRJg27_1() {
    PopulationCodec codec = new PopulationCodec(null, new CodecB(), null, null);
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSpecifierWithPopulationCodecWithNullFavouredAndToken_nRJg27_2() {
    PopulationCodec codec = new PopulationCodec(null, new CodecB(), null, null);
    Codec defaultForBand = new CodecB();
    int[] result = CodecEncoding.getSpecifier(codec, defaultForBand);
    assertTrue(result.length > 0);}
}