/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CPMethodOrField_Test_Passing {
private CPClass className;
private CPNameAndType nameAndType;
private CPClass otherClassName;
private CPNameAndType otherNameAndType;
CPMethodOrField cpmethodorfield;
CPMethodOrField otherCPMethodOrField;
private CPClass mockClassName;
private CPNameAndType mockNameAndType;
private CPUTF8 utf8;
    private int indexInClass = -1;
    private int indexInClassForConstructor = -1;
    private int indexInClassForConstructor = -1;
    private int indexInClassForConstructor = -1;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareTo_DifferentClasses() throws Exception {
        className = new CPClass(new CPUTF8("ClassA"));
        nameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        otherClassName = new CPClass(new CPUTF8("ClassB"));
        otherNameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        otherCPMethodOrField = new CPMethodOrField(otherClassName, otherNameAndType);
        int result = cpmethodorfield.compareTo(otherCPMethodOrField);
        assertTrue(result < 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareTo_SameClassDifferentNameAndType() throws Exception {
        otherClassName = className; // Same class
        otherNameAndType = new CPNameAndType(new CPUTF8("otherMethodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        otherCPMethodOrField = new CPMethodOrField(otherClassName, otherNameAndType);
        className = new CPClass(new CPUTF8("ClassA"));
        nameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        otherClassName = new CPClass(new CPUTF8("ClassB"));
        otherNameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        otherCPMethodOrField = new CPMethodOrField(otherClassName, otherNameAndType);
        int result = cpmethodorfield.compareTo(otherCPMethodOrField);
        assertTrue(result < 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareTo_SameClassAndNameType() throws Exception {
        className = new CPClass(new CPUTF8("ClassA"));
        nameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        otherClassName = new CPClass(new CPUTF8("ClassB"));
        otherNameAndType = new CPNameAndType(new CPUTF8("methodName"), new CPSignature("signature", new CPUTF8("signatureForm"), new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        otherCPMethodOrField = new CPMethodOrField(otherClassName, otherNameAndType);
        otherClassName = className; // Same class
        otherNameAndType = nameAndType; // Same name and type
        otherCPMethodOrField = new CPMethodOrField(otherClassName, otherNameAndType);
        int result = cpmethodorfield.compareTo(otherCPMethodOrField);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetIndexInClass() throws Exception {
        CPUTF8 mockUtf8 = new CPUTF8("mockUtf8");
        mockClassName = new CPClass(mockUtf8);
        CPUTF8 mockName = new CPUTF8("mockName");
        CPUTF8 mockSignatureForm = new CPUTF8("mockSignatureForm");
        CPSignature mockSignature = new CPSignature("mockSignature", mockSignatureForm, new ArrayList<>());
        mockNameAndType = new CPNameAndType(mockName, mockSignature);
        cpmethodorfield = new CPMethodOrField(mockClassName, mockNameAndType);
        int testIndex = 5;
        cpmethodorfield.setIndexInClass(testIndex);
        Field field = CPMethodOrField.class.getDeclaredField("indexInClass");
        field.setAccessible(true);
        int actualIndex = (int) field.get(cpmethodorfield);
        assertEquals(testIndex, actualIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClass_IDkc0() {
    CPUTF8 utf8 = new CPUTF8("exampleUTF8");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("exampleName");
    CPUTF8 signatureForm = new CPUTF8("exampleSignatureForm");
    List<CPClass> classes = new ArrayList<>();
    CPSignature signature = new CPSignature("exampleSignature", signatureForm, classes);
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClass(5);
    assertEquals(5, methodOrField.getIndexInClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassName_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("TestClassName");
        className = new CPClass(utf8);
        nameAndType = new CPNameAndType(new CPUTF8("TestName"), new CPSignature("TestSignature", utf8, new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        CPClass result = cpmethodorfield.getClassName();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassName_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("TestClassName");
        className = new CPClass(utf8);
        nameAndType = new CPNameAndType(new CPUTF8("TestName"), new CPSignature("TestSignature", utf8, new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        CPClass result = cpmethodorfield.getClassName();
        assertEquals(className, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareToEqual_Ytnj0() {
    CPUTF8 utf8Class1 = new CPUTF8("Class1");
    CPUTF8 utf8Class2 = new CPUTF8("Class1");
    CPUTF8 utf8Name1 = new CPUTF8("methodName");
    CPUTF8 utf8Name2 = new CPUTF8("methodName");
    CPSignature signature1 = new CPSignature("()V", utf8Class1, new ArrayList<>());
    CPSignature signature2 = new CPSignature("()V", utf8Class2, new ArrayList<>());
    CPClass class1 = new CPClass(utf8Class1);
    CPClass class2 = new CPClass(utf8Class2);
    CPNameAndType nameAndType1 = new CPNameAndType(utf8Name1, signature1);
    CPNameAndType nameAndType2 = new CPNameAndType(utf8Name2, signature2);
    CPMethodOrField methodOrField1 = new CPMethodOrField(class1, nameAndType1);
    CPMethodOrField methodOrField2 = new CPMethodOrField(class2, nameAndType2);
    assertEquals(0, methodOrField1.compareTo(methodOrField2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareToDifferentClass_juCY1() {
    CPUTF8 utf8Class1 = new CPUTF8("Class1");
    CPUTF8 utf8Class2 = new CPUTF8("Class2");
    CPUTF8 utf8Name = new CPUTF8("methodName");
    CPSignature signature = new CPSignature("()V", utf8Class1, new ArrayList<>());
    CPClass class1 = new CPClass(utf8Class1);
    CPClass class2 = new CPClass(utf8Class2);
    CPNameAndType nameAndType = new CPNameAndType(utf8Name, signature);
    CPMethodOrField methodOrField1 = new CPMethodOrField(class1, nameAndType);
    CPMethodOrField methodOrField2 = new CPMethodOrField(class2, nameAndType);
    assertTrue(methodOrField1.compareTo(methodOrField2) < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompareToDifferentNameAndType_asFt2() {
    CPUTF8 utf8Class = new CPUTF8("Class1");
    CPUTF8 utf8Name1 = new CPUTF8("methodName1");
    CPUTF8 utf8Name2 = new CPUTF8("methodName2");
    CPSignature signature1 = new CPSignature("()V", utf8Class, new ArrayList<>());
    CPSignature signature2 = new CPSignature("()V", utf8Class, new ArrayList<>());
    CPClass class1 = new CPClass(utf8Class);
    CPNameAndType nameAndType1 = new CPNameAndType(utf8Name1, signature1);
    CPNameAndType nameAndType2 = new CPNameAndType(utf8Name2, signature2);
    CPMethodOrField methodOrField1 = new CPMethodOrField(class1, nameAndType1);
    CPMethodOrField methodOrField2 = new CPMethodOrField(class1, nameAndType2);
    assertTrue(methodOrField1.compareTo(methodOrField2) < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassName_zNpB0() {
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("methodName");
    CPSignature signature = new CPSignature("signature", utf8, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    assertEquals(className, methodOrField.getClassName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndexInClassForConstructor() throws Exception {
        CPUTF8 utf8 = new CPUTF8("TestUTF8");
        CPClass className = new CPClass(utf8);
        CPNameAndType nameAndType = new CPNameAndType(utf8, new CPSignature("signature", utf8, new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        int index = cpmethodorfield.getIndexInClassForConstructor();
        assertEquals(-1, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexInClassForConstructor_SSNH0() {
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("constructorName");
    CPUTF8 signatureForm = new CPUTF8("signatureForm");
    List<CPClass> classes = new ArrayList<>();
    CPSignature signature = new CPSignature("signature", signatureForm, classes);
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    int expectedIndex = 0; // Replace with the expected index value
    assertEquals(expectedIndex, methodOrField.getIndexInClassForConstructor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString() throws Exception {
        CPUTF8 utf8Name = new CPUTF8("methodName");
        CPUTF8 utf8SignatureForm = new CPUTF8("signatureForm");
        List<CPClass> classes = new ArrayList<>();
        classes.add(new CPClass(new CPUTF8("ClassA")));
        CPSignature signature = new CPSignature("signature", utf8SignatureForm, classes);
        nameAndType = new CPNameAndType(utf8Name, signature);
        className = new CPClass(new CPUTF8("ClassB"));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        String expected = "ClassB: " + nameAndType.toString();
        String actual = cpmethodorfield.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetClassIndex() throws Exception {
        utf8 = new CPUTF8("TestUTF8");
        className = Mockito.mock(CPClass.class);
        nameAndType = new CPNameAndType(utf8, new CPSignature("signature", utf8, new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        Mockito.when(className.getIndex()).thenReturn(5);
        int index = cpmethodorfield.getClassIndex();
        Assertions.assertEquals(5, index);
        Mockito.verify(className).getIndex();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OQrl0() {
    CPUTF8 utf8Name = new CPUTF8("methodName");
    CPUTF8 utf8Signature = new CPUTF8("signature");
    CPSignature signature = new CPSignature("signature", utf8Signature, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(utf8Name, signature);
    CPUTF8 utf8Class = new CPUTF8("MyClass");
    CPClass className = new CPClass(utf8Class);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    String expected = "MyClass: methodName: signature";
    assertEquals(expected, methodOrField.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassIndex_cDcb0() {
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("methodName");
    CPUTF8 signatureForm = new CPUTF8("signatureForm");
    CPSignature signature = new CPSignature("signature", signatureForm, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    int expectedIndex = className.getIndex(); // Assuming getIndex() returns the expected index
    int actualIndex = methodOrField.getClassIndex();
    assertEquals(expectedIndex, actualIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDesc_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("testName");
        CPSignature signature = new CPSignature("testSignature", utf8, new ArrayList<>());
        nameAndType = new CPNameAndType(utf8, signature);
        className = new CPClass(utf8);
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        CPNameAndType result = cpmethodorfield.getDesc();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDesc_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("testName");
        CPSignature signature = new CPSignature("testSignature", utf8, new ArrayList<>());
        nameAndType = new CPNameAndType(utf8, signature);
        className = new CPClass(utf8);
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        CPNameAndType result = cpmethodorfield.getDesc();
        assertEquals(nameAndType, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDesc_zwCC0() {
    CPUTF8 utf8Name = new CPUTF8("methodName");
    CPUTF8 utf8Signature = new CPUTF8("signature");
    CPSignature signature = new CPSignature("signature", utf8Signature, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(utf8Name, signature);
    CPClass className = new CPClass(utf8Name);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    assertEquals(nameAndType, methodOrField.getDesc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDescIndex() throws Exception {
        utf8 = new CPUTF8("testName");
        nameAndType = Mockito.mock(CPNameAndType.class);
        className = new CPClass(utf8);
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        Mockito.when(nameAndType.getIndex()).thenReturn(5);
        int result = cpmethodorfield.getDescIndex();
        Assertions.assertEquals(5, result);
        Mockito.verify(nameAndType).getIndex();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetIndexInClassForConstructor() throws Exception {
        CPUTF8 utf8 = new CPUTF8("TestUTF8");
        CPClass className = new CPClass(utf8);
        CPUTF8 name = new CPUTF8("TestName");
        CPUTF8 signatureForm = new CPUTF8("TestSignatureForm");
        CPSignature signature = new CPSignature("TestSignature", signatureForm, new ArrayList<>());
        CPNameAndType nameAndType = new CPNameAndType(name, signature);
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        int expectedIndex = 5;
        cpmethodorfield.setIndexInClassForConstructor(expectedIndex);
        Field field = CPMethodOrField.class.getDeclaredField("indexInClassForConstructor");
        field.setAccessible(true);
        int actualIndex = (int) field.get(cpmethodorfield);
        assertEquals(expectedIndex, actualIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIndexInClassForConstructor_DcFp0() {
    CPUTF8 utf8 = new CPUTF8("TestClass");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("methodName");
    CPUTF8 signatureForm = new CPUTF8("signatureForm");
    CPSignature signature = new CPSignature("signature", signatureForm, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    methodOrField.setIndexInClassForConstructor(5);
    assertEquals(5, methodOrField.getIndexInClassForConstructor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndexInClass() throws Exception {
        CPUTF8 utf8 = new CPUTF8("TestUTF8");
        CPClass className = new CPClass(utf8);
        CPNameAndType nameAndType = new CPNameAndType(utf8, new CPSignature("signature", utf8, new ArrayList<>()));
        cpmethodorfield = new CPMethodOrField(className, nameAndType);
        int expectedIndex = -1; // Default value as per the constructor
        assertEquals(expectedIndex, cpmethodorfield.getIndexInClass());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDescIndex_BhEE0() {
    CPUTF8 utf8Name = new CPUTF8("methodName");
    CPUTF8 utf8Signature = new CPUTF8("signature");
    CPSignature signature = new CPSignature("signature", utf8Signature, new ArrayList<>());
    CPNameAndType nameAndType = new CPNameAndType(utf8Name, signature);
    CPClass className = new CPClass(new CPUTF8("ClassName"));
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    int expectedIndex = nameAndType.getIndex(); // Assuming getIndex() returns an integer index
    assertEquals(expectedIndex, methodOrField.getDescIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIndexInClass_vOjw0() {
    CPUTF8 utf8 = new CPUTF8("ExampleUTF8");
    CPClass className = new CPClass(utf8);
    CPUTF8 name = new CPUTF8("exampleMethod");
    CPUTF8 signatureForm = new CPUTF8("()V");
    List<CPClass> classes = new ArrayList<>();
    CPSignature signature = new CPSignature("()V", signatureForm, classes);
    CPNameAndType nameAndType = new CPNameAndType(name, signature);
    CPMethodOrField methodOrField = new CPMethodOrField(className, nameAndType);
    int expectedIndex = 0; // Replace with the expected index value
    assertEquals(expectedIndex, methodOrField.getIndexInClass());
}
}