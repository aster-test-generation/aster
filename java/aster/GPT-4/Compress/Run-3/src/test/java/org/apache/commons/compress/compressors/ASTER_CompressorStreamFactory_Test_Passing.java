/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithNullName_khxw1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    factory.createCompressorInputStream(null, in, false);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithNullInputStream_nGvr2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.createCompressorInputStream("GZIP", null, false);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithBrotliNotAvailable_cgyH5() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(BrotliUtils.isBrotliCompressionAvailable()).thenReturn(false);
    factory.createCompressorInputStream("BROTLI", in);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithXZNotAvailable_kkNc7() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(XZUtils.isXZCompressionAvailable()).thenReturn(false);
    factory.createCompressorInputStream("XZ", in, false);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithZstandardNotAvailable_pfHj9() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(ZstdUtils.isZstdCompressionAvailable()).thenReturn(false);
    factory.createCompressorInputStream("ZSTANDARD", in);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZMANotAvailable_ghFw11() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(LZMAUtils.isLZMACompressionAvailable()).thenReturn(false);
    factory.createCompressorInputStream("LZMA", in);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithUnknownCompressor_rZwu20() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    factory.createCompressorInputStream("UNKNOWN", in, false);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithNullName_EMuF10() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.createCompressorOutputStream(null, new ByteArrayOutputStream());
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithNullOutputStream_ZPHA11() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.createCompressorOutputStream("GZIP", null);
}
@Test(expected = CompressorException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithUnknownCompressor_cDAA12() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.createCompressorOutputStream("UNKNOWN", new ByteArrayOutputStream());
}
@Test(expected = IllegalStateException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_WhenDecompressUntilEOFIsNotNull_ShouldThrowException_hjPd1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    factory.setDecompressConcatenated(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_exNJ0() {
    String expected = "ZSTANDARD"; // Assuming ZSTANDARD is a constant with this value
    String actual = CompressorStreamFactory.getZstandard();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_WhenCalled_ReturnsNonNullSortedMap_CNYR0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorInputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_WhenCalled_ReturnsUnmodifiableSortedMap_Njvd1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorInputStreamProviders();
    assertThrows(UnsupportedOperationException.class, () -> result.put("test", new CompressorStreamProvider()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_fgjf0() {
    String expected = "BZIP2"; // Assuming BZIP2 is a constant with this value
    String actual = CompressorStreamFactory.getBzip2();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_WhenCalled_ReturnsNonNullSortedMap_cENi0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorOutputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_WhenCalled_ReturnsUnmodifiableSortedMap_SNTV1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorOutputStreamProviders();
    assertThrows(UnsupportedOperationException.class, () -> result.put("test", new CompressorStreamProvider()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_Bjzl0_1() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_Bjzl0_2() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_Bjzl0_3() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_Bjzl0_3_fid2() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertTrue(providers.containsKey("expectedCompressorName")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_TMbX0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> compressorNames = factory.getInputStreamCompressorNames();
    Set<String> expectedCompressorNames = Sets.newHashSet("GZIP", "BROTLI", "BZIP2", "XZ", "LZMA", "PACK200", "DEFLATE", "SNAPPY_RAW", "SNAPPY_FRAMED", "Z", "LZ4_BLOCK", "LZ4_FRAMED", "ZSTANDARD", "DEFLATE64");
    assertEquals(expectedCompressorNames, compressorNames);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithGzip_inBo0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("GZIP", in, false);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithGzip_inBo0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("GZIP", in, false);
    assertTrue(result instanceof GzipCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithBzip2_dROn3_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("BZIP2", in, false);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithBzip2_dROn3_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("BZIP2", in, false);
    assertTrue(result instanceof BZip2CompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithBrotli_lCeL4_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(BrotliUtils.isBrotliCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("BROTLI", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithBrotli_lCeL4_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(BrotliUtils.isBrotliCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("BROTLI", in);
    assertTrue(result instanceof BrotliCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithXZ_RTFC6_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(XZUtils.isXZCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("XZ", in, false);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithXZ_RTFC6_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(XZUtils.isXZCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("XZ", in, false);
    assertTrue(result instanceof XZCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithZstandard_iKXN8_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(ZstdUtils.isZstdCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("ZSTANDARD", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithZstandard_iKXN8_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(ZstdUtils.isZstdCompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("ZSTANDARD", in);
    assertTrue(result instanceof ZstdCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZMA_aZPO10_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(LZMAUtils.isLZMACompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("LZMA", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZMA_aZPO10_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    when(LZMAUtils.isLZMACompressionAvailable()).thenReturn(true);
    CompressorInputStream result = factory.createCompressorInputStream("LZMA", in);
    assertTrue(result instanceof LZMACompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithPack200_kgAQ12_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("PACK200", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithPack200_kgAQ12_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("PACK200", in);
    assertTrue(result instanceof Pack200CompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithSnappyRaw_WBAA13_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("SNAPPY_RAW", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithSnappyRaw_WBAA13_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("SNAPPY_RAW", in);
    assertTrue(result instanceof SnappyCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithSnappyFramed_qUtv14_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("SNAPPY_FRAMED", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithSnappyFramed_qUtv14_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("SNAPPY_FRAMED", in);
    assertTrue(result instanceof FramedSnappyCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithZ_KEAa15_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("Z", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithZ_KEAa15_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("Z", in);
    assertTrue(result instanceof ZCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithDeflate_yugN16_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("DEFLATE", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithDeflate_yugN16_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("DEFLATE", in);
    assertTrue(result instanceof DeflateCompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithDeflate64_yDAj17_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("DEFLATE64", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithDeflate64_yDAj17_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("DEFLATE64", in);
    assertTrue(result instanceof Deflate64CompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZ4Block_tIKo18_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("LZ4_BLOCK", in);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZ4Block_tIKo18_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("LZ4_BLOCK", in);
    assertTrue(result instanceof BlockLZ4CompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZ4Framed_NmTF19_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("LZ4_FRAMED", in, false);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStreamWithLZ4Framed_NmTF19_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[]{});
    CompressorInputStream result = factory.createCompressorInputStream("LZ4_FRAMED", in, false);
    assertTrue(result instanceof FramedLZ4CompressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToKeyMethod_rAZH21() {
    String key = CompressorStreamFactory.toKey("gzip");
    assertEquals("GZIP", key);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZ_mpMc0() {
    String expected = "ExpectedValue"; // Replace with the actual expected value of Z
    String actual = CompressorStreamFactory.getZ();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_qCde0() {
    String expected = "LZ4_FRAMED"; // Replace with the actual expected value of LZ4_FRAMED
    String actual = CompressorStreamFactory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_tktf0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some compressed data */});
    Set<String> compressorNames = new HashSet<>(Arrays.asList("gzip")); // Example compressor name
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream, compressorNames);
    assertNotNull(compressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_tktf0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some compressed data */});
    Set<String> compressorNames = new HashSet<>(Arrays.asList("gzip")); // Example compressor name
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream, compressorNames);
    assertEquals(0, compressorInputStream.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_tktf0_3() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some compressed data */});
    Set<String> compressorNames = new HashSet<>(Arrays.asList("gzip")); // Example compressor name
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream, compressorNames);
    assertEquals(0, compressorInputStream.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_tktf0_4() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some compressed data */});
    Set<String> compressorNames = new HashSet<>(Arrays.asList("gzip")); // Example compressor name
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream, compressorNames);
    assertEquals(0, compressorInputStream.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_HBbh0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some test data */});
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream);
    assertNotNull(compressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_HBbh0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some test data */});
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream);
    assertEquals(0, compressorInputStream.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_HBbh0_3() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some test data */});
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream);
    assertEquals(0, compressorInputStream.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_HBbh0_4() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{/* some test data */});
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream(inputStream);
    assertEquals(0, compressorInputStream.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzip_rzWH0() {
    String expected = "GZIP"; // Assuming GZIP is a constant defined somewhere in the class
    String actual = CompressorStreamFactory.getGzip();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_YgkP0() {
    String expected = "LZMA"; // Assuming LZMA is a constant with this value
    String actual = CompressorStreamFactory.getLzma();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_DefaultConstructor_JNyM0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithDecompressUntilEOF_jNjo1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithDecompressUntilEOF_False_BAmg2() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithMemoryLimit_ixfU3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithMemoryLimit_False_eJIB4() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
    assertFalse(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithMemoryLimit_Zero_Nkct5() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithMemoryLimit_Negative_yxXz6() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, -1);
    assertTrue(factory.getDecompressConcatenated());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithDifferentMemoryLimits_gBpv9_1() {
    CompressorStreamFactory factory1 = new CompressorStreamFactory(true, 512);
    CompressorStreamFactory factory2 = new CompressorStreamFactory(false, 512);
    assertTrue(factory1.getDecompressConcatenated());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressConcatenated_WithDifferentMemoryLimits_gBpv9_2() {
    CompressorStreamFactory factory1 = new CompressorStreamFactory(true, 512);
    CompressorStreamFactory factory2 = new CompressorStreamFactory(false, 512);
    assertFalse(factory2.getDecompressConcatenated());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_OoPC0_1() {
    CompressorStreamFactory instance1 = CompressorStreamFactory.getSingleton();
    CompressorStreamFactory instance2 = CompressorStreamFactory.getSingleton();
    assertNotNull(instance1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingleton_OoPC0_2() {
    CompressorStreamFactory instance1 = CompressorStreamFactory.getSingleton();
    CompressorStreamFactory instance2 = CompressorStreamFactory.getSingleton();
    assertSame(instance1, instance2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_hCGD0() {
    String expected = "expected_snappy_raw_value"; // Replace with the actual expected value of SNAPPY_RAW
    String actual = CompressorStreamFactory.getSnappyRaw();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithValidInputStream_Rbqt0() throws CompressorException {
    InputStream inputStream = new ByteArrayInputStream("compressed data".getBytes());
    String result = CompressorStreamFactory.detect(inputStream);
    assertEquals("expectedFormat", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamCompressorNames_laWs0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> expectedCompressors = Sets.newHashSet("GZIP", "BZIP2", "XZ", "LZMA", "PACK200", "DEFLATE", "SNAPPY_FRAMED", "LZ4_BLOCK", "LZ4_FRAMED", "ZSTANDARD");
    Set<String> actualCompressors = factory.getOutputStreamCompressorNames();
    assertEquals(expectedCompressors, actualCompressors);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateGzipCompressorOutputStream_eelO0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("GZIP", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateGzipCompressorOutputStream_eelO0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("GZIP", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof GzipCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateBZip2CompressorOutputStream_pRib1_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("BZIP2", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateBZip2CompressorOutputStream_pRib1_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("BZIP2", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof BZip2CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateXZCompressorOutputStream_VsXi2_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("XZ", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateXZCompressorOutputStream_VsXi2_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("XZ", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof XZCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePack200CompressorOutputStream_veMs3_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("PACK200", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePack200CompressorOutputStream_veMs3_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("PACK200", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof Pack200CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZMACompressorOutputStream_lPoT4_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZMA", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZMACompressorOutputStream_lPoT4_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZMA", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof LZMACompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateDeflateCompressorOutputStream_zPsf5_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("DEFLATE", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateDeflateCompressorOutputStream_zPsf5_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("DEFLATE", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof DeflateCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateSnappyFramedCompressorOutputStream_TFrT6_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("SNAPPY_FRAMED", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateSnappyFramedCompressorOutputStream_TFrT6_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("SNAPPY_FRAMED", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof FramedSnappyCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZ4BlockCompressorOutputStream_MuDB7_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZ4_BLOCK", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZ4BlockCompressorOutputStream_MuDB7_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZ4_BLOCK", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof BlockLZ4CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZ4FramedCompressorOutputStream_aKyS8_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZ4_FRAMED", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateLZ4FramedCompressorOutputStream_aKyS8_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("LZ4_FRAMED", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof FramedLZ4CompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateZStandardCompressorOutputStream_fLqf9_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("ZSTANDARD", new ByteArrayOutputStream());
    assertNotNull(outputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateZStandardCompressorOutputStream_fLqf9_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("ZSTANDARD", new ByteArrayOutputStream());
    assertTrue(outputStream instanceof ZstdCompressorOutputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithCustomProvider_bwti13() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    CompressorOutputStream outputStream = factory.createCompressorOutputStream("CUSTOM", new ByteArrayOutputStream());
    assertNotNull(outputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_WithTrueConstructor_HOtb0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_WithFalseConstructor_VNPr1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(false);
    assertFalse(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_WithDefaultConstructor_LdJf2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertNull(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_WithMemoryLimitConstructor_SXbO3() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    assertTrue(factory.getDecompressUntilEOF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_WhenDecompressUntilEOFIsNull_ShouldSetDecompressConcatenated_ofYB0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    factory.setDecompressConcatenated(true);
    assertTrue(factory.decompressConcatenated);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPack200_yjgz0() {
    String expected = "expectedValue"; // Replace with the actual expected value of PACK200
    String actual = CompressorStreamFactory.getPack200();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Block_VLTx0() {
    String expected = "ExpectedLZ4BlockValue"; // Replace with the actual expected value of LZ4_BLOCK
    String actual = CompressorStreamFactory.getLZ4Block();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate_NOjt0() {
    String expected = "DEFLATE"; // Assuming DEFLATE is a constant with this value
    String actual = CompressorStreamFactory.getDeflate();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyFramed_qelr0() {
    String expected = "SNAPPY_FRAMED"; // Replace with the actual expected value
    String actual = CompressorStreamFactory.getSnappyFramed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeflate64_sNxT0() {
    String expected = "DEFLATE64"; // Replace with the actual expected value of DEFLATE64
    String actual = CompressorStreamFactory.getDeflate64();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_Lhne0_1() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_Lhne0_2() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_Lhne0_3() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertTrue(providers.containsKey("expectedCompressorName")); // Replace with an actual expected key}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBrotli_PXKD0() {
    String expected = "BROTLI"; // Replace with the actual expected value of BROTLI
    String actual = CompressorStreamFactory.getBrotli();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_1() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_2() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_3() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_4() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertTrue(map.containsKey("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_5() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name1"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_6() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_NWIU0_7() {
    Set<String> names = new HashSet<>(Arrays.asList("name1", "name2", "name3"));
    CompressorStreamProvider provider = new CompressorStreamProvider();
    TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();
    CompressorStreamFactory.putAll(names, provider, map);
    assertEquals(provider, map.get("name3"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_XrTg0_1() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3}); // Example input
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream("gzip", inputStream);
    assertNotNull(compressorInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_XrTg0_2() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3}); // Example input
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream("gzip", inputStream);
    assertEquals(0, compressorInputStream.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_XrTg0_3() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3}); // Example input
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream("gzip", inputStream);
    assertEquals(0, compressorInputStream.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorInputStream_XrTg0_4() throws CompressorException {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    InputStream inputStream = new ByteArrayInputStream(new byte[]{1, 2, 3}); // Example input
    CompressorInputStream compressorInputStream = factory.createCompressorInputStream("gzip", inputStream);
    assertEquals(0, compressorInputStream.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetXz_NfLZ0() {
    String expected = "XZ"; // Assuming XZ is the expected value
    String actual = CompressorStreamFactory.getXz();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNullInputStream_YKSQ0() {
    Set<String> compressorNames = new HashSet<>(Arrays.asList(BZIP2, GZIP));
    assertThrows(IllegalArgumentException.class, () -> CompressorStreamFactory.detect(null, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNullCompressorNames_IapX1() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    assertThrows(IllegalArgumentException.class, () -> CompressorStreamFactory.detect(inputStream, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithEmptyCompressorNames_fXpO2() {
    InputStream inputStream = new ByteArrayInputStream(new byte[0]);
    assertThrows(IllegalArgumentException.class, () -> CompressorStreamFactory.detect(inputStream, new HashSet<>()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithBZIP2Signature_jfEE4() throws CompressorException {
    byte[] bzip2Signature = new byte[]{0x42, 0x5A, 0x68}; // Example BZIP2 signature
    InputStream inputStream = new ByteArrayInputStream(bzip2Signature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(BZIP2));
    assertEquals(BZIP2, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithGZIPSignature_jrJh5() throws CompressorException {
    byte[] gzipSignature = new byte[]{0x1F, (byte) 0x8B}; // Example GZIP signature
    InputStream inputStream = new ByteArrayInputStream(gzipSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(GZIP));
    assertEquals(GZIP, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithPack200Signature_YswE6() throws CompressorException {
    byte[] pack200Signature = new byte[]{0xCA, 0xFE}; // Example Pack200 signature
    InputStream inputStream = new ByteArrayInputStream(pack200Signature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(PACK200));
    assertEquals(PACK200, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithSnappyFramedSignature_dmQy7() throws CompressorException {
    byte[] snappyFramedSignature = new byte[]{0x82, 0x49}; // Example Snappy Framed signature
    InputStream inputStream = new ByteArrayInputStream(snappyFramedSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(SNAPPY_FRAMED));
    assertEquals(SNAPPY_FRAMED, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithZSignature_LPAo8() throws CompressorException {
    byte[] zSignature = new byte[]{0x1F, (byte) 0x9D}; // Example Z signature
    InputStream inputStream = new ByteArrayInputStream(zSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(Z));
    assertEquals(Z, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithDeflateSignature_GilG9() throws CompressorException {
    byte[] deflateSignature = new byte[]{0x78, (byte) 0xDA}; // Example Deflate signature
    InputStream inputStream = new ByteArrayInputStream(deflateSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(DEFLATE));
    assertEquals(DEFLATE, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithXZSignature_vvJU10() throws CompressorException {
    byte[] xzSignature = new byte[]{0xFD, '7', 'z', 'X', 'Z', 0x00}; // Example XZ signature
    InputStream inputStream = new ByteArrayInputStream(xzSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(XZ));
    assertEquals(XZ, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithLZMASignature_rbCu11() throws CompressorException {
    byte[] lzmaSignature = new byte[]{0x5D, 0x00}; // Example LZMA signature
    InputStream inputStream = new ByteArrayInputStream(lzmaSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(LZMA));
    assertEquals(LZMA, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithLZ4FramedSignature_EPDE12() throws CompressorException {
    byte[] lz4FramedSignature = new byte[]{0x04, 0x22}; // Example LZ4 Framed signature
    InputStream inputStream = new ByteArrayInputStream(lz4FramedSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(LZ4_FRAMED));
    assertEquals(LZ4_FRAMED, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithZStandardSignature_qNfQ13() throws CompressorException {
    byte[] zstandardSignature = new byte[]{0x28, 0xB5, 0x2F, 0xFD}; // Example Zstandard signature
    InputStream inputStream = new ByteArrayInputStream(zstandardSignature);
    Set<String> compressorNames = new HashSet<>(Collections.singletonList(ZSTANDARD));
    assertEquals(ZSTANDARD, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithMultipleCompressorNames_RBdU14() throws CompressorException {
    byte[] gzipSignature = new byte[]{0x1F, (byte) 0x8B}; // Example GZIP signature
    InputStream inputStream = new ByteArrayInputStream(gzipSignature);
    Set<String> compressorNames = new HashSet<>(Arrays.asList(BZIP2, GZIP, PACK200));
    assertEquals(GZIP, CompressorStreamFactory.detect(inputStream, compressorNames));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetectWithNoMatchingCompressor_IZxv15() {
    byte[] unknownSignature = new byte[]{0x00, 0x00}; // Example unknown signature
    InputStream inputStream = new ByteArrayInputStream(unknownSignature);
    Set<String> compressorNames = new HashSet<>(Arrays.asList(BZIP2, GZIP));
    assertThrows(CompressorException.class, () -> CompressorStreamFactory.detect(inputStream, compressorNames));
}
}