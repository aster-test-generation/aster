/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.Objects;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test(expected = UnsupportedOperationException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksumWithOldFormat_nCAz1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 100);
    entry.getChksum(); // This should throw an exception
}
@Test(expected = UnsupportedOperationException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceWithNewFormat_QtZS1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0); // Assuming FORMAT_OLD_MASK is 1
    entry.getRemoteDevice(); // This should throw an exception
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_NegativeSize_KCGQ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 100);
    entry.setSize(-1);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ExceedingSize_mijO2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 100);
    entry.setSize(0xFFFFFFFFL + 1);
}
@Test(expected = IllegalArgumentException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_InvalidMode_EiTl1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 100);
    entry.setMode(0xFFFFFFFF); // Invalid mode
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_WhenFileTypeIsBlockDevice_ShouldReturnTrue_PAGH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 1024);
    entry.mode = C_ISBLK; // Assuming mode is accessible or settable for the test
    assertTrue(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDevice_WhenFileTypeIsNotBlockDevice_ShouldReturnFalse_cYwe1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 1024);
    entry.mode = C_ISREG; // Assuming mode is accessible or settable for the test
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChksumWithNewFormat_Lycp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100);
    long expectedChksum = 123456789 & 0xFFFFFFFFL;
    assertEquals(expectedChksum, entry.getChksum());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_RWAH0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("example.txt", 1000);
    long expectedTime = entry.getTime();
    assertEquals(1000, expectedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_Huxw0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000L);
    entry.setGID(1001L);
    assertEquals(1001L, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_CQMA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    int expectedAlignmentBoundary = 0; // Replace with the expected value based on your logic
    assertEquals(expectedAlignmentBoundary, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithNameConstructor_zxKq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithPathConstructor_gBlm1() throws IOException {
    Path tempPath = Files.createTempFile("testEntry", ".tmp");
    CpioArchiveEntry entry = new CpioArchiveEntry(tempPath, "testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFileConstructor_NrrL2() {
    File tempFile = new File("testEntry.txt");
    CpioArchiveEntry entry = new CpioArchiveEntry(tempFile, "testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFormatAndNameConstructor_iHAi3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFormatAndSizeConstructor_GGTy4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithFormatAndPathConstructor_vsKf5() throws IOException {
    Path tempPath = Files.createTempFile("testEntry", ".tmp");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, tempPath, "testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetworkReturnsTrue_AjdF0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 100);
    entry.mode = C_ISNWK; // Assuming mode is accessible and settable for testing
    assertTrue(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsNetworkReturnsFalse_sQzw1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 100);
    entry.mode = C_ISREG; // Assuming mode is accessible and settable for testing
    assertFalse(entry.isNetwork());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_xFsZ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000L);
    long expectedInode = 12345L;
    entry.setInode(expectedInode);
    assertEquals(expectedInode, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMaj_JibA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    long expectedMaj = 0; // Set this to the expected value based on your logic
    long actualMaj = entry.getRemoteDeviceMaj();
    assertEquals(expectedMaj, actualMaj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMaj_YMPS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    entry.setRemoteDeviceMaj(12345L);
    assertEquals(12345L, entry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_XrlK0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_PkzA1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_pgnP2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100);
    String differentClassObject = "Not a CpioArchiveEntry";
    assertFalse(entry.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_drRy3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test.txt", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test2.txt", 100);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameName_AcwR4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "test.txt", 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, "test.txt", 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullName_bDBj5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, null, 100);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 1, null, 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWhenEntryIsDirectory_Fgzf0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testDir", 0);
    entry.mode = C_ISDIR; // Set mode to indicate it's a directory
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWhenEntryIsNotDirectory_MUpn1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    entry.mode = 0; // Set mode to indicate it's not a directory
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMin_JSGD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000);
    long expectedMin = 0; // Assuming the initial value of rmin is 0
    long actualMin = entry.getRemoteDeviceMin();
    assertEquals(expectedMin, actualMin);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_KYMO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 5000);
    Date expectedDate = new Date(5000);
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_WhenSymbolicLink_ReturnsTrue_RnEP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "linkName", 0);
    entry.mode = C_ISLNK; // Assuming mode is accessible or settable for testing
    assertTrue(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSymbolicLink_WhenNotSymbolicLink_ReturnsFalse_kGDf1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "fileName", 100);
    entry.mode = C_ISREG; // Assuming mode is accessible or settable for testing
    assertFalse(entry.isSymbolicLink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_qaCM0() throws IOException {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 100L);
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(time);
    assertEquals(TimeUtils.toUnixTime(time), entry.mtime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceWithOldFormat_lBiQ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1); // Assuming FORMAT_OLD_MASK is 1
    long expectedDevice = entry.getRemoteDevice(); // Assuming rmin is initialized to some value
    assertEquals(expectedDevice, entry.getRemoteDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_qojG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    long expectedUID = 1; // Assuming the UID is set to 1 for this test case
    entry.uid = expectedUID; // Setting the uid for testing purposes
    assertEquals(expectedUID, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_QzLX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    long expectedMaj = 0; // Set the expected value based on your logic for maj
    long actualMaj = entry.getDeviceMaj();
    assertEquals(expectedMaj, actualMaj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithValidFormat_fNgY0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertEquals((short) 1, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithAnotherValidFormat_cjup1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "example.txt", 100);
    assertEquals((short) 2, entry.getFormat());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormatWithDefaultConstructor_OOqA2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("example.txt");
    assertEquals(0, entry.getFormat()); // Assuming default format is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChksum_xQxp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    entry.setChksum(0x1234567890L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithDefaultModeAndNonTrailerName_CzcJ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    long mode = entry.getMode();
    assertEquals(CpioArchiveEntry.C_ISREG, mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithNonZeroMode_bgKU1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    entry.mode = 123; // Assuming mode is accessible for testing
    long mode = entry.getMode();
    assertEquals(123, mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithTrailerName_WiyG2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, CpioArchiveEntry.CPIO_TRAILER, 100);
    long mode = entry.getMode();
    assertEquals(0, mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_PuVG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    long expectedDevice = entry.getDevice(); // Assuming min is initialized to some value in the constructor
    assertEquals(expectedDevice, entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_mdUA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100);
    long expectedMin = 0; // Assuming the default value of min is 0; adjust as necessary.
    long actualMin = entry.getDeviceMin();
    assertEquals(expectedMin, actualMin);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNullName_rmWs0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    int result = entry.getHeaderPadCount(null);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithEmptyNameAndCharset_JfoG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("");
    int result = entry.getHeaderPadCount(StandardCharsets.UTF_8);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNonEmptyNameAndCharset_IVYx2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testName");
    int result = entry.getHeaderPadCount(StandardCharsets.UTF_8);
    assertEquals(4, result); // Assuming the padding logic results in 4 for "testName"
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeReturnsTrue_wFKr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testPipe", 100);
    entry.mode = C_ISFIFO; // Assuming mode is accessible or settable for the test
    assertTrue(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeReturnsFalse_daTW1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    entry.mode = C_ISREG; // Assuming mode is accessible or settable for the test
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMin_PsFU0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000L);
    entry.setDeviceMin(12345L);
    assertEquals(12345L, entry.min);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderSize_YjzC0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    assertEquals(0, entry.getHeaderSize()); // Assuming default headerSize is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_WFtE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "initialName", 100);
    entry.setName("newName");
    assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFileTrue_qkhO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile.txt", 1024);
    entry.mode = C_ISREG; // Assuming mode is accessible or settable for testing
    assertTrue(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFileFalse_pqgX1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testDirectory", 0);
    entry.mode = C_ISDIR; // Assuming mode is accessible or settable for testing
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_ValidSize_YZdS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 100);
    entry.setSize(200);
    assertEquals(200, entry.filesize);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevice_syDo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    entry.setDevice(12345L);
    assertEquals(12345L, entry.min);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketReturnsTrue_MYHr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "socketEntry", 0);
    entry.mode = C_ISSOCK; // Assuming mode is accessible or settable for testing
    assertTrue(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketReturnsFalse_JNvo1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "regularFile", 1024);
    entry.mode = C_ISREG; // Assuming mode is accessible or settable for testing
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_siBG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    long expectedInode = 1; // Assuming inode is set to 1 for this test case
    entry.setInode(expectedInode); // Hypothetical method to set inode for testing
    assertEquals(expectedInode, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithName_PFGK0() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("testName");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("testName");
    assertEquals(entry1.hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithDifferentNames_Eolg1() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("name1");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("name2");
    assertNotEquals(entry1.hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_BqQi2() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((String) null);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((String) null);
    assertEquals(entry1.hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithEmptyName_ZghZ3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("");
    assertEquals(entry1.hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_Wtct0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 1000);
    long expectedTime = System.currentTimeMillis();
    entry.setTime(expectedTime);
    assertEquals(expectedTime, entry.mtime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_WhenAlignmentBoundaryIsZero_ShouldReturnZero_BjhG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.alignmentBoundary = 0;
    entry.filesize = 100;
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_WhenSizeIsNotAligned_ShouldReturnPaddingNeeded_EBtT1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.alignmentBoundary = 8;
    entry.filesize = 10;
    assertEquals(6, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataPadCount_WhenSizeIsAligned_ShouldReturnZero_yMnT2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.alignmentBoundary = 8;
    entry.filesize = 16;
    assertEquals(0, entry.getDataPadCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithZeroAlignmentBoundary_MGQP0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    int result = entry.getHeaderPadCount(10);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNonZeroAlignmentBoundaryAndNullName_vBYI1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.headerSize = 5; // Assuming headerSize is accessible or settable
    entry.alignmentBoundary = 4; // Assuming alignmentBoundary is accessible or settable
    int result = entry.getHeaderPadCount(0);
    assertEquals(3, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithNonZeroAlignmentBoundaryAndNameSize_Yzxk2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.headerSize = 5; // Assuming headerSize is accessible or settable
    entry.alignmentBoundary = 4; // Assuming alignmentBoundary is accessible or settable
    int result = entry.getHeaderPadCount(3);
    assertEquals(2, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCountWithExactAlignment_OLjV3() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    entry.headerSize = 4; // Assuming headerSize is accessible or settable
    entry.alignmentBoundary = 4; // Assuming alignmentBoundary is accessible or settable
    int result = entry.getHeaderPadCount(0);
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_vDQW0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1024);
    int padCount = entry.getHeaderPadCount();
    assertEquals(0, padCount); // Assuming the default behavior returns 0 for a new entry
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDevice_VENj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000L);
    entry.setRemoteDevice(12345L);
    assertEquals(12345L, entry.rmin);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDeviceMaj_dhka0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100);
    entry.setDeviceMaj(5);
    assertEquals(5, entry.getMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_qdJj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 1000L);
    entry.setUID(12345L);
    assertEquals(12345L, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_ValidMode_Yiax0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 100);
    entry.setMode(C_ISREG);
    assertEquals(C_ISREG, entry.getMode() & S_IFMT);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_rZLS0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 1000);
    long expectedGID = 0; // Replace with the expected GID value based on your logic
    long actualGID = entry.getGID();
    assertEquals(expectedGID, actualGID);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSizeWithFileSize_gzuV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testFile", 1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_jsds0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 1000);
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.nlink);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksWhenNlinkIsZeroAndIsDirectory_FkXz0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testDir", 0);
    entry.isDirectory = true; // Assuming there's a way to set this for the test
    assertEquals(2, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksWhenNlinkIsZeroAndIsNotDirectory_LqXe1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    entry.isDirectory = false; // Assuming there's a way to set this for the test
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksWhenNlinkIsGreaterThanZero_EtuW2() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testFile", 100);
    entry.nlink = 5; // Setting nlink to a value greater than zero
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDeviceTrue_dQgq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 1024);
    entry.mode = C_ISCHR; // Assuming mode is set directly for the test
    assertTrue(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDeviceFalse_CfvR1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "testEntry", 1024);
    entry.mode = C_ISREG; // Assuming mode is set directly for the test
    assertFalse(entry.isCharacterDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_zlFA0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "testEntry", 100L);
    entry.setRemoteDeviceMin(50L);
    assertEquals(50L, entry.getRemoteDeviceMin());
}
}