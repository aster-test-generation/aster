/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.charset.StandardCharsets.UTF_16LE;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.Channels;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.zip.CRC32;
import java.util.zip.CheckedInputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin;
import org.apache.commons.io.build.AbstractStreamBuilder;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZFile_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KYhm0_2() throws IOException {
    File file = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(file, password, options);
    String result = sevenZFile.toString();
    assertTrue(result.contains("expected content or format")); // Replace with actual expected content or format}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_mHld0() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_nblZ1() {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(entry);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_BuildDecodingStreamCalled_Bknf2_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_BuildDecodingStreamCalled_Bknf2_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0); // Assuming the entry has data}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryWithCrc_OkrH3() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    entry.setCrcValue(123456); // Set a dummy CRC value
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_NvCS0_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_NvCS0_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_exYo1_1() {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry nonExistentEntry = new SevenZArchiveEntry(); // Create an entry that doesn't exist
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(nonExistentEntry);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_exYo1_2() {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry nonExistentEntry = new SevenZArchiveEntry(); // Create an entry that doesn't exist
    assertEquals("Can not find null in test.7z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithCrc_QLlP2_1() throws IOException {
    File testFile = new File("test_with_crc.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry with CRC
    entry.setHasCrc(true);
    entry.setCrcValue(123456789L); // Set a dummy CRC value
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithCrc_QLlP2_2() throws IOException {
    File testFile = new File("test_with_crc.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry with CRC
    entry.setHasCrc(true);
    entry.setCrcValue(123456789L); // Set a dummy CRC value
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryDifferentFolder_hhjs3_1() throws IOException {
    File testFile = new File("test_different_folder.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry
    entry.setContentMethods(new SevenZMethodConfiguration[]{ /* Add valid methods */ });
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryDifferentFolder_hhjs3_2() throws IOException {
    File testFile = new File("test_different_folder.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = sevenZFile.getEntries().next(); // Assuming there's at least one entry
    entry.setContentMethods(new SevenZMethodConfiguration[]{ /* Add valid methods */ });
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_xtxJ0_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Assuming the first entry is valid
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_xtxJ0_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Assuming the first entry is valid
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_InvalidEntry_OMvB1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry invalidEntry = new SevenZArchiveEntry(); // Create a new entry not in the archive
    assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(invalidEntry);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryWithCrc_GWOv2_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchiveWithCrc.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[1]; // Assuming the second entry has CRC
    entry.setHasCrc(true);
    entry.setCrcValue(123456); // Set a dummy CRC value
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryWithCrc_GWOv2_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchiveWithCrc.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[1]; // Assuming the second entry has CRC
    entry.setHasCrc(true);
    entry.setCrcValue(123456); // Set a dummy CRC value
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryInSameFolder_TToz3_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry firstEntry = sevenZFile.getArchive().files[0];
    InputStream firstStream = sevenZFile.getInputStream(firstEntry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1]; // Assuming the second entry is in the same folder
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertNotNull(secondStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryInSameFolder_TToz3_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry firstEntry = sevenZFile.getArchive().files[0];
    InputStream firstStream = sevenZFile.getInputStream(firstEntry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1]; // Assuming the second entry is in the same folder
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertTrue(secondStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryInSameFolder_TToz3_3() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("validArchive.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry firstEntry = sevenZFile.getArchive().files[0];
    InputStream firstStream = sevenZFile.getInputStream(firstEntry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1]; // Assuming the second entry is in the same folder
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertNotEquals(firstStream, secondStream); // Ensure different streams for different entries}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_ReturnsInputStream_VrIW0() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File testFile = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream resultStream = sevenZFile.getInputStream(entry);
    assertNotNull(resultStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_ThrowsIllegalArgumentException_XyUc1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File testFile = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry(); // Not added to the archive
    assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(entry);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_SkipsEntriesWhenNeeded_uYPA2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File testFile = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
    InputStream resultStream = sevenZFile.getInputStream(entry2);
    assertNotNull(resultStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithCrc_ReturnsCrcVerifyingInputStream_NawO3_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File testFile = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    entry.setCrcValue(123456); // Example CRC value
    InputStream resultStream = sevenZFile.getInputStream(entry);
    assertNotNull(resultStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithCrc_ReturnsCrcVerifyingInputStream_NawO3_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File testFile = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    entry.setCrcValue(123456); // Example CRC value
    InputStream resultStream = sevenZFile.getInputStream(entry);
    assertTrue(resultStream instanceof CRC32VerifyingInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_ReturnsInputStream_VuOx0() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Assuming there is at least one entry
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_InvalidEntry_ThrowsException_oZGG1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry invalidEntry = new SevenZArchiveEntry(); // Not part of the archive
    assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(invalidEntry);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_SkipsEntries_ReturnsCorrectStream_rCCX2_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[1]; // Assuming there are multiple entries
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_SkipsEntries_ReturnsCorrectStream_rCCX2_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[1]; // Assuming there are multiple entries
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertEquals(entry.getSize(), ((BoundedInputStream) inputStream).getBytesRemaining());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryHasBeenRead_ReturnsCorrectStream_XwVS3_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Read the first entry
    InputStream firstStream = sevenZFile.getInputStream(entry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1];
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertNotNull(firstStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryHasBeenRead_ReturnsCorrectStream_XwVS3_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Read the first entry
    InputStream firstStream = sevenZFile.getInputStream(entry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1];
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertNotNull(secondStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryHasBeenRead_ReturnsCorrectStream_XwVS3_3() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getArchive().files[0]; // Read the first entry
    InputStream firstStream = sevenZFile.getInputStream(entry);
    SevenZArchiveEntry secondEntry = sevenZFile.getArchive().files[1];
    InputStream secondStream = sevenZFile.getInputStream(secondEntry);
    assertNotEquals(firstStream, secondStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidByteArray_Liex0() throws IOException {
    File testFile = new File("path/to/test.7z");
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, options);
    byte[] buffer = new byte[1024];
    int bytesRead = sevenZFile.read(buffer);
    assertTrue(bytesRead >= 0 && bytesRead <= buffer.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_ReturnsInputStream_QMat0_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntry_ReturnsInputStream_QMat0_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_ThrowsIllegalArgumentException_dIZc1_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry(); // Entry not in archive
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        sevenZFile.getInputStream(entry);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_EntryNotFound_ThrowsIllegalArgumentException_dIZc1_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry(); // Entry not in archive
    assertEquals("Can not find null in test.7z", exception.getMessage());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ZeroSizeEntry_ReturnsEmptyInputStream_ijEd2_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0); // Set size to zero
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ZeroSizeEntry_ReturnsEmptyInputStream_ijEd2_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setSize(0); // Set size to zero
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertEquals(0, inputStream.available());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithDeferredBlocks_ReturnsInputStream_HuFM3_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertNotNull(inputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStream_ValidEntryWithDeferredBlocks_ReturnsInputStream_HuFM3_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    InputStream inputStream = sevenZFile.getInputStream(entry);
    assertTrue(inputStream.available() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidInput_ACID0() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file);
    byte[] buffer = new byte[1024];
    int bytesRead = sevenZFile.read(buffer, 0, 512);
    assertTrue(bytesRead > 0 && bytesRead <= 512);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroLength_bHFv1() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file);
    byte[] buffer = new byte[1024];
    int bytesRead = sevenZFile.read(buffer, 0, 0);
    assertEquals(0, bytesRead);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadBeyondFileSize_uQKz2() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file);
    byte[] buffer = new byte[1024];
    int bytesRead = sevenZFile.read(buffer, 0, 2048);
    assertTrue(bytesRead >= 0 && bytesRead <= 1024); // Assuming file size is less than or equal to 1024
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_loNJ0_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertNotNull(statistics);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_loNJ0_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertEquals(0, statistics.getCompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStatisticsForCurrentEntry_loNJ0_3() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    InputStreamStatistics statistics = sevenZFile.getStatisticsForCurrentEntry();
    assertEquals(0, statistics.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadReturnsNegativeOneWhenEndOfStream_RcPP0() throws IOException {
    File testFile = new File("path/to/empty.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile);
    int result = sevenZFile.read();
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadIncrementsBytesRead_bmGp1_1() throws IOException {
    File testFile = new File("path/to/test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile);
    int result = sevenZFile.read();
    assertTrue(result >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadIncrementsBytesRead_bmGp1_2() throws IOException {
    File testFile = new File("path/to/test.7z");
    SevenZFile sevenZFile = new SevenZFile(testFile);
    int result = sevenZFile.read();
    assertEquals(1, sevenZFile.uncompressedBytesReadFromCurrentEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWhenNoMoreEntries_kxni0() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    sevenZFile.getNextEntry(); // Move to the first entry
    SevenZArchiveEntry entry = sevenZFile.getNextEntry(); // Move to the second entry
    assertNull(entry); // Expecting null as there are no more entries
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithUnnamedEntry_frjn1_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_unnamed.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Expecting a non-null entry}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithUnnamedEntry_frjn1_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_unnamed.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertEquals("default_name", entry.getName()); // Assuming default name is set}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithValidEntry_Rikl2_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_entries.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Expecting a non-null entry}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithValidEntry_Rikl2_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_entries.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertTrue(entry.getSize() > 0); // Expecting the size to be greater than 0}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithCrcValue_PatP3_1() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_crc.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertNotNull(entry); // Expecting a non-null entry}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithCrcValue_PatP3_2() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_crc.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertTrue(entry.getHasCrc()); // Expecting the entry to have a CRC value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNextEntryWithCrcValue_PatP3_3() throws IOException {
    SevenZFileOptions options = new SevenZFileOptions();
    File file = new File("test_with_crc.7z");
    SevenZFile sevenZFile = new SevenZFile(file, options);
    SevenZArchiveEntry entry = sevenZFile.getNextEntry();
    assertTrue(entry.getCrcValue() >= 0); // Expecting a valid CRC value}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilder_xNaI0_1() {
    Builder builder = SevenZFile.builder();
    SevenZFile sevenZFile = builder.get();
    assertNotNull(builder);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuilder_xNaI0_2() {
    Builder builder = SevenZFile.builder();
    SevenZFile sevenZFile = builder.get();
    assertNotNull(sevenZFile);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_yIsY0_1() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
    assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntries_yIsY0_2() throws IOException {
    File testFile = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(testFile, password, options);
    Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
    assertTrue(entries.iterator().hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithChannelNotNull_mrVn0() throws IOException {
    SeekableByteChannel channel = Files.newByteChannel(Paths.get("test.7z"), StandardOpenOption.READ);
    SevenZFile sevenZFile = new SevenZFile(channel);
    sevenZFile.close();
    assertTrue(channel.isOpen() == false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithPasswordNotNull_WGyJ1() throws IOException {
    SeekableByteChannel channel = Files.newByteChannel(Paths.get("test.7z"), StandardOpenOption.READ);
    char[] password = "password".toCharArray();
    SevenZFile sevenZFile = new SevenZFile(channel, password);
    sevenZFile.close();
    assertNull(password);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithFileNotNull_pZwP2() throws IOException {
    File file = new File("test.7z");
    SevenZFile sevenZFile = new SevenZFile(file);
    sevenZFile.close();
    assertFalse(file.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithNullChannel_jaLE3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new SeekableByteChannel() {
    });
    sevenZFile.close();
    assertNull(sevenZFile);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_WithValidFileName_EbbU0() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("example.7z"));
    String result = sevenZFile.getDefaultName();
    assertEquals("example", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_WithFileNameWithoutExtension_afXl1() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("example"));
    String result = sevenZFile.getDefaultName();
    assertEquals("example~", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_WithNullFileName_CuBF2() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("default.7z"));
    String result = sevenZFile.getDefaultName();
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDefaultName_WithDefaultFileName_XXqK3() throws IOException {
    SevenZFile sevenZFile = new SevenZFile(new File("DEFAULT_FILE_NAME"));
    String result = sevenZFile.getDefaultName();
    assertNull(result);
}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithValidSignature_ReturnsTrue_UupE0() {
    byte[] validSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0xB9 }; // Example valid signature
    int length = validSignature.length;
    assertTrue(SevenZFile.matches(validSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithInvalidSignature_ReturnsFalse_Tapd1() {
    byte[] invalidSignature = new byte[] { 0x00, 0x00, 0x00, 0x00 }; // Example invalid signature
    int length = invalidSignature.length;
    assertFalse(SevenZFile.matches(invalidSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithShorterLength_ReturnsFalse_lVjg2() {
    byte[] shortSignature = new byte[] { 0x37, 0x7A }; // Shorter than expected
    int length = shortSignature.length;
    assertFalse(SevenZFile.matches(shortSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithExactLengthButDifferentContent_ReturnsFalse_HaIv3() {
    byte[] differentSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0x00 }; // Same length but different content
    int length = differentSignature.length;
    assertFalse(SevenZFile.matches(differentSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KYhm0_1() throws IOException {
    File file = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(file, password, options);
    String result = sevenZFile.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithValidSignature_ReturnsTrue_UupE0_fid1() {
    byte[] validSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0xB9 }; // Example valid signature
    int length = validSignature.length;
    assertTrue(SevenZFile.matches(validSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithInvalidSignature_ReturnsFalse_Tapd1_fid1() {
    byte[] invalidSignature = new byte[] { 0x00, 0x00, 0x00, 0x00 }; // Example invalid signature
    int length = invalidSignature.length;
    assertFalse(SevenZFile.matches(invalidSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithShorterLength_ReturnsFalse_lVjg2_fid1() {
    byte[] shortSignature = new byte[] { 0x37, 0x7A }; // Shorter than expected
    int length = shortSignature.length;
    assertFalse(SevenZFile.matches(shortSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithExactLengthButDifferentContent_ReturnsFalse_HaIv3_fid1() {
    byte[] differentSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0x00 }; // Same length but different content
    int length = differentSignature.length;
    assertFalse(SevenZFile.matches(differentSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KYhm0_1_fid1() throws IOException {
    File file = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(file, password, options);
    String result = sevenZFile.toString();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithValidSignature_ReturnsTrue_UupE0_fid2() {
    byte[] validSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0xB9 }; // Example valid signature
    int length = validSignature.length;
    assertTrue(SevenZFile.matches(validSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithInvalidSignature_ReturnsFalse_Tapd1_fid2() {
    byte[] invalidSignature = new byte[] { 0x00, 0x00, 0x00, 0x00 }; // Example invalid signature
    int length = invalidSignature.length;
    assertFalse(SevenZFile.matches(invalidSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithShorterLength_ReturnsFalse_lVjg2_fid2() {
    byte[] shortSignature = new byte[] { 0x37, 0x7A }; // Shorter than expected
    int length = shortSignature.length;
    assertFalse(SevenZFile.matches(shortSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_WithExactLengthButDifferentContent_ReturnsFalse_HaIv3_fid2() {
    byte[] differentSignature = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C, 0x26, 0x00 }; // Same length but different content
    int length = differentSignature.length;
    assertFalse(SevenZFile.matches(differentSignature, length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_KYhm0_1_fid2() throws IOException {
    File file = new File("test.7z");
    char[] password = "password".toCharArray();
    SevenZFileOptions options = new SevenZFileOptions();
    SevenZFile sevenZFile = new SevenZFile(file, password, options);
    String result = sevenZFile.toString();
    assertNotNull(result);
}