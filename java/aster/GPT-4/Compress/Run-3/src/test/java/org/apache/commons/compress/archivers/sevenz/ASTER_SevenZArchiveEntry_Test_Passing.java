/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Objects;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.io.file.attribute.FileTimes;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse; 
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.*;
import org.mockito.Mockito;
import java.sql.*;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import java.lang.reflect.Field;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
@Test(expected = UnsupportedOperationException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_WithoutTimestamp_uEer1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasLastModifiedDate = false; // Assuming this field exists
    entry.getLastModifiedTime();
}
@Test(expected = UnsupportedOperationException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithoutValidDate_DJgx1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.getCreationTime(); // This should throw an exception
}
@Test(expected = UnsupportedOperationException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTimeWithoutAccessDate_dZgn1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasAccessDate = false; // Assuming there's a way to set this
    entry.getAccessTime(); // This should throw an exception
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithNonNullMethods_xwdM0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    List<SevenZMethodConfiguration> methods = new ArrayList<>();
    methods.add(new SevenZMethodConfiguration(/* parameters */));
    methods.add(new SevenZMethodConfiguration(/* parameters */));
    entry.setContentMethods(methods);
    assertNotNull(entry.getContentMethods());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithNonNullMethods_xwdM0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    List<SevenZMethodConfiguration> methods = new ArrayList<>();
    methods.add(new SevenZMethodConfiguration(/* parameters */));
    methods.add(new SevenZMethodConfiguration(/* parameters */));
    entry.setContentMethods(methods);
    assertEquals(2, entry.getContentMethods().size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithNullMethods_Woai1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setContentMethods(null);
    assertNull(entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_prpy0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
    List<? extends SevenZMethodConfiguration> methodList = new ArrayList<>();
    methods.forEach(methodList::add);
    assertNotNull(methods);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_prpy0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
    List<? extends SevenZMethodConfiguration> methodList = new ArrayList<>();
    methods.forEach(methodList::add);
    assertTrue(methodList.isEmpty()); // Assuming it should be empty for a new entry}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_NullTime_iSYa0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertFalse(entry.hasLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_ValidTime_DOAb1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertTrue(entry.hasLastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_ValidTime_DOAb1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_AnotherValidTime_vVSa2_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 10000);
    entry.setLastModifiedTime(time);
    assertTrue(entry.hasLastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_AnotherValidTime_vVSa2_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis() - 10000);
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.lastModifiedDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_ibYq0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsLastModifiedDate = 132537600000000000L; // Example NTFS date
    entry.setLastModifiedDate(ntfsLastModifiedDate);
    long expectedFileTime = FileTimes.ntfsTimeToFileTime(ntfsLastModifiedDate);
    assertEquals(expectedFileTime, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrcTrue_ziEJ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(true);
    assertTrue(entry.hasCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCrcFalse_Uamk1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCrc(false);
    assertFalse(entry.hasCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDateTrue_NBGN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(true);
    assertTrue(entry.hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasCreationDateFalse_AuWo1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasCreationDate(false);
    assertFalse(entry.hasCreationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_wOLQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 123456789L; // Set expected CRC value
    long actualCrc = entry.getCrcValue();
    assertEquals(expectedCrc, actualCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_lYPT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsAccessDate = 16330728000000000L; // Example NTFS date
    long expectedFileTime = FileTimes.ntfsTimeToFileTime(ntfsAccessDate);
    entry.setAccessDate(ntfsAccessDate);
    assertEquals(expectedFileTime, entry.accessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_aNLn0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String expectedName = "expectedName"; // Set the expected name
    assertEquals(expectedName, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_yTYe0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date expectedDate = FileTimes.toDate(entry.getCreationTime()); // Mock or set the expected creation time accordingly
    Date actualDate = entry.getCreationDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateTrue_eYNr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true);
    assertTrue(entry.hasAccessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasAccessDateFalse_XEFX1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(false);
    assertFalse(entry.hasAccessDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_zOqQ0() {
    long ntfsTime = 132537600000000000L; // Example NTFS time (representing 2012-01-01T00:00:00Z)
    Date expectedDate = new GregorianCalendar(2012, Calendar.JANUARY, 1).getTime();
    Date actualDate = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDateTrue_fXBD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(true);
    assertTrue(entry.hasLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasLastModifiedDateFalse_gDqz1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasLastModifiedDate(false);
    assertFalse(entry.hasLastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_Yemb0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithZero_YKEH0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(0);
    assertEquals(0, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithPositiveValue_unFi1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(123456);
    assertEquals(123456, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithMaxInteger_YTuT2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithNegativeValue_JFTX3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-1);
    assertEquals(-1, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithLargeNegativeValue_fxjU4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-123456);
    assertEquals(-123456, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithRandomValue_oQWj5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(987654);
    assertEquals(987654, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithAnotherRandomValue_RMna6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(54321);
    assertEquals(54321, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithMinimumNegativeValue_BsDF7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithBoundaryValue_ifoK8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(1);
    assertEquals(1, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcWithAnotherBoundaryValue_Adlt9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedCrc(-2);
    assertEquals(-2, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryReturnsTrue_aHXF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.isDirectory = true; // Assuming there's a way to set this for testing
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryReturnsFalse_uLzR1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.isDirectory = false; // Assuming there's a way to set this for testing
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_Ivpv0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date expectedDate = new Date(); // Assuming the expected date is set to the current date for this test
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItemTrue_ocBS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(true);
    assertTrue(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAntiItemFalse_laqL1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAntiItem(false);
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_pTib0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    entry.setCreationDate(creationDate);
    FileTime expectedFileTime = FileTimes.toFileTime(creationDate);
    FileTime actualFileTime = entry.getCreationTime(); // Hypothetical method to retrieve creation time
    assertEquals(expectedFileTime, actualFileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStreamReturnsFalseWhenHasStreamIsFalse_cLoz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStreamReturnsTrueWhenHasStreamIsTrue_ogKZ1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true); // Hypothetical setter method
    assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_hmQV0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_veYv1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_LRMa2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals("String"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentName_LLwc3() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file1", false, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file2", false, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameNameDifferentStream_HdrH4() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", false, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameAttributes_DNnE5() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, false, false, false, null, null, null, false, 0, false, 0, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCreationDate_YCSk6() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, false, false, new Date(), null, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, false, false, new Date(System.currentTimeMillis() + 1000), null, null, false, 0, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameCreationDate_VYyU7() {
    Date date = new Date();
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, false, false, date, null, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, false, false, date, null, null, false, 0, false, 0, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentLastModifiedDate_TYki8() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, false, null, new Date(), null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, false, null, new Date(System.currentTimeMillis() + 1000), null, false, 0, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameLastModifiedDate_ZNSf9() {
    Date date = new Date();
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, false, null, date, null, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, false, null, date, null, false, 0, false, 0, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentAccessDate_Sboi10() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, new Date(), false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, new Date(System.currentTimeMillis() + 1000), false, 0, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameAccessDate_zzjO11() {
    Date date = new Date();
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, date, false, 0, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, date, false, 0, false, 0, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentWindowsAttributes_aLLA12() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 2, false, 0, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameWindowsAttributes_eXZm13() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, false, 0, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, false, 0, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCrc_prmf14() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 54321, 0, 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameCrc_NPQO15() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 0);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentCompressedCrc_bkOl16() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 0);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 1);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSize_WkBg18() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 100);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 200);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameSize_wNVw19() {
    SevenZArchiveEntry entry1 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 100);
    SevenZArchiveEntry entry2 = new SevenZArchiveEntry("file", true, false, false, true, true, true, null, null, null, true, 1, true, 12345, 0, 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_ReturnsFalse_WhenHasAccessDateIsFalse_iTop0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_ReturnsTrue_WhenHasAccessDateIsTrue_wcFm1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasAccessDate(true); // Hypothetical method to set the value
    assertTrue(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_NullTime_jLwA0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertFalse(entry.hasCreationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_NullTime_jLwA0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationTime(null);
    assertNull(entry.creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_ValidTime_LCxd1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertTrue(entry.hasCreationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_ValidTime_LCxd1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_AnotherValidTime_IGmZ2_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789L);
    entry.setCreationTime(time);
    assertTrue(entry.hasCreationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_AnotherValidTime_IGmZ2_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789L);
    entry.setCreationTime(time);
    assertEquals(time, entry.creationDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_WithValidTimestamp_bVSK0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasLastModifiedDate = true; // Assuming this field exists
    entry.lastModifiedDate = FileTime.fromMillis(System.currentTimeMillis()); // Assuming this field exists
    FileTime expectedTime = entry.lastModifiedDate;
    FileTime actualTime = entry.getLastModifiedTime();
    assertEquals(expectedTime, actualTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_Agdf0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedSize = 0; // Assuming default compressedSize is 0
    assertEquals(expectedSize, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NullTime_sSPx0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertFalse(entry.hasAccessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_NullTime_sSPx0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setAccessTime(null);
    assertNull(entry.accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_ValidTime_kREI1_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertTrue(entry.hasAccessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_ValidTime_kREI1_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setAccessTime(time);
    assertEquals(time, entry.accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_AnotherValidTime_iUjM2_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789L);
    entry.setAccessTime(time);
    assertTrue(entry.hasAccessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_AnotherValidTime_iUjM2_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(123456789L);
    entry.setAccessTime(time);
    assertEquals(time, entry.accessDate);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasStreamTrue_XmcU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasStreamFalse_gZvg1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributesTrue_gGql0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(true);
    assertTrue(entry.hasWindowsAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasWindowsAttributesFalse_VARe1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasWindowsAttributes(false);
    assertFalse(entry.hasWindowsAttributes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Ayms0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    String expectedName = "testName";
    entry.setName(expectedName);
    assertEquals(expectedName, entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_qaKh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 123456789L;
    entry.setCrcValue(expectedCrc);
    assertEquals(expectedCrc, entry.getCrc()); // Assuming getCrc() method exists to retrieve the crc value
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_pmMw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedSize = 1024L;
    entry.setCompressedSize(expectedSize);
    assertEquals(expectedSize, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_dANY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedSize = 1024L;
    entry.setSize(expectedSize);
    assertEquals(expectedSize, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_geAl0() {
    Date date = new Date(0); // January 1, 1970, 00:00:00 GMT
    long expectedNtfsTime = 116444736000000000L; // Expected NTFS time for the given date
    long actualNtfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_ziQD0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    entry.setAccessDate(accessDate);
    FileTime expectedFileTime = FileTimes.toFileTime(accessDate);
    assertEquals(expectedFileTime, entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_jzWY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.crc = 123456789; // Set the crc value for testing
    assertEquals(123456789, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_WhenHasCreationDateIsTrue_ShouldReturnTrue_taTg0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasCreationDate = true; // Assuming hasCreationDate is accessible or set via a method
    assertTrue(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_WhenHasCreationDateIsFalse_ShouldReturnFalse_Ktne1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasCreationDate = false; // Assuming hasCreationDate is accessible or set via a method
    assertFalse(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_ByBo0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 123456789L;
    entry.setCompressedCrcValue(expectedCrc);
    assertEquals(expectedCrc, entry.compressedCrc);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedDate_KIpR0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date date = new Date();
    entry.setLastModifiedDate(date);
    assertEquals(FileTimes.toFileTime(date), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_ZeroValue_mMEh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = 0;
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_PositiveValue_pGmu1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = 123456;
    assertEquals(123456, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_NegativeValue_qYJa2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = -123456;
    assertEquals(-123456, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_MaxIntegerValue_aDEu3() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = Integer.MAX_VALUE;
    assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_MinIntegerValue_Ieob4() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = Integer.MIN_VALUE;
    assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_OneValue_WtuB5() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = 1;
    assertEquals(1, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_LargePositiveValue_gjqs6() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = 987654321;
    assertEquals(987654321, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_LargeNegativeValue_Hpnk7() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = -987654321;
    assertEquals(-987654321, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_AnotherPositiveValue_wySo8() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = 555555;
    assertEquals(555555, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_AnotherNegativeValue_GpKB9() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.compressedCrc = -555555;
    assertEquals(-555555, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_MDzU0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrcTrue_Bans0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrcFalse_MZYO1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryTrue_KNby0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertTrue(entry.isDirectory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryFalse_Iijj1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(false);
    assertFalse(entry.isDirectory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_caJF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date expectedDate = FileTimes.toDate(entry.getAccessTime()); // Assuming getAccessTime() returns a valid time
    Date actualDate = entry.getAccessDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTimeWithValidDate_QFRt0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.creationDate = FileTime.fromMillis(System.currentTimeMillis()); // Set a valid creation date
    FileTime creationTime = entry.getCreationTime();
    assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_NHYI0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedSize = 0; // Assuming default size is 0, adjust as necessary
    assertEquals(expectedSize, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_scmZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long ntfsCreationDate = 132537600000000000L; // Example NTFS date
    long expectedFileTime = FileTimes.ntfsTimeToFileTime(ntfsCreationDate);
    entry.setCreationDate(ntfsCreationDate);
    assertEquals(expectedFileTime, entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_untG0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int expectedCrc = 123456789;
    entry.setCrc(expectedCrc);
    assertEquals(expectedCrc, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods_1() throws Exception {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        sevenzarchiveentry.setContentMethods(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        // Assuming there's a way to retrieve the contentMethods from the SevenZArchiveEntry
        // This part of the code is hypothetical as the original class does not provide a getter for contentMethods
        Iterable<? extends SevenZMethodConfiguration> result = sevenzarchiveentry.getContentMethods();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods_2() throws Exception {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        sevenzarchiveentry.setContentMethods(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        // Assuming there's a way to retrieve the contentMethods from the SevenZArchiveEntry
        // This part of the code is hypothetical as the original class does not provide a getter for contentMethods
        Iterable<? extends SevenZMethodConfiguration> result = sevenzarchiveentry.getContentMethods();
        assertEquals(2, ((Collection<?>) result).size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods_3() throws Exception {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        sevenzarchiveentry.setContentMethods(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        // Assuming there's a way to retrieve the contentMethods from the SevenZArchiveEntry
        // This part of the code is hypothetical as the original class does not provide a getter for contentMethods
        Iterable<? extends SevenZMethodConfiguration> result = sevenzarchiveentry.getContentMethods();
        assertTrue(((Collection<?>) result).stream().anyMatch(methodConfig -> methodConfig.getMethod() == SevenZMethod.COPY));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods_4() throws Exception {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = Arrays.asList(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        sevenzarchiveentry.setContentMethods(
            new SevenZMethodConfiguration(SevenZMethod.COPY),
            new SevenZMethodConfiguration(SevenZMethod.LZMA)
        );
        // Assuming there's a way to retrieve the contentMethods from the SevenZArchiveEntry
        // This part of the code is hypothetical as the original class does not provide a getter for contentMethods
        Iterable<? extends SevenZMethodConfiguration> result = sevenzarchiveentry.getContentMethods();
        assertTrue(((Collection<?>) result).stream().anyMatch(methodConfig -> methodConfig.getMethod() == SevenZMethod.LZMA));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithMultipleMethods_rSAY0_1() {
    SevenZMethodConfiguration methodConfig1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethodConfiguration methodConfig2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setContentMethods(methodConfig1, methodConfig2);
    List<SevenZMethodConfiguration> methods = entry.getContentMethods(); // Hypothetical method to retrieve content methods
    assertEquals(2, methods.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithMultipleMethods_rSAY0_2() {
    SevenZMethodConfiguration methodConfig1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethodConfiguration methodConfig2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setContentMethods(methodConfig1, methodConfig2);
    List<SevenZMethodConfiguration> methods = entry.getContentMethods(); // Hypothetical method to retrieve content methods
    assertTrue(methods.contains(methodConfig1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethodsWithMultipleMethods_rSAY0_3() {
    SevenZMethodConfiguration methodConfig1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethodConfiguration methodConfig2 = new SevenZMethodConfiguration(SevenZMethod.DEFLATE);
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setContentMethods(methodConfig1, methodConfig2);
    List<SevenZMethodConfiguration> methods = entry.getContentMethods(); // Hypothetical method to retrieve content methods
    assertTrue(methods.contains(methodConfig2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessTimeWithValidAccessDate_aVyQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasAccessDate = true; // Assuming there's a way to set this
    entry.accessDate = FileTime.fromMillis(System.currentTimeMillis()); // Set a valid access date
    FileTime accessTime = entry.getAccessTime();
    assertNotNull(accessTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_Rxnr0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrcValue = 123456789L; // Set the expected CRC value
    entry.compressedCrc = expectedCrcValue; // Assuming compressedCrc is accessible for testing
    long actualCrcValue = entry.getCompressedCrcValue();
    assertEquals(expectedCrcValue, actualCrcValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetWindowsAttributes_emUC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int expectedAttributes = 12345;
    entry.setWindowsAttributes(expectedAttributes);
    assertEquals(expectedAttributes, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_BUPF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int expectedAttributes = 0; // Replace with the actual expected value
    assertEquals(expectedAttributes, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_WhenTrue_ReturnsTrue_FZIE0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasWindowsAttributes = true; // Assuming hasWindowsAttributes is accessible or settable
    assertTrue(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_WhenFalse_ReturnsFalse_cAzI1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.hasWindowsAttributes = false; // Assuming hasWindowsAttributes is accessible or settable
    assertFalse(entry.getHasWindowsAttributes());
}
}