/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;
import org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute;
import org.apache.commons.compress.archivers.sevenz.Archive;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveUtil;
import org.apache.commons.compress.compressors.bzip2.CRC;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm;
import org.apache.commons.compress.archivers.dump.TapeInputStream;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.compressors.gzip.GzipParameters;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.archivers.zip.PKWareExtraHeader;
import org.apache.commons.compress.archivers.arj.MainHeader;
import org.apache.commons.compress.archivers.sevenz.NID;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.ClassBands;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.compressors.pack200.Pack200Utils;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream;
import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;
import org.apache.commons.compress.archivers.sevenz.StartHeader;
import org.apache.commons.compress.utils.Sets;
import org.apache.commons.compress.utils.Iterators;
import org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.utils.CountingInputStream;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm;
import org.apache.commons.compress.archivers.zip.BitStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanState;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.Lister;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics;
import org.apache.commons.compress.utils.ByteUtils;
import org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.utils.ServiceLoaderIterator;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
import org.apache.commons.compress.archivers.cpio.CpioConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.archivers.zip.BinaryTree;
import org.apache.commons.compress.harmony.pack200.FileBands;
import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate;
import org.apache.commons.compress.archivers.sevenz.StreamMap;
import org.apache.commons.compress.archivers.sevenz.CLI;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.utils.BitInputStream;
import org.apache.commons.compress.utils.TimeUtils;
import org.apache.commons.compress.compressors.lzw.LZWInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;
import org.apache.commons.compress.compressors.bzip2.BZip2Constants;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.utils.FixedLengthBlockOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.MemoryLimitException;
import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.Archive;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.archivers.zip.ScatterStatistics;
import org.apache.commons.compress.java.util.jar.Pack200;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry;
import org.apache.commons.compress.utils.OsgiUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm;
import org.apache.commons.compress.archivers.dump.Dirent;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
import org.apache.commons.compress.utils.ExactMath;
import org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.apache.commons.compress.harmony.pack200.CPInt;
import org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.archivers.zip.RandomAccessOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.archive.internal.nls.Messages;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.archivers.sevenz.AbstractCoder;
import org.apache.commons.compress.harmony.unpack200.IMatcher;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveConstants;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.pack200.CPString;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber;
import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
import org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.archivers.EntryStreamOffsets;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.utils.CharsetNames;
import org.apache.commons.compress.compressors.bzip2.Rand;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.harmony.pack200.CPLong;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.ZipConstants;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies;
import org.apache.commons.compress.archivers.zip.CircularBuffer;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.BandSet;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry;
import org.apache.commons.compress.utils.FileNameUtils;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.apache.commons.compress.utils.CloseShieldFilterInputStream;
import org.apache.commons.compress.utils.BoundedArchiveInputStream;
import org.apache.commons.compress.compressors.brotli.BrotliUtils;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.ShortFileException;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.apache.commons.compress.compressors.pack200.AbstractStreamBridge;
import org.apache.commons.compress.compressors.xz.XZUtils;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm;
import org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm;
import org.apache.commons.compress.utils.ChecksumVerifyingInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm;
import org.apache.commons.compress.archivers.dump.DumpArchiveException;
import org.apache.commons.compress.archivers.sevenz.SubStreamsInfo;
import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.CPFloat;
import org.apache.commons.compress.compressors.pack200.Pack200Strategy;
import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.changes.Change;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.compress.PasswordRequiredException;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm;
import org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.harmony.pack200.Pack200ClassReader;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.apache.commons.compress.harmony.pack200.CPDouble;
import org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;
import org.apache.commons.compress.utils.CountingOutputStream;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior;
import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;
import org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.tar.TarGnuSparseKeys;
import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;
import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPRef;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.apache.commons.compress.utils.ParsingUtils;
import org.apache.commons.compress.archivers.zip.CharsetAccessor;
import org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;
import org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.StreamingNotSupportedException;
import org.apache.commons.compress.archivers.dump.DumpArchiveSummary;
import org.apache.commons.compress.compressors.lz4.XXHash32;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.compressors.gzip.GzipUtils;
import org.apache.commons.compress.harmony.unpack200.MetadataBandGroup;
import org.apache.commons.compress.archivers.zip.UnixStat;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.apache.commons.compress.harmony.pack200.ConstantPoolEntry;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.utils.SkipShieldingInputStream;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.examples.Archiver;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.FileBands;
import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.cpio.CpioUtil;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test(expected = ZipException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ZeroLength_untN1() throws ZipException {
    byte[] buffer = new byte[0];
    int offset = 0;
    int length = 0; // Zero length should throw exception
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
}
@Test(expected = ZipException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_LengthTooShort_CGYG2() throws ZipException {
    byte[] buffer = new byte[3]; // Length less than required
    int offset = 0;
    int length = 3; // Invalid length
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
}
@Test(expected = ZipException.class)
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithInsufficientLength_CRaX5() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[4]; // Insufficient length for any DWORD or WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidInput_ZcWI0_1() throws ZipException {
    byte[] buffer = new byte[32]; // Example buffer
    int offset = 0;
    int length = 32; // Length that is valid
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_ValidInput_ZcWI0_2() throws ZipException {
    byte[] buffer = new byte[32]; // Example buffer
    int offset = 0;
    int length = 32; // Length that is valid
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_WithRelativeHeaderOffset_iQMl3() throws ZipException {
    byte[] buffer = new byte[40]; // Example buffer with enough length
    int offset = 0;
    int length = 40; // Valid length
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
    assertNotNull(zipField.relativeHeaderOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_WithDiskStart_Cxzo4() throws ZipException {
    byte[] buffer = new byte[36]; // Example buffer with enough length
    int offset = 0;
    int length = 36; // Valid length
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.parseFromLocalFileData(buffer, offset, length);
    assertNotNull(zipField.diskStart);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_ErRW0_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8], 0);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8], 0);
    ZipLong diskStart = new ZipLong(new byte[8], 0);
    Zip64ExtendedInformationExtraField zip64Field = new Zip64ExtendedInformationExtraField(size, compressedSize, size, diskStart);
    ZipShort headerId = zip64Field.getHeaderId();
    assertNotNull(headerId);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_ErRW0_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8], 0);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8], 0);
    ZipLong diskStart = new ZipLong(new byte[8], 0);
    Zip64ExtendedInformationExtraField zip64Field = new Zip64ExtendedInformationExtraField(size, compressedSize, size, diskStart);
    ZipShort headerId = zip64Field.getHeaderId();
    assertEquals(HEADER_ID.getValue(), headerId.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withSizesAndOffsets_txQJ0_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{17, 18, 19, 20, 21, 22, 23, 24});
    ZipLong diskStart = new ZipLong(new byte[]{25, 26});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    byte[] result = zipField.getCentralDirectoryData();
    assertEquals(32, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withSizesAndOffsets_txQJ0_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{17, 18, 19, 20, 21, 22, 23, 24});
    ZipLong diskStart = new ZipLong(new byte[]{25, 26});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    byte[] result = zipField.getCentralDirectoryData();
    assertArrayEquals(new byte[]{1, 2, 3, 4}, Arrays.copyOfRange(result, 0, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withSizesAndOffsets_txQJ0_3() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{17, 18, 19, 20, 21, 22, 23, 24});
    ZipLong diskStart = new ZipLong(new byte[]{25, 26});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    byte[] result = zipField.getCentralDirectoryData();
    assertArrayEquals(new byte[]{9, 10, 11, 12}, Arrays.copyOfRange(result, 4, 8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withSizesAndOffsets_txQJ0_4() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{17, 18, 19, 20, 21, 22, 23, 24});
    ZipLong diskStart = new ZipLong(new byte[]{25, 26});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    byte[] result = zipField.getCentralDirectoryData();
    assertArrayEquals(new byte[]{17, 18, 19, 20, 21, 22, 23, 24}, Arrays.copyOfRange(result, 8, 32));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withOnlySizes_XLNz1_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] result = zipField.getCentralDirectoryData();
    assertEquals(8, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withOnlySizes_XLNz1_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] result = zipField.getCentralDirectoryData();
    assertArrayEquals(new byte[]{1, 2, 3, 4}, Arrays.copyOfRange(result, 0, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withOnlySizes_XLNz1_3() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{9, 10, 11, 12, 13, 14, 15, 16});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize);
    byte[] result = zipField.getCentralDirectoryData();
    assertArrayEquals(new byte[]{9, 10, 11, 12}, Arrays.copyOfRange(result, 4, 8));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_withNullSizesAndOffsets_nbdb2() {
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    byte[] result = zipField.getCentralDirectoryData();
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithNonNullSize_dhaS0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 2});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
    ZipLong diskStart = new ZipLong(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}), diskStart);
    ZipShort result = zipField.getLocalFileDataLength();
    assertEquals(4, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithNullSize_rzOa1() {
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    ZipShort result = zipField.getLocalFileDataLength();
    assertEquals(0, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSize_UNKD0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zip64Field = new Zip64ExtendedInformationExtraField(size, compressedSize, new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}), diskStart);
    ZipEightByteInteger newSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 2});
    zip64Field.setSize(newSize);
    assertEquals(newSize, zip64Field.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthWithAllParameters_zkcR0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 10});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 20});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 30});
    ZipLong diskStart = new ZipLong(new byte[]{0, 0, 0, 1});
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipShort result = field.getCentralDirectoryLength();
    assertEquals(10 + 20 + 30 + 1, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthWithSizeOnly_CiII1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 10});
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, null, null, null);
    ZipShort result = field.getCentralDirectoryLength();
    assertEquals(10, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthWithCompressedSizeOnly_jGQx2() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 20});
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(null, compressedSize, null, null);
    ZipShort result = field.getCentralDirectoryLength();
    assertEquals(20, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthWithRelativeHeaderOffsetOnly_xgst3() {
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 30});
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(null, null, relativeHeaderOffset, null);
    ZipShort result = field.getCentralDirectoryLength();
    assertEquals(30, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthWithDiskStartOnly_kWHq4() {
    ZipLong diskStart = new ZipLong(new byte[]{0, 0, 0, 1});
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(null, null, null, diskStart);
    ZipShort result = field.getCentralDirectoryLength();
    assertEquals(1, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_vieD0() {
    byte[] sizeBytes = ZipEightByteInteger.getBytes(1024L);
    byte[] compressedSizeBytes = ZipEightByteInteger.getBytes(512L);
    byte[] relativeHeaderOffsetBytes = ZipEightByteInteger.getBytes(2048L);
    long diskStartValue = 1L;
    ZipEightByteInteger size = new ZipEightByteInteger(sizeBytes);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(compressedSizeBytes);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(relativeHeaderOffsetBytes);
    ZipLong diskStart = new ZipLong(diskStartValue);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    assertEquals(size, extraField.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskStartNumber_srWE0() {
    byte[] sizeBytes = ZipLong.getBytes(100L);
    byte[] compressedSizeBytes = ZipLong.getBytes(50L);
    byte[] diskStartBytes = ZipLong.getBytes(1L);
    ZipEightByteInteger size = new ZipEightByteInteger(sizeBytes);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(compressedSizeBytes);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(sizeBytes); // Assuming same for simplicity
    ZipLong diskStart = new ZipLong(diskStartBytes);
    Zip64ExtendedInformationExtraField zip64Field = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipLong result = zip64Field.getDiskStartNumber();
    assertEquals(diskStart.getValue(), result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRelativeHeaderOffset_Dcjp0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 10});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 5});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 20});
    ZipLong diskStart = new ZipLong(1L);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger result = extraField.getRelativeHeaderOffset();
    assertEquals(relativeHeaderOffset.getValue(), result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_wxLY0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8], 0);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8], 0);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[8], 0);
    ZipLong diskStart = new ZipLong(0L);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger newCompressedSize = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
    zipField.setCompressedSize(newCompressedSize);
    assertEquals(newCompressedSize, zipField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithValidData_OoeN0() throws ZipException {
    byte[] buffer = new byte[20]; // Example buffer
    int offset = 0;
    int length = 20; // Length that meets the condition
    Zip64ExtendedInformationExtraField zipInfo = new Zip64ExtendedInformationExtraField();
    zipInfo.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithExactLength_yIsw1() throws ZipException {
    byte[] buffer = new byte[12]; // Example buffer
    int offset = 0;
    int length = 12; // Length that meets the condition
    Zip64ExtendedInformationExtraField zipInfo = new Zip64ExtendedInformationExtraField();
    zipInfo.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithLengthModuloCondition_YSFG2() throws ZipException {
    byte[] buffer = new byte[16]; // Example buffer
    int offset = 0;
    int length = 16; // Length that meets the condition
    Zip64ExtendedInformationExtraField zipInfo = new Zip64ExtendedInformationExtraField();
    zipInfo.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithInsufficientLength_llDY3() throws ZipException {
    byte[] buffer = new byte[5]; // Example buffer
    int offset = 0;
    int length = 5; // Length that does not meet any condition
    Zip64ExtendedInformationExtraField zipInfo = new Zip64ExtendedInformationExtraField();
    zipInfo.parseFromCentralDirectoryData(buffer, offset, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumber_Dryu0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8]);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[8]);
    ZipLong initialDiskStart = new ZipLong(0);
    Zip64ExtendedInformationExtraField zip64Field = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, initialDiskStart);
    ZipLong newDiskStart = new ZipLong(1);
    zip64Field.setDiskStartNumber(newDiskStart);
    assertEquals(newDiskStart.getValue(), zip64Field.diskStart.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFields_wuUw0_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[32]; // Assuming DWORD = 8 and WORD = 4
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, true);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFields_wuUw0_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[32]; // Assuming DWORD = 8 and WORD = 4
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, true);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFields_wuUw0_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[32]; // Assuming DWORD = 8 and WORD = 4
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, true);
    assertNotNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFields_wuUw0_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[32]; // Assuming DWORD = 8 and WORD = 4
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, true);
    assertNotNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyUncompressedSize_ZlyQ1_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for uncompressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, false, false, false);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyUncompressedSize_ZlyQ1_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for uncompressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, false, false, false);
    assertNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyUncompressedSize_ZlyQ1_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for uncompressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, false, false, false);
    assertNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyUncompressedSize_ZlyQ1_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for uncompressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, false, false, false);
    assertNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyCompressedSize_PiBh2_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for compressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, true, false, false);
    assertNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyCompressedSize_PiBh2_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for compressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, true, false, false);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyCompressedSize_PiBh2_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for compressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, true, false, false);
    assertNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyCompressedSize_PiBh2_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for compressed size
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, true, false, false);
    assertNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyRelativeHeaderOffset_dAOT3_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for relative header offset
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, false);
    assertNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyRelativeHeaderOffset_dAOT3_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for relative header offset
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, false);
    assertNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyRelativeHeaderOffset_dAOT3_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for relative header offset
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, false);
    assertNotNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyRelativeHeaderOffset_dAOT3_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[8]; // Only DWORD for relative header offset
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, false);
    assertNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyDiskStart_IDGp4_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[4]; // Only WORD for disk start
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, false, true);
    assertNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyDiskStart_IDGp4_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[4]; // Only WORD for disk start
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, false, true);
    assertNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyDiskStart_IDGp4_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[4]; // Only WORD for disk start
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, false, true);
    assertNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithOnlyDiskStart_IDGp4_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[4]; // Only WORD for disk start
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, false, true);
    assertNotNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithUncompressedAndCompressedSize_wlAX6_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[16]; // Two DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, false);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithUncompressedAndCompressedSize_wlAX6_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[16]; // Two DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, false);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithUncompressedAndCompressedSize_wlAX6_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[16]; // Two DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, false);
    assertNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithUncompressedAndCompressedSize_wlAX6_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[16]; // Two DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, false);
    assertNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithRelativeHeaderOffsetAndDiskStart_zJlY7_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[12]; // One DWORD and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, true);
    assertNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithRelativeHeaderOffsetAndDiskStart_zJlY7_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[12]; // One DWORD and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, true);
    assertNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithRelativeHeaderOffsetAndDiskStart_zJlY7_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[12]; // One DWORD and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, true);
    assertNotNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithRelativeHeaderOffsetAndDiskStart_zJlY7_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[12]; // One DWORD and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(false, false, true, true);
    assertNotNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptDiskStart_AwUL8_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[24]; // Three DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, false);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptDiskStart_AwUL8_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[24]; // Three DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, false);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptDiskStart_AwUL8_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[24]; // Three DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, false);
    assertNotNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptDiskStart_AwUL8_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[24]; // Three DWORDs
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, true, false);
    assertNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptRelativeHeaderOffset_XvuV9_1() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[20]; // Two DWORDs and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, true);
    assertNotNull(zipField.size);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptRelativeHeaderOffset_XvuV9_2() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[20]; // Two DWORDs and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, true);
    assertNotNull(zipField.compressedSize);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptRelativeHeaderOffset_XvuV9_3() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[20]; // Two DWORDs and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, true);
    assertNull(zipField.relativeHeaderOffset);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReparseCentralDirectoryDataWithAllFieldsExceptRelativeHeaderOffset_XvuV9_4() throws ZipException {
    byte[] rawCentralDirectoryData = new byte[20]; // Two DWORDs and one WORD
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.rawCentralDirectoryData = rawCentralDirectoryData;
    zipField.reparseCentralDirectoryData(true, true, false, true);
    assertNotNull(zipField.diskStart);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffset_atvb0() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[8], 0);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[8], 0);
    ZipLong diskStart = new ZipLong(0L);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, size, diskStart);
    ZipEightByteInteger newRelativeHeaderOffset = new ZipEightByteInteger(12345678L);
    zipField.setRelativeHeaderOffset(newRelativeHeaderOffset);
    assertEquals(newRelativeHeaderOffset, zipField.relativeHeaderOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithBothSizes_kDYi0_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 10});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 5});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zipField.getLocalFileDataData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithBothSizes_kDYi0_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 10});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 5});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zipField.getLocalFileDataData();
    assertEquals(8, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithNullSize_CdxZ1() {
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 5});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(null, compressedSize, null, diskStart);
    assertThrows(IllegalArgumentException.class, () -> {
        zipField.getLocalFileDataData();
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithNullCompressedSize_CzXh2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 10});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, null, null, diskStart);
    assertThrows(IllegalArgumentException.class, () -> {
        zipField.getLocalFileDataData();
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithBothSizesZero_nTbz3_1() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zipField.getLocalFileDataData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithBothSizesZero_nTbz3_2() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zipField.getLocalFileDataData();
    assertEquals(8, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithBothSizesZero_nTbz3_3() {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipLong diskStart = new ZipLong(1);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField(size, compressedSize, null, diskStart);
    byte[] result = zipField.getLocalFileDataData();
    assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithEmptySizes_kTrW4_1() {
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    byte[] result = zipField.getLocalFileDataData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataWithEmptySizes_kTrW4_2() {
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    byte[] result = zipField.getLocalFileDataData();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_rBbq0() {
    byte[] sizeBytes = ZipEightByteInteger.getBytes(100L);
    byte[] compressedSizeBytes = ZipEightByteInteger.getBytes(50L);
    byte[] relativeHeaderOffsetBytes = ZipEightByteInteger.getBytes(200L);
    long diskStartValue = 1L;
    ZipEightByteInteger size = new ZipEightByteInteger(sizeBytes);
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(compressedSizeBytes);
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(relativeHeaderOffsetBytes);
    ZipLong diskStart = new ZipLong(diskStartValue);
    Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger result = extraField.getCompressedSize();
    assertEquals(compressedSize, result);
}
}