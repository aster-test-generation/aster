/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10,10, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(20, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_4() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20,10, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(30, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5,5, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(6, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_4() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6,5, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(7, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_5() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7,5, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(8, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_6() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8,5});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(9, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_3_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(20, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_4_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(30, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_3_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(6, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_4_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(7, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_5_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(8, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_6_fid2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(9, buffer.get());}
}