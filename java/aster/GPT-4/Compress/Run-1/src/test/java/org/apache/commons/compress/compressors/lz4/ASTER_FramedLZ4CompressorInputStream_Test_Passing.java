/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedLZ4CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithCorrectSignature_FOeW0() {
        byte[] correctSignature = new byte[] {0x04, 0x22, 0x4D, 0x18}; // Assuming LZ4_SIGNATURE is {0x04, 0x22, 0x4D, 0x18}
        assertTrue(FramedLZ4CompressorInputStream.matches(correctSignature, correctSignature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithIncorrectSignature_HCym1() {
        byte[] incorrectSignature = new byte[] {0x00, 0x11, 0x22, 0x33};
        assertFalse(FramedLZ4CompressorInputStream.matches(incorrectSignature, incorrectSignature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithShortSignature_esWW2() {
        byte[] shortSignature = new byte[] {0x04, 0x22}; // Shorter than required LZ4_SIGNATURE length
        assertFalse(FramedLZ4CompressorInputStream.matches(shortSignature, shortSignature.length));
    }
}