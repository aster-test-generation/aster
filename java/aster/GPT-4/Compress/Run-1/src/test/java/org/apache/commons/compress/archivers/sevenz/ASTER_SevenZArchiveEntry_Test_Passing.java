/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.apache.commons.io.file.attribute.FileTimes;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private SevenZArchiveEntry sevenZArchiveEntry;
    private Iterable<? extends SevenZMethodConfiguration> contentMethods;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetContentMethods_InhF0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
    assertNull(methods);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrcValue_iryA0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 0; // Assuming default crc value is 0
    assertEquals(expectedCrc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_hNFY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertNull(entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationDate_TZek0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertThrows(UnsupportedOperationException.class, () -> entry.getCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_hHqq0() {
    long ntfsTime = 116444736000000000L; // Represents January 1, 1970 00:00:00 UTC
    Date expected = new Date(0); // January 1, 1970 00:00:00 UTC in Java time
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasLastModifiedDate_ZFxS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    boolean expected = false; // Assuming default is false since not set
    assertEquals(expected, entry.getHasLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_pLbw0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullObject_sBka1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_dYpV2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryReturnsFalse_pqzO0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_TILC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date expectedDate = new Date(); // Assuming current date for simplicity
    entry.setLastModifiedTime(FileTime.fromMillis(expectedDate.getTime())); // Assuming a setter exists for setting last modified time
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_KjOs0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date creationDate = new Date();
    entry.setCreationDate(creationDate);
    assertEquals(creationDate.toInstant(), entry.getCreationTime().toInstant());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasStream_HTJG0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasAccessDate_Default_knmd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasAccessDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedSize_QDpi0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrcValue_SmUz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 123456789L;
    entry.setCrcValue(expectedCrc);
    assertEquals(expectedCrc, entry.getCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_jUcT0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCompressedSize(5000L);
    assertEquals(5000L, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_nYWF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_iCAE1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("testName");
        assertEquals("testName".hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testJavaTimeToNtfsTime_URfz0() {
    Date testDate = new Date();
    long expectedNtfsTime = FileTimes.toNtfsTime(testDate);
    long actualNtfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(testDate);
    assertEquals(expectedNtfsTime, actualNtfsTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessDate_jByc0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    Date accessDate = new Date();
    entry.setAccessDate(accessDate);
    assertEquals(accessDate.getTime(), entry.getAccessTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCrc_wMsx0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCreationDate_Default_YqEd0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasCreationDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedCrcValue_EhVh0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 123456789L;
    entry.setCompressedCrcValue(expectedCrc);
    assertEquals(expectedCrc, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_JTYv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date date = new Date();
        entry.setLastModifiedDate(date);
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrc_DefaultValue_bjNu0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAntiItem_gHrC0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.isAntiItem());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasCrc_cOxz0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDirectoryTrue_CmKm0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setDirectory(true);
    assertTrue(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessDate_lmAS0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    try {
        entry.getAccessDate();
        fail("Expected an UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
        assertEquals("The entry doesn't have this timestamp", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_SIwM0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCrc_ValidCrcValue_SetsCorrectly_xvFL0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    int expectedCrc = 123456;
    entry.setCrc(expectedCrc);
    assertEquals(expectedCrc, entry.getCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethods() {
        sevenZArchiveEntry = new SevenZArchiveEntry();
        // Arrange
        SevenZMethodConfiguration method1 = mock(SevenZMethodConfiguration.class);
        SevenZMethodConfiguration method2 = mock(SevenZMethodConfiguration.class);
        when(method1.getMethod()).thenReturn(SevenZMethod.LZMA);
        when(method2.getMethod()).thenReturn(SevenZMethod.DEFLATE);
        // Act
        sevenZArchiveEntry.setContentMethods(method1, method2);
        // Assert
        List<SevenZMethodConfiguration> expectedMethods = Arrays.asList(method1, method2);
        assertEquals(expectedMethods, sevenZArchiveEntry.getContentMethods(), "Content methods should match the expected methods.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedCrcValue_nLDt0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    long expectedCrc = 0; // Assuming default value is 0 since not set
    assertEquals(expectedCrc, entry.getCompressedCrcValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetWindowsAttributes_DefaultValue_ICqZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertEquals(0, entry.getWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHasWindowsAttributes_DefaultValue_gIKN0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    assertFalse(entry.getHasWindowsAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetContentMethods_withNullMethods_uAaX1_DhTO0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setContentMethods((List<SevenZMethodConfiguration>) null);
    assertNull(entry.getContentMethods());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNonNull_CpUp0_iehp0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNonNull_CpUp0_iehp0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertTrue(entry.getHasLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithNull_EhUU1_wJAP0_2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setLastModifiedTime(null);
    assertFalse(entry.getHasLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeWithPastDate_AOKS2_xSAj0_1() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    FileTime time = FileTime.fromMillis(1000000000000L);
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());}
}