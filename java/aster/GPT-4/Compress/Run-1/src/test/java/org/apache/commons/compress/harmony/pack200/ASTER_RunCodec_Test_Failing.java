/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodecReturnsCorrectCodec_udXr0_CdCy0() {
    try {
        BHSDCodec aCodec = new BHSDCodec(256, 2); // Adjusted to avoid IllegalArgumentException
        BHSDCodec bCodec = new BHSDCodec(3, 4, 5);
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        Codec expected = bCodec;
        Codec actual = runCodec.getBCodec();
        assertSame(expected, actual); // Changed to assertSame to check for object identity
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecReturnsCorrectCodec_hkry0_oHoQ0() {
    BHSDCodec aCodec = new BHSDCodec(256, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    Codec result = runCodec.getACodec();
    assertEquals(aCodec, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_iXKP0_roPL0() {
    try {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(5, 6);
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        String expected = "RunCodec[k=10;aCodec=BHSDCodec@<hashcode1>;bCodec=BHSDCodec@<hashcode2>]";
        String actual = runCodec.toString();
        assertEquals(expected, actual.replaceFirst("BHSDCodec@[0-9a-f]+", "BHSDCodec@<hashcode1>").replaceFirst("BHSDCodec@[0-9a-f]+", "BHSDCodec@<hashcode2>"));
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeThrowsPack200Exception_NyWH0_MWIV0() {
    BHSDCodec codecA = new BHSDCodec(256, 2); // Corrected the value of b from 1 to 256 to match h=256
    BHSDCodec codecB = new BHSDCodec(3, 4, 5);
    try {
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertThrows(Pack200Exception.class, () -> {
            runCodec.encode(100, 50);
        });
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown here.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeThrowsPack200Exception_TpoC0_tWSw0() {
    BHSDCodec codecA = new BHSDCodec(256, 2);
    BHSDCodec codecB = new BHSDCodec(3, 4, 5);
    try {
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertThrows(Pack200Exception.class, () -> {
            runCodec.encode(100);
        });
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown here.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetK_VeUL0_XQkO0() {
    try {
        BHSDCodec codecA = new BHSDCodec(256, 2); // Corrected the value of b to 256 to match h=256
        BHSDCodec codecB = new BHSDCodec(3, 4, 5);
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertEquals(10, runCodec.getK());
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodecReturnsCorrectCodec_udXr0_CdCy0_fid3() {
    try {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4, 5);
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        Codec expected = bCodec;
        Codec actual = runCodec.getBCodec();
        assertEquals(expected, actual);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetACodecReturnsCorrectCodec_hkry0_oHoQ0_fid3() {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(5, aCodec, bCodec);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    Codec result = runCodec.getACodec();
    assertEquals(aCodec, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_iXKP0_roPL0_fid3() {
    try {
        BHSDCodec aCodec = new BHSDCodec(1, 2, 3, 4);
        BHSDCodec bCodec = new BHSDCodec(5, 6, 7);
        RunCodec runCodec = new RunCodec(10, aCodec, bCodec);
        String expected = "RunCodec[k=10;aCodec=BHSDCodec@<hashcode1>;bCodec=BHSDCodec@<hashcode2>]";
        String actual = runCodec.toString();
        assertEquals(expected, actual.replaceFirst("BHSDCodec@[0-9a-f]+", "BHSDCodec@<hashcode1>").replaceFirst("BHSDCodec@[0-9a-f]+", "BHSDCodec@<hashcode2>"));
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeThrowsPack200Exception_NyWH0_MWIV0_fid3() {
    BHSDCodec codecA = new BHSDCodec(1, 2);
    BHSDCodec codecB = new BHSDCodec(3, 4, 5);
    try {
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertThrows(Pack200Exception.class, () -> {
            runCodec.encode(100, 50);
        });
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown here.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeThrowsPack200Exception_TpoC0_tWSw0_fid3() {
    BHSDCodec codecA = new BHSDCodec(1, 2);
    BHSDCodec codecB = new BHSDCodec(3, 4, 5);
    try {
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertThrows(Pack200Exception.class, () -> {
            runCodec.encode(100);
        });
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown here.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetK_VeUL0_XQkO0_fid3() {
    try {
        BHSDCodec codecA = new BHSDCodec(1, 2);
        BHSDCodec codecB = new BHSDCodec(3, 4, 5);
        RunCodec runCodec = new RunCodec(10, codecA, codecB);
        assertEquals(10, runCodec.getK());
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    } catch (IOException e) {
        fail("IOException should not be thrown");
    }
}
}