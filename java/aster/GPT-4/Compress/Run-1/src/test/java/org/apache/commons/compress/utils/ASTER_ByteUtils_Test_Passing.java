/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithSingleByte_zPaj0() {
    byte[] bytes = {0x01};
    int offset = 0;
    int length = 1;
    long result = ByteUtils.fromLittleEndian(bytes, offset, length);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndianWithMultipleBytes_btCG1() {
    byte[] bytes = {0x01, 0x02, 0x03, 0x04};
    int offset = 0;
    int length = 4;
    long result = ByteUtils.fromLittleEndian(bytes, offset, length);
    assertEquals(67305985, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndianWithZeroLength_wlDg0() {
    byte[] bytes = new byte[10];
    ByteUtils.toLittleEndian(bytes, 123456789L, 3, 0);
    assertEquals(0, bytes[3]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndianWithNormalInput_cers1_1() {
    byte[] bytes = new byte[10];
    ByteUtils.toLittleEndian(bytes, 123456789L, 2, 4);
    assertEquals((byte) 0x15, bytes[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndianWithNormalInput_cers1_2() {
    byte[] bytes = new byte[10];
    ByteUtils.toLittleEndian(bytes, 123456789L, 2, 4);
    assertEquals((byte) 0xCD, bytes[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndianWithNormalInput_cers1_3() {
    byte[] bytes = new byte[10];
    ByteUtils.toLittleEndian(bytes, 123456789L, 2, 4);
    assertEquals((byte) 0x5B, bytes[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToLittleEndianWithNormalInput_cers1_4() {
    byte[] bytes = new byte[10];
    ByteUtils.toLittleEndian(bytes, 123456789L, 2, 4);
    assertEquals((byte) 0x07, bytes[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian_lXFR0() {
    byte[] bytes = {1, 0, 0, 0, 0, 0, 0, 0}; // Represents the long value 1 in little-endian
    long result = ByteUtils.fromLittleEndian(bytes);
    assertEquals(1L, result);
}
}