/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode.forms;

import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SuperMethodRefForm_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPoolID_jGzy0() {
    SuperMethodRefForm superMethodRefForm = new SuperMethodRefForm(0, "methodName", new int[]{});
    int expected = SegmentConstantPool.CP_METHOD;
    assertEquals(expected, superMethodRefForm.getPoolID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_eqNP0() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int opcode = 0;
    String name = "dummyMethod";
    int[] rewrite = new int[0];
    SuperMethodRefForm superMethodRefForm = new SuperMethodRefForm(opcode, name, rewrite);
    int result = superMethodRefForm.getOffset(operandManager);
    assertEquals(0, result); // Assuming nextSuperMethodRef() returns 0 for uninitialized array
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContextReturnsSuperClass_JgPf0() {
        int[] dummyArray = new int[0];
        OperandManager operandManager = new OperandManager(dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray, dummyArray);
        String expectedSuperClass = "java.lang.Object";
        operandManager.setSuperClass(expectedSuperClass);
        SuperMethodRefForm superMethodRefForm = new SuperMethodRefForm(0, "methodName", new int[0]);
        String actualSuperClass = superMethodRefForm.context(operandManager);
        assertEquals(expectedSuperClass, actualSuperClass);
    }
}