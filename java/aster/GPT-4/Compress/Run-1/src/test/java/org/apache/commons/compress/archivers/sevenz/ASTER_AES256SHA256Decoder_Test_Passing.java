/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_AOKV0_1() throws Exception {
    char[] password = "testPassword".toCharArray();
    int numCyclesPower = 10;
    byte[] salt = new byte[] {1, 2, 3, 4, 5};
    byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSha256Password_AOKV0_2() throws Exception {
    char[] password = "testPassword".toCharArray();
    int numCyclesPower = 10;
    byte[] salt = new byte[] {1, 2, 3, 4, 5};
    byte[] result = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
    assertTrue(result.length > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16DecodeWithNullInput_dOOU0() throws Exception {
    byte[] result = AES256SHA256Decoder.utf16Decode(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16DecodeWithEmptyCharArray_mqtO1() throws Exception {
    char[] chars = new char[0];
    byte[] result = AES256SHA256Decoder.utf16Decode(chars);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUtf16DecodeWithRegularChars_JRhP2() throws Exception {
    char[] chars = new char[] {'H', 'e', 'l', 'l', 'o'};
    byte[] result = AES256SHA256Decoder.utf16Decode(chars);
    byte[] expected = new byte[] {72, 0, 101, 0, 108, 0, 108, 0, 111, 0};
    assertArrayEquals(expected, result);
}
}