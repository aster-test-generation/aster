/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_AllElementsCallableAndBackwards_UGuI0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_EmptyBackwardsCalls_hUYP2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_MismatchedBackwardsCallsLength_YLsR3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1}; // Less than the number of backwards callable elements
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_NoCallable_OkFb1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("Test", 1, "NonCallable", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.attributeLayoutElements.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_EmptyInput_nuxs0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = new int[0];
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_MultipleCallables_YtDO2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "[(B)(B)]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_ComplexLayout_mqeM3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "[(B)[(I)]]", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_EmptyInput_jdxv3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("test", 1, "", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertTrue(newAttributeBands.attributeLayoutElements.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_AllElementsCallable_bDaF0() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("Test", 1, "Layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_NoCallableElements_ghcC1() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("Test", 1, "NonCallableLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_MixedElements_ateH2() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("Test", 1, "MixedLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(1, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_InvalidIndex_lvmj3() throws IOException {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("Test", 1, "Layout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    int[] backwardsCalls = {1, 2, 3, 4}; // More elements than Callables
    newAttributeBands.setBackwardsCalls(backwardsCalls);
    assertEquals(3, newAttributeBands.getBackwardsCallCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithBranch5_eQfD0() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "O", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("O");
        assertEquals(Codec.BRANCH5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithBCI5_oURT1() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "P", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("P");
        assertEquals(Codec.BCI5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithSigned5_BeyQ2() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "S", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("S");
        assertEquals(Codec.SIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithByte1_vrip3() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "B", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("B");
        assertEquals(Codec.BYTE1, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithUnsigned5Default_ZJYN4() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "X", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("X");
        assertEquals(Codec.UNSIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithSigned5ExcludingKS_NZcy5() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "KS", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("KS");
        assertNotEquals(Codec.SIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecWithSigned5ExcludingRS_mYJh6() throws IOException {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("test", 1, "RS", 0);
        NewAttributeBands bands = new NewAttributeBands(segment, attributeLayout);
        BHSDCodec codec = bands.getCodec("RS");
        assertNotEquals(Codec.SIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBackwardsCallCount_DefaultValue_hLMI0() throws IOException, Pack200Exception {
    Segment segment = new Segment();
    AttributeLayout attributeLayout = new AttributeLayout("testName", 1, "testLayout", 0);
    NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
    assertEquals(0, newAttributeBands.getBackwardsCallCount());
}
}