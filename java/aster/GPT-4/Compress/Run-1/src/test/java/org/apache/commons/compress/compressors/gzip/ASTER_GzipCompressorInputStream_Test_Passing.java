/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ValidSignature_ReturnsTrue_DbbA0() throws Exception {
        byte[] signature = new byte[] {31, -117};
        assertTrue(GzipCompressorInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_InvalidSignature_ReturnsFalse_VnzO1() throws Exception {
        byte[] signature = new byte[] {0, 0};
        assertFalse(GzipCompressorInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ShortLength_ReturnsFalse_tnTR2() throws Exception {
        byte[] signature = new byte[] {31, -117};
        assertFalse(GzipCompressorInputStream.matches(signature, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ValidSignatureWithExtraBytes_ReturnsTrue_smBH3() throws Exception {
        byte[] signature = new byte[] {31, -117, 1, 2, 3};
        assertTrue(GzipCompressorInputStream.matches(signature, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_InputStreamIsSystemIn_cbMT2() throws IOException {
        GzipCompressorInputStream gzipStream = new GzipCompressorInputStream(System.in);
        gzipStream.close();
        assertNotNull(System.in);
    }
}