/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_DVeu0() throws Exception {
    X7875_NewUnix unix1 = new X7875_NewUnix();
    assertTrue(unix1.equals(unix1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_ugNB1() throws Exception {
    X7875_NewUnix unix1 = new X7875_NewUnix();
    assertFalse(unix1.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_MNqo2() throws Exception {
    X7875_NewUnix unix1 = new X7875_NewUnix();
    Object otherObject = new Object();
    assertFalse(unix1.equals(otherObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValues_HNoo3() throws Exception {
    X7875_NewUnix unix1 = new X7875_NewUnix();
    X7875_NewUnix unix2 = new X7875_NewUnix();
    assertFalse(unix1.equals(unix2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValues_wUBo4() throws Exception {
    X7875_NewUnix unix1 = new X7875_NewUnix();
    X7875_NewUnix unix2 = new X7875_NewUnix();
    assertTrue(unix1.equals(unix2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_ReturnsEmptyByteArray_vRYN0() throws Exception {
    X7875_NewUnix x7875_newUnix = new X7875_NewUnix();
    byte[] result = x7875_newUnix.getCentralDirectoryData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_Eeku0() throws Exception {
    X7875_NewUnix unix = new X7875_NewUnix();
    long expectedGID = 0L; // Assuming expected GID is 0 for this test case
    assertEquals(expectedGID, unix.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_sXNq0() throws Exception {
    X7875_NewUnix unix = new X7875_NewUnix();
    long expected = 0L; // Assuming expected UID after conversion
    assertEquals(expected, unix.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLength_TyfQ0() throws Exception {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    ZipShort result = x7875.getCentralDirectoryLength();
    assertEquals(ZipShort.ZERO, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WfHl0() throws Exception {
        X7875_NewUnix unix = new X7875_NewUnix();
        int expectedHashCode = unix.hashCode();
        assertEquals(expectedHashCode, unix.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithValidData_YSBo0() throws Exception {
    X7875_NewUnix x7875 = new X7875_NewUnix();
    byte[] buffer = new byte[] {0x50, 0x4b, 0x03, 0x04}; // Sample ZIP header
    int offset = 0;
    int length = buffer.length;
    try {
        x7875.parseFromCentralDirectoryData(buffer, offset, length);
        assertTrue(true); // Assuming no exception is good execution
    } catch (ZipException e) {
        fail("Should not have thrown ZipException");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLength_AllZeroes_YaEQ0() throws Exception {
    byte[] input = new byte[] {0, 0, 0, 0};
    byte[] expected = new byte[] {0};
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLength_NoLeadingZeroes_wCUO1() throws Exception {
    byte[] input = new byte[] {1, 2, 3, 4};
    byte[] expected = new byte[] {1, 2, 3, 4};
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLength_NullInput_gQvS2() throws Exception {
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(null);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrimLeadingZeroesForceMinLength_MixedZeroes_jOjx3() throws Exception {
    byte[] input = new byte[] {0, 0, 1, 0, 2};
    byte[] expected = new byte[] {1, 0, 2};
    byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(input);
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_RkBf0_1() throws CloneNotSupportedException {
    X7875_NewUnix original = new X7875_NewUnix();
    X7875_NewUnix cloned = (X7875_NewUnix) original.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_RkBf0_2() throws CloneNotSupportedException {
    X7875_NewUnix original = new X7875_NewUnix();
    X7875_NewUnix cloned = (X7875_NewUnix) original.clone();
    assertNotSame(original, cloned);}
}