/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Zip64RequiredException_Test_Passing {
@Mock
    private ZipArchiveEntry mockZipArchiveEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntryTooBigMessage() throws Exception {
        // Setup is done by MockitoExtension and @Mock
        // Given
        String expectedEntryName = "largeFile.zip";
        when(mockZipArchiveEntry.getName()).thenReturn(expectedEntryName);
        // When
        String resultMessage = Zip64RequiredException.getEntryTooBigMessage(mockZipArchiveEntry);
        // Then
        String expectedMessage = "largeFile.zip's size exceeds the limit of 4GByte.";
        assertEquals(expectedMessage, resultMessage, "The error message should correctly state the entry name and size limit.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryTooBigMessage_DhgL0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("largeFile.zip");
    String expectedMessage = "largeFile.zip's size exceeds the limit of 4GByte.";
    String actualMessage = Zip64RequiredException.getEntryTooBigMessage(entry);
    assertEquals(expectedMessage, actualMessage);
}
}