/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200ClassReader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFileName_tLhQ0() throws Exception {
    byte[] byteArray = new byte[10]; // Example byte array, actual content irrelevant
    Pack200ClassReader reader = new Pack200ClassReader(byteArray);
    String expected = null; // Assuming fileName is not set in the constructor and defaults to null
    assertEquals(expected, reader.getFileName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadConstWithMatchingItem_YIlq0() throws Exception {
        byte[] byteArray = new byte[10];
        Pack200ClassReader reader = new Pack200ClassReader(byteArray);
        char[] buffer = new char[5];
        int item = 0; // Assuming lastUnsignedShort is initialized to 0 for this test case
        Object result = reader.readConst(item, buffer);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadConstWithNonMatchingItem_ryDu1() throws Exception {
        byte[] byteArray = new byte[10];
        Pack200ClassReader reader = new Pack200ClassReader(byteArray);
        char[] buffer = new char[5];
        int item = 1; // Assuming lastUnsignedShort is not 1
        Object result = reader.readConst(item, buffer);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasSyntheticAttributes_nmtp0() throws Exception {
    byte[] classBytes = new byte[0]; // Assuming empty byte array for simplicity
    Pack200ClassReader reader = new Pack200ClassReader(classBytes);
    assertFalse(reader.hasSyntheticAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadUnsignedShort_NormalCase_QyjI0() throws Exception {
        byte[] data = {0, 19, 0, 1}; // 19 followed by 0, 1
        Pack200ClassReader reader = new Pack200ClassReader(data);
        int result = reader.readUnsignedShort(2);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadUnsignedShort_NoSpecialPreviousByte_ecJB1() throws Exception {
        byte[] data = {0, 18, 0, 1}; // 18 followed by 0, 1, no special handling
        Pack200ClassReader reader = new Pack200ClassReader(data);
        int result = reader.readUnsignedShort(2);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadUnsignedShort_AtStartOfArray_Hsjv2() throws Exception {
        byte[] data = {0, 1}; // At start, no previous byte
        Pack200ClassReader reader = new Pack200ClassReader(data);
        int result = reader.readUnsignedShort(0);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLastConstantHadWideIndex_zbsm0() throws Exception {
    byte[] byteArray = new byte[10]; // Example byte array, actual content irrelevant for this test
    Pack200ClassReader reader = new Pack200ClassReader(byteArray);
    boolean result = reader.lastConstantHadWideIndex();
    assertEquals(false, result); // Assuming default state is false, adjust as per actual default state
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadUTF8ReturnsCorrectString_amNt0() throws Exception {
    byte[] byteArray = new byte[10];
    Pack200ClassReader reader = new Pack200ClassReader(byteArray);
    char[] charArray = new char[5];
    String result = reader.readUTF8(0, charArray);
    assertEquals("Expected string", result);
}
}