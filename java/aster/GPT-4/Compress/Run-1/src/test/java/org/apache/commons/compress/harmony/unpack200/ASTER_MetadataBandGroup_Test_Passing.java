/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.MetadataBandGroup;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_MetadataBandGroup_Test_Passing {
private CPUTF8 mockCpUTF8;
private CPUTF8 cpUTF8Mock;
@Mock
    private Segment segment;
@Mock
    private CpBands cpBands;
@InjectMocks
    private MetadataBandGroup metadataBandGroup;
@Mock
    private Iterator<CPUTF8> name_RU_Iterator;
@Mock
    private CPUTF8 name_RU;
private String type = "RVA";
private int[] anno_N = {1, 2};
private String[] type_RS = {"type1", "type2"};
private int[] pair_N = {10, 20};
    private static CPUTF8 rvpaUTF8;
    private static CPUTF8 riaUTF8;
    private static CPUTF8 rvaUTF8;
    private int caseJ_KJ_Index;
    private List<Attribute> attributes;
    private int caseet_RS_Index;
    private int caseI_KI_Index;
    private int casec_RS_Index;
    private int caseF_KF_Index;
    private int caseec_RU_Index;
    private int cases_RU_Index;
    private int casearray_N_Index;
    private int T_index;
    private Iterator<CPUTF8> nestname_RU_Iterator;
    private int pair_N_Index;
    private int nesttype_RS_Index;
    private int anno_N_Index;
    private int nestpair_N_Index;
    private int caseD_KD_Index;
}