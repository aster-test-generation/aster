/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnrecognizedExtraField_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithOffsetOutOfBounds_eHFv1() {
    UnrecognizedExtraField uef = new UnrecognizedExtraField();
    byte[] data = {0x01, 0x02, 0x03, 0x04};
    int offset = 4;
    int length = 1;
    uef.parseFromCentralDirectoryData(data, offset, length);
    byte[] expected = {};
    assertArrayEquals(expected, uef.getCentralDirectoryData());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_Ltfn0() {
    UnrecognizedExtraField uef = new UnrecognizedExtraField();
    ZipShort result = uef.getHeaderId();
    assertNotNull(result);
    assertEquals(0, result.getValue()); // Assuming default constructor sets to 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataReturnsCorrectData_ijah0() {
    UnrecognizedExtraField uef = new UnrecognizedExtraField();
    byte[] expected = new byte[] {}; // Assuming expected data
    byte[] actual = uef.getLocalFileDataData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_Ltfn0_1() {
    UnrecognizedExtraField uef = new UnrecognizedExtraField();
    ZipShort result = uef.getHeaderId();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithOffsetOutOfBounds_eHFv1_fid2() {
    UnrecognizedExtraField uef = new UnrecognizedExtraField();
    byte[] data = {0x01, 0x02, 0x03, 0x04};
    int offset = 4;
    int length = 1;
    uef.parseFromCentralDirectoryData(data, offset, length);
    byte[] expected = new byte[0];
    assertArrayEquals(expected, uef.getCentralDirectoryData());
}
}