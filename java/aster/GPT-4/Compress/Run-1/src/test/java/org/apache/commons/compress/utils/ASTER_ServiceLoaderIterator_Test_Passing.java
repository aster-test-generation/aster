/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.ServiceLoader;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServiceLoaderIterator_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasNextReturnsFalseWhenNoMoreElements_wpKU0() {
        ServiceLoader<Object> serviceLoader = ServiceLoader.load(Object.class);
        ServiceLoaderIterator<Object> iterator = new ServiceLoaderIterator<>(Object.class, ClassLoader.getSystemClassLoader());
        assertFalse(iterator.hasNext());
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS)
    public void testRemoveThrowsUnsupportedOperationException_pJCM0_HdXx0() {
        ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class);
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasNextContinuesOnSecurityException_Rpwz3_fid2() {
        ServiceLoader<Object> serviceLoader = ServiceLoader.load(Object.class);
        ServiceLoaderIterator<Object> iterator = new ServiceLoaderIterator<>(Object.class, ClassLoader.getSystemClassLoader());
        assertFalse(iterator.hasNext()); // Assuming SecurityException is caught and handled internally
    }
}