/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InnerClassesAttribute_Test_Passing {
@Mock
    private CPClass mockInnerClass;
@Mock
    private CPClass mockOuterClass;
@Mock
    private CPUTF8 mockInnerName;
@InjectMocks
    private InnerClassesAttribute innerClassesAttribute;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_bxee0() throws Exception {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("TestAttribute");
    assertEquals("InnerClasses: TestAttribute", innerClassesAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_npQM0() throws Exception {
    InnerClassesAttribute attribute = new InnerClassesAttribute("TestAttribute");
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_TqUA1() throws Exception {
    InnerClassesAttribute attribute = new InnerClassesAttribute("TestAttribute");
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_Agrx2() throws Exception {
    InnerClassesAttribute attribute = new InnerClassesAttribute("TestAttribute");
    Object other = new Object();
    assertFalse(attribute.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentName_uCzK3() throws Exception {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("TestAttribute1");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("TestAttribute2");
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameName_lwsK4() throws Exception {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute("TestAttribute");
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("TestAttribute");
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullNameInBoth_tffw5() throws Exception {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute(null);
    InnerClassesAttribute attribute2 = new InnerClassesAttribute(null);
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithOneNullName_KsWD6() throws Exception {
    InnerClassesAttribute attribute1 = new InnerClassesAttribute(null);
    InnerClassesAttribute attribute2 = new InnerClassesAttribute("TestAttribute");
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyList_Rngc0_1() throws Exception {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("test");
    ClassFileEntry[] result = innerClassesAttribute.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_EmptyList_Rngc0_2() throws Exception {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("test");
    ClassFileEntry[] result = innerClassesAttribute.getNestedClassFileEntries();
    assertEquals(0, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthWithEmptyList_AKGO0() throws Exception {
    InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("TestAttribute");
    assertEquals(2, innerClassesAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolveWithEmptyInnerClasses_TZkX0() throws Exception {
        ClassConstantPool mockPool = mock(ClassConstantPool.class);
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("TestAttribute");
        innerClassesAttribute.resolve(mockPool);
        verify(mockPool, never()).resolve(any(Segment.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonNullName_bQYo0() throws Exception {
    InnerClassesAttribute attribute = new InnerClassesAttribute("TestName");
    int expectedHashCode = 31 * super.hashCode() + "TestName".hashCode();
    assertEquals(expectedHashCode, attribute.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_ALSv1() throws Exception {
    InnerClassesAttribute attribute = new InnerClassesAttribute(null);
    int expectedHashCode = 31 * super.hashCode() + 0;
    assertEquals(expectedHashCode, attribute.hashCode());
}
}