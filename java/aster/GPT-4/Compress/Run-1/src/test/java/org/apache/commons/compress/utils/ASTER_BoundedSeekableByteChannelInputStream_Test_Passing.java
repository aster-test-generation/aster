/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
public class Aster_BoundedSeekableByteChannelInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_FBUd0() throws IOException {
        long startPosition = 0;
        ByteBuffer buffer = ByteBuffer.allocate(10);
        SeekableByteChannel mockChannel = mock(SeekableByteChannel.class);
        when(mockChannel.read(buffer)).thenReturn(10);
        BoundedSeekableByteChannelInputStream inputStream = new BoundedSeekableByteChannelInputStream(startPosition, 10, mockChannel);
        int bytesRead = inputStream.read(startPosition, buffer);
        assertEquals(10, bytesRead);
    }
}