/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.IcBands;
import org.apache.commons.compress.harmony.unpack200.IcTuple;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.OutputStream;
import java.lang.reflect.Field;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_IcBands_Test_Passing {
@Mock
    private SegmentHeader segmentHeader;
@Mock
    private CpBands cpBands;
private Set<IcTuple> innerClasses = new TreeSet<>();
@InjectMocks
    private IcBands icBands;
private Map<String, List<IcTuple>> outerToInner = new HashMap<>();
private SegmentHeader mockSegmentHeader;
private CpBands mockCpBands;
    private CPClass cpClassMock;
@Mock
    private IcTuple icTupleMock;
private OutputStream outputStream;
}