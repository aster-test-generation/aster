/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileNameWithCompressedExtension_tBqx0() {
    Map<String, String> suffixes = new HashMap<>();
    suffixes.put(".zip", "ZIP");
    FileNameUtil util = new FileNameUtil(suffixes, ".zip");
    assertTrue(util.isCompressedFileName("example.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileNameWithUncompressedExtension_nXaz1() {
    Map<String, String> suffixes = new HashMap<>();
    suffixes.put(".zip", "ZIP");
    FileNameUtil util = new FileNameUtil(suffixes, ".zip");
    assertFalse(util.isCompressedFileName("example.txt"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileNameWithUpperCaseExtension_UNud2() {
    Map<String, String> suffixes = new HashMap<>();
    suffixes.put(".zip", "ZIP");
    FileNameUtil util = new FileNameUtil(suffixes, ".zip");
    assertTrue(util.isCompressedFileName("example.ZIP"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileNameWithNoExtension_uzNt3() {
    Map<String, String> suffixes = new HashMap<>();
    suffixes.put(".zip", "ZIP");
    FileNameUtil util = new FileNameUtil(suffixes, ".zip");
    assertFalse(util.isCompressedFileName("example"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_syVW0() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".gz", "");
    suffixMap.put(".zip", "");
    FileNameUtil fileNameUtil = new FileNameUtil(suffixMap, ".txt");
    String result = fileNameUtil.getUncompressedFilename("example.txt.gz");
    assertEquals("example.txt", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilename_ufPv0() {
    Map<String, String> suffixes = new HashMap<>();
    suffixes.put("zip", ".zip");
    suffixes.put("rar", ".rar");
    FileNameUtil fileNameUtil = new FileNameUtil(suffixes, ".txt");
    assertTrue(fileNameUtil.isCompressedFilename("example.zip"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_RTgE0() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put("txt", "gz");
    FileNameUtil fileNameUtil = new FileNameUtil(suffixMap, "gz");
    String result = fileNameUtil.getCompressedFilename("example.txt");
    assertEquals("example.txt.gz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_WithKnownCompressedSuffix_jHCO0() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".zip", "");
    FileNameUtil util = new FileNameUtil(suffixMap, ".txt");
    String result = util.getUncompressedFileName("example.zip");
    assertEquals("example", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_WithUnknownCompressedSuffix_VzDk1() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".zip", "");
    FileNameUtil util = new FileNameUtil(suffixMap, ".txt");
    String result = util.getUncompressedFileName("example.rar");
    assertEquals("example.rar", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_WithNoSuffix_iQPS2() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".zip", "");
    FileNameUtil util = new FileNameUtil(suffixMap, ".txt");
    String result = util.getUncompressedFileName("example");
    assertEquals("example", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_WithMultipleSuffixes_Ottl3() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".tar.gz", ".tar");
    suffixMap.put(".gz", "");
    FileNameUtil util = new FileNameUtil(suffixMap, ".txt");
    String result = util.getUncompressedFileName("archive.tar.gz");
    assertEquals("archive.tar", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_WithKnownSuffix_iiyJ0() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".txt", ".zip");
    FileNameUtil util = new FileNameUtil(suffixMap, ".gz");
    String result = util.getCompressedFileName("document.txt");
    assertEquals("document.zip", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_WithUnknownSuffix_rpQr1() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".txt", ".zip");
    FileNameUtil util = new FileNameUtil(suffixMap, ".gz");
    String result = util.getCompressedFileName("image.bmp");
    assertEquals("image.bmp.gz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_WithEmptyFileName_sSVc2() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".txt", ".zip");
    FileNameUtil util = new FileNameUtil(suffixMap, ".gz");
    String result = util.getCompressedFileName("");
    assertEquals(".gz", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_WithLongSuffix_fZNS3() {
    Map<String, String> suffixMap = new HashMap<>();
    suffixMap.put(".document", ".zip");
    FileNameUtil util = new FileNameUtil(suffixMap, ".gz");
    String result = util.getCompressedFileName("report.document");
    assertEquals("report.zip", result);
}
}