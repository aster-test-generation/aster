/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
private TarArchiveEntry tarArchiveEntry;
private TarArchiveEntry sameTarArchiveEntry;
    private TarArchiveEntry tarArchiveEntry1;
@Mock
    private TarArchiveEntry tarArchiveEntry2;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMode_FAcB0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setMode(0755);
    assertEquals(0755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime_Fzba0() {
        FileTime expectedFileTime = FileTime.fromMillis(System.currentTimeMillis());
        TarArchiveEntry entry = new TarArchiveEntry("test.tar");
        Date expectedDate = new Date(expectedFileTime.toMillis());
        Date actualDate = entry.getModTime();
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMajor_LhWk0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    int expected = 0; // Assuming default initialization to 0, as not specified otherwise
    assertEquals(expected, entry.getDevMajor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseTarHeader_tilS0() {
        byte[] header = new byte[512]; // Assuming 512 is a typical block size for tar headers
        TarArchiveEntry entry = new TarArchiveEntry(header);
        try {
            entry.parseTarHeader(header);
        } catch (UncheckedIOException ex) {
            fail("Should not throw UncheckedIOException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseTarHeader_XUEL0() {
        byte[] header = new byte[512]; // Assuming 512 is the correct size for a TAR header
        TarArchiveEntry entry = new TarArchiveEntry(header);
        try {
            entry.parseTarHeader(header);
        } catch (UncheckedIOException ex) {
            fail("Should not throw UncheckedIOException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFIFOTrue_uoHg0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry", TarArchiveEntry.LF_FIFO);
    assertTrue(entry.isFIFO());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsFIFOFalse_rjxU1() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry", TarArchiveEntry.LF_NORMAL);
    assertFalse(entry.isFIFO());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGlobalPaxHeaderFalse_vGgp1() {
    byte linkFlag = 0; // Assuming 0 is not LF_PAX_GLOBAL_EXTENDED_HEADER
    TarArchiveEntry entry = new TarArchiveEntry("testName", linkFlag);
    assertFalse(entry.isGlobalPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLinkFlag_Ktbc0() {
    byte expectedLinkFlag = 0x01; // Assuming 0x01 is a valid link flag for this test case
    TarArchiveEntry entry = new TarArchiveEntry("testName", expectedLinkFlag);
    byte actualLinkFlag = entry.getLinkFlag();
    assertEquals(expectedLinkFlag, actualLinkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_TNwS0() {
        TarArchiveEntry entry = new TarArchiveEntry("testEntry");
        assertTrue(entry.equals(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_FvDe1() {
        TarArchiveEntry entry = new TarArchiveEntry("testEntry");
        Object other = new Object();
        assertFalse(entry.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_usGB2() {
        TarArchiveEntry entry = new TarArchiveEntry("testEntry");
        assertFalse(entry.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_nPmf0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    Date expectedDate = new Date(); // Assuming setModTime() sets the current time
    entry.setModTime(expectedDate); // This method should exist to set the modification time
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongGroupId_ktCZ0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    long expectedGroupId = 0; // Assuming default groupId is 0 for new entries without specific initialization
    assertEquals(expectedGroupId, entry.getLongGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_IVcp0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongNameEntry_False_jvcx1() {
    TarArchiveEntry entry = new TarArchiveEntry("someName", (byte) 0);
    assertFalse(entry.isGNULongNameEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkFalse_Axfe1() {
        byte linkFlag = '0'; // Assuming '0' is not the constant LF_LINK
        TarArchiveEntry entry = new TarArchiveEntry("testName", linkFlag);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_zdrE0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setIds(1001, 1002);
    assertEquals(1001, entry.getUserId());
    assertEquals(1002, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDescendent_True_ZGpB0() {
    TarArchiveEntry parent = new TarArchiveEntry("parent/");
    TarArchiveEntry child = new TarArchiveEntry("parent/child");
    assertTrue(parent.isDescendent(child));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStreamContiguous_cdeR0() {
    TarArchiveEntry tarEntry = new TarArchiveEntry("testEntry");
    assertTrue(tarEntry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeConsistency_JHWZ0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    int expectedHashCode = entry.getName().hashCode();
    int actualHashCode = entry.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_BnNM0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setUserId(1000);
    assertEquals(1000, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExtraPaxHeaders_EmptyByDefault_hIwY0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    Map<String, String> headers = entry.getExtraPaxHeaders();
    assertTrue(headers.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUserId_KSAZ0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setUserId(1001);
    assertEquals(1001, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupName_KRvI0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setGroupName("testGroup");
    assertEquals("testGroup", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_MRPT0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setNames("user1", "group1");
    assertEquals("user1", entry.getUserName());
    assertEquals("group1", entry.getGroupName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagNormal_BYFy2() {
        TarArchiveEntry entry = new TarArchiveEntry("entryName", TarArchiveEntry.LF_NORMAL);
        assertTrue(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagDirectory_PMrB3() {
        TarArchiveEntry entry = new TarArchiveEntry("entryName", TarArchiveEntry.LF_DIR);
        assertFalse(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithNameEndingWithSlash_Soyo4() {
        TarArchiveEntry entry = new TarArchiveEntry("directory/");
        assertFalse(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithOldNormLinkFlag_qiHZ5() {
        TarArchiveEntry entry = new TarArchiveEntry("entryName", TarArchiveEntry.LF_OLDNORM);
        assertTrue(entry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsGNULongLinkEntry_False_ihqF1() {
    byte linkFlag = 0; // Assuming 0 is not LF_GNUTYPE_LONGLINK
    TarArchiveEntry entry = new TarArchiveEntry("test", linkFlag);
    assertFalse(entry.isGNULongLinkEntry());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsExtended_XtyW0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    assertFalse(entry.isExtended());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_YZJu0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setGroupId(1001);
    assertEquals(1001, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTimeNonNull_PkRL0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_dbpg0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithLinkFlagDirectory_JrrI2() {
        TarArchiveEntry entry = new TarArchiveEntry("dir/", (byte) '5'); // Assuming '5' is LF_DIR
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithNameEndsWithSlash_zSxu3() {
        TarArchiveEntry entry = new TarArchiveEntry("dir/");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithNameDoesNotEndWithSlash_UGQw4() {
        TarArchiveEntry entry = new TarArchiveEntry("file.txt");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLinkName_Pzrg0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    String expectedLinkName = "linkName";
    entry.setLinkName(expectedLinkName);
    assertEquals(expectedLinkName, entry.getLinkName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedTime_EvTX0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    FileTime expectedTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(expectedTime); // Assuming there's a setter method to set the time for testing
    FileTime actualTime = entry.getLastModifiedTime();
    assertEquals(expectedTime, actualTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxHeaderWithNonPaxHeader_nKGm2() {
    TarArchiveEntry entry = new TarArchiveEntry("test", (byte) 0x00);
    assertFalse(entry.isPaxHeader());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongUserId_DefaultConstructor_nsda0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    long expectedUserId = 0; // Assuming default userId is 0 when not set
    assertEquals(expectedUserId, entry.getLongUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsStarSparse_FOCH0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    assertFalse(entry.isStarSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_jdFs0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    assertEquals(0, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_VanD0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setModTime(time);
    assertEquals(time, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_vxSk0() {
        TarArchiveEntry entry = new TarArchiveEntry("testName");
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_EmptyDirectory_mZIr0() throws IOException {
    Path tempDir = Files.createTempDirectory("emptyDir");
    TarArchiveEntry entry = new TarArchiveEntry(tempDir);
    TarArchiveEntry[] result = entry.getDirectoryEntries();
    assertTrue(result.length == 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_NonEmptyDirectory_obsj1() throws IOException {
    Path tempDir = Files.createTempDirectory("nonEmptyDir");
    Files.createFile(tempDir.resolve("file1.txt"));
    Files.createFile(tempDir.resolve("file2.txt"));
    TarArchiveEntry entry = new TarArchiveEntry(tempDir);
    TarArchiveEntry[] result = entry.getDirectoryEntries();
    assertEquals(2, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_FileInsteadOfDirectory_xTRf3() throws IOException {
    Path tempFile = Files.createTempFile("tempFile", ".txt");
    TarArchiveEntry entry = new TarArchiveEntry(tempFile);
    TarArchiveEntry[] result = entry.getDirectoryEntries();
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDirectoryEntries_DirectoryWithSubdirectories_WCMD5() throws IOException {
    Path tempDir = Files.createTempDirectory("dirWithSubdirs");
    Files.createDirectory(tempDir.resolve("subdir1"));
    Files.createDirectory(tempDir.resolve("subdir2"));
    TarArchiveEntry entry = new TarArchiveEntry(tempDir);
    TarArchiveEntry[] result = entry.getDirectoryEntries();
    assertEquals(2, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPaxGNU1XSparse_ROTc0() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    assertFalse(entry.isPaxGNU1XSparse());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGroupId_jWDH0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setGroupId(1000);
    assertEquals(1000L, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModTime_WIWf0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    long expectedTime = System.currentTimeMillis();
    entry.setModTime(expectedTime);
    assertEquals(FileTime.fromMillis(expectedTime), entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_Pepa0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    long expectedSize = 0; // Assuming default size is 0 for a new entry with just a name
    assertEquals(expectedSize, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDevMinorInvalid_PpYH1() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    assertThrows(IllegalArgumentException.class, () -> entry.setDevMinor(-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameName_xWoc0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("testEntry");
    TarArchiveEntry entry2 = new TarArchiveEntry("testEntry");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentName_TnkH1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("entryOne");
    TarArchiveEntry entry2 = new TarArchiveEntry("entryTwo");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_nvpg2() {
    TarArchiveEntry entry1 = new TarArchiveEntry("entry");
    TarArchiveEntry entry2 = null;
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRealSize_NonSparseEntry_CDQO0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setSize(100);
    assertEquals(100, entry.getRealSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevMinor_ZDFu0() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    int expectedDevMinor = 0; // Assuming default initialization to 0, as not specified in the class
    assertEquals(expectedDevMinor, entry.getDevMinor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkTrue_ChUq0_fid1() {
        byte linkFlag = '2'; // Assuming '2' is the constant LF_LINK
        TarArchiveEntry entry = new TarArchiveEntry("testName", linkFlag);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_zdrE0_1() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setIds(1001, 1002);
    assertEquals(1001, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetIds_zdrE0_2() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setIds(1001, 1002);
    assertEquals(1002, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOrderedSparseHeaders_EmptySparseHeaders_HfYs0_fid1() throws IOException {
    TarArchiveEntry entry = new TarArchiveEntry(new byte[512]);
    assertTrue(entry.getOrderedSparseHeaders().isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_MRPT0_1() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setNames("user1", "group1");
    assertEquals("user1", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNames_MRPT0_2() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    entry.setNames("user1", "group1");
    assertEquals("group1", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupName_XHWj0_fid1() {
    TarArchiveEntry entry = new TarArchiveEntry("testName");
    String expectedGroupName = null; // Assuming default constructor does not set groupName and it remains null
    assertNull(expectedGroupName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddPaxHeaderWithNegativeSizeThrowsException_zsuf0_1() {
    TarArchiveEntry entry = new TarArchiveEntry("testEntry");
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        entry.addPaxHeader("size", "-1");
    });
}
}