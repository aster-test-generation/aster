/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;

import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamWithNullArchiverName_vEcs0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertThrows(IllegalArgumentException.class, () -> factory.createArchiveInputStream(null, new ByteArrayInputStream(new byte[0]), "UTF-8"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamWithNullInputStream_bgCb1() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    assertThrows(IllegalArgumentException.class, () -> factory.createArchiveInputStream("ZIP", null, "UTF-8"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForAR_mSxt2() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArArchiveInputStream result = (ArArchiveInputStream) factory.createArchiveInputStream("AR", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForARJWithEncoding_yzSz3() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArjArchiveInputStream result = (ArjArchiveInputStream) factory.createArchiveInputStream("ARJ", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForARJWithoutEncoding_tVbl4() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ArjArchiveInputStream result = (ArjArchiveInputStream) factory.createArchiveInputStream("ARJ", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForZIPWithEncoding_QzhD5() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ZipArchiveInputStream result = (ZipArchiveInputStream) factory.createArchiveInputStream("ZIP", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForZIPWithoutEncoding_CQlI6() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ZipArchiveInputStream result = (ZipArchiveInputStream) factory.createArchiveInputStream("ZIP", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForTARWithEncoding_UaTA7() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream result = (TarArchiveInputStream) factory.createArchiveInputStream("TAR", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForTARWithoutEncoding_IuVd8() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream result = (TarArchiveInputStream) factory.createArchiveInputStream("TAR", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForJARWithEncoding_JQmp9() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    JarArchiveInputStream result = (JarArchiveInputStream) factory.createArchiveInputStream("JAR", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForJARWithoutEncoding_EQkB10() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    JarArchiveInputStream result = (JarArchiveInputStream) factory.createArchiveInputStream("JAR", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForCPIOWithEncoding_RJae11() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    CpioArchiveInputStream result = (CpioArchiveInputStream) factory.createArchiveInputStream("CPIO", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForCPIOWithoutEncoding_VEPe12() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    CpioArchiveInputStream result = (CpioArchiveInputStream) factory.createArchiveInputStream("CPIO", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForDUMPWithEncoding_MHvw13() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    DumpArchiveInputStream result = (DumpArchiveInputStream) factory.createArchiveInputStream("DUMP", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForDUMPWithoutEncoding_fIlW14() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    DumpArchiveInputStream result = (DumpArchiveInputStream) factory.createArchiveInputStream("DUMP", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForUnsupportedFormat_QJHF15() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(StreamingNotSupportedException.class, () -> factory.createArchiveInputStream("SEVEN_Z", in, "UTF-8"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForUnknownFormat_bOAO16() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(ArchiveException.class, () -> factory.createArchiveInputStream("UNKNOWN", in, "UTF-8"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForAPKWithEncoding_boWU17() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    JarArchiveInputStream result = (JarArchiveInputStream) factory.createArchiveInputStream("APK", in, "UTF-8");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateArchiveInputStreamForAPKWithoutEncoding_uCRv18() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    JarArchiveInputStream result = (JarArchiveInputStream) factory.createArchiveInputStream("APK", in, null);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersNotNull_iSmH0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveInputStreamProvidersConsistency_yeHa1() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> result1 = factory.getArchiveInputStreamProviders();
    SortedMap<String, ArchiveStreamProvider> result2 = factory.getArchiveInputStreamProviders();
    assertSame(result1, result2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamArchiveNames_kMmD0() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    Set<String> expected = new HashSet<>(Arrays.asList("AR", "ARJ", "ZIP", "TAR", "JAR", "CPIO", "DUMP", "SEVEN_Z"));
    Set<String> actual = archiveStreamFactory.getInputStreamArchiveNames();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_ojrY0_1() throws Exception {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveInputStreamProviders_ojrY0_2() throws Exception {
    SortedMap<String, ArchiveStreamProvider> providers = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOutputStreamArchiveNames_mPni0() throws Exception {
    ArchiveStreamFactory factory = new ArchiveStreamFactory();
    Set<String> expected = new HashSet<>(Arrays.asList("AR", "ZIP", "TAR", "JAR", "CPIO", "SEVEN_Z"));
    Set<String> actual = factory.getOutputStreamArchiveNames();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_NullInputStream_ThrowsIllegalArgumentException_rSrs0() throws Exception {
    assertThrows(IllegalArgumentException.class, () -> ArchiveStreamFactory.detect(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ZipSignature_ReturnsZip_JTvT2() throws ArchiveException {
    byte[] zipSignature = new byte[] { 'P', 'K', 3, 4 };
    InputStream in = new ByteArrayInputStream(zipSignature);
    assertEquals("ZIP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_JarSignature_ReturnsJar_QrGa3() throws ArchiveException {
    byte[] jarSignature = new byte[] { 'P', 'K', 3, 4 };
    InputStream in = new ByteArrayInputStream(jarSignature);
    assertEquals("JAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ArSignature_ReturnsAr_TaAr4() throws ArchiveException {
    byte[] arSignature = new byte[] { '!', '<', 'a', 'r', 'c', 'h', '>', '\n' };
    InputStream in = new ByteArrayInputStream(arSignature);
    assertEquals("AR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_CpioSignature_ReturnsCpio_Qgky5() throws ArchiveException {
    byte[] cpioSignature = new byte[] { '0', '7', '0', '7', '0', '1' };
    InputStream in = new ByteArrayInputStream(cpioSignature);
    assertEquals("CPIO", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ArjSignature_ReturnsArj_Ixpr6() throws ArchiveException {
    byte[] arjSignature = new byte[] { 0x60, (byte) 0xEA };
    InputStream in = new ByteArrayInputStream(arjSignature);
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_SevenZSignature_ReturnsSevenZ_pLOt7() throws ArchiveException {
    byte[] sevenZSignature = new byte[] { '7', 'z', (byte) 0xBC, (byte) 0xAF, 0x27, 0x1C };
    InputStream in = new ByteArrayInputStream(sevenZSignature);
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_DumpSignature_ReturnsDump_EeTV8() throws ArchiveException {
    byte[] dumpSignature = new byte[] { (byte) 0x80, (byte) 0x73, (byte) 0x75, (byte) 0x73 };
    InputStream in = new ByteArrayInputStream(dumpSignature);
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_TarSignature_ReturnsTar_xakF9() throws ArchiveException {
    byte[] tarSignature = new byte[512]; // TAR headers are 512 bytes
    tarSignature[257] = 'u';
    tarSignature[258] = 's';
    tarSignature[259] = 't';
    tarSignature[260] = 'a';
    tarSignature[261] = 'r';
    InputStream in = new ByteArrayInputStream(tarSignature);
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_UnknownSignature_ThrowsArchiveException_HmLu10() throws Exception {
    byte[] unknownSignature = new byte[] { 0x01, 0x02, 0x03, 0x04 };
    InputStream in = new ByteArrayInputStream(unknownSignature);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_EmptyStream_ThrowsArchiveException_CLly11() throws Exception {
    InputStream in = new ByteArrayInputStream(new byte[0]);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ShortSignature_ThrowsArchiveException_Cdpy12() throws Exception {
    byte[] shortSignature = new byte[] { 'P', 'K' }; // Too short for a valid ZIP
    InputStream in = new ByteArrayInputStream(shortSignature);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_CorruptedZipSignature_ThrowsArchiveException_kjeR13() throws Exception {
    byte[] corruptedZipSignature = new byte[] { 'P', 'K', 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    InputStream in = new ByteArrayInputStream(corruptedZipSignature);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_CorruptedTarSignature_ThrowsArchiveException_FGBb14() throws Exception {
    byte[] corruptedTarSignature = new byte[512]; // TAR headers are 512 bytes
    corruptedTarSignature[257] = 'u';
    corruptedTarSignature[258] = 's';
    corruptedTarSignature[259] = 't';
    corruptedTarSignature[260] = 'a';
    corruptedTarSignature[261] = 'r';
    corruptedTarSignature[262] = 0; // Corrupting the signature
    InputStream in = new ByteArrayInputStream(corruptedTarSignature);
    assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ValidArjSignature_ReturnsArj_HDHI15() throws ArchiveException {
    byte[] validArjSignature = new byte[] { 0x60, (byte) 0xEA };
    InputStream in = new ByteArrayInputStream(validArjSignature);
    assertEquals("ARJ", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ValidSevenZSignature_ReturnsSevenZ_kKIR16() throws ArchiveException {
    byte[] validSevenZSignature = new byte[] { '7', 'z', (byte) 0xBC, (byte) 0xAF, 0x27, 0x1C };
    InputStream in = new ByteArrayInputStream(validSevenZSignature);
    assertEquals("SEVEN_Z", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ValidDumpSignature_ReturnsDump_zDBf17() throws ArchiveException {
    byte[] validDumpSignature = new byte[] { (byte) 0x80, (byte) 0x73, (byte) 0x75, (byte) 0x73 };
    InputStream in = new ByteArrayInputStream(validDumpSignature);
    assertEquals("DUMP", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDetect_ValidTarSignature_ReturnsTar_PoEm18() throws ArchiveException {
    byte[] validTarSignature = new byte[512]; // TAR headers are 512 bytes
    validTarSignature[257] = 'u';
    validTarSignature[258] = 's';
    validTarSignature[259] = 't';
    validTarSignature[260] = 'a';
    validTarSignature[261] = 'r';
    InputStream in = new ByteArrayInputStream(validTarSignature);
    assertEquals("TAR", ArchiveStreamFactory.detect(in));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersNotNull_WexA0() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetArchiveOutputStreamProvidersWithEncodingNotNull_ujfV1() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
    SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveOutputStreamProviders();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntryEncoding_DefaultConstructor_qxfM0() throws Exception {
    ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
    String expected = null; // Assuming default constructor sets encoding to null
    assertEquals(expected, archiveStreamFactory.getEntryEncoding());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_RYMy0_1() throws Exception {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableArchiveOutputStreamProviders_RYMy0_2() throws Exception {
    SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
    assertFalse(result.isEmpty());}
}