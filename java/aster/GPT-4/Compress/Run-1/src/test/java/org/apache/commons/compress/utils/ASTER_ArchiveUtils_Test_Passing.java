/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_SameArraysNoOffset_PeWN0() {
        byte[] array1 = {1, 2, 3, 4};
        byte[] array2 = {1, 2, 3, 4};
        assertTrue(ArchiveUtils.isEqual(array1, 0, array1.length, array2, 0, array2.length, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_SameArraysWithOffset_YeQP1() {
        byte[] array1 = {0, 1, 2, 3, 4, 0};
        byte[] array2 = {1, 2, 3, 4};
        assertTrue(ArchiveUtils.isEqual(array1, 1, 4, array2, 0, 4, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_DifferentArrays_WWGw2() {
        byte[] array1 = {1, 2, 3, 4};
        byte[] array2 = {1, 2, 3, 5};
        assertFalse(ArchiveUtils.isEqual(array1, 0, array1.length, array2, 0, array2.length, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_IgnoreTrailingNullsTrue_GNmf3() {
        byte[] array1 = {1, 2, 3, 4, 0, 0};
        byte[] array2 = {1, 2, 3, 4};
        assertTrue(ArchiveUtils.isEqual(array1, 0, 6, array2, 0, 4, true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_IgnoreTrailingNullsFalse_QmKs4() {
        byte[] array1 = {1, 2, 3, 4, 0, 0};
        byte[] array2 = {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(array1, 0, 6, array2, 0, 4, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_LengthMismatch_KbUu5() {
        byte[] array1 = {1, 2, 3, 4, 5};
        byte[] array2 = {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(array1, 0, 5, array2, 0, 4, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_EmptyArrays_GQxg6() {
        byte[] array1 = {};
        byte[] array2 = {};
        assertTrue(ArchiveUtils.isEqual(array1, 0, 0, array2, 0, 0, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_NonZeroOffset_wcLo7() {
        byte[] array1 = {0, 0, 1, 2, 3, 4};
        byte[] array2 = {1, 2, 3, 4};
        assertTrue(ArchiveUtils.isEqual(array1, 2, 4, array2, 0, 4, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_TrailingNonZerosIgnored_rFoR8() {
        byte[] array1 = {1, 2, 3, 4, 5, 6};
        byte[] array2 = {1, 2, 3, 4};
        assertFalse(ArchiveUtils.isEqual(array1, 0, 6, array2, 0, 4, true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_TrailingZerosIgnored_CyYp9() {
        byte[] array1 = {1, 2, 3, 4, 0, 0};
        byte[] array2 = {1, 2, 3, 4, 0, 0};
        assertTrue(ArchiveUtils.isEqual(array1, 0, 6, array2, 0, 6, true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithIdenticalArrays_hxmk0() {
    byte[] array1 = new byte[] {1, 2, 3, 4};
    byte[] array2 = new byte[] {1, 2, 3, 4};
    assertTrue(ArchiveUtils.isEqual(array1, array2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiBytes_jHUz0() {
    String testString = "Hello";
    byte[] expectedBytes = new byte[] {72, 101, 108, 108, 111};
    byte[] resultBytes = ArchiveUtils.toAsciiBytes(testString);
    assertArrayEquals(expectedBytes, resultBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeNormalString_RLZC0() {
    String result = ArchiveUtils.sanitize("HelloWorld");
    assertEquals("HelloWorld", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeStringWithSpecialChars_LKNu1() {
    String result = ArchiveUtils.sanitize("Hello@World!");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeStringWithControlChars_IBzS2() {
    String result = ArchiveUtils.sanitize("Hello\nWorld\t");
    assertEquals("Hello?World?", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeStringExceedingMaxLength_OULd3() {
    String longString = "ThisIsAVeryLongStringThatExceedsTheMaximumAllowedLengthForSanitization";
    String result = ArchiveUtils.sanitize(longString);
    assertEquals("ThisIsAVeryLongStringThatExceedsTheMaximumAllowedLengthForSanitization", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeEmptyString_LwTS4() {
    String result = ArchiveUtils.sanitize("");
    assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeStringWithUnicodeSpecials_RhEK5() {
    String result = ArchiveUtils.sanitize("Hello\uFFF8World");
    assertEquals("Hello?World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeStringWithISOControl_quDy6() {
    String result = ArchiveUtils.sanitize("Hello\u0001World");
    assertEquals("Hello?World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithTrailingNullsIgnored_vNIQ0() {
    byte[] buffer1 = new byte[] {1, 2, 3, 0, 0};
    byte[] buffer2 = new byte[] {1, 2, 3};
    assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_AllZeros_mGHh0() {
    byte[] array = new byte[]{0, 0, 0, 0, 0};
    boolean result = ArchiveUtils.isArrayZero(array, array.length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_NotAllZeros_ZmEm1() {
    byte[] array = new byte[]{0, 1, 0, 0, 0};
    boolean result = ArchiveUtils.isArrayZero(array, array.length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsArrayZero_EmptyArray_bDIf2() {
    byte[] array = new byte[]{};
    boolean result = ArchiveUtils.isArrayZero(array, array.length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_withValidAsciiBytes_fZik0() {
    byte[] inputBytes = new byte[]{72, 101, 108, 108, 111}; // ASCII for "Hello"
    String result = ArchiveUtils.toAsciiString(inputBytes);
    assertEquals("Hello", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsEqualWithIdenticalArrays_qsPS0() {
    byte[] buffer1 = {1, 2, 3, 4, 5};
    byte[] buffer2 = {1, 2, 3, 4, 5};
    assertTrue(ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchAsciiBuffer_ExactMatch_zDoo0() {
    String expected = "Hello";
    byte[] buffer = "Hello".getBytes();
    assertTrue(ArchiveUtils.matchAsciiBuffer(expected, buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToAsciiString_ValidInput_ReturnsAsciiString_LBtI0() {
    byte[] inputBytes = {65, 66, 67, 68}; // ASCII for 'ABCD'
    int offset = 1;
    int length = 2;
    String result = ArchiveUtils.toAsciiString(inputBytes, offset, length);
    assertEquals("BC", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNullBothNull_cKdL0() {
        byte[] buffer1 = null;
        byte[] buffer2 = null;
        assertTrue(ArchiveUtils.isEqualWithNull(buffer1, 0, 0, buffer2, 0, 0));
    }
}