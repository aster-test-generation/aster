/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForPathsNullPaths_Kcge2() {
    OpenOption[] options = new OpenOption[]{StandardOpenOption.READ};
    assertThrows(NullPointerException.class, () -> {
        ZipSplitReadOnlySeekableByteChannel.forPaths(null, options);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_ValidFile_EyDg0_1() throws IOException {
    File lastSegmentFile = new File("valid_last_segment.zip");
    if (!lastSegmentFile.exists()) {
        lastSegmentFile.createNewFile(); // Ensure the file exists to avoid NoSuchFileException
    }
    SeekableByteChannel resultChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertNotNull(resultChannel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegment_ValidFile_EyDg0_2() throws IOException {
    File lastSegmentFile = new File("valid_last_segment.zip");
    if (!lastSegmentFile.exists()) {
        // Create a dummy file to simulate the existence of a valid last segment
        lastSegmentFile.createNewFile();
    }
    SeekableByteChannel resultChannel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
    assertTrue(resultChannel.isOpen());
    lastSegmentFile.delete(); // Clean up the created file
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildFromLastSplitSegmentWithNoSplitFiles_wscZ2_YiIp0() throws IOException {
    Path path = Files.createTempFile("empty", ".zip");
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(path.toFile());
    assertNotNull(channel);
    Files.delete(path);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithSingleFile_LoPb0_bIQG0() throws IOException {
    File tempFile = File.createTempFile("test", ".zip");
    tempFile.deleteOnExit();
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(tempFile);
    assertNotNull(channel, "Channel should not be null for a valid file");
    channel.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithMultipleFiles_LXya1_DZFM0() throws IOException {
    File tempFile1 = File.createTempFile("test1", ".zip");
    File tempFile2 = File.createTempFile("test2", ".zip");
    tempFile1.deleteOnExit();
    tempFile2.deleteOnExit();
    SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(tempFile2);
    assertNotNull(channel, "Channel should not be null for valid files");
    channel.close();
}
}