/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SignatureAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_qZdK0() throws Exception {
    CPUTF8 utf8 = new CPUTF8("ExampleSignature");
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    assertEquals("Signature: ExampleSignature", signatureAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ggAe0_1() throws Exception {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    SignatureAttribute signatureAttribute = new SignatureAttribute(attributeName);
    ClassFileEntry[] result = signatureAttribute.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ggAe0_2() throws Exception {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    SignatureAttribute signatureAttribute = new SignatureAttribute(attributeName);
    ClassFileEntry[] result = signatureAttribute.getNestedClassFileEntries();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ggAe0_4() throws Exception {
    CPUTF8 attributeName = new CPUTF8("attributeName");
    SignatureAttribute signatureAttribute = new SignatureAttribute(attributeName);
    ClassFileEntry[] result = signatureAttribute.getNestedClassFileEntries();
    assertEquals(signatureAttribute, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsTwo_Dqva0() throws Exception {
    CPUTF8 utf8 = new CPUTF8("test");
    SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
    assertEquals(2, signatureAttribute.getLength());
}
}