/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_Oxlj0() throws Exception {
        CPUTF8 name = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        assertTrue(attribute.equals(attribute));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_fntz1_1() throws Exception {
        CPUTF8 name1 = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute1 = new SourceFileAttribute(name1);
        CPUTF8 name2 = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute2 = new SourceFileAttribute(name2);
        assertTrue(attribute1.equals(attribute2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Symmetric_fntz1_2() throws Exception {
        CPUTF8 name1 = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute1 = new SourceFileAttribute(name1);
        CPUTF8 name2 = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute2 = new SourceFileAttribute(name2);
        assertTrue(attribute2.equals(attribute1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ILqh2() throws Exception {
        CPUTF8 name = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        assertFalse(attribute.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_eivt3() throws Exception {
        CPUTF8 name = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        Object other = new Object();
        assertFalse(attribute.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_mIpe4() throws Exception {
        CPUTF8 name1 = new CPUTF8("SourceFile.java");
        SourceFileAttribute attribute1 = new SourceFileAttribute(name1);
        CPUTF8 name2 = new CPUTF8("DifferentFile.java");
        SourceFileAttribute attribute2 = new SourceFileAttribute(name2);
        assertFalse(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_qTfW0() throws Exception {
    CPUTF8 utf8 = new CPUTF8("Example.java");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
    assertEquals("SourceFile: Example.java", sourceFileAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_lxif0_2() throws Exception {
    CPUTF8 attributeName = new CPUTF8("AttributeName");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(attributeName);
    ClassFileEntry[] result = sourceFileAttribute.getNestedClassFileEntries();
    assertEquals(attributeName, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLengthReturnsCorrectValue_iCIC0() throws Exception {
    CPUTF8 name = new CPUTF8("SourceFile");
    SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
    assertEquals(2, sourceFileAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSourceFileAttribute_OdaZ0() throws Exception {
        CPUTF8 name = new CPUTF8("SourceFile");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
        assertTrue(sourceFileAttribute.isSourceFileAttribute());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_lXeA0() throws Exception {
        CPUTF8 name = new CPUTF8("Example.java");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(name);
        int expectedHashCode = 31 * 1 + name.hashCode(); // Assuming super.hashCode() returns 1 for simplicity
        assertEquals(expectedHashCode, sourceFileAttribute.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_uUFR1() throws Exception {
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(null);
        int expectedHashCode = 31 * 1; // Assuming super.hashCode() returns 1 for simplicity
        assertEquals(expectedHashCode, sourceFileAttribute.hashCode());
    }
}