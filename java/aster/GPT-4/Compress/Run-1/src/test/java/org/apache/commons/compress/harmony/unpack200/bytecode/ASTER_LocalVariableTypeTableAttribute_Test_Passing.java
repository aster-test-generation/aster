/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_yQxb0() {
    int localVariableTypeTableLength = 5;
    int[] startPcs = new int[localVariableTypeTableLength];
    int[] lengths = new int[localVariableTypeTableLength];
    CPUTF8[] names = new CPUTF8[localVariableTypeTableLength];
    CPUTF8[] signatures = new CPUTF8[localVariableTypeTableLength];
    int[] indexes = new int[localVariableTypeTableLength];
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    int expectedLength = 2 + 10 * localVariableTypeTableLength;
    assertEquals(expectedLength, attribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_alOK0_qZMD0() {
    int localVariableTypeTableLength = 3;
    int[] startPcs = {0, 10, 20};
    int[] lengths = {5, 5, 5};
    CPUTF8[] names = {new CPUTF8("var1", 0), new CPUTF8("var2", 0), new CPUTF8("var3", 0)};
    CPUTF8[] signatures = {new CPUTF8("I", 0), new CPUTF8("LString;", 0), new CPUTF8("[I", 0)};
    int[] indexes = {1, 2, 3};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    String expected = "LocalVariableTypeTable: 3 varaibles";
    assertEquals(expected, attribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesEmpty_RYiT0_FbsZ0_1() {
    int localVariableTypeTableLength = 0;
    int[] startPcs = new int[0];
    int[] lengths = new int[0];
    CPUTF8[] names = new CPUTF8[0];
    CPUTF8[] signatures = new CPUTF8[0];
    int[] indexes = new int[0];
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesEmpty_RYiT0_FbsZ0_2() {
    int localVariableTypeTableLength = 0;
    int[] startPcs = new int[0];
    int[] lengths = new int[0];
    CPUTF8[] names = new CPUTF8[0];
    CPUTF8[] signatures = new CPUTF8[0];
    int[] indexes = new int[0];
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesNonEmpty_UdYX1_NyoG0_1() {
    int localVariableTypeTableLength = 2;
    int[] startPcs = {0, 1};
    int[] lengths = {2, 2};
    CPUTF8[] names = {new CPUTF8("name1", 0), new CPUTF8("name2", 1)};
    CPUTF8[] signatures = {new CPUTF8("signature1", 0), new CPUTF8("signature2", 1)};
    int[] indexes = {0, 1};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals(5, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesNonEmpty_UdYX1_NyoG0_4() {
    int localVariableTypeTableLength = 2;
    int[] startPcs = {0, 1};
    int[] lengths = {2, 2};
    CPUTF8[] names = {new CPUTF8("name1", 0), new CPUTF8("name2", 1)};
    CPUTF8[] signatures = {new CPUTF8("signature1", 0), new CPUTF8("signature2", 1)};
    int[] indexes = {0, 1};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals("name1", ((CPUTF8)result[1]).underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesNonEmpty_UdYX1_NyoG0_5() {
    int localVariableTypeTableLength = 2;
    int[] startPcs = {0, 1};
    int[] lengths = {2, 2};
    CPUTF8[] names = {new CPUTF8("name1", 0), new CPUTF8("name2", 1)};
    CPUTF8[] signatures = {new CPUTF8("signature1", 0), new CPUTF8("signature2", 1)};
    int[] indexes = {0, 1};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals("signature1", ((CPUTF8)result[2]).underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesNonEmpty_UdYX1_NyoG0_6() {
    int localVariableTypeTableLength = 2;
    int[] startPcs = {0, 1};
    int[] lengths = {2, 2};
    CPUTF8[] names = {new CPUTF8("name1", 0), new CPUTF8("name2", 1)};
    CPUTF8[] signatures = {new CPUTF8("signature1", 0), new CPUTF8("signature2", 1)};
    int[] indexes = {0, 1};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals("name2", ((CPUTF8)result[3]).underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntriesNonEmpty_UdYX1_NyoG0_7() {
    int localVariableTypeTableLength = 2;
    int[] startPcs = {0, 1};
    int[] lengths = {2, 2};
    CPUTF8[] names = {new CPUTF8("name1", 0), new CPUTF8("name2", 1)};
    CPUTF8[] signatures = {new CPUTF8("signature1", 0), new CPUTF8("signature2", 1)};
    int[] indexes = {0, 1};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    ClassFileEntry[] result = attribute.getNestedClassFileEntries();
    assertEquals("signature2", ((CPUTF8)result[4]).underlyingString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_DXHz0_xTFN0() {
    int localVariableTypeTableLength = 3;
    int[] startPcs = {0, 10, 20};
    int[] lengths = {5, 5, 5};
    CPUTF8[] names = {new CPUTF8("var1", 0), new CPUTF8("var2", 0), new CPUTF8("var3", 0)};
    CPUTF8[] signatures = {new CPUTF8("I", 0), new CPUTF8("I", 0), new CPUTF8("I", 0)};
    int[] indexes = {1, 2, 3};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(localVariableTypeTableLength, startPcs, lengths, names, signatures, indexes);
    int[] result = attribute.getStartPCs();
    assertArrayEquals(startPcs, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRenumberWithOffsetsEndingAtBoundary_MsAA3_aGNP0() {
    int[] startPcs = {0, 5, 10};
    int[] lengths = {5, 5, 5};
    CPUTF8[] names = new CPUTF8[]{new CPUTF8("a"), new CPUTF8("b"), new CPUTF8("c")};
    CPUTF8[] signatures = new CPUTF8[]{new CPUTF8("I"), new CPUTF8("J"), new CPUTF8("D")};
    int[] indexes = {1, 2, 3};
    LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(3, startPcs, lengths, names, signatures, indexes);
    List<Integer> byteCodeOffsets = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
    try {
        attribute.renumber(byteCodeOffsets);
    } catch (Pack200Exception e) {
        fail("Pack200Exception should not be thrown");
    }
    assertArrayEquals(new int[]{5, 5, 5}, lengths);
}
}