/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExtraFieldUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeLocalFileDataData_EmptyArray_gfGF0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeLocalFileDataData(data);
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMergeCentralDirectoryData_EmptyArray_Iokm0() {
    ZipExtraField[] data = new ZipExtraField[0];
    byte[] result = ExtraFieldUtils.mergeCentralDirectoryData(data);
    assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithUnrecognizedHeaderId_oXwQ1_1() {
        ZipShort headerId = new ZipShort(new byte[]{0x12, 0x34}); // Assuming 0x1234 is an unrecognized header ID
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithUnrecognizedHeaderId_oXwQ1_2() {
        ZipShort headerId = new ZipShort(new byte[]{0x12, 0x34}); // Assuming 0x1234 is an unrecognized header ID
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertTrue(result instanceof UnrecognizedExtraField);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithUnrecognizedHeaderId_oXwQ1_3() {
        ZipShort headerId = new ZipShort(new byte[]{0x12, 0x34}); // Assuming 0x1234 is an unrecognized header ID
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertEquals(headerId, ((UnrecognizedExtraField) result).getHeaderId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldNoDefaultWithUnknownHeaderId_LSGu1_VYmz0() {
    ZipShort unknownHeaderId = new ZipShort(new byte[]{0x12, 0x34});
    ZipExtraField result = ExtraFieldUtils.createExtraFieldNoDefault(unknownHeaderId);
    assertNull(result, "Expected null for unknown header ID");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyData_NJbw0_LGzy0() {
    byte[] data = new byte[0];
    try {
        ZipExtraField[] result = ExtraFieldUtils.parse(data);
        assertNotNull(result);
        assertEquals(0, result.length);
    } catch (ZipException e) {
        fail("Should not throw exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateExtraFieldWithRecognizedHeaderId_LpJZ0_tOHf0() {
    ZipShort headerId = new ZipShort(new byte[]{0x50, 0x4b}); // Assuming 0x504B is a recognized header ID
    ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateExtraFieldWithUnrecognizedHeaderId_oXwQ1() {
        ZipShort headerId = new ZipShort(new byte[]{0x12, 0x34}); // Assuming 0x1234 is an unrecognized header ID
        ZipExtraField result = ExtraFieldUtils.createExtraField(headerId);
        assertNotNull(result);
        assertTrue(result instanceof UnrecognizedExtraField);
        assertEquals(headerId, ((UnrecognizedExtraField) result).getHeaderId());
    }
}