/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSlidingDictionarySize_QUnA0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    int expected = 0; // Assuming default value or set some expected value based on context
    assertEquals(expected, generalPurposeBit.getSlidingDictionarySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_OtRC0() throws Exception {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertTrue(bit.equals(bit));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_rzFu1() throws Exception {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    assertFalse(bit.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_ETJk2() throws Exception {
    GeneralPurposeBit bit = new GeneralPurposeBit();
    Object other = new Object();
    assertFalse(bit.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithIdenticalProperties_PrYJ3() throws Exception {
    GeneralPurposeBit bit1 = new GeneralPurposeBit();
    GeneralPurposeBit bit2 = new GeneralPurposeBit();
    assertTrue(bit1.equals(bit2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAllFlagsZero_MOSQ0_5() throws Exception {
        byte[] data = new byte[] {0x00, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAllFlagsZero_MOSQ0_6() throws Exception {
        byte[] data = new byte[] {0x00, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDataDescriptorFlag_RPLC1_5() throws Exception {
        byte[] data = new byte[] {0x08, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDataDescriptorFlag_RPLC1_6() throws Exception {
        byte[] data = new byte[] {0x08, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUTF8NamesFlag_zAlM2_5() throws Exception {
        byte[] data = new byte[] {0x00, 0x08};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseUTF8NamesFlag_zAlM2_6() throws Exception {
        byte[] data = new byte[] {0x00, 0x08};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStrongEncryptionFlag_NzkH3_5() throws Exception {
        byte[] data = new byte[] {0x40, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStrongEncryptionFlag_NzkH3_6() throws Exception {
        byte[] data = new byte[] {0x40, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEncryptionFlag_vGiH4_5() throws Exception {
        byte[] data = new byte[] {0x01, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseEncryptionFlag_vGiH4_6() throws Exception {
        byte[] data = new byte[] {0x01, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlag_oVhU5_5() throws Exception {
        byte[] data = new byte[] {0x02, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(8192, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSlidingDictionarySizeFlag_oVhU5_6() throws Exception {
        byte[] data = new byte[] {0x02, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(2, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlag_IdsJ6_5() throws Exception {
        byte[] data = new byte[] {0x04, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(4096, result.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseNumberOfShannonFanoTreesFlag_IdsJ6_6() throws Exception {
        byte[] data = new byte[] {0x04, 0x00};
        GeneralPurposeBit result = GeneralPurposeBit.parse(data, 0);
        assertEquals(3, result.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfShannonFanoTrees_aURp0() throws Exception {
    GeneralPurposeBit gpBit = new GeneralPurposeBit();
    assertEquals(0, gpBit.getNumberOfShannonFanoTrees());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeReturnsNonNullResult_ZlNd0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = generalPurposeBit.encode();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesUTF8ForNames_LlvW0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    boolean result = generalPurposeBit.usesUTF8ForNames();
    assertEquals(true, result); // Assuming the expected value should be true for this test case
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUsesDataDescriptor_gjOS0() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    boolean result = generalPurposeBit.usesDataDescriptor();
    assertEquals(true, result); // Assuming the expected result should be true for this test case
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneThrowsException_fKjK0() throws Exception {
    GeneralPurposeBit gpBit = new GeneralPurposeBit();
    assertThrows(UnsupportedOperationException.class, gpBit::clone);
}
}