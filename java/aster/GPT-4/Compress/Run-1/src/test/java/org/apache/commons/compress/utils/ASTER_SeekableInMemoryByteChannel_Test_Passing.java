/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayReturnsExactData_dIPB0() {
    byte[] initialData = new byte[] {1, 2, 3, 4, 5};
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(initialData);
    byte[] returnedData = channel.array();
    assertArrayEquals(initialData, returnedData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToZero_tZJS0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(0);
    assertEquals(0, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToSmallerSize_KSyP1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(5);
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToLargerSize_rnHi2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.truncate(15);
    assertEquals(10, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToNegativeSizeThrowsException_rCPq3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertThrows(IllegalArgumentException.class, () -> channel.truncate(-1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateToSizeExceedingMaxIntThrowsException_ovQw4() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertThrows(IllegalArgumentException.class, () -> channel.truncate((long) Integer.MAX_VALUE + 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWhenChannelIsNewlyCreated_KDOi0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWhenChannelIsCreatedWithInitialData_aSET1() {
    byte[] data = {1, 2, 3};
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithExactSizeBuffer_fRVu0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[10]);
    int writtenBytes = channel.write(buffer);
    assertEquals(10, writtenBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithBufferLargerThanInitialSize_TIcJ1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(5);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[10]);
    int writtenBytes = channel.write(buffer);
    assertEquals(10, writtenBytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithClosedChannel_DiNO2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    ByteBuffer buffer = ByteBuffer.wrap(new byte[5]);
    assertThrows(ClosedChannelException.class, () -> channel.write(buffer));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithBufferCausingResizeBeyondMaxInt_rubv3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(Integer.MAX_VALUE - 1);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[10]);
    int writtenBytes = channel.write(buffer);
    assertEquals(2, writtenBytes); // Only 2 bytes can be written before hitting Integer.MAX_VALUE
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithoutResize_AEBD0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
    int written = channel.write(buffer);
    assertEquals(4, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithResize_mqUm1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(2);
    ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
    int written = channel.write(buffer);
    assertEquals(4, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithMaximumIntResize_HtsJ2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    ByteBuffer buffer = ByteBuffer.allocate(Integer.MAX_VALUE);
    buffer.position(Integer.MAX_VALUE - 1);
    buffer.put((byte) 1);
    buffer.flip();
    int written = channel.write(buffer);
    assertEquals(1, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithExactBuffer_nxSI3() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3, 4});
    ByteBuffer buffer = ByteBuffer.wrap(new byte[]{5, 6, 7, 8});
    int written = channel.write(buffer);
    assertEquals(4, written);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithinBounds_nmSa0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        SeekableByteChannel result = channel.position(500);
        assertEquals(500, result.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionAtUpperBound_UgRo1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        SeekableByteChannel result = channel.position(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, result.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPosition_initialPosition_aBkh0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
    assertEquals(0, channel.position());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithEmptyBuffer_mpib0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3, 4, 5});
        ByteBuffer buffer = ByteBuffer.allocate(0);
        int bytesRead = channel.read(buffer);
        assertEquals(0, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        assertEquals(3, bytesRead);
        buffer.flip();
        assertEquals(10, buffer.get());
        assertEquals(20, buffer.get());
        assertEquals(30, buffer.get());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        assertEquals(5, bytesRead);
        buffer.flip();
        assertEquals(5, buffer.get());
        assertEquals(6, buffer.get());
        assertEquals(7, buffer.get());
        assertEquals(8, buffer.get());
        assertEquals(9, buffer.get());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSizeWithInitialData_MhqH0() {
    byte[] data = {1, 2, 3, 4, 5};
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
    assertEquals(5, channel.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(3, bytesRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithData_bICv1_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{10, 20, 30, 40, 50});
        ByteBuffer buffer = ByteBuffer.allocate(3);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(10, buffer.get());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(5, bytesRead);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadBeyondEnd_KPiv2_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{5, 6, 7, 8, 9});
        ByteBuffer buffer = ByteBuffer.allocate(10);
        int bytesRead = channel.read(buffer);
        buffer.flip();
        assertEquals(5, buffer.get());}
}