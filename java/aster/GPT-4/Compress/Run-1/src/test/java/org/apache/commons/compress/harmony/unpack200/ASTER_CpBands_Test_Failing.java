/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.unpack200.bytecode.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorNameInts_HBMc0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] expected = new int[] {}; // Assuming default or initial state is an empty array
    assertArrayEquals(expected, cpBands.getCpDescriptorNameInts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpIntegerValue_NewValue_eIFh0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPInteger result = cpBands.cpIntegerValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpIntegerValue_ExistingValue_Gymf1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPInteger firstCall = cpBands.cpIntegerValue(1);
        CPInteger secondCall = cpBands.cpIntegerValue(1);
        assertEquals(firstCall, secondCall);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpFieldClass_jfAi0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = {}; // Assuming expected default or initialized value
    assertArrayEquals(expected, cpBands.getCpFieldClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpClassReturnsCorrectArray_uvaE0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[]{"class1", "class2", "class3"};
    assertArrayEquals(expected, cpBands.getCpClass());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_SGcy0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String testString = "test";
        CPUTF8 result = cpBands.cpUTF8Value(testString);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpMethodDescriptor_EniW0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[] {}; // Assuming expected default or known state
    assertArrayEquals(expected, cpBands.getCpMethodDescriptor());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_mKVI0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Example index
        CPFieldRef result = cpBands.cpFieldValue(index);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithoutIndex_PZbK0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("newString", false);
        assertEquals(-1, result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_ExistingStringWithoutIndex_Xzhl1_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value("existingString", false); // Pre-insert
        CPUTF8 result = cpBands.cpUTF8Value("existingString", false);
        assertEquals("existingString".hashCode(), result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndUTF8Found_Dojw2_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("indexedString", 1);
        cpBands.cpUTF8Value("indexedString", true); // Simulate insertion with index
        CPUTF8 result = cpBands.cpUTF8Value("indexedString", true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndUTF8Found_Dojw2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("indexedString", 1);
        cpBands.cpUTF8Value("indexedString", true); // Simulate insertion with index
        CPUTF8 result = cpBands.cpUTF8Value("indexedString", true);
        assertEquals(expected.hashCode(), result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndSignatureFound_AWEN3_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("signatureString", 2);
        cpBands.cpUTF8Value("signatureString", true); // Simulate insertion with signature index
        CPUTF8 result = cpBands.cpUTF8Value("signatureString", true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndSignatureFound_AWEN3_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("signatureString", 2);
        cpBands.cpUTF8Value("signatureString", true); // Simulate insertion with signature index
        CPUTF8 result = cpBands.cpUTF8Value("signatureString", true);
        assertEquals(expected.hashCode(), result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_StringNotFoundWithIndexSearch_YHCt4_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("notFoundString", true);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_StringNotFoundWithIndexSearch_YHCt4_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("notFoundString", true);
        assertEquals(-1, result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NullStringWithoutIndex_gipB5_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value(null, false);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NullStringWithoutIndex_gipB5_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value(null, false);
        assertEquals(-1, result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpInt_Eqba0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] expected = {}; // Assuming expected result is an empty array
    assertArrayEquals(expected, cpBands.getCpInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValueWithValidIndex_ZuMY0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPLong result = cpBands.cpLongValue(1);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValueWithNewIndex_REsP1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPLong result = cpBands.cpLongValue(2);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_lCFt0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPClass result = cpBands.cpClassValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValue_ValidIndex_KjUT0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPFloat result = cpBands.cpFloatValue(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValue_InvalidIndex_ENlw1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        try {
            CPFloat result = cpBands.cpFloatValue(-1);
            assertNull(result);
        } catch (ArrayIndexOutOfBoundsException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithValidIndex_iEkN0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this is a valid index and cpSignatureInts[index] != -1
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithValidIndex_iEkN0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this is a valid index and cpSignatureInts[index] != -1
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithNegativeIndexHandling_vCDU1_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 1; // Assuming cpSignatureInts[index] == -1 and index + signatureOffset is valid
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithNegativeIndexHandling_vCDU1_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 1; // Assuming cpSignatureInts[index] == -1 and index + signatureOffset is valid
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithUnmappedString_MNeB2_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 2; // Assuming cpSignature[index] is not in stringsToCPUTF8 map
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithUnmappedString_MNeB2_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 2; // Assuming cpSignature[index] is not in stringsToCPUTF8 map
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpDescriptorTypeInts_bhwv0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    int[] expected = new int[]{/* expected values */};
    assertArrayEquals(expected, cpBands.getCpDescriptorTypeInts());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpLongReturnsCorrectArray_ZKro0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    long[] expected = new long[]{/* expected values */};
    assertArrayEquals(expected, cpBands.getCpLong());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCpSignature_ZmEa0() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    String[] expected = new String[] {}; // Assuming expected values here
    assertArrayEquals(expected, cpBands.getCpSignature());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpStringValue_NewString_njTF0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this is the first index and no entries exist yet
        CPString result = cpBands.cpStringValue(index);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValueWithNewIndex_REsP1_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    CPUTF8 result = cpBands.cpUTF8Value(2);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithoutIndex_PZbK0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("newString", false);
        assertNotNull(result);
        assertEquals(-1, result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_ExistingStringWithoutIndex_Xzhl1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value("existingString", false); // Pre-insert
        CPUTF8 result = cpBands.cpUTF8Value("existingString", false);
        assertNotNull(result);
        assertEquals("existingString".hashCode(), result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndUTF8Found_Dojw2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("indexedString", 1);
        cpBands.cpUTF8Value("indexedString", true); // Simulate insertion with index
        CPUTF8 result = cpBands.cpUTF8Value("indexedString", true);
        assertNotNull(result);
        assertEquals(expected.hashCode(), result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithIndexSearchAndSignatureFound_AWEN3() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 expected = new CPUTF8("signatureString", 2);
        cpBands.cpUTF8Value("signatureString", true); // Simulate insertion with signature index
        CPUTF8 result = cpBands.cpUTF8Value("signatureString", true);
        assertNotNull(result);
        assertEquals(expected.hashCode(), result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_StringNotFoundWithIndexSearch_YHCt4() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("notFoundString", true);
        assertNotNull(result);
        assertEquals(-1, result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NullStringWithoutIndex_gipB5() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value(null, false);
        assertNotNull(result);
        assertEquals(-1, result.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithValidIndex_iEkN0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this is a valid index and cpSignatureInts[index] != -1
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithNegativeIndexHandling_vCDU1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 1; // Assuming cpSignatureInts[index] == -1 and index + signatureOffset is valid
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValueWithUnmappedString_MNeB2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 2; // Assuming cpSignature[index] is not in stringsToCPUTF8 map
        CPUTF8 result = cpBands.cpSignatureValue(index);
        assertNotNull(result);
        assertEquals(result.hashCode(), cpBands.cpSignatureValue(index).hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpStringValue_NewString_njTF0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this is the first index and no entries exist yet
        CPString result = cpBands.cpStringValue(index);
        assertNotNull(result);
        assertEquals(result, cpBands.cpStringValue(index)); // Check if it returns the same instance on subsequent calls
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpStringValue_ExistingString_YZhX1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int index = 0; // Assuming this index has been initialized already
        CPString firstCall = cpBands.cpStringValue(index);
        CPString secondCall = cpBands.cpStringValue(index);
        assertNotNull(secondCall);
        assertSame(firstCall, secondCall); // Check if the same instance is returned for existing entries
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewEntry_HVVq0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value(0);
        assertNotNull(result);
        assertEquals(0, result.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_ExistingEntryLowerIndex_CQny1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value(5); // Assume this sets global index to 5
        CPUTF8 result = cpBands.cpUTF8Value(3);
        assertNotNull(result);
        assertEquals(3, result.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_ExistingEntryHigherIndex_Fszg2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value(2); // Assume this sets global index to 2
        CPUTF8 result = cpBands.cpUTF8Value(4);
        assertNotNull(result);
        assertEquals(2, result.getGlobalIndex());
    }
}