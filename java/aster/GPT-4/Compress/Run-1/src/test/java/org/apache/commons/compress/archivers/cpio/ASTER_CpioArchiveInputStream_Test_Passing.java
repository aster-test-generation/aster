/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesTrueForOldAscii_jCDZ0() {
        byte[] signature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x31};
        assertTrue(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesTrueForOldAsciiVariant2_pneM1() {
        byte[] signature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x32};
        assertTrue(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesTrueForOldAsciiVariant3_JVsG2() {
        byte[] signature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x37};
        assertTrue(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesTrueForNewAscii_kMnq3() {
        byte[] signature = {0x71, (byte) 0xc7};
        assertFalse(CpioArchiveInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesTrueForNewAsciiReversed_HKRB4() {
        byte[] signature = {(byte) 0xc7, 0x71};
        assertFalse(CpioArchiveInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForShortLength_nURS5() {
        byte[] signature = {0x30, 0x37};
        assertFalse(CpioArchiveInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForIncorrectSignature_EVYj6() {
        byte[] signature = {0x31, 0x32, 0x33, 0x34, 0x35, 0x36};
        assertFalse(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForIncorrectStart_jkWE7() {
        byte[] signature = {0x31, 0x37, 0x30, 0x37, 0x30, 0x31};
        assertFalse(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForIncorrectMiddle_bUVd8() {
        byte[] signature = {0x30, 0x37, 0x31, 0x37, 0x30, 0x31};
        assertFalse(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForIncorrectEnd_IIsx9() {
        byte[] signature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x33};
        assertFalse(CpioArchiveInputStream.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForNonMatchingNewFormat_iRsA10() {
        byte[] signature = {0x71, 0x30};
        assertFalse(CpioArchiveInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForNonMatchingNewFormatReversed_jLCg11() {
        byte[] signature = {0x30, 0x71};
        assertFalse(CpioArchiveInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForInvalidLength_YhEP12() {
        byte[] signature = {0x30, 0x37, 0x30, 0x37, 0x30, 0x31};
        assertFalse(CpioArchiveInputStream.matches(signature, 5));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesFalseForEmptySignature_qacO13() {
        byte[] signature = {};
        assertFalse(CpioArchiveInputStream.matches(signature, 0));
    }
}