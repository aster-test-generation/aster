/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetZstandard_eFuF0() {
    assertEquals("zstd", CompressorStreamFactory.getZstandard());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_InitialCall_wdWS0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_InitialCall_wdWS0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorInputStreamProviders();
    assertFalse(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_SubsequentCall_kWhY1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> firstCallResult = factory.getCompressorInputStreamProviders();
    SortedMap<String, CompressorStreamProvider> secondCallResult = factory.getCompressorInputStreamProviders();
    assertSame(firstCallResult, secondCallResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBzip2_OWrs0() {
    assertEquals("bzip2", CompressorStreamFactory.getBzip2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_InitialCall_MGVc0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_InitialCall_MGVc0_2() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorOutputStreamProviders();
    assertFalse(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_SubsequentCall_DvTj1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
    SortedMap<String, CompressorStreamProvider> firstCall = factory.getCompressorOutputStreamProviders();
    SortedMap<String, CompressorStreamProvider> secondCall = factory.getCompressorOutputStreamProviders();
    assertSame(firstCall, secondCall);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInputStreamCompressorNames_PFZQ0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    Set<String> expectedCompressors = new HashSet<>(Arrays.asList("snappy-raw", "xz", "snappy-framed", "bzip2", "lz4-framed", "deflate64", "br", "lzma", "zstd", "lz4-block", "gz", "deflate", "z", "pack200"));
    Set<String> actualCompressors = factory.getInputStreamCompressorNames();
    assertEquals(expectedCompressors, actualCompressors);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_jTzF0_1() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_jTzF0_2() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertFalse(result.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLZ4Framed_oNfl0() {
    String expected = "lz4-framed";
    String actual = CompressorStreamFactory.getLZ4Framed();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGzipReturnsCorrectValue_ywDN0() {
    assertEquals("gz", CompressorStreamFactory.getGzip());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_defaultConstructor_JdHp0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertFalse(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_trueConstructor_IuHz1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertTrue(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_falseConstructor_oagd2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        assertFalse(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_trueMemoryLimitConstructor_mSla3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertTrue(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_falseMemoryLimitConstructor_vhyN4() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        assertFalse(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_highMemoryLimit_YkjJ5() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 2048);
        assertTrue(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_lowMemoryLimit_YHXz6() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 512);
        assertFalse(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_zeroMemoryLimit_tgMk7() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
        assertTrue(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_negativeMemoryLimit_Woom8() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, -1);
        assertFalse(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressConcatenated_largeMemoryLimit_hKsu9() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, Integer.MAX_VALUE);
        assertTrue(factory.getDecompressConcatenated());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLzma_oRil0() {
    String expected = "lzma";
    String actual = CompressorStreamFactory.getLzma();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSingletonConsistency_ZDgq0() {
    CompressorStreamFactory firstInstance = CompressorStreamFactory.getSingleton();
    CompressorStreamFactory secondInstance = CompressorStreamFactory.getSingleton();
    assertSame(firstInstance, secondInstance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithNullOutputStream_DWbj1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertThrows(IllegalArgumentException.class, () -> factory.createCompressorOutputStream("GZIP", null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateCompressorOutputStreamWithNullArguments_PJel13() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    assertThrows(IllegalArgumentException.class, () -> factory.createCompressorOutputStream(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSnappyRaw_Phfm0() {
    assertEquals("snappy-raw", CompressorStreamFactory.getSnappyRaw());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDecompressUntilEOF_True_nVgD0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Boolean result = factory.getDecompressUntilEOF();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_ThrowsException_ZdBZ0_1() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Exception exception = assertThrows(IllegalStateException.class, () -> {
        factory.setDecompressConcatenated(true);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_NoException_EvYm1() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    try {
        factory.setDecompressConcatenated(true);
    } catch (IllegalStateException e) {
        fail("Should not have thrown any exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_eHta0_1() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_eHta0_2() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertFalse(providers.isEmpty());}
@Test
    public void testCreateCompressorInputStreamWithNullInputStream_PYXN15_EbMS0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertThrows(IllegalArgumentException.class, () -> factory.createCompressorInputStream("GZIP", null, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_1() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertEquals(3, map.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_2() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertTrue(map.containsKey("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_3() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertTrue(map.containsKey("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_4() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertTrue(map.containsKey("xz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_5() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertSame(factory, map.get("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_6() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertSame(factory, map.get("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutAll_QLQd0_hQpa0_7() {
    Set<String> names = new HashSet<>(Arrays.asList("gzip", "bzip2", "xz"));
    CompressorStreamFactory factory = new CompressorStreamFactory();
    TreeMap<String, CompressorStreamFactory> map = new TreeMap<>();
    map.put("gzip", factory);
    map.put("bzip2", factory);
    map.put("xz", factory);
    assertSame(factory, map.get("xz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorInputStreamProviders_InitialCall_wdWS0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorInputStreamProviders();
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressorOutputStreamProviders_InitialCall_MGVc0() {
    CompressorStreamFactory factory = new CompressorStreamFactory();
    SortedMap<String, CompressorStreamProvider> result = factory.getCompressorOutputStreamProviders();
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorOutputStreamProviders_jTzF0() {
    SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDecompressConcatenated_ThrowsException_ZdBZ0() {
    CompressorStreamFactory factory = new CompressorStreamFactory(true);
    Exception exception = assertThrows(IllegalStateException.class, () -> {
        factory.setDecompressConcatenated(true);
    });
    assertEquals("Cannot override the setting defined by the constructor", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindAvailableCompressorInputStreamProviders_eHta0() {
    SortedMap<String, CompressorStreamProvider> providers = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
    assertNotNull(providers);
    assertFalse(providers.isEmpty());
}
}