/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
public class Aster_ZipIoUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteFully_CompletesSuccessfully_zKMZ0() throws IOException {
        SeekableByteChannel mockChannel = mock(SeekableByteChannel.class);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        when(mockChannel.write(buffer)).thenReturn(4);
        ZipIoUtil.writeFully(mockChannel, buffer);
        assertFalse(buffer.hasRemaining());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteFully_HandlesPartialWrites_Jggm2() throws IOException {
        SeekableByteChannel mockChannel = mock(SeekableByteChannel.class);
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{1, 2, 3, 4});
        when(mockChannel.write(buffer)).thenReturn(2, 2);
        ZipIoUtil.writeFully(mockChannel, buffer);
        assertFalse(buffer.hasRemaining());
    }
}