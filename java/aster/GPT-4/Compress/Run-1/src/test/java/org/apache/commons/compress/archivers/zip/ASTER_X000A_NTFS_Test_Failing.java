/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLength_TkEg0_fid1() {
    X000A_NTFS ntfs = new X000A_NTFS();
    ZipShort result = ntfs.getLocalFileDataLength();
    assertEquals(34, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_UZDe0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] result = ntfs.getLocalFileDataData();
    assertNotNull(result);
    assertEquals(30, result.length); // Assuming the length from getLocalFileDataLength().getValue() is 30
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_FRYe0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    FileTime expected = FileTime.fromMillis(System.currentTimeMillis()); // Assuming current time for testing
    FileTime result = ntfs.getAccessFileTime();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataWithIncompleteData_VSOH2() {
    X000A_NTFS ntfs = new X000A_NTFS();
    byte[] data = new byte[] {
    };
    try {
        ntfs.parseFromLocalFileData(data, 0, data.length);
        fail("Should throw exception due to insufficient data");
    } catch (ZipException e) {
        assertTrue(true); // Correctly throws exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ntnL0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    String expected = "0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[null] ";
    assertEquals(expected, ntfs.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_ZaUd0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    Date expected = new Date(); // Assuming zipToDate(createTime) is mocked or set to return a specific predictable date.
    assertEquals(expected, ntfs.getCreateJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_VsOY0() {
    X000A_NTFS ntfs = new X000A_NTFS();
    Date expectedDate = new Date(); // Assuming current time as expected modify time for test
    assertEquals(expectedDate, ntfs.getModifyJavaTime());
}
}