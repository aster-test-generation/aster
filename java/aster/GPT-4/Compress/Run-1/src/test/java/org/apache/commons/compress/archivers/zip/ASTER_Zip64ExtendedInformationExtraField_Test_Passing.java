/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_EmptyBuffer_HSTN0() throws Exception {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[0];
        try {
            field.parseFromLocalFileData(buffer, 0, 0);
            assertNull(field.getSize());
            assertNull(field.getCompressedSize());
        } catch (ZipException e) {
            fail("Should not throw exception for empty buffer");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_NoFieldsSet_HEeF2() throws Exception {
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
    byte[] result = field.getCentralDirectoryData();
    assertEquals(0, result.length); // No fields set, so length should be 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthWithNullSize_hqat1() throws Exception {
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
    ZipShort result = field.getLocalFileDataLength();
    assertEquals(0, result.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_AllFieldsPresent_dKMs0() throws Exception {
        ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipLong diskStart = new ZipLong(new byte[]{0, 0});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
        assertEquals(36, field.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_NoFieldsPresent_FaQu1() throws Exception {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
        assertEquals(0, field.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_OnlySizeAndCompressedSize_jvBz2() throws Exception {
        ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, compressedSize);
        assertEquals(32, field.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_SizeAndDiskStart_MklI3() throws Exception {
        ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipLong diskStart = new ZipLong(new byte[]{0, 0});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, null, null, diskStart);
        assertEquals(20, field.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_CompressedSizeAndRelativeHeaderOffset_qpqR4() throws Exception {
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(null, compressedSize, relativeHeaderOffset, null);
        assertEquals(32, field.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskStartNumber_teRx0() throws Exception {
    ZipLong expectedDiskStart = new ZipLong(12345);
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(
        new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}), 
        new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}), 
        new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}), 
        expectedDiskStart
    );
    ZipLong actualDiskStart = field.getDiskStartNumber();
    assertEquals(expectedDiskStart.getValue(), actualDiskStart.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRelativeHeaderOffset_MuND0() throws Exception {
    ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
    ZipLong diskStart = new ZipLong(0);
    Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, compressedSize, relativeHeaderOffset, diskStart);
    ZipEightByteInteger result = field.getRelativeHeaderOffset();
    assertArrayEquals(relativeHeaderOffset.getBytes(), result.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryDataWithInsufficientData_BWXZ3() throws Exception {
        byte[] buffer = new byte[10]; // Less than 3 * DWORD
        int offset = 0;
        int length = 10;
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
        try {
            field.parseFromCentralDirectoryData(buffer, offset, length);
            fail("Expected an exception to be thrown");
        } catch (ZipException e) {
            assertNotNull(e);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskStartNumber_uuTT0() throws Exception {
    ZipLong diskStart = new ZipLong(12345);
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    zipField.setDiskStartNumber(diskStart);
    assertEquals(diskStart, zipField.getDiskStartNumber());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_BothSizesProvided_ReturnsNonEmptyByteArray_QmJU0() throws Exception {
        ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, compressedSize);
        byte[] result = field.getLocalFileDataData();
        assertNotEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_NoSizesProvided_ReturnsEmptyByteArray_BKZq1() throws Exception {
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField();
        byte[] result = field.getLocalFileDataData();
        assertEquals(0, result.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_OnlySizeProvided_ThrowsIllegalArgumentException_HNgf2() throws Exception {
        ZipEightByteInteger size = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(size, null);
        try {
            field.getLocalFileDataData();
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Local file header must have both size and compressed size when one is provided.", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_OnlyCompressedSizeProvided_ThrowsIllegalArgumentException_nflN3() throws Exception {
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        Zip64ExtendedInformationExtraField field = new Zip64ExtendedInformationExtraField(null, compressedSize);
        try {
            field.getLocalFileDataData();
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Local file header must have both size and compressed size when one is provided.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRelativeHeaderOffset_OTFC0() throws Exception {
    Zip64ExtendedInformationExtraField zipField = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger relativeHeaderOffset = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
    zipField.setRelativeHeaderOffset(relativeHeaderOffset);
    assertEquals(relativeHeaderOffset, zipField.getRelativeHeaderOffset());
}
}