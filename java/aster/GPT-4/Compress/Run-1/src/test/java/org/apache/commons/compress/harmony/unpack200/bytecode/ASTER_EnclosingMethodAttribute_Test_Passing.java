/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.DataOutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_EnclosingMethodAttribute_Test_Passing {
@Mock
    private ClassConstantPool mockPool;
private DataOutputStream mockDos;
private int methodIndex = 10;
private int classIndex = 20;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_FdLf0() throws Exception {
    EnclosingMethodAttribute enclosingMethodAttribute = new EnclosingMethodAttribute(null, null);
    assertEquals("EnclosingMethod", enclosingMethodAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAttributeName_yfxC0() throws Exception {
    CPUTF8 newAttributeName = new CPUTF8("SampleName");
    EnclosingMethodAttribute ema = new EnclosingMethodAttribute(null, null);
    EnclosingMethodAttribute.setAttributeName(newAttributeName);
}
}