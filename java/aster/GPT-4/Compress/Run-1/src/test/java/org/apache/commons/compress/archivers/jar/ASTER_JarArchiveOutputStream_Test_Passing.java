/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.jar;

import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JarArchiveOutputStream_Test_Passing {
@Mock
    private OutputStream outputStream;
@InjectMocks
    private JarArchiveOutputStream jarArchiveOutputStream;
@Mock
    private ZipArchiveEntry zipArchiveEntry;
    private boolean jarMarkerAdded;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutArchiveEntry_WithJarMarkerNotAdded() throws Exception {
        // Initialize JarArchiveOutputStream with a mocked OutputStream
        jarArchiveOutputStream = new JarArchiveOutputStream(outputStream);
        // Arrange
        when(zipArchiveEntry.isStreamContiguous()).thenReturn(false);
        // Act
        jarArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        // Assert
        verify(zipArchiveEntry).addAsFirstExtraField(JarMarker.getInstance());
        verify(zipArchiveEntry, times(1)).addAsFirstExtraField(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutArchiveEntry_WithJarMarkerAlreadyAdded() throws Exception {
        // Initialize JarArchiveOutputStream with a mocked OutputStream
        jarArchiveOutputStream = new JarArchiveOutputStream(outputStream);
        // Arrange
        // Simulate that the jarMarker has already been added
        jarArchiveOutputStream.putArchiveEntry(zipArchiveEntry); // First call to add the marker
        reset(zipArchiveEntry); // Reset the mock to clear previous interactions
        // Act
        jarArchiveOutputStream.putArchiveEntry(zipArchiveEntry); // Second call should not add the marker again
        // Assert
        verify(zipArchiveEntry, never()).addAsFirstExtraField(JarMarker.getInstance());
        verify(zipArchiveEntry, never()).addAsFirstExtraField(any());
    }
}