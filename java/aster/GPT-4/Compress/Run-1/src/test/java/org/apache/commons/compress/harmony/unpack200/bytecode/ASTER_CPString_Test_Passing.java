/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_zYnT0() throws Exception {
    CPUTF8 utf8 = new CPUTF8("Hello World", 0);
    CPString cpString = new CPString(utf8, 0);
    String result = cpString.toString();
    assertEquals("String: Hello World", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ynJp0_1() throws Exception {
    CPUTF8 utf8 = new CPUTF8("testString");
    CPString cpString = new CPString(utf8, 0);
    ClassFileEntry[] result = cpString.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ynJp0_2() throws Exception {
    CPUTF8 utf8 = new CPUTF8("testString");
    CPString cpString = new CPString(utf8, 0);
    ClassFileEntry[] result = cpString.getNestedClassFileEntries();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_ynJp0_3() throws Exception {
    CPUTF8 utf8 = new CPUTF8("testString");
    CPString cpString = new CPString(utf8, 0);
    ClassFileEntry[] result = cpString.getNestedClassFileEntries();
    assertEquals(utf8, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeConsistent_KKFf0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("testString");
        CPString cpString = new CPString(utf8, 1);
        int expectedHashCode = cpString.hashCode();
        assertEquals(expectedHashCode, cpString.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeDifferentInstances_TpUA1() throws Exception {
        CPUTF8 utf8First = new CPUTF8("testString");
        CPString cpStringFirst = new CPString(utf8First, 1);
        CPUTF8 utf8Second = new CPUTF8("testString", 2);
        CPString cpStringSecond = new CPString(utf8Second, 2);
        assertNotEquals(cpStringFirst.hashCode(), cpStringSecond.hashCode());
    }
}