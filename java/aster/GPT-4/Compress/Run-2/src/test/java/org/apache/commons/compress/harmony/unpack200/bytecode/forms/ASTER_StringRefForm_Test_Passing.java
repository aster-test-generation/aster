/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode.forms;

import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_StringRefForm_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPoolID_BasQ0() {
    int[] rewrite = new int[]{1, 2, 3};
    StringRefForm stringRefForm = new StringRefForm(10, "testName", rewrite);
    assertEquals(SegmentConstantPool.CP_STRING, stringRefForm.getPoolID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_COVo0() {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[] {10}; // Assuming nextStringRef will return the first element
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int[] rewrite = new int[0];
    StringRefForm stringRefForm = new StringRefForm(0, "testName", rewrite);
    int result = stringRefForm.getOffset(operandManager);
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedEntriesWithWidenedTrue_QMgg0_LvcB0() throws Pack200Exception {
    int opcode = 100;
    String name = "TestByteCode";
    int[] rewrite = {1, 2, 3};
    boolean widened = true;
    StringRefForm stringRefForm = new StringRefForm(opcode, name, rewrite, widened);
    ByteCode byteCode = ByteCode.getByteCode(opcode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNestedEntriesWithWidenedFalse_BBsq1_SMkB0() throws Pack200Exception {
    int opcode = 101;
    String name = "TestByteCode";
    int[] rewrite = {4, 5, 6};
    boolean widened = false;
    StringRefForm stringRefForm = new StringRefForm(opcode, name, rewrite, widened);
    ByteCode byteCode = ByteCode.getByteCode(opcode);
}
}