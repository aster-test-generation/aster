/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_WithValidIndex_ReturnsCorrectPairIndex_rSKO0() throws Exception {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[] {new BindPair(0, 1), new BindPair(1, 2)};
    int result = folder.findBindPairForInStream(1);
    assertEquals(1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_WithInvalidIndex_ReturnsMinusOne_TYWm1() throws Exception {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[] {new BindPair(0, 1), new BindPair(1, 2)};
    int result = folder.findBindPairForInStream(3);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_WithNullBindPairs_ReturnsMinusOne_eivH2() throws Exception {
    Folder folder = new Folder();
    folder.bindPairs = null;
    int result = folder.findBindPairForInStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFindBindPairForInStream_WithEmptyBindPairs_ReturnsMinusOne_aWYE3() throws Exception {
    Folder folder = new Folder();
    folder.bindPairs = new BindPair[] {};
    int result = folder.findBindPairForInStream(0);
    assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_WithNullBindPairs_tMAQ0() throws Exception {
        Folder folder = new Folder();
        int result = folder.findBindPairForOutStream(1);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_WithEmptyBindPairs_xoTG1() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[0];
        int result = folder.findBindPairForOutStream(1);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_WithNoMatchingIndex_gjYF2() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[] {new BindPair(0, 2), new BindPair(1, 3)};
        int result = folder.findBindPairForOutStream(5);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_WithMatchingIndex_PcSP3() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[] {new BindPair(0, 2), new BindPair(1, 3)};
        int result = folder.findBindPairForOutStream(3);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnpackSizeWithNoOutputStreams_NSFQ0() throws Exception {
        Folder folder = new Folder();
        folder.totalOutputStreams = 0;
        long result = folder.getUnpackSize();
        assertEquals(0, result);
    }
}