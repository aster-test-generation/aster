/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LineNumberTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_zOhy0() {
        LineNumberTableAttribute attribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
        assertTrue(attribute.equals(attribute));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_qElq1() {
        LineNumberTableAttribute attribute1 = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
        LineNumberTableAttribute attribute2 = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
        assertFalse(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ksOu0() {
    int lineNumberTableLength = 5;
    int[] startPcs = {0, 1, 2, 3, 4};
    int[] lineNumbers = {10, 20, 30, 40, 50};
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
    String expected = "LineNumberTable: 5 lines";
    assertEquals(expected, lineNumberTableAttribute.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_oceq0_1() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
    ClassFileEntry[] result = lineNumberTableAttribute.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_oceq0_2() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
    ClassFileEntry[] result = lineNumberTableAttribute.getNestedClassFileEntries();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_oceq0_3() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
    ClassFileEntry[] result = lineNumberTableAttribute.getNestedClassFileEntries();
    assertEquals(lineNumberTableAttribute.getAttributeName(), result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetStartPCs_dhsm0() {
    int[] expectedStartPcs = {0, 5, 10};
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(3, expectedStartPcs, new int[]{1, 2, 3});
    int[] actualStartPcs = lineNumberTableAttribute.getStartPCs();
    assertArrayEquals(expectedStartPcs, actualStartPcs);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_iNSF0() {
    int lineNumberTableLength = 5;
    int[] startPcs = {0, 2, 4, 6, 8};
    int[] lineNumbers = {1, 2, 3, 4, 5};
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
    int expectedLength = 2 + 4 * lineNumberTableLength;
    assertEquals(expectedLength, lineNumberTableAttribute.getLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve_nqvt0_AWzm0_fid1() {
    int lineNumberTableLength = 5;
    int[] startPcs = {0, 10, 20, 30, 40};
    int[] lineNumbers = {1, 2, 3, 4, 5};
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(lineNumberTableLength, startPcs, lineNumbers);
    ClassConstantPool pool = new ClassConstantPool();
    try {
        lineNumberTableAttribute.resolve(pool);
        fail("Expected IllegalStateException was not thrown");
    } catch (IllegalStateException e) {
        assertEquals("Constant pool is not yet resolved; this does not make any sense", e.getMessage(), "Exception message mismatch");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_oceq0() {
    LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(0, new int[]{}, new int[]{});
    ClassFileEntry[] result = lineNumberTableAttribute.getNestedClassFileEntries();
    assertNotNull(result);
    assertEquals(1, result.length);
    assertEquals(lineNumberTableAttribute.getAttributeName(), result[0]);
}
}