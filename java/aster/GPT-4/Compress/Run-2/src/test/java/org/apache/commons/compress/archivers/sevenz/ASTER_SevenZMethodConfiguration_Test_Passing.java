/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZMethodConfiguration_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_ApFD0() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    assertTrue(config.equals(config));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_hBrC1() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    assertFalse(config.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_SZej2() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    Object other = new Object();
    assertFalse(config.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentMethod_kqvX3() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.BZIP2);
    assertFalse(config1.equals(config2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameMethodDifferentOptions_yVUk4() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "Option1");
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "Option2");
    assertFalse(config1.equals(config2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameMethodSameOptions_qKeT5() {
    SevenZMethodConfiguration config1 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "Option");
    SevenZMethodConfiguration config2 = new SevenZMethodConfiguration(SevenZMethod.LZMA, "Option");
    assertTrue(config1.equals(config2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOptionsReturnsNullWhenNoOptionsProvided_YPsJ0() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    assertNull(config.getOptions());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_OwlZ0() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    SevenZMethod expected = SevenZMethod.LZMA;
    assertEquals(expected, config.getMethod());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonNullMethod_nAbW0() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(SevenZMethod.LZMA);
    int expectedHashCode = SevenZMethod.LZMA.hashCode();
    assertEquals(expectedHashCode, config.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullMethod_VuMW1() {
    SevenZMethodConfiguration config = new SevenZMethodConfiguration(null);
    assertEquals(0, config.hashCode());
}
}