/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_OperandManager_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseValues_UfKe0() throws Exception {
    int[] bcCaseCount = new int[]{1, 2, 3};
    int[] bcCaseValue = new int[]{10, 20, 30};
    int[] bcByte = new int[]{0};
    int[] bcShort = new int[]{0};
    int[] bcLocal = new int[]{0};
    int[] bcLabel = new int[]{0};
    int[] bcIntRef = new int[]{0};
    int[] bcFloatRef = new int[]{0};
    int[] bcLongRef = new int[]{0};
    int[] bcDoubleRef = new int[]{0};
    int[] bcStringRef = new int[]{0};
    int[] bcClassRef = new int[]{0};
    int[] bcFieldRef = new int[]{0};
    int[] bcMethodRef = new int[]{0};
    int[] bcIMethodRef = new int[]{0};
    int[] bcThisField = new int[]{0};
    int[] bcSuperField = new  int[]{0};
    int[] bcThisMethod = new int[]{0};
    int[] bcSuperMethod = new int[]{0};
    int[] bcInitRef = new int[]{0};
    int[] wideByteCodes = new int[]{0};
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    int expected = 10;
    int actual = operandManager.nextCaseValues();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentClassWhenSet_QaGe1() throws Exception {
        OperandManager manager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShort_ZQcN0_1() throws Exception {
    int[] bcShort = {100, 200, 300};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], bcShort, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(100, operandManager.nextShort());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextShort_ZQcN0_2() throws Exception {
    int[] bcShort = {100, 200, 300};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], bcShort, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(200, operandManager.nextShort());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisFieldRef_tCBH0() throws Exception {
    int[] bcThisField = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcThisField, new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextThisFieldRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLocal_qCVK0() throws Exception {
    int[] bcLocal = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], bcLocal, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextLocal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextStringRef_TfWC0() throws Exception {
    int[] bcStringRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcStringRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextStringRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_FQhL0_1() throws Exception {
    int[] bcCaseCount = {10, 20, 30};
    OperandManager operandManager = new OperandManager(bcCaseCount, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_FQhL0_2() throws Exception {
    int[] bcCaseCount = {10, 20, 30};
    OperandManager operandManager = new OperandManager(bcCaseCount, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextCaseCount_FQhL0_3() throws Exception {
    int[] bcCaseCount = {10, 20, 30};
    OperandManager operandManager = new OperandManager(bcCaseCount, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextCaseCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextThisMethodRef_bHFP0() throws Exception {
    int[] bcThisMethod = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcThisMethod, new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextThisMethodRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextLabel_HNCL0() throws Exception {
        int[] bcLabel = {10, 20, 30};
        OperandManager manager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], bcLabel, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
        assertEquals(10, manager.nextLabel());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCurrentClass_owaE0() throws Exception {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    operandManager.setCurrentClass("TestClass");
    assertEquals("TestClass", operandManager.currentClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFieldRef_EDcT0() throws Exception {
    int[] bcFieldRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcFieldRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextFieldRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_hswp0_1() throws Exception {
    int[] bcMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_hswp0_2() throws Exception {
    int[] bcMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextMethodRef_hswp0_3() throws Exception {
    int[] bcMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextWideByteCode_AVON0() throws Exception {
    int[] wideByteCodes = {100, 200, 300};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], wideByteCodes);
    assertEquals(100, operandManager.nextWideByteCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNewClass_ZUeN0() throws Exception {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    String expectedClassName = "com.example.NewClass";
    operandManager.setNewClass(expectedClassName);
    assertEquals(expectedClassName, operandManager.newClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_VTbq0_1() throws Exception {
    int[] bcDoubleRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcDoubleRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextDoubleRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_VTbq0_2() throws Exception {
    int[] bcDoubleRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcDoubleRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextDoubleRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextDoubleRef_VTbq0_3() throws Exception {
    int[] bcDoubleRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcDoubleRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextDoubleRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextClassRef_YysL0() throws Exception {
    int[] bcClassRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcClassRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextClassRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_Rozq0_1() throws Exception {
    int[] bcLongRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcLongRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextLongRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_Rozq0_2() throws Exception {
    int[] bcLongRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcLongRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextLongRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextLongRef_Rozq0_3() throws Exception {
    int[] bcLongRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcLongRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextLongRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextByte_Znin0() throws Exception {
    int[] bcByte = {10, 20, 30};
    OperandManager manager = new OperandManager(new int[0], new int[0], bcByte, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, manager.nextByte());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextFloatRef_GZOB0() throws Exception {
    int[] bcFloatRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcFloatRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextFloatRef());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_jhnL0_1() throws Exception {
    int[] bcIMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcIMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextIMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_jhnL0_2() throws Exception {
    int[] bcIMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcIMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextIMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIMethodRef_jhnL0_3() throws Exception {
    int[] bcIMethodRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcIMethodRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextIMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNewClassSet_VfeX1() throws Exception {
    int[] bcCaseCount = new int[0];
    int[] bcCaseValue = new int[0];
    int[] bcByte = new int[0];
    int[] bcShort = new int[0];
    int[] bcLocal = new int[0];
    int[] bcLabel = new int[0];
    int[] bcIntRef = new int[0];
    int[] bcFloatRef = new int[0];
    int[] bcLongRef = new int[0];
    int[] bcDoubleRef = new int[0];
    int[] bcStringRef = new int[0];
    int[] bcClassRef = new int[0];
    int[] bcFieldRef = new int[0];
    int[] bcMethodRef = new int[0];
    int[] bcIMethodRef = new int[0];
    int[] bcThisField = new int[0];
    int[] bcSuperField = new int[0];
    int[] bcThisMethod = new int[0];
    int[] bcSuperMethod = new int[0];
    int[] bcInitRef = new int[0];
    int[] wideByteCodes = new int[0];
    OperandManager operandManager = new OperandManager(bcCaseCount, bcCaseValue, bcByte, bcShort, bcLocal, bcLabel, bcIntRef, bcFloatRef, bcLongRef, bcDoubleRef, bcStringRef, bcClassRef, bcFieldRef, bcMethodRef, bcIMethodRef, bcThisField, bcSuperField, bcThisMethod, bcSuperMethod, bcInitRef, wideByteCodes);
    String expectedClass = "ExpectedClassName";
    String actualClass = operandManager.getNewClass();
    assertEquals(expectedClass, actualClass);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_YxKJ0_1() throws Exception {
    int[] bcSuperMethod = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextSuperMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_YxKJ0_2() throws Exception {
    int[] bcSuperMethod = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(20, operandManager.nextSuperMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextSuperMethodRef_YxKJ0_3() throws Exception {
    int[] bcSuperMethod = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(30, operandManager.nextSuperMethodRef());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextIntRef_gjMo0() throws Exception {
    int[] bcIntRef = {10, 20, 30};
    OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], bcIntRef, new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
    assertEquals(10, operandManager.nextIntRef());
}
}