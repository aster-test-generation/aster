/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayoutMap_Test_Passing {
private AttributeLayoutMap attributeLayoutMap;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckMap_Empty_HFVE0() throws Pack200Exception {
        AttributeLayoutMap alm = new AttributeLayoutMap();
        alm.checkMap();
        assertTrue(true); // Pass if no exception is thrown
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAttributeLayout_NonExistingAttribute_PSgX1() {
        try {
            AttributeLayoutMap map = new AttributeLayoutMap();
            AttributeLayout result = map.getAttributeLayout("NonExistingName", 1);
            assertNull(result);
        } catch (Pack200Exception e) {
            fail("Exception should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAdd_kfiN0() throws Exception {
    AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
    AttributeLayout mockLayout = mock(AttributeLayout.class);
    when(mockLayout.getContext()).thenReturn(1);
    when(mockLayout.getIndex()).thenReturn(1);
    attributeLayoutMap.add(mockLayout);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_SingleElement_nQWT1_XBHY0() throws Pack200Exception {
    AttributeLayoutMap alm = new AttributeLayoutMap();
    AttributeLayout layout = new AttributeLayout("Name1", 1, "Layout1", 0);
    alm.add(layout);
    assertTrue(true); // Pass if no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_TwoDifferentElements_Wuzv2_hwQf0() throws Pack200Exception {
    AttributeLayoutMap alm = new AttributeLayoutMap();
    alm.add(new AttributeLayout("Name1", 1, "Layout1", 0));
    alm.add(new AttributeLayout("Name2", 1, "Layout2", 1));
    assertTrue(true); // Pass if no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_MultipleMapsNoDuplicates_gzlI4_CERi0() throws Pack200Exception {
    AttributeLayoutMap alm = new AttributeLayoutMap();
    alm.add(new AttributeLayout("Name1", 1, "Layout1", 0));
    alm.add(new AttributeLayout("Name2", 2, "Layout2", 1));
    assertTrue(true); // Pass if no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCheckMap_ComplexNoDuplicates_gwWM6_trOy0() throws Pack200Exception {
    AttributeLayoutMap alm = new AttributeLayoutMap();
    alm.add(new AttributeLayout("Name1", 1, "Layout1", 0));
    alm.add(new AttributeLayout("Name2", 1, "Layout2", 1));
    alm.add(new AttributeLayout("Name3", 3, "Layout3", 2));
    alm.add(new AttributeLayout("Name4", 3, "Layout4", 3));
    assertTrue(true); // Pass if no exception is thrown
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout_ExistingAttribute_Tkhr0_lqsL0() {
    try {
        AttributeLayoutMap map = new AttributeLayoutMap();
        AttributeLayout expectedLayout = new AttributeLayout("AttributeName", 1, "L", 0, true);
        map.add(expectedLayout);
        AttributeLayout result = map.getAttributeLayout("AttributeName", 1);
        assertEquals(expectedLayout, result);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAttributeLayout_DifferentContext_Fupa2_erDh0() {
    try {
        AttributeLayoutMap map = new AttributeLayoutMap();
        AttributeLayout expectedLayout = new AttributeLayout("AttributeName", 1, "L", 0);
        map.add(expectedLayout);
        AttributeLayout result = map.getAttributeLayout("AttributeName", 2);
        assertNull(result);
    } catch (Pack200Exception e) {
        fail("Exception should not be thrown");
    }
}
}