/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidZstandardFrameMagic_gwgb1() throws Exception {
        byte[] signature = {0x00, 0x00, 0x00, 0x00};
        assertFalse(ZstdUtils.matches(signature, signature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSkippableFrameMagic_XzZe3() throws Exception {
        byte[] signature = {0x50, 0x2A, 0x4D, 0x18}; // Assuming 0x50 matches the condition and {0x2A, 0x4D, 0x18} is SKIPPABLE_FRAME_MAGIC
        assertTrue(ZstdUtils.matches(signature, signature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSkippableFrameMagic_fzJw4() throws Exception {
        byte[] signature = {0x50, 0x00, 0x00, 0x00}; // Correct prefix but wrong SKIPPABLE_FRAME_MAGIC
        assertFalse(ZstdUtils.matches(signature, signature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidPrefixForSkippable_Jzfq5() throws Exception {
        byte[] signature = {0x40, 0x2A, 0x4D, 0x18}; // Invalid prefix for skippable frame
        assertFalse(ZstdUtils.matches(signature, signature.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithBoundaryConditionForSkippable_Dxwo7() throws Exception {
        byte[] signature = {0x50, 0x2A, 0x4D, 0x18}; // Boundary condition where first byte is 0x50
        assertTrue(ZstdUtils.matches(signature, signature.length));
    }
}