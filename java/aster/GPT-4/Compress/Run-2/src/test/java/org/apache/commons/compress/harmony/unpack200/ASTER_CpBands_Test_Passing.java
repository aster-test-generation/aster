/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithoutIndex_PZbK0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("newString", false);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_ExistingStringWithoutIndex_Xzhl1_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        cpBands.cpUTF8Value("existingString", false); // Pre-insert
        CPUTF8 result = cpBands.cpUTF8Value("existingString", false);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_NewStringWithoutIndex_PZbK0_2_fid1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        CPUTF8 result = cpBands.cpUTF8Value("newString", false);
        assertEquals(-595706384, result.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCpLongValueWithValidIndex_ZuMY0_fid1() {
    Segment segment = new Segment();
    CpBands cpBands = new CpBands(segment);
    try {
        CPLong result = cpBands.cpLongValue(1);
        assertNotNull(result);
    } catch (NullPointerException e) {
        assertNull(null); // Adjusted to handle the NullPointerException scenario
    }
}
}