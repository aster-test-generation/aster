/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithValidInput_aZdA0() throws Pack200Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(1, 2, 3);
    RunCodec favouredRunCodec = new RunCodec(5, aCodec, bCodec);
    RunCodec tokenRunCodec = new RunCodec(5, aCodec, bCodec);
    RunCodec unfavouredRunCodec = new RunCodec(5, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(favouredRunCodec, tokenRunCodec, unfavouredRunCodec);
    int[] favoured = {1, 2, 3};
    int[] tokens = {4, 5};
    int[] unfavoured = {6, 7, 8};
    byte[] expectedOutput = new byte[9]; // Assuming each encode method returns an array of size 3 for simplicity
    byte[] result = populationCodec.encode(favoured, tokens, unfavoured);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUnfavouredCodec_Lrfs0() throws Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec favouredCodec = new RunCodec(5, aCodec, bCodec);
    RunCodec unfavouredCodec = new RunCodec(6, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 7, unfavouredCodec);
    Codec result = populationCodec.getUnfavouredCodec();
    assertEquals(unfavouredCodec, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredReturnsCorrectArray_GGcz0() throws Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4, 5, 6);
    RunCodec favouredCodec = new RunCodec(7, aCodec, bCodec);
    RunCodec unfavouredCodec = new RunCodec(8, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 9, unfavouredCodec);
    int[] expected = new int[]{/* values that should be initialized in favoured array */};
    int[] actual = populationCodec.getFavoured();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTokenCodec_KpYS0() throws Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec favouredCodec = new RunCodec(5, aCodec, bCodec);
    RunCodec tokenCodec = new RunCodec(6, aCodec, bCodec);
    RunCodec unfavouredCodec = new RunCodec(7, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec);
    Codec actualTokenCodec = populationCodec.getTokenCodec();
    assertEquals(tokenCodec, actualTokenCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredCodec_Wvpa0() throws Exception {
    BHSDCodec aCodec = new BHSDCodec(1, 2);
    BHSDCodec bCodec = new BHSDCodec(3, 4);
    RunCodec favouredCodec = new RunCodec(5, aCodec, bCodec);
    RunCodec unfavouredCodec = new RunCodec(6, aCodec, bCodec);
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 10, unfavouredCodec);
    Codec result = populationCodec.getFavouredCodec();
    assertEquals(favouredCodec, result);
}
}