/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayIsCached_WhenArrayIsNotCached_ShouldReturnFalse_Vokn0() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] testArray = new String[]{"apple", "banana", "cherry"};
    boolean result = cache.arrayIsCached(testArray);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_WithUncachedArray_XRuf0() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = {"apple", "banana", "cherry"};
    String key = "apple";
    List<Integer> expectedIndexes = Arrays.asList(0);
    assertEquals(expectedIndexes, cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_WithNoMatchingKey_Vnqz2() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = {"apple", "banana", "cherry"};
    String key = "orange";
    List<Integer> expectedIndexes = new ArrayList<>();
    assertEquals(expectedIndexes, cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexesForArrayKey_WithNullArray_AqaY3() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] array = null;
    String key = "apple";
    assertThrows(NullPointerException.class, () -> cache.indexesForArrayKey(array, key));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArray_NewArray_WVJZ0() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] newArray = {"item1", "item2"};
    cache.cacheArray(newArray);
    assertTrue(cache.arrayIsCached(newArray));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCacheArray_AlreadyCachedArray_rfXY1() throws Exception {
    SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
    String[] alreadyCachedArray = {"item1", "item2"};
    cache.cacheArray(alreadyCachedArray);
    assertThrows(IllegalArgumentException.class, () -> cache.cacheArray(alreadyCachedArray));
}
}