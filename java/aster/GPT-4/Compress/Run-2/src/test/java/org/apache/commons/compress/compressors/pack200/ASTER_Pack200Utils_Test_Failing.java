/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;

import org.apache.commons.compress.java.util.jar.Pack200;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullProperties_xSPN0() throws IOException {
    File sourceFile = File.createTempFile("source", ".jar");
    File destFile = File.createTempFile("dest", ".jar");
    Map<String, String> props = null;
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.length() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithEmptyProperties_iwXQ1() throws IOException {
    File sourceFile = File.createTempFile("source", ".jar");
    File destFile = File.createTempFile("dest", ".jar");
    Map<String, String> props = new HashMap<>();
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.exists());
    sourceFile.delete();
    destFile.delete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithCustomProperties_eUeM2() throws IOException {
    File sourceFile = File.createTempFile("source", ".jar");
    File destFile = File.createTempFile("dest", ".jar");
    Map<String, String> props = new HashMap<>();
    props.put(Pack200.Packer.EFFORT, "9");
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.length() > 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullFile_uUvp0_1() {
    Exception exception = assertThrows(IOException.class, () -> {
        Pack200Utils.normalize(null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullProperties_xSPN0_fid1() throws IOException {
    File sourceFile = new File("source.jar");
    File destFile = new File("dest.jar");
    Map<String, String> props = null;
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithEmptyProperties_iwXQ1_fid1() throws IOException {
    File sourceFile = new File("source.jar");
    File destFile = new File("dest.jar");
    Map<String, String> props = new HashMap<>();
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithCustomProperties_eUeM2_fid1() throws IOException {
    File sourceFile = new File("source.jar");
    File destFile = new File("dest.jar");
    Map<String, String> props = new HashMap<>();
    props.put(Pack200.Packer.EFFORT, "9");
    Pack200Utils.normalize(sourceFile, destFile, props);
    assertTrue(destFile.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithSameInputOutputFile_Aodi0() throws IOException {
    File tempJar = File.createTempFile("test", ".jar");
    tempJar.deleteOnExit();
    Map<String, String> properties = new HashMap<>();
    properties.put("key", "value");
    Pack200Utils.normalize(tempJar, properties);
    assertTrue(tempJar.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullFile_uUvp0() {
    Exception exception = assertThrows(IOException.class, () -> {
        Pack200Utils.normalize(null);
    });
    assertNotNull(exception);
}
}