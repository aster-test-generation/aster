/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_AllZeros_WtQv0() {
    byte[] buffer = new byte[1024]; // Assuming buffer needs to be at least 1024 bytes
    Arrays.fill(buffer, (byte) 0);
    int expectedChecksum = DumpArchiveConstants.CHECKSUM - DumpArchiveUtil.convert32(buffer, 28);
    int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
    assertEquals(expectedChecksum, actualChecksum);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert64_UkUv0() {
    byte[] buffer = new byte[] {1, 0, 0, 0, 0, 0, 0, 0};
    int offset = 0;
    long expected = 1L;
    long result = DumpArchiveUtil.convert64(buffer, offset);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert16WithPositiveOffset_zIQs0() {
    byte[] buffer = new byte[] {0x01, 0x02, 0x03, 0x04};
    int offset = 2;
    int result = DumpArchiveUtil.convert16(buffer, offset);
    assertEquals(0x0403, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConvert32_dblg0() {
    byte[] buffer = new byte[] {0x01, 0x02, 0x03, 0x04};
    int offset = 0;
    int expected = 0x04030201;
    int result = DumpArchiveUtil.convert32(buffer, offset);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyNullBuffer_Bbzj0() {
        byte[] buffer = null;
        assertFalse(DumpArchiveUtil.verify(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyInvalidMagic_VWHx1() {
        byte[] buffer = new byte[32];
        buffer[24] = 0;
        buffer[25] = 0;
        buffer[26] = 0;
        buffer[27] = 0; // Incorrect magic number
        assertFalse(DumpArchiveUtil.verify(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyInvalidChecksum_lPmy2() {
        byte[] buffer = new byte[32];
        buffer[24] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 24) & 0xff);
        buffer[25] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 16) & 0xff);
        buffer[26] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 8) & 0xff);
        buffer[27] = (byte)(DumpArchiveConstants.NFS_MAGIC & 0xff);
        buffer[28] = 1; // Incorrect checksum
        buffer[29] = 0;
        buffer[30] = 0;
        buffer[31] = 0;
        assertFalse(DumpArchiveUtil.verify(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCalculateChecksum_SpecificPattern_NiWK1_fid1() {
    byte[] buffer = new byte[1024];
    for (int i = 0; i < buffer.length; i++) {
        buffer[i] = (byte) (i % 256);
    }
    int expectedChecksum = DumpArchiveConstants.CHECKSUM - (DumpArchiveUtil.calculateChecksum(buffer) - DumpArchiveUtil.convert32(buffer, 28));
    int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIno_ValidBuffer_ReturnsCorrectIno_weFp0_fid1() {
    byte[] buffer = new byte[24];
    buffer[20] = 0x01;
    buffer[21] = 0x02;
    buffer[22] = 0x03;
    buffer[23] = 0x04;
    int expectedIno = 0x04030201;
    int actualIno = DumpArchiveUtil.getIno(buffer);
    assertEquals(expectedIno, actualIno);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyValidBuffer_psPL3_fid1() {
        byte[] buffer = new byte[32];
        buffer[24] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 24) & 0xff);
        buffer[25] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 16) & 0xff);
        buffer[26] = (byte)((DumpArchiveConstants.NFS_MAGIC >> 8) & 0xff);
        buffer[27] = (byte)(DumpArchiveConstants.NFS_MAGIC & 0xff);
        buffer[28] = 0; // Assuming calculateChecksum returns 0 for simplicity
        buffer[29] = 0;
        buffer[30] = 0;
        buffer[31] = 0;
        assertFalse(DumpArchiveUtil.verify(buffer));
    }
}