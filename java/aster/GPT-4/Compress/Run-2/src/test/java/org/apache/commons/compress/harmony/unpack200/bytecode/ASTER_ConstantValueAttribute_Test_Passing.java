/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_TdvN0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        assertTrue(attribute.equals(attribute));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse_bitg1() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        Object other = new Object();
        assertFalse(attribute.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_ReturnsFalse_MOew2() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute = new ConstantValueAttribute(byteCode);
        assertFalse(attribute.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentByteCode_ReturnsFalse_OGKE3() {
        ByteCode byteCode1 = new ByteCode(1);
        ByteCode byteCode2 = new ByteCode(2);
        ConstantValueAttribute attribute1 = new ConstantValueAttribute(byteCode1);
        ConstantValueAttribute attribute2 = new ConstantValueAttribute(byteCode2);
        assertFalse(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameByteCode_ReturnsTrue_MsdE4() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute attribute1 = new ConstantValueAttribute(byteCode);
        ConstantValueAttribute attribute2 = new ConstantValueAttribute(byteCode);
        assertTrue(attribute1.equals(attribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_yKEr0() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute c = new ConstantValueAttribute(byteCode);
    assertEquals("Constant:" + byteCode.toString(), c.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_KDGW0() {
        ByteCode byteCode = new ByteCode(1);
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(byteCode);
        assertEquals(2, constantValueAttribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_pIom0() {
        ByteCode entry = new ByteCode(1);
        ClassConstantPool pool = new ClassConstantPool();
        ConstantValueAttribute attribute = new ConstantValueAttribute(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_qXaG0_Suxi0_1() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute cValueAttr = new ConstantValueAttribute(byteCode);
    ClassFileEntry[] result = cValueAttr.getNestedClassFileEntries();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_qXaG0_Suxi0_2() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute cValueAttr = new ConstantValueAttribute(byteCode);
    ClassFileEntry[] result = cValueAttr.getNestedClassFileEntries();
    assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_qXaG0_Suxi0_3() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute cValueAttr = new ConstantValueAttribute(byteCode);
    ClassFileEntry[] result = cValueAttr.getNestedClassFileEntries();
    assertFalse(result[0] instanceof ClassFileEntry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNestedClassFileEntries_qXaG0_Suxi0_4() {
    ByteCode byteCode = new ByteCode(1);
    ConstantValueAttribute cValueAttr = new ConstantValueAttribute(byteCode);
    ClassFileEntry[] result = cValueAttr.getNestedClassFileEntries();
    assertEquals(byteCode, result[1]);}
}