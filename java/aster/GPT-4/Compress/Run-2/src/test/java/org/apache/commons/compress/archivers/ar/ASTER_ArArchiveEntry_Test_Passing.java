/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_pWOn0() {
    ArArchiveEntry entry = new ArArchiveEntry("file1", 100);
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_THMs1() {
    ArArchiveEntry entry = new ArArchiveEntry("file1", 100);
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_JvJr2() {
    ArArchiveEntry entry = new ArArchiveEntry("file1", 100);
    Object other = new Object();
    assertFalse(entry.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentName_XAfj3() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100);
    ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameName_rkIM4() {
    ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100);
    ArArchiveEntry entry2 = new ArArchiveEntry("file1", 200);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullNameInBoth_PMNf5() {
    ArArchiveEntry entry1 = new ArArchiveEntry(null, 100);
    ArArchiveEntry entry2 = new ArArchiveEntry(null, 100);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryReturnsFalse_wJtZ0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 100);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_AaZK0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 12345, 1001, 1001, 644, 1700000000L);
    Date expectedDate = new Date(1700000000L * 1000);
    assertEquals(expectedDate, entry.getLastModifiedDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_HoSp0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 1024, 1001, 2001, 755, 1490000000L);
    assertEquals(2001, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_CTwK0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 12345);
    assertEquals(12345, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_YGTo0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 100, 123, 456, 777, 1000L);
    assertEquals(123, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeConsistency_KxoN0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 100);
    int expectedHashCode = entry.hashCode();
    int actualHashCode = entry.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_ekHu0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 100);
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLength_HRtx0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 5000);
    long length = entry.getLength();
    assertEquals(5000, length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_pVOU0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 1024, 1001, 1001, 755, 1234567890L);
    assertEquals(755, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_LDnZ0() {
    ArArchiveEntry entry = new ArArchiveEntry("testEntry", 1000, 100, 200, 755, 1609459200000L); // Jan 1, 2021
    assertEquals(1609459200000L, entry.getLastModified());
}
}