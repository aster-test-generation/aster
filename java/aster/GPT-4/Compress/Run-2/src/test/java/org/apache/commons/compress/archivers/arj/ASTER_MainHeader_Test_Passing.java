/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MainHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OOei0_rotD0() {
    MainHeader mainHeader = new MainHeader();
    mainHeader.archiverVersionNumber = 1;
    mainHeader.minVersionToExtract = 2;
    mainHeader.hostOS = 1; // Assuming 1 represents "Windows" as an integer mapping for OS types
    mainHeader.arjFlags = 1; // Assuming 1 represents "Flag1" as an integer mapping for flags
    mainHeader.securityVersion = 3;
    mainHeader.fileType = 1; // Assuming 1 represents "TypeA" as an integer mapping for file types
    mainHeader.reserved = 0; // Assuming reserved should be an integer
    mainHeader.archiveSize = 1024L;
    mainHeader.securityEnvelopeFilePosition = 100; // Corrected to int
    mainHeader.fileSpecPosition = 200; // Corrected to int
    mainHeader.securityEnvelopeLength = 150;
    mainHeader.encryptionVersion = 1;
    mainHeader.lastChapter = 1;
    mainHeader.arjProtectionFactor = 5;
    mainHeader.arjFlags2 = 2; // Assuming 2 represents "Flag2" as an integer mapping for flags
    mainHeader.name = "SampleName";
    mainHeader.comment = "SampleComment";
    mainHeader.extendedHeaderBytes = new byte[] {0x01, 0x02, 0x03};
    String expected = "MainHeader [archiverVersionNumber=1, minVersionToExtract=2, hostOS=1, arjFlags=1, securityVersion=3, fileType=1, reserved=0, dateTimeCreated=0, dateTimeModified=0, archiveSize=1024, securityEnvelopeFilePosition=100, fileSpecPosition=200, securityEnvelopeLength=150, encryptionVersion=1, lastChapter=1, arjProtectionFactor=5, arjFlags2=2, name=SampleName, comment=SampleComment, extendedHeaderBytes=[1, 2, 3]]";
    String actual = mainHeader.toString();
    assertEquals(expected, actual);
}
}