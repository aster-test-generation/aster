/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.unpack200.Segment;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CodeAttribute_Test_Passing {
CodeAttribute codeAttribute;
List<Attribute> attributes;
Segment segment;
OperandManager operandManager;
byte[] codePacked = new byte[10];
List<ExceptionTableEntry> exceptionTable = new ArrayList<>();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZYgb0() throws Exception {
        byte[] codePacked = new byte[100]; // Assuming 100 bytes of code
        Segment segment = new Segment();
        OperandManager operandManager = new OperandManager(new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0], new int[0]);
        List<ExceptionTableEntry> exceptionTable = new ArrayList<>();
        CodeAttribute codeAttribute = new CodeAttribute(10, 5, codePacked, segment, operandManager, exceptionTable);
        assertEquals("Code: 100 bytes", codeAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_Empty_OUqN0() throws Exception {
        Segment segment = new Segment();
        OperandManager operandManager = new OperandManager(new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{});
        List<ExceptionTableEntry> exceptionTable = new ArrayList<>();
        CodeAttribute codeAttribute = new CodeAttribute(0, 0, new byte[]{}, segment, operandManager, exceptionTable);
        ClassFileEntry[] result = codeAttribute.getNestedClassFileEntries();
        assertEquals(0, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithEmptyExceptionTableAndNoAttributes_JHwc0() throws Exception {
        int maxStack = 10;
        int maxLocals = 5;
        byte[] codePacked = new byte[]{0x01, 0x02, 0x03};
        int codeLength = codePacked.length;
        Segment segment = new Segment();
        OperandManager operandManager = new OperandManager(new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{}, new int[]{});
        List<ExceptionTableEntry> exceptionTable = new ArrayList<>();
        List<Attribute> attributes = new ArrayList<>();
        CodeAttribute codeAttribute = new CodeAttribute(maxStack, maxLocals, codePacked, segment, operandManager, exceptionTable);
        int expectedLength = 2 + 2 + 4 + codeLength + 2 + exceptionTable.size() * (2 + 2 + 2 + 2) + 2 + 0;
        assertEquals(expectedLength, codeAttribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_kvvX0() throws Exception {
        ClassConstantPool pool = mock(ClassConstantPool.class);
        Segment segment = new Segment();
        OperandManager operandManager = mock(OperandManager.class);
        ExceptionTableEntry exceptionEntry = mock(ExceptionTableEntry.class);
        List<ExceptionTableEntry> exceptionTable = Arrays.asList(exceptionEntry);
        byte[] codePacked = new byte[]{};
        CodeAttribute codeAttribute = new CodeAttribute(10, 5, codePacked, segment, operandManager, exceptionTable);
        codeAttribute.resolve(pool);
        verify(pool, times(1)).resolve(segment);
        verify(exceptionEntry, times(1)).resolve(pool);
    }
}