/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;
import java.util.zip.CRC32;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
@Mock
    private SeekableByteChannel channel;
private SevenZOutputFile sevenZOutputFile;
    private final CRC32 crc32 = new CRC32();
    private boolean finished;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithValidData_rkWX0() throws IOException {
    File tempFile = File.createTempFile("test", ".7z");
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
    byte[] data = "Hello, World!".getBytes();
    sevenZOutputFile.write(data);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithNonEmptyByteArray_HEPH0() throws IOException {
        File tempFile = Files.createTempFile("test", ".7z").toFile();
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
        byte[] data = "Hello World".getBytes();
        sevenZOutputFile.write(data, 0, data.length);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithEmptyByteArray_BYPx1() throws IOException {
        File tempFile = Files.createTempFile("test", ".7z").toFile();
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
        byte[] data = new byte[0];
        sevenZOutputFile.write(data, 0, data.length);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithEmptyContentMethods_xBgf0() throws IOException {
    File tempFile = File.createTempFile("test", ".7z");
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
    byte[] dataToWrite = "Hello World".getBytes();
    sevenZOutputFile.write(dataToWrite, 0, dataToWrite.length);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteWithEncryption_cuEn1() throws IOException {
    File tempFile = File.createTempFile("test", ".7z");
    char[] password = "password".toCharArray();
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile, password);
    byte[] dataToWrite = "Secure Data".getBytes();
    sevenZOutputFile.write(dataToWrite, 0, dataToWrite.length);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_WhenNotFinished_ShouldWriteDataCorrectly() throws Exception {
        sevenZOutputFile = new SevenZOutputFile(channel);
        // Arrange
        when(channel.position()).thenReturn(100L);
        // Act
        sevenZOutputFile.finish();
        // Assert
        verify(channel, times(2)).write(any(ByteBuffer.class));
        verify(channel).position(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_WhenAlreadyFinished_ShouldThrowIOException() throws Exception {
        sevenZOutputFile = new SevenZOutputFile(channel);
        // Arrange
        // Call finish once to set finished to true
        try {
            sevenZOutputFile.finish();
        } catch (IOException e) {
            fail("Unexpected IOException on first finish call.");
        }
        // Act & Assert
        assertThrows(IOException.class, () -> sevenZOutputFile.finish(), "This archive has already been finished");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishSuccessfully_DIeq0() throws IOException {
        Path tempFile = Files.createTempFile("testArchive", ".7z");
        File file = tempFile.toFile();
        SeekableByteChannel channel = Files.newByteChannel(tempFile);
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithExceptionAlreadyFinished_sSWc1_1() throws IOException {
        Path tempFile = Files.createTempFile("testArchive", ".7z");
        File file = tempFile.toFile();
        SeekableByteChannel channel = Files.newByteChannel(tempFile);
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(channel);
        sevenZOutputFile.finish(); // First call to finish
        Exception exception = assertThrows(IOException.class, () -> sevenZOutputFile.finish());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishSuccessfully_rVKo0() throws IOException {
    File tempFile = File.createTempFile("test", ".7z");
    tempFile.deleteOnExit();
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
    sevenZOutputFile.finish();
    assertTrue(tempFile.exists());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishThrowsIOExceptionOnAlreadyFinished_cIfe1() throws IOException {
    File tempFile = File.createTempFile("test", ".7z");
    tempFile.deleteOnExit();
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(tempFile);
    sevenZOutputFile.finish();
    assertThrows(IOException.class, () -> sevenZOutputFile.finish());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWhenNotFinished() throws Exception {
        // The @InjectMocks annotation automatically injects the mocked SeekableByteChannel into the SevenZOutputFile
        // Arrange
        // Simulate that the finish method has not been called yet (finished is false by default)
        doNothing().when(channel).close();
        // Act
        sevenZOutputFile.close();
        // Assert
        verify(channel, times(1)).close(); // Verify that channel.close() was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWhenAlreadyFinished() throws Exception {
        // The @InjectMocks annotation automatically injects the mocked SeekableByteChannel into the SevenZOutputFile
        // Arrange
        // Simulate that the file has already been finished
        sevenZOutputFile.finish();
        doNothing().when(channel).close();
        // Act
        sevenZOutputFile.close();
        // Assert
        verify(channel, times(1)).close(); // Verify that channel.close() was called
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseChannelThrowsIOException() throws Exception {
        // The @InjectMocks annotation automatically injects the mocked SeekableByteChannel into the SevenZOutputFile
        // Arrange
        doThrow(IOException.class).when(channel).close();
        // Act and Assert
        assertThrows(IOException.class, () -> sevenZOutputFile.close(), "IOException should be thrown when channel.close() fails");
    }
}