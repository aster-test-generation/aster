/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithEmptyInput_imRx0() {
    HashSet<Integer> result = Sets.newHashSet();
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithSingleElement_cTFb1_1() {
    HashSet<String> result = Sets.newHashSet("apple");
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithSingleElement_cTFb1_2() {
    HashSet<String> result = Sets.newHashSet("apple");
    assertTrue(result.contains("apple"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMultipleElements_KoBS2_1() {
    HashSet<Integer> result = Sets.newHashSet(1, 2, 3, 4);
    assertEquals(4, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMultipleElements_KoBS2_2() {
    HashSet<Integer> result = Sets.newHashSet(1, 2, 3, 4);
    assertTrue(result.containsAll(Arrays.asList(1, 2, 3, 4)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithDuplicateElements_ItMw3_1() {
    HashSet<String> result = Sets.newHashSet("banana", "banana");
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithDuplicateElements_ItMw3_2() {
    HashSet<String> result = Sets.newHashSet("banana", "banana");
    assertTrue(result.contains("banana"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithNullElement_iPXq4_1() {
    HashSet<String> result = Sets.newHashSet((String) null);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithNullElement_iPXq4_2() {
    HashSet<String> result = Sets.newHashSet((String) null);
    assertTrue(result.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMultipleNullElements_KhbB5_1() {
    HashSet<String> result = Sets.newHashSet(null, null, null);
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMultipleNullElements_KhbB5_2() {
    HashSet<String> result = Sets.newHashSet(null, null, null);
    assertTrue(result.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMixedElements_Fntp6_1() {
    HashSet<Object> result = Sets.newHashSet("apple", 1, "banana");
    assertEquals(3, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithMixedElements_Fntp6_2() {
    HashSet<Object> result = Sets.newHashSet("apple", 1, "banana");
    assertTrue(result.containsAll(Arrays.asList("apple", 1, "banana")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithDifferentTypeElements_rWwI7_1() {
    HashSet<Object> result = Sets.newHashSet("apple", 1, 3.14, true);
    assertEquals(4, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithDifferentTypeElements_rWwI7_2() {
    HashSet<Object> result = Sets.newHashSet("apple", 1, 3.14, true);
    assertTrue(result.containsAll(Arrays.asList("apple", 1, 3.14, true)));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithComplexObjects_ACco8_1() {
    HashSet<List<Integer>> result = Sets.newHashSet(Arrays.asList(1, 2), Arrays.asList(3, 4));
    assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithComplexObjects_ACco8_2() {
    HashSet<List<Integer>> result = Sets.newHashSet(Arrays.asList(1, 2), Arrays.asList(3, 4));
    assertTrue(result.containsAll(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4))));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithEmptyStrings_TvDl9_1() {
    HashSet<String> result = Sets.newHashSet("", "", "");
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewHashSetWithEmptyStrings_TvDl9_2() {
    HashSet<String> result = Sets.newHashSet("", "", "");
    assertTrue(result.contains(""));}
}