/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOffset_ZwPf0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    long expected = 0; // Assuming default offset is 0 if not set explicitly
    assertEquals(expected, entry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessTime_jLvg0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    Date newAccessTime = new Date();
    entry.setAccessTime(newAccessTime);
    assertEquals(newAccessTime.getTime(), entry.getAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithValidPermissions_zDEd0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int mode = 0755; // typical permission for files (rwxr-xr-x)
    entry.setMode(mode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDeleted_vEOx0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    assertFalse(entry.isDeleted());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_BumD0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "simpleTestName");
    assertEquals("testName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_ZTGA0() throws Exception {
    long expectedTime = 1700000000000L;
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    Date expectedDate = new Date(expectedTime);
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringReturnsName_YpGx0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    assertEquals("testName", entry.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOffset_ipui0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    entry.setOffset(12345L);
    assertEquals(12345L, entry.getOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGeneration_RvPW0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedGeneration = 0; // Assuming default generation is 0 as not set in constructor or shown in class
    assertEquals(expectedGeneration, entry.getGeneration());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSimpleName_PQvD0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("full/path/to/file", "file");
    String expected = "file";
    String actual = entry.getSimpleName();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNlink_eDZa0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedNlink = 0; // Assuming default nlink value is 0 as not shown in the constructor or set elsewhere
    assertEquals(expectedNlink, entry.getNlink());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetEntrySize_tsWB0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    long expectedSize = 0; // Assuming default size is 0 as not set in constructor and not visible in provided code
    assertEquals(expectedSize, entry.getEntrySize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGroupId_hzQo0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedGroupId = 0; // Assuming default gid is 0 since it's not set in the constructor
    assertEquals(expectedGroupId, entry.getGroupId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_NullName_omSZ0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setName(null);
        assertNull(entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_RemoveDotSlash_jMuC3() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setName("./filename");
        assertEquals("filename", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_SimpleName_nCBK4() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        entry.setName("filename");
        assertEquals("filename", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUserId_Welt0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedUserId = 0; // Assuming default uid is 0 since it's not set in any constructor
    assertEquals(expectedUserId, entry.getUserId());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_1() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0, entry.getIno());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_2() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0L, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_3() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0, entry.getNlink());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_5() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_6() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertEquals(0, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_7() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertNotNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithEmptyBuffer_ayXD1_8() throws Exception {
    byte[] buffer = new byte[676];
    Arrays.fill(buffer, (byte) 0);
    DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
    assertNotNull(entry.getAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOriginalName_SQhT0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("full/path/to/file", "file");
    assertEquals("full/path/to/file", entry.getOriginalName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderHoles_EQLP0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedHoles = 0; // Assuming expected holes should be 0 as we don't have actual implementation details
    assertEquals(expectedHoles, entry.getHeaderHoles());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreationTime_hPgc0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    Date expected = new Date(); // Assuming ctime is set to current time in constructor or elsewhere
    assertEquals(expected, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_uBRS0() throws Exception {
    DumpArchiveEntry entry = new DumpArchiveEntry("testName", "testSimpleName");
    int expectedVolume = 0; // Assuming default volume is 0 as it's not set in the provided constructors
    assertEquals(expectedVolume, entry.getVolume());
}
}