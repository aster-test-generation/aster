/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.io.input.BoundedInputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarOutputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_validPath_mQin0_1() throws IOException {
    Path testPath = Files.createTempFile("testFile", ".tmp");
    Files.write(testPath, "Sample content".getBytes());
    BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(testPath);
    result.close();
    Files.delete(testPath);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadPath_GPbw0() throws Exception {
    try {
        File tempFile = File.createTempFile("test", ".tmp");
        tempFile.deleteOnExit();
        String expectedPath = tempFile.getAbsolutePath();
        FileInputStream fis = new FileInputStream(tempFile);
        String actualPath = Pack200UnpackerAdapter.readPath(fis);
        assertEquals(expectedPath, actualPath);
    } catch (IOException e) {
        fail("Unexpected IOException: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithValidFile_EoLa0_1() throws IOException {
    Path tempFilePath = Files.createTempFile("testFile", ".tmp");
    File testFile = tempFilePath.toFile();
    BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(testFile);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithValidFile_EoLa0_2() throws IOException {
    Path tempFilePath = Files.createTempFile("testFile", ".tmp");
    File testFile = tempFilePath.toFile();
    BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(testFile);
    assertTrue(result instanceof BoundedInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStream_ValidURL_aHMt0() throws IOException, URISyntaxException {
    URL validUrl = new URL("http://example.com/sample.jar");
    BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(validUrl);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackWithNullOutputStream_Mhnh1_1() throws Exception {
    Pack200UnpackerAdapter adapter = new Pack200UnpackerAdapter();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        adapter.unpack(in, null);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnpackValidStreams_IljR2() throws IOException {
    Pack200UnpackerAdapter adapter = new Pack200UnpackerAdapter();
    InputStream in = new ByteArrayInputStream(new byte[0]);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    JarOutputStream out = new JarOutputStream(baos);
    adapter.unpack(in, out);
    assertTrue(baos.size() >= 0); // Check if the output stream has been written to
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnwrapReturnsCorrectInnerInputStream_Sxou0() throws Exception {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[]{});
    BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
    InputStream result = Pack200UnpackerAdapter.unwrap(bufferedInputStream);
    assertEquals(byteArrayInputStream, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewBoundedInputStreamWithSinglePath_NCoP0() throws IOException {
    String first = "test";
    BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(first);
    assertNotNull(result);
}
}