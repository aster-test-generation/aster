/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;

import org.apache.commons.compress.archivers.zip.ZipUtil;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_dHEc0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_xhgT1() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_udgq2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    Object other = new Object();
    assertFalse(entry.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHostOs_FrSO0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    int expectedHostOs = 0; // Assuming 0 is a valid host OS for the purpose of this test
    assertEquals(expectedHostOs, entry.getHostOs());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullName_TEyv0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertEquals(0, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMethod_xeRl0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertEquals(0, entry.getMethod()); // Assuming default method value is 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMode_xjsg0() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNameWithPathSymFlag_ZrDc0_bZqM0() {
    LocalFileHeader localFileHeader = new LocalFileHeader();
    localFileHeader.arjFlags = LocalFileHeader.Flags.PATHSYM;
    localFileHeader.name = "path/to/file";
    ArjArchiveEntry entry = new ArjArchiveEntry(localFileHeader);
    assertEquals("path" + File.separator + "to" + File.separator + "file", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_UnixTimestamp_Nqca0_fid2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    Date expected = new Date(1700000000L * 1000);
    Date actual = entry.getLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_DosTimestamp_zMKf1_fid2() {
    ArjArchiveEntry entry = new ArjArchiveEntry();
    Date expected = new Date(ZipUtil.dosToJavaTime(0x9FCB65C1L));
    Date actual = entry.getLastModifiedDate();
}
}