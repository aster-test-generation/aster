/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidInput_sxGW0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    byte[] buffer = new byte[] {0x50, 0x4b, 0x03, 0x04}; // Sample ZIP header bytes
    int offset = 0;
    int length = buffer.length;
    try {
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
    } catch (ZipException e) {
        fail("Should not throw ZipException with valid input");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataWithNonZeroLength_ZrAf0_1() throws Exception {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 10;
    Exception exception = assertThrows(ZipException.class, () -> {
        jarMarker.parseFromLocalFileData(data, offset, length);
    });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileDataWithZeroLength_ZbFc1() throws Exception {
    JarMarker jarMarker = new JarMarker();
    byte[] data = new byte[10];
    int offset = 0;
    int length = 0;
    assertDoesNotThrow(() -> {
        jarMarker.parseFromLocalFileData(data, offset, length);
    });
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryDataReturnsEmptyArray_OOXH0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getCentralDirectoryData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderId_PWiC0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    ZipShort expected = JarMarker.ID;
    ZipShort actual = jarMarker.getHeaderId();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataDataReturnsEmptyByteArray_rEcN0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    byte[] result = jarMarker.getLocalFileDataData();
    assertArrayEquals(new byte[0], result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInstanceReturnsSingletonInstance_ZKnS0() throws Exception {
    JarMarker firstInstance = JarMarker.getInstance();
    JarMarker secondInstance = JarMarker.getInstance();
    assertSame(firstInstance, secondInstance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataLengthReturnsNull_ZLAc0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    assertNull(jarMarker.getLocalFileDataLength());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryLengthReturnsNull_rDYn0() throws Exception {
    JarMarker jarMarker = new JarMarker();
    assertNull(jarMarker.getCentralDirectoryLength());
}
}