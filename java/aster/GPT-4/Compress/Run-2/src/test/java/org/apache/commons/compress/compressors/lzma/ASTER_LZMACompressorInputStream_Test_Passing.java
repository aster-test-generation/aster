/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ValidSignature_TJgg0() {
        byte[] signature = {0x5d, 0x00, 0x00};
        assertTrue(LZMACompressorInputStream.matches(signature, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_SignatureTooShort_fieT1() {
        byte[] signature = {0x5d, 0x00};
        assertFalse(LZMACompressorInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_NullSignature_ZLWd2() {
        assertFalse(LZMACompressorInputStream.matches(null, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_IncorrectSignature_oiTa3() {
        byte[] signature = {0x5d, 0x01, 0x00};
        assertFalse(LZMACompressorInputStream.matches(signature, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_SignatureTooLong_NOum4() {
        byte[] signature = {0x5d, 0x00, 0x00, 0x01};
        assertTrue(LZMACompressorInputStream.matches(signature, 4));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_LengthTooShort_NrKb5() {
        byte[] signature = {0x5d, 0x00, 0x00};
        assertFalse(LZMACompressorInputStream.matches(signature, 1));
    }
}