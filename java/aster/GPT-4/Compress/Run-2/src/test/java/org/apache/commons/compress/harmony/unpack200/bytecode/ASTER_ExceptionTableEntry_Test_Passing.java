/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExceptionTableEntry_Test_Passing {
private ExceptionTableEntry exceptionTableEntry;
private List<Integer> mockByteCodeOffsets;
private int startPC = 0;
private int endPC = 1;
    private ClassConstantPool mockPool;
@Mock
private int handlerPcRenumbered = 200;
private int catchTypeIndex = 300;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolveWithNullCatchType_fbVw0_EVXY0() {
    ExceptionTableEntry entry = new ExceptionTableEntry(10, 20, 30, null);
    ClassConstantPool pool = new ClassConstantPool();
    entry.resolve(pool);
    assertNull(entry.getCatchType());
}
}