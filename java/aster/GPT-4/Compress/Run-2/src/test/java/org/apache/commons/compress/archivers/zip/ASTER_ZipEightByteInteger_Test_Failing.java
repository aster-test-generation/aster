/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLongConstructor_cYjD0() {
    long testValue = 1234567890123456789L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(testValue);
    byte[] expectedBytes = new byte[] {0,21,21,21,21,21,21,21}; // Adjust this expected value based on actual implementation
    assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyArray_lVtK0() {
        byte[] bytes = new byte[0];
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(BigInteger.ZERO, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSingleByte_AWzH1() {
        byte[] bytes = {0x01};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(BigInteger.ONE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleBytes_zzMP2() {
        byte[] bytes = {0x00, 0x01};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(BigInteger.ONE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeByte_yvId3() {
        byte[] bytes = {(byte) 0xFF};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("-1"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLeadingZeros_NDlA6() {
        byte[] bytes = {0x00, 0x00, 0x01};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(BigInteger.ONE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithAllZeros_Xmyg7() {
        byte[] bytes = {0x00, 0x00, 0x00, 0x00};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(BigInteger.ZERO, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithPositiveAndNegativeBytes_oJDV8() {
        byte[] bytes = {0x01, (byte) 0x80};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("384"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLargePositive_vbid5() {
        BigInteger value = new BigInteger("12345678901234567890");
        byte[] expected = {-46,10, -89, 26, 78, -47, 91, 18};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLargeNegative_tMgv6() {
        BigInteger value = new BigInteger("-12345678901234567890");
        byte[] expected = {46,-11, 88, -27, -79, 46, -92, -19};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithZero_KPhb0() {
        byte[] expected = BigInteger.valueOf(0).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithOne_EghK1() {
        byte[] expected = BigInteger.valueOf(1).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithNegativeOne_YkxD2() {
        byte[] expected = BigInteger.valueOf(-1).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(-1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithMaxLong_TLib3() {
        byte[] expected = BigInteger.valueOf(Long.MAX_VALUE).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(Long.MAX_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithMinLong_SfCq4() {
        byte[] expected = BigInteger.valueOf(Long.MIN_VALUE).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(Long.MIN_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLargePositive_gYeC5() {
        long value = 1234567890123456789L;
        byte[] expected = BigInteger.valueOf(value).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLargeNegative_lEZg6() {
        long value = -1234567890123456789L;
        byte[] expected = BigInteger.valueOf(value).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithSmallPositive_xlvF7() {
        long value = 127L;
        byte[] expected = BigInteger.valueOf(value).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithSmallNegative_MvCK8() {
        long value = -128L;
        byte[] expected = BigInteger.valueOf(value).toByteArray();
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_CXsM0() {
    byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 0, 1};
    int offset = 0;
    long expected = 1L;
    long result = ZipEightByteInteger.getLongValue(bytes, offset);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueFromByteArray_PnPE0_fid2() {
    byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 0, 1};
    long expected = 1L;
    long actual = ZipEightByteInteger.getLongValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesWithLongConstructor_cYjD0_fid2() {
    long testValue = 1234567890123456789L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(testValue);
    byte[] expectedBytes = new byte[] {0, 0, 0, 0, 0, 0, 0, 0}; // Adjust this expected value based on actual implementation
    assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullArray_aRTw4_fid2() {
        byte[] bytes = {0x7F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("9223372036854775807"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullNegativeArray_DtKa5_fid2() {
        byte[] bytes = {(byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("-9223372036854775808"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLargePositive_vbid5_fid2() {
        BigInteger value = new BigInteger("12345678901234567890");
        byte[] expected = {-46, 99, -89, 26, 78, -47, 91, 18};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLargeNegative_tMgv6_fid2() {
        BigInteger value = new BigInteger("-12345678901234567890");
        byte[] expected = {46, -100, 88, -27, -79, 46, -92, -19};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithPositiveNumber_rULy0_fid2() {
    byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1}; // Represents the long value 1
    BigInteger expected = BigInteger.valueOf(1);
    BigInteger result = ZipEightByteInteger.getValue(bytes, 0);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNegativeNumber_XGZf1_fid2() {
    byte[] bytes = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x80}; // Represents the long value -128
    BigInteger expected = BigInteger.valueOf(-128);
    BigInteger result = ZipEightByteInteger.getValue(bytes, 0);
    assertEquals(expected, result);
}
}