/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBlockDeviceFalse_BCBt1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("nonBlockDeviceEntry");
    assertFalse(entry.isBlockDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_rdSp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    long expectedTime = 0; // Assuming default mtime is 0 for uninitialized entries
    assertEquals(expectedTime, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGID_MMcr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setGID(1001);
    assertEquals(1001, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAlignmentBoundary_DefaultConstructor_rLpF4() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    assertEquals(4, entry.getAlignmentBoundary());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_InitializedWithName_unLq0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    assertEquals("testEntry", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInode_sxQp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setInode(12345L);
    assertEquals(12345L, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMaj_aJhx0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    long expected = 0; // Assuming default or initialized to 0 in the constructor or elsewhere
    long actual = entry.getRemoteDeviceMaj();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMaj_ValidValue_Dgib0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)2);
    entry.setRemoteDeviceMaj(12345L);
    assertEquals(12345L, entry.getRemoteDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSelf_ejnO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    assertTrue(entry.equals(entry));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_ZiUx1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    assertFalse(entry.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_rwAo2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    Object other = new Object();
    assertFalse(entry.equals(other));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentName_EDGh3() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("testEntry");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("anotherEntry");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameName_xWaA4() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry("testEntry");
    CpioArchiveEntry entry2 = new CpioArchiveEntry("testEntry");
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNullNameInBoth_xCKw5() {
    CpioArchiveEntry entry1 = new CpioArchiveEntry((String) null);
    CpioArchiveEntry entry2 = new CpioArchiveEntry((String) null);
    assertTrue(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryTrue_MpkD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testDir/");
    assertFalse(entry.isDirectory()); // Assuming isDirectory() should return false for non-directory or incorrect format
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryFalse_vMbA1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "testFile.txt", 1234);
    assertFalse(entry.isDirectory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRemoteDeviceMin_pBpy0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)2, "testEntry");
    long expected = 0; // Assuming default or set value for rmin in this context
    long actual = entry.getRemoteDeviceMin();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedDate_JYXa0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "testEntry", 123L);
    Date expectedDate = new Date(1000 * entry.getTime()); // Assuming getTime() is correctly implemented and accessible
    Date actualDate = entry.getLastModifiedDate();
    assertEquals(expectedDate, actualDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUID_DefaultConstructor_OfLJ0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    assertEquals(0, entry.getUID(), "UID should be initialized to 0 by default");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_DTaX0() {
    short format = 2; // Assuming format '2' is a valid new format
    String name = "testEntry";
    long size = 1234;
    CpioArchiveEntry entry = new CpioArchiveEntry(format, name, size);
    long expectedMaj = 0; // Assuming default major number is 0 for new entries
    assertEquals(expectedMaj, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFormat_efaN0() {
    short expectedFormat = 7;
    try {
        CpioArchiveEntry entry = new CpioArchiveEntry(expectedFormat);
        fail("Expected IllegalArgumentException for unknown header type");
    } catch (IllegalArgumentException e) {
        assertEquals("Unknown header type 7", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceOldFormat_mIcp0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
    assertThrows(UnsupportedOperationException.class, () -> entry.getDevice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMin_gnvX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 2, "testEntry");
    long expected = 0; // Assuming default or initialized to 0, as not specified in the snippet
    long actual = entry.getDeviceMin();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_NullCharset_jMjM1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "testEntry");
        int result = entry.getHeaderPadCount(null);
        assertEquals(0, result); // Assumingnew CpioArchiveEntry().getHeaderPadCount(int) calculates padding based on length
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeTrue_xXRg0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("pipeEntry");
    assertFalse(entry.isPipe()); // Assuming isPipe() should return false for a normal entry name without specific flags
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsPipeFalse_XQYJ1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("regularEntry");
    assertFalse(entry.isPipe());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_True_eGeR0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testfile", 1234L);
    assertFalse(entry.isRegularFile()); // Assuming isRegularFile should return false for this entry type
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsRegularFile_False_GNCG1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testdir");
    assertFalse(entry.isRegularFile());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketTrue_LfdB0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("socketEntry");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSocketFalse_lWuF1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("regularEntry");
    assertFalse(entry.isSocket());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetInode_tCAY0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, "testEntry");
    long expectedInode = 0; // Assuming default inode value is 0, as not specified in the class
    assertEquals(expectedInode, entry.getInode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeConsistency_BUBD0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    int expectedHashCode = entry.hashCode();
    int actualHashCode = entry.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_DefaultConstructor_nNuk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    int result = entry.getHeaderPadCount();
    assertEquals(0, result); // Assuming default pad count is 0 for simplicity
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGID_DefaultConstructor_XpXL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    assertEquals(0, entry.getGID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_teFI0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry", 12345L);
    assertEquals(12345L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberOfLinks_zneL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksForDirectory_DDwE0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("directory/");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksForFile_LWJm1() {
    CpioArchiveEntry entry = new CpioArchiveEntry("file.txt");
    assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberOfLinksCustomNlink_Thoa2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("custom.txt");
    entry.setNumberOfLinks(5);
    assertEquals(5, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_NewFormat_lcMk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)2, "testEntry");
    entry.setRemoteDeviceMin(12345L);
    assertEquals(12345L, entry.getRemoteDeviceMin());
}
@Test
public void testSetSizeAboveUpperBoundary_kLyP2_IHUV0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    assertThrows(IllegalArgumentException.class, () -> entry.setSize(0x100000000L)); // Above the valid range
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_QTOk0_VYZe0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModeWithZeroModeAndTrailerName_eHPf2_EVHn0() {
    final String CPIO_TRAILER = "TRAILER!!!";
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1, CPIO_TRAILER, 0);
    assertEquals(0, entry.getMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHeaderPadCount_NullName_yFYb0_CStr0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short)1);
    int result = entry.getHeaderPadCount(); // Assuming getHeaderPadCount does not require any parameters
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_KXZD0_qgIO0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("initialName");
    entry.setName("updatedName");
    assertEquals("updatedName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeWithinValidRange_LyiL0_eaAL0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setSize(0x10000000); // A valid size within the range
    assertEquals(0x10000000, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeAtUpperBoundary_OCUg1_bOdo0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setSize(0xFFFFFFFFL); // Upper boundary value
    assertEquals(0xFFFFFFFFL, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTime_XwZe0_pOgh0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setTime(123456789L);
    assertEquals(123456789L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUID_FWUb0_mMML0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("testEntry");
    entry.setUID(1001);
    assertEquals(1001, entry.getUID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModeWithValidMode_Uknj0_RrvX0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("somefile");
    entry.setRemoteDeviceMin(1234); // Assuming 1234 is a valid long value for rmin
    assertEquals(1234, entry.getRemoteDeviceMin()); // Assuming there's a getRemoteDeviceMin method to retrieve the rmin
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCharacterDeviceFalse_LQTi1_PdMk0() {
    CpioArchiveEntry entry = new CpioArchiveEntry("regularFile");
    entry.setMode(CpioConstants.C_ISREG);
    assertFalse(entry.isCharacterDevice());
}
}