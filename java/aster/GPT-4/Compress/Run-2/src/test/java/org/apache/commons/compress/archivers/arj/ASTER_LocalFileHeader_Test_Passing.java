/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalFileHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_fQnF0() throws Exception {
        LocalFileHeader header = new LocalFileHeader();
        assertEquals(0, header.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNonNullName_WWTp1() throws Exception {
        LocalFileHeader header = new LocalFileHeader();
        header.name = "TestName";
        assertEquals("TestName".hashCode(), header.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Reflexive_Ixgm0() throws Exception {
        LocalFileHeader header = new LocalFileHeader();
        assertTrue(header.equals(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_XqCS1() throws Exception {
        LocalFileHeader header = new LocalFileHeader();
        assertFalse(header.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_oWDV2() throws Exception {
        LocalFileHeader header = new LocalFileHeader();
        Object other = new Object();
        assertFalse(header.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameData_XOzT3() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        assertTrue(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentArchiverVersionNumber_hoBD4() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.archiverVersionNumber = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentMinVersionToExtract_cJtq5() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.minVersionToExtract = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentHostOS_Btnd6() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.hostOS = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentArjFlags_appk7() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.arjFlags = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentMethod_EDZO8() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.method = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentFileType_DzMn9() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.fileType = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentReserved_vyxO10() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.reserved = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentCompressedSize_vAQH12() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.compressedSize = 1L;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentOriginalSize_biEc13() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.originalSize = 1L;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentOriginalCrc32_AFjF14() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.originalCrc32 = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentFileSpecPosition_QBmG15() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.fileSpecPosition = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentFileAccessMode_wAlJ16() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.fileAccessMode = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentFirstChapter_QUbj17() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.firstChapter = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLastChapter_ipNL18() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.lastChapter = 1;
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentName_kfYE23() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.name = "test";
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentComment_jANi24() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.comment = "test";
        assertFalse(header1.equals(header2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentExtendedHeaders_qgtk25() throws Exception {
        LocalFileHeader header1 = new LocalFileHeader();
        LocalFileHeader header2 = new LocalFileHeader();
        header2.extendedHeaders = new byte[][]{{1}};
        assertFalse(header1.equals(header2));
    }
}