/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValue_OXyg0() {
    ZipShort zipShort1 = new ZipShort(100);
    ZipShort zipShort2 = new ZipShort(100);
    assertTrue(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValue_DiHd1() {
    ZipShort zipShort1 = new ZipShort(100);
    ZipShort zipShort2 = new ZipShort(200);
    assertFalse(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentObjectType_XmHA2() {
    ZipShort zipShort = new ZipShort(100);
    Object otherObject = new Object();
    assertFalse(zipShort.equals(otherObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_IHZQ0_1() {
    int testValue = 0x0102;
    byte[] buffer = new byte[2];
    int offset = 0;
    ZipShort.putShort(testValue, buffer, offset);
    assertEquals((byte) 0x02, buffer[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutShort_IHZQ0_2() {
    int testValue = 0x0102;
    byte[] buffer = new byte[2];
    int offset = 0;
    ZipShort.putShort(testValue, buffer, offset);
    assertEquals((byte) 0x01, buffer[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_ushN0() {
    ZipShort zipShort = new ZipShort(256);
    assertEquals("ZipShort value: 256", zipShort.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InitializedWithInt_efmL0() {
    ZipShort zipShort = new ZipShort(256);
    assertEquals(256, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_ukAZ0() {
    ZipShort zipShort = new ZipShort(256);
    byte[] expectedBytes = new byte[] {0, 1};
    assertArrayEquals(expectedBytes, zipShort.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyArray_IoLr0() {
        byte[] bytes = new byte[0];
        int result = ZipShort.getValue(bytes);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSingleElement_GTUn1() {
        byte[] bytes = new byte[]{0x01};
        int result = ZipShort.getValue(bytes);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTwoElements_ekKJ2() {
        byte[] bytes = new byte[]{0x01, 0x02};
        int result = ZipShort.getValue(bytes);
        assertEquals(513, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMaxByteValues_yxFy3() {
        byte[] bytes = new byte[]{(byte) 0xFF, (byte) 0xFF};
        int result = ZipShort.getValue(bytes);
        assertEquals(65535, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeBytes_olpy4() {
        byte[] bytes = new byte[]{(byte) 0xFE, (byte) 0xFF};
        int result = ZipShort.getValue(bytes);
        assertEquals(65534, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMixedBytes_aKrj5() {
        byte[] bytes = new byte[]{(byte) 0x01, (byte) 0xFF};
        int result = ZipShort.getValue(bytes);
        assertEquals(511, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithLeadingZero_ejdo6() {
        byte[] bytes = new byte[]{0x00, 0x01};
        int result = ZipShort.getValue(bytes);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTrailingZero_ljZX7() {
        byte[] bytes = new byte[]{0x01, 0x00};
        int result = ZipShort.getValue(bytes);
        assertEquals(256, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithAllZeros_lRSs8() {
        byte[] bytes = new byte[]{0x00, 0x00};
        int result = ZipShort.getValue(bytes);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonZeroOffset_yGhi9() {
        byte[] bytes = new byte[]{0x00, 0x01, 0x02, 0x03};
        int result = ZipShort.getValue(bytes, 2);
        assertEquals(515, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithIntConstructor_aNAB0() {
    int testValue = 123;
    ZipShort zipShort = new ZipShort(testValue);
    assertEquals(testValue, zipShort.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesZero_Vgjp0() {
        assertArrayEquals(new byte[]{0, 0}, ZipShort.getBytes(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesOne_GXfT1() {
        assertArrayEquals(new byte[]{0, 1}, ZipShort.getBytes(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesNegativeOne_hejP2() {
        assertArrayEquals(new byte[]{(byte) 0xff, (byte) 0xff}, ZipShort.getBytes(-1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMaxShort_VDzE3() {
        assertArrayEquals(new byte[]{(byte) 0x7f, (byte) 0xff}, ZipShort.getBytes(32767));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMinShort_ECYC4() {
        assertArrayEquals(new byte[]{(byte) 0x80, 0}, ZipShort.getBytes(-32768));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesArbitraryPositive_UkKd5() {
        assertArrayEquals(new byte[]{0x1a, 0x2b}, ZipShort.getBytes(0x1a2b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesArbitraryNegative_rGmA6() {
        assertArrayEquals(new byte[]{(byte) 0xde, (byte) 0xad}, ZipShort.getBytes(-8531));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes255_EZCX7() {
        assertArrayEquals(new byte[]{0x00, (byte) 0xff}, ZipShort.getBytes(255));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes256_DvGy8() {
        assertArrayEquals(new byte[]{0x01, 0x00}, ZipShort.getBytes(256));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes511_kGee9() {
        assertArrayEquals(new byte[]{0x01, (byte) 0xff}, ZipShort.getBytes(511));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_BfOX0() {
    ZipShort original = new ZipShort(100);
    ZipShort cloned = (ZipShort) original.clone();
    assertNotSame(original, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueFromOffset_viWz0() {
    byte[] bytes = new byte[] {0x01, 0x02, 0x03, 0x04};
    int offset = 1;
    int expectedValue = 0x0403; // Assuming little-endian order
    int actualValue = ZipShort.getValue(bytes, offset);
    assertEquals(expectedValue, actualValue);
}
}