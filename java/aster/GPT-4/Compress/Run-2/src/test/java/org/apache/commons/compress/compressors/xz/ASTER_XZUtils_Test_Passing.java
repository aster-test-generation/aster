/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFileNameWithCompressedExtension_EBbf0() throws Exception {
    String testFileName = "archive.tar.gz";
    boolean result = XZUtils.isCompressedFileName(testFileName);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ExactMatch_xYFi0() throws Exception {
        byte[] signature = {0x00, 0x01, 0x02, 0x03, 0x04};
        int length = 5;
        assertTrue(XZUtils.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ShorterLength_JamO1() throws Exception {
        byte[] signature = {0x00, 0x01};
        int length = 2;
        assertFalse(XZUtils.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_LongerLength_lULS2() throws Exception {
        byte[] signature = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05};
        int length = 6;
        assertTrue(XZUtils.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_IncorrectSignature_KZZW3() throws Exception {
        byte[] signature = {0x10, 0x11, 0x12, 0x13, 0x14};
        int length = 5;
        assertFalse(XZUtils.matches(signature, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFilename_uqEy0() throws Exception {
    String input = "example.tar.xz";
    String expected = "example.tar";
    String result = XZUtils.getUncompressedFilename(input);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsCompressedFilenameWithCompressedFile_JUFs0() throws Exception {
    String testFileName = "archive.tar.gz";
    boolean result = XZUtils.isCompressedFilename(testFileName);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFilename_laDM0() throws Exception {
    String inputFileName = "example.txt";
    String expectedOutput = "example.txt.xz";
    String actualOutput = XZUtils.getCompressedFilename(inputFileName);
    assertEquals(expectedOutput, actualOutput);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetUncompressedFileName_DQoo0() throws Exception {
    String input = "file.txt.xz";
    String expected = "file.txt";
    String result = XZUtils.getUncompressedFileName(input);
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompressedFileName_gKRH0() throws Exception {
    String inputFileName = "example.txt";
    String expectedOutput = "example.txt.xz";
    String actualOutput = XZUtils.getCompressedFileName(inputFileName);
    assertEquals(expectedOutput, actualOutput);
}
}