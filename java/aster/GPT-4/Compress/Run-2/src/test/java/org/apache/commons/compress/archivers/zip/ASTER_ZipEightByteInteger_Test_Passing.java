/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValue_yaCt0() {
    ZipEightByteInteger first = new ZipEightByteInteger(new BigInteger("123"));
    ZipEightByteInteger second = new ZipEightByteInteger(new BigInteger("123"));
    assertTrue(first.equals(second));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValue_ooYC1() {
    ZipEightByteInteger first = new ZipEightByteInteger(new BigInteger("123"));
    ZipEightByteInteger second = new ZipEightByteInteger(new BigInteger("456"));
    assertFalse(first.equals(second));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithLongValue_INlB0() {
    long testValue = 123456789L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(testValue);
    assertEquals("ZipEightByteInteger value: 123456789", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithLongConstructor_iFPX0() {
    long testValue = 123456789L;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(testValue);
    assertEquals(new BigInteger(Long.toString(testValue)), zipEightByteInteger.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueFromByteArray_PnPE0() {
    byte[] bytes = new byte[] {0, 0, 0, 0, 0, 0, 0, 1};
    long expected = 1L;
    long actual = ZipEightByteInteger.getLongValue(bytes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullArray_aRTw4() {
        byte[] bytes = {0x7F, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("18446744073709551487"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullNegativeArray_DtKa5() {
        byte[] bytes = {(byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        BigInteger result = ZipEightByteInteger.getValue(bytes);
        assertEquals(new BigInteger("128"), result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeConsistency_irZu0() {
    ZipEightByteInteger zipInt = new ZipEightByteInteger(123456789L);
    int expectedHashCode = zipInt.hashCode();
    assertEquals(expectedHashCode, zipInt.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueFromLongConstructor_fJLk0() {
    long expectedValue = 123456789L;
    ZipEightByteInteger zip = new ZipEightByteInteger(expectedValue);
    long actualValue = zip.getLongValue();
    assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesZero_YKkV0() {
        BigInteger value = BigInteger.ZERO;
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesOne_oVaI1() {
        BigInteger value = BigInteger.ONE;
        byte[] expected = {1, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesNegativeOne_OPSg2() {
        BigInteger value = BigInteger.valueOf(-1);
        byte[] expected = {-1, -1, -1, -1, -1, -1, -1, -1};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMaxLong_eRLy3() {
        BigInteger value = BigInteger.valueOf(Long.MAX_VALUE);
        byte[] expected = {-1, -1, -1, -1, -1, -1, -1, 127};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMinLong_JnVQ4() {
        BigInteger value = BigInteger.valueOf(Long.MIN_VALUE);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, -128};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromByteBoundary_OoYA7() {
        BigInteger value = new BigInteger("256"); // 0x100
        byte[] expected = {0, 1, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesNegativeByteBoundary_edLN8() {
        BigInteger value = new BigInteger("-256"); // -0x100
        byte[] expected = {0, -1, -1, -1, -1, -1, -1, -1};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesArbitraryPositive_Zhqu9() {
        BigInteger value = new BigInteger("4294967296"); // 0x100000000
        byte[] expected = {0, 0, 0, 0, 1, 0, 0, 0};
        assertArrayEquals(expected, ZipEightByteInteger.getBytes(value));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithPositiveNumber_rULy0() {
    byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1}; // Represents the long value 1
    BigInteger expected = BigInteger.valueOf(1);
    BigInteger result = ZipEightByteInteger.getValue(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithNegativeNumber_XGZf1() {
    byte[] bytes = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x80}; // Represents the long value -128
    BigInteger expected = BigInteger.valueOf(-128);
    BigInteger result = ZipEightByteInteger.getValue(bytes, 0);
}
}