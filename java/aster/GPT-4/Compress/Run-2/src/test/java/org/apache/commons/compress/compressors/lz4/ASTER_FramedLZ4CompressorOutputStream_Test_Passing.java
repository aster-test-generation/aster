/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;

import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_FramedLZ4CompressorOutputStream_Test_Passing {
@Mock
    private OutputStream out;
@Mock
    private Parameters params;
@Mock
    private XXHash32 contentHash;
@InjectMocks
    private FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream;
@Mock
    private boolean finished;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteSingleByte() throws Exception {
        // Initialization of mocks is handled by MockitoExtension
        int singleByte = 0xAB;
        framedLZ4CompressorOutputStream.write(singleByte);
        // Verify that write method was called on the mocked OutputStream
        verify(out).write(any(byte[].class), eq(0), eq(1));
        // To ensure the correct byte was written, we capture the byte array argument
        ArgumentCaptor<byte[]> byteCaptor = ArgumentCaptor.forClass(byte[].class);
        verify(out).write(byteCaptor.capture(), eq(0), eq(1));
        byte[] capturedBytes = byteCaptor.getValue();
        // Check that the first byte in the array is the one we wrote
        assertEquals((byte) (singleByte & 0xFF), capturedBytes[0], "The byte written should match the input byte.");
    }
}