/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyTime_SHvU0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    ZipLong result = x5455.getModifyTime();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_dcoe0_1() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    byte[] result = x5455.getCentralDirectoryData();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryData_dcoe0_2() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    byte[] result = x5455.getCentralDirectoryData();
    assertEquals(result.length, x5455.getCentralDirectoryLength().getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetAccessFileTimeWithNonNullTime_tqCF0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    x5455.setAccessFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFlags_Vbgv0() throws Exception {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    byte expected = 0; // Assuming default flag value is 0
    assertEquals(expected, timestamp.getFlags());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_AllNull_OGCc0() throws Exception {
        X5455_ExtendedTimestamp instance = new X5455_ExtendedTimestamp();
        int expected = -123 * (0 & 0x07); // flags are assumed to be 0 as not initialized
        assertEquals(expected, instance.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NoTimePresent_PDAa0_1() throws Exception {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    byte[] result = x.getLocalFileDataData();
    assertEquals(1, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalFileDataData_NoTimePresent_PDAa0_2() throws Exception {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    byte[] result = x.getLocalFileDataData();
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyFileTime_RHHq0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    FileTime expected = FileTime.fromMillis(System.currentTimeMillis()); // Assuming current system time for testing
    FileTime result = x5455.getModifyFileTime();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccessFileTime_lTRu0() throws Exception {
    X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
    FileTime expected = FileTime.fromMillis(System.currentTimeMillis()); // Assuming accessTime is set to current time for testing
    FileTime actual = timestamp.getAccessFileTime();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_faZI0() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertTrue(timestamp.equals(timestamp));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_lpJS1() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        Object other = new Object();
        assertFalse(timestamp.equals(other));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_JiIA2() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        assertFalse(timestamp.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_BothObjectsEqual_ivnZ3() throws Exception {
        X5455_ExtendedTimestamp timestamp1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp timestamp2 = new X5455_ExtendedTimestamp();
        assertTrue(timestamp1.equals(timestamp2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_LengthTooShort_qBHW0() throws Exception {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    byte[] data = new byte[0];
    try {
        x.parseFromLocalFileData(data, 0, 0);
        fail("Expected a ZipException to be thrown");
    } catch (ZipException e) {
        assertEquals("X5455_ExtendedTimestamp too short, only 0 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromLocalFileData_OnlyFlagsPresent_DwMV1() throws Exception {
    X5455_ExtendedTimestamp x = new X5455_ExtendedTimestamp();
    byte[] data = {0x07}; // Flags set for all (modify, access, create)
    try {
        x.parseFromLocalFileData(data, 0, 1);
    } catch (ZipException e) {
        fail("No exception should be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTimeWithNonNullDate_pBbq0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    Date testDate = new Date(); // Current date and time
    x5455.setCreateJavaTime(testDate);
    assertNotNull(testDate); // Check if the date is not null
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_hovr0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    Date testDate = new Date();
    x5455.setModifyJavaTime(testDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit1_accessTimePresent_SgLw0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    boolean result = x5455.isBit1_accessTimePresent();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoFlagsAndNoTimestamps_UmqI0() throws Exception {
    X5455_ExtendedTimestamp xts = new X5455_ExtendedTimestamp();
    String result = xts.toString();
    assertEquals("0x5455 Zip Extra Field: Flags=0 ", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithNoTimestampsPresent_mIlq5() throws Exception {
    X5455_ExtendedTimestamp xts = new X5455_ExtendedTimestamp();
    String result = xts.toString();
    assertFalse(result.contains("Modify:[") || result.contains("Access:[") || result.contains("Create:["));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTime_nrzI0() throws Exception {
        X5455_ExtendedTimestamp timestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        timestamp.setCreateFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryData_ValidData_tWiJ0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    byte[] buffer = new byte[] {0x07, 0x5B, 0x4E, 0x2F, 0x1A, 0x3F, 0x5C, 0x4D};
    int offset = 0;
    int length = buffer.length;
    try {
        x5455.parseFromCentralDirectoryData(buffer, offset, length);
        assertTrue(true); // Assuming no exception is good execution
    } catch (ZipException e) {
        fail("Should not have thrown any exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCreateJavaTime_tVIk0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    Date expected = new Date(); // Assuming current time for simplicity, adjust as needed for actual testing
    Date result = x5455.getCreateJavaTime();
    assertEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetModifyJavaTime_Ipdu0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    Date expected = new Date(); // Assuming modifyTime is set to current time for testing
    assertEquals(expected, x5455.getModifyJavaTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyFileTime_USvS0() throws Exception {
        X5455_ExtendedTimestamp x5455_extendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        x5455_extendedTimestamp.setModifyFileTime(time);
        assertNotNull(x5455_extendedTimestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit2_createTimePresent_ZEks0() throws Exception {
    X5455_ExtendedTimestamp x5455 = new X5455_ExtendedTimestamp();
    boolean result = x5455.isBit2_createTimePresent();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneMethod_gcQz0_1() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
    assertNotNull(cloned);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloneMethod_gcQz0_2() throws CloneNotSupportedException {
    X5455_ExtendedTimestamp original = new X5455_ExtendedTimestamp();
    X5455_ExtendedTimestamp cloned = (X5455_ExtendedTimestamp) original.clone();
    assertNotSame(original, cloned);}
}