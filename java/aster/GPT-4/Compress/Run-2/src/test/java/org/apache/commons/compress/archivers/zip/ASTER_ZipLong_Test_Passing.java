/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong_TmjK0() {
    long testValue = 0x0102030405060708L;
    byte[] buffer = new byte[8];
    int offset = 0;
    ZipLong.putLong(testValue, buffer, offset);
    assertArrayEquals(new byte[]{8, 7, 6, 5, 4, 3, 2, 1}, buffer);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValue_jOgu0() {
    ZipLong zl1 = new ZipLong(123);
    ZipLong zl2 = new ZipLong(123);
    assertTrue(zl1.equals(zl2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValue_gDPi1() {
    ZipLong zl1 = new ZipLong(123);
    ZipLong zl2 = new ZipLong(456);
    assertFalse(zl1.equals(zl2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentObjectType_UKkl2() {
    ZipLong zl1 = new ZipLong(123);
    Object o = new Object();
    assertFalse(zl1.equals(o));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithIntValue_rzYv0() {
    ZipLong zipLong = new ZipLong(123);
    assertEquals("ZipLong value: 123", zipLong.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue_InitializedWithInt_cNec0() {
    ZipLong zipLong = new ZipLong(123456789);
    assertEquals(123456789L, zipLong.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesFromLongValue_MbSh0() {
    long testValue = 123456789L;
    ZipLong zipLong = new ZipLong(testValue);
    byte[] expectedBytes = new byte[]{(byte) (testValue & 0xff),
                                      (byte) ((testValue >> 8) & 0xff),
                                      (byte) ((testValue >> 16) & 0xff),
                                      (byte) ((testValue >> 24) & 0xff),
                                      (byte) ((testValue >> 32) & 0xff),
                                      (byte) ((testValue >> 40) & 0xff),
                                      (byte) ((testValue >> 48) & 0xff),
                                      (byte) ((testValue >> 56) & 0xff)};
    assertArrayEquals(expectedBytes, zipLong.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyArray_gvag0() {
        byte[] bytes = new byte[0];
        long result = ZipLong.getValue(bytes);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSingleByte_DYAO1() {
        byte[] bytes = {1};
        long result = ZipLong.getValue(bytes);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMultipleBytes_ncxE2() {
        byte[] bytes = {0, 1, 2, 3};
        long result = ZipLong.getValue(bytes);
        assertEquals(50462976, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeByte_IrnO3() {
        byte[] bytes = {-1};
        long result = ZipLong.getValue(bytes);
        assertEquals(255, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMaxByteValue_liCr4() {
        byte[] bytes = {127};
        long result = ZipLong.getValue(bytes);
        assertEquals(127, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMinByteValue_UlCr5() {
        byte[] bytes = {-128};
        long result = ZipLong.getValue(bytes);
        assertEquals(128, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullByteArray_tGyE6() {
        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1};
        long result = ZipLong.getValue(bytes);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithFullNegativeByteArray_ZPPT7() {
        byte[] bytes = {-1, -1, -1, -1, -1, -1, -1, -1};
        long result = ZipLong.getValue(bytes);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithMixedBytes_RsUe8() {
        byte[] bytes = {0, 1, -1, 127};
        long result = ZipLong.getValue(bytes);
        assertEquals(2130706688, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOffset_mjBN9() {
        byte[] bytes = {0, 0, 1, 0, 0, 0, 0, 2};
        long result = ZipLong.getValue(bytes, 2);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetIntValueFromLong_EnQd0() {
    ZipLong zipLong = new ZipLong(4294967296L); // Value exceeds the int range
    int result = zipLong.getIntValue();
    assertEquals(0, result); // Expected to wrap around to 0
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithIntValue_KBCx0() {
    ZipLong zipLong = new ZipLong(123456789);
    assertEquals(123456789, zipLong.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesZero_ruuh0() {
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipLong.getBytes(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesOne_HvAE1() {
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 1};
        assertArrayEquals(expected, ZipLong.getBytes(1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesNegativeOne_dCQB2() {
        byte[] expected = new byte[]{-1, -1, -1, -1, -1, -1, -1, -1};
        assertArrayEquals(expected, ZipLong.getBytes(-1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMaxLong_nrpD3() {
        byte[] expected = new byte[]{127, -1, -1, -1, -1, -1, -1, -1};
        assertArrayEquals(expected, ZipLong.getBytes(Long.MAX_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMinLong_WnTW4() {
        byte[] expected = new byte[]{-128, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipLong.getBytes(Long.MIN_VALUE));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesArbitraryPositive_hWEG5() {
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 1, -30, 112};
        assertArrayEquals(expected, ZipLong.getBytes(123456L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesArbitraryNegative_Carp6() {
        byte[] expected = new byte[]{-1, -1, -1, -1, -1, -2, 29, -112};
        assertArrayEquals(expected, ZipLong.getBytes(-123456L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesHighByte_UdkI7() {
        byte[] expected = new byte[]{1, 0, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expected, ZipLong.getBytes(72057594037927936L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLowByte_DFIW8() {
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 0, 2};
        assertArrayEquals(expected, ZipLong.getBytes(2L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesMidRange_YsdX9() {
        byte[] expected = new byte[]{0, 0, 0, 0, 0, 0, 2, 0};
        assertArrayEquals(expected, ZipLong.getBytes(512L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutLong_CHWI0() {
    int value = 123456789;
    byte[] buffer = new byte[8];
    int offset = 0;
    ZipLong zipLong = new ZipLong(value);
    zipLong.putLong(buffer, offset);
    ZipLong result = new ZipLong(buffer, offset);
    assertEquals(value, result.getValue()); // Assuming getValue() method exists to retrieve the value from ZipLong
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClone_fDoq0() {
    ZipLong original = new ZipLong(123);
    ZipLong cloned = (ZipLong) original.clone();
    assertNotSame(original, cloned);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithOffset_NjOF0() {
    byte[] bytes = {0x78, 0x56, 0x34, 0x12, 0x00, 0x00, 0x00, 0x00};
    int offset = 1;
    long expected = 0x12345678;
    long result = ZipLong.getValue(bytes, offset);
    assertEquals(expected, result);
}
}