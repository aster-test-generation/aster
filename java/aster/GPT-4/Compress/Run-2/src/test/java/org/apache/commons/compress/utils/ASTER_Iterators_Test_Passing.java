/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Iterators_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAllWithEmptyCollection_NIQB0_1() {
    Collection<Integer> collection = new ArrayList<>();
    List<Integer> elements = Arrays.asList(1, 2, 3);
    Iterator<Integer> iterator = elements.iterator();
    boolean result = Iterators.addAll(collection, iterator);
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAllWithEmptyCollection_NIQB0_2() {
    Collection<Integer> collection = new ArrayList<>();
    List<Integer> elements = Arrays.asList(1, 2, 3);
    Iterator<Integer> iterator = elements.iterator();
    boolean result = Iterators.addAll(collection, iterator);
    assertEquals(3, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAllWithNonEmptyCollection_rjnC1_1() {
    Collection<Integer> collection = new ArrayList<>(Arrays.asList(4, 5));
    List<Integer> elements = Arrays.asList(1, 2, 3);
    Iterator<Integer> iterator = elements.iterator();
    boolean result = Iterators.addAll(collection, iterator);
    assertTrue(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAllWithNonEmptyCollection_rjnC1_2() {
    Collection<Integer> collection = new ArrayList<>(Arrays.asList(4, 5));
    List<Integer> elements = Arrays.asList(1, 2, 3);
    Iterator<Integer> iterator = elements.iterator();
    boolean result = Iterators.addAll(collection, iterator);
    assertEquals(5, collection.size());}
}