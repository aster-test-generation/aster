/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.z;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_ValidSignature_nnYX0() throws Exception {
        byte[] signature = {0x1f, (byte) 0x8b, 0x00, 0x00};
        assertTrue(ZCompressorInputStream.matches(signature, 4));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_InvalidSignatureWrongMagicNumbers_UcLK1() throws Exception {
        byte[] signature = {0x1f, 0x00, 0x00, 0x00};
        assertFalse(ZCompressorInputStream.matches(signature, 4));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_InvalidLength_QeDl2() throws Exception {
        byte[] signature = {0x1f, (byte) 0x8b};
        assertFalse(ZCompressorInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_NullSignature_nJLu3() throws Exception {
        assertFalse(ZCompressorInputStream.matches(null, 4));
    }
}