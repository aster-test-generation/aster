/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassIndex_KSix0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 5, 10, 15, 20);
    int result = icTuple.outerClassIndex();
    assertEquals(20, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterIsAnonymousReturnsFalse_sVtN0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    assertFalse(icTuple.outerIsAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_WithFlagSet_sGRg0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0x0004, "C2", "N", 0, 1, 2, 3);
    assertTrue(icTuple.nestedExplicitFlagSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNestedExplicitFlagSet_WithoutFlagSet_nhXt1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 0x0000, "C2", "N", 0, 1, 2, 3);
    assertFalse(icTuple.nestedExplicitFlagSet());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassNameIndex_zExF0() throws Exception {
    IcTuple icTuple = new IcTuple("ClassC", 5, "ClassC2", "NameN", 1, 2, 3, 4);
    int expected = 4;
    int actual = icTuple.simpleClassNameIndex();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNonNullFields_oKVq0() throws Exception {
    IcTuple tuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    int expectedHashCode = 17;
    expectedHashCode += "A".hashCode();
    expectedHashCode += "B".hashCode();
    expectedHashCode += "C".hashCode();
    assertEquals(expectedHashCode, tuple.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithNullFields_CMyX1() throws Exception {
    IcTuple tuple = new IcTuple(null, 1, null, null, 0, 1, 2, 3);
    int expectedHashCode = 17;
    assertEquals(expectedHashCode, tuple.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsAnonymousTrue_xmmO0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    assertTrue(icTuple.isAnonymous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetC2_Caep0() throws Exception {
    IcTuple icTuple = new IcTuple("valueC", 10, "expectedC2", "valueN", 1, 2, 3, 4);
    assertEquals("expectedC2", icTuple.getC2());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeEqualsBothNull_dOwn0() throws Exception {
    IcTuple icTuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertTrue(icTuple.nullSafeEquals(null, null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeEqualsFirstNull_NIAk1() throws Exception {
    IcTuple icTuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertFalse(icTuple.nullSafeEquals(null, "test"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullSafeEqualsSecondNull_wXRj2() throws Exception {
    IcTuple icTuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertFalse(icTuple.nullSafeEquals("test", null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSimpleClassName_KRSj0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    String expected = "IcTuple";
    String actual = icTuple.simpleClassName();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsMemberTrue_Aaxl0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    assertTrue(icTuple.isMember());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_vQXB0() throws Exception {
    IcTuple tuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertTrue(tuple.equals(tuple));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_Qkta1() throws Exception {
    IcTuple tuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertFalse(tuple.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_QCVx2() throws Exception {
    IcTuple tuple = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    Object differentClassObject = new Object();
    assertFalse(tuple.equals(differentClassObject));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValues_KBtb3() throws Exception {
    IcTuple tuple1 = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    IcTuple tuple2 = new IcTuple("X", 1, "Y", "Z", 0, 1, 2, 3);
    assertFalse(tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValuesDifferentObjects_dUFT4() throws Exception {
    IcTuple tuple1 = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    IcTuple tuple2 = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    assertTrue(tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentC2_PxqI5() throws Exception {
    IcTuple tuple1 = new IcTuple("A", 1, "B", "C", 0, 1, 2, 3);
    IcTuple tuple2 = new IcTuple("A", 1, "X", "C", 0, 1, 2, 3);
    assertFalse(tuple1.equals(tuple2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetC_yqYg0() throws Exception {
    IcTuple icTuple = new IcTuple("TestC", 5, "TestC2", "TestN", 1, 2, 3, 4);
    assertEquals("TestC", icTuple.getC());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_xDse0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    String expected = "IcTuple (IcTuple in null)";
    String actual = icTuple.toString();
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testOuterClassString_fzrI0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    String result = icTuple.outerClassString();
    assertEquals("Expected string from outerClassString", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetN_OoKL0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "ExpectedN", 0, 1, 2, 3);
    assertEquals("ExpectedN", icTuple.getN());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFReturnsCorrectValue_Ezjj0() throws Exception {
    IcTuple icTuple = new IcTuple("exampleC", 5, "exampleC2", "exampleN", 1, 2, 3, 4);
    assertEquals(5, icTuple.getF());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTupleIndex_UIzH0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 2, 3);
    assertEquals(3, icTuple.getTupleIndex());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_NoDollarSign_KVlD0() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String[] result = icTuple.innerBreakAtDollar("ClassName");
    assertArrayEquals(new String[]{"ClassName"}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_SingleDollarSign_pjlf1() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String[] result = icTuple.innerBreakAtDollar("Class$Name");
    assertArrayEquals(new String[]{"Class", "Name"}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_MultipleDollarSigns_QnuL2() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String[] result = icTuple.innerBreakAtDollar("Class$Name$Test");
    assertArrayEquals(new String[]{"Class", "Name", "Test"}, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInnerBreakAtDollar_DollarAtStart_RcqV3() throws Exception {
    IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
    String[] result = icTuple.innerBreakAtDollar("$ClassName");
    assertArrayEquals(new String[]{"", "ClassName"}, result);
}
}