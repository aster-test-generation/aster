/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnparseableExtraFieldData_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryDataWhenCentralDirectoryDataIsNull_qBfV0() {
    UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
    byte[] expected = unparseableExtraFieldData.getLocalFileDataData();
    byte[] actual = unparseableExtraFieldData.getCentralDirectoryData();
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_NullData_APDb0() {
        UnparseableExtraFieldData fieldData = new UnparseableExtraFieldData();
        ZipShort result = fieldData.getLocalFileDataLength();
        assertEquals(0, ZipShort.getValue(result.getBytes()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithBoundaryOffset_APbp1_hXfO0_1() {
    UnparseableExtraFieldData extraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = {0x01, 0x02, 0x03, 0x04, 0x05};
    int offset = 0;
    int length = 5;
    extraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
    ZipShort lengthZipShort = extraFieldData.getCentralDirectoryLength();
    assertEquals(5, lengthZipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseFromCentralDirectoryDataWithBoundaryOffset_APbp1_hXfO0_2() {
    UnparseableExtraFieldData extraFieldData = new UnparseableExtraFieldData();
    byte[] buffer = {0x01, 0x02, 0x03, 0x04, 0x05};
    int offset = 0;
    int length = 5;
    extraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
    ZipShort lengthZipShort = extraFieldData.getCentralDirectoryLength();
    assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05}, extraFieldData.getCentralDirectoryData());}
}