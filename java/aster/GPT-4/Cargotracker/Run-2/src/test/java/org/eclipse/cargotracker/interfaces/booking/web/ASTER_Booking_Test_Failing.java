/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_ValidUnlocode_PgOA0() {
    Booking booking = new Booking();
    booking.init(); // Initialize to set up locations and other necessary fields
    String expectedOriginName = "New York";
    booking.setOriginUnlocode("NYC");
    assertEquals(expectedOriginName, booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_SetsDestinationName_zomB0() {
    Booking booking = new Booking();
    booking.init(); // Initialize to set up locations
    String validUnlocode = "USNYC"; // Assuming "USNYC" is a valid UN/LOCODE in the locations list
    String expectedDestinationName = "New York"; // Assuming the name corresponding to "USNYC" is "New York"
    booking.setDestinationUnlocode(validUnlocode);
    assertEquals(expectedDestinationName, booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTodayReturnsCurrentDate_QVbU0() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    LocalDate actual = booking.getToday();
    assertNull(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBookable_hwqD0_fid2() {
    Booking booking = new Booking();
    boolean result = booking.isBookable();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_upYy0_fid2() {
    Booking booking = new Booking();
    long expected = 0; // Assuming default duration is 0
    long actual = booking.getDuration();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginName_IjfQ0_fid2() {
    Booking booking = new Booking();
    assertEquals("Expected origin name", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_ValidUnlocode_PgOA0_fid2() {
    Booking booking = new Booking();
    String expectedOriginName = "New York";
    booking.setOriginUnlocode("NYC");
    assertEquals(expectedOriginName, booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_SetsDestinationName_zomB0_fid2() {
    Booking booking = new Booking();
    String validUnlocode = "USNYC"; // Assuming "USNYC" is a valid UN/LOCODE in the locations list
    String expectedDestinationName = "New York"; // Assuming the name corresponding to "USNYC" is "New York"
    booking.setDestinationUnlocode(validUnlocode);
    assertEquals(expectedDestinationName, booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTodayReturnsCurrentDate_QVbU0_fid2() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    LocalDate actual = booking.getToday();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_BookableTrue_APyV0_uavb0() {
    Booking booking = new Booking();
    booking.init(); // Properly initializes 'today' using the method designed for it
    booking.setArrivalDeadline(booking.getToday().plusDays(10)); // Assuming MIN_JOURNEY_DURATION is less than 10
    booking.deadlineUpdated();
    assertTrue(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_BookableFalse_smgC1_iehG0() {
    Booking booking = new Booking();
    booking.init(); // Initialize today and locations properly using the init method
    booking.setArrivalDeadline(booking.getToday().plusDays(2)); // Assuming MIN_JOURNEY_DURATION is more than 2
    booking.deadlineUpdated();
    assertFalse(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_PgaX0_gzjf0_1() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_PgaX0_gzjf0_2() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }
}