/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_pIuc0() {
    UnLocode unLocode = new UnLocode("USNYC");
    String expected = "USNYC";
    String actual = unLocode.getIdString();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_DqOI0() {
    UnLocode unLocode = new UnLocode("USNYC");
    assertTrue(unLocode.equals(unLocode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_bsFC1() {
    UnLocode unLocode = new UnLocode("USNYC");
    assertFalse(unLocode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_weIQ2() {
    UnLocode unLocode = new UnLocode("USNYC");
    Object other = new Object();
    assertFalse(unLocode.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentUnLocode_tOKF3() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("GBLON");
    assertFalse(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_qOKV0() {
    UnLocode unLocode = new UnLocode("USNYC");
    assertEquals("USNYC", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_WithSameUnLocode_ShouldReturnTrue_RUto0() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("USNYC");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_WithDifferentUnLocode_ShouldReturnFalse_xzym1() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("GBLON");
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_WithNull_ShouldReturnFalse_QbWT2() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = null;
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_hwcw0() {
    UnLocode unLocode = new UnLocode("USNYC");
    int firstHash = unLocode.hashCode();
    int secondHash = unLocode.hashCode();
    assertEquals(firstHash, secondHash);
  }
}