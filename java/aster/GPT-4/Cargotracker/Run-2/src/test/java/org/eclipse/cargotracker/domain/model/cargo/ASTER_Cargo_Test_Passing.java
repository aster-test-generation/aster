/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Passing {
  private Cargo cargo;
  private TrackingId trackingId;
  private RouteSpecification routeSpecification;
  @Mock
  private Itinerary itinerary;
  @Mock
  private Delivery delivery;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Delivery derivedDelivery;
  private Itinerary mockItinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue() throws Exception {
    trackingId = mock(TrackingId.class);
    routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    assertTrue(cargo.equals(cargo), "Cargo should be equal to itself.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_ReturnsFalse() throws Exception {
    trackingId = mock(TrackingId.class);
    routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    assertFalse(cargo.equals(null), "Cargo should not be equal to null.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse() throws Exception {
    trackingId = mock(TrackingId.class);
    routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    Object differentObject = new Object();
    assertFalse(cargo.equals(differentObject), "Cargo should not be equal to an object of a different class.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringReturnsTrackingId_BlwG0() {
    TrackingId trackingId = new TrackingId("ABC123");
    RouteSpecification routeSpecification = new RouteSpecification();
    Cargo cargo = new Cargo(trackingId, routeSpecification);
    assertEquals("ABC123", cargo.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId() throws Exception {
    trackingId = mock(TrackingId.class);
    RouteSpecification routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    when(trackingId.getIdString()).thenReturn("ABC123");
    TrackingId result = cargo.getTrackingId();
    assertEquals("ABC123", result.getIdString());
    verify(trackingId).getIdString(); // Verify that getIdString was called on the mocked TrackingId object
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteSpecification() throws Exception {
    // Mocking RouteSpecification
    routeSpecification = mock(RouteSpecification.class);
    // Creating a Cargo instance with a mocked RouteSpecification
    cargo = new Cargo(new TrackingId("ABC123"), routeSpecification);
    // Act
    RouteSpecification result = cargo.getRouteSpecification();
    // Assert
    assertEquals(routeSpecification, result, "The returned RouteSpecification should be the same as the one set in Cargo");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetItineraryWhenItineraryIsNull_GtWc0() {
    Cargo cargo = new Cargo();
    Itinerary result = cargo.getItinerary();
    assertEquals(Itinerary.EMPTY_ITINERARY, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrigin_mllO0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Cargo cargo = new Cargo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrigin_jCCe0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Cargo cargo = new Cargo();
    cargo.setOrigin(origin);
  }
}