/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_SslH0() {
    EventLogger logger = new EventLogger();
    String expectedPattern = DateConverter.DATE_TIME_FORMAT;
    assertEquals(expectedPattern, logger.getCompletionTimePattern());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_vZcm0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default or set via other means if available
    assertEquals(expected, logger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_OxYF0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default trackingId is null if not set
    String actual = logger.getTrackingId();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypesReturnsCorrectMapping_tGzs0() {
    EventLogger logger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = logger.getEventTypes();
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
      assertEquals(type, result.get(type));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_ejPC0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default location is null
    assertEquals(expected, logger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_NIwb0() {
    EventLogger logger = new EventLogger();
    HandlingEvent.Type expected = null; // Assuming null since no initialization or setters are shown
    assertEquals(expected, logger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_cCDW0_fid1() {
    EventLogger logger = new EventLogger();
    LocalDateTime expected = LocalDateTime.now(); // Assuming completionTime is set to current time somewhere in EventLogger
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_LqTR0_fid1() {
    EventLogger logger = new EventLogger();
    List<SelectItem> result = logger.getTrackingIds();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyagesReturnsNotNull_ENCv0_fid1() {
    EventLogger logger = new EventLogger();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_gayY0_fid1() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("2023-10-04T15:23:47Z"); // Set a valid tracking ID
    String expected = "2023-10-04T15:23:47Z";
    assertEquals(expected, logger.getTrackingId()); // Assuming getTrackingId() returns the tracking ID
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_wRPr0_huhc0() {
    EventLogger logger = new EventLogger();
    String testLocation = "Test Location";
    logger.setLocation(testLocation);
    assertEquals("Test Location", logger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_XsLf0_XHsz0() {
    EventLogger logger = new EventLogger();
    LocalDateTime testTime = LocalDateTime.now();
    logger.setCompletionTime(testTime);
    assertEquals(testTime, logger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_DrJG0_SGqG0() {
    EventLogger logger = new EventLogger();
    String expectedVoyageNumber = "V12345";
    logger.setVoyageNumber(expectedVoyageNumber);
    assertEquals(expectedVoyageNumber, logger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithNull_eTaP5_fcsq0() {
    EventLogger logger = new EventLogger();
    logger.setEventType(null);
    assertNull(logger.getEventType());
  }
}