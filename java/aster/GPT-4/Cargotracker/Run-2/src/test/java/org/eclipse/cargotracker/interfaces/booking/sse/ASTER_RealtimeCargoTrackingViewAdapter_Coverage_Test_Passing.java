/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_RealtimeCargoTrackingViewAdapter_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_Received_udnI1_OGyZ0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    RealtimeCargoTrackingViewAdapter adapter = spy(new RealtimeCargoTrackingViewAdapter(cargo));
    LocationViewAdapter expectedLocation = new LocationViewAdapter(null); // Assuming constructor requires a parameter, passed null for simplicity
    doReturn(expectedLocation).when(adapter).getLastKnownLocation();
    LocationViewAdapter result = adapter.getLocation();
    verify(adapter).getLastKnownLocation();
    assertSame(expectedLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_OtherStatus_ijkp2_alhN0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.ONBOARD_CARRIER);
    RealtimeCargoTrackingViewAdapter adapter = spy(new RealtimeCargoTrackingViewAdapter(cargo));
    LocationViewAdapter expectedLocation = new LocationViewAdapter(null); // Assuming constructor requires a parameter, null passed for simplicity
    doReturn(expectedLocation).when(adapter).getLastKnownLocation();
    LocationViewAdapter result = adapter.getLocation();
    verify(adapter).getLastKnownLocation();
    assertSame(expectedLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_NotReceived_vmEJ0_MeNo0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.NOT_RECEIVED);
    RealtimeCargoTrackingViewAdapter adapter = spy(new RealtimeCargoTrackingViewAdapter(cargo));
    LocationViewAdapter expectedOrigin = new LocationViewAdapter(null); // Assuming the constructor requires a parameter
    doReturn(expectedOrigin).when(adapter).getOrigin();
    LocationViewAdapter result = adapter.getLocation();
    verify(adapter).getOrigin();
    assertSame(expectedOrigin, result);
  }
}