/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import jakarta.ws.rs.sse.SseBroadcaster;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingService_Test_Failing {
  @Mock
  private SseBroadcaster broadcaster;
  @Mock
  private Logger logger;
  @InjectMocks
  private RealtimeCargoTrackingService realtimeCargoTrackingService;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCargoUpdated() {
    // All initialization is handled by Mockito annotations
    // Create a mock Cargo object
    Cargo mockCargo = mock(Cargo.class);
    // Define behavior of mock
    when(mockCargo.toString()).thenReturn("MockCargo");
    // Call the method under test
    realtimeCargoTrackingService.onCargoUpdated(mockCargo);
    // Verify that logger.log was called with the expected level and message
    verify(logger).log(Level.FINEST, "SSE event broadcast for cargo: {0}", "MockCargo");
    // Verify that broadcaster.broadcast was called with the correct SseEvent
    verify(broadcaster).broadcast(any()); // We can't know the exact SseEvent, so we check any is called
  }
}