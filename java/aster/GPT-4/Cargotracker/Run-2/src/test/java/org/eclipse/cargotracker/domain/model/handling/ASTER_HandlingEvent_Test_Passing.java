/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HandlingEvent_Test_Passing {
  private HandlingEvent handlingEvent;
  private Cargo cargo;
  private LocalDateTime completionTime;
  private LocalDateTime registrationTime;
  private Voyage voyage;
  @Mock
  private TrackingId trackingId;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_WFTI0() {
    HandlingEvent event1 = new HandlingEvent();
    assertTrue(event1.equals(event1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_Ikjj1() {
    HandlingEvent event1 = new HandlingEvent();
    assertFalse(event1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_AGhR2() {
    HandlingEvent event1 = new HandlingEvent();
    Object differentObject = new Object();
    assertFalse(event1.equals(differentObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_rqNf0() throws Exception {
    Location location = mock(Location.class);
    Cargo cargo = mock(Cargo.class);
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Voyage voyage = mock(Voyage.class);
    HandlingEvent handlingEvent = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    assertEquals(location, handlingEvent.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType_MQzh0() throws Exception {
    Cargo mockCargo = mock(Cargo.class);
    Location mockLocation = mock(Location.class);
    Voyage mockVoyage = mock(Voyage.class);
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    HandlingEvent handlingEvent = new HandlingEvent(mockCargo, completionTime, registrationTime, type, mockLocation, mockVoyage);
    assertEquals(HandlingEvent.Type.LOAD, handlingEvent.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetType_Rjde0_BBJY0() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Location location = new Location();
    Voyage voyage = new Voyage();
    HandlingEvent handlingEvent = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    assertEquals(HandlingEvent.Type.LOAD, handlingEvent.getType());
  }
}