/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidTrackingId_nyUY0_1() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_JzAH0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("JPTYO");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    TrackingId result = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(result);
    assertNotNull(result.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidTrackingId_nyUY0() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidTrackingId_HidS1() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_JzAH0_1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("JPTYO");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    TrackingId result = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_JzAH0_2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("JPTYO");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    TrackingId result = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(result.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidTrackingId_nyUY0_2() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidTrackingId_HidS1_1() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidTrackingId_HidS1_2() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(result.isEmpty());
  }
}