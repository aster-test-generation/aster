/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Failing {
  private Voyage voyage;
  private VoyageNumber voyageNumber;
  private Schedule schedule;
  @Mock
  private Voyage otherVoyage;
  @Mock
  private VoyageNumber otherVoyageNumber;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_WithSameVoyageNumber() throws Exception {
    when(voyage.getVoyageNumber()).thenReturn(voyageNumber);
    when(otherVoyage.getVoyageNumber()).thenReturn(voyageNumber);
    when(voyageNumber.sameValueAs(voyageNumber)).thenReturn(true);
    assertTrue(voyage.sameIdentityAs(otherVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_WithDifferentVoyageNumber() throws Exception {
    when(voyage.getVoyageNumber()).thenReturn(voyageNumber);
    when(otherVoyage.getVoyageNumber()).thenReturn(otherVoyageNumber);
    when(voyageNumber.sameValueAs(otherVoyageNumber)).thenReturn(false);
    assertFalse(voyage.sameIdentityAs(otherVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_WithNullOtherVoyage() throws Exception {
    when(voyage.getVoyageNumber()).thenReturn(voyageNumber);
    assertFalse(voyage.sameIdentityAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameFields_fid2() throws Exception {
    voyageNumber = mock(VoyageNumber.class);
    schedule = mock(Schedule.class);
    voyage = new Voyage(voyageNumber, schedule);
    Voyage anotherVoyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.equals(anotherVoyage), "Voyages with the same voyage number and schedule should be equal.");
  }
}