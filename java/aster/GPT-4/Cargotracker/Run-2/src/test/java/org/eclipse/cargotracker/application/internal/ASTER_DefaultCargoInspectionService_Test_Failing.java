/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.application.ApplicationEvents;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEventRepository;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultCargoInspectionService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInspectCargoWithNullCargo_pQWZ0() {
    DefaultCargoInspectionService service = new DefaultCargoInspectionService();
    TrackingId trackingId = new TrackingId("invalidId");
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(trackingId)).thenReturn(null);
    Logger logger = mock(Logger.class);
    service.inspectCargo(trackingId);
    verify(logger).log(Level.WARNING, "Can't inspect non-existing cargo {0}", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInspectCargoWithMisdirectedCargo_diTQ1_gUFq0() {
    DefaultCargoInspectionService service = new DefaultCargoInspectionService();
    TrackingId trackingId = new TrackingId("misdirectedId");
    Cargo cargo = mock(Cargo.class);
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    HandlingHistory handlingHistory = mock(HandlingHistory.class);
    HandlingEventRepository handlingEventRepository = mock(HandlingEventRepository.class);
    when(handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId)).thenReturn(handlingHistory);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isMisdirected()).thenReturn(true);
    ApplicationEvents applicationEvents = mock(ApplicationEvents.class);
    service.inspectCargo(trackingId);
    verify(applicationEvents).cargoWasMisdirected(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInspectCargoWithCargoUnloadedAtDestination_fJqM2_BUAB0() {
    DefaultCargoInspectionService service = new DefaultCargoInspectionService();
    TrackingId trackingId = new TrackingId("destinationId");
    Cargo cargo = mock(Cargo.class);
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    HandlingHistory handlingHistory = mock(HandlingHistory.class);
    HandlingEventRepository handlingEventRepository = mock(HandlingEventRepository.class);
    when(handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId)).thenReturn(handlingHistory);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isUnloadedAtDestination()).thenReturn(true);
    ApplicationEvents applicationEvents = mock(ApplicationEvents.class);
    service.inspectCargo(trackingId);
    verify(applicationEvents).cargoHasArrived(cargo);
  }
}