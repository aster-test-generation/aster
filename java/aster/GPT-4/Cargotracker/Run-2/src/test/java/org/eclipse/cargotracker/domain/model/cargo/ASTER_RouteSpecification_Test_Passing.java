/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Passing {
  @Mock
  private RouteSpecification routeSpecification;
  private LocalDate arrivalDeadline;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_wpVx0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location result = routeSpecification.getDestination();
    assertEquals(destination, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_vIKB0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = routeSpecification.hashCode();
    int actualHashCode = routeSpecification.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_THVB0_OKZh0() {
    UnLocode unLocodeOrigin = new UnLocode("USNYC");
    Location origin = new Location(unLocodeOrigin, "New York");
    UnLocode unLocodeDestination = new UnLocode("GBLON");
    Location destination = new Location(unLocodeDestination, "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location result = routeSpecification.getOrigin();
    assertEquals(origin, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_fxyM0() throws Exception {
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    LocalDate result = routeSpecification.getArrivalDeadline();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_hAEL0_gIqY0() {
    LocalDate expectedDeadline = LocalDate.of(2023, 12, 31);
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, expectedDeadline);
    LocalDate actualDeadline = routeSpecification.getArrivalDeadline();
    assertEquals(expectedDeadline, actualDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_ItineraryIsNull_ReturnsFalse_vFql1_jNRi0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Itinerary itinerary = null;
    assertFalse(routeSpecification.isSatisfiedBy(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue_hOpX0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_ReturnsFalse_Xuks0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_feco0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Object differentObject = new Object();
    assertFalse(routeSpecification.equals(differentObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnsTrue_hBkf0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification anotherSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(anotherSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValues_ReturnsFalse_bvDu0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USLAX"), "Los Angeles");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location differentDestination = new Location(new UnLocode("USCHI"), "Chicago");
    RouteSpecification differentSpecification = new RouteSpecification(origin, differentDestination, arrivalDeadline);
    assertFalse(routeSpecification.equals(differentSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_cFTf0_jIVc0() {
    LocalDate arrivalDeadline = LocalDate.now();
    UnLocode originUnLocode = new UnLocode("USNYC");
    Location origin = new Location(originUnLocode, "New York");
    UnLocode destinationUnLocode = new UnLocode("GBLON");
    Location destination = new Location(destinationUnLocode, "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObjectSameValues_XRRI1_yhZC0() {
    LocalDate arrivalDeadline = LocalDate.now();
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("GBLON");
    Location origin = new Location(originUnLocode, "New York");
    Location destination = new Location(destinationUnLocode, "London");
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_lTCO2_dLyB0() {
    LocalDate arrivalDeadline = LocalDate.now();
    UnLocode unLocodeOrigin = new UnLocode("USNYC");
    UnLocode unLocodeDestination = new UnLocode("GBLON");
    Location origin = new Location(unLocodeOrigin, "New York");
    Location destination = new Location(unLocodeDestination, "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_JWfk3_gQMC0() {
    LocalDate arrivalDeadline = LocalDate.now();
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("GBLON");
    Location origin = new Location(originUnLocode, "New York");
    Location destination = new Location(destinationUnLocode, "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Object differentClassObject = new Object();
    assertFalse(routeSpecification.equals(differentClassObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_1_fid2() throws Exception {
    Location origin = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    Location destination = mock(Location.class);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now());
    Location result = routeSpecification.getOrigin();
    assertEquals(origin.getName(), result.getName());
  }
}