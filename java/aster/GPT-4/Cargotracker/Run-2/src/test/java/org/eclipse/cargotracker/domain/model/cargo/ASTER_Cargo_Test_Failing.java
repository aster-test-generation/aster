/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  private Cargo cargo;
  private TrackingId trackingId;
  private RouteSpecification routeSpecification;
  @Mock
  private Itinerary itinerary;
  @Mock
  private Delivery delivery;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Delivery derivedDelivery;
  private Itinerary mockItinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameIdentity_ReturnsTrue() throws Exception {
    trackingId = mock(TrackingId.class);
    routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    Cargo otherCargo = new Cargo(trackingId, routeSpecification);
    when(trackingId.equals(trackingId)).thenReturn(true);
    when(routeSpecification.equals(routeSpecification)).thenReturn(true);
    assertTrue(cargo.equals(otherCargo), "Cargo should be equal to another cargo with the same identity.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentIdentity_ReturnsFalse() throws Exception {
    trackingId = mock(TrackingId.class);
    routeSpecification = mock(RouteSpecification.class);
    cargo = new Cargo(trackingId, routeSpecification);
    TrackingId differentTrackingId = mock(TrackingId.class);
    RouteSpecification differentRouteSpecification = mock(RouteSpecification.class);
    Cargo otherCargo = new Cargo(differentTrackingId, differentRouteSpecification);
    when(trackingId.equals(differentTrackingId)).thenReturn(false);
    when(routeSpecification.equals(differentRouteSpecification)).thenReturn(false);
    assertFalse(cargo.equals(otherCargo), "Cargo should not be equal to another cargo with a different identity.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString() throws Exception {
    when(trackingId.toString()).thenReturn("TRACK123");
    assertEquals("TRACK123", cargo.toString(), "Cargo toString should return the tracking ID's toString value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode() throws Exception {
    // Initialize mocks and inject them into the cargo object
    // This is automatically done by the @InjectMocks annotation
    // Arrange
    int expectedHashCode = 12345;
    when(trackingId.hashCode()).thenReturn(expectedHashCode);
    // Act
    int actualHashCode = cargo.hashCode();
    // Assert
    assertEquals(expectedHashCode, actualHashCode, "The hash code should match the mocked hash code of the trackingId.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_1() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup the behavior of the mock
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    // Execute the method to be tested
    Delivery result = cargo.getDelivery();
    // Verify the results and interactions
    // Verify that the correct methods were called on the mock
    verify(delivery, times(1)).getTransportStatus();
    verify(delivery, times(1)).getRoutingStatus();
    assertNotNull(result, "Delivery should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_2() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup the behavior of the mock
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    // Execute the method to be tested
    Delivery result = cargo.getDelivery();
    // Verify the results and interactions
    // Verify that the correct methods were called on the mock
    verify(delivery, times(1)).getTransportStatus();
    verify(delivery, times(1)).getRoutingStatus();
    assertEquals(TransportStatus.IN_PORT, result.getTransportStatus(), "Transport status should be IN_PORT");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_3() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup the behavior of the mock
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    // Execute the method to be tested
    Delivery result = cargo.getDelivery();
    // Verify the results and interactions
    // Verify that the correct methods were called on the mock
    verify(delivery, times(1)).getTransportStatus();
    verify(delivery, times(1)).getRoutingStatus();
    assertEquals(RoutingStatus.MISROUTED, result.getRoutingStatus(), "Routing status should be MISROUTED");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup the behavior of the mock
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    // Execute the method to be tested
    Delivery result = cargo.getDelivery();
    // Verify the results and interactions
    assertNotNull(result, "Delivery should not be null");
    assertEquals(TransportStatus.IN_PORT, result.getTransportStatus(), "Transport status should be IN_PORT");
    assertEquals(RoutingStatus.MISROUTED, result.getRoutingStatus(), "Routing status should be MISROUTED");
    // Verify that the correct methods were called on the mock
    verify(delivery, times(1)).getTransportStatus();
    verify(delivery, times(1)).getRoutingStatus();
  }
}