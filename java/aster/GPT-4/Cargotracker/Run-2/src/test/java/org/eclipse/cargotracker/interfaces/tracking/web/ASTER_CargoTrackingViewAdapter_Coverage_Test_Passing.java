/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_CargoTrackingViewAdapter_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_WhenEtaIsNull_bvwY0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getEstimatedTimeOfArrival()).thenReturn(null);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, Collections.emptyList());
    String result = adapter.getEta();
    assertEquals("?", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_CargoDeliveryIsNull_DsDr2_1() {
    Cargo cargo = mock(Cargo.class);
    when(cargo.getDelivery()).thenReturn(null);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, Collections.emptyList());
    Exception exception = assertThrows(NullPointerException.class, adapter::getEta);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_NotRouted_tzLE0() {
    Cargo cargo = mock(Cargo.class);
    Itinerary itinerary = mock(Itinerary.class);
    when(cargo.getItinerary()).thenReturn(itinerary);
    when(itinerary.getLegs()).thenReturn(Collections.emptyList());
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    String status = adapter.getStatusCode();
    assertEquals("NOT_ROUTED", status);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_Claimed_uMGB4() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.CLAIMED);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, null);
    String result = adapter.getStatusText();
    assertEquals("Claimed", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_NotReceived_BpJg5() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_CargoDeliveryIsNull_DsDr2() {
    Cargo cargo = mock(Cargo.class);
    when(cargo.getDelivery()).thenReturn(null);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, Collections.emptyList());
    Exception exception = assertThrows(NullPointerException.class, adapter::getEta);
    assertNotNull(exception);
  }
}