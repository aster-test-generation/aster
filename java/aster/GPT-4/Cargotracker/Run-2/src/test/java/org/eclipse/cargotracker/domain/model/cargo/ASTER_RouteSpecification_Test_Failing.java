/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Failing {
  @Mock
  private RouteSpecification routeSpecification;
  private LocalDate arrivalDeadline;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_1() throws Exception {
    Location origin = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    RouteSpecification routeSpecification = new RouteSpecification(origin, null, null);
    Location result = routeSpecification.getOrigin();
    assertEquals(origin, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_2() throws Exception {
    Location origin = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    RouteSpecification routeSpecification = new RouteSpecification(origin, null, null);
    Location result = routeSpecification.getOrigin();
    assertEquals("New York", result.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_3() throws Exception {
    Location origin = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    RouteSpecification routeSpecification = new RouteSpecification(origin, null, null);
    Location result = routeSpecification.getOrigin();
    assertEquals("USNYC", result.getUnLocode().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_UKWQ0() throws Exception {
    Location destination = mock(Location.class);
    RouteSpecification routeSpecification = new RouteSpecification(null, destination, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_2_fid2() throws Exception {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    when(destination.getName()).thenReturn("Los Angeles");
    UnLocode destUnLocode = new UnLocode("USLAX");
    when(destination.getUnLocode()).thenReturn(destUnLocode);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    Location result = routeSpecification.getOrigin();
    assertEquals("New York", result.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_WbzA0_3_fid2() throws Exception {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    when(origin.getName()).thenReturn("New York");
    UnLocode unLocode = new UnLocode("USNYC");
    when(origin.getUnLocode()).thenReturn(unLocode);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    Location result = routeSpecification.getOrigin();
    assertEquals("New York", result.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_UKWQ0_fid2() throws Exception {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, null);
    assertEquals(destination, routeSpecification.getDestination());
  }
}