/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_RnFP0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default value of unLocode is null
    assertEquals(expected, report.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_BqeS0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default value or set your expected value
    assertEquals(expected, report.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_SHzb0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null, adjust based on actual default or constructor behavior
    assertEquals(expected, report.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_Kwsg0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null, adjust based on actual default or setup
    assertEquals(expected, report.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_xsfJ0_fid1() {
    HandlingReport report = new HandlingReport();
    assertNull(report.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocode_aPxC0_wmXm0() {
    HandlingReport report = new HandlingReport();
    String expectedUnLocode = "USNYC";
    report.setUnLocode(expectedUnLocode);
    assertEquals(expectedUnLocode, report.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_jmlr0_IvQd0() {
    HandlingReport report = new HandlingReport();
    String testValue = "TestEvent";
    report.setEventType(testValue);
    assertEquals("TestEvent", report.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_ZkFr0_ftrK0() {
    HandlingReport report = new HandlingReport();
    String expectedVoyageNumber = "V12345";
    report.setVoyageNumber(expectedVoyageNumber);
    assertEquals(expectedVoyageNumber, report.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_ciNA0_EAxO0() {
    HandlingReport report = new HandlingReport();
    String expectedTime = "2023-10-05T12:00:00";
    report.setCompletionTime(expectedTime);
    assertEquals(expectedTime, report.getCompletionTime());
  }
}