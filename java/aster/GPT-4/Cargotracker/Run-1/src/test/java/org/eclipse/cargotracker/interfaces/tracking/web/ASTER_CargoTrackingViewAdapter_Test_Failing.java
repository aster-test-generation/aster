/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CargoTrackingViewAdapter_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextExpectedActivity_NoActivity_CwDo0() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String result = adapter.getNextExpectedActivity();
    assertEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_AtDestination_yAif1() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    when(delivery.isUnloadedAtDestination()).thenReturn(true);
    when(cargo.getDelivery()).thenReturn(delivery);
    assertEquals("AT_DESTINATION", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusCode_Misdirected_GMQW2() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    when(delivery.isMisdirected()).thenReturn(true);
    when(cargo.getDelivery()).thenReturn(delivery);
    assertEquals("MISDIRECTED", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEtaWithNullEta_HVGt0() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String result = adapter.getEta();
    assertEquals("?", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEtaWithValidEta_VqQH1() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    LocalDateTime expectedEta = LocalDateTime.of(2023, 10, 5, 12, 0);
    Delivery delivery = Mockito.mock(Delivery.class);
    Mockito.when(delivery.getEstimatedTimeOfArrival()).thenReturn(expectedEta);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    String result = adapter.getEta();
    assertEquals("2023-10-05T12:00", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEtaWithNullEta_HVGt0_fid1() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String result = adapter.getLastKnownLocationCode();
    assertEquals("?", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEtaWithValidEta_VqQH1_fid1() {
    Cargo cargo = Mockito.mock(Cargo.class);
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    LocalDateTime expectedEta = LocalDateTime.of(2023, 10, 5, 12, 0);
    Delivery delivery = Mockito.mock(Delivery.class);
    Mockito.when(delivery.getEstimatedTimeOfArrival()).thenReturn(expectedEta);
    Mockito.when(cargo.getDelivery()).thenReturn(delivery);
    String result = adapter.getEta();
    assertEquals("2023-10-05T12:00", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_WhenEtaIsNull_RRwU0_fid2() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    CargoTrackingViewAdapter cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, null);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getEstimatedTimeOfArrival()).thenReturn(null);
    String eta = cargoTrackingViewAdapter.getEta();
    assertEquals("?", eta);
  }
}