/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_hmIe0() {
    EventLogger logger = new EventLogger();
    String expectedPattern = DateConverter.DATE_TIME_FORMAT;
    assertEquals(expectedPattern, logger.getCompletionTimePattern());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_PoGm0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default value or set your expected value
    assertEquals(expected, logger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_ICDs0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default trackingId is null if not set
    String actual = logger.getTrackingId();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_ZRif0() {
    EventLogger logger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = logger.getEventTypes();
    assertNotNull(result);
    assertEquals(HandlingEvent.Type.values().length, result.size());
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
      assertTrue(result.containsKey(type));
      assertEquals(type, result.get(type));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_doJW0() {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default location is null if not set
    assertEquals(expected, logger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_rgMf0() {
    EventLogger logger = new EventLogger();
    HandlingEvent.Type expected = null; // Assuming default or preset value
    assertEquals(expected, logger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_LGhC0() {
    EventLogger logger = new EventLogger();
    List<SelectItem> result = logger.getTrackingIds();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeNull_hRKh5() {
    EventLogger logger = new EventLogger();
    logger.setEventType(null);
    assertNull(logger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_ZRif0_1() {
    EventLogger logger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = logger.getEventTypes();
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_ZRif0_2() {
    EventLogger logger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = logger.getEventTypes();
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
    }
    assertEquals(HandlingEvent.Type.values().length, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_jgNs0_mVho0() {
    EventLogger logger = new EventLogger();
    String expectedLocation = "New York";
    logger.setLocation(expectedLocation);
    assertEquals(expectedLocation, logger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_nktd0_bclF0() {
    EventLogger logger = new EventLogger();
    LocalDateTime expectedTime = LocalDateTime.now();
    logger.setCompletionTime(expectedTime);
    assertEquals(expectedTime, logger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_DajR0_FosP0() {
    EventLogger logger = new EventLogger();
    String expectedVoyageNumber = "V1234";
    logger.setVoyageNumber(expectedVoyageNumber);
    assertEquals(expectedVoyageNumber, logger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithLoad_Nklj0_qVAP0() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("LOAD");
    assertEquals("LOAD", logger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_eoyx1_LeDZ0() {
    EventLogger logger = new EventLogger();
    String expectedTrackingId = "12345";
    logger.setTrackingId(expectedTrackingId);
    assertEquals(expectedTrackingId, logger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_QIwi2_AghX0() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("12345");
    assertEquals("12345", logger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdChangeFromLoadToUnload_Dswb6_RVHL0() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("LOAD");
    logger.setTrackingId("UNLOAD");
    assertEquals("UNLOAD", logger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdChangeFromCustomsToClaim_fbXk7_aMLI0() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("CUSTOMS");
    logger.setTrackingId("CLAIM");
    assertEquals("CLAIM", logger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdChangeFromReceiveToLoad_fjra8_eJwO0() {
    EventLogger logger = new EventLogger();
    logger.setTrackingId("RECEIVE");
    logger.setTrackingId("LOAD");
    assertEquals("LOAD", logger.getTrackingId());
  }
}