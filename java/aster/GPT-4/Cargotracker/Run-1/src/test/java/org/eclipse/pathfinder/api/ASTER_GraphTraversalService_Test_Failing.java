/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathValidInput_kADT0() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("US123", "GB456", "20230101");
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidOriginUnLocode_UWQe1() {
    GraphTraversalService service = new GraphTraversalService();
    try {
      service.findShortestPath("12345", "GB456", "20230101");
      fail("Expected an IllegalArgumentException for invalid origin UN location code");
    } catch (IllegalArgumentException e) {
      assertEquals("Origin UN location code violation", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidDestinationUnLocode_NOgw2() {
    GraphTraversalService service = new GraphTraversalService();
    try {
      service.findShortestPath("US123", "45678", "20230101");
      fail("Expected an IllegalArgumentException for invalid destination UN location code");
    } catch (IllegalArgumentException e) {
      assertEquals("Destination UN location code violation", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_InvalidDeadline_qvNY3() {
    GraphTraversalService service = new GraphTraversalService();
    try {
      service.findShortestPath("US123", "GB456", "202301");
      fail("Expected an IllegalArgumentException for invalid deadline format");
    } catch (IllegalArgumentException e) {
      assertEquals("Deadline value must be eight characters long.", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidParameters_stXW0() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("USABC", "GBDEF", "20230101");
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ValidInput_hnaA0_1() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("US123", "GB456", "20230101");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_ValidInput_hnaA0_2() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("US123", "GB456", "20230101");
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidParameters_stXW0_1() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("USABC", "GBDEF", "20230101");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithValidParameters_stXW0_2() {
    GraphTraversalService service = new GraphTraversalService();
    List<TransitPath> result = service.findShortestPath("USABC", "GBDEF", "20230101");
    assertFalse(result.isEmpty());
  }
}