/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_zvEr0() {
    UnLocode unLocode = new UnLocode("USNYC");
    assertEquals("USNYC", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_ajln0() {
    UnLocode locode = new UnLocode("USNYC");
    assertTrue(locode.equals(locode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_PnYN1() {
    UnLocode locode = new UnLocode("USNYC");
    assertFalse(locode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_IsDT2() {
    UnLocode locode = new UnLocode("USNYC");
    Object other = new Object();
    assertFalse(locode.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentUnLocode_hJMH3() {
    UnLocode locode1 = new UnLocode("USNYC");
    UnLocode locode2 = new UnLocode("GBLON");
    assertFalse(locode1.equals(locode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_tBwp0() {
    UnLocode unLocode = new UnLocode("USNYC");
    assertEquals("USNYC", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithSameUnLocode_IDtd0() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("USNYC");
    assertTrue(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithDifferentUnLocode_Gzom1() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("GBLON");
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithNull_kJrb2() {
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = null;
    assertFalse(unLocode1.sameValueAs(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_WwuJ0() {
    UnLocode unLocode = new UnLocode("USNYC");
    int hashCode1 = unLocode.hashCode();
    int hashCode2 = unLocode.hashCode();
    assertEquals(hashCode1, hashCode2);
  }
}