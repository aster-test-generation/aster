/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_WithEqualNumbers_sZTS0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("ABC123");
    VoyageNumber voyageNumber2 = new VoyageNumber("ABC123");
    boolean result = voyageNumber1.sameValueAs(voyageNumber2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_keoy1_eHAU0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_abUh2_ewMx0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Object other = new Object();
    assertFalse(voyageNumber.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_mGca0_PotI0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertEquals(true, voyageNumber.equals(voyageNumber), "Should return true when comparing the same object");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameVoyageNumber_lUzh4_urBb0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    assertEquals(voyageNumber1, voyageNumber2, "Should return true when comparing the same voyage numbers");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValueAsMethod_ZGhd6_glog0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    assertEquals(voyageNumber1, voyageNumber2, "Should return true as sameValueAs method should confirm same values");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentVoyageNumber_BQbk3_LuKd0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }
}