/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Schedule_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Reflexive_iRbZ0() {
    Schedule schedule = new Schedule();
    assertTrue(schedule.equals(schedule));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullComparison_ckpW1() {
    Schedule schedule = new Schedule();
    assertFalse(schedule.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_VlLR2() {
    Schedule schedule = new Schedule();
    Object differentClassObject = new Object();
    assertFalse(schedule.equals(differentClassObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_EquivalentObjects_ZcQe3() {
    Schedule schedule1 = new Schedule();
    Schedule schedule2 = new Schedule();
    assertTrue(schedule1.equals(schedule2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCarrierMovementsReturnsUnmodifiableList_Pnfx0() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> result = schedule.getCarrierMovements();
    assertThrows(UnsupportedOperationException.class, () -> result.add(new CarrierMovement()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_JZfB0() {
    Schedule schedule = new Schedule();
    int expectedHashCode = schedule.hashCode();
    int actualHashCode = schedule.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}