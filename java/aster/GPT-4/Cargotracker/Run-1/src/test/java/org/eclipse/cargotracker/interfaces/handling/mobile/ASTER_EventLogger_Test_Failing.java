/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_bmpj0() {
    EventLogger logger = new EventLogger();
    LocalDateTime expected = LocalDateTime.now(); // Assuming completionTime is set to current time somewhere in the class
    assertEquals(expected, logger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_FAsc0() {
    EventLogger logger = new EventLogger();
    String expected = "2023-10-04T14:53:00Z"; // Assuming this is the expected format and value
    assertEquals(expected, logger.getCompletionTimeValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationsReturnsNotNull_YARv0_fFzS0() {
    EventLogger logger = new EventLogger();
    assertNotNull(logger.getLocations(), "Locations list should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyagesReturnsNonNullList_Kfsx0_dBzs0() {
    EventLogger logger = new EventLogger();
    assertNotNull(logger.getVoyages(), "Voyages list should not be null");
  }
}