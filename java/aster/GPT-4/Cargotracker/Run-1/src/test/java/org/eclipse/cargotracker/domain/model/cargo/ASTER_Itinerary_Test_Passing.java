/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Itinerary_Test_Passing {
  @Mock
  private Voyage mockVoyage;
  @Mock
  private HandlingEvent mockEvent;
  @InjectMocks
  private Itinerary itinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSelf_FnDZ0() {
    Itinerary itinerary = new Itinerary();
    assertTrue(itinerary.equals(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_lpgW1() {
    Itinerary itinerary = new Itinerary();
    assertFalse(itinerary.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_KwqA2() {
    Itinerary itinerary = new Itinerary();
    Object other = new Object();
    assertFalse(itinerary.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_emptyLegs_HGrE0() {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    assertEquals("Itinerary{legs=[]}", itinerary.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalDateWithEmptyLegs_HZEx0() {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    LocalDateTime result = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInitialDepartureLocationWithEmptyLegs_vejf0_eZip0() {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    Location result = itinerary.getInitialDepartureLocation();
    assertEquals(result, Location.UNKNOWN);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLegWithEmptyLegList_qOlZ0_UFkp0() {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    assertNull(itinerary.getLastLeg());
  }
}