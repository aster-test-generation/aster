/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_tSNo0() {
    Booking booking = new Booking();
    booking.init(); // Initialize to set up locations
    String expectedDestinationUnlocode = "NYC";
    String expectedDestinationName = "New York";
    booking.setDestinationUnlocode(expectedDestinationUnlocode);
    assertEquals(expectedDestinationName, booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBookable_cnjP0_fid2() {
    Booking booking = new Booking();
    boolean result = booking.isBookable();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_tuaK0_fid2() {
    Booking booking = new Booking();
    long expectedDuration = 0; // Assuming default duration is 0
    assertEquals(expectedDuration, booking.getDuration());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_tSNo0_fid2() {
    Booking booking = new Booking();
    String expectedDestinationUnlocode = "NYC";
    String expectedDestinationName = "New York";
    booking.setDestinationUnlocode(expectedDestinationUnlocode);
    assertEquals(expectedDestinationName, booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_TLWu0_fid2() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now(); // Assuming the constructor sets it to the current date
    LocalDate actual = booking.getArrivalDeadline();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_Rokk0_fid2() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    LocalDate actual = booking.getToday();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_QjRN0_wGAI0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("ABC123");
    String result = booking.getOriginUnlocode();
    assertEquals("ABC123", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitSetsCurrentDateAndLocations_KmNX0_Ovcs0_1() {
    Booking booking = new Booking();
    booking.init();
    assertEquals(LocalDate.now(), booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitSetsCurrentDateAndLocations_KmNX0_Ovcs0_2() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }
}