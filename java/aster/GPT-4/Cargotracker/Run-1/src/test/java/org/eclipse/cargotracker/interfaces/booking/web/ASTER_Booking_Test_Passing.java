/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBookable_cnjP0() {
    Booking booking = new Booking();
    boolean result = booking.isBookable();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestinationUnlocode_GXlO0() {
    Booking booking = new Booking();
    String expected = null; // Assuming destinationUnlocode is not set and defaults to null
    assertEquals(expected, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_tuaK0() {
    Booking booking = new Booking();
    long expectedDuration = -1; // Assuming default duration is-1
    assertEquals(expectedDuration, booking.getDuration());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginName_HKRW0() {
    Booking booking = new Booking();
    String expected = null; // Assuming originName is not set and defaults to null
    String actual = booking.getOriginName();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetReturnValue_xGEE0() {
    Booking booking = new Booking();
    String result = booking.getReturnValue();
    assertEquals("/admin/dashboard.xhtml", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_TLWu0() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now(); // Assuming the constructor sets it to the current date
    LocalDate actual = booking.getArrivalDeadline();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_Rokk0() {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    LocalDate actual = booking.getToday();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadline_iLvM0_cWca0() {
    Booking booking = new Booking();
    LocalDate expectedDate = LocalDate.of(2023, 10, 15);
    booking.setArrivalDeadline(expectedDate);
    assertEquals(expectedDate, booking.getArrivalDeadline());
  }
}