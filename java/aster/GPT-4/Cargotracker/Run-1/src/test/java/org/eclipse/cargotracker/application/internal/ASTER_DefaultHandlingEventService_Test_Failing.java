/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.CannotCreateHandlingEventException;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultHandlingEventService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithNullVoyageNumberOnLoadEvent_Kmjy2() {
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
    TrackingId trackingId = new TrackingId("ABC123");
    VoyageNumber voyageNumber = null;
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    assertThrows(IllegalArgumentException.class, () -> {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithPastCompletionTime_Mqtj4() {
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    LocalDateTime completionTime = LocalDateTime.now().minusDays(1);
    TrackingId trackingId = new TrackingId("ABC123");
    VoyageNumber voyageNumber = new VoyageNumber("V12345");
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    assertThrows(IllegalArgumentException.class, () -> {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithInvalidUnLocode_BACm9() {
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
    TrackingId trackingId = new TrackingId("ABC123");
    VoyageNumber voyageNumber = new VoyageNumber("V12345");
    UnLocode unLocode = new UnLocode("INVALID");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    assertThrows(IllegalArgumentException.class, () -> {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithValidData_fBzK0_Plkx0() {
    try {
      DefaultHandlingEventService service = new DefaultHandlingEventService();
      LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
      TrackingId trackingId = new TrackingId("ABC123");
      VoyageNumber voyageNumber = new VoyageNumber("V12345");
      UnLocode unLocode = new UnLocode("USNYC");
      HandlingEvent.Type type = HandlingEvent.Type.LOAD;
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
      assertTrue(true); // Assuming the method does not throw an exception
    } catch (CannotCreateHandlingEventException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithFutureCompletionTime_YFch3_CoMC0() {
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    LocalDateTime completionTime = LocalDateTime.now().plusDays(5);
    TrackingId trackingId = new TrackingId("ABC123");
    VoyageNumber voyageNumber = new VoyageNumber("V12345");
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    try {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
      assertTrue(true); // Assuming the method does not throw an exception
    } catch (CannotCreateHandlingEventException e) {
      fail("Exception should not have been thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithReceiveTypeAndNoVoyage_XeUa7_VYjD0() {
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
    TrackingId trackingId = new TrackingId("ABC123");
    VoyageNumber voyageNumber = null;
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    try {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
      assertTrue(true); // Assuming the method does not throw an exception
    } catch (CannotCreateHandlingEventException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEventWithCustomsTypeAndNoVoyage_DDRB8_mxqT0() {
    try {
      DefaultHandlingEventService service = new DefaultHandlingEventService();
      LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
      TrackingId trackingId = new TrackingId("ABC123");
      VoyageNumber voyageNumber = null;
      UnLocode unLocode = new UnLocode("USNYC");
      HandlingEvent.Type type = HandlingEvent.Type.CUSTOMS;
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
      assertTrue(true); // Assuming the method does not throw an exception
    } catch (CannotCreateHandlingEventException e) {
      fail("Exception should not have been thrown");
    }
  }
}