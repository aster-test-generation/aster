/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_HandlingEvent_Test_Failing {
  private HandlingEvent handlingEvent1;
  private HandlingEvent handlingEvent2;
  private Cargo cargo;
  private LocalDateTime completionTime;
  @Mock
  private TrackingId trackingId;
  @Mock
  private VoyageNumber voyageNumber;
  private HandlingEvent handlingEvent;
  private Cargo mockCargo;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_CiDb0() throws Exception {
    Location mockLocation = mock(Location.class);
    HandlingEvent handlingEvent = new HandlingEvent(null, null, null, null, mockLocation);
    when(mockLocation.getName()).thenReturn("Mock Location");
    String result = mockLocation.getName();
  }
}