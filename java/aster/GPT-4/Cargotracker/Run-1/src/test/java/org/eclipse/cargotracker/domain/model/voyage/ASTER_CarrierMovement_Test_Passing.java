/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  private CarrierMovement carrierMovement;
  private LocalDateTime arrivalTime;
  @InjectMocks
  private CarrierMovement carriermovement;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_iMjn0() {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertTrue(carrierMovement.equals(carrierMovement));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_DBEN1() {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_rcFA2() {
    CarrierMovement carrierMovement = new CarrierMovement();
    Object otherObject = new Object();
    assertFalse(carrierMovement.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_mPgJ3_NFCZ0() {
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now().plusHours(5);
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("GBLON");
    Location departureLocation = new Location(unLocode1, "New York");
    Location arrivalLocation = new Location(unLocode2, "London");
    CarrierMovement carrierMovement1 = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertTrue(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_ySpL0() throws Exception {
    Location departureLocation = mock(Location.class);
    CarrierMovement carriermovement = new CarrierMovement(departureLocation, null, null, null);
    when(departureLocation.getName()).thenReturn("Mocked Location");
    Location result = carriermovement.getDepartureLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_RXMd0_PkyJ0() {
    UnLocode unLocodeDeparture = new UnLocode("USNYC");
    Location departureLocation = new Location(unLocodeDeparture, "New York");
    UnLocode unLocodeArrival = new UnLocode("GBLON");
    Location arrivalLocation = new Location(unLocodeArrival, "London");
    LocalDateTime departureTime = LocalDateTime.of(2023, 10, 1, 14, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2023, 10, 2, 14, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertEquals(departureLocation, carrierMovement.getDepartureLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_CgHm0() throws Exception {
    LocalDateTime arrivalTime = LocalDateTime.of(2023, 3, 15, 10, 0);
    Location departureLocation = new Location(new UnLocode("USNYC"), "New York");
    Location arrivalLocation = new Location(new UnLocode("GBLON"), "London");
    LocalDateTime departureTime = LocalDateTime.of(2023, 3, 14, 15, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_ylft0_hIKb0() {
    LocalDateTime expectedArrivalTime = LocalDateTime.of(2023, 10, 1, 12, 0);
    UnLocode departureUnLocode = new UnLocode("USNYC");
    UnLocode arrivalUnLocode = new UnLocode("GBLON");
    Location departureLocation = new Location(departureUnLocode, "New York");
    Location arrivalLocation = new Location(arrivalUnLocode, "London");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, LocalDateTime.of(2023, 10, 1, 8, 0), expectedArrivalTime);
    LocalDateTime actualArrivalTime = carrierMovement.getArrivalTime();
    assertEquals(expectedArrivalTime, actualArrivalTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_gwMv0_JNst0() {
    LocalDateTime departureTime = LocalDateTime.of(2023, 3, 15, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2023, 3, 16, 10, 0);
    UnLocode departureUnLocode = new UnLocode("USNYC");
    UnLocode arrivalUnLocode = new UnLocode("GBLON");
    Location departureLocation = new Location(departureUnLocode, "New York");
    Location arrivalLocation = new Location(arrivalUnLocode, "London");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = carrierMovement.hashCode();
    int actualHashCode = carrierMovement.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Hnan0() {
    Location departureLocation = mock(Location.class);
    Location arrivalLocation = mock(Location.class);
    LocalDateTime departureTime = mock(LocalDateTime.class);
    LocalDateTime arrivalTime = mock(LocalDateTime.class);
    when(departureLocation.hashCode()).thenReturn(123);
    when(arrivalLocation.hashCode()).thenReturn(456);
    when(departureTime.hashCode()).thenReturn(789);
    when(arrivalTime.hashCode()).thenReturn(101112);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = new HashCodeBuilder()
            .append(123)
            .append(789)
            .append(456)
            .append(101112)
            .toHashCode();
    assertEquals(expectedHashCode, carrierMovement.hashCode());
  }
}