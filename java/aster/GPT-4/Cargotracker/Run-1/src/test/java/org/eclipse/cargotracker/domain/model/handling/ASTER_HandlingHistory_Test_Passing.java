/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEventWithEmptyList_VuOG0() {
    HandlingHistory history = new HandlingHistory(Collections.emptyList());
    HandlingEvent result = history.getMostRecentlyCompletedEvent();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Reflexive_vmVx0() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingHistory history = new HandlingHistory(Arrays.asList(event1));
    assertTrue(history.equals(history));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Symmetric_xYFZ1() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingHistory history1 = new HandlingHistory(Arrays.asList(event1));
    HandlingHistory history2 = new HandlingHistory(Arrays.asList(event1));
    assertTrue(history1.equals(history2) && history2.equals(history1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_IlOL2() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingHistory history = new HandlingHistory(Arrays.asList(event1));
    assertFalse(history.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllHandlingEventsReturnsCorrectEvents_gOKx0() {
    List<HandlingEvent> expectedEvents = Arrays.asList(new HandlingEvent(), new HandlingEvent());
    HandlingHistory handlingHistory = new HandlingHistory(expectedEvents);
    List<HandlingEvent> actualEvents = handlingHistory.getAllHandlingEvents();
    assertEquals(expectedEvents, actualEvents);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_JSgv0() {
    Collection<HandlingEvent> events = Arrays.asList(new HandlingEvent(), new HandlingEvent());
    HandlingHistory history = new HandlingHistory(events);
    int expectedHashCode = events.hashCode();
    assertEquals(expectedHashCode, history.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentHandlingEvents_kkGb3_fid2() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingHistory history1 = new HandlingHistory(Arrays.asList(event1));
    HandlingHistory history2 = new HandlingHistory(Arrays.asList(event2));
    assertTrue(history1.equals(history2));
  }
}