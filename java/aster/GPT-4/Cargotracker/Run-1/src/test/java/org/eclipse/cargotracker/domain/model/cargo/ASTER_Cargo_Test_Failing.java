/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  private Cargo cargo;
  private TrackingId trackingId;
  private RouteSpecification routeSpecification;
  @Mock
  private Itinerary itinerary;
  @Mock
  private RouteSpecification newRouteSpecification;
  @Mock
  private Delivery delivery;
  @Mock
  private Delivery updatedDelivery;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Itinerary mockItinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString() {
    // Mock setup if necessary
    // Setup the behavior of the mock
    when(trackingId.toString()).thenReturn("TRACK123");
    // Call the method under test
    String result = cargo.toString();
    // Assert the result
    assertEquals("TRACK123", result, "The toString method should return the string representation of trackingId");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode() throws Exception {
    // Initialize Cargo with a mocked TrackingId
    // Setup the behavior of the mock to return a consistent hash code
    int expectedHashCode = 123;
    when(trackingId.hashCode()).thenReturn(expectedHashCode);
    // Call the method under test
    int actualHashCode = cargo.hashCode();
    // Assert that the hash code returned from Cargo is as expected
    assertEquals(expectedHashCode, actualHashCode, "The hash code should match the mocked hash code.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup: Inject a mock Delivery object into the Cargo instance
    // This is automatically done by Mockito's @InjectMocks
    // Execution: Call the method under test
    Delivery result = cargo.getDelivery();
    // Assertion: Verify the result is the mocked Delivery object
    assertEquals(delivery, result, "The returned Delivery should be the same as the mocked Delivery object.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignToRoute_1() {
    // Assuming Delivery.updateOnRouting is a static method that returns a new Delivery instance
    when(delivery.updateOnRouting(any(RouteSpecification.class), any(Itinerary.class))).thenReturn(updatedDelivery);
    // Arrange
    // No additional setup needed as @BeforeEach handles the setup
    // Act
    cargo.assignToRoute(itinerary);
    // Assert
    verify(delivery).updateOnRouting(routeSpecification, itinerary);
    assertSame(itinerary, cargo.getItinerary(), "Itinerary should be assigned to cargo");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignToRoute_2() {
    // Assuming Delivery.updateOnRouting is a static method that returns a new Delivery instance
    when(delivery.updateOnRouting(any(RouteSpecification.class), any(Itinerary.class))).thenReturn(updatedDelivery);
    // Arrange
    // No additional setup needed as @BeforeEach handles the setup
    // Act
    cargo.assignToRoute(itinerary);
    // Assert
    verify(delivery).updateOnRouting(routeSpecification, itinerary);
    assertSame(updatedDelivery, cargo.getDelivery(), "Delivery should be updated based on the assigned itinerary");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_hUhi0() throws Exception {
    cargo = new Cargo();
    Delivery result = cargo.getDelivery();
    assertEquals(delivery, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_fid1() throws Exception {
    // Initialize Cargo with mocked Delivery
    cargo = new Cargo();
    // Setup: Inject a mock Delivery object into the Cargo instance
    // This is automatically done by Mockito's @InjectMocks
    // Execution: Call the method under test
    Delivery result = cargo.getDelivery();
    // Assertion: Verify the result is the mocked Delivery object
    assertNull(delivery);
  }
}