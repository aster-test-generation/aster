/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_mOFd0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null, adjust based on actual initialization or constructor logic
    assertEquals(expected, report.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocode_ogxK0() {
    HandlingReport report = new HandlingReport();
    String expectedUnLocode = "USNYC";
    report.setUnLocode(expectedUnLocode);
    assertEquals(expectedUnLocode, report.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_fIjW0() {
    HandlingReport report = new HandlingReport();
    String expectedEventType = "Arrival";
    report.setEventType(expectedEventType);
    assertEquals(expectedEventType, report.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_dwdi0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default value of voyageNumber is null, adjust as per actual default or set a value in HandlingReport
    assertEquals(expected, report.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_gaRQ0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null since no setter or constructor is shown to modify trackingId
    assertEquals(expected, report.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_Coku0() {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null, adjust based on actual default or setup
    assertEquals(expected, report.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_hAtp0_fid1() {
    HandlingReport report = new HandlingReport();
    assertNull(report.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_QQUH0_RjOr0() {
    HandlingReport report = new HandlingReport();
    String expectedVoyageNumber = "V12345";
    report.setVoyageNumber(expectedVoyageNumber);
    assertEquals(expectedVoyageNumber, report.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_PMmB0_MXcD0() {
    HandlingReport report = new HandlingReport();
    String expectedTime = "2023-10-05T14:30:00";
    report.setCompletionTime(expectedTime);
    assertEquals(expectedTime, report.getCompletionTime());
  }
}