/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_jsou0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectSameValues_rhUq1() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentObjectDifferentValues_AZAY2() {
    Location origin1 = new Location(new UnLocode("USNYC"), "New York");
    Location destination1 = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline1 = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin1, destination1, arrivalDeadline1);
    Location origin2 = new Location(new UnLocode("USLAX"), "Los Angeles");
    Location destination2 = new Location(new UnLocode("JPTYO"), "Tokyo");
    LocalDate arrivalDeadline2 = LocalDate.of(2023, 12, 1);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin2, destination2, arrivalDeadline2);
    assertFalse(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_JVby3() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_Bpgs0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location result = routeSpecification.getDestination();
    assertEquals(destination, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_OKhu0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = routeSpecification.hashCode();
    int actualHashCode = routeSpecification.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_savt0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Location destination = Mockito.mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_YJSr0_CTdL0() {
    UnLocode unLocodeOrigin = new UnLocode("USNYC");
    Location origin = new Location(unLocodeOrigin, "New York");
    UnLocode unLocodeDestination = new UnLocode("GBLON");
    Location destination = new Location(unLocodeDestination, "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location result = routeSpecification.getOrigin();
    assertEquals(origin, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_bZIq0() throws Exception {
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    UnLocode originUnLocode = new UnLocode("USNYC");
    Location origin = new Location(originUnLocode, "New York");
    UnLocode destinationUnLocode = new UnLocode("GBLON");
    Location destination = new Location(destinationUnLocode, "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    LocalDate result = routeSpecification.getArrivalDeadline();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_WTPJ0_hAUa0() {
    LocalDate expectedDeadline = LocalDate.of(2023, 10, 15);
    UnLocode originUnLocode = new UnLocode("USNYC");
    UnLocode destinationUnLocode = new UnLocode("GBLON");
    Location origin = new Location(originUnLocode, "New York");
    Location destination = new Location(destinationUnLocode, "London");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, expectedDeadline);
    LocalDate actualDeadline = routeSpecification.getArrivalDeadline();
    assertEquals(expectedDeadline, actualDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_WhenItineraryIsNull_NmOI0() {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.isSatisfiedBy(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_WhenDepartureLocationDoesNotMatch_FlWZ0() {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Itinerary itinerary = mock(Itinerary.class);
    Location departureLocation = mock(Location.class);
    LocalDate finalArrivalDate = LocalDate.of(2023, 12, 30);
    when(itinerary.getInitialDepartureLocation()).thenReturn(departureLocation);
    when(origin.sameIdentityAs(departureLocation)).thenReturn(false);
    assertFalse(routeSpecification.isSatisfiedBy(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_WhenArrivalLocationDoesNotMatch_dkDC0() {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Itinerary itinerary = mock(Itinerary.class);
    Location departureLocation = mock(Location.class);
    Location arrivalLocation = mock(Location.class);
    LocalDate finalArrivalDate = LocalDate.of(2023, 12, 30);
    when(itinerary.getInitialDepartureLocation()).thenReturn(departureLocation);
    when(itinerary.getFinalArrivalLocation()).thenReturn(arrivalLocation);
    when(origin.sameIdentityAs(departureLocation)).thenReturn(true);
    when(destination.sameIdentityAs(arrivalLocation)).thenReturn(false);
    assertFalse(routeSpecification.isSatisfiedBy(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_ItineraryIsNull_ReturnsFalse_FwPM1_gDjR0() {
    UnLocode originUnLocode = new UnLocode("USCHI");
    Location origin = new Location(originUnLocode, "Chicago");
    UnLocode destinationUnLocode = new UnLocode("JPTOK");
    Location destination = new Location(destinationUnLocode, "Tokyo");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.isSatisfiedBy(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ReturnsTrue_Duay0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Location destination = Mockito.mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_ReturnsFalse_YiPQ0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Location destination = Mockito.mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_ORnA0() throws Exception {
    Location origin = Mockito.mock(Location.class);
    Location destination = Mockito.mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Object differentObject = new Object();
    assertFalse(routeSpecification.equals(differentObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ReturnsTrue_CleS0() throws Exception {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification anotherSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(routeSpecification, anotherSpecification);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValues_ReturnsFalse_pEbX0() throws Exception {
    Location origin = mock(Location.class);
    Location destination = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location differentOrigin = mock(Location.class);
    Location differentDestination = mock(Location.class);
    LocalDate differentArrivalDeadline = LocalDate.of(2023, 11, 1);
    RouteSpecification differentSpecification = new RouteSpecification(differentOrigin, differentDestination, differentArrivalDeadline);
    assertNotEquals(routeSpecification, differentSpecification);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_JVqL0() throws Exception {
    Location destination = mock(Location.class);
    Location origin = mock(Location.class);
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
  }
}