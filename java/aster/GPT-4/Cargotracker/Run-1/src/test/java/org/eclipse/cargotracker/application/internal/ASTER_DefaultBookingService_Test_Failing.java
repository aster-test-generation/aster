/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidId_JZtO0() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidId_cGrK1() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidId_JZtO0_1() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithValidId_JZtO0_2() {
    TrackingId trackingId = new TrackingId("validId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidId_cGrK1_1() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithInvalidId_cGrK1_2() {
    TrackingId trackingId = new TrackingId("invalidId");
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(result.isEmpty());
  }
}