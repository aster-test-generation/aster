/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.CargoRouteDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DefaultBookingServiceFacade_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargosReturnsCorrectCargoRoutes_eOud0_ViVD0_1() {
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.findAll()).thenReturn(new ArrayList<>()); // Assuming findAll returns a list of Cargo
    CargoRouteDtoAssembler cargoRouteDtoAssembler = new CargoRouteDtoAssembler();
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<CargoRoute> result = bookingServiceFacade.listAllCargos();
    assertNotNull(result);
  }
}