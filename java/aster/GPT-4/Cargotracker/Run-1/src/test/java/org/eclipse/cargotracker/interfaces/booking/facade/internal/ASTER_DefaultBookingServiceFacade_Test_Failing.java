/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.CargoRouteDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoExists_NmpA0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "EXISTING_ID";
    CargoStatus result = facade.loadCargoForTracking(trackingIdValue);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_CargoDoesNotExist_JoVT1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "NON_EXISTING_ID";
    CargoStatus result = facade.loadCargoForTracking(trackingIdValue);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_validTrackingId_returnsNonEmptyRouteCandidates_drwx0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String validTrackingId = "ABC123";
    List<RouteCandidate> result = bookingServiceFacade.requestPossibleRoutesForCargo(validTrackingId);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_validInputs_wlgx0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USNYC";
    String destination = "SESTO";
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    String trackingId = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
    assertFalse(trackingId.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_validTrackingId_returnsNonEmptyRouteCandidates_drwx0_1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String validTrackingId = "ABC123";
    List<RouteCandidate> result = bookingServiceFacade.requestPossibleRoutesForCargo(validTrackingId);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_validTrackingId_returnsNonEmptyRouteCandidates_drwx0_2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String validTrackingId = "ABC123";
    List<RouteCandidate> result = bookingServiceFacade.requestPossibleRoutesForCargo(validTrackingId);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_validInputs_wlgx0_1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USNYC";
    String destination = "SESTO";
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    String trackingId = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_validInputs_wlgx0_2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USNYC";
    String destination = "SESTO";
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    String trackingId = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertFalse(trackingId.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_BfMs0_GvIX0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = "ABC123";
    String destinationUnLocode = "USNYC";
    bookingServiceFacade.changeDestination(trackingId, destinationUnLocode);
    CargoRoute updatedCargoRoute = bookingServiceFacade.loadCargoForRouting(trackingId);
    String updatedDestination = updatedCargoRoute.getFinalDestinationCode();
    assertEquals(destinationUnLocode, updatedDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargosReturnsCorrectCargoRoutes_eOud0_ViVD0_2() {
    CargoRepository cargoRepository = mock(CargoRepository.class);
    when(cargoRepository.findAll()).thenReturn(new ArrayList<>()); // Assuming findAll returns a list of Cargo
    CargoRouteDtoAssembler cargoRouteDtoAssembler = new CargoRouteDtoAssembler();
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<CargoRoute> result = bookingServiceFacade.listAllCargos();
    assertEquals(cargoRepository.findAll().size(), result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_mnrK0_JYEf0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = "ABC123";
    LocalDate newDeadline = LocalDate.of(2023, 12, 31);
    facade.changeDeadline(trackingId, newDeadline);
    CargoRoute cargoRoute = facade.loadCargoForRouting(trackingId);
    assertEquals(newDeadline.toString(), cargoRoute.getArrivalDeadline());
  }
}