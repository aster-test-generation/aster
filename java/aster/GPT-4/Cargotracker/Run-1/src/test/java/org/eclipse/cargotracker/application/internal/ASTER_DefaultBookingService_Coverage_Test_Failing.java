/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  private DefaultBookingService bookingService;
  private CargoRepository cargoRepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_CargoNotFound_Nrqj1() {
    TrackingId trackingId = new TrackingId("ABC123");
    when(cargoRepository.find(trackingId)).thenReturn(null);
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(result.isEmpty());
    verify(cargoRepository).find(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_NullTrackingId_zmrg4() {
    TrackingId trackingId = null;
    when(cargoRepository.find(trackingId)).thenReturn(null);
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(result.isEmpty());
    verify(cargoRepository).find(trackingId);
  }

  @Test
  public void testRequestPossibleRoutesForCargo_WithNullCargo_ReturnsEmptyList_QmGU2_1() {
    TrackingId trackingId = new TrackingId("XYZ789");
    when(cargoRepository.find(trackingId)).thenReturn(null);
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(result);
  }

  @Test
  public void testRequestPossibleRoutesForCargo_WithNullCargo_ReturnsEmptyList_QmGU2_2() {
    TrackingId trackingId = new TrackingId("XYZ789");
    when(cargoRepository.find(trackingId)).thenReturn(null);
    List<Itinerary> result = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(result.isEmpty());
  }
}