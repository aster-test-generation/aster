/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromUnLocode_dRBE0() {
    TransitEdge edge = new TransitEdge("V123", "USNYC", "GBLON", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    assertEquals("USNYC", edge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_ogUy0() {
    TransitEdge transitEdge = new TransitEdge();
    String expectedUnLocode = "USNYC";
    transitEdge.setToUnLocode(expectedUnLocode);
    assertEquals(expectedUnLocode, transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MpPd0() {
    LocalDateTime fromDate = LocalDateTime.of(2023, 3, 15, 10, 0);
    LocalDateTime toDate = LocalDateTime.of(2023, 3, 16, 10, 0);
    TransitEdge transitEdge = new TransitEdge("V123", "UNLOCA", "UNLOCB", fromDate, toDate);
    String expected = "TransitEdge{voyageNumber=V123, fromUnLocode=UNLOCA, toUnLocode=UNLOCB, fromDate=2023-03-15T10:00, toDate=2023-03-16T10:00}";
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_Hbjm0() {
    TransitEdge edge = new TransitEdge("V123", "UNLOC1", "UNLOC2", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    assertEquals("V123", edge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_JQNd0() {
    LocalDateTime expectedDate = LocalDateTime.of(2023, 10, 5, 14, 30);
    TransitEdge edge = new TransitEdge("V123", "UNLOC1", "UNLOC2", LocalDateTime.now(), expectedDate);
    LocalDateTime actualDate = edge.getToDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_koda0() {
    LocalDateTime expectedDate = LocalDateTime.of(2023, 3, 15, 10, 0);
    TransitEdge edge = new TransitEdge("V123", "UNLOC1", "UNLOC2", expectedDate, LocalDateTime.of(2023, 3, 16, 10, 0));
    LocalDateTime actualDate = edge.getFromDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_YPbr0() {
    TransitEdge edge = new TransitEdge("V123", "UNLOC1", "UNLOC2", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    assertEquals("UNLOC2", edge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_nhhe0_Wnqq0() {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime expectedDate = LocalDateTime.now();
    transitEdge.setToDate(expectedDate);
    assertEquals(expectedDate, transitEdge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_bHAm0_ShSw0() {
    TransitEdge transitEdge = new TransitEdge();
    String expectedUnLocode = "USNYC";
    transitEdge.setFromUnLocode(expectedUnLocode);
    assertEquals(expectedUnLocode, transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_wvGb0_Yali0() {
    TransitEdge transitEdge = new TransitEdge();
    String expectedVoyageNumber = "V123";
    transitEdge.setVoyageNumber(expectedVoyageNumber);
    assertEquals(expectedVoyageNumber, transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_puHu0_EAHn0() {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime testDate = LocalDateTime.of(2023, 3, 15, 12, 0);
    transitEdge.setFromDate(testDate);
    assertEquals(testDate, transitEdge.getFromDate());
  }
}