/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime arrivalTime;
  private LocalDateTime expectedArrivalTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureTime_fdnJ0() throws Exception {
    LocalDateTime expectedDepartureTime = LocalDateTime.of(2023, 10, 1, 12, 0);
    UnLocode departureUnLocode = new UnLocode("USNYC");
    UnLocode arrivalUnLocode = new UnLocode("GBLON");
    Location departureLocation = new Location(departureUnLocode, "New York");
    Location arrivalLocation = new Location(arrivalUnLocode, "London");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, expectedDepartureTime, LocalDateTime.of(2023, 10, 2, 12, 0));
    LocalDateTime actualDepartureTime = carrierMovement.getDepartureTime();
    assertEquals(expectedDepartureTime, actualDepartureTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_IVgg0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertTrue(carrierMovement.equals(carrierMovement));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_KNQE1() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    assertFalse(carrierMovement.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_jwDa2() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    String differentClassObject = "Test String";
    assertFalse(carrierMovement.equals(differentClassObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_EDkj3() throws Exception {
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now().plusHours(5);
    UnLocode unLocode1 = new UnLocode("USNYC");
    UnLocode unLocode2 = new UnLocode("GBLON");
    Location departureLocation = new Location(unLocode1, "New York");
    Location arrivalLocation = new Location(unLocode2, "London");
    CarrierMovement carrierMovement1 = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    CarrierMovement carrierMovement2 = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertTrue(carrierMovement1.equals(carrierMovement2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDepartureLocation_PmtI0() throws Exception {
    UnLocode unLocode = new UnLocode("USNYC");
    Location departureLocation = new Location(unLocode, "New York");
    Location arrivalLocation = new Location(new UnLocode("GBLON"), "London");
    LocalDateTime departureTime = LocalDateTime.of(2023, 10, 1, 14, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2023, 10, 2, 14, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location result = carrierMovement.getDepartureLocation();
    assertEquals(departureLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_YuSk0() throws Exception {
    LocalDateTime expectedArrivalTime = LocalDateTime.of(2023, 10, 1, 12, 0);
    UnLocode departureUnLocode = new UnLocode("USNYC");
    UnLocode arrivalUnLocode = new UnLocode("GBLON");
    Location departureLocation = new Location(departureUnLocode, "New York");
    Location arrivalLocation = new Location(arrivalUnLocode, "London");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, LocalDateTime.of(2023, 10, 1, 8, 0), expectedArrivalTime);
    LocalDateTime actualArrivalTime = carrierMovement.getArrivalTime();
    assertEquals(expectedArrivalTime, actualArrivalTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_mNco0() throws Exception {
    LocalDateTime departureTime = LocalDateTime.of(2023, 3, 1, 12, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2023, 3, 2, 12, 0);
    UnLocode departureUnLocode = new UnLocode("USNYC");
    UnLocode arrivalUnLocode = new UnLocode("GBLON");
    Location departureLocation = new Location(departureUnLocode, "New York");
    Location arrivalLocation = new Location(arrivalUnLocode, "London");
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = carrierMovement.hashCode();
    int actualHashCode = carrierMovement.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}