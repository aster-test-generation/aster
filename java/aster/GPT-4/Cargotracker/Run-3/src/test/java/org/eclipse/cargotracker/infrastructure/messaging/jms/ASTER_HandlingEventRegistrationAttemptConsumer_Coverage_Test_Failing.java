/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import jakarta.jms.JMSException;
import jakarta.jms.Message;
import jakarta.jms.ObjectMessage;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.HandlingEventService;
import org.eclipse.cargotracker.interfaces.handling.HandlingEventRegistrationAttempt;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_HandlingEventRegistrationAttemptConsumer_Coverage_Test_Failing {
  private HandlingEventRegistrationAttempt attempt;
  private HandlingEventRegistrationAttemptConsumer consumer;
  private HandlingEventService handlingEventService;
  private Message message;
  private ObjectMessage objectMessage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithValidObjectMessage_CfbO6() throws JMSException {
    consumer.onMessage(message);
    verify(objectMessage).getObject();
  }

  @Test
  public void testOnMessageWithRuntimeException_rTkb5_miRB0() throws JMSException {
    when(objectMessage.getObject()).thenThrow(new RuntimeException("Runtime exception"));
    assertThrows(RuntimeException.class, () -> consumer.onMessage(message));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_FpxF0() throws JMSException {
    consumer = new HandlingEventRegistrationAttemptConsumer();
    handlingEventService = mock(HandlingEventService.class);
    message = mock(Message.class);
    objectMessage = mock(ObjectMessage.class);
    attempt = mock(HandlingEventRegistrationAttempt.class);
    when(message instanceof ObjectMessage).thenReturn(true);
    when((ObjectMessage) message).thenReturn(objectMessage);
    when(objectMessage.getObject()).thenReturn(attempt);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageCompletionTimePassedToService_nzRh8() throws JMSException {
    consumer.onMessage(message);
    verify(attempt).getCompletionTime();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageTrackingIdPassedToService_nLyl9() throws JMSException {
    consumer.onMessage(message);
    verify(attempt).getTrackingId();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageVoyageNumberPassedToService_ZWFE10() throws JMSException {
    consumer.onMessage(message);
    verify(attempt).getVoyageNumber();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageUnLocodePassedToService_MaLQ11() throws JMSException {
    consumer.onMessage(message);
    verify(attempt).getUnLocode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageTypePassedToService_Ryvr12() throws JMSException {
    consumer.onMessage(message);
    verify(attempt).getType();
  }
}