/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEvent_EmptyList_IzGs0_HRdt0() {
    HandlingHistory history = new HandlingHistory(Collections.emptyList());
    assertNull(history.getMostRecentlyCompletedEvent(), "Expected null when there are no events");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEvent_NonEmptyList_gHXP1_ouNf0() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    List<HandlingEvent> events = Arrays.asList(event1, event2);
    HandlingHistory history = new HandlingHistory(events);
    assertEquals(history.getMostRecentlyCompletedEvent(), event2, "Expected the last event in the list");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameHandlingEvents_MREN0_GiZY0() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    Collection<HandlingEvent> events = Arrays.asList(event1, event2);
    HandlingHistory history1 = new HandlingHistory(events);
    HandlingHistory history2 = new HandlingHistory(events);
    assertTrue(history1.equals(history2), "Expected histories to be equal when they have the same handling events.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_Tfoz2_kINC0() {
    HandlingEvent event1 = new HandlingEvent(); // Assuming HandlingEvent has a no-argument constructor
    Collection<HandlingEvent> events = Arrays.asList(event1);
    HandlingHistory history = new HandlingHistory(events);
    assertFalse(history.equals(null), "Expected history to not be equal to null.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonHandlingHistoryObject_PJQI3_rvgd0() {
    HandlingEvent event1 = new HandlingEvent(); // Assuming HandlingEvent has a no-argument constructor
    Collection<HandlingEvent> events = Arrays.asList(event1);
    HandlingHistory history = new HandlingHistory(events);
    Object otherObject = new Object();
    assertFalse(history.equals(otherObject), "Expected history to not be equal to a non-HandlingHistory object.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_JGBR0_WWqQ0() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    Collection<HandlingEvent> events = Arrays.asList(event1, event2);
    HandlingHistory history = new HandlingHistory(events);
    int expectedHashCode = events.hashCode();
    assertEquals(expectedHashCode, history.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentHandlingEvents_vtYP1_ogfS0_fid2() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    Collection<HandlingEvent> events1 = Arrays.asList(event1, event2);
    Collection<HandlingEvent> events2 = Arrays.asList(event1, event3);
    HandlingHistory history1 = new HandlingHistory(events1);
    HandlingHistory history2 = new HandlingHistory(events2);
    assertTrue(history1.equals(history2), "Expected histories to not be equal when they have different handling events.");
  }
}