/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInitializedId_iFJo0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertEquals("12345", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Reflexive_HXxz0() throws Exception {
    TrackingId trackingId = new TrackingId("123");
    assertTrue(trackingId.equals(trackingId));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Symmetric_PRQn1() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    assertTrue(trackingId1.equals(trackingId2) && trackingId2.equals(trackingId1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_KkuG2() throws Exception {
    TrackingId trackingId = new TrackingId("123");
    assertFalse(trackingId.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_twai3() throws Exception {
    TrackingId trackingId = new TrackingId("123");
    Object otherObject = new Object();
    assertFalse(trackingId.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNonNullId_rbsY0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertEquals("12345", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithSameId_YWVY0() throws Exception {
    TrackingId id1 = new TrackingId("ABC123");
    TrackingId id2 = new TrackingId("ABC123");
    assertTrue(id1.sameValueAs(id2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithDifferentId_sIoq1() throws Exception {
    TrackingId id1 = new TrackingId("ABC123");
    TrackingId id2 = new TrackingId("XYZ789");
    assertFalse(id1.sameValueAs(id2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithNull_bDTQ2() throws Exception {
    TrackingId id1 = new TrackingId("ABC123");
    TrackingId id2 = null;
    assertFalse(id1.sameValueAs(id2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_egeo0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    int expectedHashCode = trackingId.hashCode();
    assertEquals(expectedHashCode, trackingId.hashCode());
  }
}