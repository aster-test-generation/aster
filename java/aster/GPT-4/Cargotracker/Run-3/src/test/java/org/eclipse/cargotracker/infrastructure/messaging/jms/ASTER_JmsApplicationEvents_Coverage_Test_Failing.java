/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_JmsApplicationEvents_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasHandled_loggerLog_XPLJ1() {
    JmsApplicationEvents appEvents = new JmsApplicationEvents();
    HandlingEvent event = mock(HandlingEvent.class);
    Cargo cargo = new Cargo();
    when(event.getCargo()).thenReturn(cargo);
    appEvents.cargoWasHandled(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasHandled_completeMethod_zIPK7() {
    JmsApplicationEvents appEvents = new JmsApplicationEvents();
    HandlingEvent event = mock(HandlingEvent.class);
    Cargo cargo = new Cargo();
    when(event.getCargo()).thenReturn(cargo);
    appEvents.cargoWasHandled(event);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasMisdirected_LogsInfoMessage_vqhw0() {
    Logger logger = mock(Logger.class);
    JmsApplicationEvents events = new JmsApplicationEvents();
    Cargo cargo = new Cargo(new TrackingId("ABC123"), new RouteSpecification());
    events.cargoWasMisdirected(cargo);
    verify(logger).log(Level.INFO, "Cargo was misdirected {0}", cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasMisdirected_CompletesWithoutError_EnnK6() {
    JmsApplicationEvents events = new JmsApplicationEvents();
    Cargo cargo = new Cargo(new TrackingId("ABC123"), new RouteSpecification());
    assertDoesNotThrow(() -> events.cargoWasMisdirected(cargo));
  }
}