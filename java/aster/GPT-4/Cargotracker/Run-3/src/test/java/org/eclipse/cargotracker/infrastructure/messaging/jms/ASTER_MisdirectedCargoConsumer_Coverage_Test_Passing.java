/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import jakarta.jms.JMSException;
import jakarta.jms.Message;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MisdirectedCargoConsumer_Coverage_Test_Passing {
  private MisdirectedCargoConsumer consumer;
  private Logger logger;
  private Message message;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithNullMessageBody_Hcqd2() throws JMSException {
    when(message.getBody(String.class)).thenReturn(null);
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} misdirected.", (Object) null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageThrowsJMSException_HQll3() throws JMSException {
    when(message.getBody(String.class)).thenThrow(new JMSException("Failed to get body"));
    consumer.onMessage(message);
    verify(logger).log(Level.WARNING, "Error processing message.", any(JMSException.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithEmptyMessageBody_hwCs4() throws JMSException {
    when(message.getBody(String.class)).thenReturn("");
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} misdirected.", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithNonStringBody_pUfb5() throws JMSException {
    when(message.getBody(String.class)).thenReturn("Non-string body");
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} misdirected.", "Non-string body");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithJMSExceptionOnLogger_FiZW6_bqlL0() throws JMSException {
    doThrow(new RuntimeException("Logger failure")).when(logger).log(eq(Level.INFO), anyString(), anyString());
    consumer.onMessage(message);
  }
}