/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Test_Passing {
  @NotNull
  private boolean misdirected;
  private RoutingStatus routingStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected_oESZ0() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_LAEm0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    int result = delivery.hashCode();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentVoyageWhenVoyageIsNull_XJcY0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    Voyage result = delivery.getCurrentVoyage();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_BCNy0() throws Exception {
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(location);
    assertEquals(location, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutingStatus_aFLI0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    RoutingStatus expected = RoutingStatus.NOT_ROUTED; // Assuming NOT_ROUTED is a valid enum constant
    RoutingStatus actual = delivery.getRoutingStatus();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_WithUnknownLocation_mTXn0() throws Exception {
    Location unknownLocation = Location.UNKNOWN;
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    Location result = delivery.getLastKnownLocation();
    assertEquals(unknownLocation, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatus_ThtW0() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.NOT_RECEIVED);
    assertEquals(TransportStatus.NOT_RECEIVED, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_yccG0() throws Exception {
    Delivery delivery = new Delivery();
    assertTrue(delivery.equals(delivery));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_VlJN1() throws Exception {
    Delivery delivery = new Delivery();
    Object other = new Object();
    assertFalse(delivery.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_zFXD2() throws Exception {
    Delivery delivery = new Delivery();
    assertFalse(delivery.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_EquivalentObjects_kGYr3() throws Exception {
    HandlingEvent event = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpec = new RouteSpecification();
    Delivery delivery1 = new Delivery(event, itinerary, routeSpec);
    Delivery delivery2 = new Delivery(event, itinerary, routeSpec);
    assertTrue(delivery1.equals(delivery2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_TAYH0() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime testTime = LocalDateTime.now();
    delivery.setCalculatedAt(testTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEstimatedTimeOfArrival_ujRX0() throws Exception {
    LocalDateTime expectedETA = LocalDateTime.of(2023, 10, 15, 10, 0);
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    assertEquals(expectedETA, delivery.getEstimatedTimeOfArrival());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatus_leec0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    TransportStatus expected = TransportStatus.IN_PORT; // Assuming IN_PORT is a valid enum constant
    TransportStatus actual = delivery.getTransportStatus();
    assertEquals(expected, actual);
  }
}