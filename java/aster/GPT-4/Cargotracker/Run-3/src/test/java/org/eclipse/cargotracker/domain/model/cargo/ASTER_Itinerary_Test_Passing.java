/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Reflexive_VGIe0() throws Exception {
    Itinerary itinerary = new Itinerary();
    assertTrue(itinerary.equals(itinerary));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullComparison_lmvA1() throws Exception {
    Itinerary itinerary = new Itinerary();
    assertFalse(itinerary.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_BMmg2() throws Exception {
    Itinerary itinerary = new Itinerary();
    Object other = new Object();
    assertFalse(itinerary.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInitialDepartureLocationWithEmptyLegs_iKdq0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    Location result = itinerary.getInitialDepartureLocation();
    assertEquals(Location.UNKNOWN, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_emptyLegs_fIDd0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    assertEquals("Itinerary{legs=[]}", itinerary.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalLocationWithEmptyLegs_TZUc0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    assertEquals(Location.UNKNOWN, itinerary.getFinalArrivalLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFinalArrivalDateWithNoLegs_SHOJ0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    LocalDateTime result = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, result);
  }
}