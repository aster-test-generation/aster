/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.RandomAccessFile;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_EventItemReader_Coverage_Test_Failing {
  private EventItemReader reader;
  private RandomAccessFile currentFile;

  @Test
  public void testReadItemWithEmptyVoyageNumber_uiQA4_tGsF0() throws Exception {
    currentFile = mock(RandomAccessFile.class);
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,ABC123,,UNLOC,LOAD");
    try {
      reader.readItem();
      fail("Expected an EventLineParseException to be thrown");
    } catch (EventLineParseException e) {
      assertNotNull(e);
    }
  }

  @Test
  public void testReadItemWithInvalidUnLocode_tKuK5_hrSZ0() throws Exception {
    currentFile = mock(RandomAccessFile.class);
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,ABC123,VOY123,invalid,LOAD");
    try {
      reader.readItem();
      fail("Expected an EventLineParseException to be thrown");
    } catch (EventLineParseException e) {
      // Test passes as exception is expected
    }
  }

  @Test
  public void testReadItemWithIncorrectDataElements_vlsQ1_qWPN0() throws Exception {
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,ABC123");
    assertThrows(EventLineParseException.class, () -> reader.readItem());
  }

  @Test
  public void testReadItemWithInvalidDateTime_eJFZ2_zHOI0() throws Exception {
    when(currentFile.readLine()).thenReturn("invalid-date,ABC123,VOY123,UNLOC,LOAD");
    assertThrows(EventLineParseException.class, () -> reader.readItem());
  }

  @Test
  public void testReadItemWithNullTrackingId_NpwE3_DxHL0() throws Exception {
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,,VOY123,UNLOC,LOAD");
    Assertions.assertThrows(EventLineParseException.class, () -> {
      reader.readItem();
    });
  }

  @Test
  public void testReadItemWithEmptyVoyageNumber_uiQA4_tGsF0_fid1() throws Exception {
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,ABC123,,UNLOC,LOAD");
    try {
      reader.readItem();
      fail("Expected an EventLineParseException to be thrown");
    } catch (EventLineParseException e) {
    }
  }

  @Test
  public void testReadItemWithInvalidUnLocode_tKuK5_hrSZ0_fid1() throws Exception {
    when(currentFile.readLine()).thenReturn("2023-01-01T12:00,ABC123,VOY123,invalid,LOAD");
    try {
      reader.readItem();
      fail("Expected an EventLineParseException to be thrown");
    } catch (EventLineParseException e) {
    }
  }
}