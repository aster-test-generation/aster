/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Delivery;
import org.eclipse.cargotracker.domain.model.cargo.RoutingStatus;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_RealtimeCargoTrackingViewAdapter_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeNotRouted_ZzVF0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.NOT_ROUTED);
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    String statusCode = adapter.getStatusCode();
    assertEquals("NOT_ROUTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeMisrouted_ClGw1() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    String statusCode = adapter.getStatusCode();
    assertEquals("MISROUTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeMisdirected_zaNt2() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isMisdirected()).thenReturn(true);
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    String statusCode = adapter.getStatusCode();
    assertEquals("MISDIRECTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeUnloadedAtDestination_kXjS3() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.isUnloadedAtDestination()).thenReturn(true);
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    String statusCode = adapter.getStatusCode();
    assertEquals("AT_DESTINATION", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeTransportStatus_lDuT4() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    String statusCode = adapter.getStatusCode();
    assertEquals("IN_PORT", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeWithNullCargo_QbWA5() {
    Cargo cargo = null;
    assertThrows(NullPointerException.class, () -> {
      RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
      adapter.getStatusCode();
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetStatusCodeWithNullDelivery_HzVP6() {
    Cargo cargo = mock(Cargo.class);
    when(cargo.getDelivery()).thenReturn(null);
    assertThrows(NullPointerException.class, () -> {
      RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
      adapter.getStatusCode();
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWhenTransportStatusIsNotReceived_DcJO0_TcXc0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.NOT_RECEIVED);
    RealtimeCargoTrackingViewAdapter adapter = spy(new RealtimeCargoTrackingViewAdapter(cargo));
    LocationViewAdapter originLocationViewAdapter = mock(LocationViewAdapter.class);
    doReturn(originLocationViewAdapter).when(adapter).getOrigin();
    LocationViewAdapter result = adapter.getLocation();
    assertSame(originLocationViewAdapter, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationWhenTransportStatusIsReceived_tYAp1_XDHp0() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.IN_PORT);
    RealtimeCargoTrackingViewAdapter adapter = spy(new RealtimeCargoTrackingViewAdapter(cargo));
    LocationViewAdapter lastKnownLocationViewAdapter = mock(LocationViewAdapter.class);
    doReturn(lastKnownLocationViewAdapter).when(adapter).getLastKnownLocation();
    LocationViewAdapter result = adapter.getLocation();
    assertSame(lastKnownLocationViewAdapter, result);
  }
}