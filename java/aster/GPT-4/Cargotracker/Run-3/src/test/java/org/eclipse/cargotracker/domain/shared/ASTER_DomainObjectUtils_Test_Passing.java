/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithBothNulls_ljEU0() throws Exception {
    assertNull(DomainObjectUtils.nullSafe(null, null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithFirstNull_AYDo1() throws Exception {
    Integer safeValue = 5;
    assertEquals(safeValue, DomainObjectUtils.nullSafe(null, safeValue));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithSecondNull_COkL2() throws Exception {
    Integer actualValue = 10;
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNoNulls_WwxL3() throws Exception {
    Integer actualValue = 10;
    Integer safeValue = 5;
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, safeValue));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithStringsFirstNull_preF4() throws Exception {
    String safeValue = "safe";
    assertEquals(safeValue, DomainObjectUtils.nullSafe(null, safeValue));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithStringsSecondNull_SUja5() throws Exception {
    String actualValue = "actual";
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithDifferentTypes_PEFM6() throws Exception {
    String actualValue = "actual";
    String safeValue = "safe";
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, safeValue));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithBooleanFirstNull_lUwP7() throws Exception {
    Boolean safeValue = true;
    assertEquals(safeValue, DomainObjectUtils.nullSafe(null, safeValue));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithBooleanSecondNull_PMbe8() throws Exception {
    Boolean actualValue = false;
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithBooleanNoNulls_FWuD9() throws Exception {
    Boolean actualValue = false;
    Boolean safeValue = true;
    assertEquals(actualValue, DomainObjectUtils.nullSafe(actualValue, safeValue));
  }
}