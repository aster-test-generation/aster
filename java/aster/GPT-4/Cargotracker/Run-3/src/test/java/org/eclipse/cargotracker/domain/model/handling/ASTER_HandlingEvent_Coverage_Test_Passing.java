/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEvent_Coverage_Test_Passing {
  private HandlingEvent handlingEvent;
  private LocalDateTime completionTime;
  private Cargo cargo;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ReturnsFalse_WIBL2() {
    assertFalse(handlingEvent.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ReturnsFalse_VInH3() {
    Object differentObject = new Object();
    assertFalse(handlingEvent.equals(differentObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNonNullVoyage_rkWg0_gIMi0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    String summary = event.getSummary();
    assertTrue(summary.contains("New York"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNonNullVoyage_rkWg0_gIMi0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNonNullVoyage_rkWg0_gIMi0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: LOAD"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNonNullVoyage_rkWg0_gIMi0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNonNullVoyage_rkWg0_gIMi0_5() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    UnLocode unLocode = new UnLocode("USNYC");
    Location location = new Location(unLocode, "New York");
    VoyageNumber voyageNumber = new VoyageNumber("V123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, voyage);
    String summary = event.getSummary();
    assertTrue(summary.contains("Voyage: V123"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithoutVoyage_Lqxy1_fVKI0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    UnLocode unLocode = new UnLocode("GBLON");
    Location location = new Location(unLocode, "London");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("London"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithoutVoyage_Lqxy1_fVKI0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    UnLocode unLocode = new UnLocode("GBLON");
    Location location = new Location(unLocode, "London");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithoutVoyage_Lqxy1_fVKI0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    UnLocode unLocode = new UnLocode("GBLON");
    Location location = new Location(unLocode, "London");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: UNLOAD"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithoutVoyage_Lqxy1_fVKI0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    UnLocode unLocode = new UnLocode("GBLON");
    Location location = new Location(unLocode, "London");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithoutVoyage_Lqxy1_fVKI0_5() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.UNLOAD;
    UnLocode unLocode = new UnLocode("GBLON");
    Location location = new Location(unLocode, "London");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertFalse(summary.contains("Voyage:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullLocationName_deZD2_GvDg0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    Location location = new Location(null, null);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.startsWith("null\n"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullLocationName_deZD2_GvDg0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    Location location = new Location(null, null);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullLocationName_deZD2_GvDg0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    Location location = new Location(null, null);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: RECEIVE"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullLocationName_deZD2_GvDg0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.RECEIVE;
    Location location = new Location(null, null);
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullVoyage_slZu3_KMvF0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CLAIM;
    UnLocode unLocode = new UnLocode("JPYOK");
    Location location = new Location(unLocode, "Yokohama");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, null);
    String summary = event.getSummary();
    assertTrue(summary.contains("Yokohama"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullVoyage_slZu3_KMvF0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CLAIM;
    UnLocode unLocode = new UnLocode("JPYOK");
    Location location = new Location(unLocode, "Yokohama");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, null);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullVoyage_slZu3_KMvF0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CLAIM;
    UnLocode unLocode = new UnLocode("JPYOK");
    Location location = new Location(unLocode, "Yokohama");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, null);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: CLAIM"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullVoyage_slZu3_KMvF0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CLAIM;
    UnLocode unLocode = new UnLocode("JPYOK");
    Location location = new Location(unLocode, "Yokohama");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, null);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullVoyage_slZu3_KMvF0_5() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CLAIM;
    UnLocode unLocode = new UnLocode("JPYOK");
    Location location = new Location(unLocode, "Yokohama");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location, null);
    String summary = event.getSummary();
    assertFalse(summary.contains("Voyage:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullType_ZSod4_lgSv0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = null; // Corrected the reference to the enum Type
    UnLocode unLocode = new UnLocode("DEHAM");
    Location location = new Location(unLocode, "Hamburg");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Hamburg"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullType_ZSod4_lgSv0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = null; // Corrected the reference to the enum Type
    UnLocode unLocode = new UnLocode("DEHAM");
    Location location = new Location(unLocode, "Hamburg");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullType_ZSod4_lgSv0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = null; // Corrected the reference to the enum Type
    UnLocode unLocode = new UnLocode("DEHAM");
    Location location = new Location(unLocode, "Hamburg");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullType_ZSod4_lgSv0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = null; // Corrected the reference to the enum Type
    UnLocode unLocode = new UnLocode("DEHAM");
    Location location = new Location(unLocode, "Hamburg");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullCompletionTime_bzAa5_XCBE0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CUSTOMS;
    UnLocode unLocode = new UnLocode("FRPAR");
    Location location = new Location(unLocode, "Paris");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Paris"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullCompletionTime_bzAa5_XCBE0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CUSTOMS;
    UnLocode unLocode = new UnLocode("FRPAR");
    Location location = new Location(unLocode, "Paris");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullCompletionTime_bzAa5_XCBE0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CUSTOMS;
    UnLocode unLocode = new UnLocode("FRPAR");
    Location location = new Location(unLocode, "Paris");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: CUSTOMS"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullCompletionTime_bzAa5_XCBE0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = LocalDateTime.now();
    HandlingEvent.Type type = HandlingEvent.Type.CUSTOMS;
    UnLocode unLocode = new UnLocode("FRPAR");
    Location location = new Location(unLocode, "Paris");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: " + registrationTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullRegistrationTime_OiSX6_GlQH0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Location location = new Location(new UnLocode("ITROM"), "Rome");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Rome"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullRegistrationTime_OiSX6_GlQH0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Location location = new Location(new UnLocode("ITROM"), "Rome");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains(completionTime.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullRegistrationTime_OiSX6_GlQH0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Location location = new Location(new UnLocode("ITROM"), "Rome");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: LOAD"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithNullRegistrationTime_OiSX6_GlQH0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = LocalDateTime.now();
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    Location location = new Location(new UnLocode("ITROM"), "Rome");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithAllNulls_Atwu7_MfdM0_1() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = null;
    Location location = new Location(new UnLocode("AUMEL"), "Melbourne");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.startsWith("Melbourne\n"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithAllNulls_Atwu7_MfdM0_2() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = null;
    Location location = new Location(new UnLocode("AUMEL"), "Melbourne");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithAllNulls_Atwu7_MfdM0_3() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = null;
    Location location = new Location(new UnLocode("AUMEL"), "Melbourne");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Type: null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryWithAllNulls_Atwu7_MfdM0_4() {
    Cargo cargo = new Cargo();
    LocalDateTime completionTime = null;
    LocalDateTime registrationTime = null;
    HandlingEvent.Type type = null;
    Location location = new Location(new UnLocode("AUMEL"), "Melbourne");
    HandlingEvent event = new HandlingEvent(cargo, completionTime, registrationTime, type, location);
    String summary = event.getSummary();
    assertTrue(summary.contains("Reg.: null"));
  }
}