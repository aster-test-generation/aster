/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.primefaces.event.FlowEvent;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimePattern_wFmE0() throws Exception {
    EventLogger logger = new EventLogger();
    String expectedPattern = DateConverter.DATE_TIME_FORMAT;
    assertEquals(expectedPattern, logger.getCompletionTimePattern());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_ysWK0() throws Exception {
    EventLogger logger = new EventLogger();
    String expected = "Voyage123";
    String actual = logger.getVoyageNumber();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_GhkH0() throws Exception {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default null, adjust based on actual default or setup
    String actual = logger.getTrackingId();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_JwZu0_1() throws Exception {
    EventLogger logger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = logger.getEventTypes();
    for (HandlingEvent.Type type : HandlingEvent.Type.values()) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_xVgN0() throws Exception {
    EventLogger logger = new EventLogger();
    String expected = null; // Assuming default location is null if not set
    assertEquals(expected, logger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationsReturnsNotNull_Ctlj0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    assertNotNull(eventLogger.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_NOxd0() throws Exception {
    EventLogger logger = new EventLogger();
    HandlingEvent.Type expected = null; // Assuming default or preset value
    assertEquals(expected, logger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_qVzy0() throws Exception {
    EventLogger logger = new EventLogger();
    LocalDateTime expected = LocalDateTime.now(); // Assuming the completion time is set to the current time somewhere in the class
    assertEquals(expected, logger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdsReturnsNotNull_OUUX0() throws Exception {
    EventLogger logger = new EventLogger();
    assertNotNull(logger.getTrackingIds());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnFlowProcess_ValidStep_IVXw0() throws Exception {
    EventLogger logger = new EventLogger();
    FlowEvent event = new FlowEvent(null, "voyageTab", "dateTab");
    String result = logger.onFlowProcess(event);
    assertEquals("dateTab", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnFlowProcess_InvalidStep_OXFY1() throws Exception {
    EventLogger logger = new EventLogger();
    FlowEvent event = new FlowEvent(null, "voyageTab", "dateTab");
    String result = logger.onFlowProcess(event);
    assertEquals("voyageTab", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnFlowProcess_DateTabStep_vqNy2() throws Exception {
    EventLogger logger = new EventLogger();
    FlowEvent event = new FlowEvent(null, "someTab", "dateTab");
    String result = logger.onFlowProcess(event);
    assertEquals("dateTab", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTimeValue_gBzm0() throws Exception {
    EventLogger logger = new EventLogger();
    String expected = "2023-10-04T14:53:00Z"; // Assuming the completionTime is set to this specific UTC datetime
    assertEquals(expected, logger.getCompletionTimeValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_Null_Uldy5() throws Exception {
    EventLogger logger = new EventLogger();
    logger.setEventType(null);
    assertNull(logger.getEventType());
  }
}