/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_HandlingReportService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithValidData_epEk0() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-10-10T12:00:00");
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn("ABC123");
    service.submitReport(report);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithNullVoyageNumber_FaWn1() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-10-10T12:00:00");
    when(report.getVoyageNumber()).thenReturn(null);
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn("ABC123");
    service.submitReport(report);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithInvalidEventType_vQAf2() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-10-10T12:00:00");
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("INVALID_TYPE");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn("ABC123");
    try {
      service.submitReport(report);
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithNullUnLocode_MWNk4() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-10-10T12:00:00");
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn(null);
    when(report.getTrackingId()).thenReturn("ABC123");
    try {
      service.submitReport(report);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithNullTrackingId_bpsL5() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-10-10T12:00:00");
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn(null);
    try {
      service.submitReport(report);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithEmptyStrings_SaGW7() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("");
    when(report.getVoyageNumber()).thenReturn("");
    when(report.getEventType()).thenReturn("");
    when(report.getUnLocode()).thenReturn("");
    when(report.getTrackingId()).thenReturn("");
    try {
      service.submitReport(report);
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithValidData_epEk0_fid1() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn(LocalDateTime.parse("2023-10-10T12:00:00").toString());
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn("ABC123");
    service.submitReport(report);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithNullUnLocode_MWNk4_fid1() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn(LocalDateTime.of(2023, 10, 10, 12, 0).toString());
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn(null);
    when(report.getTrackingId()).thenReturn("ABC123");
    try {
      service.submitReport(report);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithNullTrackingId_bpsL5_fid1() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn(LocalDateTime.parse("2023-10-10T12:00:00").toString());
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn(null);
    try {
      service.submitReport(report);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSubmitReportWithEmptyStrings_SaGW7_fid1() {
    HandlingReportService service = new HandlingReportService();
    HandlingReport report = mock(HandlingReport.class);
    when(report.getCompletionTime()).thenReturn("2023-01-01T00:00:00Z");
    when(report.getVoyageNumber()).thenReturn("V123");
    when(report.getEventType()).thenReturn("LOAD");
    when(report.getUnLocode()).thenReturn("USNYC");
    when(report.getTrackingId()).thenReturn("ABC123");
    try {
      service.submitReport(report);
    } catch (IllegalArgumentException e) {
      fail("Should not throw IllegalArgumentException");
    }
  }
}