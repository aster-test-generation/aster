/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.eclipse.cargotracker.application.ApplicationEvents;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.CannotCreateHandlingEventException;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingEventFactory;
import org.eclipse.cargotracker.domain.model.handling.HandlingEventRepository;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultHandlingEventService_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterHandlingEvent_RepositoryThrowsException_mXvm2_YowW0() throws org.eclipse.cargotracker.domain.model.handling.CannotCreateHandlingEventException {
    LocalDateTime completionTime = LocalDateTime.now().minusDays(1);
    TrackingId trackingId = new TrackingId("TRACK123");
    VoyageNumber voyageNumber = new VoyageNumber("VOYAGE456");
    UnLocode unLocode = new UnLocode("USNYC");
    HandlingEvent.Type type = HandlingEvent.Type.LOAD;
    HandlingEvent event = mock(HandlingEvent.class);
    HandlingEventFactory handlingEventFactory = mock(HandlingEventFactory.class);
    HandlingEventRepository handlingEventRepository = mock(HandlingEventRepository.class);
    ApplicationEvents applicationEvents = mock(ApplicationEvents.class);
    Logger logger = mock(Logger.class);
    when(handlingEventFactory.createHandlingEvent(any(), any(), any(), any(), any(), any())).thenReturn(event);
    doThrow(new RuntimeException("Database error")).when(handlingEventRepository).store(event);
    DefaultHandlingEventService service = new DefaultHandlingEventService();
    assertThrows(RuntimeException.class, () -> {
      service.registerHandlingEvent(completionTime, trackingId, voyageNumber, unLocode, type);
    });
  }
}