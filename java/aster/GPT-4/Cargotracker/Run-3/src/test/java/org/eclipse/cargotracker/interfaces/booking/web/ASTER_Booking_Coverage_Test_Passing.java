/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.BookingServiceFacade;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class Aster_Booking_Coverage_Test_Passing {
  private Booking booking;
  private BookingServiceFacade bookingServiceFacade;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_yPxj1() {
    booking.setDestinationUnlocode("UNLOC1");
    assertEquals("City One", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_CaseInsensitiveUnlocode_sYys2() {
    booking.setDestinationUnlocode("unloc2");
    assertEquals("City Two", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_UnlocodeNotFound_FNeb3() {
    try {
      booking.setDestinationUnlocode("UNLOC999");
      fail("Expected an NoSuchElementException");
    } catch (NoSuchElementException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_NullUnlocode_lPgs4() {
    try {
      booking.setDestinationUnlocode(null);
      fail("Expected a NullPointerException");
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_EmptyUnlocode_xvxA5() {
    try {
      booking.setDestinationUnlocode("");
      fail("Expected an NoSuchElementException");
    } catch (NoSuchElementException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_StreamOperation_uFaP6() {
    booking.setDestinationUnlocode("UNLOC3");
    assertEquals("City Three", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitSetsTodayCorrectly_yxps0() {
    Booking booking = new Booking();
    LocalDate expectedDate = LocalDate.now();
    booking.init();
    LocalDate actualDate = booking.getToday();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeAssignsUnlocode_wAwn1_QSbI0() {
    booking.setOriginUnlocode("UNLOC1");
    assertEquals("UNLOC1", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeAssignsOriginName_tvvw2_CKnn0() {
    booking.setOriginUnlocode("UNLOC1");
    assertEquals("Location One", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeStreamProcessing_tnZW3_uaWP0() {
    booking.setOriginUnlocode("UNLOC2");
    assertNotNull(booking.getOriginName()); // Ensures stream was processed
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeFiltering_OECg4_wjEG0() {
    booking.setOriginUnlocode("UNLOC3");
    assertEquals("Location Three", booking.getOriginName()); // Ensures correct filtering
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeFindAny_ezgb5_tpOD0() {
    booking.setOriginUnlocode("UNLOC1");
    assertEquals("Location One", booking.getOriginName()); // Ensures findAny works
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeGet_MXZk6_MRFM0() {
    booking.setOriginUnlocode("UNLOC2");
    assertEquals("Location Two", booking.getOriginName()); // Access via getter method
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_UAuZ0() {
    booking = new Booking();
    booking.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testSetOriginUnlocodeGetName_KitY7_fXyr1() {
    booking.setOriginUnlocode("UNLOC3");
    assertEquals("Location Three", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterDifferentUnlocodes_IoIv1_aSQe0() {
    LocalDate testArrivalDeadline = LocalDate.now().plusDays(10); // Assuming a deadline 10 days from now
    when(bookingServiceFacade.bookNewCargo("NYC", "LAX", testArrivalDeadline)).thenReturn("Success");
    booking.setArrivalDeadline(testArrivalDeadline); // Use setter method to set the deadline
    String result = booking.register();
    assertEquals("/admin/dashboard.xhtml", result);
    verify(bookingServiceFacade).bookNewCargo("NYC", "LAX", testArrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDurationCalculationWithNegativeDays_Fdty5_TCPE0() {
    Booking booking = new Booking();
    booking.init(); // Initialize 'today' and other necessary properties through the proper method
    booking.setArrivalDeadline(booking.getToday().minusDays(5));
    booking.deadlineUpdated();
    assert(booking.getDuration() == -5);
  }
}