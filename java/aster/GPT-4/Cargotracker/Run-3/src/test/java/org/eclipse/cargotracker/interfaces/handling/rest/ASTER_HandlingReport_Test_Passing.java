/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_SHVA0() throws Exception {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default value of unLocode is null
    assertEquals(expected, report.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_COpo0() throws Exception {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default trackingId is null without setter shown
    assertEquals(expected, report.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionTime_MOrm0() throws Exception {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default value of completionTime is null
    assertEquals(expected, report.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_DosK0() throws Exception {
    HandlingReport report = new HandlingReport();
    String expected = null; // Assuming default null, adjust based on actual default or test setup
    assertEquals(expected, report.getEventType());
  }
}