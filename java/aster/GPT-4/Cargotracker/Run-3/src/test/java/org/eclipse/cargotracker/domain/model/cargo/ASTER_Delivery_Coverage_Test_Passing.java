/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Coverage_Test_Passing {
  private Delivery delivery;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameObject_ShouldReturnTrue_aRIY1() throws Exception {
    assertTrue(delivery.equals(delivery), "Comparing the same object should return true.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_NullObject_ShouldReturnFalse_zbAi2() throws Exception {
    assertFalse(delivery.equals(null), "Comparing against null should return false.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_ShouldReturnFalse_emVC3() throws Exception {
    Object differentClassObject = new Object();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullValues_vCsf0_UNqv0() {
    Delivery delivery = new Delivery();
    assertNotNull(delivery.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithHandlingEventOnly_vlEz1_CflQ0() {
    HandlingEvent event = new HandlingEvent();
    Delivery delivery = new Delivery(event, null, null);
    assertNotNull(delivery.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_eeUG8_rnzP0() {
    Delivery delivery = new Delivery();
    int expectedHashCode = delivery.hashCode();
    assertEquals(expectedHashCode, delivery.hashCode(), "Hashcode should be consistent");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullAndNonNullValues_yiZv9_FgYN0() {
    Delivery delivery1 = new Delivery(null, null, null);
    Delivery delivery2 = new Delivery(new HandlingEvent(), new Itinerary(), new RouteSpecification());
    assertNotEquals(delivery1.hashCode(), delivery2.hashCode(), "Hashcode should differ between null and non-null values");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithAllNullValues_LxTZ10_Tiqb0() {
    Delivery delivery = new Delivery(null, null, null);
    assertNotNull(delivery.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_SameValues_ShouldReturnTrue_oMnD4_IMhb0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    Delivery anotherDelivery = new Delivery(lastEvent, itinerary, routeSpecification);
    assertTrue(delivery.equals(anotherDelivery), "Comparing two deliveries with the same values should return true.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentValues_ShouldReturnFalse_iRZy5_PGQy0() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery anotherDelivery = new Delivery(lastEvent, itinerary, routeSpecification);
    Delivery delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    assertFalse(delivery.equals(anotherDelivery), "Comparing two deliveries with different values should return false.");
  }
}