/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMostRecentlyCompletedEventWithEmptyList_sBtn0() throws Exception {
    HandlingHistory history = new HandlingHistory(Collections.emptyList());
    HandlingEvent result = history.getMostRecentlyCompletedEvent();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSelf_JWla0() throws Exception {
    Collection<HandlingEvent> events = new ArrayList<>();
    HandlingHistory history = new HandlingHistory(events);
    assertTrue(history.equals(history));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_inYU1() throws Exception {
    Collection<HandlingEvent> events = new ArrayList<>();
    HandlingHistory history = new HandlingHistory(events);
    assertFalse(history.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_OblB2() throws Exception {
    Collection<HandlingEvent> events = new ArrayList<>();
    HandlingHistory history = new HandlingHistory(events);
    Object other = new Object();
    assertFalse(history.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameEvents_aODc3() throws Exception {
    Collection<HandlingEvent> events1 = new ArrayList<>();
    Collection<HandlingEvent> events2 = new ArrayList<>();
    HandlingHistory history1 = new HandlingHistory(events1);
    HandlingHistory history2 = new HandlingHistory(events2);
    assertTrue(history1.equals(history2));
  }
}