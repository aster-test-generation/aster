/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_CargoRouteDtoAssembler_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithEmptyItinerary_FjAF0() {
    Cargo cargo = mock(Cargo.class);
    Itinerary itinerary = mock(Itinerary.class);
    when(cargo.getItinerary()).thenReturn(itinerary);
    when(itinerary.getLegs()).thenReturn(Collections.emptyList());
    CargoRouteDtoAssembler assembler = new CargoRouteDtoAssembler();
    assembler.toDto(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullItinerary_Ivtt1() {
    Cargo cargo = mock(Cargo.class);
    when(cargo.getItinerary()).thenReturn(null);
    CargoRouteDtoAssembler assembler = new CargoRouteDtoAssembler();
    assembler.toDto(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithRoutingStatus_wEQO7() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getRoutingStatus()).thenReturn(RoutingStatus.MISROUTED);
    CargoRouteDtoAssembler assembler = new CargoRouteDtoAssembler();
    assembler.toDto(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithTransportStatus_rROd8() {
    Cargo cargo = mock(Cargo.class);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.CLAIMED);
    CargoRouteDtoAssembler assembler = new CargoRouteDtoAssembler();
    assembler.toDto(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithTrackingId_SkaI11() {
    Cargo cargo = mock(Cargo.class);
    when(cargo.getTrackingId()).thenReturn(new TrackingId("ABC123"));
    CargoRouteDtoAssembler assembler = new CargoRouteDtoAssembler();
    assembler.toDto(cargo);
  }
}