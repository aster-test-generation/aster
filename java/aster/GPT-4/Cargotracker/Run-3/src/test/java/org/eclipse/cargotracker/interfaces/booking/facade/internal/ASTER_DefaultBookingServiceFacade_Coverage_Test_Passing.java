/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.BookingService;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.LocationRepository;
import org.eclipse.cargotracker.domain.model.voyage.VoyageRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.ItineraryCandidateDtoAssembler;
import org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler.LocationDtoAssembler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Passing {
  private LocationDtoAssembler locationDtoAssembler;
  private DefaultBookingServiceFacade defaultBookingServiceFacade;
  private BookingService bookingService;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_InvalidRouteCandidate_GXyj4() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidate = mock(RouteCandidate.class);
    ItineraryCandidateDtoAssembler assembler = mock(ItineraryCandidateDtoAssembler.class);
    BookingService bookingService = mock(BookingService.class);
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    when(assembler.fromDTO(routeCandidate, voyageRepository, locationRepository)).thenThrow(new IllegalArgumentException("Invalid route candidate"));
    try {
      facade.assignCargoToRoute("ABC123", routeCandidate);
    } catch (IllegalArgumentException e) {
      verify(bookingService, never()).assignCargoToRoute(any(Itinerary.class), any(TrackingId.class));
      throw e;
    }
  }

  @Test
  public void testAssignCargoToRoute_NullRouteCandidate_IPRx2_Xwgx0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_WithNullTrackingId_GGLU5_cHev0() {
    String trackingIdValue = null;
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    try {
      CargoRoute result = facade.loadCargoForRouting(trackingIdValue);
      assertNull(result);
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }
}