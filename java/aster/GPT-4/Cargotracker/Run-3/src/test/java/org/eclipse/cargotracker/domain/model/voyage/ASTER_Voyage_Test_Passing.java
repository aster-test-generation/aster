/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Voyage_Test_Passing {
  private Voyage voyage;
  private VoyageNumber voyageNumber;
  private VoyageNumber otherVoyageNumber;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Reflexive_zent0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Null_EJlm1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_DifferentClass_rXdF2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Object differentClassObject = new Object();
    assertFalse(voyage.equals(differentClassObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_EquivalentObjects_NVml3() throws Exception {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_XFiJ0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Schedule result = voyage.getSchedule();
    assertEquals(schedule, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringReturnsCorrectFormat_oXVC0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals("Voyage 123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_AqmR0() throws Exception {
    VoyageNumber expectedVoyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(expectedVoyageNumber, schedule);
    VoyageNumber actualVoyageNumber = voyage.getVoyageNumber();
    assertEquals(expectedVoyageNumber, actualVoyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsWithSameVoyageNumber_JyRk0() throws Exception {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    Schedule schedule1 = new Schedule();
    Voyage voyage1 = new Voyage(voyageNumber1, schedule1);
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    Schedule schedule2 = new Schedule();
    Voyage voyage2 = new Voyage(voyageNumber2, schedule2);
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsWithDifferentVoyageNumber_esiV1() throws Exception {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    Schedule schedule1 = new Schedule();
    Voyage voyage1 = new Voyage(voyageNumber1, schedule1);
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    Schedule schedule2 = new Schedule();
    Voyage voyage2 = new Voyage(voyageNumber2, schedule2);
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAsWithNull_isPU2() throws Exception {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    Schedule schedule1 = new Schedule();
    Voyage voyage1 = new Voyage(voyageNumber1, schedule1);
    Voyage voyage2 = null;
    assertFalse(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_UHXq0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expectedHashCode = voyageNumber.hashCode();
    int actualHashCode = voyage.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}