/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBookable_Rcae0() throws Exception {
    Booking booking = new Booking();
    boolean result = booking.isBookable();
    assertEquals(true, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDuration_PASW0() throws Exception {
    Booking booking = new Booking();
    long expectedDuration = 0; // Assuming default duration is 0
    assertEquals(expectedDuration, booking.getDuration());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginName_Pusq0() throws Exception {
    Booking booking = new Booking();
    String expected = null; // Assuming originName is initialized to null
    String actual = booking.getOriginName();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetReturnValue_CEgR0() throws Exception {
    Booking booking = new Booking();
    String expected = "/admin/dashboard.xhtml";
    assertEquals(expected, booking.getReturnValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_ValidUnlocode_kNBK0() throws Exception {
    Booking booking = new Booking();
    String validUnlocode = "USNYC"; // Assuming "USNYC" is a valid UN/LOCODE in the locations list
    String expectedDestinationName = "New York"; // Assuming the name associated with "USNYC" is "New York"
    booking.setDestinationUnlocode(validUnlocode);
    assertEquals(expectedDestinationName, booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_sIjj0() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now(); // Assuming the deadline is set to the current date for this test
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOriginUnlocode_KHig0() throws Exception {
    Booking booking = new Booking();
    String expected = null; // Assuming originUnlocode is initialized to null
    assertEquals(expected, booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTodayReturnsCurrentDate_fIUS0() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    LocalDate actual = booking.getToday();
    assertEquals(expected, actual);
  }
}