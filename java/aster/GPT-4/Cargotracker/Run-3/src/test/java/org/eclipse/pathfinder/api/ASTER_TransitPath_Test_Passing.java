/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitPath_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransitEdgesReturnsCorrectList_rMsw0() throws Exception {
    List<TransitEdge> expectedEdges = Arrays.asList(new TransitEdge(), new TransitEdge());
    TransitPath transitPath = new TransitPath(expectedEdges);
    List<TransitEdge> actualEdges = transitPath.getTransitEdges();
    assertEquals(expectedEdges, actualEdges);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_emptyList_ouJd0() throws Exception {
    TransitPath transitPath = new TransitPath(new ArrayList<>());
    assertEquals("TransitPath{transitEdges=[]}", transitPath.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransitEdges_vjrr0() throws Exception {
    List<TransitEdge> edges = new ArrayList<>();
    TransitPath path = new TransitPath();
    path.setTransitEdges(edges);
    assertEquals(edges, path.getTransitEdges());
  }
}