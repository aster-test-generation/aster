/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import jakarta.jms.JMSException;
import jakarta.jms.Message;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DeliveredCargoConsumer_Coverage_Test_Passing {
  private DeliveredCargoConsumer consumer;
  private Logger logger;
  private Message message;

  private static void setStaticField(Class<?> clazz, String fieldName, Object value) {
    try {
      java.lang.reflect.Field field = clazz.getDeclaredField(fieldName);
      field.setAccessible(true);
      field.set(null, value);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_SMnB0() {
    consumer = new DeliveredCargoConsumer();
    logger = mock(Logger.class);
    message = mock(Message.class);
    setStaticField(DeliveredCargoConsumer.class, "logger", logger);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageLogsInfoSuccessfully_XcYI1() throws JMSException {
    when(message.getBody(String.class)).thenReturn("12345");
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} delivered.", "12345");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageHandlesJMSException_hYCV2() throws JMSException {
    when(message.getBody(String.class)).thenThrow(new JMSException("Failed to get body"));
    consumer.onMessage(message);
    verify(logger).log(Level.WARNING, "Error processing message.", new JMSException("Failed to get body"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageLogsInfoWithNullMessage_AKQw3() throws JMSException {
    when(message.getBody(String.class)).thenReturn(null);
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} delivered.", new Object[]{null});
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageLogsInfoWithEmptyTrackingId_wnrq4() throws JMSException {
    when(message.getBody(String.class)).thenReturn("");
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} delivered.", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithNonStringBody_DQnX5() throws JMSException {
    when(message.getBody(String.class)).thenReturn("NonStringBody");
    consumer.onMessage(message);
    verify(logger).log(Level.INFO, "Cargo with tracking ID {0} delivered.", "NonStringBody");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithJMSExceptionAndNullMessage_KDNe6() throws JMSException {
    when(message.getBody(String.class)).thenThrow(new JMSException("Null body"));
    consumer.onMessage(message);
    verify(logger).log(Level.WARNING, "Error processing message.", new JMSException("Null body"));
  }
}