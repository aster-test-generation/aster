/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.location.LocationRepository;
import org.eclipse.cargotracker.domain.model.voyage.VoyageRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_ItineraryCandidateDtoAssembler_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTO_CreateVoyageNumber_aBCE2_QWcy0() {
    RouteCandidate routeCandidate = mock(RouteCandidate.class);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> mockLegs = Arrays.asList(mock(org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg.class));
    when(routeCandidate.getLegs()).thenReturn(mockLegs);
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    try {
      assembler.fromDTO(routeCandidate, voyageRepository, locationRepository);
    } catch (NullPointerException e) {
      // Expected exception due to null handling in the method
    }
    verify(mockLegs.get(0)).getVoyageNumber();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTO_AddLegToList_BLol6_Dlvj0_1_fid1() {
    RouteCandidate routeCandidate = mock(RouteCandidate.class);
    org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg legDTO = mock(org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg.class);
    when(routeCandidate.getLegs()).thenReturn(Arrays.asList(legDTO));
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    Itinerary result = assembler.fromDTO(routeCandidate, voyageRepository, locationRepository);
    assertNotNull(result.getLegs());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTO_ConvertLoadTime_fTxG7_EWAL0_fid1() {
    RouteCandidate routeCandidate = mock(RouteCandidate.class);
    org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg legDTO = mock(org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg.class);
    when(legDTO.getLoadTime()).thenReturn("2023-01-01T12:00:00");
    when(routeCandidate.getLegs()).thenReturn(Arrays.asList(legDTO));
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    assembler.fromDTO(routeCandidate, voyageRepository, locationRepository);
    verify(legDTO).getLoadTime();
  }
}