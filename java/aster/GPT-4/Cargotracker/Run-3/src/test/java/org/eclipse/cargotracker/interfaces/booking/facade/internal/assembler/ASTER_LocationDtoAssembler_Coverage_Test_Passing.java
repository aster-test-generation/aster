/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_LocationDtoAssembler_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_NullList_orQz4() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    try {
      assembler.toDtoList(null);
      fail("Expected an exception to be thrown");
    } catch (NullPointerException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_EmptyList_aaDL0_UTsW0() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = Collections.emptyList();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_SingleElement_PhXM3_hRnm0_1_fid2() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = new ArrayList<>();
    allLocations.add(new org.eclipse.cargotracker.domain.model.location.Location(new org.eclipse.cargotracker.domain.model.location.UnLocode("USNYC"), "Single Location"));
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertEquals(1, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoList_SingleElement_PhXM3_hRnm0_2_fid2() {
    LocationDtoAssembler assembler = new LocationDtoAssembler();
    List<org.eclipse.cargotracker.domain.model.location.Location> allLocations = new ArrayList<>();
    allLocations.add(new org.eclipse.cargotracker.domain.model.location.Location(new org.eclipse.cargotracker.domain.model.location.UnLocode("SINGL"), "Single Location"));
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> result = assembler.toDtoList(allLocations);
    assertEquals("SINGL", result.get(0).getUnLocode());
  }
}