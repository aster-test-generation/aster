/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrigin_yjgt0() throws Exception {
    UnLocode unLocodeOrigin = new UnLocode("USNYC");
    Location origin = new Location(unLocodeOrigin, "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location result = routeSpecification.getOrigin();
    assertEquals(origin, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedBy_NullItinerary_ReturnsFalse_MNId1() throws Exception {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertFalse(routeSpecification.isSatisfiedBy(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_JfAv0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification();
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_SrTg1() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification();
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_mqBu2() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification();
    assertFalse(routeSpecification.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_RpVW3() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("JPTOK"), "Tokyo");
    LocalDate arrivalDeadline = LocalDate.of(2023, 10, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_ZWux0() throws Exception {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(destination, routeSpecification.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeConsistency_qazg0() throws Exception {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("GBLON"), "London");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = routeSpecification.hashCode();
    assertEquals(expectedHashCode, routeSpecification.hashCode());
  }
}