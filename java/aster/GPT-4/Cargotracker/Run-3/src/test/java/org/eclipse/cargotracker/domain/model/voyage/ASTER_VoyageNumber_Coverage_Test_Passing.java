/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_KyhU0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_smzT1() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_eZwt2() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Object other = new Object();
    assertFalse(voyageNumber.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentVoyageNumber_VFtx3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameVoyageNumber_Seas4() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    assertTrue(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithCasting_wYxP5() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Object other = new VoyageNumber("123");
    assertTrue(voyageNumber.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentValue_PndI6() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    VoyageNumber other = new VoyageNumber("456");
    assertFalse(voyageNumber.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_WithNonNullAndEqualNumbers_hxmb0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("ABC123");
    VoyageNumber voyageNumber2 = new VoyageNumber("ABC123");
    boolean result = voyageNumber1.sameValueAs(voyageNumber2);
    assertTrue(result);
  }
}