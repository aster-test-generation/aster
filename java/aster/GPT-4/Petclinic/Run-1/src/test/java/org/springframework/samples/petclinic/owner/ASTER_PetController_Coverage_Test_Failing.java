/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.ModelMap;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Failing {

	private OwnerRepository ownerRepository;

	private PetController petController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateForm_PetExists_TqAu0_2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		ModelMap model = new ModelMap();
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		int petId = 1;
		String expectedView = "VIEWS_PETS_CREATE_OR_UPDATE_FORM";
		when(owner.getPet(petId)).thenReturn(pet);
		String viewName = petController.initUpdateForm(owner, petId, model, redirectAttributes);
		verify(owner).getPet(petId);
		assertEquals(expectedView, viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_ReturnsOwner_DsVy1() {
		int ownerId = 1;
		Owner mockOwner = mock(Owner.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		Owner result = petController.findOwner(ownerId);
		assertNotNull(result);
		assertEquals(mockOwner, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_CallsFindById_fHaK3() {
		int ownerId = 1;
		Owner mockOwner = mock(Owner.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		petController.findOwner(ownerId);
		verify(ownerRepository).findById(ownerId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwner_ThrowsIllegalArgumentExceptionWithCorrectMessage_prPI4() {
		int ownerId = 1;
		when(ownerRepository.findById(ownerId)).thenReturn(null);
		try {
			petController.findOwner(ownerId);
			fail("Expected an IllegalArgumentException to be thrown");
		}
		catch (IllegalArgumentException e) {
			assertEquals("Owner ID not found: " + ownerId, e.getMessage());
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPet_WhenPetIdIsNull_MhSc1() {
		Pet result = petController.findPet(1, null);
		assertNotNull(result);
		assertTrue(result instanceof Pet);
	}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindPet_WhenOwnerNotFound_HNSo2() {
        when(ownerRepository.findById(1)).thenReturn(null);
        try {
            petController.findPet(1, 2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Owner ID not found: 1", e.getMessage());
        }
    }

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPet_WhenOwnerFoundAndPetExists_uuFg3() {
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = new Pet();
		when(ownerRepository.findById(1)).thenReturn(mockOwner);
		when(mockOwner.getPet(2)).thenReturn(mockPet);
		Pet result = petController.findPet(1, 2);
		assertNotNull(result);
		assertEquals(mockPet, result);
	}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindPet_WhenOwnerIsNull_CVON6() {
        when(ownerRepository.findById(2)).thenReturn(null);
        try {
            petController.findPet(2, 2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Owner ID not found: 2", e.getMessage());
        }
    }

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateForm_PetExists_TqAu0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		ModelMap model = new ModelMap();
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		int petId = 1;
		String expectedView = "VIEWS_PETS_CREATE_OR_UPDATE_FORM";
		when(owner.getPet(petId)).thenReturn(pet);
		String viewName = petController.initUpdateForm(owner, petId, model, redirectAttributes);
		verify(owner).getPet(petId);
		assertEquals(pet, model.get("pet"));
		assertEquals(expectedView, viewName);
	}

}