/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.data.domain.Page;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.ModelAndView;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Passing {

	private Model model;

	private OwnerController ownerController;

	private OwnerRepository ownerRepository;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindOwnerWithNullOwnerId_wHkG0() {
		OwnerRepository mockedOwnerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(mockedOwnerRepository);
		Owner result = ownerController.findOwner(null);
		assertNotNull(result, "Expected a new Owner to be created but got null");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_addObject_qRrP0() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		Owner mockOwner = mock(Owner.class);
		when(mockRepository.findById(1)).thenReturn(mockOwner);
		OwnerController controller = new OwnerController(mockRepository);
		ModelAndView mav = controller.showOwner(1);
		assertEquals(mockOwner, mav.getModel().get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_returnModelAndView_izyb1_1() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		Owner mockOwner = mock(Owner.class);
		when(mockRepository.findById(1)).thenReturn(mockOwner);
		OwnerController controller = new OwnerController(mockRepository);
		ModelAndView mav = controller.showOwner(1);
		assertEquals("owners/ownerDetails", mav.getViewName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessFindFormWithNoOwnersFound_FxbE0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		owner.setLastName("Smith");
		BindingResult result = mock(BindingResult.class);
		Model model = mock(Model.class);
		Page<Owner> emptyPage = mock(Page.class);
		when(emptyPage.isEmpty()).thenReturn(true);
		when(emptyPage.getTotalElements()).thenReturn(0L);
		when(ownerRepository.findByLastName(eq("Smith"), any())).thenReturn(emptyPage);
		String view = ownerController.processFindForm(1, owner, result, model);
		assertEquals("owners/findOwners", view);
		verify(result).rejectValue("lastName", "notFound", "not found");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessFindFormWithOneOwnerFound_uQzh1() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		owner.setLastName("Doe");
		BindingResult result = mock(BindingResult.class);
		Model model = mock(Model.class);
		Page<Owner> singleOwnerPage = mock(Page.class);
		when(singleOwnerPage.getTotalElements()).thenReturn(1L);
		when(singleOwnerPage.iterator()).thenReturn(Collections.singleton(owner).iterator());
		when(ownerRepository.findByLastName(eq("Doe"), any())).thenReturn(singleOwnerPage);
		String view = ownerController.processFindForm(1, owner, result, model);
		assertTrue(view.startsWith("redirect:/owners/"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessFindFormWithMultipleOwnersFound_kXkY2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		owner.setLastName("Johnson");
		BindingResult result = mock(BindingResult.class);
		Model model = mock(Model.class);
		Page<Owner> multipleOwnersPage = mock(Page.class);
		when(multipleOwnersPage.getTotalElements()).thenReturn(5L);
		when(multipleOwnersPage.isEmpty()).thenReturn(false);
		when(ownerRepository.findByLastName(eq("Johnson"), any())).thenReturn(multipleOwnersPage);
		String view = ownerController.processFindForm(1, owner, result, model);
		assertNotNull(view);
		verify(model, atLeastOnce()).addAttribute(anyString(), any());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_McFl0() {
		ownerRepository = mock(OwnerRepository.class);
		ownerController = new OwnerController(ownerRepository);
		model = mock(Model.class);
	}

}