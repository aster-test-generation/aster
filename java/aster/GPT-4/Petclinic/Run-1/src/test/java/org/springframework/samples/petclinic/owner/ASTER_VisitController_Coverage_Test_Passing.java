/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Passing {

	private VisitController visitController;

	private OwnerRepository ownerRepository;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitForm_VerifyFlashMessageAdded_rKSF5() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		VisitController controller = new VisitController(mockOwnerRepository);
		Owner owner = new Owner();
		Visit visit = new Visit();
		BindingResult mockBindingResult = mock(BindingResult.class);
		RedirectAttributes mockRedirectAttributes = mock(RedirectAttributes.class);
		when(mockBindingResult.hasErrors()).thenReturn(false);
		controller.processNewVisitForm(owner, 1, visit, mockBindingResult, mockRedirectAttributes);
		verify(mockRedirectAttributes).addFlashAttribute("message", "Your visit has been booked");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitNewVisitForm_ZsoW0_KtZf0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(ownerRepository);
		String view = visitController.initNewVisitForm();
		assertEquals("pets/createOrUpdateVisitForm", view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitForm_WithErrors_uWYJ0_KClh0() {
		OwnerRepository mockOwnerRepository = mock(OwnerRepository.class);
		VisitController controller = new VisitController(mockOwnerRepository);
		Owner owner = new Owner();
		Visit visit = new Visit();
		BindingResult mockBindingResult = mock(BindingResult.class);
		RedirectAttributes mockRedirectAttributes = mock(RedirectAttributes.class);
		when(mockBindingResult.hasErrors()).thenReturn(true);
		String view = controller.processNewVisitForm(owner, 1, visit, mockBindingResult, mockRedirectAttributes);
		assertEquals("pets/createOrUpdateVisitForm", view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_KPJb0() {
		ownerRepository = mock(OwnerRepository.class);
		visitController = new VisitController(ownerRepository);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_ReturnVisit_CXvT7() {
		int ownerId = 1;
		int petId = 1;
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		when(owner.getPet(petId)).thenReturn(pet);
		Map<String, Object> model = new HashMap<>();
		Visit visit = visitController.loadPetWithVisit(ownerId, petId, model);
		assertEquals(visit, visitController.loadPetWithVisit(ownerId, petId, model));
	}

}