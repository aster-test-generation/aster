/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Passing {

	private OwnerRepository ownerRepository;

	private PetController petController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_ReturnsCorrectView_wugH3() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		String viewName = petController.initCreationForm(owner, model);
		assertEquals("Should return the correct view", "VIEWS_PETS_CREATE_OR_UPDATE_FORM", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateForm_PetExists_TqAu0_1() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Owner owner = mock(Owner.class);
		Pet pet = mock(Pet.class);
		ModelMap model = new ModelMap();
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		int petId = 1;
		String expectedView = "VIEWS_PETS_CREATE_OR_UPDATE_FORM";
		when(owner.getPet(petId)).thenReturn(pet);
		String viewName = petController.initUpdateForm(owner, petId, model, redirectAttributes);
		verify(owner).getPet(petId);
		assertEquals(pet, model.get("pet"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void initOwnerBinder(WebDataBinder dataBinder) {
		dataBinder.setDisallowedFields("id");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationForm_PetIsAddedToOwner_uwmR1_mPDa0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		petController.initCreationForm(owner, model);
		assertEquals(1, owner.getPets().size(), "Owner should have one pet");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_LofI0() {
		ownerRepository = mock(OwnerRepository.class);
		petController = new PetController(ownerRepository);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPet_WhenOwnerFoundAndPetDoesNotExist_bOda4() {
		Owner mockOwner = mock(Owner.class);
		when(ownerRepository.findById(1)).thenReturn(mockOwner);
		when(mockOwner.getPet(3)).thenReturn(null);
		Pet result = petController.findPet(1, 3);
		assertNull(result);
	}

}