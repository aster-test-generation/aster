/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.Model;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Failing {

	private Model model;

	private OwnerController ownerController;

	private OwnerRepository ownerRepository;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_FindsOwnerById_aHnT1() {
		int ownerId = 1;
		Owner expectedOwner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(expectedOwner);
		ownerController.initUpdateOwnerForm(ownerId, model);
		verify(ownerRepository).findById(ownerId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_AddsOwnerToModel_tyZu2() {
		int ownerId = 1;
		Owner owner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		ownerController.initUpdateOwnerForm(ownerId, model);
		verify(model).addAttribute(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_ReturnsCorrectView_wKkK3() {
		int ownerId = 1;
		Owner owner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";
		String viewName = ownerController.initUpdateOwnerForm(ownerId, model);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
	}

}