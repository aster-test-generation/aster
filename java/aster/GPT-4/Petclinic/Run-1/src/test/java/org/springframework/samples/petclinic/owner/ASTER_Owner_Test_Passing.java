/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_jPYH0() {
		Owner owner = new Owner();
		assertEquals("Expected city name", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTelephone_yvxa0() {
		Owner owner = new Owner();
		String expected = "1234567890";
		owner.setTelephone(expected);
		assertEquals(expected, owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetReturnsNullForUnknownPet_Hhdp0() {
		Owner owner = new Owner();
		Pet result = owner.getPet("Unknown");
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetIgnoreCaseSensitive_VUin0_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("buddy", false);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetIgnoreCaseSensitive_VUin0_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("buddy", false);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetCaseSensitive_vYLK1_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("Buddy", false);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetCaseSensitive_vYLK1_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("Buddy", false);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_NonExistingPet_njLN2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("Max", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_PetNameWithDifferentCase_rXtf5_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("BUDDY", false);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_PetNameWithDifferentCase_rXtf5_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("BUDDY", false);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_KWRc0_1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(null, visit);
		});
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_qPtB0_AxNs0() {
		Owner owner = new Owner();
		String expectedCity = "New York";
		owner.setCity(expectedCity);
		assertEquals(expectedCity, owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_qVqy0_pBpy0() {
		Owner owner = new Owner();
		owner.setId(1);
		owner.setLastName("Smith");
		owner.setFirstName("John");
		owner.setAddress("1234 Elm Street");
		owner.setCity("Springfield");
		owner.setTelephone("1234567890");
		String expected = "Owner[id=1,lastName=Smith,firstName=John,address=1234 Elm Street,city=Springfield,telephone=1234567890]";
		assertEquals(expected, owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetTelephone_NJqh0_bGkt0() {
		Owner owner = new Owner();
		owner.setTelephone("123-456-7890"); // Corrected to use the setter method
		assertEquals("123-456-7890", owner.getTelephone());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetAddress_dHER0_RSFc0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals("123 Main St", owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithValidIdReturnsPet_ndaA0_YMjQ0_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet result = owner.getPet(1);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithValidIdReturnsPet_ndaA0_YMjQ0_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet result = owner.getPet(1);
		assertEquals(pet1, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithInvalidIdReturnsNull_aWTx1_Nrpl0() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet result = owner.getPet(2);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_fhWG0_XfzN0() {
		Owner owner = new Owner();
		String expectedAddress = "123 Main St";
		owner.setAddress(expectedAddress);
		assertEquals(expectedAddress, owner.getAddress());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetIgnoreCaseSensitive_VUin0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("buddy", false);
		assertNotNull(result);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_ExistingPetCaseSensitive_vYLK1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("Buddy", false);
		assertNotNull(result);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_PetNameWithDifferentCase_rXtf5() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("Buddy");
		owner.addPet(pet);
		Pet result = owner.getPet("BUDDY", false);
		assertNotNull(result);
		assertEquals("Buddy", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_KWRc0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(null, visit);
		});
		assertEquals("Pet identifier must not be null!", exception.getMessage());
	}

}