/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Failing {

	private VisitController visitController;

	private OwnerRepository ownerRepository;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_GetPetFromOwner_hUUE2() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		when(mockOwner.getPet(petId)).thenReturn(mockPet);
		Map<String, Object> model = new HashMap<>();
		visitController.loadPetWithVisit(ownerId, petId, model);
		verify(mockOwner).getPet(petId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_PutPetInModel_Qpsv3() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		when(mockOwner.getPet(petId)).thenReturn(mockPet);
		Map<String, Object> model = new HashMap<>();
		visitController.loadPetWithVisit(ownerId, petId, model);
		assertEquals(mockPet, model.get("pet"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_PutOwnerInModel_JubG4() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		Map<String, Object> model = new HashMap<>();
		visitController.loadPetWithVisit(ownerId, petId, model);
		assertEquals(mockOwner, model.get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_CreateVisit_Ogyf5() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		when(mockOwner.getPet(petId)).thenReturn(mockPet);
		Map<String, Object> model = new HashMap<>();
		Visit visit = visitController.loadPetWithVisit(ownerId, petId, model);
		assertNotNull(visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_AddVisitToPet_CAnd6() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		when(mockOwner.getPet(petId)).thenReturn(mockPet);
		Map<String, Object> model = new HashMap<>();
		Visit visit = visitController.loadPetWithVisit(ownerId, petId, model);
		verify(mockPet).addVisit(visit);
	}

}