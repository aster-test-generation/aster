/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Passing {

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	private Model model;

	private OwnerRepository ownerRepository;

	private OwnerController ownerController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_AddsOwnerToModelAndView_YKDP0() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		Owner expectedOwner = new Owner();
		int ownerId = 1;
		when(mockRepository.findById(ownerId)).thenReturn(expectedOwner);
		ModelAndView mav = controller.showOwner(ownerId);
		assertSame(expectedOwner, mav.getModel().get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_ReturnsCorrectModelAndView_EKZh1_1() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		int ownerId = 1;
		Owner owner = new Owner();
		when(mockRepository.findById(ownerId)).thenReturn(owner);
		ModelAndView mav = controller.showOwner(ownerId);
		assertEquals("owners/ownerDetails", mav.getViewName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_ReturnsCorrectModelAndView_EKZh1_2() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		int ownerId = 1;
		Owner owner = new Owner();
		when(mockRepository.findById(ownerId)).thenReturn(owner);
		ModelAndView mav = controller.showOwner(ownerId);
		assertSame(owner, mav.getModel().get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessFindFormWithEmptyLastName_mmLE0() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		Owner owner = new Owner();
		owner.setLastName("");
		BindingResult mockBindingResult = mock(BindingResult.class);
		Model mockModel = mock(Model.class);
		Page mockPage = mock(Page.class);
		when(mockPage.isEmpty()).thenReturn(true);
		when(mockRepository.findByLastName("", PageRequest.of(0, 5))).thenReturn(mockPage);
		String view = controller.processFindForm(1, owner, mockBindingResult, mockModel);
		assertEquals("owners/findOwners", view);
		verify(mockRepository).findByLastName("", PageRequest.of(0, 5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessFindFormWithMultipleResults_erBR2() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		Owner owner = new Owner();
		owner.setLastName("Johnson");
		BindingResult mockBindingResult = mock(BindingResult.class);
		Model mockModel = mock(Model.class);
		Page mockPage = mock(Page.class);
		when(mockPage.getTotalElements()).thenReturn(5L);
		when(mockRepository.findByLastName("Johnson", PageRequest.of(0, 5))).thenReturn(mockPage);
		String view = controller.processFindForm(1, owner, mockBindingResult, mockModel);
		assertNotNull(view);
		verify(mockRepository).findByLastName("Johnson", PageRequest.of(0, 5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_SetOwnerId_MxwF2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(owner).setId(1);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_SaveOwner_cwhT3() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(ownerRepository).save(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_FlashMessageOnSuccess_QgcO4() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_ErrorHandling_wKDI6() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(true);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("error", "There was an error in updating the owner.");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAllowedFields_CompletesWithoutError_Moyq1_SGXr0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testShowOwner_ReturnsCorrectModelAndView_EKZh1() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		int ownerId = 1;
		Owner owner = new Owner();
		when(mockRepository.findById(ownerId)).thenReturn(owner);
		ModelAndView mav = controller.showOwner(ownerId);
		assertEquals("owners/ownerDetails", mav.getViewName());
		assertSame(owner, mav.getModel().get("owner"));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_Iicj0() {
		ownerRepository = mock(OwnerRepository.class);
		ownerController = new OwnerController(ownerRepository);
		model = mock(Model.class);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_WithErrors_nOJq0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(true);
		String view = ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("error", "There was an error in updating the owner.");
		assert VIEWS_OWNER_CREATE_OR_UPDATE_FORM.equals(view);
	}

}