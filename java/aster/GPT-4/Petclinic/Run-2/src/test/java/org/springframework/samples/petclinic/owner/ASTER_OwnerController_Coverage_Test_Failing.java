/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Failing {

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	private Model model;

	private OwnerRepository ownerRepository;

	private OwnerController ownerController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessFindFormWithOneResult_ZQVa1() {
		OwnerRepository mockRepository = mock(OwnerRepository.class);
		OwnerController controller = new OwnerController(mockRepository);
		Owner owner = new Owner();
		owner.setLastName("Smith");
		BindingResult mockBindingResult = mock(BindingResult.class);
		Model mockModel = mock(Model.class);
		Page mockPage = mock(Page.class);
		when(mockPage.getTotalElements()).thenReturn(1L);
		when(mockPage.iterator().next()).thenReturn(owner);
		when(mockRepository.findByLastName("Smith", PageRequest.of(0, 5))).thenReturn(mockPage);
		String view = controller.processFindForm(1, owner, mockBindingResult, mockModel);
		assertEquals("redirect:/owners/" + owner.getId(), view);
		verify(mockRepository).findByLastName("Smith", PageRequest.of(0, 5));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_RedirectOnSuccess_QOeq5() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		String view = ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		assert "redirect:/owners/1".equals(view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_NoErrors_ECQV1_bgqT0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		String view = ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(owner).setId(1);
		verify(ownerRepository).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
		assert "redirect:/owners/1".equals(view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_FindsOwnerById_YjrY1() {
		int ownerId = 1;
		Owner owner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		ownerController.initUpdateOwnerForm(ownerId, model);
		verify(ownerRepository).findById(ownerId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_AddsOwnerToModel_SRJW2() {
		int ownerId = 1;
		Owner owner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		ownerController.initUpdateOwnerForm(ownerId, model);
		verify(model).addAttribute(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_ReturnsCorrectView_Tpfp3() {
		int ownerId = 1;
		Owner owner = new Owner();
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		String viewName = ownerController.initUpdateOwnerForm(ownerId, model);
		assertEquals(VIEWS_OWNER_CREATE_OR_UPDATE_FORM, viewName);
	}

}