/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.text.ParseException;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;
import java.util.Collections;
import java.util.Locale;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetTypeFormatter_Coverage_Test_Passing {

	private OwnerRepository ownerRepository;

	private PetTypeFormatter petTypeFormatter;

	@BeforeEach
	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setup_PYMs0() throws java.text.ParseException {
		ownerRepository = mock(OwnerRepository.class);
		petTypeFormatter = new PetTypeFormatter(ownerRepository);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_WithMatchingPetType_ShouldReturnPetType_ZDRi1() throws ParseException {
		PetType dog = new PetType();
		dog.setName("Dog");
		when(ownerRepository.findPetTypes()).thenReturn(Arrays.asList(dog));
		PetType result = petTypeFormatter.parse("Dog", Locale.getDefault());
		assertEquals(dog, result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_WithNoMatchingPetType_ShouldThrowParseException_hQuI2_1() throws java.text.ParseException {
		PetType dog = new PetType();
		dog.setName("Dog");
		when(ownerRepository.findPetTypes()).thenReturn(Arrays.asList(dog));
		Exception exception = assertThrows(ParseException.class, () -> {
			petTypeFormatter.parse("Cat", Locale.getDefault());
		});
	}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithEmptyPetTypes_ShouldThrowParseException_DYSO3_1() throws java.text.ParseException {
        when(ownerRepository.findPetTypes()).thenReturn(Collections.emptyList());
        Exception exception = assertThrows(ParseException.class, () -> {
            petTypeFormatter.parse("Dog", Locale.getDefault());
        });}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithNullPetTypes_ShouldThrowParseException_rlBY4() throws java.text.ParseException {
        when(ownerRepository.findPetTypes()).thenReturn(null);
        Exception exception = assertThrows(NullPointerException.class, () -> {
            petTypeFormatter.parse("Dog", Locale.getDefault());
        });
    }

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_WithNullInputText_ShouldThrowParseException_UEbz5_1() throws java.text.ParseException {
		PetType dog = new PetType();
		dog.setName("Dog");
		when(ownerRepository.findPetTypes()).thenReturn(Arrays.asList(dog));
		Exception exception = assertThrows(ParseException.class, () -> {
			petTypeFormatter.parse(null, Locale.getDefault());
		});
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_WithEmptyInputText_ShouldThrowParseException_mxJI6_1() throws java.text.ParseException {
		PetType dog = new PetType();
		dog.setName("Dog");
		when(ownerRepository.findPetTypes()).thenReturn(Arrays.asList(dog));
		Exception exception = assertThrows(ParseException.class, () -> {
			petTypeFormatter.parse("", Locale.getDefault());
		});
	}

}