/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Passing {

	private VisitController visitController;

	private OwnerRepository ownerRepository;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitNewVisitForm_QtIx0_nIlU0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(ownerRepository);
		String viewName = visitController.initNewVisitForm();
		assertEquals("pets/createOrUpdateVisitForm", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_VRbP0() {
		ownerRepository = mock(OwnerRepository.class);
		visitController = new VisitController(ownerRepository);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_FindOwnerById_WbMU1() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		Map<String, Object> model = new HashMap<>();
		visitController.loadPetWithVisit(ownerId, petId, model);
		verify(ownerRepository).findById(ownerId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit_ReturnVisit_Vinc7() {
		int ownerId = 1;
		int petId = 1;
		Owner mockOwner = mock(Owner.class);
		Pet mockPet = mock(Pet.class);
		when(ownerRepository.findById(ownerId)).thenReturn(mockOwner);
		when(mockOwner.getPet(petId)).thenReturn(mockPet);
		Map<String, Object> model = new HashMap<>();
		Visit result = visitController.loadPetWithVisit(ownerId, petId, model);
		assertNotNull(result);
	}

}