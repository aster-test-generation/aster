/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Failing {

	private Owner owner;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testGetPet_compNameIsNull_uIEH1() {
		Pet pet = new Pet();
		pet.setName(null); // Assuming there's a setName method
		owner.addPet(pet); // Assuming there's an addPet method to add pets to the owner
		Pet result = owner.getPet("someName", false);
		assertNull(result, "Expected null when pet name is null");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_NullPetId_vOWy0() {
		Visit visit = new Visit();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(null, visit);
		}, "Pet identifier must not be null!");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_NullVisit_gSDj1() {
		Integer petId = 1; // Assuming a valid pet ID
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(petId, null);
		}, "Visit must not be null!");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_InvalidPetId_BfgV2() {
		Integer petId = 999; // Assuming this ID does not exist
		Visit visit = new Visit();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(petId, visit);
		}, "Invalid Pet identifier!");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_ValidInput_hvSM3() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner.addPet(pet); // Assuming there's a method to add a pet to the owner
		Assertions.assertDoesNotThrow(() -> {
			owner.addVisit(petId, visit);
		});
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_ValidVisit_aNMv4() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner.addPet(pet); // Assuming there's a method to add a pet to the owner
		owner.addVisit(petId, visit);
		Assertions.assertEquals(1, pet.getVisits().size()); // Assuming getVisits()
															// returns a list of visits
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetHasVisits_FcbW5() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner.addPet(pet); // Assuming there's a method to add a pet to the owner
		owner.addVisit(petId, visit1);
		owner.addVisit(petId, visit2);
		Assertions.assertEquals(2, pet.getVisits().size()); // Assuming getVisits()
															// returns a list of visits
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetReturnsNullWhenNoPets_wKix1() {
		assertNull(owner.getPet(1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetReturnsNullWhenPetIdDoesNotMatch_GmhI3_Qeql0() {
		Pet existingPet = new Pet();
		existingPet.setId(2); // Assuming setId method exists
		owner.addPet(existingPet);
		assertNull(owner.getPet(1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetHandlesMultiplePetsCorrectly_dIeM6_iCWB0_1() {
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet2);
		Pet newPet = new Pet();
		owner.addPet(newPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetHandlesMultiplePetsCorrectly_dIeM6_iCWB0_1_fid3() {
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet2);
		Pet newPet = new Pet();
		owner.addPet(newPet);
		assertEquals(pet1, owner.getPet(1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetHandlesMultiplePetsCorrectly_dIeM6_iCWB0_2() {
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet2);
		Pet newPet = new Pet();
		owner.addPet(newPet);
		assertEquals(pet2, owner.getPet(2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetHandlesMultiplePetsCorrectly_dIeM6_iCWB0_3() {
		Pet pet1 = new Pet();
		pet1.setId(1);
		owner.addPet(pet1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet2);
		Pet newPet = new Pet();
		owner.addPet(newPet);
		assertNull(owner.getPet(3));
	}

	@Test
	public void testSetAddress_oTOM1() {
		owner.setAddress("123 Main St");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_NullAddress_vOWy0_cpSt0() {
		Owner owner = new Owner();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.setAddress(null); // Assuming setAddress is the method to be tested
		}, "Address must not be null!");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_NullAddress_gSDj1_WJkp0() {
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.setAddress(null); // Assuming setAddress is the method to test
		}, "Address must not be null!");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_InvalidPetId_BfgV2_pTts0() {
		Integer petId = 999; // Assuming this ID does not exist
		Visit visit = new Visit();
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			owner.setAddress("123 Main St"); // Assuming setAddress is a valid method to
												// call
			owner.addVisit(petId, visit); // Added this line to match the context
		}, "Invalid Pet identifier!");
	}

}