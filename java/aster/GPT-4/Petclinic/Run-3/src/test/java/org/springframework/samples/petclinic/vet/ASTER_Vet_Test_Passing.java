/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.vet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Vet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNrOfSpecialties_stNJ0() {
		Vet vet = new Vet();
		assertEquals(0, vet.getNrOfSpecialties());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesReturnsSortedSpecialties_IfRD0() {
		Vet vet = new Vet();
		List<Specialty> specialties = vet.getSpecialties();
		for (int i = 0; i < specialties.size() - 1; i++) {
			assertTrue(specialties.get(i).getName().compareTo(specialties.get(i + 1).getName()) <= 0);
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNull_VPFb0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertNotNull(specialties);
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddSpecialty_aNcx0() {
		Vet vet = new Vet();
		Specialty specialty = new Specialty();
		vet.addSpecialty(specialty);
		assertTrue(vet.getSpecialtiesInternal().contains(specialty));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNull_VPFb0_1() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertNotNull(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNull_VPFb0_2() {
		Vet vet = new Vet();
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertTrue(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetSpecialtiesInternal_oWsu0_AYuE0() {
		Vet vet = new Vet();
		Set<Specialty> specialties = new HashSet<>();
		specialties.add(new Specialty());
		vet.setSpecialtiesInternal(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNotNull_Shce1_GTkS0_1() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal().add(new Specialty());
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertNotNull(specialties);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNotNull_Shce1_GTkS0_2() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal().add(new Specialty());
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertFalse(specialties.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetSpecialtiesInternal_WhenSpecialtiesIsNotNull_Shce1_GTkS0_3() {
		Vet vet = new Vet();
		vet.getSpecialtiesInternal().add(new Specialty());
		Set<Specialty> specialties = vet.getSpecialtiesInternal();
		assertEquals(1, specialties.size());
	}

}