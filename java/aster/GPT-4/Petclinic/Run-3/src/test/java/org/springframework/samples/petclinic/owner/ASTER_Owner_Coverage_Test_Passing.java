/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	private Owner owner;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_DsdM0() {
		owner = new Owner();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_ValidInput_hvSM3_JBEP0() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner = new Owner(); // Initialize the owner object
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_ValidVisit_aNMv4_Ftoz0() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner = new Owner(); // Initialize the owner object
		owner.setAddress("123 Main St"); // Set an address for the owner
		owner.addPet(pet); // Assuming there's a method to add a pet to the owner
		pet.addVisit(visit); // Assuming there's a method to add a visit to the pet
		Assertions.assertEquals(1, pet.getVisits().size()); // Assuming getVisits()
															// returns a list of visits
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_PetHasVisits_FcbW5_nFeW0() {
		Integer petId = 1; // Assuming this ID exists
		Visit visit1 = new Visit();
		Visit visit2 = new Visit();
		Pet pet = new Pet(); // Create a valid Pet object
		pet.setId(petId); // Set the ID
		owner = new Owner(); // Initialize the owner
		owner.setAddress("123 Main St"); // Assuming setAddress is needed
		owner.addPet(pet); // Assuming there's a method to add a pet to the owner
		pet.addVisit(visit1); // Assuming there's a method to add a visit to the pet
		pet.addVisit(visit2); // Assuming there's a method to add a visit to the pet
		Assertions.assertEquals(2, pet.getVisits().size()); // Assuming getVisits()
															// returns a list of visits
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetReturnsNullWhenNoPets_wKix1_yMhn0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1); // This line is erroneous as getPet is not defined
		assertNull(pet);
	}

}