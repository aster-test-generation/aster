/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Passing {

	private OwnerRepository ownerRepository;

	private OwnerController ownerController;

	private Model model;

	private RedirectAttributes redirectAttributes;

	private Owner owner;

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "VIEWS_OWNER_CREATE_OR_UPDATE_FORM";

	@BeforeEach
	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_LlJI0() {
		ownerRepository = mock(OwnerRepository.class);
		ownerController = new OwnerController(ownerRepository);
	}

	@BeforeEach
	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_FoundOwner_LPtr1() {
		int ownerId = 1;
		Owner owner = new Owner(); // Assuming Owner is a valid class
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		String viewName = ownerController.initUpdateOwnerForm(ownerId, model);
		verify(ownerRepository).findById(ownerId); // Covers line 1
		verify(model).addAttribute(owner); // Covers line 2
		assertEquals("VIEWS_OWNER_CREATE_OR_UPDATE_FORM", viewName); // Covers line 3
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_OwnerNotFound_SwNx2() {
		int ownerId = 2;
		when(ownerRepository.findById(ownerId)).thenReturn(null);
		String viewName = ownerController.initUpdateOwnerForm(ownerId, model);
		verify(ownerRepository).findById(ownerId); // Covers line 1
		verify(model, never()).addAttribute(any()); // Ensures no attribute is added if
													// owner is not found
		assertEquals("VIEWS_OWNER_CREATE_OR_UPDATE_FORM", viewName); // Covers line 3
	}

	@BeforeEach
	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_Wser00_aqnO1() {
	}

	@BeforeEach
	@Test
	public void testProcessUpdateOwnerForm_WithErrors_oKjR1() {
		BindingResult result = mock(BindingResult.class);
		when(result.hasErrors()).thenReturn(true);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		String view = ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("error", "There was an error in updating the owner.");
		assertEquals("owners/createOrUpdateOwnerForm", view);
	}

	@Test
	public void testProcessUpdateOwnerForm_Success_kwVw2() {
		BindingResult result = mock(BindingResult.class);
		when(result.hasErrors()).thenReturn(false);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		String view = ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(ownerRepository).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
		assertEquals("redirect:/owners/{ownerId}", view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_FoundOwner_LPtr1_uUjc0() {
		int ownerId = 1;
		Owner owner = new Owner(); // Assuming Owner is a valid class
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		Model model = mock(Model.class); // Mocking the Model
		String viewName = ownerController.initUpdateOwnerForm(ownerId, model);
		verify(ownerRepository).findById(ownerId); // Covers line 1
		assertEquals("VIEWS_OWNER_CREATE_OR_UPDATE_FORM", viewName); // Covers line 3
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitUpdateOwnerForm_ModelAttribute_HZwM3_EDjY0() {
		int ownerId = 3;
		Owner owner = new Owner(); // Assuming Owner is a valid class
		BindingResult result = mock(BindingResult.class); // Mocking BindingResult
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class); // Mocking
																				// RedirectAttributes
		when(result.hasErrors()).thenReturn(false); // Assuming no errors for this test
		when(ownerRepository.findById(ownerId)).thenReturn(owner);
		String viewName = ownerController.processUpdateOwnerForm(owner, result, ownerId, redirectAttributes);
		verify(ownerRepository).findById(ownerId); // Covers line 1
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated"); // Covers
																							// line
																							// 2
		assertEquals("redirect:/owners/{ownerId}", viewName); // Covers line 3
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerFormWithErrors_MhoB4_QYyL0() {
		BindingResult bindingResult = mock(BindingResult.class);
		when(bindingResult.hasErrors()).thenReturn(true);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		Owner owner = new Owner();
		String viewName = ownerController.processUpdateOwnerForm(owner, bindingResult, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("error", "There was an error in updating the owner.");
		assertEquals("VIEWS_OWNER_CREATE_OR_UPDATE_FORM", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerFormWithValidOwner_aiRb0() {
		Owner owner = new Owner();
		BindingResult bindingResult = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		when(bindingResult.hasErrors()).thenReturn(false);
		owner.setId(2); // Assuming the owner has an ID of 2
		String viewName = ownerController.processUpdateOwnerForm(owner, bindingResult, 2, redirectAttributes);
		verify(ownerRepository).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
		assertEquals("redirect:/owners/2", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerFormWithOwnerIdNull_cayo6_YjFF0() {
		BindingResult bindingResult = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		Owner owner = mock(Owner.class);
		when(bindingResult.hasErrors()).thenReturn(false);
		when(owner.getId()).thenReturn(null); // Assuming the owner ID is null
		String viewName = ownerController.processUpdateOwnerForm(owner, bindingResult, 0, redirectAttributes);
		verify(ownerRepository).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
		assertEquals("redirect:/owners/0", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_OneOwnerFound_aGUH0() {
		Owner owner = new Owner();
		owner.setLastName("Smith"); // Simulate last name provided
		owner.setId(1); // Set ID for the owner being updated
		BindingResult bindingResult = mock(BindingResult.class); // Mock BindingResult
		when(bindingResult.hasErrors()).thenReturn(false); // Simulate no errors
		OwnerRepository ownerRepository = mock(OwnerRepository.class); // Mock the
																		// OwnerRepository
		doNothing().when(ownerRepository).save(owner); // Mock save method
		OwnerController ownerController = new OwnerController(ownerRepository); // Pass
																				// the
																				// mocked
																				// repository
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class); // Mock
																				// RedirectAttributes
		String viewName = ownerController.processUpdateOwnerForm(owner, bindingResult, 1, redirectAttributes);
		assertEquals("redirect:/owners/1", viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_WithoutErrors_Jgdd2_qEOX0() {
		Owner owner = mock(Owner.class);
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		OwnerRepository owners = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(owners);
		when(result.hasErrors()).thenReturn(false);
		int ownerId = 1;
		String view = ownerController.processUpdateOwnerForm(owner, result, ownerId, redirectAttributes);
		verify(owner).setId(ownerId);
		verify(owners).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
		assertEquals("redirect:/owners/{ownerId}", view);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_SavesOwner_vPvN3_Muak0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(owners);
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		Owner owner = new Owner();
		when(result.hasErrors()).thenReturn(false);
		int ownerId = 1;
		owner.setId(ownerId); // Set the owner ID before saving
		ownerController.processUpdateOwnerForm(owner, result, ownerId, redirectAttributes);
		verify(owners).save(argThat(savedOwner -> savedOwner.getId() == ownerId));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_AddsErrorFlashAttribute_yayu4_nywg0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class); // Mock the
																		// OwnerRepository
		OwnerController ownerController = new OwnerController(ownerRepository); // Initialize
																				// OwnerController
																				// with
																				// the
																				// mocked
																				// repository
		Owner owner = new Owner(); // Initialize the owner object
		BindingResult result = mock(BindingResult.class); // Mock the BindingResult
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class); // Mock
																				// the
																				// RedirectAttributes
		when(result.hasErrors()).thenReturn(true);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("error", "There was an error in updating the owner.");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerForm_AddsSuccessFlashAttribute_MEab6_YfwR0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		Owner owner = new Owner();
		when(result.hasErrors()).thenReturn(false);
		int ownerId = 1;
		owner.setId(ownerId); // Assuming setId method exists in Owner class
		ownerController.processUpdateOwnerForm(owner, result, ownerId, redirectAttributes);
		verify(redirectAttributes).addFlashAttribute("message", "Owner Values Updated");
	}

}