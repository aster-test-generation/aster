/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_withValidClass_EIpe0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_KMaQ0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_iMhA0() {
        Option option = new Option("o", "longOption", true, "description");
        int expectedHashCode = Objects.hash("longOption", "o");
        assertEquals(expectedHashCode, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_Wzhp1() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clone = option.clone();
        assertNotNull(clone);
        assertNotSame(option, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_ReturnsTrue_kxuR0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ReturnsFalse_MlIW1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.equals("not an Option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_ReturnsTrue_gRfx2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLongOption_ReturnsFalse_seoG3() {
        Option option1 = new Option("option", "longOption1", true, "description");
        Option option2 = new Option("option", "longOption2", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentOption_ReturnsFalse_rwxt4() {
        Option option1 = new Option("option1", "longOption", true, "description");
        Option option2 = new Option("option2", "longOption", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_WhenOptionIsNull_ReturnLongOption_xAot0() {
        Option option = new Option(null, "longOption", true, "description");
        String result = option.getKey();
        assert(result.equals("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_WhenOptionIsNotNull_ReturnOption_lKFX2() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getKey();
        assert(result.equals("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void setArgCount(Option option, int argCount) {
        try {
            java.lang.reflect.Field field = option.getClass().getDeclaredField("argCount");
            field.setAccessible(true);
            field.setInt(option, argCount);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Space_jZdd1() {
        Option option = new Option("o", "longOption", true, "description");
        String expected = "[ Option o longOption [ARG] :: description ::  ]";
        String actual = option.toString();
        assertTrue(actual.contains(" "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NotDeprecated_JCsQ0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        String result = option.toDeprecatedString();
        assert(result.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_Wzhp1_1() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clone = option.clone();
        assertNotNull(clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_Wzhp1_2() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clone = option.clone();
        assertNotSame(option, clone);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withArgCountGreaterThanZero_gCmg0_dvJR0() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountEqualToZero_wgAA2_dbWt0() {
        Option option = new Option("option", false, "description");
        try {
            option.addValue("value");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_wsGg0_EORQ0() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArgName_URGV0_SAZx0() {
        Option option = new Option("option", "longOption", true, "description");
        ((org.apache.commons.cli.Option) option).setArgName("argName");
        boolean result = option.hasArgName();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArgName_URGV0_xocf1() {
        Option option = new Option("option", "longOption", true, "description");
        ((org.apache.commons.cli.Option) option).setArgName("argName");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OptionalArg_VPak0_UTph0() {
        Option option = new Option("o", true, "description");
        ((org.apache.commons.cli.Option) option).setOptionalArg(true);
        boolean result = option.requiresArg();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_UnlimitedValues_Empty_zeJX2_VdjU0() {
        Option option = new Option("o", true, "description");
        boolean result = option.requiresArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_False_KGWF1_TNrm0() {
        Option option = new Option("o", false, "description");
        boolean result = option.requiresArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_False_KGWF1_yDoC1() {
        Option option = new Option("o", false, "description");
        boolean result = option.requiresArg();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_HasValueSeparator_True_sOQm0_gmsU0() {
        Option option = new Option("o", "longOption", true, "description");
        org.apache.commons.cli.Option apacheOption = (org.apache.commons.cli.Option) option;
        apacheOption.setArgs(2);
        option.processValue("value1,value2");
        assertEquals(2, apacheOption.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HasArgs_FOlB3_fTUy0_fid2() {
        Option option = new Option("o", true, "description");
        try {
            option.addValue("ARGS");
        } catch (UnsupportedOperationException e) {
        }
        String expected = "[ Option o [ARG] :: description :: class java.lang.String ]";
        String actual = option.toString();
        assertEquals(expected, actual);
    }
}