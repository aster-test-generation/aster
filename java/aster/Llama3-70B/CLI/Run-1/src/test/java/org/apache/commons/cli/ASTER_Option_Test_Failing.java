/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_sKxM1() {
        Option option = new Option("option", true, "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_sdlm2() {
        Option option = new Option("option", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator1_tXTz0() {
        Option option = new Option("option", "longOption", true, "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_XYZj1() {
        Option option = new Option("option", true, "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_PvLI2() {
        Option option = new Option("option", "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountGreaterThanOne_VtQi0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionOnly_hWKA0() {
        Option option = new Option("o", "option");
        assertEquals("[ Option o :: option :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionAndLongOption_ORVq1() {
        Option option = new Option("o", "longOption", true, "option");
        assertEquals("[ Option o longOption [ARG] :: option :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionLongOptionAndDescription_IJVo3() {
        Option option = new Option("o", "longOption", false, "option");
        assertEquals("[ Option o longOption :: option :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_true_gCdM0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName1_aBZN0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("value", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName2_UfHo1() {
        Option option = new Option("option", true, "description");
        assertEquals("value", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName3_qHTP2() {
        Option option = new Option("option", "description");
        assertEquals("value", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OptionalArg_swLg0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withOptionalArg_rdGb0() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArgName_aYHv0() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_7_BIzz6() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue(null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_8_HvVG7() {
        Option option = new Option("option", true, "description");
        String result = option.getValue(null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_9_znmI8() {
        Option option = new Option("option", "description");
        String result = option.getValue(null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNoLongOption_EcVc2_oNwL0() {
        Option option = new Option("o", "description");
        assertEquals("Option 'o': description", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withDefaultValue_EcVc2_FCbz1() {
        Option option = new Option("o", "description");
        assertEquals("description", option.getValue("defaultValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues3_frqJ2_xZEz1() {
        Option option = new Option("option", "description");
        option.clearValues();
        assertNull(option.getValue(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues2_Ezwk1_qrCQ1() {
        Option option = new Option("option", true, "description");
        option.clearValues();
        assertNull(option.getValue("defaultValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_gCdM0() {
        Option option = new Option("option", "longOption", true, "description");
        assertNull(option.getValue("defaultValue"));
    }
}