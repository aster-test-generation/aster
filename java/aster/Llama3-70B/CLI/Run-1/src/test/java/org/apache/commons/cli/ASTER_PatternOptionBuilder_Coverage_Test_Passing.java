/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_KUMm0_1() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_KUMm0_2() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptNotSpace_jSRv1_1() {
        String pattern = "ab";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptNotSpace_jSRv1_2() {
        String pattern = "ab";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptNotSpace_jSRv1_3() {
        String pattern = "ab";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        assertEquals(2, options.getOptions().size());
    }
}