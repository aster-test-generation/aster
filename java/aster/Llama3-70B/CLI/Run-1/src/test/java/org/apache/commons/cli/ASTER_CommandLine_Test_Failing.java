/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_aMXm0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("a", "a", true, "description");
        try {
            Object result = commandLine.getParsedOptionValue(option, "defaultValue");
            assertNull(result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_2_FhXw1() {
        CommandLine cmd = new CommandLine();
        String opt = null;
        String defaultValue = "defaultValue";
        try {
            cmd.getParsedOptionValue(opt, defaultValue);
            assert false; // Expected ParseException
        } catch (ParseException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_3_WWVF2() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("", "option", true, "description");
        String defaultValue = "defaultValue";
        try {
            cmd.getParsedOptionValue(option, defaultValue);
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_hEpR0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_HyhW0_fid1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_Gkgp0() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_cFvI0_fid1() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_alSa0_fid1() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_aMXm0_fid1() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('a');
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withNonNullOptionValue_oImU0_fid1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        String defaultValue = "default";
        Supplier<String> supplier = () -> defaultValue;
        String result = commandLine.getOptionValue(option, supplier);
        assertEquals("description", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_XJBK0_fid1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = {"value"};
        cmd.getOptionValues(option); // assume this sets the values
        assertEquals("value", cmd.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_2_FhXw1_fid1() {
        CommandLine cmd = new CommandLine();
        String opt = null;
        String defaultValue = "defaultValue";
        try {
            cmd.getParsedOptionValue(opt, defaultValue);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_3_WWVF2_fid1() {
        CommandLine cmd = new CommandLine();
        String opt = "";
        String defaultValue = "defaultValue";
        try {
            cmd.getParsedOptionValue(opt, defaultValue);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArgNull_FGVp1_FmFe0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
        assertEquals(0, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_MatchingOption_Huyv2_TUVz0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        cmd.addOption(option);
        option.addValue("value1");
        option.addValue("value2");
        String[] result = cmd.getOptionValues(option);
        assertArrayEquals(new String[]{"value1", "value2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_tSzz0_WHKt0_fid3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object parsedValue = null;
        try {
            parsedValue = commandLine.getParsedOptionValue(option, null);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
        assertNotNull(parsedValue);
    }
}