/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_PIgt0() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertNotNull(options);
        assertTrue(options.getOptions().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_gpqy0() {
        BasicParser parser = new BasicParser();
        List<String> requiredOptions = parser.getRequiredOptions();
        assertNotNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_UnrecognizedOption_LRWa1() throws ParseException {
        BasicParser parser = new BasicParser();
        List<String> args = new ArrayList<>();
        args.add("-b");
        ListIterator<String> iter = args.listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RequiredOption_Wmue2() throws ParseException {
        BasicParser parser = new BasicParser();
        List<String> args = new ArrayList<>();
        args.add("-c");
        ListIterator<String> iter = args.listIterator();
        parser.getRequiredOptions().add("c");
        parser.processOption("-c", iter);
        assertEquals(0, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs1_Byiq0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processArgs(opt, iter);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs2_mkRu1() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("o", "option", false, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processArgs(opt, iter);
        assertNull(opt.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs3_pxpc2() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value1", "value2").listIterator();
        parser.processArgs(opt, iter);
        assertEquals(2, opt.getValues().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs4_mZOS3() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("o", "option", false, "description");
        ListIterator<String> iter = Arrays.asList("-nextOption").listIterator();
        try {
            parser.processArgs(opt, iter);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs6_zfJb5() throws ParseException {
        BasicParser parser = new BasicParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        opt.setOptionalArg(true);
        parser.processArgs(opt, iter);
        assertNotNull(opt.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_UTwp2() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        properties.setProperty("unknown", "value");
        try {
            parser.processProperties(properties);
            assert false;
        } catch (UnrecognizedOptionException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_RKjI6() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        parser.getOptions().addOption(option);
        parser.getRequiredOptions().add("o");
        properties.setProperty("o", "true");
        parser.processProperties(properties);
        assert !parser.getRequiredOptions().contains("o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_sKAI7() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        parser.getOptions().addOptionGroup(group);
        parser.getRequiredOptions().add(group);
        properties.setProperty("o1", "true");
        parser.processProperties(properties);
        assert !parser.getRequiredOptions().contains(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_EHHP6() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", false, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_GHCM11() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("extra", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_hSnz12() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra", "--", "more"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("extra", cmd.getArgs()[1]);
        assertEquals("more", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_PIgt0_1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_PIgt0_2() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertTrue(options.getOptions().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_gpqy0_fid1() {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        parser.setOptions(options);
        List<?> requiredOptions = parser.getRequiredOptions();
        assertNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RequiredOption_Wmue2_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("c", true, "description");
        parser.setOptions(options);
        List<String> args = new ArrayList<>();
        args.add("-c");
        ListIterator<String> iter = args.listIterator();
        parser.processOption("-c", iter);
        assertEquals(0, iter.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs1_Byiq0_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("-o", "value").listIterator();
        parser.parse(options, new String[]{"-o", "value"}, new Properties(), false);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs2_mkRu1_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", false, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processOption("o", iter);
        assertNotNull(opt.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs3_pxpc2_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("value1", "value2").listIterator();
        parser.processOption("o", iter);
        assertEquals(2, opt.getValues().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs4_mZOS3_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", false, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("-o").listIterator();
        parser.processOption("o", iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs6_zfJb5_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        opt.setOptionalArg(true);
        parser.processOption("o", iter);
        assertNotNull(opt.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_RKjI6_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        options.addOption(option);
        parser.setOptions(options);
        properties.setProperty("o", "true");
        parser.processProperties(properties);
        assert !parser.cmd.hasOption("o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_sKAI7_fid1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        properties.setProperty("o1", "true");
        parser.processProperties(properties);
        assert parser.cmd.hasOption("o1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_GHCM11_2_fid3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_GHCM11_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_hSnz12_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra", "--", "more"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_hSnz12_3() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra", "--", "more"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_hSnz12_4() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra", "--", "more"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("more", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NullOptions_WpeU3_FOuN0() throws ParseException {
        BasicParser parser = new BasicParser();
        try {
            parser.parse(null, new String[0], new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_OptionGroup_iSuH2_KMHP0() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        group.setRequired(true);
        options.addOptionGroup(group);
        CommandLine cmd = parser.parse(options, new String[0], new Properties(), false);
        assertEquals(false, cmd.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithArg_cVfm4_cHcB0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        Options options = new Options();
        options.addOption(option);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutValue_BmIB9_mJBs0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "false");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assert !cmd.hasOption("o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValue_kctD8_IEmo0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "value");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assert cmd.getOptionValue("o").equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValuesArray_rtPO11_LVKq0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "value1");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assert cmd.getOptionValue("o").equals("value1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_kjDv0_yVKD0_1() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        parser.parse(options, new String[0], new Properties(), false);
        assertEquals(true, parser.cmd.getOptions().length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_kjDv0_yVKD0_2() throws ParseException {
        BasicParser parser = new BasicParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        parser.parse(options, new String[0], new Properties(), false);
        assertEquals(true, options.getRequiredOptions().contains(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionInGroup_ytdk5_aoJU0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        Options options = new Options();
        options.addOptionGroup(group);
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("o1"));
    }
}