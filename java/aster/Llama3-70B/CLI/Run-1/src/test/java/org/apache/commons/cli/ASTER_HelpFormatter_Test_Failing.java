/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_FZGF0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_JSSE10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(5, helpFormatter.findWrapPos("Hello WorldHello", 10, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_qoAK0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a     test     strin     g";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a\n test\n string", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_fyxQ1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a     very     long     test     strin     g     that     needs     to be     wrapp     ed";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a\n very\n long\n test\n string\n that\n needs\n to\n be\n wrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_kBCs2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a     singl     e     word single word";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a     singl     e     word", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText5_sQfn4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a     test     strin     g     with     multi     ple     space     s";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a\n test\n string\n with\n multiple\n spaces", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_bDcz1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@39cffb4a", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage3_oDBX2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@5c9c9c80", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage4_dlZz3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@941e76b", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage5_USPz4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@23b86ece", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage6_wxJt5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@24fe7ed8", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage1_xTCu0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@2c90c4bb", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_eGmO1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        options.addOptionGroup(group);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@4a67409b", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage4_tYkO3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "description");
        options.addOption(option1);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@5c028953", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage5_VBPM4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("java.io.PrintWriter@3f3efea9", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_sFnw0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_JdRb0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("?", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_dkLA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("=", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_CZRA0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("SYNOPSIS", helpFormatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptions_kmSw0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printOptions(pw, 80, options, 2, 5);
        pw.flush();
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_FZGF0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("System.lineSeparator()", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_VbHV0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("defaultArgName", helpFormatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_RUWh0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(80, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_OvaD0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(5, helpFormatter.findWrapPos("Hello\nWorld", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_tAlw2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(-1, helpFormatter.findWrapPos("HelloWorld", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_JSSE10_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(5, helpFormatter.findWrapPos("Hello WorldHello", 5, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_VKiB0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_ZtpM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printWrapped(pw, 10, "Hello World");
        pw.flush();
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_kBCs2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a single word";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText6_AuzN5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a test string with special characters !@#$";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a\n test\n string\n with\n special\n characters\n !@#$", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage1_XHzm0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_bDcz1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app -a <alpha>", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage3_oDBX2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app [-a]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage4_dlZz3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app -a <alpha> [-b]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage5_USPz4_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app -a <alpha> -b <beta>", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage6_wxJt5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("Usage: app [-a] [-b]", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage1_xTCu0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_eGmO1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        options.addOptionGroup(group);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage3_scGg2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        options.addOption(option1);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage4_tYkO3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "description");
        options.addOption(option1);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage5_VBPM4_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        Option option2 = new Option("b", "beta", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage6_XVyO5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
        assertEquals("expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage1_poeF0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage2_fhVS1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", true, "beta option"));
        options.addOptionGroup(group);
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage3_pobm2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage4_BCMz3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", true, "beta option"));
        options.addOptionGroup(group);
        options.addOption("c", "charlie", true, "charlie option");
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage5_YKCN4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage6_yKrC5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "alpha option"));
        group.addOption(new Option("b", "beta", true, "beta option"));
        options.addOptionGroup(group);
        options.addOption("c", "charlie", true, "charlie option");
        options.addOption("d", "delta", true, "delta option");
        helpFormatter.printUsage(pw, 80, "MyApp", options);
        assertEquals("Expected output", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_rimD0_mzfR0_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter stringWriter = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(stringWriter);
        helpFormatter.printUsage(printWriter, 80, "java MyProgram");
        assertEquals("Usage: java MyProgram", stringWriter.toString().trim());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_aHES0_VkMr0_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        options.addOption("o", "option", true, "This is a test option");
        helpFormatter.renderOptions(stringBuffer, 80, options, 5, 5);
        assertEquals("     -o,--option <arg>   This is a test option\n", stringBuffer.toString());
    }
}