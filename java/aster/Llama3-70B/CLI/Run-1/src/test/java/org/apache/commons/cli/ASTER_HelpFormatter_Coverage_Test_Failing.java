/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_PQgL0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a very long text that needs to be wrapped";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expectedResult = "This is a\n     very\n     long\n     text\n     that\n     needs\n     to be\n     wrapped";
        assertEquals(expectedResult, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_EmptyText_Kajf2_Qdvx0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "";
        helpFormatter.printWrapped(printWriter, 10, text);
        printWriter.flush();
        String expected = "";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_MultiLine_fEyU0_egZE0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a multi-line text.\nIt has two lines.";
        helpFormatter.printWrapped(printWriter, 10, text);
        String expected = "This is a\nIt has two\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_SingleLine_pdsY1_CqSB0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a single line text.";
        helpFormatter.printWrapped(printWriter, 10, text);
        printWriter.flush();
        String expected = "This is a\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withLongOption_yYPy1_uDGR0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "alpha", true, "alpha option");
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        formatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String result = writer.toString();
        assert(result.contains("--alpha <alpha>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withShortOption_bkcJ0_leGM0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        formatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String result = writer.toString();
        assert(result.contains("-a, --alpha <alpha>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withArgument_vTva2_FjIh0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        formatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String result = writer.toString();
        assert(result.contains("<alpha>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_SingleLine_pdsY1_CqSB0_fid2() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is asingleline text. single line text.";
        helpFormatter.printWrapped(printWriter, 10, text);
        printWriter.flush();
        String expected = "This is asingleline text.\n";
        assertEquals(expected, writer.toString());
    }
}