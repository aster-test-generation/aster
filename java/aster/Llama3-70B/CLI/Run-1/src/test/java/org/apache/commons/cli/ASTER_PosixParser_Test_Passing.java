/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zzik0() throws ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = posixParser.parse(options, arguments, true);
        assert commandLine.getArgs().length == 0;
        assert commandLine.getOptionValue("a").equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_UgTB0() throws ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = posixParser.parse(options, arguments);
        assert commandLine.getOptionValue("a").equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_HSnW0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        posixParser.setOptions(options);
        assertEquals(1, posixParser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_XeUn0() throws ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine commandLine = posixParser.parse(options, arguments, properties);
        assert commandLine.getArgs().length == 0;
        assert commandLine.getOptionValue("a").equals("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_UnrecognizedOption_rJJr1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        parser.setOptions(options);
        List<String> args = new ArrayList<>();
        args.add("-b");
        ListIterator<String> iter = args.listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesNullProperties_cZtA0() throws ParseException {
        PosixParser parser = new PosixParser();
        parser.processProperties(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesEmptyProperties_evIF1() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_hjrI0() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_tMMi1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qanf2_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qanf2_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_YdYH3_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_YdYH3_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_YdYH3_3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_IuHd4_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_IuHd4_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_kLuq5() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_gNrC6() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse8_RotT7() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-b", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse9_UbCo8() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_BYQu9_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_BYQu9_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UioW10_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UioW10_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_bsPv11_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_bsPv11_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qanf2() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_YdYH3() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNull(cmd.getOptionValue("a"));
        assertEquals("-a", cmd.getArgs()[0]);
        assertEquals("value", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_IuHd4() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_BYQu9() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UioW10() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_tkVi12_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra", "--", "more"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RecognizedOption_Lafs0_tjJJ0() throws ParseException {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.setOptions(options);
        CommandLine cmd = CommandLine.builder().build();
        parser.cmd = cmd;
        List<String> args = new ArrayList<>();
        args.add("-a");
        ListIterator<String> iter = args.listIterator();
        parser.processOption("-a", iter);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_OptionGroup_NotRequired_Xyae3_pHjE0() throws ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        options.addOptionGroup(group);
        posixParser.parse(options, new String[0], new Properties(), false);
        assertEquals(0, posixParser.cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithArg_xOHr4_IwDE0() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.setOptions(new Options().addOption(option));
        properties.setProperty("o", "value");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_MYeX6_wUCW0_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        parser.setOptions(new Options().addOption(option));
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_Bwhr0_esQd0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_aZJX3_KjjW0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_VwlW4_ykzg0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_NMuy1_nDVX0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutValue_htsN10_YELk0_1() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.setOptions(new Options().addOption(option));
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutValue_htsN10_YELk0_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.setOptions(new Options().addOption(option));
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertNull(cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_crJD0_DcEx0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = false;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_IbcD7_vJvL0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "nonOption"};
        try {
            posixParser.parse(options, arguments, new Properties(), true);
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "--", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValue_ZBXG9_iULV0_2() throws ParseException {
        PosixParser parser = new PosixParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.setOptions(new Options().addOption(option));
        properties.setProperty("o", "value");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_PeWb1_OtAA0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        boolean stopAtNonOption = false;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_hSfG2_xuIz0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        boolean stopAtNonOption = false;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten13_ntTU12_vREF0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "--", "nonOption", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "--", "nonOption", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten14_Nrjv13_CDkQ0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, false);
            assertArrayEquals(new String[]{"-a", "value", "nonOption", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_TMxP4_iNXT0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value"};
        boolean stopAtNonOption = false;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_vweC3_rBzr0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"--alpha"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_uCYv9_yhnZ0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"token"};
        boolean stopAtNonOption = false;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_pBXq6_vQxy0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_uJdl7_ePOP0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        boolean stopAtNonOption = false;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_TGBG5_jPbS0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"--alpha", "--beta"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_YbTE8_xenh0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "-b"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_PHle0_YALM0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.parse(options, arguments, new Properties(), stopAtNonOption).getArgs();
            assertArrayEquals(new String[]{"-a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten14_Szbr13_SPch0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a", "token"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten13_tnJQ12_oGoC0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value1", "value2"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten12_ddBD11_xAnV0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "--beta"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_NTMh1_tChT0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_RXME2_SJgV0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_Vxco5_TEHW0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA=value", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_ADiV3_cAYo0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_nlbA6_uODf0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_aZbE8_hqzw0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-ab", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_yAbu7_zHUR0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA", "b", "c"};
        boolean stopAtNonOption = false;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten13_xmwE12_SpqR0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "--", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten12_Enpb11_tUsR0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "--longB", "c"};
        boolean stopAtNonOption = true;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_OQeA9_MZRc0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-abc", "d"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_FtEm1_DeuC0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"--a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_Nhio3_TddZ0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.parse(options, arguments, new Properties(), stopAtNonOption).getArgs();
            assertArrayEquals(new String[]{"b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_DCjz2_HkcM0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_EtYU8_glET0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"--a", "b", "--c"};
        boolean stopAtNonOption = true;
        try {
            CommandLine cmd = posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_DpJG7_PYEw0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"-a", "b", "-c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_lRor9_XyXq0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"-a", "b", "--"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten14_yLKi13_IqTp0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"-a", "b", "c", "--a"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten12_LOwq11_utlc0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "a", true, "a");
        String[] arguments = new String[]{"-a", "b", "c", "--"};
        boolean stopAtNonOption = true;
        try {
            posixParser.parse(options, arguments, new Properties(), stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }
}