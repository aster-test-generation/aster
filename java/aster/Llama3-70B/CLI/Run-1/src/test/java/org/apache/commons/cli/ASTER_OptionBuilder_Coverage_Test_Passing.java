/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithType_eyGU0() {
        Object newType = String.class;
        OptionBuilder optionBuilder = OptionBuilder.withType(newType);
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_ReturnInstance_fqqD1() {
        OptionBuilder optionBuilder = OptionBuilder.hasArgs();
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_SetRequired_cvVH0_JVDz0() {
        boolean newRequired = true;
        OptionBuilder optionBuilder = OptionBuilder.isRequired(newRequired);
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithDescription_ReturnInstance_fKAe1_pNWb0() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertSame(OptionBuilder.isRequired(true), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_SeparatorIsSet_eAEP0_QILp0() {
        OptionBuilder.withValueSeparator('=');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithDescription_SetDescription_SVFa0_Sxfr0() {
        String newDescription = "New Description";
        OptionBuilder result = OptionBuilder.withDescription(newDescription);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_ReturnsInstance_rwIW1_jKgY0() {
        OptionBuilder result = OptionBuilder.withValueSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_ReturnsInstance_rwIW1_Rziu1_2() {
        OptionBuilder result = OptionBuilder.withValueSeparator();
        assertTrue(result.isRequired(false) instanceof OptionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_SetArgCount_HTdc0_ByPF0() {
        OptionBuilder optionBuilder = OptionBuilder.hasArgs();
        assertSame(optionBuilder, OptionBuilder.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_argCount_ZBAj0_qIyY0() {
        OptionBuilder result = OptionBuilder.hasOptionalArg();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_SetRequiredFlag_wiTY0_thiG0() {
        OptionBuilder newInstance = OptionBuilder.isRequired(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_returnInstance_smCw2_xgWw0() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_returnInstance_smCw2_olDZ1_2() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertTrue(result instanceof OptionBuilder);
    }
}