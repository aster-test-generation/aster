/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_eYHl0() {
        Options options = new Options();
        List<Option> result = options.helpOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_qJVV0() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_rCwZ0() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertTrue(options.hasOption("opt"));
        assertEquals(option, options.getOption("opt"));
        assertTrue(options.getOption("opt").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_NoMatch_nVAZ2() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("nonexistent");
        assertEquals(Collections.emptyList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_NullInput_PRMj3() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions(null);
        assertEquals(Collections.emptyList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_fZfT0() {
        Options options = new Options();
        Collection<OptionGroup> result = options.getOptionGroups();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_sgPT0() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(option, options.getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_Vdfi0() {
        Options options = new Options();
        List<?> requiredOpts = options.getRequiredOptions();
        assertNotNull(requiredOpts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Opt_NotPresent_KDVr2() {
        Options options = new Options();
        assertFalse(options.hasOption("xyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_DuplicateKey_ThrowsException_DCfC0() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        optionsToAdd.addOption("opt1", "longOpt1", false, "description1");
        optionsToAdd.addOption("opt2", "longOpt2", false, "description2");
        options.addOption("opt1", "longOpt1", false, "description1");
        try {
            options.addOptions(optionsToAdd);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: opt1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_AddsOptions_LDMt1() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        optionsToAdd.addOption("opt1", "longOpt1", false, "description1");
        optionsToAdd.addOption("opt2", "longOpt2", false, "description2");
        options.addOptions(optionsToAdd);
        assertTrue(options.hasOption("opt1"));
        assertTrue(options.hasOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_EmptyOptionsToAdd_ReturnsSameObject_rggE2() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        Options result = options.addOptions(optionsToAdd);
        assertSame(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_rCwZ0_1() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_rCwZ0_2() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(option, options.getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_rCwZ0_3() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertTrue(options.getOption("opt").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_AddsOptions_LDMt1_1() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        optionsToAdd.addOption("opt1", "longOpt1", false, "description1");
        optionsToAdd.addOption("opt2", "longOpt2", false, "description2");
        options.addOptions(optionsToAdd);
        assertTrue(options.hasOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_AddsOptions_LDMt1_2() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        optionsToAdd.addOption("opt1", "longOpt1", false, "description1");
        optionsToAdd.addOption("opt2", "longOpt2", false, "description2");
        options.addOptions(optionsToAdd);
        assertTrue(options.hasOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_cxpf0_kJJZ0_1() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_cxpf0_kJJZ0_3() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_cxpf0_kJJZ0_4() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_lyRj3_URGJ0_1() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption(opt);
        assertEquals(opt, options.getOption(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_lyRj3_URGJ0_2() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption(opt);
        assertFalse(options.hasLongOption(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_lyRj3_URGJ0_3() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption(opt);
        assertFalse(((List<?>) options.getRequiredOptions()).contains(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_uxra0_IKKQ0() {
        Options options = new Options();
        options.addOption("a", false, "description");
        assertTrue(options.hasShortOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_uxra0_ywbC1() {
        Options options = new Options();
        options.addOption("a", "a", false, "description");
        assertTrue(options.hasShortOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_notRequired_omEg1_VvzV0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        Option option = new Option("opt", "longOpt", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_required_sDSO0_qaPw0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option("opt", "longOpt", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_ShortOpt_Present_oVCk0_IJRx0() {
        Options options = new Options();
        options.addOption("a", false, "desc");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_optionGroups_eblA2_CWCK0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", "longOpt", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_longOpt_gabH1_nJUn0() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Option result = options.getOption("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_longOpt_gabH1_YDYo1() {
        Options options = new Options();
        options.addOption("o", "opt", false, "description");
        Option result = options.getOption("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_aMjS0_vUWu0_1() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, null);
        options.addOption(opt);
        assertEquals(opt, options.getOption(opt.getLongOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_aMjS0_vUWu0_2() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, null);
        options.addOption(opt);
        assertTrue(options.hasLongOption(opt.getLongOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_esDz2_isEl0_1() {
        Options options = new Options();
        Option opt = new Option("o", true, "desc");
        options.addOption(opt);
        assertEquals(opt, options.getOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_esDz2_isEl0_2() {
        Options options = new Options();
        Option opt = new Option("o", true, "desc");
        options.addOption(opt);
        assertFalse(options.hasLongOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_esDz2_isEl0_4() {
        Options options = new Options();
        Option opt = new Option("o", true, "desc");
        options.addOption(opt);
        assertFalse(((List<?>) options.getRequiredOptions()).contains(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_shortOpt_CFBn0_lnjK0() {
        Options options = new Options();
        Option option = new Option("o", "longOpt", false, "description");
        options.addOption(option);
        Option result = options.getOption("o");
        assertSame(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OJmX0_fVMK0_1() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Option option = options.getOption("opt");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OJmX0_fVMK0_3() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Option option = options.getOption("opt");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OJmX0_fVMK0_4() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Option option = options.getOption("opt");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vdMj0_fid2() {
        Options options = new Options();
        String expected = "[ Options: [ short {} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ExactMatch_NZiJ0_fid2() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("option");
        assertEquals(Collections.emptyList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_qEQz0_fid2() {
        Options options = new Options();
        Option opt = Option.builder("option").build();
        OptionGroup optionGroup = options.getOptionGroup(opt);
        assertNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_cxpf0_kJJZ0_2_fid2() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
    }
}