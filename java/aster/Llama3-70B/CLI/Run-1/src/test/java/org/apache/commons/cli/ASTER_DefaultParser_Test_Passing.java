/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_WRxk2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_UEZc2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_wsgm3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_gvQx2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_NzRk3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_PAGx0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_uXkg1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_Kzii3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_udOk1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "-c", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_caLl0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_ZMDO2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_KZFQ0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_KZFQ0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_OATL1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_OATL1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_aYhJ2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_aYhJ2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_ifsX3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_ifsX3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_VQWn2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_odBe2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_xsGt0() {
        String token = "key=value";
        int result = DefaultParser.indexOfEqual(token);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_blri2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_mZJE3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -unknown", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_dlDG3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_JCLT1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_ZQaf2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_Ggrr2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_LKtl3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-u", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnrecognizedOption_Xbys3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Properties properties = new Properties();
        properties.setProperty("beta", "true");
        try {
            parser.parse(options, new String[]{}, properties, false);
            fail("UnrecognizedOptionException expected");
        } catch (ParseException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withMissingArgumentException_IEtA2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withMissingRequiredOption_sxer1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withMissingArgumentException_sEGn3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        try {
            parser.parse(options, new String[]{"-a"}, null, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_fqcb4_yDAo0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a-bc"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            assert false; // ParseException should be thrown
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_Qfnr6_cOZA0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(new Options(), new String[]{"-a", "-b", "-c", "-x"}, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_oiiM4_Vzsd0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(new Options(), new String[]{"-ax"}, new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_xnfo0_NraN0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_hOAs3_lyWI0() {
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_zKan0_UMtn0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_zrIO2_FCSj0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_Kwuc2_pUiy0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_nHgx1_AMyl0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
            assertEquals("-b", cmd.getArgs()[1]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_qMKz3_HBPR0() {
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_FhIg1_YZrl0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_RQOM2_geSK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "argument");
        String[] arguments = new String[]{"-a", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertTrue(cmd.hasOption("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_UhIU1_CUuw0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_UcOu0_EFOM0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_hWLp0_COrq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_wikb0_abXw0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_kKGv1_MqxX0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("arg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_Auss3_dPLO0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_tjFi3_EfeB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
            assertFalse(cmd.hasOption("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_YWqq2_gfSf0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
            assertEquals("-b", cmd.getArgs()[1]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_oEgy2_mnlj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short-opt", true, "short option");
        String[] arguments = new String[]{"-s", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("s"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_HyAz2_XWvG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_dRGE1_KaKb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("long-opt"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_Qnel0_IdNp0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_zHpF1_aCKg0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_MvKy0_Gxhr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_oVdb1_CGsj0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("arg"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_xxtA0_OMUF0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getArgList().size());
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_vgzF1_xyio0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_fsim3_vTKx0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNotNull(cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_aPAM1_BLUR0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_xytX3_YCCG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_XiEP0_Jgrh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_rDxp2_vNAp0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_lnya1_Byfr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("arg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_aVUq2_lvid0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption", "-b"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_narc2_IwZL0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_qBgD1_lVAV0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_vaHg0_ErYb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_UvzE2_OnDU0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("alpha"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_hBzF1_JfWB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_RSbj3_sFQL0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_ExpectedOptsIsEmpty_GXNp0_Ivpv0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[0], new Properties(), true);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_zwYQ0_JWLK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_Lfyj3_LUTr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg1", cmd.getArgList().get(0));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_RfCC3_haWc0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_znBq0_VwRz0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        try {
            CommandLine cmd = parser.parse(options, arguments, new Properties(), true);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_xiRb0_Kpme0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_Rmzd2_VoRK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha=value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_QXFz1_xpNg0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption", "-b"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("nonOption", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_EZFJ3_jPqE0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--ar=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("arg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_ZFoq2_QZkT0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "description");
        String[] arguments = new String[]{"-r", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("r"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withoutProperties_BOIX1_bkJj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0]; // Initialize an empty array of arguments
        try {
            CommandLine cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_dAqD0_ytRB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_jHnS1_EMBW0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_wntA2_yufj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "true"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_EKBT3_Hscn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_YMjO2_TCfV0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "true"}, null, false);
            assertEquals("true", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_YkXB0_vyMZ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        try {
            CommandLine cmd = parser.parse(options, new String[]{}, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withoutProperties_axkw1_Zbta0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "true"}, null, false);
            assertEquals("true", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_gXIb0_LCOE0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_Gpch3_BOKq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XcYL3_msgL0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_TOLl1_gbVe0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "true"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null, false);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_jmqu0_CufG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        String[] arguments = new String[0];
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_SpQp0_ybwH0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        String[] arguments = new String[]{"-o", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_EhLt2_BqDp0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "true"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null, false);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_sjDA1_hVjj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "true"}, null, false);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_DONT1_Kptd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_vqDN0_agxd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        try {
            CommandLine cmd = parser.parse(options, new String[]{}, properties, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_skWc1_KVTa0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_lXdo3_gfZM0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value", "non-option"}, null, true);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_KWmo3_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "non-option"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_Tljw2_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    public void testHandleConcatenatedOptions7_NRGs6_HyQO0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-abc-d"}, new Properties(), true);
        } catch (ParseException e) {
            assertEquals("Unexpected option: -abc-d", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_LXZq3_Cpqa0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_igmM1_LYto0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            // ParseException is expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_xESA3_ZvYb0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("arg", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertNull(cmd.getOptionProperties("a").get("arg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_fUpX2_bZcK0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("alpha", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_WFZp1_bcLu0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            // ParseException is expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_NYIK0_jefI0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_oXfX1_yEVW0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            // No need to fail, just let the test case pass
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_XlSb2_yXby0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alp", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertNull(cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_xSsx0_OFvO0_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertNull(cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_ifsX3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("propertyValue", cmd.getOptionValue("a"));
    }
}