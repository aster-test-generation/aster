/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_MMZL0_1() {
        GnuParser gnuParser = new GnuParser();
        Options options = gnuParser.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_MMZL0_2() {
        GnuParser gnuParser = new GnuParser();
        Options options = gnuParser.getOptions();
        assertTrue(options.getOptions().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RequiredOption_ovqs2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("r", true, "required option");
        parser.setOptions(options);
        List<String> args = new ArrayList<>();
        args.add("-r");
        ListIterator<String> iter = args.listIterator();
        parser.processOption("-r", iter);
        assertEquals(0, iter.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs1_wPZk0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("-o", "value").listIterator();
        parser.processOption("o", iter);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs2_rpgG1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", false, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processOption("o", iter);
        assertNull(opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs4_JryZ3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        parser.setOptions(options);
        ListIterator<String> iter = Arrays.asList("-o", "value1", "value2").listIterator();
        parser.processOption("o", iter);
        assertEquals("value1", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_GGkq10() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-ab", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-a", "-b", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_qvdp2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("unknown", "value");
        try {
            parser.processProperties(properties);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Option 'unknown' is not recognized", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesInvalidValue_kOmC8() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        parser.setOptions(options);
        properties.setProperty("o", "invalid");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutValue_ahGR9() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        parser.setOptions(options);
        properties.setProperty("o", "");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionInGroup_mTIJ5_hBLt0_1() throws ParseException {
        GnuParser parser = new GnuParser();
        parser.getOptions().addOption("o1", "option1", false, "description");
        parser.getOptions().addOption("o2", "option2", false, "description");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], new Properties(), false);
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionInGroup_mTIJ5_hBLt0_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        parser.getOptions().addOptionGroup(group);
        Properties properties = new Properties();
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_sPMQ0() {
        GnuParser gnuParser = new GnuParser();
        List requiredOptions = gnuParser.getRequiredOptions();
        assertNotNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_UnrecognizedOption_jEVe1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        List<String> args = new ArrayList<>();
        args.add("-b");
        ListIterator<String> iter = args.listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RequiredOption_ovqs2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        List<String> args = new ArrayList<>();
        args.add("-r");
        ListIterator<String> iter = args.listIterator();
        parser.getRequiredOptions().add("r");
        parser.processOption("-r", iter);
        assertEquals(0, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs1_wPZk0_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processArgs(opt, iter);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs2_rpgG1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", false, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        parser.processArgs(opt, iter);
        assertNull(opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs3_eVRA2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("-nextOption", "value").listIterator();
        parser.processArgs(opt, iter);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs4_JryZ3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value1", "value2").listIterator();
        parser.processArgs(opt, iter);
        assertEquals("value1", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs6_DhXc5_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", true, "description");
        ListIterator<String> iter = Arrays.asList("value").listIterator();
        opt.setOptionalArg(true);
        parser.processArgs(opt, iter);
        assertEquals("value", opt.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_IOoF9_fid1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-ab", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "-b", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_GGkq10_fid1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-ab", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-ab", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesUnrecognizedOption_qvdp2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        properties.setProperty("unknown", "value");
        try {
            parser.processProperties(properties);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesInvalidValue_kOmC8_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "invalid");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutValue_ahGR9_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "");
        try {
            parser.processProperties(properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_lfVD3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithArg_Shuu4_OqKk0_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", true, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "value");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutArg_NMyS3_NaYt0_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.getOptions().addOption(option);
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValue1_iQXK12_xgou0_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.setOptions(new Options().addOption(option));
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_zzll6_TJOO0_1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        parser.getOptions().addOption(option);
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_zzll6_TJOO0_2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        parser.getOptions().addOption(option);
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertFalse(((List<?>) parser.getOptions().getRequiredOptions()).contains("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionInGroup_mTIJ5_hBLt0_1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], new Properties(), false);
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionInGroup_mTIJ5_hBLt0_2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], new Properties(), false);
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertEquals(option1, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_bvyi0_CKuD0_1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        parser.parse(options, new String[0], new Properties(), false);
        assertEquals(true, parser.cmd.getOptions().length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_bvyi0_CKuD0_2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        parser.parse(options, new String[0], new Properties(), false);
        assertEquals(true, parser.cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_bvyi0_CKuD0_3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        parser.parse(options, new String[0], new Properties(), false);
        assertEquals(true, options.getRequiredOptions().contains(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_IbDK7_eIMd0_1_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertTrue(cmd.hasOption("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_IbDK7_eIMd0_2_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertEquals(option1, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_IbDK7_eIMd0_3_fid1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        parser.getOptions().addOptionGroup(group);
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertFalse(parser.getOptions().getRequiredOptions().contains("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_MMZL0() {
        GnuParser gnuParser = new GnuParser();
        Options options = gnuParser.getOptions();
        assertNotNull(options);
        assertTrue(options.getOptions().size() > 0);
    }
}