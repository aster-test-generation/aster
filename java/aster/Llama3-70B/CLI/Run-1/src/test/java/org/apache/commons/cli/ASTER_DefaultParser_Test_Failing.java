/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_ricu2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"unknown", "extra"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_KWmo3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "non-option"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_Tljw2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_Ilqz1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("apple", "description");
        String[] arguments = new String[]{"--apple=value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_KZFQ0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("true", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_nErz3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        options.addOption("arg2", "argument2", true, "argument2");
        String[] arguments = new String[]{"--arg"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg", cmd.getOptionValue("arg"));
    }

    @Test
    public void testHandleConcatenatedOptions7_NRGs6_HyQO0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-abc-d"}, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_rMtv5_iVSB0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-a", "-b", "-x"}, new Properties(), true);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_LXZq3_Cpqa0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("propertyValue", cmd.getOptionProperties("a").get("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_igmM1_LYto0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_xESA3_ZvYb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("arg", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("propertyValue", cmd.getOptionProperties("a").get("arg"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_CHnX2_CmRM0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "--", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, true);
            assertEquals(1, cmd.getArgList().size());
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_fUpX2_bZcK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("alpha", "propertyValue");
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("propertyValue", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_WFZp1_bcLu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_NYIK0_jefI0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("arg", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_nwEq0_MPyn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("true", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_oXfX1_yEVW0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_XlSb2_yXby0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("alpha", "alpha option");
        String[] arguments = new String[]{"--alp", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_xSsx0_OFvO0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("true", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withConcatenatedOptions_htJE2_VXtT0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-ab", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties, false);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("value", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_ricu2_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"unknown", "extra"};
        Properties properties = new Properties();
        ParseException exception = null;
        try {
            parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            exception = e;
        }
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_Ilqz1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("apple", true, "description");
        String[] arguments = new String[]{"--apple", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_nErz3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        options.addOption("arg2", "argument2", true, "argument2");
        String[] arguments = new String[]{"--ar"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("ar", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_rMtv5_iVSB0_fid1() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{"-a", "-b", "-x"}, new Properties(), true);
        } catch (ParseException e) {
            // Expected
            return;
        }
        fail("ParseException not thrown");
    }
}