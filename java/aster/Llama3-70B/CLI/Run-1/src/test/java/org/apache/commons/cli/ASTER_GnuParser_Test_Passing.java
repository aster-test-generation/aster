/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SYHN0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = parser.parse(options, arguments);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_Awtv0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_rglt0() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        parser.setOptions(options);
        assertEquals(1, parser.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_UlbJ0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_UnrecognizedOption_jEVe1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        parser.setOptions(options);
        List<String> args = new ArrayList<>();
        args.add("-b");
        ListIterator<String> iter = args.listIterator();
        try {
            parser.processOption("-b", iter);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_piml0() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_MYpH1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-a", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_frCQ2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--a", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"--a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_ngKG3() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_DoqZ4() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a=value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_bxXF5() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"--a=value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"--a", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_ovxy6() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_xDCB7() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"--", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_XfBF8() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-b", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-b", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_IOoF9() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-ab", "value", "file.txt"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "b", "value", "file.txt"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesNullProperties_LLsU0() throws ParseException {
        GnuParser parser = new GnuParser();
        parser.processProperties(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesEmptyProperties_dLGq1() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_lPZE0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_vpDD1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qaXu2_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qaXu2_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse4_lfVD3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"--", "-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_zUgX4_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_zUgX4_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse6_Jxde5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse7_Qlcf6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse8_gfHP7() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse9_kmoK8_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse9_kmoK8_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_fmZZ9_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_fmZZ9_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_fmZZ9_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UcPf10_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UcPf10_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UcPf10_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UcPf10_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11_5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_3() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_5() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-", cmd.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12_6() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("extra", cmd.getArgs()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs5_hmkh4_OEYU0() throws ParseException {
        GnuParser parser = new GnuParser();
        Option opt = new Option("o", "option", false, "description");
        ListIterator<String> iter = Arrays.<String>asList(new String[0]).listIterator();
        try {
            parser.processArgs(opt, iter);
            fail("Expected MissingArgumentException");
        } catch (MissingArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption_RecognizedOption_pFrt0_WsdG0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.setOptions(options);
        CommandLine cmd = CommandLine.builder().build();
        parser.cmd = cmd;
        List<String> args = new ArrayList<>();
        args.add("-a");
        ListIterator<String> iter = args.listIterator();
        parser.processOption("-a", iter);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithArg_Shuu4_OqKk0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("o", "value");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithoutArg_NMyS3_NaYt0() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option option = new Option("o", "option", false, "description");
        options.addOption(option);
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValue1_iQXK12_xgou0() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.setOptions(new Options().addOption(option));
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        assertFalse(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_zzll6_TJOO0_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        options.addOption(option);
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOption_zzll6_TJOO0_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option option = new Option("o", "option", false, "description");
        option.setRequired(true);
        options.addOption(option);
        parser.setOptions(options);
        Properties properties = new Properties();
        properties.setProperty("o", "true");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesOptionWithValueYes_LBXC10_JHRI0() throws ParseException {
        GnuParser parser = new GnuParser();
        Properties properties = new Properties();
        Option option = new Option("o", "option", false, "description");
        parser.setOptions(new Options().addOption(option));
        CommandLine cmd = parser.parse(parser.getOptions(), new String[0], properties, false);
        properties.setProperty("o", "yes");
        parser.processProperties(properties);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateRequiredOptions_RequiredOption_bvyi0_CKuD0_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        try {
            parser.parse(options, new String[0], new Properties(), false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: o", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_IbDK7_eIMd0_1() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertTrue(cmd.hasOption("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesRequiredOptionInGroup_IbDK7_eIMd0_2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        Properties properties = new Properties();
        Option option1 = new Option("o1", "option1", false, "description");
        Option option2 = new Option("o2", "option2", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(option1);
        group.addOption(option2);
        group.setRequired(true);
        options.addOptionGroup(group);
        parser.setOptions(options);
        properties.setProperty("o1", "true");
        CommandLine cmd = parser.parse(options, new String[0], properties, false);
        assertEquals(true, cmd.hasOption("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse3_qaXu2() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse5_zUgX4() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse9_kmoK8() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse10_fmZZ9() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("extra", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse11_UcPf10() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("-", cmd.getArgs()[1]);
        assertEquals("extra", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse12_zNAr11() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("-", cmd.getArgs()[1]);
        assertEquals("-", cmd.getArgs()[2]);
        assertEquals("extra", cmd.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse13_eIKQ12() throws ParseException {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value", "-", "-", "-", "-", "extra"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("-", cmd.getArgs()[0]);
        assertEquals("-", cmd.getArgs()[1]);
        assertEquals("-", cmd.getArgs()[2]);
        assertEquals("-", cmd.getArgs()[3]);
        assertEquals("extra", cmd.getArgs()[4]);
    }
}