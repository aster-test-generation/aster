/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_sFnw0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_JdRb0() {
        HelpFormatter helpFormatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_aDpo0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_qzFX0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_eCUs0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_uGyM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_neyp0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("-");
        assertEquals("-", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_DIni0() {
        HelpFormatter.Builder builder = HelpFormatter.builder();
        assertNotNull(builder.get());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_CZRA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("usage: ", helpFormatter.getSyntaxPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_auFq0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintOptions_kmSw0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printOptions(pw, 80, options, 2, 5);
        pw.flush();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_XmKE0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> comparator = helpFormatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_VbHV0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("arg", helpFormatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_RUWh0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(74, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_ktxV0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_Vrwe1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(6, helpFormatter.findWrapPos("Hello\tWorld", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_tAlw2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(5, helpFormatter.findWrapPos("HelloWorld", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_lMeO3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(10, helpFormatter.findWrapPos("HelloWorldHello", 10, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_otdb5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(6, helpFormatter.findWrapPos("Hello\nWorldHello", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_KWkM6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(10, helpFormatter.findWrapPos("HelloWorldHelloWorld", 10, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_rWqe7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(-1, helpFormatter.findWrapPos("HelloWorld", 20, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_QhSI8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(5, helpFormatter.findWrapPos("Hello\rWorld", 5, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_wbmP9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(10, helpFormatter.findWrapPos("HelloWorldHello\rWorld", 10, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_hiDL11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(-1, helpFormatter.findWrapPos("HelloWorld", 5, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_VKiB1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_TrTG0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNullString_HJPJ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimEmptyString_KYes1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNoWhitespace_joXH2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText4_SDYd3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText6_AuzN5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a test string with special characters !@#$";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp1_FuXZ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer", true);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp2_DOVa1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "", options, 2, 5, "footer", true);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp3_aReJ2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "", true);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp4_ZLPi3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "", options, 2, 5, "", true);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp5_PDAJ4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer", false);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp6_dklK5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "", options, 2, 5, "footer", false);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp7_DauM6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "", false);
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage1_XHzm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage3_scGg2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option1 = new Option("a", "alpha", true, "description");
        options.addOption(option1);
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, 80, "app", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_qleX0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_ekeo1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_IjMH2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions4_lqDd3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions5_QqId4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions6_EVNV5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions7_hVwv6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions8_LNJm7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, null);
        options.addOption("b", "beta", true, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions9_ZmQx8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, null);
        options.addOption("b", "beta", false, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions10_EQLi9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions11_QdUa10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions12_DgiE11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, null);
        options.addOption("b", "beta", true, null);
        options.addOption("c", "gamma", true, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions13_jlbN12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, null);
        options.addOption("b", "beta", false, null);
        options.addOption("c", "gamma", false, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_TVHg0_kiyY0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        helpFormatter.renderOptions(sb, 100, options, 0, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_oUmO0_nvuz0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName("testArgName");
        assertEquals("testArgName", helpFormatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_rimD0_mzfR0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter stringWriter = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(stringWriter);
        helpFormatter.printUsage(printWriter, 80, "java MyProgram");
        assertEquals("usage: java MyProgram", stringWriter.toString().trim());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_KewK0_xTAt0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setNewLine("newLine");
        assertEquals("newLine", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_aHES0_VkMr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        options.addOption("o", "option", true, "This is a test option");
        helpFormatter.renderOptions(stringBuffer, 80, options, 5, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_KMNY0_yZbT0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptPrefix("prefix");
        assertEquals("prefix", helpFormatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_WupD0_qOxa0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("--", helpFormatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_tHxB0_RhHc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(10);
        assertEquals(10, helpFormatter.getDescPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_tFvN0_pXla0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptPrefix("prefix");
        assertEquals("prefix", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_ZtYk0_FpQp0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptPrefix("-");
        assertEquals("-", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_IDwz0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer");
        pw.flush();
        pw.close();
        assertTrue(true);
    }
}