/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RequiredArg_XFNw0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("a", true, "arg");
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_JavaProperty_Wfqu1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("D", true, "property");
        option.setArgs(2);
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-Dkey=value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_Return_qZZD2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("D", true, "property");
        option.setArgs(2);
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-Dkey");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RequiredArg_rJrF0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("a", true, "arg");
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-a");
        ParseException exception = assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_JavaProperty_efSx1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("D", true, "property");
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-Dkey=value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_Return_ldpN2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("a", false, "no arg");
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-a");
        assertEquals(null, parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_LeadingAndTrailingQuotes_vwrw0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.options = new Options(); // Initialize options
        parser.options.addOption("a", true, "desc"); // Add option 'a'
        parser.currentOption = parser.options.getOption("a"); // Set current option
        parser.handleConcatenatedOptions("a'value'"); // Call handleConcatenatedOptions
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_NoLeadingAndTrailingQuotes_rzyO1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.options = new Options(); // Initialize options
        parser.options.addOption("a", true, "desc"); // Add option 'a'
        parser.currentOption = parser.options.getOption("a"); // Set current option
        parser.handleConcatenatedOptions("aValue"); // Call handleConcatenatedOptions
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_isArgument_EADp0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        String[] arguments = new String[]{"-a", "-123"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_isArgument_uDiO0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "-123"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("Argument should be parsed correctly", "-123", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_HasLongOption_True_whSk0() throws ParseException {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"--longOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GetLongPrefix_NotNull_QHKZ1() throws ParseException {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-longOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_BreakLoop_LongOption_MPTH2_1() throws ParseException {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"--longOpt", "--anotherLongOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_BreakLoop_LongOption_MPTH2_2() throws ParseException {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"--longOpt", "--anotherLongOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("anotherLongOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_allowPartialMatching_RcoF0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("longOpt", "longOption", true, "description");
        String[] arguments = new String[]{"--long"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_matchesArrayList_hzaO1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        Options options = new Options();
        options.addOption("longOpt", "longOption", true, "description");
        String[] arguments = new String[]{"--long"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hasLongOption_xhPG2() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        Options options = new Options();
        options.addOption("longOpt", "longOption", true, "description");
        String[] arguments = new String[]{"--longOption"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_isArgument_jKtW0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "-10"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("Argument should be parsed", "-10", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SkipParsing_ucsM1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2", "-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_BLsF3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options().addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "--alpha", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_AUzW3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option");
        String[] arguments = new String[]{"-o", "value", "--option", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value2", cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_atGD0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_atGD0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("--", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_sttD3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options().addOption("a", "alpha", true, "argument");
        String[] arguments = new String[]{"-a", "arg1", "--alpha", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OptionWithArgument_yafT1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "arg", true, "argument");
        options.addOption(option);
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOption_cfHs3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("arg", true, "long option");
        options.addOption(option);
        String[] arguments = new String[]{"--arg", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_AkCG0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_AkCG0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("--", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOption_WJcc3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("option", "description");
        options.addOption(option);
        String[] arguments = new String[]{"--option", "arg1"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SkipParsing_QUmA1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--", "arg1", "arg2", "-o", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(3, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_LTSm3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option o");
        String[] arguments = new String[]{"-o", "value", "--option", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_YscM0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_YscM0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("--unknown", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAmbiguousOptionException_dzNc1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt1 = new Option("opt1", "opt1", true, "description");
        Option opt2 = new Option("opt2", "opt2", true, "description");
        options.addOption(opt1);
        options.addOption(opt2);
        String[] arguments = new String[]{"--ambiguous"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected AmbiguousOptionException");
        } catch (AmbiguousOptionException e) {
            assertEquals("ambiguous", e.getOption());
            assertEquals(2, e.getMatchingOptions().size());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownTokenInLongOption_ZvbI4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("opt", "opt", true, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt", "unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownTokenInLongOption_ZvbI4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("opt", "opt", true, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt", "unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("unknown", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withNegativeNumber_leig0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-opt", "-1"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withValidDouble_lTaA1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-opt", "1.0"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withInvalidDouble_rBkf2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-opt", "abc"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withEmptyArgument_enYP3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-opt", ""};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NullToken_XTDP0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{null};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithEqual_cHFx3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithoutEqual_Hwnh4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithPartialMatch_iNsc6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"--lon"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongOptionWithPartialMatching_uwbj6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"--lon"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongPrefixOption_TPNs5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"-longOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_LongPrefixOptionWithValue_HOtv6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"-longOpt=value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_getMatchingLongOptions_zciR3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", false, "long option");
        String[] arguments = new String[]{"--long"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_isJavaProperty_xntH9() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("D", true, "java property");
        String[] arguments = new String[]{"-Dkey=value"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SkipParsing_elws1_arWj0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "desc");
        String[] arguments = new String[]{"--", "arg1", "arg2", "-a", "value"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(3, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OptionWithMultipleValues_egFe3_GIes0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setArgs(Option.UNLIMITED_VALUES);
        options.addOption(opt);
        String[] arguments = new String[]{"-o", "value1", "value2"};
        CommandLine cmd = parser.parse(options, arguments, false);
        assertEquals(new String[]{"value1", "value2"}, cmd.getOptionValues("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RequiredArg_rJrF0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("a", true, "arg");
        parser.options.addOption(option);
        parser.handleConcatenatedOptions("-a");
        ParseException exception = assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-a"));
        assertEquals("Missing argument for option: a", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_handleUnknownToken_JyrG0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = {"--unknown"};
        Properties properties = new Properties();
        ParseException exception = assertThrows(ParseException.class, () -> parser.parse(options, arguments, properties, false));
        assertEquals("Unknown option: --unknown", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ambiguousLongOption_vDTZ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("al", "alphal", true, "alphal option");
        String[] arguments = {"--alp"};
        Properties properties = new Properties();
        ParseException exception = assertThrows(ParseException.class, () -> parser.parse(options, arguments, properties, false));
        assertEquals("Ambiguous option: --alp (could be --alpha or --alphal)", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_BreakLoop_LongOption_MPTH2() throws ParseException {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"--longOpt", "--anotherLongOpt"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertTrue(cmd.hasOption("longOpt"));
        assertTrue(cmd.hasOption("anotherLongOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_BLsF3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options().addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "--alpha", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_AUzW3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option");
        String[] arguments = new String[]{"-o", "value", "--option", "value2"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("o"));
        assertEquals("value2", cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_atGD0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("--", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_sttD3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options().addOption("a", "alpha", true, "argument");
        String[] arguments = new String[]{"-a", "arg1", "--alpha", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getOptionValue("a"));
        assertEquals("arg2", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OptionWithArgument_yafT1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option option = new Option("a", "arg", true, "argument");
        options.addOption(option);
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
        assertNotNull(parser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_DoubleHyphen_AkCG0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals("--", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ShortAndLongOption_LTSm3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", true, "option o");
        String[] arguments = new String[]{"-o", "value", "--option", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("o"));
        assertEquals("value2", cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownToken_YscM0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("--unknown", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleUnknownTokenInLongOption_ZvbI4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("opt", "opt", true, "description");
        options.addOption(opt);
        String[] arguments = new String[]{"--opt", "unknown"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("unknown", cmd.getArgs()[0]);
    }
}