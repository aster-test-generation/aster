/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vdMj0() {
        Options options = new Options();
        String expected = "[ Options: [ short [] ] [ long null ]]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ExactMatch_NZiJ0() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("option");
        assertEquals(Collections.singletonList("option"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_qEQz0() {
        Options options = new Options();
        Option opt = Option.builder("option").build();
        OptionGroup optionGroup = options.getOptionGroup(opt);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_cxpf0_kJJZ0_2() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertEquals("opt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_PartialMatch_VjzQ1_mMdO0() {
        Options options = new Options();
        options.addOption("option1", false, "desc");
        options.addOption("option12", false, "desc");
        List<String> result = options.getMatchingOptions("opt");
        assertEquals(Arrays.asList("option1", "option12"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_aMjS0_vUWu0_3() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, null);
        options.addOption(opt);
        assertTrue(options.getRequiredOptions().contains(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_esDz2_isEl0_3() {
        Options options = new Options();
        Option opt = new Option("o", true, "desc");
        options.addOption(opt);
        assertFalse(((List<?>) options.getRequiredOptions()).isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OJmX0_fVMK0_2() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Option option = options.getOption("opt");
        assertEquals("opt", option.getLongOpt());
    }
}