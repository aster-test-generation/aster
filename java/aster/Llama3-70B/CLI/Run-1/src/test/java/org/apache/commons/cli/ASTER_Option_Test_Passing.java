/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs1_gGAS0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription1_iAJo0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription2_TBRo1() {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription3_xPRc2() {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_NZoU0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_PBYB0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withLongOption_cxyP0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withoutLongOption_eBkA1() {
        Option option = new Option("o", true, "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withoutLongOptionAndArg_jjjW2() {
        Option option = new Option("o", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withNoValues_nbPz1() {
        Option option = new Option("option", "description");
        assertNull(option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_1_vaUL0() {
        Option option = new Option("option", "longOption", true, "description");
        Converter<?, ?> converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_2_ZJnz1() {
        Option option = new Option("option", "longOption", false, "description");
        option.setConverter(TypeHandler.getDefault().getConverter(String.class));
        Converter<?, ?> converter = option.getConverter();
        assertEquals(TypeHandler.getDefault().getConverter(String.class), converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNonDeprecatedOption_MXir1() {
        Option option = new Option("o", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountEqualToZero_CqCB2() {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_ncmx0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("new description");
        assertEquals("new description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg1_dKbr0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg2_kWfZ1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_rQuD2() {
        Option option = new Option("option", "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg4_ERKW3() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg5_jlAt4() {
        Option option = new Option("option", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_BfOH0() {
        Option option = new Option("a", "longA", true, "desc");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_Opiz1() {
        Object obj = new Object();
        Option option = new Option("a", "longA", true, "desc");
        assertFalse(option.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_yoBN2() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("a", "longA", true, "desc");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentOption_DyWT3() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("b", "longB", true, "desc");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLongOption_YLfk4() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("a", "longB", true, "desc");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt1_WnNQ0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt2_YuCt1() {
        Option option = new Option("opt", true, "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt3_MZcL2() {
        Option option = new Option("opt", "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_wfWy0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_false_lCCI1() {
        Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId1_zNvM0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId2_TgOQ1() {
        Option option = new Option("b", true, "description");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId3_RTcP2() {
        Option option = new Option("c", "description");
        assertEquals('c', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_noValues_Qlqb1() {
        Option option = new Option("option", "description");
        String[] result = option.getValues();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOption_longOption_hasArg_description_kMnr0() {
        Option option = new Option("option", "longOption", true, "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOption_hasArg_description_LsmQ1() {
        Option option = new Option("option", true, "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOption_description_xZoj2() {
        Option option = new Option("option", "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withOption_HamU0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("o", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withoutOption_TkFm1() {
        Option option = new Option("longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withLongOption_esPd0() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withoutLongOption_yYrK1() {
        Option option = new Option("o", true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withArg_CLEn0() {
        Option option = new Option("o", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withoutArg_DMPW1() {
        Option option = new Option("o", "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withLongOption_nVYJ2() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithoutHasArg_oHuD1() {
        Option option = new Option("o", "description");
        try {
            option.processValue("value");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_OZLb0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator(',');
        assertEquals(',', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_noValues_PrKS1() {
        Option option = new Option("option", "description");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList1_EKEf0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_IyFe1() {
        Option option = new Option("option", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_gFJe2() {
        Option option = new Option("option", "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_withoutDeprecatedOption_htCz1() {
        Option option = new Option("o", "description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_AcceptsArg_hFmR2() {
        Option option = new Option("option", true, "description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withoutOptionalArg_DGnc1() {
        Option option = new Option("o", "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withoutArgName_uRcN1() {
        Option option = new Option("o", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_RkaO0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_UnsupportedOperationException_xBRs0() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.addValue("value");
            assert false;
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_1_zgLY0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_2_oUnu1() {
        Option option = new Option("option", true, "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_3_pprA2() {
        Option option = new Option("option", "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_10_ucaw9() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_wiIh0_kFvd0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("defaultValue");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_OdrD0_qXeR0_1() {
        Option option = new Option("option", "longOption", true, "description");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_OdrD0_qXeR0_2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("defaultValue", option.getValue("defaultValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_1_SxzF0_kpVb0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        String result = option.getValue("default");
        String expected = option.getValue();
        if (expected != null) {
            assert result.equals(expected);
        } else {
            assert result.equals("default");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg6_olAR5_KnKa1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(true, option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_WithoutValueSeparator_AFeh4_rzTz0() {
        Option option = new Option("o", true, "description");
        option.processValue("value");
        assertNotNull(option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues3_frqJ2_drdh0() {
        Option option = new Option("option", "description");
        option.clearValues();
        assertTrue(option.getValue("") == "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues2_Ezwk1_VzDz0() {
        Option option = new Option("option", true, "description");
        option.clearValues();
        assertNull(option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withEmptyArgName_PIUi2_HXGs0() {
        Option option = new Option("o", false, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withValue_cgMn0_CoQx0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("defaultValue");
        assertEquals("defaultValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_sKxM1_fid1() {
        Option option = new Option("option", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_sdlm2_fid1() {
        Option option = new Option("option", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountGreaterThanOne_VtQi0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionOnly_hWKA0_fid1() {
        Option option = new Option("o", "option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionAndLongOption_ORVq1_fid1() {
        Option option = new Option("o", "longOption", true, "option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionAndDescription_FFKU2_fid1() {
        Option option = new Option("o", "option");
        assertEquals("[ Option o :: option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptionLongOptionAndDescription_IJVo3_fid1() {
        Option option = new Option("o", "longOption", false, "option");
        assertEquals("[ Option o longOption :: option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_true_gCdM0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName1_aBZN0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName2_UfHo1_fid1() {
        Option option = new Option("option", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName3_qHTP2_fid1() {
        Option option = new Option("option", "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OptionalArg_swLg0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withOptionalArg_rdGb0_fid1() {
        Option option = new Option("o", "longOption", true, "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArgName_aYHv0_fid1() {
        Option option = new Option("o", "longOption", true, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_aYHv0() {
        Option option = new Option("o", "longOption", true, "description");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_7_BIzz6_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_8_HvVG7_fid1() {
        Option option = new Option("option", true, "description");
        String result = option.getValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_9_znmI8_fid1() {
        Option option = new Option("option", "description");
        String result = option.getValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_withNoLongOption_EcVc2_oNwL0_fid1() {
        Option option = new Option("o", "description");
        assertEquals("[ Option o :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withDefaultValue_EcVc2_FCbz1_fid1() {
        Option option = new Option("o", "defaultValue");
        assertEquals("defaultValue", option.getValue("defaultValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withDeprecatedOption_LndD4_mxgq0_fid1() {
        Option option = new Option("o", "longOption", true, "option");
        assertEquals("[ Option o longOption [ARG] :: option :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues3_frqJ2_xZEz1_fid1() {
        Option option = new Option("option", "description");
        option.clearValues();
        assertEquals("", option.getValue(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues2_Ezwk1_qrCQ1_fid1() {
        Option option = new Option("option", true, "description");
        option.clearValues();
        assertEquals("defaultValue", option.getValue("defaultValue"));
    }
}