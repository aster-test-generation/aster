/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_YLVH0_1() throws ParseException {
        String string = "Test String";
        Object obj = String.class;
        Object result = TypeHandler.createValue(string, obj);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_YLVH0_2() throws ParseException {
        String string = "Test String";
        Object obj = String.class;
        Object result = TypeHandler.createValue(string, obj);
        assertEquals(string, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_vEbf0_1() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "123";
        Number number = TypeHandler.createNumber(string);
        assertNotNull(number);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_vEbf0_2() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "123";
        Number number = TypeHandler.createNumber(string);
        assertEquals(123, number.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_ThrowsParseException_WhenFileDoesNotExist_Qgos1_1() throws org.apache.commons.cli.ParseException {
        String filePath = "nonExistingFile.txt";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.openFile(filePath));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_DAgF0_QqqL0() throws ParseException {
        String className = "java.lang.Object";
        Object obj = TypeHandler.createObject(className);
        assertNotNull(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_YLVH0() throws ParseException {
        String string = "Test String";
        Object obj = String.class;
        Object result = TypeHandler.createValue(string, obj);
        assertNotNull(result);
        assertEquals(string, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNumber_vEbf0() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        String string = "123";
        Number number = TypeHandler.createNumber(string);
        assertNotNull(number);
        assertEquals(123, number.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_ThrowsParseException_WhenFileDoesNotExist_Qgos1() throws org.apache.commons.cli.ParseException {
        String filePath = "nonExistingFile.txt";
        ParseException exception = assertThrows(ParseException.class, () -> TypeHandler.openFile(filePath));
        assertNotNull(exception);
    }
}