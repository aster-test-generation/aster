/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_Gtpa3_mjnQ0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--", "-a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eIEt5_giXn0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--", "a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_GmDC6_iNpY0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-", "a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_IBfX4() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-b", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_pEHn7_fid2() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa", "--bb", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_wOOq8_fid2() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa=b", "--bb", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_dwou5_lsdy0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "--", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_AERt6_zNBj0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "--", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_pYHw9_gCvW0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption", "--", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "--", "nonOption", "--", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_Cysk10_nHXS0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "nonOption", "--", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "--", "nonOption", "--", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_Gtpa3_mjnQ0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_ZKOK4_wlZX0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_egpf3_zWwu0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--aa", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eIEt5_giXn0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_GmDC6_iNpY0_fid3() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }
}