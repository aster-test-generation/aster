/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_BCvK0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_pcpp0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option, "defaultValue");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_jAfi0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue(new Option("a", "a", false, "a"));
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_izfY0() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_AwOL0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_rvif0() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_kbbq0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues(new Option("a", "a", false, "a"));
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_CharDefaultValue_urqy0() throws ParseException {
        CommandLine cmd = new CommandLine();
        Character defaultValue = 'a';
        Character result = cmd.getParsedOptionValue('b', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_CharNullDefaultValue_Xkkp1() throws ParseException {
        CommandLine cmd = new CommandLine();
        Character defaultValue = null;
        Character result = cmd.getParsedOptionValue('b', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_BooleanDefaultValue_eOEz2() throws ParseException {
        CommandLine cmd = new CommandLine();
        Boolean defaultValue = true;
        Boolean result = cmd.getParsedOptionValue('b', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_BooleanNullDefaultValue_wxMz3() throws ParseException {
        CommandLine cmd = new CommandLine();
        Boolean defaultValue = null;
        Boolean result = cmd.getParsedOptionValue('b', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IntegerDefaultValue_cxIw4() throws ParseException {
        CommandLine cmd = new CommandLine();
        Integer defaultValue = 1;
        Integer result = cmd.getParsedOptionValue('b', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IntegerNullDefaultValue_fdKw5() throws ParseException {
        CommandLine cmd = new CommandLine();
        Integer defaultValue = null;
        Integer result = cmd.getParsedOptionValue('b', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LongDefaultValue_gsDR6() throws ParseException {
        CommandLine cmd = new CommandLine();
        Long defaultValue = 1L;
        Long result = cmd.getParsedOptionValue('b', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LongNullDefaultValue_myvR7() throws ParseException {
        CommandLine cmd = new CommandLine();
        Long defaultValue = null;
        Long result = cmd.getParsedOptionValue('b', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_StringDefaultValue_Yfqn8() throws ParseException {
        CommandLine cmd = new CommandLine();
        String defaultValue = "a";
        String result = cmd.getParsedOptionValue('b', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_StringNullDefaultValue_MQxM9() throws ParseException {
        CommandLine cmd = new CommandLine();
        String defaultValue = null;
        String result = cmd.getParsedOptionValue('b', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_NullOption_Pnoh0() {
        CommandLine cmd = new CommandLine();
        Option option = null;
        String[] result = cmd.getOptionValues(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_NoMatchingOption_ZhED1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        String[] result = cmd.getOptionValues(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_EtnV0() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_qCOG0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withNonNullOptionValue_DHhD0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        Supplier<String> supplier = () -> defaultValue;
        String result = commandLine.getOptionValue(option, supplier);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_jFYH0() {
        CommandLine commandLine = new CommandLine();
        Supplier<String> supplier = () -> "default";
        String result = commandLine.getOptionValue('a', supplier);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_Aqza0() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ECHO0() {
        CommandLine commandLine = new CommandLine();
        try {
            String result = (String) commandLine.getOptionValue(new Option("a", "a", false, "description"));
            assertNull(result);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withoutValues_bsal1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        String result = cmd.getOptionValue(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_SCdO0_UEFv0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionNull_bTSP1_VUJn0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
        assertNull(commandLine.getOptionValue(new Option("test", "test")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withMatchingLongOpt_Vpha1_AaFT0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        cmd.addOption(option);
        assertEquals(null, cmd.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals(4, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_2() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals("key1", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_3() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals("value1", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_4() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals("key2", values[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_5() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals("value2", values[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_6() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withNoMatchingOpt_xXJl2_atIz0_7() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = new String[]{"key1", "value1", "key2", "value2"};
        cmd.addOption(option);
        Properties props = cmd.getOptionProperties("otherOpt");
        assertEquals(null, cmd.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_uzlS0_EbrO0() {
        Option.Builder builder = Option.builder("test");
        assertNotNull(builder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_cifr0_opLF0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(4);
        List<Option> optionsList = new ArrayList<Option>();
        optionsList.add(option);
        assertEquals(null, cmd.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_1_qpGZ0_Ixcc0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        try {
            Option option = new Option(opt, "description");
            String result = cmd.getOptionValue(option);
            assertNull(result);
        } catch (Exception e) {
            fail("Exception was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_2_jirD1_iqFZ0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Integer defaultValue = 10;
        try {
            Integer result = (Integer) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_4_EnFf3_gMQn0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Double defaultValue = 10.5;
        try {
            Double result = (Double) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_5_cNGF4_ZGuo0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Float defaultValue = 10.5f;
        try {
            Float result = (Float) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_6_bFEe5_tUlN0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Long defaultValue = 10L;
        try {
            Long result = (Long) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_8_xSTw7_FpUM0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Byte defaultValue = 10;
        try {
            Byte result = (Byte) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_9_jxbZ8_pOJE0() {
        CommandLine cmd = new CommandLine();
        String opt = "option";
        Character defaultValue = 'a';
        try {
            Character result = (Character) cmd.getParsedOptionValue(opt, defaultValue);
            assertEquals(defaultValue, result);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_withNullOption_tOvg0_FYzI0() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String result = null;
        try {
            result = commandLine.getOptionValue(option);
        } catch (Exception e) {
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue1_ZmXO0_IzPo0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        try {
            String result = cmd.getOptionValue(option);
            assertNull(result);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue2_tzbG1_zxbX0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", true, "desc");
        Integer defaultValue = 10;
        try {
            Integer result = cmd.getParsedOptionValue(option, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue3_OvGk2_hdnd0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "desc");
        Boolean defaultValue = true;
        Boolean result = null;
        try {
            result = Boolean.parseBoolean(cmd.getOptionValue(option));
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue7_UFLb6_rwHR0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String defaultValue = "default";
        try {
            String result = cmd.getOptionValue(option);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_rNZK0_FkqP0() {
        CommandLine commandLine = new CommandLine();
        try {
            String result = commandLine.getOptionValue(new Option("a", "a", true, "description"));
            assertNull(result);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_FBfw0_gHZM0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = null;
        Object result = null;
        try {
            result = commandLine.getOptionValue(option);
        } catch (Exception e) {
        }
        assertNull(result);
    }
}