/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_wmoN2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value", "extra"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_IYqz3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown", "value", "extra"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_AdSH2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_MKWh2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_jbRe2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_TVIl2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_WLWN3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "-c"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_RObi3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_juMW2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_UUuK0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_GrYr2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_ETXx3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_cgXm2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_xYlR3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_bVtP0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_gIxw1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_MRMW2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_kaUa2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_FGvZ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_HFMB3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-u", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_Gvpw3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-u", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_YJsA3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_JGOf2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, args, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_BZIh1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_oyXG2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected UnrecognizedOptionException");
        } catch (UnrecognizedOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_Dnmq1() {
        Options options = new Options();
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-x", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_blbt3() {
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_2_VWTb1() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withMissingArgumentException_WjfO2() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withMissingArgumentException_nzdM3() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_BoZN0() {
        String token = "key=value";
        int result = DefaultParser.indexOfEqual(token);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_bwOq6_jdxC0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(new Options(), new String[]{"-ax"}, new Properties());
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_jLpQ6_lYBq0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(new Options(), new String[]{"-a-b-c"}, new Properties());
            assert false;
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_ZBvL0_aQGu0() {
        DefaultParser parser = new DefaultParser();
        assertNotNull(parser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_vdaA2_BsYq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_dXdU0_kXLu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = {"-a", "value"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_jIqC0_qAwj0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = {"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_xXLn1_tycC0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = {"-a", "value", "arg1", "arg2", "--", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(3, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_VqhP2_FylN0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "apple", true, "description");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals(0, cmd.getArgs().length);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_hgrg3_yEvd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals(0, cmd.getArgs().length);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_Sjef0_aINq0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_XJij2_CaCu0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals(1, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_DgFl3_TnHY0() {
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals(1, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_bqFn0_BUFr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_crOE1_QkFh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_AYIT0_PTIq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_aaDi1_DgZN0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals(1, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("long-opt"));
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_NUTI1_FKox0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("long-opt"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_vFhA0_zVns0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_GUgN1_NPBF0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("long-opt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortAndLongOption_AZBl2_FbLb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        options.addOption("b", "bool", false, "boolean");
        String[] arguments = new String[]{"-a", "value", "-b", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
            assertTrue(cmd.hasOption("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_PmYO2_iyYF0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "argument");
        String[] arguments = new String[]{"-a", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertTrue(cmd.hasOption("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_KzZQ0_jRzm0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals("extra", cmd.getArgs()[0]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_iYlD2_fVAt0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_xWdC3_EUgC0() {
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_UWxI2_aGEJ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
            assertEquals(0, cmd.getArgs().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_NcDj0_LXtr0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_FjnT3_EGtT0() {
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(0, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_OPsq0_pvbB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_CzTy1_QLhS0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_IcRA2_AcFY0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_sdlt3_KiRX0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_XjzI0_KIqq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_laBI3_IWwo0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_aNeL0_QSnn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgList().size());
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_niIJ0_NzLl0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_JuVG1_WbFm0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"--arg", "value"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
        assertEquals(1, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_pKof3_igcV0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_siDR0_xtOm0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_LETO1_nohE0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value1", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_pMyt2_Utca0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getOptions().length);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_hHON1_HGJs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_TUXR2_HmoT0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_KyVo1_ztka0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_bdOr0_Ijgr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_qWIx3_dSXn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_andProperties_LCyC0_RuhZ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.put("alpha", "value1");
        properties.put("bravo", "value2");
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments, properties);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_hyBm1_atkN0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_XbvW2_QoRd0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("nonOption", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withPartialMatching_cHBc3_Tboy0() {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        options.addOption("bravo", "bravo", true, "bravo option");
        String[] arguments = new String[]{"--al", "value1"};
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals("value1", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_dZwO0_Jajh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("alpha"));
            assertEquals("arg1", cmd.getArgs()[0]);
            assertEquals("arg2", cmd.getArgs()[1]);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_ykCY2_KVIs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value1", cmd.getOptionValue("alpha"));
            assertEquals("value2", cmd.getOptionValue("bravo"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_knGc1_maNg0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_uytU1_jaOv0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
            assertEquals(1, cmd.getOptions().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_hOvJ2_xRFa0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(cmd);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_andProperties_wRdj0_IUpG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.put("alpha", "value1");
        properties.put("beta", "value2");
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments, properties);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_pgeN1_mPyW0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "beta", true, "beta option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null);
            assertEquals("value1", cmd.getOptionValue("a"));
            assertEquals("value2", cmd.getOptionValue("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_eXUu3_BDVG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("nonOption", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_LABM0_LbvY0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_yJuM1_iikS0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_kpML0_FNlt0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_rgHN1_bSWQ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("arg", "argument", true, "argument");
        String[] arguments = new String[]{"--arg=value"};
        Properties properties = new Properties();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertEquals("value", cmd.getOptionValue("arg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_xxHR3_YorL0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_kQdC0_jftq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "desc");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_ZQoL1_iRGO0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "longOpt", true, "desc");
        String[] arguments = new String[]{"--longOpt", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_duwX3_MPcp0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "desc");
        String[] arguments = new String[]{"-r", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("r"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_kdmC1_leOl0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_YETa3_hxVa0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_rCGp3_ktyb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "desc");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_oBOj0_akbw0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_CZJk1_KVrT0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_mMiq2_pQuI0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "description");
        String[] arguments = new String[]{"-r", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("r"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_xQDu2_PQjX0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "requiredOpt", true, "description");
        String[] arguments = new String[]{"--requiredOpt", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("requiredOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withConcatenatedOptions_UIro2_yGtB0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "description");
        options.addOption("b", "description");
        String[] arguments = new String[]{"-ab"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertTrue(cmd.hasOption("a"));
            assertTrue(cmd.hasOption("b"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_YkZD1_wozt0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals("value", cmd.getOptionValue("longOpt"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withShortOption_DfHf0_ovxh0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] args = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, args, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_mUkF1_XrXG0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("alpha", "alpha", true, "alpha option");
        String[] args = new String[]{"--alpha=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, args, properties);
            assertEquals("value", cmd.getOptionValue("alpha"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_NJyJ3_uOsK0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] args = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, args, properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_JojG0_qlLg0() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_1_hqbs0_QVeQ0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_3_EOjm2_dsWn0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_4_XzId3_TYue0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_IetD0_yFza0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withJavaProperty_iSkY1_ZRMa0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "property", true, "description");
        String[] arguments = new String[]{"-p", "key=value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_yvhh3_TnRE0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a", "nonOption"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_lkjJ0_cWKS0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withoutProperties_LQNU1_zTaO0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[0]; // Initialize arguments array
        try {
            CommandLine cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_JZQY2_nKvE0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_cUUe3_PRGo0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        try {
            CommandLine cmd = parser.parse(options, arguments, null);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withoutProperties_fWCJ1_HkMb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[0]; // Initialize arguments array
        try {
            CommandLine cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_dcQA2_VFUu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_qpNa3_EuIu0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_haqN0_BRfo0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, new String[]{}, properties);
            assertNotNull(cmd);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_UQIA1_tFsq0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "true"}, null);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_rsip2_znfR0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "true"}, null);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_XQPb1_DgNr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wmrD3_wBpw0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value", "nonOption"}, null);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_OMcZ1_rzFs0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine cmd = parser.parse(options, arguments, properties);
            assertEquals(1, cmd.getOptions().length);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_ohBX0_Ginb0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        try {
            CommandLine cmd = parser.parse(options, new String[0], properties);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException was thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_AhBE1_KGRv0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        try {
            CommandLine cmd = parser.parse(options, new String[]{"-a", "value"}, null);
            assertEquals("value", cmd.getOptionValue("a"));
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_ExpectedOptsIsEmpty_ZDsv0_WmIK0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.parse(new Options(), new String[]{}, new Properties());
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_zVOS0_nMZr0() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties);
            assertNotNull(commandLine);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_UTvo6_fid1() {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        try {
            parser.parse(options, new String[]{"-x"}, new Properties());
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_viry1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "apple", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_NjHv3_1_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
    }
}