/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_lrey0() {
        Options options = new Options();
        List<Option> result = options.helpOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_UmQU0() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bXgz0() {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        assertTrue(options.getRequiredOptions().size() > 0);
        Option option = options.getOption("o");
        assertNotNull(option);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_XsiB0() {
        Options options = new Options();
        Collection<OptionGroup> result = options.getOptionGroups();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_TrDZ0() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(option, options.getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_DuplicateKey_ThrowsIllegalArgumentException_xbUL0() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        optionsToAdd.addOption(option);
        options.addOption(option);
        try {
            options.addOptions(optionsToAdd);
            assert false;
        } catch (IllegalArgumentException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_ReturnsOptions_SbMJ1() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        optionsToAdd.addOption(option);
        Options result = options.addOptions(optionsToAdd);
        assert result == options;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_EmptyOptionsToAdd_ReturnsOptions_sWSN2() {
        Options options = new Options();
        Options optionsToAdd = new Options();
        Options result = options.addOptions(optionsToAdd);
        assert result == options;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_mHSe0() {
        Options options = new Options();
        List<?> requiredOpts = options.getRequiredOptions();
        assertNotNull(requiredOpts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Opt_NotPresent_sjeV2() {
        Options options = new Options();
        assertFalse(options.hasOption("xyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bXgz0_1() {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        Option option = options.getOption("o");
        assertTrue(options.getRequiredOptions().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bXgz0_2() {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        Option option = options.getOption("o");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bXgz0_3() {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        Option option = options.getOption("o");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_zojG0_1() {
        Options options = new Options();
        Options result = options.addOption("opt", "description");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_zojG0_2() {
        Options options = new Options();
        Options result = options.addOption("opt", "description");
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_zojG0_3() {
        Options options = new Options();
        Options result = options.addOption("opt", "description");
        assertNotNull(options.getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_zojG0_4() {
        Options options = new Options();
        Options result = options.addOption("opt", "description");
        assertEquals("description", options.getOption("opt").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CbuR0_1() {
        Options options = new Options();
        options.addOption("opt", "description");
        Option option = options.getOption("opt");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CbuR0_3() {
        Options options = new Options();
        options.addOption("opt", "description");
        Option option = options.getOption("opt");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CbuR0_4() {
        Options options = new Options();
        options.addOption("opt", "description");
        Option option = options.getOption("opt");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_zflA0_KaFU0_1() {
        Options options = new Options();
        options.addOption("o", "option description");
        Option opt = options.getOption("o");
        assertNotNull(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_zflA0_KaFU0_2() {
        Options options = new Options();
        options.addOption("o", "option description");
        Option opt = options.getOption("o");
        assertEquals("o", opt.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_zflA0_KaFU0_3() {
        Options options = new Options();
        options.addOption("o", "option description");
        Option opt = options.getOption("o");
        assertEquals("option description", opt.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_zflA0_KaFU0_4() {
        Options options = new Options();
        options.addOption("o", "option description");
        Option opt = options.getOption("o");
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutLongOpt_DXNR1_Aocd0_1() {
        Options options = new Options();
        String opt = "o";
        options.addOption(opt, "description");
        assertEquals(opt, options.getOption(opt).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutLongOpt_DXNR1_Aocd0_2() {
        Options options = new Options();
        String opt = "o";
        options.addOption(opt, "description");
        assertFalse(options.hasLongOption(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutLongOpt_DXNR1_Aocd0_3() {
        Options options = new Options();
        String opt = "o";
        options.addOption(opt, "description");
        assertTrue(options.getRequiredOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_Ywrc2_GHUL0_1() {
        Options options = new Options();
        options.addOption("o", "description");
        Option opt = options.getOption("o");
        List<?> requiredOptions = options.getRequiredOptions();
        assertNotNull(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_Ywrc2_GHUL0_2() {
        Options options = new Options();
        options.addOption("o", "description");
        Option opt = options.getOption("o");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals("o", opt.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_Ywrc2_GHUL0_3() {
        Options options = new Options();
        options.addOption("o", "description");
        Option opt = options.getOption("o");
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_Ywrc2_GHUL0_4() {
        Options options = new Options();
        options.addOption("o", "description");
        Option opt = options.getOption("o");
        List<?> requiredOptions = options.getRequiredOptions();
        assertFalse(options.hasLongOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withOptionalArg_Ywrc2_GHUL0_5() {
        Options options = new Options();
        options.addOption("o", "description");
        Option opt = options.getOption("o");
        List<?> requiredOptions = options.getRequiredOptions();
        assertFalse(requiredOptions.contains("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_DVto3_rpNP0_1() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption("o", "description");
        assertEquals(opt, options.getOption(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_DVto3_rpNP0_2() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption("o", "description");
        assertFalse(options.hasLongOption(opt.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_required_cgZO0_YbkE0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option("opt", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_notRequired_iDgk1_RiLA0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        Option option = new Option("opt", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_BIHf0_QwLk0_1() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_BIHf0_QwLk0_3() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_BIHf0_QwLk0_4() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Option option = options.getOption("opt");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_ShortOpt_Present_Inev0_DawZ0() {
        Options options = new Options();
        options.addOption("a", "description");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_LongOpt_Present_UxtH1_tgiu0() {
        Options options = new Options();
        options.addOption("abc", "desc");
        assertTrue(options.hasOption("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_HjdW0_WINW0_5() {
        Options options = new Options();
        options.addOption("opt", "description");
        Option option = options.getOption("opt");
        assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qDry0_fid2() {
        Options options = new Options();
        String expected = "[ Options: [ short {} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_qtbk0_fid2() {
        Options options = new Options();
        Option option = new Option("option", "longOption", true, "description");
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withLongOpt_zflA0_KaFU0_5_fid2() {
        Options options = new Options();
        options.addOption("o", "option description");
        Option opt = options.getOption("o");
        assertTrue(options.getRequiredOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_DVto3_rpNP0_3_fid2() {
        Options options = new Options();
        Option opt = Option.builder("o").build();
        options.addOption("o", "description");
        assertTrue(((List<?>) options.getRequiredOptions()).isEmpty());
    }
}