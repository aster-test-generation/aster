/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.util.Date;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_aQmI0_1() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOptions().iterator().next();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_aQmI0_2() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOptions().iterator().next();
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_aQmI0_3() {
        String pattern = "a";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Option option = options.getOptions().iterator().next();
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_MultipleOptions_FcUG1_1() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Iterator<Option> iterator = options.getOptions().iterator();
        Option option1 = iterator.next();
        Option option2 = iterator.next();
        Option option3 = iterator.next();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_MultipleOptions_FcUG1_2() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Iterator<Option> iterator = options.getOptions().iterator();
        Option option1 = iterator.next();
        Option option2 = iterator.next();
        Option option3 = iterator.next();
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_MultipleOptions_FcUG1_3() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Iterator<Option> iterator = options.getOptions().iterator();
        Option option1 = iterator.next();
        Option option2 = iterator.next();
        Option option3 = iterator.next();
        assertEquals("a", option1.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_MultipleOptions_FcUG1_4() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Iterator<Option> iterator = options.getOptions().iterator();
        Option option1 = iterator.next();
        Option option2 = iterator.next();
        Option option3 = iterator.next();
        assertEquals("b", option2.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePattern_OptionBuilder_MultipleOptions_FcUG1_5() {
        String pattern = "abc";
        Options options = PatternOptionBuilder.parsePattern(pattern);
        Iterator<Option> iterator = options.getOptions().iterator();
        Option option1 = iterator.next();
        Option option2 = iterator.next();
        Option option3 = iterator.next();
        assertEquals("c", option3.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Percent_YrEA0() {
        char ch = '%';
        Class<?> expected = PatternOptionBuilder.NUMBER_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Plus_AjFe1() {
        char ch = '+';
        Class<?> expected = PatternOptionBuilder.CLASS_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Number_wpEk2() {
        char ch = '#';
        Class<?> expected = PatternOptionBuilder.DATE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_LessThan_YsWK3() {
        char ch = '<';
        Class<?> expected = PatternOptionBuilder.EXISTING_FILE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_GreaterThan_jLpB4() {
        char ch = '>';
        Class<?> expected = PatternOptionBuilder.FILE_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Asterisk_WzGr5() {
        char ch = '*';
        Class<?> expected = PatternOptionBuilder.FILES_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_ForwardSlash_bsoW6() {
        char ch = '/';
        Class<?> expected = PatternOptionBuilder.URL_VALUE;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueType_Default_EFMb7() {
        char ch = 'x';
        Class<?> expected = null;
        Class<?> actual = PatternOptionBuilder.getValueType(ch);
        assertEquals(expected, actual);
    }
}