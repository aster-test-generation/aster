/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_10_WeCU9() {
        CommandLine cmd = new CommandLine();
        String opt = null;
        String defaultValue = "default";
        try {
            cmd.getOptionValue(opt);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withValues_AFPd0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = {"value"};
        cmd.getOptionValues(option); // assume this sets the values
        String result = cmd.getOptionValue(option);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_10_WeCU9_fid1() {
        CommandLine cmd = new CommandLine();
        String opt = null;
        String defaultValue = "default";
        try {
            cmd.getParsedOptionValue(opt, defaultValue);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_jAfi0_fid1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_izfY0_fid1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_rvif0_fid1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_kbbq0_fid1() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_EtnV0_fid1() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withNonNullOptionValue_DHhD0_fid1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        Supplier<String> supplier = () -> defaultValue;
        String result = commandLine.getOptionValue(option, supplier);
        assertEquals("optionValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ECHO0_fid1() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('a');
            assertNotNull(result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withValues_AFPd0_fid1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = {"value"};
        cmd.getOptionValues(option); // assume this sets the values
        String result = cmd.getOptionValue(option);
        assert "value".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_SCdO0_UEFv0_fid3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        commandLine.addOption(option);
        assertEquals("option", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withMatchingOpt_Luvl0_ibwl0_1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(4);
        cmd.addOption(option);
        String[] values = {"key1", "value1", "key2", "value2"};
        for (int i = 0; i < values.length; i++) {
            option.addValue(values[i]);
        }
        Properties props = cmd.getOptionProperties("opt");
        assertEquals("value1", props.getProperty("key1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withMatchingOpt_Luvl0_ibwl0_2() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(4);
        cmd.addOption(option);
        String[] values = {"key1", "value1", "key2", "value2"};
        for (int i = 0; i < values.length; i++) {
            option.addValue(values[i]);
        }
        Properties props = cmd.getOptionProperties("opt");
        assertEquals("value2", props.getProperty("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withOddNumberOfValues_rnxU3_labq0_1() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(3);
        cmd.addOption(option);
        option.addValue("value1");
        option.addValue("key2");
        option.addValue("value3");
        cmd.getOptionValue(option);
        Properties props = cmd.getOptionProperties("opt");
        assertEquals("value1", props.getProperty("opt0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_withOddNumberOfValues_rnxU3_labq0_2() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(3);
        cmd.addOption(option);
        option.addValue("value1");
        option.addValue("key2");
        option.addValue("value3");
        cmd.getOptionValue(option);
        Properties props = cmd.getOptionProperties("opt");
        assertEquals("key2", props.getProperty("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_MatchingOption_UrtV2_CdpO0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        cmd.addOption(option);
        option.addValue("value1");
        option.addValue("value2");
        String result = cmd.getOptionValue(option);
        assertEquals("value1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_MultipleMatchingOptions_LEms3_cFpG0() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.addValue("value1");
        option.addValue("value2");
        cmd.addOption(option);
        String result = cmd.getOptionValue(option);
        assertEquals("value1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue1_ZmXO0_IzPo0_fid3() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        try {
            String result = cmd.getOptionValue(option);
            assertNotNull(result);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue7_UFLb6_rwHR0_fid3() {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String defaultValue = "default";
        try {
            String result = cmd.getOptionValue(option);
            assertNotNull(result);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_rNZK0_FkqP0_fid3() {
        CommandLine commandLine = new CommandLine();
        try {
            String result = commandLine.getOptionValue(new Option("a", "a", true, "description"));
            assertNotNull(result);
        } catch (Exception e) {
            fail("Exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_FBfw0_gHZM0_fid3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = null;
        Object result = null;
        try {
            result = commandLine.getOptionValue(option);
        } catch (Exception e) {
        }
        assertNotNull(result);
    }
}