/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    private void printWrapped(final PrintWriter pw, final int width, final int start, final String text) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_dJOo3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_lEvF0() {
        HelpFormatter helpFormatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_nJbm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_DblF2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a single word";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText4_QGdT3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_LXQm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_JfrL1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_TkbS2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_evRx3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 10;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_IvOV4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 11;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_hTMC5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 11;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_BAVc6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 11;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_QHff7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 5;
        int startPos = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_FNGP9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_OCVQ10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 5;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_Bktb11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp4_roGT3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "", options, 2, 5, "", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp5_YLlr4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp6_vVIr5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "", options, 2, 5, "footer", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp7_eCOf6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp8_YLkH7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printHelp(pw, 80, "", "header", options, 2, 5, "footer", true);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_cSwd0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_aDPF0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_svjW0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_Wpal0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_lZGN1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_yzKL2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions4_XZft3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions5_igBB4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions6_yhVW5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", null, true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions7_LaeW6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", null, false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions8_EVye7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", null, true, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions9_bWyS8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", null, false, null);
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions10_uvZK9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_CmmT0() {
        HelpFormatter.Builder builder = HelpFormatter.builder();
        assertNotNull(builder.get());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_xMJN0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("-");
        assertEquals("-", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_qBms0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(74, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_sczW0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("arg", helpFormatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_RhZG0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> comparator = helpFormatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_qwxH0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_LnZX1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_aJMc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("--", helpFormatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNullString_YwdK0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimEmptyString_KvAu1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNoWhitespace_dRgr2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NSIm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_yUzK0_iWWi0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter stringWriter = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(stringWriter);
        helpFormatter.printWrapped(pw, 10, "This is a test string");
        pw.flush();
        assertEquals("This is a\ntest\nstring\n", stringWriter.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_YaWO0_jtBc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printWrapped(pw, 10, "text");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void printWrapped(final PrintWriter pw, final int width, final String text)
    {
        printWrapped(pw, width, 0, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_ylmi0_SsBa0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter stringWriter = new java.io.StringWriter();
        java.io.PrintWriter printWriter = new java.io.PrintWriter(stringWriter);
        helpFormatter.printWrapped(printWriter, 80, "Usage: java MyClass");
        printWriter.flush();
        assertEquals("Usage: java MyClass", stringWriter.toString().trim());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_JdGP0_REbp0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printWrapped(pw, 10, "text");
        pw.flush();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_HJSJ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_pkxd01() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer");
        pw.flush();
        pw.close();
        assertTrue(true);
    }

}