/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_bBFv0() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_Izdo1() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-a", "value", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_DnTH2() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a", "value", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_hAuR3() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"--", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"--", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_IXBt4() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a=value", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_KECh5() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_eLrz6() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-ab", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "b", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_FehW7() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-a", "-b", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "-b", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_bVNQ8() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a", "value", "-b", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "-b", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_ajSu9() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "description");
        String[] arguments = new String[]{"-a", "value", "--", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "--", "file"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_kvhE10() {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", true, "description");
        String[] arguments = new String[]{"-a=value", "--", "file"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-a", "value", "--", "file"}, result);
    }
}