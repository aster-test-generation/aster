/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Objects;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_ndGk0() {
        Option option = new Option("option", true, "description");
        boolean result = option.acceptsArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_Class_LmvK0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_yUUJ0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void setArgCount(Option option, int argCount) {
        try {
            java.lang.reflect.Field field = Option.class.getDeclaredField("argCount");
            field.setAccessible(true);
            field.setInt(option, argCount);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_OptionNotNull_yQta0() {
        Option option = new Option("o", "longOption", true, "description");
        String key = option.getKey();
        assert key.equals("o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_OptionNull_biri1() {
        Option option = new Option(null, "longOption", true, "description");
        String key = option.getKey();
        assert key.equals("longOption");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_GZbU1() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clonedOption = option.clone();
        assertNotSame(option, clonedOption);
        assertEquals(option.getClass(), clonedOption.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withSpace_yZaP1() {
        Option option = new Option("o", "longOption", true, "description");
        String actual = option.toString();
        assert actual.contains(" ");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_mzON0() {
        Option option = new Option("o", "longOption", true, "description");
        int expectedHashCode = Objects.hash("longOption", "o");
        assertEquals(expectedHashCode, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withoutLongOption_mJfn2() {
        Option option = new Option("o", true, "description");
        int expectedHashCode = Objects.hash(null, "o");
        assertEquals(expectedHashCode, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_withOnlyOption_MbCQ3() {
        Option option = new Option("o", "description");
        int expectedHashCode = Objects.hash(null, "o");
        assertEquals(expectedHashCode, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NotDeprecated_kaXw0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        String result = option.toDeprecatedString();
        assert(result.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_GZbU1_1() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clonedOption = option.clone();
        assertNotSame(option, clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_NormalFlow_GZbU1_2() throws CloneNotSupportedException {
        Option option = new Option("option", "longOption", true, "description");
        Object clonedOption = option.clone();
        assertEquals(option.getClass(), clonedOption.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withArgCountGreaterThanZero_ineG0_ORol0() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArg();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_withArgCountEqualToUNLIMITED_VALUES_HCgF1_qMBP0() {
        Option option = new Option("option", true, "description");
        ((org.apache.commons.cli.Option) option).setArgs(Option.UNLIMITED_VALUES);
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_ArgNameNull_HblY1_Kbvh0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
        assert (!result); // assert that hasArgName returns false as argName is not set
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_HasValueSeparator_True_aWKF0_iCgC0() {
        Option option = new Option("option", true, "description");
        org.apache.commons.cli.Option apacheOption = (org.apache.commons.cli.Option) option;
        apacheOption.setArgs(2);
        option.processValue("value1,value2");
        assertEquals(2, apacheOption.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_FinalAdd_IFoD8_psSm0() {
        Option option = new Option("option", true, "description");
        ((org.apache.commons.cli.Option) option).setArgs(1);
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_WhenConverterIsNull_ReturnsDefaultConverter_ewif0_Erbo0() {
        Option option = new Option("option", "description");
        assert option.getConverter() != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OptionalArg_ULLm0_XzKp0() {
        Option option = new Option("o", true, "description");
        org.apache.commons.cli.Option apacheOption = (org.apache.commons.cli.Option) option;
        apacheOption.setOptionalArg(true);
        boolean result = option.requiresArg();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_UnlimitedValues_NotEmpty_klZj3_ijYP0() {
        Option option = new Option("o", true, "description");
        boolean result = option.requiresArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_ArgNameEmpty_RLiH2_vuiw0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
    }
}