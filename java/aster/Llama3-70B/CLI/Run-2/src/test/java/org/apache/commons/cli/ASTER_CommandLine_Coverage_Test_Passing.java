/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    private CommandLine commandLine;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_withNullOption_andNullDefaultValue_uTsj0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = null;
        assertNull(commandLine.getParsedOptionValue(option, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_withNullOption_andNonNullDefaultValue_NMWZ1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        assertEquals("default", commandLine.getParsedOptionValue(option, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_GEbd0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_NonDeprecatedOption_fdDK1_PRjK0() throws ParseException {
        Option option = mock(Option.class);
        when(option.isDeprecated()).thenReturn(false);
        when(option.getOpt()).thenReturn("opt");
        CommandLine commandLine = new CommandLine() {
            protected Option resolveOption(String opt) {
                return option;
            }
        };
        String[] values = new String[]{"value"};
        when(commandLine.getOptionValues(option)).thenReturn(values);
        Object result = commandLine.getOptionValue(option);
        assertNotNull(result);
    }

    @Test
    public void testGetOptionValue_ReturnsNull_urXk0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "opt", false, "description");
        assertNull(commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_WithNullOption_EJRl0_nTaR0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test", true, "test");
        assertNull(commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_JtQa0() throws org.apache.commons.cli.ParseException {
        commandLine = new CommandLine() {
        };
    }
}