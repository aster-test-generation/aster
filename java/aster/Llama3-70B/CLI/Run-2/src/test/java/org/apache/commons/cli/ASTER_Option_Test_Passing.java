/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs1_RXov0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription1_ykzU0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription2_ljhr1() {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription3_SEIT2() {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_eSbG0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withLongOption_XwJt0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withoutLongOption_acCA1() {
        Option option = new Option("o", true, "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_withoutLongOptionAndHasArg_HbZe2() {
        Option option = new Option("o", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_nvEL0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withIndex_OutOfBounds_jLnj1() {
        Option option = new Option("option", "description");
        assertNull(option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameObject_Rkbi0() {
        Option option = new Option("a", "longA", true, "desc");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentClass_ORiA1() {
        Object obj = new Object();
        Option option = new Option("a", "longA", true, "desc");
        assertFalse(option.equals(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameValues_uQNz2() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("a", "longA", true, "desc");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentOption_RnHN3() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("b", "longB", true, "desc");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLongOption_wncl4() {
        Option option1 = new Option("a", "longA", true, "desc");
        Option option2 = new Option("a", "longB", true, "desc");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg1_FJCr0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg2_unNL1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_eEVR2() {
        Option option = new Option("option", "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg4_SGKo3() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg5_AteC4() {
        Option option = new Option("option", false, "description");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_NotDeprecated_EJsG0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs3_swTr2() {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_UuOo0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_ArgCountUninitialized_QglC2() {
        Option option = new Option("o", "description");
        try {
            option.processValue("value");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt1_iCVo0() {
        Option option = new Option("opt", "longOpt", true, "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt2_ppnP1() {
        Option option = new Option("opt", true, "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt3_oyBG2() {
        Option option = new Option("opt", "desc");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_false_YGir1() {
        Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_eIas0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId1_HAPi0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId2_GzpJ1() {
        Option option = new Option("b", true, "description");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId3_Reiw2() {
        Option option = new Option("c", "description");
        assertEquals('c', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_noValues_hSVW1() {
        Option option = new Option("option", "description");
        String[] values = option.getValues();
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOptionLongOptionHasArgDescription_Nwkl0() {
        Option option = new Option("option", "longOption", true, "description");
        assertNotNull(option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOptionHasArgDescription_VkMh1() {
        Option option = new Option("option", true, "description");
        assertNotNull(option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_withOptionDescription_pnsP2() {
        Option option = new Option("option", "description");
        assertNotNull(option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withOption_SSNM0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("o", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withoutOption_hiOJ1() {
        Option option = new Option("longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withLongOption_sxuE0() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOpt_withoutLongOption_LCym1() {
        Option option = new Option("o", true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withArg_PJJJ0() {
        Option option = new Option("o", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withoutArg_PVXC1() {
        Option option = new Option("o", "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_withLongOption_SsnN2() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_KvsR0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator(',');
        assertEquals(',', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_noValues_nAUE1() {
        Option option = new Option("option", "description");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList1_QNBC0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList2_UDGu1() {
        Option option = new Option("option", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList3_DCnj2() {
        Option option = new Option("option", "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_withoutDeprecatedOption_Rfhl1() {
        Option option = new Option("o", "description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_AcceptsArg_eXQl2() {
        Option option = new Option("option", true, "description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withOptionalArg_IoHL0() {
        Option option = new Option("o", "longOption", true, "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withoutOptionalArg_JGqP1() {
        Option option = new Option("o", "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withoutArg_rZhO1() {
        Option option = new Option("o", false, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_noArgDescription_xLDf2() {
        Option option = new Option("o", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withDefaultValue_dCTJ0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withEmptyDefaultValue_kRVZ2() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withNoArgConstructor_OTOg3() {
        Option option = new Option("option", "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withHasArgConstructor_QFPh4() {
        Option option = new Option("option", true, "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withLongOptionConstructor_Jiib5() {
        Option option = new Option("option", "longOption", false, "description");
        String result = option.getValue("default");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_1_Kwjk0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_2_ZwuV1() {
        Option option = new Option("option", true, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_3_EriK2() {
        Option option = new Option("option", "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_GrTB0() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.addValue("value");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Vmoo0_AzEm0_1() {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals("option", clonedOption.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Vmoo0_AzEm0_2() {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals("longOption", clonedOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Vmoo0_AzEm0_3() {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(true, clonedOption.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Vmoo0_AzEm0_4() {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals("description", clonedOption.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_ArgCountInitialized_HasValueSeparator_pZUP0_zlhh0() {
        Option option = new Option("o", "longOption", true, "description");
        List<String> values = new ArrayList<>();
        try {
            option.addValue("value1");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
        try {
            option.addValue("value2");
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_ArgCountInitialized_NoValueSeparator_noyy1_qqav0() {
        Option option = new Option("o", true, "description");
        List<String> values = new ArrayList<>();
        option.processValue("value");
        values.add("value");
        assertEquals(1, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_SingleValue_toSZ4_dXpr0() {
        Option option = new Option("o", true, "description");
        try {
            option.addValue("value");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_hpES0_hyKq0() {
        Option option = new Option("option", "longOption", true, "description");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_hpES0_QRBo1() {
        Option option = new Option("option", "longOption", true, "description");
        assertNotNull(option);
        try {
            option.addValue("value");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClearValues2_WqtR1_eSQA0() {
        Option option = new Option("option", true, "description");
        List<String> values = new ArrayList<>();
        option.clearValues();
        assertEquals(0, values.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt_zKdr0_aOZV0() {
        Option option = new Option("o", "longOption", true, "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withNullValue_MwLs6_rklM0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue("default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withDefaultValueNull_AwoY9_LDWf0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getValue(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withDefaultValueNull_AwoY9_gzqD1() {
        Option option = new Option("option", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs2_ZsEO1_fid1() {
        Option option = new Option("option", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs3_ifOY2_fid1() {
        Option option = new Option("option", "description");
        assertEquals(-1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_dEmq0_fid1() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("[ Option o longOption [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_wjcq1_fid1() {
        Option option = new Option("o", true, "description");
        assertEquals("[ Option o [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_uSIn2_fid1() {
        Option option = new Option("o", "description");
        assertEquals("[ Option o :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_JWWO3_fid1() {
        Option option = new Option("o", "longOption", false, "description");
        assertEquals("[ Option o longOption :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_Jemn4_fid1() {
        Option option = new Option("o", false, "description");
        assertEquals("[ Option o :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator1_wZSL0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_qwwr1() {
        Option option = new Option("option", true, "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_UESe2() {
        Option option = new Option("option", "description");
        char result = option.getValueSeparator();
        assertEquals(' ', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs1_iDLl0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs2_NZHK1_fid1() {
        Option option = new Option("option", true, "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_true_Qups0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName1_JSnW0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName2_jJXz1_fid1() {
        Option option = new Option("option", true, "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName3_mIaQ2_fid1() {
        Option option = new Option("option", "description");
        assertNull(option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OptionalArg_lEYJ0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_withOptionalArgAndNoLongOption_bsan2_fid1() {
        Option option = new Option("o", true, "description");
        assertFalse(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_withArg_YWoY0_fid1() {
        Option option = new Option("o", "longOption", true, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_withIndex_yhDe0_TvOD0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        try {
            option.addValue("value1");
        } catch (UnsupportedOperationException e) {
        }
        assertNull(option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_Deprecated_lYnU1_iSvB0_fid1() {
        Option option = new Option("opt", "longOpt", true, "desc");
        assertEquals("[ Option opt longOpt [ARG] :: desc :: class java.lang.String ]", option.toString());
    }
}