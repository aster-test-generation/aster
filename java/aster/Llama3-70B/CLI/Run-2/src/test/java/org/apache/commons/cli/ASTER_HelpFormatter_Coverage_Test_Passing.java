/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedWithinWidth_dBjD0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int expected = 6;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_TabWithinWidth_LHJo1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int expected = 6;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_SpaceWithinWidth_szrH2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EndOfString_gRmw3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNullOpt_SrrK1_AjFI0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withOptionComparator_JMdT0_dqWA0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withEmptyArgName_CeJS3_WiGQ0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        option.setArgName("");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("option")); // Check if the option is rendered correctly
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withArgName_KCuE4_AlBp0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        String result = sb.toString();
        assertTrue(result.contains("argName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_SingleLine_zKjf1_fxva0_fid2() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a single";
        helpFormatter.printWrapped(printWriter, 20, text);
        printWriter.flush();
        String expected = "This is a single\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withShortOption_HRuJ0_FLBF0_fid2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "alpha option");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app -a <alpha> ";
        String actual = writer.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNullOptions_gHRT9_qlIS0_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        try {
            formatter.renderOptions(sb, 80, null, 2, 5);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNullOptions_gHRT9_wYWr1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertEquals("", sb.toString());
    }
}