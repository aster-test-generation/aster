/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithType_zBqr0() {
        Object newType = String.class;
        OptionBuilder optionBuilder = OptionBuilder.withType(newType);
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_ReturnInstance_OSrC1() {
        OptionBuilder optionBuilder = OptionBuilder.hasArgs();
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithDescription_ReturnInstance_BzzW1_Rbop0() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertSame(OptionBuilder.isRequired(true), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_ReturnsInstance_hzaA1_zMID1_1() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_ReturnsInstance_hzaA1_zMID1_2() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertSame(result, OptionBuilder.isRequired(false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator_ReturnsInstance_IxRL1_RcXw0() {
        OptionBuilder instance = OptionBuilder.withValueSeparator();
        assertNotNull(instance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_optionalArg_HoQO1_Bxyh0() {
        OptionBuilder optionBuilder = OptionBuilder.hasOptionalArg();
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs_ReturnInstance_Fory2_Ntax0() {
        OptionBuilder optionBuilder = OptionBuilder.hasOptionalArgs();
        assertNotNull(optionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_ReturnInstance_qMLQ1_lBGY1_2() {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertTrue(result instanceof OptionBuilder);
    }
}