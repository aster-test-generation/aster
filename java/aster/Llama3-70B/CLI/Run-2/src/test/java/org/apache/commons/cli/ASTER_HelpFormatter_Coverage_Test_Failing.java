/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_Coverage_TQFP0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a very long text that needs to be wrapped";
        int width = 10;
        int nextLineTabStop = 5;
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expectedResult = "This is a\n     very\n     long\n     text\n     that\n     needs\n     to be\n     wrapped";
        assertEquals(expectedResult, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_EmptyText_UWmt2_mpkg0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "";
        helpFormatter.printWrapped(printWriter, 20, text);
        printWriter.flush();
        String expected = "";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_MultiLine_HzJY0_Agxy0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a multi-line text.\nThis is the second line.";
        helpFormatter.printWrapped(printWriter, 20, text);
        String expected = "This is a multi-line\n    text.\n    This is the\n    second line.\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withLongOption_jVQp1_jXlS0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "alpha", true, "alpha option");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        java.io.PrintWriter pw = new java.io.PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app --alpha <alpha>";
        String actual = writer.toString();
        assert actual.contains(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_SingleLine_zKjf1_fxva0() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a single line text.";
        helpFormatter.printWrapped(printWriter, 20, text);
        printWriter.flush();
        String expected = "This is a single line text.\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withLongOptSeparator_WcJL3_Fnoi0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "alpha", true, "alpha option");
        option.setArgName("arg");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app --alpha=<arg>";
        String actual = writer.toString();
        assert actual.contains(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withShortOption_HRuJ0_FLBF0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "alpha option");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app -a <alpha> ";
        String actual = writer.toString();
        assert actual.contains(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withArgument_uMPb2_ytuX0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "alpha option");
        option.setArgName("arg");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        java.io.PrintWriter pw = new java.io.PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app -a <arg> ";
        String actual = writer.toString();
        assert actual.contains(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNullOptions_gHRT9_qlIS0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, null, 2, 5);
        assertTrue(sb.toString().isEmpty()); // Assert that the string buffer is empty
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNullOptions_gHRT9_wYWr1() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, null, 2, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_withNoOptions_guJR8_NTAN0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertEquals("Expected no options to be rendered", "", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_MultiLine_HzJY0_Agxy0_fid2() throws IOException {
        HelpFormatter helpFormatter = new HelpFormatter();
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        String text = "This is a multi-line text.\nThis is the second line.";
        helpFormatter.printWrapped(printWriter, 20, text);
        String expected = "This is a multi-line\n    text. This is the\n    second line.\n";
        assertEquals(expected, writer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withLongOption_jVQp1_jXlS0_fid2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "alpha", true, "alpha option");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        java.io.PrintWriter pw = new java.io.PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app --alpha <alpha>";
        String actual = writer.toString();
        assertEquals(true, actual.contains(expected));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withLongOptSeparator_WcJL3_Fnoi0_fid2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "alpha", true, "alpha option");
        option.setArgName("arg");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        PrintWriter pw = new PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String expected = "Usage: app --alpha=<arg>";
        String actual = writer.toString();
        assertEquals(true, actual.contains(expected));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withArgument_uMPb2_ytuX0_fid2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "alpha option");
        option.setArgName("arg");
        options.addOption(option);
        java.io.StringWriter writer = new java.io.StringWriter();
        java.io.PrintWriter pw = new java.io.PrintWriter(writer);
        helpFormatter.printUsage(pw, 80, "app", options);
        pw.flush();
        String actual = writer.toString();
        assertTrue(actual.contains("Usage: app -a <arg> "));
    }
}