/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_pEHn7() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa", "--bb", "c"};
        boolean stopAtNonOption = true;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            // Expected
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_wOOq8() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa=b", "--bb", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Unexpected ParseException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_nRyf0_iiGH0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_ARQT1_SxuO0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_ddvm2_Lksf0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha=value"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_aANV3_Eywn0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_TYPV4_Eyux0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_dwou5_lsdy0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_AERt6_zNBj0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_EpmA7_JUww0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "--", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "--", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_iMgt8_gWzE0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "--", "nonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "--", "nonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_pYHw9_gCvW0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption", "--", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"-a", "value", "nonOption", "--", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_Cysk10_nHXS0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value", "nonOption", "--", "anotherNonOption"};
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertArrayEquals(new String[]{"--alpha", "value", "nonOption", "--", "anotherNonOption"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_nNbp0_ICDb0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_ltEk1_ZvQV0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--longA", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_sdSH2_OFec0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_ZKOK4_wlZX0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-", "--", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_TrLa5_ytVH0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA=value", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--longA", "value", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_mAdl6_pCtA0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = false;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-a", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_TIty7_fXgw0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"--longA", "b", "c"};
        boolean stopAtNonOption = false;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--longA", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_tLkN8_kPve0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "longA", true, "description");
        String[] arguments = new String[]{"-a", "b", "c", "--longA"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"-a", "b", "c", "--longA"}, result);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_emXl1_CwQV0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--aa", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown, but got: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_aqwF2_EwxB0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa=b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertArrayEquals(new String[]{"--aa", "b", "c"}, result);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_egpf3_zWwu0() {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-a", "b", "c"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("ParseException was thrown: " + e.getMessage());
        }
    }
}