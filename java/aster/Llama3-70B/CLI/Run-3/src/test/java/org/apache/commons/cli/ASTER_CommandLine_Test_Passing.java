/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    CommandLine commandline;
    Supplier<String> defaultValueSupplier;
    private CommandLine commandLineMock;
    ParseException parseException;
    CommandLine commandlineSpy;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_LACg0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_XWqg0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_igUd0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String result = cmd.getOptionValue(option, defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_pWSC0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_yJkO0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "testOpt";
        String defaultValue = "testDefaultValue";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_zQok0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue('a', defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_pdfU0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_WHLd0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_yHKv0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_SiJo0() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.hasOption('a');
        assertTrue(commandLine.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_withNullOption_QWsJ0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_qMdS0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_fbmv0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Object defaultValue = null;
        Object result = commandLine.getParsedOptionValue(option);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_fjAy0() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_eifA0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_ZoFa0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue('a', defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_null_AmWj2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        try {
            commandLine.getParsedOptionValue("opt", defaultValue);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_grpO0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Object result = commandLine.getParsedOptionValue(opt);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withNullValue_uNPl1() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        String defaultValue = "default";
        Supplier<String> supplier = () -> defaultValue;
        String result = cmd.getOptionValue(option, supplier);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_JvRS0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("test", "test", true, "description");
        Properties props = cmd.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_nFdS0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "testOpt";
        String[] expected = new String[]{"value1", "value2"};
        String[] actual = commandLine.getOptionValues(opt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withValues_BxnR0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "desc");
        option.setArgs(1);
        String[] values = {"value"};
        cmd.getOptionValues(option); // assume this method sets the values
        String result = cmd.getOptionValue(option);
        assert "value".equals(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withoutValues_UAFi1() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("opt", "desc");
        String result = cmd.getOptionValue(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesNullOption_qSEs0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = null;
        String[] result = cmd.getOptionValues(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesNoMatchingOption_HpZB1() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("test", "test", true, "test");
        String[] result = cmd.getOptionValues(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_1_Rnlk0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String result = (String) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_2_UmzU1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        Integer defaultValue = 10;
        Integer result = (Integer) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_3_WFTZ2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        Boolean defaultValue = true;
        Boolean result = (Boolean) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_4_tyTJ3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = " ";
        Long defaultValue = 100L;
        Long result = (Long) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_5_kMDw4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Float defaultValue = 10.5f;
        Float result = (Float) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_6_JqjZ5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Double defaultValue = 10.5;
        Double result = (Double) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_7_aosu6() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Character defaultValue = 'a';
        Character result = (Character) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_8_INQw7() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Byte defaultValue = 10;
        Byte result = (Byte) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_9_URkV8() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Short defaultValue = 10;
        Short result = (Short) commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_10_PZem9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_1_yEaY0() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", "longOption", true, "description");
        String defaultValue = "default";
        String result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_2_ANEx1() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", true, "description");
        Integer defaultValue = 10;
        Integer result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_3_rxAr2() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", "description");
        Boolean defaultValue = true;
        Boolean result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_7_Dpju6() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", "longOption", true, "description");
        option.setArgs(1);
        String defaultValue = "default";
        String result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_8_lIaR7() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", true, "description");
        option.setArgs(1);
        Integer defaultValue = 10;
        Integer result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_9_CqOm8() throws Exception {
        CommandLine cmd = new CommandLine();
        Option option = new Option("o", "description");
        option.setArgs(1);
        Boolean defaultValue = true;
        Boolean result = cmd.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_CharDefaultValue_Uwze0() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String result = cmd.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_CharNullDefaultValue_dYdb1() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'b';
        String defaultValue = null;
        String result = cmd.getParsedOptionValue(opt, defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IntDefaultValue_vUwE2() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'c';
        Integer defaultValue = 10;
        Integer result = cmd.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_IntNullDefaultValue_RRVF3() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'd';
        Integer defaultValue = null;
        Integer result = cmd.getParsedOptionValue(opt, defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LongDefaultValue_JjFX4() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'e';
        Long defaultValue = 10L;
        Long result = cmd.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_LongNullDefaultValue_yeZR5() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'f';
        Long defaultValue = null;
        Long result = cmd.getParsedOptionValue(opt, defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_FloatDefaultValue_WYvn6() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'g';
        Float defaultValue = 10.0f;
        Float result = cmd.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result, 0.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_FloatNullDefaultValue_BedL7() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'h';
        Float defaultValue = null;
        Float result = cmd.getParsedOptionValue(opt, defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_DoubleDefaultValue_yBKQ8() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'i';
        Double defaultValue = 10.0;
        Double result = cmd.getParsedOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_DoubleNullDefaultValue_wsgL9() throws ParseException {
        CommandLine cmd = new CommandLine();
        char opt = 'j';
        Double defaultValue = null;
        Double result = cmd.getParsedOptionValue(opt, defaultValue);
        assertNull(result);
    }
}