/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_YKpx0() throws Exception {
        String result = OptionValidator.validate(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_UXHj1() throws Exception {
        try {
            OptionValidator.validate("");
            fail();
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_vDuh2() throws Exception {
        try {
            OptionValidator.validate("$option");
            fail();
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name '$'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidMiddleChar_mNDF3() throws Exception {
        try {
            OptionValidator.validate("opt$ion");
            fail();
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_jtgN4() throws Exception {
        String result = OptionValidator.validate("option");
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithAdditionalChars_PwvH5() throws Exception {
        String result = OptionValidator.validate("opt-ion");
        assertEquals("opt-ion", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithJavaIdentifierPart_BhWl6() throws Exception {
        String result = OptionValidator.validate("opt_ion");
        assertEquals("opt_ion", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_RPXD2() throws Exception {
        try {
            OptionValidator.validate("1option");
            fail();
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name '1'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidLongOption_LZpB5() throws Exception {
        String result = OptionValidator.validate("veryLongOptionName");
        assertEquals("veryLongOptionName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithAdditionalLongChar_xrVK6() throws Exception {
        String result = OptionValidator.validate("option_");
        assertEquals("option_", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_cRgI1() throws Exception {
        try {
            OptionValidator.validate("");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_TclS2() throws Exception {
        try {
            OptionValidator.validate("1option");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name '1'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidMiddleChar_nQyx3() throws Exception {
        try {
            OptionValidator.validate("opt!ion");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithAdditionalChars_xgKY5() throws Exception {
        String result = OptionValidator.validate("opt$ion");
        assertEquals("opt$ion", result);
    }
}