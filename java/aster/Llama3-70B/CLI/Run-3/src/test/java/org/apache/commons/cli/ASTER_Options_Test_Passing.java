/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    private Option option;
    private Options options;
    private Map<String, OptionGroup> optionGroups = new LinkedHashMap<>();
    private OptionGroup optionGroup;
    private List<Object> requiredOpts = new ArrayList<>();
    private Map<String, Option> longOpts = new LinkedHashMap<>();
    private Map<String, Option> shortOpts = new LinkedHashMap<>();
    Options optionsToBeAdded;
    Option option1;
    Option option2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_PXLg0() throws Exception {
        Options options = new Options();
        Option opt = Option.builder("option").build();
        OptionGroup optionGroup = options.getOptionGroup(opt);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_iMXy0() throws Exception {
        Options options = new Options();
        List<Option> result = options.helpOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iTfe0() throws Exception {
        Options options = new Options();
        String expected = "[ Options: [ short [] ] [ long null ]]";
        String actual = options.toString();
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_nGPM0() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_AzuH0_1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_AzuH0_2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        assertTrue(options.getOption("o").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_AzuH0_3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        assertTrue(options.getRequiredOptions().contains(options.getOption("o")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_noOpt_zFsE2() throws Exception {
        Options options = new Options();
        assertFalse(options.hasOption("xyz"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_qfNO0() throws Exception {
        Options options = new Options();
        Collection<OptionGroup> result = options.getOptionGroups();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_LSob0_1() throws Exception {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption("opt", "longOpt", true, "description");
        assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_LSob0_2() throws Exception {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(option, options.getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_CfuG0_1() throws Exception {
        Options options = new Options();
        List<?> requiredOpts = options.getRequiredOptions();
        assertNotNull(requiredOpts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_CfuG0_2() throws Exception {
        Options options = new Options();
        List<?> requiredOpts = options.getRequiredOptions();
        assertTrue(requiredOpts instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_NoMatch_Nycf2() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("nonexistent");
        assertEquals(Collections.emptyList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_NullInput_hJvf3() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions(null);
        assertEquals(Collections.emptyList(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_Vpta3_1() throws Exception {
        Options options = new Options();
        Option opt = Option.builder("option").build();
        options.addOption(opt);
        assertEquals(opt, options.getOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_withoutOptionalArg_Vpta3_2() throws Exception {
        Options options = new Options();
        Option opt = Option.builder("option").build();
        options.addOption(opt);
        assertFalse(options.getOption("option").hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_DuplicateKey_ThrowsIllegalArgumentException_fgab0() throws Exception {
        Options options = new Options();
        Option opt = new Option("key", "longOpt", true, "description");
        options.addOption(opt);
        Options options2 = new Options();
        options2.addOption(opt);
        try {
            options.addOptions(options2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NoDuplicateKey_ReturnsThis_SHhx1() throws Exception {
        Options options = new Options();
        Option opt = new Option("key", "longOpt", true, "description");
        options.addOption(opt);
        Options options2 = new Options();
        Option opt2 = new Option("key2", "longOpt2", true, "description2");
        options2.addOption(opt2);
        Options result = options.addOptions(options2);
        assertSame(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NullOptions_ThrowsNullPointerException_aVpr2() throws Exception {
        Options options = new Options();
        try {
            options.addOptions(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNotNull(e.getMessage());
        }
    }
}