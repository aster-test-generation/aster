/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_fGEc0() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_lVNB1() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_PsJA2() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_rZAq3() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"--alpha"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_ZAtv4() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"--alpha", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_PFqI5() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-a", "-b"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "--beta"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_MIIb6() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_wmjX7() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a", "nonOption"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_yfXM8() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        String[] arguments = new String[]{"-a", "nonOption"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "nonOption"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_Uhsm9() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        String[] arguments = new String[]{"-ab"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "--beta"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_fvIC3() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"--alpha"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_iFIL4() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"--alpha", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--alpha", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_uzVh5() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_zjDh6() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_RLTM7() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"-b"};
        boolean stopAtNonOption = false;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_GOpx8() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "-b"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "-b"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_PfYC9() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        String[] arguments = new String[]{"-a", "--beta"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "--beta"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_qagA10() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        String[] arguments = new String[]{"--"};
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_LdxD1() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"-a"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_dlxD2() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"--aa"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--aa"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_aChC3() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"--aa", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--aa", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_epZy4() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"-", "arg"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-", "arg"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_snuf5() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"--", "arg"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--", "arg"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_cDHS6() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"-a", "arg"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "arg"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_wKPE7() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", true, "desc");
        String[] arguments = new String[]{"-a", "value"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_zoaM8() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        String[] arguments = new String[]{"-b"};
        boolean stopAtNonOption = false;
        try {
            posixParser.flatten(options, arguments, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_udQX9() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        options.addOption("a", "aa", false, "desc");
        options.addOption("b", "bb", false, "desc");
        String[] arguments = new String[]{"-a", "-b"};
        boolean stopAtNonOption = false;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-a", "-b"}, result);
    }
}