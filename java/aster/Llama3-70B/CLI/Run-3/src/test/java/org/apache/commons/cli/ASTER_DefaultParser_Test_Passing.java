/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    private Properties properties;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qWnC0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = parser.parse(options, arguments);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_ExpectedOptsIsEmpty_bUOi0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_Mhlk0() throws Exception {
        String token = "=";
        int result = DefaultParser.indexOfEqual(token);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_bKEr0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = parser.parse(options, arguments, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_htSU0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_htSU0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_fvKs0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_jQdh1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = {"-a", "value", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_BBCd2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_NSzn0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_NSzn0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_edUU1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_edUU1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withNegativeNumber_HFrO2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "-1"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withNegativeNumber_HFrO2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "-1"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("-1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownToken_aLpH3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_ywxE0() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("optionA", "value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withoutProperties_sxHp1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[]{};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_IXue2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value", "nonOption"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_KPlX3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_TGAf0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_TGAf0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_vMGe1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_vMGe1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_aRvK2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_aRvK2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_KxDD3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_KxDD3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_frmz0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_JXMC1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.put("a", "value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_ySYa2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_FpkG3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_FpkG3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_FpkG3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_WFal0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_PlPS1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.put("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_gmoc2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "--", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_gmoc2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "--", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_dcuh3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_AGXe1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_AGXe1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("long-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withLongOption_AGXe1_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("long", "long-opt", true, "long option");
        String[] arguments = new String[]{"--long-opt", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_xjJy2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "req", true, "required option");
        String[] arguments = new String[]{"-r", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_xjJy2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "req", true, "required option");
        String[] arguments = new String[]{"-r", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("req"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOption_xjJy2_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("r", "req", true, "required option");
        String[] arguments = new String[]{"-r", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_yvxY3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "prop", true, "property");
        String[] arguments = new String[]{"-p", "value", "extra"};
        Properties properties = new Properties();
        properties.setProperty("prop", "prop-value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_yvxY3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "prop", true, "property");
        String[] arguments = new String[]{"-p", "value", "extra"};
        Properties properties = new Properties();
        properties.setProperty("prop", "prop-value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("prop-value", cmd.getOptionValue("prop"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_yvxY3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("p", "prop", true, "property");
        String[] arguments = new String[]{"-p", "value", "extra"};
        Properties properties = new Properties();
        properties.setProperty("prop", "prop-value");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("extra", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_bEjg1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_bMva2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_QdrX0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_QdrX0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_QdrX0_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_TMcH1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_TMcH1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_RUYU2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_RUYU2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_RUYU2_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addRequiredOption("b", "bravo", true, "bravo option");
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wAdi1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wAdi1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wAdi1_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value", "extra", "-b"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_szoi2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_pybN3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_pybN3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_pybN3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionProperties("a").getProperty("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_andProperties_jpRi0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_andProperties_jpRi0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withArguments_andProperties_jpRi0_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_dOpt1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption", "-b"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_dOpt1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "nonOption", "-b"};
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("nonOption", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_CZoZ2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_CZoZ2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b"};
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("bravo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withUnknownOption_eOEu3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "-c"};
        try {
            parser.parse(options, arguments, null, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_jczK0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_jczK0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withOptionsAndArguments_jczK0_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        options.addOption("b", "bravo", false, "bravo option");
        String[] arguments = new String[]{"-a", "value", "-b", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wNqW1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withStopAtNonOption_wNqW1_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, true);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_tFpq2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withRequiredOptions_KqUs3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_PQVr3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_PQVr3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "arg", true, "argument");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.put("a", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionProperties("a").get("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_withProperties_GNPE2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "alpha option");
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        properties.setProperty("alpha", "propertyValue");
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("propertyValue", cmd.getOptionProperties("a").getProperty("alpha"));
    }
}