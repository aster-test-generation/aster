/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    private PrintWriter printWriter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_gaUx0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_WgQf0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_ivHV0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("?", helpFormatter.getOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_TkdU0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_qztn0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_lgKI0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_RbaM0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("-");
        assertEquals("-", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_PMRz0() throws Exception {
        HelpFormatter.Builder builder = HelpFormatter.builder();
        assertNotNull(builder.get());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_PYLQ0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getSyntaxPrefix();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_HPvB0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("\n", helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_VXst0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getArgName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_dlLT0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addOption("reqOpt", "longReqOpt", true, "required description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_WTkA0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> comparator = helpFormatter.getOptionComparator();
        assertNotNull(comparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_LfeP0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_nfdS0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_JXOJ0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("gnu.", helpFormatter.getLongOptPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_TTAc0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        helpFormatter.printHelp("cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_aiyX0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getWidth();
        assertEquals(80, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNullString_rVId0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimEmptyString_ynVc1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimNoWhitespace_VGEp2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NUlm0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addRequiredOption("reqOpt", "longReqOpt", true, "required description");
        helpFormatter.printHelp(80, "cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_qPsG0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        options.addOption("r", "required", true, "description");
        options.addRequiredOption("r", "required", true, "description");
        helpFormatter.printHelp(pw, 80, "cmdLineSyntax", "header", options, 2, 5, "footer");
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_tdwD0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a sample text";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("This is a\nsample text", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_ogWQ1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a very long text that needs to be wrapped";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("This is a\nvery long\ntext that\nneeds to\nbe wrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_eMTX2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "Short text";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("Short text", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText4_eamR3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText5_BiNf4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a text with multiple lines\nand it needs to be wrapped";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("This is a\n text\nwith multiple\nlines\nand it\nneeds to\nbe wrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText6_qMQH5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a very very very very very very long text that needs to be wrapped";
        helpFormatter.renderWrappedText(sb, 10, 5, text);
        assertEquals("This is a\nvery very\nvery very\nvery very\nlong text\nthat needs\nto be\nwrapped", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_withNullOptions_qZBd5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printUsage(pw, 80, "app", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withNullCmdLineSyntax_ZsNy0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printHelp(pw, 10, null, "", options, 1, 2, "", true);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withEmptyCmdLineSyntax_iVrg1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        try {
            helpFormatter.printHelp(pw, 10, "", "", options, 1, 2, "", true);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withAutoUsageTrue_eAov2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 10, "cmd", "", options, 1, 2, "", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withAutoUsageFalse_gPWH3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 10, "cmd", "", options, 1, 2, "", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withHeader_wwMx4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 10, "cmd", "header", options, 1, 2, "", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withFooter_GIFs5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 10, "cmd", "", options, 1, 2, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withOptions_nANN6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printHelp(pw, 10, "cmd", "", options, 1, 2, "", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_ZxZX0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_IVEd1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_YfXf2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_BVbV3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 5;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 5;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_zxCS4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 10;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_yIjy5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 10;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 11;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_ptdn6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_JHIE7() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_vOSP8() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 15;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_axpk9() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 15;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 11;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_Jnzy10() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 15;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_bNTl11() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 15;
        int startPos = 0;
        int result = helpFormatter.findWrapPos(text, width, startPos);
        assert result == 6;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_sFGG0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_jYbq1() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_vQCA2() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions4_Ewfo3() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions5_NMtC4() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions6_ArGQ5() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions7_xGYL6() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions8_wVNb7() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        options.addOption("c", "gamma", true, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions9_WyiE8() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int leftPad = 5;
        int descPad = 5;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
        assertNotEquals("", sb.toString());
    }
}