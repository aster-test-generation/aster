/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    private Map<String, Option> optionMap = new LinkedHashMap<>();
    OptionGroup optionGroup;
    Option option;
    private String selected;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_iLBT0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_fhfE0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        optionGroup.addOption(option);
        assertEquals(option, optionGroup.getOptions().iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_NWwf0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertNotNull(names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_biJv0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        assertNull(selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_kLpt0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedNullOption_vOYY0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setSelected(null);
        assertNull(optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedNewOption_TcLc1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedSameOption_NBQP2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        optionGroup.setSelected(option);
        optionGroup.setSelected(option);
        assertEquals(option.getKey(), optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withOptions_EhFa0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "opt1", true, "desc1");
        Option option2 = new Option("b", "opt2", true, "desc2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        assertEquals("[ -a desc1, -b desc2 ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withLongOptions_ZIMl1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option(null, "longOpt1", true, "desc1");
        Option option2 = new Option(null, "longOpt2", true, "desc2");
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        assertEquals("[ --longOpt1 desc1, --longOpt2 desc2 ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNoDescription_dabX2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "opt1", true, null);
        Option option2 = new Option("b", "opt2", true, null);
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        assertEquals("[ -a, -b ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withSingleOption_oLXZ3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option1 = new Option("a", "opt1", true, "desc1");
        optionGroup.addOption(option1);
        assertEquals("[ -a desc1 ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_withNoOptions_DuvN4() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        assertEquals("[]", optionGroup.toString());
    }
}