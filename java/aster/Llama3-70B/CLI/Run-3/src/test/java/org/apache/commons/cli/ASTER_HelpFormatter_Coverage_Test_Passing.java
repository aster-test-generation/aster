/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_LineFeedWithinWidth_UYMl0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int expected = 6;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_TabWithinWidth_YepG1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int expected = 6;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_SpaceWithinWidth_BRHG2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int expected = 5;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EndOfString_yjQH3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "Hello";
        int width = 5;
        int startPos = 0;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_getOptionComparatorNotNull_kINB0_XmSZ0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_HRXV0_lPVG0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        org.apache.commons.cli.Options options = org.mockito.Mockito.mock(org.apache.commons.cli.Options.class);
        java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.StringWriter());
        int width = 10;
        helpFormatter.printWrapped(pw, width, "text");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_optionGetOptNull_pYqy1_bciu0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_longOptPrefix_eDWm2_OMUe0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option(null, "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("--longOpt")); // Check if the long opt prefix is used
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_optionHasLongOpt_fMCE3_NzSs0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_longOptSeparator_NDza6_QqXE0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("longOpt")); // Check if long opt separator is used
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_appendArgName_upfC7_LWJK0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        option.setArgName("argName");
        options.addOption(option);
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        String result = sb.toString();
        assertTrue(result.contains("argName"));
    }
}