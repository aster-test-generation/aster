/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Opt_NotPresent_UBpA2() {
        Options options = new Options();
        assertFalse(options.hasOption("-opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_Required_HHrC0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        options.addOptionGroup(group);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_NotRequired_Mkzi1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        options.addOptionGroup(group);
        assertEquals(0, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_ReturnThis_eRAA6() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Options result = options.addOptionGroup(group);
        assertSame(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionNotPresent_zlPY1_hevC0_1() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        assertTrue(options.getRequiredOptions().contains("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionNotPresent_zlPY1_hevC0_2() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_MultipleOptions_mQuC7_NdQw0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option1 = OptionBuilder.create("option1");
        Option option2 = OptionBuilder.create("option2");
        group.addOption(option1);
        group.addOption(option2);
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_AddOption_TUGn4_DxXr0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("key", "description", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertTrue(options.hasOption(option.getOpt()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_AddOption_TUGn4_CEsU1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("key", "description", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertTrue(options.hasOption("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyPresent_MIvk0_jBCA0_1() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        Option opt2 = new Option("o2", "option2", true, "description");
        opt2.setRequired(true);
        options.addOption(opt2);
        int requiredCount = 0;
        for (Option option : options.getOptions()) {
            if (option.isRequired()) {
                requiredCount++;
            }
        }
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyPresent_MIvk0_jBCA0_2() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        Option opt2 = new Option("o2", "option2", true, "description");
        opt2.setRequired(true);
        options.addOption(opt2);
        int requiredCount = 0;
        for (Option option : options.getOptions()) {
            if (option.isRequired()) {
                requiredCount++;
            }
        }
        assertTrue(options.hasOption("o2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyPresent_MIvk0_jBCA0_3() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        Option opt2 = new Option("o2", "option2", true, "description");
        opt2.setRequired(true);
        options.addOption(opt2);
        int requiredCount = 0;
        for (Option option : options.getOptions()) {
            if (option.isRequired()) {
                requiredCount++;
            }
        }
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyPresent_MIvk0_jBCA0_4() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        opt.setRequired(true);
        options.addOption(opt);
        Option opt2 = new Option("o2", "option2", true, "description");
        opt2.setRequired(true);
        options.addOption(opt2);
        int requiredCount = 0;
        for (Option option : options.getOptions()) {
            if (option.isRequired()) {
                requiredCount++;
            }
        }
        assertEquals(2, requiredCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Options_ekeK0_1() {
        Options options = new Options();
        options.addOption("option1", null);
        options.addOption("option12", null);
        options.addOption("option123", null);
        assertTrue(options.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Options_ekeK0_2() {
        Options options = new Options();
        options.addOption("option1", null);
        options.addOption("option12", null);
        options.addOption("option123", null);
        assertTrue(options.hasOption("option12"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Options_ekeK0_3() {
        Options options = new Options();
        options.addOption("option1", null);
        options.addOption("option12", null);
        options.addOption("option123", null);
        assertTrue(options.hasOption("option123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_OptionGroups_JGpX5_RNBG0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("test", "test", false, "test");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_LongOpt_Present_Unwp0() {
        Options options = new Options();
        Option option = new Option("option", null);
        options.addOption(option);
        assertTrue(options.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_Options_xqHR2_QRhU0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("testOption", true, "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Options_xqHR2_oQSo1() {
        Options options = new Options();
        options.addOption("testOption", true, "description");
        assertTrue(options.hasOption("testOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_SetRequired_mSfK3_koyM0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("test", "test", false, "test");
        group.addOption(option);
        options.addOptionGroup(group);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_YaIy1_1() {
        Options options = new Options();
        Option option = new Option("test", "test", false, "test");
        options.addOption(option);
        assertTrue(options.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_YaIy1_2() {
        Options options = new Options();
        Option option = new Option("test", "test", false, "test");
        options.addOption(option);
        assertTrue(options.hasOption("-test"));
    }
}