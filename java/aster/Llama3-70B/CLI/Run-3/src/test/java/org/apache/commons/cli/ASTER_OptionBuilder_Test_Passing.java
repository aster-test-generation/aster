/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithType_eorh0() throws Exception {
        Object newType = new Object();
        OptionBuilder result = OptionBuilder.withType(newType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_HmIg0_1() throws Exception {
        Option option = OptionBuilder.create('a');
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_HmIg0_2() throws Exception {
        Option option = OptionBuilder.create('a');
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator2_rrjq1() throws Exception {
        OptionBuilder result = OptionBuilder.withValueSeparator(';');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator3_BMby2() throws Exception {
        OptionBuilder result = OptionBuilder.withValueSeparator(':');
        assertTrue(result instanceof OptionBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator6_KQwH5() throws Exception {
        OptionBuilder result = OptionBuilder.withValueSeparator('(');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparator10_UgGF9() throws Exception {
        OptionBuilder result = OptionBuilder.withValueSeparator('/');
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredNull_hFbu2() throws Exception {
        OptionBuilder result = OptionBuilder.isRequired(true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredSameInstance_mejH3() throws Exception {
        OptionBuilder result1 = OptionBuilder.isRequired(true);
        OptionBuilder result2 = OptionBuilder.isRequired(true);
        assertSame(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredDifferentInstance_ehjM4() throws Exception {
        OptionBuilder result1 = OptionBuilder.isRequired(true);
        OptionBuilder result2 = OptionBuilder.isRequired(false);
        assertNotSame(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_true_with_null_erPZ8_1() throws Exception {
        OptionBuilder result = OptionBuilder.hasArg(true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_false_with_null_thnM9_1() throws Exception {
        OptionBuilder result = OptionBuilder.hasArg(false);
        assertNotNull(result);
    }
}