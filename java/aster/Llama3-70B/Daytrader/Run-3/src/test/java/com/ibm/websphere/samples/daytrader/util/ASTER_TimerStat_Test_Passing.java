/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimerStat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMax_dntx0() {
    TimerStat timerStat = new TimerStat();
    double result = timerStat.getMax();
    assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAvgSecs_ZEpq0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(10000);
    timerStat.setCount(10);
    double result = timerStat.getAvgSecs();
    assertEquals(1.0, result, 0.01);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCount_QIyH0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(10);
    assertEquals(10, timerStat.getCount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMin_uzSu0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMin(10.0);
    assertEquals(10.0, timerStat.getMin(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetMax_rVgS0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10.0);
    assertEquals(10.0, timerStat.getMax(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalTime_kfiy0() {
    TimerStat timerStat = new TimerStat();
    double result = timerStat.getTotalTime();
    assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotalTime_wdmb0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setTotalTime(10.5);
    assertEquals(10.5, timerStat.getTotalTime(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCount_jxUm0() {
    TimerStat timerStat = new TimerStat();
    int expected = 0;
    int actual = timerStat.getCount();
    assert actual == expected;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMaxSecs_CjCD0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(2000);
    assertEquals(2.0, timerStat.getMaxSecs(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMin_Szol0_fid2() {
    TimerStat timerStat = new TimerStat();
    double min = timerStat.getMin();
    assertEquals(0.0, min,1.0E9);
}
}