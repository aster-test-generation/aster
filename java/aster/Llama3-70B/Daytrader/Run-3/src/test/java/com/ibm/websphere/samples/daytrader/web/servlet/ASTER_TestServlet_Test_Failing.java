/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import java.math.BigDecimal;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TestServlet_Test_Failing {
TestServlet testservlet;
HttpServlet httpservlet;
ServletConfig servletConfig;
TestServlet testServlet;
HttpServletRequest request;
HttpServletResponse response;
TradeServices tradeServices;
private TradeServices tradeAction;
HttpServletRequest httpRequest;
HttpServletResponse httpResponse;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletConfig = mock(ServletConfig.class);
        testservlet = new TestServlet(mock(Instance.class));
        testservlet.init(servletConfig);
        verify(httpservlet).init(servletConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_JDgo0_aIxi0() {
    Instance<TradeServices> services = mock(Instance.class);
    TestServlet testServlet = new TestServlet(services);
    ServletConfig config = mock(ServletConfig.class);
    try {
        testServlet.init(config);
    } catch (ServletException e) {
        fail("ServletException should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_tusa0() throws ServletException, IOException {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    TestServlet testServlet = new TestServlet(services);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    testServlet.doPost(request, response);
    verify(testServlet).performTask(request, response);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testperformTask_iPDL0() throws Exception {
    tradeAction = mock(TradeServices.class);
    Instance<TradeServices> instance = mock(Instance.class);
    when(instance.get()).thenReturn(tradeAction);
    testServlet = new TestServlet(instance);
    httpRequest = mock(HttpServletRequest.class);
    httpResponse = mock(HttpServletResponse.class);
    when(tradeAction.createQuote(anyString(), anyString(), any(BigDecimal.class))).thenReturn(null);
    testServlet.performTask(httpRequest, httpResponse);
    verify(tradeAction, times(10)).createQuote(anyString(), anyString(), any(BigDecimal.class));
}
}