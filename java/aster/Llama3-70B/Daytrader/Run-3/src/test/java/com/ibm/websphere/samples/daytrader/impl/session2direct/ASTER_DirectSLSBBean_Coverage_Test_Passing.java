/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Passing {
private TradeDirect tradeDirect;
private DirectSLSBBean directSLSBBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_SetInSession_OYFv0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.login("userID", "password");
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ReturnLoginResult_likH1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        AccountDataBean accountDataBean = mock(AccountDataBean.class);
        when(tradeDirect.login("userID", "password")).thenReturn(accountDataBean);
        directSLSBBean.tradeDirect = tradeDirect;
        AccountDataBean result = directSLSBBean.login("userID", "password");
        assertEquals(accountDataBean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_SetInSession_YZyW0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
        directSLSBBean.getHoldings("someUserID");
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_ReturnHoldings_DptI1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect; // assuming tradeDirect is a field in DirectSLSBBean
        Collection<HoldingDataBean> expectedHoldings = mock(Collection.class);
        when(tradeDirect.getHoldings("someUserID")).thenReturn(expectedHoldings);
        Collection<HoldingDataBean> actualHoldings = directSLSBBean.getHoldings("someUserID");
        assertEquals(expectedHoldings, actualHoldings);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_setsInSessionToTrue_bxkg0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10), 10);
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_returnsUpdatedQuoteDataBean_dAhQ1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        when(tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10), 10)).thenReturn(quoteDataBean);
        QuoteDataBean result = directSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.valueOf(10), 10);
        assertEquals(quoteDataBean, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_SetInSession_ulqL0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirectMock = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirectMock; // assuming tradeDirect is a field in DirectSLSBBean
        directSLSBBean.getOrders("someUserID");
        verify(tradeDirectMock).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_SetInSession_FMsZ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "orderType";
        double quantity = 10.0;
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_SetInSessionTrue_XjRz0() throws Exception {
        TradeDirect tradeDirectMock = mock(TradeDirect.class);
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect = tradeDirectMock;
        directSLSBBean.getMarketSummary();
        verify(tradeDirectMock).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_ReturnMarketSummary_tlTQ1() throws Exception {
        TradeDirect tradeDirectMock = mock(TradeDirect.class);
        MarketSummaryDataBean marketSummaryDataBeanMock = mock(MarketSummaryDataBean.class);
        when(tradeDirectMock.getMarketSummary()).thenReturn(marketSummaryDataBeanMock);
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect = tradeDirectMock;
        MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
        assertNotNull(result);
        verify(tradeDirectMock).getMarketSummary();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_setsInSessionToTrue_BVlp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_callsCreateQuoteOnTradeDirect_PMcg1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
        when(tradeDirect.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0))).thenReturn(quoteDataBean);
        directSLSBBean.tradeDirect = tradeDirect;
        QuoteDataBean result = directSLSBBean.createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
        assertEquals(quoteDataBean, result);
        verify(tradeDirect).createQuote("symbol", "companyName", BigDecimal.valueOf(10.0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_SetInSession_qcUV0() throws Exception {
        TradeDirect tradeDirectMock = mock(TradeDirect.class);
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect = tradeDirectMock;
        directSLSBBean.getQuote("symbol");
        verify(tradeDirectMock).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_ReturnQuote_cygv1() throws Exception {
        TradeDirect tradeDirectMock = mock(TradeDirect.class);
        QuoteDataBean quoteDataBeanMock = mock(QuoteDataBean.class);
        when(tradeDirectMock.getQuote("symbol")).thenReturn(quoteDataBeanMock);
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect = tradeDirectMock;
        QuoteDataBean result = directSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBeanMock, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_SetInSession_FNug0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.queueOrder(1, true);
        verify(tradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_QueueOrder_UvIp1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.queueOrder(1, true);
        verify(tradeDirect).queueOrder(1, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_SetInSession_EBNC0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        directSLSBBean.tradeDirect = tradeDirect;
        directSLSBBean.getAllQuotes();
        verify(tradeDirect).setInSession(true);
    }
}