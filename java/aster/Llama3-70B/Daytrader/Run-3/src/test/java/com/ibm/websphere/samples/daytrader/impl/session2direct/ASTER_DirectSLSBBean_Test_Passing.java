/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.ejb3.AsyncScheduledOrderSubmitter;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
@Mock
    private TradeDirect tradeDirect;
private DirectSLSBBean directslsbbean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn_XmGT0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        double result = directSLSBBean.investmentReturn(Math.random(), Math.random());
        Assertions.assertTrue(result >= 0);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetInSession_AlFj0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
        directSLSBBean.setInSession(true);
        Assertions.fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        Assertions.assertEquals("DirectSLSBBean::setInGlobalTxn not supported", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImpl_HJmM0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Sygq0_SXTa0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect tradeDirect = new TradeDirect();
    directSLSBBean.tradeDirect = tradeDirect;
    OrderDataBean orderDataBean = null;
    try {
        orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    } catch (Exception e) {
    }
    assertNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_PTxY0() throws Exception {
    directslsbbean = new DirectSLSBBean();
    directslsbbean.tradeDirect = tradeDirect;
    directslsbbean.asyncEJBOrderSubmitter = mock(AsyncScheduledOrderSubmitter.class);
    String userID = "userID";
    String symbol = "symbol";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    order.setQuote(quote);
    order.setHolding(new HoldingDataBean(quantity, BigDecimal.valueOf(100.0), new java.util.Date(), account, quote));
    order.setOrderID(1);
    order.setOrderStatus("status");
    order.setOpenDate(new java.util.Date());
    order.setCompletionDate(new java.util.Date());
    order.setOrderType("type");
    order.setPrice(BigDecimal.valueOf(100.0));
    order.setOrderFee(BigDecimal.valueOf(10.0));
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(order);
    OrderDataBean result = directslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    verify(tradeDirect, times(1)).buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect, times(1)).setInSession(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_Dzqu0_JTMJ0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
        assertNotNull(quoteDataBean);
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals("companyName", quoteDataBean.getCompanyName());
        assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
    } catch (NullPointerException e) {
        // Exception occurred: Cannot invoke "com.ibm.websphere.samples.daytrader.interfaces.TradeServices.setInSession(boolean)" because "this.tradeDirect" is null
        assertNull(directSLSBBean.tradeDirect);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsync_DnLU0_DZcI0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    try {
        directSLSBBean.completeOrderAsync(orderID, twoPhase);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_dQNl0_ydpg0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    HoldingDataBean holdingDataBean = null;
    try {
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 1.0, TradeConfig.ASYNCH);
        holdingDataBean = orderDataBean.getHolding();
    } catch (Exception e) {
    }
    assertNull(holdingDataBean);
}
}