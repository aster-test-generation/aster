/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.concurrent.Future;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Mockito;
import java.sql.Timestamp;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
@Mock
    private EntityManager entityManager;
private TradeSLSBBean tradeslsbbean;
@Mock
    private AccountProfileDataBean profile;
@Mock
    private AccountDataBean account;
@Mock
    private QuoteDataBean quote;
@Mock
    private HoldingDataBean holding;
@Mock
    private OrderDataBean order;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertNotNull(tradeSLSBBean);
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    if (marketSummaryDataBean != null) {
        assertNotNull(marketSummaryDataBean.getVolume());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhaseException_vYvr2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.pingTwoPhase("symbol");
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseTrue_DPYg0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    // The method queueOrder is not defined in the provided code, so it's assumed to be a method that returns void
    // The test case is modified to test the updateQuotePriceVolume method instead
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseFalse_TiWQ1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quoteDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChange_ERmL0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
    assertTrue(true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_rdjJ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    // Method getClosedOrders does not exist in TradeSLSBBean, so we can't test it.
    // Instead, we can test the updateQuotePriceVolume method.
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_EmptyResult_LvqS1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    // Method getClosedOrders does not exist in TradeSLSBBean, so we can't call it
    // Instead, we can test the updateQuotePriceVolume method
    QuoteDataBean quote = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
    assertNotNull(quote);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_HoldingIsNull_ugho0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 1);
    assertNotNull(quoteDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_OrderProcessingMode_SYNCH_EnmO1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal(1), 1);
    assertNotNull(quoteDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsync_LVBL0_sZwt0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    try {
        Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNull(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_NullOrder_ZBJQ2_XrOQ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
        assertNotNull(quoteDataBean);
    } catch (Exception e) {
        assertNull(e.getMessage(), "Cannot invoke \"javax.persistence.EntityManager.createNamedQuery(String, java.lang.Class)\" because \"this.entityManager\" is null");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_HWcM0_uAcz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    try {
        OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_CreateHolding_pqOK5_ORyE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("buy");
    try {
        OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertNotNull(result.getHolding());
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testbuy_YDXu0() throws Exception {
    TradeSLSBBean tradeslsbbean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "ABC";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    AccountProfileDataBean profile = Mockito.mock(AccountProfileDataBean.class);
    AccountDataBean account = Mockito.mock(AccountDataBean.class);
    QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
    HoldingDataBean holding = Mockito.mock(HoldingDataBean.class);
    OrderDataBean order = Mockito.mock(OrderDataBean.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
    when(tradeslsbbean.createOrder(account, quote, holding, "buy", quantity)).thenThrow(new Exception("Failed to create Order. Check that the symbol exists in the database."));
    try {
        tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
        fail("Expected Exception was not thrown");
    } catch (Exception e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    // Ensure the symbol exists in the database
    // Add code to insert the symbol into the database if it does not exist
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNull(order); // Expect null since the order creation failed
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        fail("Expected EJBException");
    } catch (EJBException e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        fail("Expected an Exception to be thrown");
    } catch (Exception e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    // Ensure the symbol exists in the database before creating the order
    // Add code to add the symbol to the database if it does not exist
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        assertNotNull(order);
    } catch (Exception e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("existingSymbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        fail("Expected RuntimeException to be thrown");
    } catch (RuntimeException e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        assertTrue(true); // The method should throw an exception
    } catch (Exception e) {
        assertEquals("Failed to create Order. Check that the symbol exists in the database.", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    try {
        tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
        assertTrue(true); // If no exception is thrown, the test passes
    } catch (Exception e) {
        fail("Failed to create Order. Check that the symbol exists in the database.");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllQuotes_pJsm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldings_qOcL0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings("testUserID");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCancelOrder_nylx0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    OrderDataBean orderDataBean = new OrderDataBean();
    EntityManager entityManager = Mockito.mock(EntityManager.class);
    Mockito.when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(orderDataBean);
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
    Mockito.verify(orderDataBean).cancel();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_MvOm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterSuccess_cUjE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);
    assertEquals("userID", accountDataBean.getProfileID());
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterFailure_dtby1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean("userID", "password", "fullname", "address", "email", "creditcard");
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_PgXs0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
    assertEquals("companyName", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());
    assertEquals(0, quoteDataBean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_vMsV0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);
    assertEquals("userID", accountProfileDataBean.getUserID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseTrue_DPYg0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.queueOrder(123, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder_withValidOrderID_andTwoPhaseFalse_TiWQ1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.queueOrder(456, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullQuote_GTsv1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        tradeSLSBBean.publishQuotePriceChange(null, BigDecimal.valueOf(5.0), BigDecimal.valueOf(2.0), 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullOldPrice_QCuj2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
        tradeSLSBBean.publishQuotePriceChange(quoteDataBean, null, BigDecimal.valueOf(2.0), 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChangeNullChangeFactor_HswZ3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    try {
        tradeSLSBBean.publishQuotePriceChange(quoteDataBean, BigDecimal.valueOf(5.0), null, 100.0);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_bkVe0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_rdjJ0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("userID");
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_EmptyResult_LvqS1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders("unknownUserID");
    assertTrue(result.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_CBCz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_laWa1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_UMKa2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
    assertEquals("buy", orderDataBean.getOrderType());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_HoldingIsNull_ugho0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, 1);
    assertEquals("cancelled", orderDataBean.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_OrderProcessingMode_SYNCH_EnmO1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    AccountDataBean account = profile.getAccount();
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_OrderProcessingMode_ASYNCH_MEow2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    AccountDataBean account = profile.getAccount();
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_OrderProcessingMode_ASYNCH_2PHASE_BsUb3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setAccount(new AccountDataBean());
    AccountDataBean account = profile.getAccount();
    HoldingDataBean holding = new HoldingDataBean();
    holding.setQuantity(10);
    holding.setQuote(new QuoteDataBean());
    holding.getQuote().setPrice(new BigDecimal(10));
    OrderDataBean orderDataBean = tradeSLSBBean.sell("userID", 1, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_1_BYqz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal("1.0"), 10.0);
    assertNotNull(quoteDataBean);
    assertEquals("symbol", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_4_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getSummaryDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_5_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertTrue(marketSummaryDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_7_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_jpYT0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopLosers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_MvOm0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuote_MvOm0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_CZAj0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterSuccess_cUjE0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertNotNull(accountDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterSuccess_cUjE0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals("userID", accountDataBean.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegisterSuccess_cUjE0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000));
    assertEquals(new BigDecimal(1000), accountDataBean.getOpenBalance());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_PgXs0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_PgXs0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    AccountDataBean account = AccountDataBean.getRandomInstance();
    profile.setAccount(account);
    account.setProfile(AccountProfileDataBean.getRandomInstance());
    String userID = profile.getUserID();
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertEquals(userID, result.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("symbol", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals("companyName", quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(new BigDecimal(10.0), quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_WumR0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(10.0));
    assertEquals(0, quoteDataBean.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_vMsV0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertNotNull(accountProfileDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountProfileData_vMsV0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("userID");
    assertEquals("userID", accountProfileDataBean.getUserID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_bkVe0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertNotNull(holdingDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHolding_bkVe0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
    assertEquals(1, holdingDataBean.getHoldingID().intValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_CBCz0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_SynchMode_CBCz0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.SYNCH);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_laWa1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_laWa1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_UMKa2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_Asynch2PhaseMode_UMKa2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean orderDataBean = tradeSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH_2PHASE);
    assertEquals("buy", orderDataBean.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_1_BYqz0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal("1.0"), 10.0);
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume_1_BYqz0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal("1.0"), 10.0);
    assertEquals("symbol", quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_BawX0_EgTc0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 0.0);
        assertNotNull(quoteDataBean);
        assertNotNull(quoteDataBean.getCompanyName());
        assertNotNull(quoteDataBean.getPrice());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhaseNullSymbol_ukna1_oQXa0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(null, BigDecimal.ONE, 0.0);
        assertNull(quoteDataBean);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_NullOrder_ZBJQ2_XrOQ0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume("symbol", BigDecimal.ONE, 10.0);
        assertNotNull(quoteDataBean);
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_KfSL1_dJjQ0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    HoldingDataBean holding = new HoldingDataBean();
    order.setHolding(holding);
    try {
        OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertNull(result.getHolding());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_NoHoldingForSellOrder_QIRh4_cCyT0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderID(1);
    order.setAccount(new AccountDataBean());
    order.setQuote(new QuoteDataBean());
    order.setPrice(BigDecimal.valueOf(10.0));
    order.setQuantity(10.0);
    order.setOrderType("sell");
    try {
        OrderDataBean result = tradeSLSBBean.completeOrder(order.getOrderID(), true);
        assertEquals("cancelled", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testbuy_YDXu0_fid2() throws Exception {
    TradeSLSBBean tradeslsbbean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "ABC";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    AccountProfileDataBean profile = Mockito.mock(AccountProfileDataBean.class);
    AccountDataBean account = Mockito.mock(AccountDataBean.class);
    QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
    HoldingDataBean holding = Mockito.mock(HoldingDataBean.class);
    OrderDataBean order = Mockito.mock(OrderDataBean.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
    when(tradeslsbbean.createOrder(account, quote, holding, "buy", quantity)).thenReturn(order);
    when(order.getOrderFee()).thenReturn(BigDecimal.valueOf(5.0));
    when(account.getBalance()).thenReturn(BigDecimal.valueOf(1000.0));
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order, result);
    verify(account).setBalance(BigDecimal.valueOf(885.0));
    verify(tradeslsbbean).completeOrder(order.getOrderID(), false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNotNull(order);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals("orderType", order.getOrderType());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals("open", order.getOrderStatus());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_4_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(new java.sql.Timestamp(System.currentTimeMillis()), order.getOpenDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_5_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertNull(order.getCompletionDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(10.0, order.getQuantity(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_7_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_8_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(TradeConfig.getOrderFee("orderType"), order.getOrderFee());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_9_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(account, order.getAccount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_10_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(quote, order.getQuote());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder_tIdE0_XwJP0_11_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    AccountDataBean account = new AccountDataBean(1, 1, 1, date1, date2, new BigDecimal("100.0"), new BigDecimal("100.0"), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("50.0"), new BigDecimal("40.0"), new BigDecimal("30.0"), new BigDecimal("20.0"), 10.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("60.0"), java.util.Date.from(java.time.Instant.now()), account, quote);
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, "orderType", 10.0);
    assertEquals(holding, order.getHolding());}
}