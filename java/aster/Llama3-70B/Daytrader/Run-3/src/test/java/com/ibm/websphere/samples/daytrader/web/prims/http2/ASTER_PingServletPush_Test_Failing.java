/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import com.ibm.websphere.samples.daytrader.web.prims.PingServlet;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Failing {
private static String initTime;
private static int hitCount;
PingServletPush pingservletpush;
HttpServlet httpservlet;
ServletConfig servletConfig;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
PushBuilder pushBuilder;
PrintWriter printWriter;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Http2Enabled_nMuV0_jZfx0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(mock(PushBuilder.class));
    try {
        pingServletPush.doGet(req, resp);
    } catch (ServletException | IOException e) {
        fail("Should not throw ServletException or IOException");
    }
    verify(req, times(1)).newPushBuilder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Http2NotEnabled_ZFal1_atuQ0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(null);
    try {
        pingServletPush.doGet(req, resp);
    } catch (ServletException e) {
    }
    verify(req, times(1)).newPushBuilder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ExceptionThrown_yBIj2_TdIg0() throws ServletException, IOException {
    PingServletPush pingServletPush = new PingServletPush();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenThrow(new ServletException());
    try {
        pingServletPush.doGet(req, resp);
    } catch (ServletException e) {
    }
    verify(req, times(1)).newPushBuilder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Http2Enabled_nMuV0_jZfx0_fid2() throws ServletException, IOException {
    // Assuming PingServletPush is in the same package, otherwise import the correct package
    PingServletPush pingServletPush = null;
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(mock(PushBuilder.class));
    try {
        pingServletPush = new PingServletPush(); // Initialize pingServletPush
        pingServletPush.doGet(req, resp);
    } catch (ServletException | IOException e) {
        fail("Should not throw ServletException or IOException");
    }
    verify(req, times(1)).newPushBuilder();
    assertNotNull(pingServletPush); // Assert pingServletPush is not null
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_Http2NotEnabled_ZFal1_atuQ0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenReturn(null);
    PingServletPush pingServletPush = new PingServletPush() {
        @Override
        public void init() throws ServletException {
            // Initialize servlet
        }
    };
    try {
        pingServletPush.doGet(req, resp);
    } catch (ServletException e) {
    }
    verify(req, times(1)).newPushBuilder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ExceptionThrown_yBIj2_TdIg0_fid2() throws ServletException, IOException {
    PingServlet pingServlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.newPushBuilder()).thenThrow(new ServletException());
    try {
        pingServlet.doGet(req, resp);
        fail("Expected ServletException to be thrown");
    } catch (ServletException e) {
        // expected
    }
    verify(req, times(1)).newPushBuilder();
}
}