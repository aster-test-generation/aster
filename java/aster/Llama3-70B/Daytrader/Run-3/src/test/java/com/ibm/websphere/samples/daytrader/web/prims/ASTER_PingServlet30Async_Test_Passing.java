/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet30Async_Test_Passing {
private static String initTime;
private static int hitCount;
PingServlet30Async pingservlet30async;
ServletConfig servletConfig;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_rjEP0() {
    PingServlet30Async pingServlet30Async = new PingServlet30Async();
    String result = pingServlet30Async.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_HsRC0() {
    PingServlet30Async pingServlet30Async = new PingServlet30Async();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        pingServlet30Async.doGet(req, res);
        verify(req, times(1)).getMethod();
    } catch (ServletException | IOException e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoPost_RtsQ0() throws Exception {
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletInputStream servletinputstream;
    ServletOutputStream servletoutputstream;
    PingServlet30Async pingservlet30async;
    AsyncContext asyncContext;
    httpservletresponse = mock(HttpServletResponse.class);
    httpservletrequest = mock(HttpServletRequest.class);
    servletinputstream = mock(ServletInputStream.class);
    servletoutputstream = mock(ServletOutputStream.class);
    asyncContext = mock(AsyncContext.class);
    pingservlet30async = new PingServlet30Async();
    when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
    when(httpservletrequest.startAsync()).thenReturn(asyncContext);
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(servletinputstream.read(any(byte[].class))).thenReturn(1);
    pingservlet30async.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println(anyString());
    verify(asyncContext).complete();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        res.setContentType("text/html");
        AsyncContext ac = req.startAsync();
        StringBuilder sb = new StringBuilder();
        ServletInputStream input = req.getInputStream();
        byte[] b = new byte[1024];
        int len = -1;
        while ((len = input.read(b)) != -1) {
            String data = new String(b, 0, len);
            sb.append(data);
        }
        ServletOutputStream output = res.getOutputStream();
        output.println("<html><head><title>Ping Servlet 3.0 Async</title></head>" + "<body><hr/><br/><font size=\"+2\" color=\"#000066\">Ping Servlet 3.0 Async</font><br/>" + "<font size=\"+1\" color=\"#000066\">Init time : " + initTime + "</font><br/><br/><b>Hit Count: " + ++hitCount + "</b><br/>Data Received: " + sb.toString() + "</body></html>");
        ac.complete();
    }
}