/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingUpgradeServlet_Test_Failing {
PingUpgradeServlet pingupgradeservlet;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_llvZ0() throws ServletException, IOException {
    PingUpgradeServlet pingUpgradeServlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingUpgradeServlet.doGet(req, res);
    verify(req, times(1));
    verify(res, times(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_UpgradeFound_vQtn0() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("echo");
    servlet.doPost(req, res);
    verify(res).setStatus(101);
    verify(res).setHeader("Upgrade", "echo");
    verify(res).setHeader("Connection", "Upgrade");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_UpgradeNotFound_jQnG1() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("not-echo");
    servlet.doPost(req, res);
    verify(res).getWriter();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_llvZ0_fid1() throws ServletException, IOException {
    PingUpgradeServlet pingUpgradeServlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        pingUpgradeServlet.doGet(req, res);
        fail("Expected ServletException");
    } catch (ServletException e) {
        // Expected
    }
    verify(req, times(1));
    verify(res, times(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_UpgradeNotFound_jQnG1_fid1() throws ServletException, IOException {
    PingUpgradeServlet servlet = new PingUpgradeServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getHeader("Upgrade")).thenReturn("not-echo");
    servlet.doPost(req, res);
    verify(res).setStatus(200);
    verify(res.getWriter()).println("No upgrade: not-echo");
}
}