/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Passing {
TradeConfigServlet tradeconfigservlet;
ServletConfig servletConfig;
HttpServlet httpservlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate10_UrDv9_Iucy0() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    try {
    } catch (Exception e) {
    }
    assertNotNull(TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_10() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getDisplayOrderAlerts());}
}