/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
TradeConfigServlet tradeconfigservlet;
ServletConfig servletConfig;
HttpServlet httpservlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        servletConfig = mock(ServletConfig.class);
        httpservlet = mock(HttpServlet.class);
        tradeconfigservlet = new TradeConfigServlet();
        // when
        tradeconfigservlet.init(servletConfig);
        // then
        verify(httpservlet).init(servletConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_NoAction_SUaW0() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn(null);
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_ResetTrade_ESHn2() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_BuildDB_dSty3() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDB");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate4_LyOK3_tzMS0() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("0");
    try {
        new TradeConfigServlet().doConfigUpdate(req, resp);
    } catch (Exception e) {
    }
    assertEquals("0", TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate7_kNEc6_uUUR0() {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("10");
    TradeConfigServlet servlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet();
    try {
        servlet.doConfigUpdate(req, resp);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(Integer.parseInt("10"), TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate3_zNvD2_EYvr0() {
    try {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn(null);
        servlet.doConfigUpdate(req, resp);
        assertNotNull(TradeConfig.getOrderProcessingMode());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate6_uCHR5_botq0() {
    try {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("WebInterface")).thenReturn(null);
        servlet.doConfigUpdate(req, resp);
        assertNotNull(TradeConfig.getWebInterface());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate12_GiTh11_EpxU0() {
    try {
        TradeConfigServlet servlet = (TradeConfigServlet) Class.forName("com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet").newInstance();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("marketSummaryInterval")).thenReturn(null);
        servlet.doConfigUpdate(req, resp); 
    } catch (Exception e) {
        // Handle the exception
    }
    assertNotNull(TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate11_EGgH10_BByF0() {
    try {
        TradeConfig.setMarketSummaryInterval(0); // Reset the marketSummaryInterval
    } catch (Exception e) {
    }
    TradeConfigServlet servlet = null; // Initialize servlet to null
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    try {
        servlet = new TradeConfigServlet(); // Initialize servlet inside try block
        servlet.doConfigUpdate(req, resp); 
    } catch (Exception e) {
    }
    assertEquals(10, TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate13_qGAg12_tceS0() {
    com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet servlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("10");
    try {
        servlet.doConfigUpdate(req, resp);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals("10", TradeConfig.getPrimIterations());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate_yGTh0_xUHY0() {
    // Assuming TradeConfigServlet is in the package com.ibm.websphere.samples.daytrader.web.servlet
    // and it has a default constructor
    // If not, you need to provide the correct package and constructor
    com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet tradeConfigServlet = new com.ibm.websphere.samples.daytrader.web.servlet.TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("10");
    when(req.getParameter("MaxQuotes")).thenReturn("100");
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    when(req.getParameter("primIterations")).thenReturn("10");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    try {
        tradeConfigServlet.doConfigUpdate(req, resp);
        assertTrue(true); // No exception is thrown
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_1() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = mock(TradeConfigServlet.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    verify(tradeconfigservlet).doConfigUpdate(httpservletrequest, httpservletresponse);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_2() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = mock(TradeConfigServlet.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals("1", TradeConfig.getWebInterface());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_6() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = mock(TradeConfigServlet.class);
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals("40", TradeConfig.getPrimIterations());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_UpdateConfig_Vbsk1() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("updateConfig");
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testService_Exception_kqGk8() throws ServletException, IOException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("unknown");
    servlet.service(req, resp);
    verify(resp).sendError(500, anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate2_Dpbr1_Jtqc0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    try {
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(1, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate4_LyOK3_tzMS0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("0");
    try {
    } catch (Exception e) {
    }
    assertEquals(0, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate5_GXgT4_Xajw0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("1");
    try {
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
    assertEquals(1, TradeConfig.getWebInterface());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate1_tdnh0_kNNQ0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    try {
    } catch (Exception e) {
        fail("Exception occurred");
    }
    assertEquals(0, TradeConfig.getOrderProcessingMode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate7_kNEc6_uUUR0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("10");
    try {
        servlet.doConfigUpdate(req, resp); // fixed line
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(10, TradeConfig.getMAX_USERS());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate10_UrDv9_Iucy0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    try {
    } catch (Exception e) {
    }
    assertEquals(TradeConfig.getMAX_QUOTES(), TradeConfig.getMAX_QUOTES());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate3_zNvD2_EYvr0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn(null);
    try {
        servlet.doConfigUpdate(req, resp);
        assertEquals(TradeConfig.getOrderProcessingMode(), TradeConfig.getOrderProcessingMode());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate6_uCHR5_botq0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn(null);
    try {
        servlet.doConfigUpdate(req, resp);
        assertEquals(TradeConfig.getWebInterface(), TradeConfig.getWebInterface());
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate12_GiTh11_EpxU0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn(null);
    try {
        servlet.doConfigUpdate(req, resp); // This method throws an exception, so it must be caught or declared to be thrown
    } catch (Exception e) {
    }
    assertEquals(TradeConfig.getMarketSummaryInterval(), TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate11_EGgH10_BByF0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    try {
        servlet.doConfigUpdate(req, resp); // This method throws Exception, so it must be caught or declared to be thrown
    } catch (Exception e) {
    }
    assertEquals(10, TradeConfig.getMarketSummaryInterval());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate13_qGAg12_tceS0_fid3() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("10");
    try {
        servlet.doConfigUpdate(req, resp); // fixed line
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertEquals(10, TradeConfig.getPrimIterations());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate_yGTh0_xUHY0_fid3() {
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("0");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("10");
    when(req.getParameter("MaxQuotes")).thenReturn("100");
    when(req.getParameter("marketSummaryInterval")).thenReturn("10");
    when(req.getParameter("primIterations")).thenReturn("10");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    try {
        tradeConfigServlet.doConfigUpdate(req, resp);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_1_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(1, TradeConfig.getOrderProcessingMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_2_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(1, TradeConfig.getWebInterface());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_3_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(10, TradeConfig.getMAX_USERS());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_4() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(20, TradeConfig.getMAX_QUOTES());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_5_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(30, TradeConfig.getMarketSummaryInterval());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_6_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(40, TradeConfig.getPrimIterations());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_7() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getPublishQuotePriceChange());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_8_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertEquals(50, TradeConfig.getListQuotePriceChangeFrequency());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testdoConfigUpdate_YFIs0_9_fid3() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeconfigservlet = new TradeConfigServlet();
    when(httpservletrequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpservletrequest.getParameter("WebInterface")).thenReturn("1"); 
    when(httpservletrequest.getParameter("MaxUsers")).thenReturn("10");
    when(httpservletrequest.getParameter("MaxQuotes")).thenReturn("20");
    when(httpservletrequest.getParameter("marketSummaryInterval")).thenReturn("30");
    when(httpservletrequest.getParameter("primIterations")).thenReturn("40");
    when(httpservletrequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpservletrequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(httpservletrequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpservletrequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeconfigservlet.doConfigUpdate(httpservletrequest, httpservletresponse);
    assertTrue(TradeConfig.getLongRun());}
}