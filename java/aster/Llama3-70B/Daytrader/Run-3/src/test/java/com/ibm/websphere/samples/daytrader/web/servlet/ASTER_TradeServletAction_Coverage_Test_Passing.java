/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.util.ArrayList;
import java.util.Collection;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeServletAction_Coverage_Test_Passing {
@BeforeEach
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_Initialization_LICf1() throws Exception {
        Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
        assertNotNull(quoteDataBeans);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_SplitSymbols_hfAl2() throws Exception {
        String symbols = "symbol1,symbol2";
        String[] symbolsSplit = symbols.split(",");
        assertEquals(2, symbolsSplit.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_ForLoop_mTbe3() throws Exception {
        String[] symbolsSplit = {"symbol1", "symbol2"};
        for (String symbol : symbolsSplit) {
            assertNotNull(symbol);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_AddQuoteData_ilEa5() throws Exception {
        Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>();
        QuoteDataBean quoteData = mock(QuoteDataBean.class);
        quoteDataBeans.add(quoteData);
        assertEquals(1, quoteDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_ThrowServletException_UVea9() throws Exception {
        Exception e = new Exception();
        ServletException servletException = new ServletException("TradeServletAction.doQuotes(...)" + " exception user = userID", e);
        assertEquals("TradeServletAction.doQuotes(...) exception user = userID", servletException.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_NullServletContext_Bljj7_EPuZ0() throws Exception {
    String userID = "user1";
    String passwd = "password";
    ServletContext ctx = null;
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    try {
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        fail("Expected ServletException");
    } catch (ServletException e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin_NullServletContext_Bljj7_EPuZ0_fid3() throws Exception {
    String userID = "user1";
    String passwd = "password";
    ServletContext ctx = null;
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeServletAction tradeServletAction = new TradeServletAction();
    try {
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        assertNotNull(e.getMessage());
    }
}
}