/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Failing {
private TradeDirect tradeDirect;
private DirectSLSBBean directSLSBBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_ReturnOrder_tjcq1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        TradeDirect tradeDirect = mock(TradeDirect.class);
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "orderType";
        double quantity = 10.0;
        OrderDataBean expectedOrder = new OrderDataBean();
        when(tradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
        OrderDataBean actualOrder = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(expectedOrder, actualOrder);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ASYNCH_Mode_ApDQ0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
        assertNotNull(orderDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ASYNCH_Mode_ApDQ0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = directSLSBBean.buy("userID", "symbol", 10.0, TradeConfig.ASYNCH);
        assertTrue(orderDataBean.getOrderID() != null);}
}