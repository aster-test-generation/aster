/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.Log;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExplicitGC_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetServletInfo_cBqm0() {
        ExplicitGC explicitGC = new ExplicitGC();
        String result = explicitGC.getServletInfo();
        assertEquals("Generate Explicit GC to VM", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_SuperInitCalled_JDjP0() throws ServletException {
        ExplicitGC explicitGC = new ExplicitGC();
        ServletConfig config = mock(ServletConfig.class);
        explicitGC.init(config);
        verify(config).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_FloatToString_mFUw0() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(res.getOutputStream()).thenReturn(out);
        explicitGC.doGet(req, res);
        verify(out).println(anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_CatchException_xwKk1() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        doThrow(new Exception()).when(res).sendError(anyInt(), anyString());
        explicitGC.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_LogError_OkaD2() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        Log log = mock(Log.class);
        explicitGC.doGet(req, res);
        verify(log).error(any(Exception.class), anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SendError_Zlyo3() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        explicitGC.doGet(req, res);
        verify(res).sendError(500, anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_CloseBracket_rUpJ4() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        explicitGC.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SetContentType_XRGM6() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        explicitGC.doGet(req, res);
        verify(res).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_GetOutputStream_OJKH7() throws ServletException, IOException {
        ExplicitGC explicitGC = new ExplicitGC();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(res.getOutputStream()).thenReturn(out);
        explicitGC.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_GetTotalMemory_sxmV9_jcCj0() throws ServletException, IOException {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    long totalMemoryBefore = Runtime.getRuntime().totalMemory();
    explicitGC.doGet(req, res);
    assertEquals(totalMemoryBefore, Runtime.getRuntime().totalMemory());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_GetMaxMemoryBeforeGC_pstk10_xfbg0() throws ServletException, IOException {
    ExplicitGC explicitGC = new ExplicitGC();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    long maxMemoryBeforeGC = Runtime.getRuntime().maxMemory();
    explicitGC.doGet(req, res);
    assertEquals(maxMemoryBeforeGC, Runtime.getRuntime().maxMemory());
}
}