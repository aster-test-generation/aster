/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity2JSP_Test_Failing {
PingServlet2Session2Entity2JSP pingservlet2session2entity2jsp;
ServletConfig servletConfig;
ServletConfig servletconfig;
HttpServlet httpservlet;
HttpServletRequest httpservletrequest;
ServletContext servletcontext;
HttpServletResponse httpservletresponse;
private TradeServices tradeSLSBLocal;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        servletConfig = mock(ServletConfig.class);
        pingservlet2session2entity2jsp = new PingServlet2Session2Entity2JSP();
        // Given
        when(servletConfig.getServletContext()).thenReturn(mock(ServletContext.class));
        // When
        pingservlet2session2entity2jsp.init(servletConfig);
        // Then
        verify(servletConfig).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_Haxr0() throws ServletException, IOException {
    PingServlet2Session2Entity2JSP pingServlet = new PingServlet2Session2Entity2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet.doPost(req, res);
    verify(req, times(1)).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_ERkE0() {
    PingServlet2Session2Entity2JSP pingServlet2Session2Entity2JSP = new PingServlet2Session2Entity2JSP();
    String result = pingServlet2Session2Entity2JSP.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity EJB to JSP path", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_LGGk0() {
    PingServlet2Session2Entity2JSP pingServlet = new PingServlet2Session2Entity2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletConfig servletConfig = mock(ServletConfig.class);
    ServletContext servletContext = mock(ServletContext.class);
    when(servletConfig.getServletContext()).thenReturn(servletContext);
    when(pingServlet.getServletConfig()).thenReturn(servletConfig);
    try {
        pingServlet.doGet(req, res);
        verify(req, times(1)).setAttribute("quoteData", any(QuoteDataBean.class));
        verify(servletContext, times(1)).getRequestDispatcher("/quoteDataPrimitive.jsp");
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_Haxr0_fid1() throws ServletException, IOException {
    PingServlet2Session2Entity2JSP pingServlet = new PingServlet2Session2Entity2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        pingServlet.doGet(req, res);
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_ERkE0_fid1() {
    PingServlet2Session2Entity2JSP pingServlet2Session2Entity2JSP = new PingServlet2Session2Entity2JSP();
    assertNull(pingServlet2Session2Entity2JSP.getServletInfo());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_IOException_ezKI1_ATrB0() throws IOException, ServletException {
    PingServlet2Session2Entity2JSP pingServlet = new PingServlet2Session2Entity2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletConfig servletConfig = mock(ServletConfig.class);
    ServletContext servletContext = mock(ServletContext.class);
    when(servletConfig.getServletContext()).thenReturn(servletContext);
    when(pingServlet.getServletConfig()).thenReturn(servletConfig);
    IOException ioException = new IOException();
    try {
        pingServlet.doGet(req, res);
        fail("IOException should be thrown");
    } catch (IOException e) {
        assertNotEquals(ioException, e);
    } catch (ServletException e) {
    }
}
}