/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_DAtO0() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        TradeConfigServlet servlet = new TradeConfigServlet();
        servlet.init(config);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_RuntimeMode_pJpe0() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_OrderProcessingMode_Null_UNUG1() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn(null);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_OrderProcessingMode_Valid_EbZE2() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn("1");
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_OrderProcessingMode_Invalid_OcwW3() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn("abc");
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_WebInterface_Null_mDxD4() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("WebInterface")).thenReturn(null);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_WebInterface_Valid_uyCo5() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("WebInterface")).thenReturn("1");
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_WebInterface_Invalid_hsCC6() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("WebInterface")).thenReturn("abc");
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_MaxUsers_Null_giLo7() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("MaxUsers")).thenReturn(null);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate_MaxUsers_Valid_VJYU8() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        when(req.getParameter("MaxUsers")).thenReturn("10");
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.doConfigUpdate(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_ActionNull_aPJI0() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn(null);
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_ResultInit_CjwI1() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_ContentType_IzAD2() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_GetParameter_VgeS3() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("updateConfig");
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_DoConfigDisplay_eCUp4() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn(null);
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_DoResetTrade_PaZQ6() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("resetTrade");
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_BuildDB_ZbqO7() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDB");
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService_BuildDBTables_tQVO8() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDBTables");
        servlet.service(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate_GetRequestDispatcher_sYDs5_JBxZ0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    tradeConfigServlet.doConfigUpdate(req, resp);
}
}