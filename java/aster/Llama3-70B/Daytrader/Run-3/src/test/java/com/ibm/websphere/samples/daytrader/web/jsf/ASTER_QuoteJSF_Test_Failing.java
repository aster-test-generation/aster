/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Failing {
private TradeServices tradeAction;
private ExternalContext context;
private HtmlDataTable dataTable;
private Integer quantity = 100;
QuoteJSF quotejsf;
HttpSession httpsession;
ExternalContext externalcontext;
TradeServices tradeServices;
QuoteData quoteData;
OrderDataBean orderDataBean;
OrderData orderData;
private String symbols = null;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbols_iapE0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.setSymbols("AAPL,GOOG");
    assertNotNull(quoteJSF.getSymbols());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuantity_PEWk0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertNotNull(quoteJSF);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuotes_fVfD0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertEquals("quotes", quoteJSF.getQuotesBySymbols());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataTable_SHib0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    quoteJSF.setDataTable(dataTable);
    assertNotNull(quoteJSF.getDataTable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuotes_lHyk0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    String result = quoteJSF.getQuotesBySymbols();
    assertEquals("quotes", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbols_HKTp0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertNull(quoteJSF.getSymbols());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuantity_dvsQ0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    QuoteJSF quoteJSF = new QuoteJSF(services);
    Integer quantity = 10;
    quoteJSF.setQuantity(quantity);
    assertEquals(quantity, quoteJSF.getQuantity());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbols_iapE0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.setSymbols("AAPL,GOOG");
    assertEquals("AAPL,GOOG", quoteJSF.getSymbols());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataTable_RVgz0() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = quoteJSF.getDataTable();
    assertNotNull(dataTable);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuantity_PEWk0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertEquals(0, quoteJSF.getQuantity());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuotes_fVfD0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    QuoteData[] quotes = quoteJSF.getQuotes();
    assertNotNull(quotes);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataTable_SHib0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    quoteJSF.setDataTable(dataTable);
    assertSame(dataTable, quoteJSF.getDataTable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuotes_lHyk0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    QuoteData[] quotes = new QuoteData[1];
    quoteJSF.setQuotes(quotes);
    assertArrayEquals(quotes, quoteJSF.getQuotes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbols_HKTp0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    assertEquals("", quoteJSF.getSymbols());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllQuotes_FAFj0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    quoteJSF.getAllQuotes();
    verify(quoteJSF).getQuotesBySymbols();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetQuantity_dvsQ0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    Integer quantity = 10;
    quoteJSF.setQuantity(quantity);
    assertEquals(quantity, quoteJSF.getQuantity());
}
}