/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteDataBean_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSymbol_doMD0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("TEST_SYMBOL");
    assertEquals("TEST_SYMBOL", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_1() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_2() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_3() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_4() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_5() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_6() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_7() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_8() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertTrue(quoteDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0_9() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertTrue(quoteDataBean.getChange() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetVolume_yeml0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    quoteDataBean.setVolume(20.0);
    assertEquals(20.0, quoteDataBean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHigh_bNNv0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    BigDecimal high = BigDecimal.valueOf(20.0);
    quoteDataBean.setHigh(high);
    assertEquals(high, quoteDataBean.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCompanyName_oupL0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
    assertEquals("companyName", quoteDataBean.getCompanyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_SymbolNotNull_tbPo0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    int expected = "symbol".hashCode();
    int actual = quoteDataBean.hashCode();
    assert expected == actual;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_SymbolNull_EOqU1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    int expected = 0;
    int actual = quoteDataBean.hashCode();
    assert expected == actual;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPrice_oMen0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, new BigDecimal("10.0"), new BigDecimal("5.0"), new BigDecimal("3.0"), new BigDecimal("15.0"), 2.0);
    assertEquals(new BigDecimal("10.0"), quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpen_Iohm0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(7.0), 2.0);
    BigDecimal open = BigDecimal.valueOf(5.1);
    quoteDataBean.setOpen(open);
    assertEquals(open, quoteDataBean.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetChange_Guwm0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    quoteDataBean.setChange(20.0);
    assertEquals(20.0, quoteDataBean.getChange(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLow_WSoY0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    assertEquals(BigDecimal.valueOf(3.0), quoteDataBean.getLow());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpen_RwmX0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(7.0), 2.0);
    assertEquals(BigDecimal.valueOf(5.0), quoteDataBean.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetChange_Vgyn0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("9.0"), new BigDecimal("8.0"), new BigDecimal("11.0"), 1.0);
    assertEquals(1.0, quoteDataBean.getChange(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHigh_XMKJ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    assertEquals(BigDecimal.valueOf(15.0), quoteDataBean.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPrice_dqWu0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, 0.0);
    BigDecimal price = new BigDecimal("10.5");
    quoteDataBean.setPrice(price);
    assertEquals(price, quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTML_MQhj0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("5.0"), new BigDecimal("3.0"), new BigDecimal("15.0"), 2.0);
    String expected = "<BR>Quote Data for: symbol<LI> companyName: companyName</LI><LI>      volume: 100.0</LI><LI>       price: 10.0</LI><LI>        open1: 5.0</LI><LI>         low: 3.0</LI><LI>        high: 15.0</LI><LI>      change1: 2.0</LI>";
    assertEquals(expected, quoteDataBean.toHTML());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLow_owmH0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    BigDecimal low = BigDecimal.valueOf(5.0);
    quoteDataBean.setLow(low);
    assertEquals(low, quoteDataBean.getLow());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbol_bpEw0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbolEmpty_xTLg1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    assertNull(quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSymbolFullConstructor_jzUE2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), BigDecimal.valueOf(10.0), 10.0);
    assertEquals("symbol", quoteDataBean.getSymbol());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_wleK0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("5.0"), new BigDecimal("3.0"), new BigDecimal("15.0"), 2.0);
    String expected = "\n\tQuote Data for: symbol\n\t\t companyName: companyName\n\t\t      volume: 100.0\n\t\t       price: 10.0\n\t\t        open1: 5.0\n\t\t         low: 3.0\n\t\t        high: 15.0\n\t\t      change1: 2.0";
    assertEquals(expected, quoteDataBean.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompanyName_Arhh0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    quoteDataBean.setCompanyName("companyName");
    assertEquals("companyName", quoteDataBean.getCompanyName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVolume_IEaf0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), BigDecimal.valueOf(3.0), BigDecimal.valueOf(15.0), 2.0);
    assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameObject_fLDC0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    assertTrue(quoteDataBean.equals(quoteDataBean));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentClass_GFuc1() {
    Object object = new Object();
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
    assertFalse(quoteDataBean.equals(object));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_SameSymbol_RVHV2() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol");
    assertTrue(quoteDataBean1.equals(quoteDataBean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_DifferentSymbol_mvDG3() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol1");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol2");
    assertFalse(quoteDataBean1.equals(quoteDataBean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_NullSymbol_zpji4() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean(null);
    assertFalse(quoteDataBean1.equals(quoteDataBean2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrint_IzDz0_JgWp0_fid1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 10.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0);
    String result = quoteDataBean.toString();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetRandomInstance_oguI0() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getSymbol());
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertTrue(quoteDataBean.getVolume() >= 0);
    assertTrue(quoteDataBean.getChange() >= 0);
}
}