/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2One_Test_Failing {
private static int hitCount;
private static String initTime;
PingServlet2Session2CMROne2One pingservlet2session2cmrone2one;
ServletConfig servletConfig;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
HttpServlet httpservlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_cyjJ0() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doPost(req, res);
    verify(req).getMethod();
    verify(res).getStatus();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_BAGo0() {
    PingServlet2Session2CMROne2One pingServlet2Session2CMROne2One = new PingServlet2Session2CMROne2One();
    String result = pingServlet2Session2CMROne2One.getServletInfo();
    assertEquals("web primitive, tests Servlet to Entity EJB path", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_IOException_YQSn1_ZDuw0() throws IOException {
    PingServlet2Session2CMROne2One pingServlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    try {
        when(res.getWriter()).thenThrow(new IOException());
        pingServlet.doGet(req, res);
    } catch (ServletException e) {
        fail("ServletException should not be thrown");
    } catch (IOException e) {
        verify(res).sendError(500, "PingServlet2Session2CMROne2One.doGet(...): error");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_cyjJ0_fid1() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getMethod()).thenReturn("GET");
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
}
}