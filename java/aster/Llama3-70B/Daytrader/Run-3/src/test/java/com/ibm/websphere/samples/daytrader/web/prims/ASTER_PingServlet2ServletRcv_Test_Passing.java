/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoExtension;
import java.lang.reflect.Field;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Passing {
private static String initTime = null;
PingServlet2ServletRcv pingservlet2servletrcv;
HttpServlet httpservlet;
ServletConfig servletConfig;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
PingBean pingBean;
PrintWriter printWriter;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservlet2servletrcv = new PingServlet2ServletRcv();
        pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
        verify(pingservlet2servletrcv).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingBean = mock(PingBean.class);
        printWriter = mock(PrintWriter.class);
        pingservlet2servletrcv = new PingServlet2ServletRcv();
        when(httpservletrequest.getAttribute("ab")).thenReturn(pingBean);
        when(httpservletresponse.getWriter()).thenReturn(printWriter);
        when(pingBean.getMsg()).thenReturn("Test Message");
        pingservlet2servletrcv.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(printWriter).println(anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_GWBn0() throws ServletException, IOException {
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2ServletRcv.doPost(req, res);
    verify(req, times(1)).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testinit_PKay0_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    servletConfig = mock(ServletConfig.class);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    pingservlet2servletrcv.init(servletConfig);
    assertNotNull(initTimeField.get(pingservlet2servletrcv));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testinit_PKay0_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    servletConfig = mock(ServletConfig.class);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    pingservlet2servletrcv.init(servletConfig);
    assertTrue(initTimeField.get(pingservlet2servletrcv) instanceof Long);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_nial0_jdLo0() {
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingBean pingBean = new PingBean();
    pingBean.setMsg("Test Message");
    when(req.getAttribute("ab")).thenReturn(pingBean);
    try {
        Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        initTimeField.set(pingServlet2ServletRcv, "Test Init Time");
        pingServlet2ServletRcv.doGet(req, res);
        verify(res).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(res.getWriter()).println(captor.capture());
        String responseBody = captor.getValue();
        assertTrue(responseBody.contains("PingServlet2Servlet:"));
        assertTrue(responseBody.contains("Init time: Test Init Time"));
        assertTrue(responseBody.contains("Message from Servlet: Test Message"));
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
}