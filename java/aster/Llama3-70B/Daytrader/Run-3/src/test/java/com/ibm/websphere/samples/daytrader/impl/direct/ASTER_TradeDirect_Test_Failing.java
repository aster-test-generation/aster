/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import java.util.Iterator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
TradeDirect tradedirect;
DataSource datasource;
Connection connection;
Statement statement;
MDBStats mdbStats;
Object[] sqlBuffer;
private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
private static Integer marketSummaryLock = new Integer(0);
private static long nextMarketSummary = System.currentTimeMillis();
PreparedStatement preparedstatement;
ResultSet resultset;
TradeConfig tradeConfig;
private static String getAllQuotesSQL = "select * from quoteejb q";
QuoteDataBean quoteDataBean;
private boolean inSession = false;
TradeDirect tradeDirect;
PreparedStatement preparedStatement;
ResultSet resultSet;
DataSource dataSource;
OrderDataBean orderDataBean;
private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
AccountDataBean accountDataBean;
private static String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
Log log;
AccountProfileDataBean profileData;
AccountProfileDataBean accountProfileDataBean;
private static final String userID = "testUser";
private static final String getClosedOrdersSQL = "select a.accountid from accountejb a where a.profile_userid = ?";
private ManagedExecutorService mes;
private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
private static BigDecimal ZERO = new BigDecimal(0.0);
private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
private DataSource createMockDataSource() {
    return Mockito.mock(DataSource.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class), any(), any())).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(10); // some non-zero value
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertEquals(cachedMSDB, marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_zeroInterval_1() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_zeroInterval_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotEquals(cachedMSDB, marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_negativeInterval_1() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_negativeInterval_2() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertEquals(cachedMSDB, marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_VcnY0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0.0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogout_KEus0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_1() throws Exception {
    connection = mock(Connection.class);
    tradeConfig = mock(TradeConfig.class);
    datasource = mock(DataSource.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(datasource.getConnection()).thenReturn(connection);
    when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(quoteDataBean.getSymbol()).thenReturn("symbol");
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
    when(quoteDataBean.getVolume()).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 50.0);
    assertEquals("symbol", result.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_2() throws Exception {
    connection = mock(Connection.class);
    tradeConfig = mock(TradeConfig.class);
    datasource = mock(DataSource.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(datasource.getConnection()).thenReturn(connection);
    when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(quoteDataBean.getSymbol()).thenReturn("symbol");
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
    when(quoteDataBean.getVolume()).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 50.0);
    assertEquals(BigDecimal.valueOf(20.0), result.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume_3() throws Exception {
    connection = mock(Connection.class);
    tradeConfig = mock(TradeConfig.class);
    datasource = mock(DataSource.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(datasource.getConnection()).thenReturn(connection);
    when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(quoteDataBean.getSymbol()).thenReturn("symbol");
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
    when(quoteDataBean.getVolume()).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 50.0);
    assertEquals(150.0, result.getVolume(), 0.0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_FouE0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertNotNull(result.getTSIA());
        assertNotNull(result.getOpenTSIA());
        assertTrue(result.getVolume() >= 0);
        assertNotNull(result.getTopGainers());
        assertNotNull(result.getTopLosers());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
    public void testGetMarketSummaryInternal_hbOn0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData);}
@Test
    public void testGetMarketSummaryInternal_hbOn0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData.getSummaryDate());}
@Test
    public void testGetMarketSummaryInternal_hbOn0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData.getTSIA());}
@Test
    public void testGetMarketSummaryInternal_hbOn0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData.getOpenTSIA());}
@Test
    public void testGetMarketSummaryInternal_hbOn0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertTrue(marketSummaryData.getVolume() >= 0);}
@Test
    public void testGetMarketSummaryInternal_hbOn0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(topGainers);}
@Test
    public void testGetMarketSummaryInternal_hbOn0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertEquals(5, topGainers.size());}
@Test
    public void testGetMarketSummaryInternal_hbOn0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertNotNull(topLosers);}
@Test
    public void testGetMarketSummaryInternal_hbOn0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        Collection<QuoteDataBean> topGainers = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosers = marketSummaryData.getTopLosers();
        assertEquals(5, topLosers.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Etgu0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertTrue(marketSummaryDataBean.getVolume() >= 0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Unexpected exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNull_OutNotNull_nFDU1_iqkV0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); 
    } catch (Exception e) {
        // do nothing
    }
    Assertions.assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_RtRk0_TKHV0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cLCG0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertTrue(marketSummaryDataBean.getVolume() >= 0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (NullPointerException e) {
        fail("DataSource is not initialized");
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_SGPB1_FiHA0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("An unexpected exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt1_hzYI0_lpom0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
        Iterator<QuoteDataBean> iterator = topGainers.iterator();
        assertTrue(iterator.hasNext());
        QuoteDataBean quoteDataBean = iterator.next();
        assertNotNull(quoteDataBean);
    } catch (NullPointerException e) {
        fail("DataSource is null");
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginSuccess_SRDc0_KRrz0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        fail("DataSource is not initialized");
    } catch (Exception e) {
        fail("An unexpected error occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_RETa0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        // Exception is expected
    }
    assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_UKPJ0_gQAF0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
        assertNotNull(marketSummaryDataBean.getGainPercent());
    } catch (NullPointerException e) {
        fail("DataSource is not initialized");
    } catch (Exception e) {
        fail("An unexpected exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_KRNJ0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Log.error("Error in testGetMarketSummaryInternal", e);
    }
    Assertions.assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn_mRMp0() {
    TradeDirect tradeDirect = new TradeDirect();
    double result = tradeDirect.investmentReturn(Math.random(), Math.random());
    assertEquals(0.0, result, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionTrue_TwoPhaseTrue_yzhX0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionFalse_TwoPhaseTrue_Crus1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionTrue_TwoPhaseFalse_cBGz2() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = false;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_vcRw0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_MkRZ1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_gaqF2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_rXdT0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    Integer orderID = orderDataBean.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_yMNH1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    Integer orderID = orderDataBean.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_CancelledOrder_CYJa2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderStatus("cancelled");
    Integer orderID = orderDataBean.getOrderID();
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_xnRK0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_Faxh1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_VcnY0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals(orderData.getOrderType(), result.getOrderType());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_VJdG1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNotNull(result);
        assertEquals(orderData.getOrderType(), result.getOrderType());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_ICez2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, true);
        assertNull(result);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_2() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_3() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_4() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_5() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_6() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_7() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_8() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getChange() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0_9() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertTrue(quoteDataBean.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLogout_KEus0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.logout("testUser");
        assertTrue(true);
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetConnPublic_fHGW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection connection = tradeDirect.getConnPublic();
    assertNotNull(connection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidUser_JfRh1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("invalidUser", "validPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("Cannot find account forinvalidUser", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidPassword_Pwpl2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("validUser", "invalidPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->validUser:invalidPassword", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_FouE0() {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    try {
        AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(result);
        assertEquals("fullName", result.getFullName());
        assertEquals("address", result.getAddress());
        assertEquals("email", result.getEmail());
        assertEquals("creditCard", result.getCreditCard());
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
}
@Test
public void testGetMarketSummaryInternal_xdLk0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        fail("Exception should not be thrown");
    }
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() >= 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
public void testGetMarketSummaryInternal_MAGF0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean);}
@Test
public void testGetMarketSummaryInternal_MAGF0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTSIA());}
@Test
public void testGetMarketSummaryInternal_MAGF0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());}
@Test
public void testGetMarketSummaryInternal_MAGF0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertTrue(marketSummaryDataBean.getVolume() >= 0);}
@Test
public void testGetMarketSummaryInternal_MAGF0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTopGainers());}
@Test
public void testGetMarketSummaryInternal_MAGF0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getTopLosers());}
@Test
public void testGetMarketSummaryInternal_MAGF0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getSummaryDate());}
@Test
public void testGetMarketSummaryInternal_MAGF0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryDataBean.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_ZZXi0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertTrue(marketSummaryData.getVolume() >= 0);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_oVnO0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        if(marketSummaryData.getTopGainers().size() > 0) {
            assertNotNull(marketSummaryData.getGainPercent());
        }
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_dSpI0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertNotNull(marketSummaryData.getGainPercent());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_vexb0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        if(marketSummaryData.getTSIA() != null && marketSummaryData.getOpenTSIA() != null) {
            assertNotNull(marketSummaryData.getGainPercent());
        }
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_xYVx0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_WkhO0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthZero_EVyZ0_PIcG0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[0];
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_BhJd0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertEquals(0, marketSummaryDataBean.getGainPercent().doubleValue(), 0.01);
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.01);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Expected no exception, but got " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNull_OutNotNull_nFDU1_iqkV0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); // calling the method under test
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        Assertions.fail("Expected no exception");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthMultiple_fWgg2_GUIZ0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table1 (id INT)", "CREATE TABLE test_table2 (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_BjDT0_MrEi0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthOne_SOUK1_MvTd0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNotNull_OutNotNull_GdVc0_YlSn0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.getMarketSummaryInternal() != null; // Changed method call
        Assertions.assertTrue(result);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal2_Ngbc1_uYNb0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail();
    } finally {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_CcNw0_GAkg0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal1_tJEG0_ZadC0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
    }
    assertNotNull(marketSummaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllQuotes_zrFJ0_gFqM0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Log.error("TradeDirect:testGetAllQuotes -- error getting market summary", e);
    }
    assertNotNull(marketSummaryData);
    assertNotNull(marketSummaryData.getTopGainers());
    assertEquals(5, marketSummaryData.getTopGainers().size());
    assertNotNull(marketSummaryData.getTopLosers());
    assertEquals(5, marketSummaryData.getTopLosers().size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal5_hWfr4_YZwP0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_kUmc1_KJsj0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_EFEV0_SWOt0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getSummaryDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertTrue(marketSummaryData.getVolume() >= 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getTopLosers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_success_qyCV0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    marketSummaryData = tradeDirect.getMarketSummaryInternal();
    assertNotNull(marketSummaryData.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_cLCG0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertTrue(marketSummaryDataBean.getVolume() >= 0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_aCAA0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt2_haCq1_QyrU0() {
    TradeDirect tradeDirect = new TradeDirect();
    TradeConfig.setUpdateQuotePrices(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_ztKA0_Ntaz0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setSymbol("ABC");
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt1_hzYI0_lpom0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
        Iterator<QuoteDataBean> iterator = topGainers.iterator();
        assertTrue(iterator.hasNext());
        QuoteDataBean quoteDataBean = iterator.next();
        assertNotNull(quoteDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolumeInt4_rYBz3_jKpF0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_SellOrder_NZVK1_rSHU0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    orderDataBean.setHolding(holdingDataBean);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_wfSY0_xGKk0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = tradeDirect.getMarketSummaryInternal().getTopGainers().iterator().next();
    } catch (Exception e) {
    }
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getSymbol());
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    assertEquals(0.0, quoteDataBean.getChange(), 0.0);
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getOpenTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTSIA());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getSummaryDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTopGainers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result.getTopLosers());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_Unfr0_VMAs0_8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNull(result.getGainPercent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_EeEV0_DBQr0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = null;
    try {
        marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertEquals(0, marketSummaryDataBean.getGainPercent().doubleValue(), 0.0);
    assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_2Phase_jGhF1_JMfW0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAccountData_UKPJ0_gQAF0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
        assertNotNull(marketSummaryDataBean.getGainPercent());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_pGfo0_ebEm0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_ssjA0_crIT0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_gyFL2_mMWv0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell11_rPMD10_VSig0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal(); // calling the method under test
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_bjkh1_oAUq0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell8_wBXQ7_hjLv0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell12_VORX11_XVjM0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal(); // Call the method under test
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
        fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeSynch_jkPC3_yvEx0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(false);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_Grft0_zYxl0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_NypI2_lpvf0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_KRNJ0_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        Log.error("Error in testGetMarketSummaryInternal", e);
        Assertions.fail("Exception occurred");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_2Phase_Knla1_DICQ0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_tuPI4_ftUB0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class), any(), any())).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(10); // some non-zero value
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);
    assertEquals(cachedMSDB, marketSummary);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_zeroInterval() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(0);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);
    assertNotEquals(cachedMSDB, marketSummary);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_negativeInterval() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(-1);
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);
    assertEquals(cachedMSDB, marketSummary);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase_FHkY0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = tradeDirect.pingTwoPhase("symbol");
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getCompanyName());
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertNotNull(quoteDataBean.getSymbol());
    assertTrue(quoteDataBean.getChange() >= 0);
    assertTrue(quoteDataBean.getVolume() >= 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateQuotePriceVolume() throws Exception {
    connection = mock(Connection.class);
    tradeConfig = mock(TradeConfig.class);
    datasource = mock(DataSource.class);
    preparedstatement = mock(PreparedStatement.class);
    resultset = mock(ResultSet.class);
    tradeDirect = new TradeDirect();
    quoteDataBean = mock(QuoteDataBean.class);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(datasource.getConnection()).thenReturn(connection);
    when(tradeConfig.getPublishQuotePriceChange()).thenReturn(true);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedstatement);
    when(quoteDataBean.getSymbol()).thenReturn("symbol");
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
    when(quoteDataBean.getVolume()).thenReturn(100.0);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume("symbol", BigDecimal.valueOf(2.0), 50.0);
    assertEquals("symbol", result.getSymbol());
    assertEquals(BigDecimal.valueOf(20.0), result.getPrice());
    assertEquals(150.0, result.getVolume(), 0.0);
  }
}