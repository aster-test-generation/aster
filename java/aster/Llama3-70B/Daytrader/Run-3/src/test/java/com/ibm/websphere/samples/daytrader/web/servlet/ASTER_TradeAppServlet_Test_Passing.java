/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
TradeAppServlet tradeappservlet;
ServletConfig servletconfig;
Enumeration<String> enumeration;
HttpServletResponse httpservletresponse;
HttpServletRequest httpservletrequest;
HttpSession httpsession;
HttpServlet httpservlet;
ServletContext servletcontext;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        tradeappservlet = new TradeAppServlet();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        tradeappservlet.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession();
        verifyNoMoreInteractions(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        tradeappservlet = new TradeAppServlet();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        tradeappservlet.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession();
        verify(tradeappservlet, times(1)).performTask(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_oNPx0() throws ServletException, IOException {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    tradeAppServlet.doPost(request, response);
    verify(request, times(1)).getMethod();
    verify(response, times(1)).getContentType();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_QpsP0() throws Exception {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    String result = tradeAppServlet.getServletInfo();
    assertEquals("TradeAppServlet provides the standard web interface to Trade", result);
}
}