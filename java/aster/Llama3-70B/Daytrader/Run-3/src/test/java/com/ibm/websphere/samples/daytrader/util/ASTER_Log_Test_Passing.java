/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Log_Test_Passing {
    private static String[] paramsToStrings(Object[] params) {
        String[] strings = new String[params.length];
        for (int i = 0; i < params.length; i++) {
            strings[i] = String.valueOf(params[i]);
        }
        return strings;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintObject_VSQu0() {
    Log log = new Log();
    Object o = new Object();
    Log.log("\t" + o.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLog_OKNl0() {
    Log.log("Hello", "World");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintCollection_EmptyCollection_Ecnu0() {
    Collection<Object> collection = new ArrayList<>();
    Log.printCollection(collection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintCollection_NonEmptyCollection_ULxf1() {
    Collection<Object> collection = new ArrayList<>();
    collection.add("Element1");
    collection.add("Element2");
    Log.printCollection(collection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_AsbQ0() {
    Throwable e = new Throwable("Test Throwable");
    String message = "Test Message";
    Log.error(e, message);
    assertEquals("Test Message\n\t", message + "\n\t");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoTrace_xaNE0() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Log.class.getName());
    logger.setLevel(java.util.logging.Level.FINE);
    assertFalse(Log.doTrace());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_trace_KhpN0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    log.trace(message, parm1, parm2, parm3, parm4);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLog_hCNN0() {
    Log log = new Log();
    String msg1 = "Hello";
    String msg2 = " World";
    String msg3 = "!";
    Log.log(msg1, msg2, msg3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTrace_KCpm0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parameter 1";
    Object parm2 = 2;
    Object parm3 = 3.0;
    log.trace(message, parm1, parm2, parm3);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrint_UVwe0() {
    Log log = new Log();
    String message = "Hello, World!";
    Log.print(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_kDje0() {
    Throwable e = new Throwable();
    Log.error("msg1", "msg2", e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_trace_LosR0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = "Parm1";
    Object parm2 = "Parm2";
    Object parm3 = "Parm3";
    Object parm4 = "Parm4";
    Object parm5 = "Parm5";
    Object parm6 = "Parm6";
    Object parm7 = "Parm7";
    Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6, parm7);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_HNKN0() {
    Throwable e = new Throwable();
    Log.error(e, "msg1", "msg2");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoDebug_HtQF0() {
    assertTrue(Log.doDebug());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_LlSg0() {
    Throwable e = new Throwable();
    Log.error(e, "msg1", "msg2", "msg3");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_trace_tCuJ0() {
    Log log = new Log();
    java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Log.class.getName());
    java.util.logging.Level level = java.util.logging.Level.FINE;
    String message = "Test Message";
    Thread thread = Thread.currentThread();
    logger.log(level, message + " threadID=" + thread);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_FPjV0() {
    Throwable e = new Throwable("Test Throwable");
    Log.error("msg1", "msg2", "msg3", e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_trace_zBrb0() {
    Log log = new Log();
    String message = "Test Message";
    Object parm1 = new Object();
    Object parm2 = new Object();
    log.trace(message, parm1, parm2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testError_XxYG0() {
    Throwable e = new Throwable("Test Throwable");
    Log.error("Test Message", e);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPrintCollection_ycWZ0() {
    Collection<String> collection = new ArrayList<>();
    collection.add("Element1");
    collection.add("Element2");
    Log.printCollection("Test Message", collection);
}
}