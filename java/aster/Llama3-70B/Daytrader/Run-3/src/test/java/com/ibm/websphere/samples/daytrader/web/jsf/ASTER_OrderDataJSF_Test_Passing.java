/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.assertSame;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Passing {
private TradeServices tradeAction;
private ExternalContext context;
OrderDataJSF orderdatajsf;
HttpSession httpsession;
ExternalContext externalcontext;
private OrderData orderData;
Instance<TradeServices> services;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOrderData_norD0_bovc0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    java.util.Date date1 = new java.util.Date();
    java.util.Date date2 = new java.util.Date();
    OrderData orderData = new OrderData(1, "status", date1, date2, BigDecimal.valueOf(10), "type", 10.0, "symbol", BigDecimal.valueOf(20));
    orderDataJSF.setOrderData(orderData);
    assertSame(orderData, orderDataJSF.getOrderData());
}
}