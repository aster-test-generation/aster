/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2EntityCollection_Test_Passing {
private static String initTime;
private static int hitCount;
PingServlet2Session2EntityCollection pingservlet2session2entitycollection;
ServletConfig servletConfig;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
private String stock;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservlet2session2entitycollection = new PingServlet2Session2EntityCollection();
        pingservlet2session2entitycollection.doPost(httpservletrequest, httpservletresponse);
        verify(pingservlet2session2entitycollection).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_pOtK0() throws ServletException, IOException {
    PingServlet2Session2EntityCollection pingServlet2Session2EntityCollection = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2Session2EntityCollection.doPost(req, res);
    verify(req, times(1)).getMethod();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_OhJh0() throws Exception {
    PingServlet2Session2EntityCollection pingServlet2Session2EntityCollection = new PingServlet2Session2EntityCollection();
    String result = pingServlet2Session2EntityCollection.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_rhQc0() throws Exception {
    PingServlet2Session2EntityCollection pingServlet = new PingServlet2Session2EntityCollection();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("userID")).thenReturn("user1");
    when(res.getContentType()).thenReturn("text/html");
    try {
        pingServlet.doGet(req, res);
        verify(res, times(1)).setContentType("text/html");
    } catch (IOException | ServletException e) {
        fail("Exception should not be thrown");
    }
}
}