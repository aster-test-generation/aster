/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2PDF_Test_Passing {
PingServlet2PDF pingservlet2pdf;
HttpServletRequest httpservletrequest;
HttpServletResponse httpservletresponse;
ServletOutputStream servletoutputstream;
private static int BUFFER_SIZE = 1024 * 8;
private static int hitCount = 0;
PingBean pingBean;
URL url;
URLConnection urlConnection;
BufferedInputStream bufferedInputStream;
BufferedOutputStream bufferedOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingservlet2pdf = new PingServlet2PDF();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservlet2pdf.doPost(httpservletrequest, httpservletresponse);
        verify(pingservlet2pdf).doGet(httpservletrequest, httpservletresponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingBean = mock(PingBean.class);
        url = mock(URL.class);
        urlConnection = mock(URLConnection.class);
        bufferedInputStream = mock(BufferedInputStream.class);
        bufferedOutputStream = mock(BufferedOutputStream.class);
        pingservlet2pdf = new PingServlet2PDF();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(new URL("http:")).thenReturn(url);
        when(url.openConnection()).thenReturn(urlConnection);
        when(urlConnection.getInputStream()).thenReturn(bufferedInputStream);
        when(new PingBean()).thenReturn(pingBean);
        pingservlet2pdf.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("application/pdf");
        verify(pingBean).setMsg("Hit Count: 1");
        verify(httpservletrequest).setAttribute("ab", pingBean);
        assertEquals(1, hitCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoPost_JmbY0() throws ServletException, IOException {
    PingServlet2PDF pingServlet2PDF = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2PDF.doPost(req, res);
    verify(req).getMethod();
    verify(res).getStatus();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_NullRequest_fOsE3() throws ServletException, IOException {
    PingServlet2PDF pingServlet2PDF = new PingServlet2PDF();
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingServlet2PDF.doGet(null, res);
    verify(res, times(1)).sendError(500, anyString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_NullResponse_iRgz4() throws ServletException, IOException {
    PingServlet2PDF pingServlet2PDF = new PingServlet2PDF();
    HttpServletRequest req = mock(HttpServletRequest.class);
    pingServlet2PDF.doGet(req, null);
}
}