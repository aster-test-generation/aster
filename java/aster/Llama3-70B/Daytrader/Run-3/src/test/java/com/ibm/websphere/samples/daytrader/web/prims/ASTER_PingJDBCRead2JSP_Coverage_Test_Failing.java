/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingJDBCRead2JSP_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testGetServletInfo_jDJD0() {
    try {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String actual = pingJDBCRead2JSP.getServletInfo();
        assertNotNull(actual);
    } catch (Exception e) {
        // Handle the exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_RndSymbol_ZPYN5_neBL0() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(TradeConfig.rndSymbol()).thenReturn("Test Symbol");
    pingJDBCRead2JSP.doGet(req, res);
    verify(req).setAttribute("quoteData", any(QuoteDataBean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetServletInfo_jDJD0_fid3() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
        String actual = pingJDBCRead2JSP.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_SymbolInitialization_WLWN2_rphA0_fid3() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doGet(req, res);
    verify(req).setAttribute("quoteData", any(QuoteDataBean.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_QuoteDataInitialization_WUIu3_bcgg0_fid3() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    pingJDBCRead2JSP.doGet(req, res);
    QuoteDataBean quoteData = (QuoteDataBean) req.getAttribute("quoteData");
    assertNotNull(quoteData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_ServletContextInitialization_jCyo4_rSxH0_fid3() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletConfig servletConfig = mock(ServletConfig.class);
    ServletContext ctx = mock(ServletContext.class);
    when(servletConfig.getServletContext()).thenReturn(ctx);
    pingJDBCRead2JSP.init(servletConfig);
    pingJDBCRead2JSP.doGet(req, res);
    ServletContext servletContext = pingJDBCRead2JSP.getServletConfig().getServletContext();
    assertNotNull(servletContext);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_LogError_ibco0_Bohr0_fid3() throws ServletException, IOException {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    Exception e = new Exception("Test Exception");
    Log log = mock(Log.class);
    doNothing().when(log).error(e, "PingJDBCRead2JPS -- error getting quote for symbol", "symbol");
    try {
        pingJDBCRead2JSP.doGet(req, res);
    } catch (Exception ex) {
        verify(log, times(1)).error(e, "PingJDBCRead2JPS -- error getting quote for symbol", "symbol");
    }
}
}