/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteData_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_XGhd0() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(0.50));
    assertEquals(BigDecimal.valueOf(0.500), quoteData.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_KpaM0() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("-5.00"), "symbol", new BigDecimal("1-5.00"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(new BigDecimal("-5.00"), gain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetGainPercent_XGhd0_fid2() {
    QuoteData quoteData = new QuoteData(BigDecimal.valueOf(10.0), BigDecimal.valueOf(5.0), "symbol");
    quoteData.setGainPercent(BigDecimal.valueOf(0.5));
    assertEquals(BigDecimal.valueOf(0.50), quoteData.getGainPercent());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpen_YSRa0_fid2() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("15.0"), "symbol");
    assertEquals(new BigDecimal("10.0"), quoteData.getOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGainPercent_MoQE0_fid2() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gainPercent = quoteData.getGainPercent();
    assertEquals(new BigDecimal("100.0"), gainPercent);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetGain_KpaM0_fid2() {
    QuoteData quoteData = new QuoteData(new BigDecimal("10.0"), new BigDecimal("5.0"), "symbol", new BigDecimal("15.0"), new BigDecimal("3.0"), "companyName", 100.0, 2.0);
    BigDecimal gain = quoteData.getGain();
    assertEquals(new BigDecimal("5.0"), gain);
}
}