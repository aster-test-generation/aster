/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Failing {
private Integer numberHoldings;
private TradeServices tradeAction;
private BigDecimal totalValue = new BigDecimal(0.0);
private ArrayList<HoldingData> holdingDatas;
private ExternalContext context;
private BigDecimal totalGain = new BigDecimal(0.0);
private BigDecimal totalBasis = new BigDecimal(0.0);
PortfolioJSF portfoliojsf;
HttpSession httpsession;
ExternalContext externalcontext;
TradeServices tradeServices;
private String holdingID;
private int quantity;
private double purchasePrice;
private String quoteID;
private double price;
private HtmlDataTable dataTable;
HoldingData holdingData;
OrderDataBean orderDataBean;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberHoldings_IJks0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio();
    assertEquals(0, portfolioJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSumOfCashHoldings_jtLY0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio(); // call the method under test
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    portfolioJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, portfolioJSF.getSumOfCashHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalGainPercent_Mbuy0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio(); // call the method under test
    assertNull(portfolioJSF.getTotalGainPercent()); // assertion
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataTable_Buwf0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    portfolioJSF.setDataTable(dataTable);
    assertNotNull(portfolioJSF.getDataTable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalValue_NrSa0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio(); // Call the method under test
    assertNotNull(portfolioJSF.getTotalValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotalGain_yTgl0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGain = new BigDecimal("10.0");
    portfolioJSF.setTotalGain(totalGain);
    assertEquals(totalGain, portfolioJSF.getTotalGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalGain_xxUP0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio(); // call the method under test
    assertNotNull(portfolioJSF.getTotalGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenBalance_hVfw0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal openBalance = BigDecimal.valueOf(100.0);
    portfolioJSF.setOpenBalance(openBalance);
    verify(services, times(1)).get();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalBasis_OdTx0() {
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(mock(TradeServices.class));
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio(); // Call the method under test
    assertNotNull(portfolioJSF.getTotalBasis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPortfolio() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.getPortfolio();
    assertNotNull(portfolioJSF.getHoldingDatas());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_xzgU0() {
    TradeServices tradeServices = mock(TradeServices.class);
    Instance<TradeServices> services = mock(Instance.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    portfolioJSF.setBalance(balance);
    assertEquals(balance, portfolioJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotalValue_Jkvb0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalValue = new BigDecimal("100.0");
    portfolioJSF.setTotalValue(totalValue);
    assertEquals(totalValue, portfolioJSF.getTotalValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetNumberHoldings_IJks0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    assertEquals(0, portfolioJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSumOfCashHoldings_jtLY0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal sumOfCashHoldings = new BigDecimal("100.0");
    portfolioJSF.setSumOfCashHoldings(sumOfCashHoldings);
    assertEquals(sumOfCashHoldings, portfolioJSF.getSumOfCashHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalGainPercent_Mbuy0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getTotalGainPercent();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDataTable_Buwf0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    HtmlDataTable dataTable = mock(HtmlDataTable.class);
    portfolioJSF.setDataTable(dataTable);
    assertSame(dataTable, portfolioJSF.getDataTable());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalValue_NrSa0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getTotalValue();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldingDatas_MzUG0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> result = portfolioJSF.getHoldingDatas();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotalGain_yTgl0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGain = new BigDecimal("10.0");
    portfolioJSF.setTotalGain(totalGain);
    assertEquals(totalGain, portfolioJSF.getTotalGain());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalGain_xxUP0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalGain = portfolioJSF.getTotalGain();
    assertNotNull(totalGain);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenBalance_hVfw0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal openBalance = BigDecimal.valueOf(100.0);
    portfolioJSF.setOpenBalance(openBalance);
    assertEquals(openBalance, portfolioJSF.getOpenBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalBasis_OdTx0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalBasis = portfolioJSF.getTotalBasis();
    assertNotNull(totalBasis);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHoldingsTotal_auWs0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal holdingsTotal = new BigDecimal("100.0");
    portfolioJSF.setHoldingsTotal(holdingsTotal);
    assertEquals(holdingsTotal, portfolioJSF.getHoldingsTotal());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNumberHoldings_Upqe0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    portfolioJSF.setNumberHoldings(5);
    assertEquals(5, portfolioJSF.getNumberHoldings());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetOpenBalance_NKiK0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal openBalance = portfolioJSF.getOpenBalance();
    assertNotNull(openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSumOfCashHoldings_Sljt0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getSumOfCashHoldings();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBalance_SZti0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal balance = portfolioJSF.getBalance();
    assertNotNull(balance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataTable_rCjE0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    HtmlDataTable dataTable = portfolioJSF.getDataTable();
    assertNotNull(dataTable);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHoldingDatas_bOss0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    ArrayList<HoldingData> holdingDatas = new ArrayList<>();
    holdingDatas.add(new HoldingData());
    portfolioJSF.setHoldingDatas(holdingDatas);
    assertEquals(holdingDatas, portfolioJSF.getHoldingDatas());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldingsTotal_SSLQ0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal result = portfolioJSF.getHoldingsTotal();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBalance_xzgU0_fid2() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal balance = new BigDecimal("100.0");
    portfolioJSF.setBalance(balance);
    assertEquals(balance, portfolioJSF.getBalance());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTotalBasis_aTBU0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    BigDecimal totalBasis = new BigDecimal("100.0");
    portfolioJSF.setTotalBasis(totalBasis);
    assertEquals(totalBasis, portfolioJSF.getTotalBasis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTotalGainPercentHTML_rCWa0_bxJH0() {
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    PortfolioJSF portfolioJSF = new PortfolioJSF(services);
    when(portfolioJSF.getTotalGainPercent()).thenReturn(BigDecimal.valueOf(10.0d));
    assertEquals(FinancialUtils.printGainPercentHTML(BigDecimal.valueOf(10.0d)), portfolioJSF.getTotalGainPercentHTML());
}
}