/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
TradeDirect tradedirect;
DataSource datasource;
Connection connection;
Statement statement;
MDBStats mdbStats;
Object[] sqlBuffer;
private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
private static Integer marketSummaryLock = new Integer(0);
private static long nextMarketSummary = System.currentTimeMillis();
PreparedStatement preparedstatement;
ResultSet resultset;
TradeConfig tradeConfig;
private static String getAllQuotesSQL = "select * from quoteejb q";
QuoteDataBean quoteDataBean;
private boolean inSession = false;
TradeDirect tradeDirect;
PreparedStatement preparedStatement;
ResultSet resultSet;
DataSource dataSource;
OrderDataBean orderDataBean;
private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
AccountDataBean accountDataBean;
private static String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
Log log;
AccountProfileDataBean profileData;
AccountProfileDataBean accountProfileDataBean;
private static final String userID = "testUser";
private static final String getClosedOrdersSQL = "select a.accountid from accountejb a where a.profile_userid = ?";
private ManagedExecutorService mes;
private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
private static BigDecimal ZERO = new BigDecimal(0.0);
private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
private DataSource createMockDataSource() {
    return Mockito.mock(DataSource.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_1() throws Exception {
    connection = mock(Connection.class);
    preparedstatement = mock(PreparedStatement.class);
    datasource = mock(DataSource.class);
    resultset = mock(ResultSet.class);
    tradeConfig = mock(TradeConfig.class);
    tradedirect = new TradeDirect();
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class), any(), any())).thenReturn(preparedstatement);
    when(preparedstatement.executeQuery()).thenReturn(resultset);
    when(tradeConfig.getMarketSummaryInterval()).thenReturn(10); // some non-zero value
    MarketSummaryDataBean marketSummary = tradedirect.getMarketSummary();
    assertNotNull(marketSummary);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_InSessionFalse_TwoPhaseTrue_Crus1() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_exceptionThrown_MSmh6() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getMarketSummary();
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_exception_gTXM1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1;
    boolean twoPhase = true;
    Connection conn = null; // mock connection
    try {
        tradeDirect.completeOrder(orderID, twoPhase);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_vcRw0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_MkRZ1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("sell");
    orderData.setOrderStatus("open");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_gaqF2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(BigDecimal.valueOf(100.0));
    orderData.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
        assertNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_BuyOrder_rXdT0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
        assertEquals(marketSummaryDataBean.getOpenTSIA(), result.getOpenTSIA());
        assertEquals(marketSummaryDataBean.getGainPercent(), result.getGainPercent());
        assertEquals(marketSummaryDataBean.getSummaryDate(), result.getSummaryDate());
        assertEquals(marketSummaryDataBean.getTSIA(), result.getTSIA());
        assertEquals(marketSummaryDataBean.getVolume(), result.getVolume());
        assertEquals(marketSummaryDataBean.getTopGainers(), result.getTopGainers());
        assertEquals(marketSummaryDataBean.getTopLosers(), result.getTopLosers());
    } catch (Exception e) {
        // Ignore
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_buyOrder_xnRK0() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_sellOrder_Faxh1() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("sell");
    orderDataBean.setOrderStatus("open");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        OrderDataBean result = tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        assertNotNull(result);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_cancelledOrder_ICez2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderData = OrderDataBean.getRandomInstance();
    orderData.setOrderType("buy");
    orderData.setOrderStatus("cancelled");
    orderData.setQuantity(10.0);
    orderData.setPrice(new BigDecimal(100.0));
    orderData.setSymbol("ABC");
    Integer orderID = 1;
    try {
        MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
        assertNotNull(result);
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrder_CancelledOrder_TZiw2() {
    TradeDirect tradeDirect = new TradeDirect();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    orderDataBean.setOrderType("buy");
    orderDataBean.setOrderStatus("cancelled");
    orderDataBean.setQuantity(10.0);
    orderDataBean.setPrice(BigDecimal.valueOf(100.0));
    orderDataBean.setOrderID(1);
    try {
        tradeDirect.completeOrder(orderDataBean.getOrderID(), true);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetHoldings_Exception_nbwp1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getHoldings(null);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginInvalidPassword_Pwpl2() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login("validUser", "invalidPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoginNullUser_RwOU3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.login(null, "validPassword");
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetImpl_uSQC0() {
    TradeDirect tradeDirect = new TradeDirect();
    assertEquals(TradeConfig.DIRECT, tradeDirect.getImpl());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClosedOrders_ThrowsException_KgiY1() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.getClosedOrders(null);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell13_jSOc12() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell("userID", new Integer(1), -1);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell14_KfsB13() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.sell("userID", new Integer(1), 4);
        fail("Expected Exception");
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidUserID_KnPc3() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy(null, "symbol", 10.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidSymbol_nIRE4() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", null, 10.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidQuantity_HaMI5() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", "symbol", 0.0, TradeConfig.SYNCH);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_InvalidOrderProcessingMode_aBiA6() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        tradeDirect.buy("userID", "symbol", 10.0, -1);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_HoldingDataBeanNull_cBfo9() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        HoldingDataBean holdingDataBean = null;
        tradeDirect.createOrder(null, null, holdingDataBean, "buy", 10.0);
        fail("Expected Exception");
    } catch (Exception e) {
        assertNotNull(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_ZZXi0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertTrue(marketSummaryData.getVolume() >= 0);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_oVnO0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        if(marketSummaryData.getTopGainers().size() > 0) {
            assertNotNull(marketSummaryData.getGainPercent());
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_dSpI0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        assertNotNull(marketSummaryData.getGainPercent());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_vexb0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
        if(marketSummaryData.getTSIA() != null && marketSummaryData.getOpenTSIA() != null) {
            assertNotNull(marketSummaryData.getGainPercent());
        }
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_xYVx0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_WkhO0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertTrue(marketSummaryData.getVolume() >= 0);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthZero_EVyZ0_PIcG0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[0];
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_BhJd0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertEquals(0, marketSummaryDataBean.getGainPercent().doubleValue(), 0.01);
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.01);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthMultiple_fWgg2_GUIZ0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table1 (id INT)", "CREATE TABLE test_table2 (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_BjDT0_MrEi0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    } catch (NullPointerException e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferLengthOne_SOUK1_MvTd0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = new java.io.PrintWriter(System.out);
    try {
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(result);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRecreateDBTables_SqlBufferNotNull_OutNull_WQfz2_rZwm0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[] {"CREATE TABLE test_table (id INT)"};
    java.io.PrintWriter out = null;
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal(); 
        Assertions.assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal2_Ngbc1_uYNb0() {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null;
    try {
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
    } finally {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal1_tJEG0_ZadC0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
    }
    assertNull(marketSummaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetAllQuotes_zrFJ0_gFqM0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Log.error("TradeDirect:testGetAllQuotes -- error getting market summary", e);
    }
    assertNull(marketSummaryData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal5_hWfr4_YZwP0() {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = null;
    try {
        marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuote_wfSY0_xGKk0() {
    TradeDirect tradeDirect = new TradeDirect();
    QuoteDataBean quoteDataBean = null;
    try {
        quoteDataBean = tradeDirect.getMarketSummaryInternal().getTopGainers().iterator().next();
    } catch (Exception e) {
    }
    if (quoteDataBean != null) {
        assertNotNull(quoteDataBean.getSymbol());
        assertNotNull(quoteDataBean.getCompanyName());
        assertNotNull(quoteDataBean.getPrice());
        assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
        assertEquals(0.0, quoteDataBean.getChange(), 0.0);
        assertNotNull(quoteDataBean.getOpen());
        assertNotNull(quoteDataBean.getLow());
        assertNotNull(quoteDataBean.getHigh());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummaryInternal_gzcs0_TaLh0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_pGfo0_ebEm0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        Assertions.fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_ssjA0_crIT0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_gyFL2_mMWv0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_bjkh1_oAUq0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell8_wBXQ7_hjLv0() {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeSynch_jkPC3_yvEx0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(false);
    try {
        OrderDataBean orderDataBean = tradeDirect.sell(userID, holdingID, orderProcessingMode);
        assertNull(orderDataBean);
    } catch (Exception e) {
        // Exception is expected
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_2Phase_Grft0_zYxl0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeSynch_NypI2_lpvf0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNull(marketSummaryDataBean);
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionFalse_OrderProcessingModeAsynch_2Phase_Knla1_DICQ0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    tradeDirect.setInSession(false);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (Exception e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell_InSessionTrue_OrderProcessingModeAsynch_tuPI4_ftUB0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "userID";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    tradeDirect.setInSession(true);
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
    } catch (Exception e) {
        fail("Exception occurred: " + e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy_AsynchMode_XSTf1_jZVo0() {
    TradeDirect tradeDirect = new TradeDirect();
    try {
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    } catch (NullPointerException e) {
        assertEquals("Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.datasource\" is null", e.getMessage());
    } catch (Exception e) {
        fail("Unexpected exception occurred: " + e.getMessage());
    }
}
}